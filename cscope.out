cscope 15 /usr/local/src/nginx-1.8.0 -q 0000014031 0003893158
	@objs/ngx_auto_config.h

1 
	#NGX_CONFIGURE
 " --sbö-∑th=/u§/loˇl/ngöx/ngöx --c⁄f-∑th=/u§/loˇl/ngöx/ngöx.c⁄‡--pid-∑th=/u§/loˇl/ngöx/ngöx.pid --wôh-hâp_s¶_moduÀ --wôh-p¸e=/u§/loˇl/§c/p¸e-8.36 --wôh-zlib=/u§/loˇl/§c/zlib-1.2.8 --wôh-›ís¶=/u§/loˇl/§c/›ís¶-1.0.1¯--wôh-debug"

	)

3 #i‚de‡
NGX_DEBUG


4 
	#NGX_DEBUG
 1

	)

8 #i‚de‡
NGX_COMPILER


9 
	#NGX_COMPILER
 "gc¯4.9.2 (Ubu¡u 4.9.2-10ubu¡u13Ë"

	)

13 #i‚de‡
NGX_HAVE_GCC_ATOMIC


14 
	#NGX_HAVE_GCC_ATOMIC
 1

	)

18 #i‚de‡
NGX_HAVE_C99_VARIADIC_MACROS


19 
	#NGX_HAVE_C99_VARIADIC_MACROS
 1

	)

23 #i‚de‡
NGX_HAVE_GCC_VARIADIC_MACROS


24 
	#NGX_HAVE_GCC_VARIADIC_MACROS
 1

	)

28 #i‚de‡
NGX_HAVE_EPOLL


29 
	#NGX_HAVE_EPOLL
 1

	)

33 #i‚de‡
NGX_HAVE_CLEAR_EVENT


34 
	#NGX_HAVE_CLEAR_EVENT
 1

	)

38 #i‚de‡
NGX_HAVE_EPOLLRDHUP


39 
	#NGX_HAVE_EPOLLRDHUP
 1

	)

43 #i‚de‡
NGX_HAVE_O_PATH


44 
	#NGX_HAVE_O_PATH
 1

	)

48 #i‚de‡
NGX_HAVE_SENDFILE


49 
	#NGX_HAVE_SENDFILE
 1

	)

53 #i‚de‡
NGX_HAVE_SENDFILE64


54 
	#NGX_HAVE_SENDFILE64
 1

	)

58 #i‚de‡
NGX_HAVE_PR_SET_DUMPABLE


59 
	#NGX_HAVE_PR_SET_DUMPABLE
 1

	)

63 #i‚de‡
NGX_HAVE_SCHED_SETAFFINITY


64 
	#NGX_HAVE_SCHED_SETAFFINITY
 1

	)

68 #i‚de‡
NGX_HAVE_GNU_CRYPT_R


69 
	#NGX_HAVE_GNU_CRYPT_R
 1

	)

73 #i‚de‡
NGX_HAVE_NONALIGNED


74 
	#NGX_HAVE_NONALIGNED
 1

	)

78 #i‚de‡
NGX_CPU_CACHE_LINE


79 
	#NGX_CPU_CACHE_LINE
 32

	)

83 
	#NGX_KQUEUE_UDATA_T
 (*)

	)

86 #i‚de‡
NGX_HAVE_POSIX_FADVISE


87 
	#NGX_HAVE_POSIX_FADVISE
 1

	)

91 #i‚de‡
NGX_HAVE_O_DIRECT


92 
	#NGX_HAVE_O_DIRECT
 1

	)

96 #i‚de‡
NGX_HAVE_ALIGNED_DIRECTIO


97 
	#NGX_HAVE_ALIGNED_DIRECTIO
 1

	)

101 #i‚de‡
NGX_HAVE_STATFS


102 
	#NGX_HAVE_STATFS
 1

	)

106 #i‚de‡
NGX_HAVE_STATVFS


107 
	#NGX_HAVE_STATVFS
 1

	)

111 #i‚de‡
NGX_HAVE_SCHED_YIELD


112 
	#NGX_HAVE_SCHED_YIELD
 1

	)

116 #i‚de‡
NGX_HAVE_DEFERRED_ACCEPT


117 
	#NGX_HAVE_DEFERRED_ACCEPT
 1

	)

121 #i‚de‡
NGX_HAVE_KEEPALIVE_TUNABLE


122 
	#NGX_HAVE_KEEPALIVE_TUNABLE
 1

	)

126 #i‚de‡
NGX_HAVE_TCP_FASTOPEN


127 
	#NGX_HAVE_TCP_FASTOPEN
 1

	)

131 #i‚de‡
NGX_HAVE_TCP_INFO


132 
	#NGX_HAVE_TCP_INFO
 1

	)

136 #i‚de‡
NGX_HAVE_ACCEPT4


137 
	#NGX_HAVE_ACCEPT4
 1

	)

141 #i‚de‡
NGX_HAVE_EVENTFD


142 
	#NGX_HAVE_EVENTFD
 1

	)

146 #i‚de‡
NGX_HAVE_SYS_EVENTFD_H


147 
	#NGX_HAVE_SYS_EVENTFD_H
 1

	)

151 #i‚de‡
NGX_HAVE_UNIX_DOMAIN


152 
	#NGX_HAVE_UNIX_DOMAIN
 1

	)

156 #i‚de‡
NGX_PTR_SIZE


157 
	#NGX_PTR_SIZE
 4

	)

161 #i‚de‡
NGX_SIG_ATOMIC_T_SIZE


162 
	#NGX_SIG_ATOMIC_T_SIZE
 4

	)

166 #i‚de‡
NGX_HAVE_LITTLE_ENDIAN


167 
	#NGX_HAVE_LITTLE_ENDIAN
 1

	)

171 #i‚de‡
NGX_MAX_SIZE_T_VALUE


172 
	#NGX_MAX_SIZE_T_VALUE
 2147483647

	)

176 #i‚de‡
NGX_SIZE_T_LEN


177 
	#NGX_SIZE_T_LEN
 (("-2147483648"Ë- 1)

	)

181 #i‚de‡
NGX_MAX_OFF_T_VALUE


182 
	#NGX_MAX_OFF_T_VALUE
 9223372036854775807LL

	)

186 #i‚de‡
NGX_OFF_T_LEN


187 
	#NGX_OFF_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

191 #i‚de‡
NGX_TIME_T_SIZE


192 
	#NGX_TIME_T_SIZE
 4

	)

196 #i‚de‡
NGX_TIME_T_LEN


197 
	#NGX_TIME_T_LEN
 (("-2147483648"Ë- 1)

	)

201 #i‚de‡
NGX_MAX_TIME_T_VALUE


202 
	#NGX_MAX_TIME_T_VALUE
 2147483647

	)

206 #i‚de‡
NGX_HAVE_PREAD


207 
	#NGX_HAVE_PREAD
 1

	)

211 #i‚de‡
NGX_HAVE_PWRITE


212 
	#NGX_HAVE_PWRITE
 1

	)

216 #i‚de‡
NGX_SYS_NERR


217 
	#NGX_SYS_NERR
 135

	)

221 #i‚de‡
NGX_HAVE_LOCALTIME_R


222 
	#NGX_HAVE_LOCALTIME_R
 1

	)

226 #i‚de‡
NGX_HAVE_POSIX_MEMALIGN


227 
	#NGX_HAVE_POSIX_MEMALIGN
 1

	)

231 #i‚de‡
NGX_HAVE_MEMALIGN


232 
	#NGX_HAVE_MEMALIGN
 1

	)

236 #i‚de‡
NGX_HAVE_MAP_ANON


237 
	#NGX_HAVE_MAP_ANON
 1

	)

241 #i‚de‡
NGX_HAVE_MAP_DEVZERO


242 
	#NGX_HAVE_MAP_DEVZERO
 1

	)

246 #i‚de‡
NGX_HAVE_SYSVSHM


247 
	#NGX_HAVE_SYSVSHM
 1

	)

251 #i‚de‡
NGX_HAVE_POSIX_SEM


252 
	#NGX_HAVE_POSIX_SEM
 1

	)

256 #i‚de‡
NGX_HAVE_MSGHDR_MSG_CONTROL


257 
	#NGX_HAVE_MSGHDR_MSG_CONTROL
 1

	)

261 #i‚de‡
NGX_HAVE_FIONBIO


262 
	#NGX_HAVE_FIONBIO
 1

	)

266 #i‚de‡
NGX_HAVE_GMTOFF


267 
	#NGX_HAVE_GMTOFF
 1

	)

271 #i‚de‡
NGX_HAVE_D_TYPE


272 
	#NGX_HAVE_D_TYPE
 1

	)

276 #i‚de‡
NGX_HAVE_SC_NPROCESSORS_ONLN


277 
	#NGX_HAVE_SC_NPROCESSORS_ONLN
 1

	)

281 #i‚de‡
NGX_HAVE_OPENAT


282 
	#NGX_HAVE_OPENAT
 1

	)

286 #i‚de‡
NGX_HAVE_GETADDRINFO


287 
	#NGX_HAVE_GETADDRINFO
 1

	)

291 #i‚de‡
NGX_HTTP_CACHE


292 
	#NGX_HTTP_CACHE
 1

	)

296 #i‚de‡
NGX_HTTP_GZIP


297 
	#NGX_HTTP_GZIP
 1

	)

301 #i‚de‡
NGX_HTTP_SSI


302 
	#NGX_HTTP_SSI
 1

	)

306 #i‚de‡
NGX_CRYPT


307 
	#NGX_CRYPT
 1

	)

311 #i‚de‡
NGX_HTTP_X_FORWARDED_FOR


312 
	#NGX_HTTP_X_FORWARDED_FOR
 1

	)

316 #i‚de‡
NGX_HTTP_SSL


317 
	#NGX_HTTP_SSL
 1

	)

321 #i‚de‡
NGX_HTTP_X_FORWARDED_FOR


322 
	#NGX_HTTP_X_FORWARDED_FOR
 1

	)

326 #i‚de‡
NGX_PCRE


327 
	#NGX_PCRE
 1

	)

331 #i‚de‡
NGX_OPENSSL


332 
	#NGX_OPENSSL
 1

	)

336 #i‚de‡
NGX_SSL


337 
	#NGX_SSL
 1

	)

341 #i‚de‡
NGX_HAVE_OPENSSL_MD5_H


342 
	#NGX_HAVE_OPENSSL_MD5_H
 1

	)

346 #i‚de‡
NGX_OPENSSL_MD5


347 
	#NGX_OPENSSL_MD5
 1

	)

351 #i‚de‡
NGX_HAVE_MD5


352 
	#NGX_HAVE_MD5
 1

	)

356 #i‚de‡
NGX_HAVE_OPENSSL_SHA1_H


357 
	#NGX_HAVE_OPENSSL_SHA1_H
 1

	)

361 #i‚de‡
NGX_HAVE_SHA1


362 
	#NGX_HAVE_SHA1
 1

	)

366 #i‚de‡
NGX_ZLIB


367 
	#NGX_ZLIB
 1

	)

371 #i‚de‡
NGX_PREFIX


372 
	#NGX_PREFIX
 "/u§/loˇl/ngöx/"

	)

376 #i‚de‡
NGX_CONF_PREFIX


377 
	#NGX_CONF_PREFIX
 "/u§/loˇl/ngöx/"

	)

381 #i‚de‡
NGX_SBIN_PATH


382 
	#NGX_SBIN_PATH
 "/u§/loˇl/ngöx/ngöx"

	)

386 #i‚de‡
NGX_CONF_PATH


387 
	#NGX_CONF_PATH
 "/u§/loˇl/ngöx/ngöx.c⁄f"

	)

391 #i‚de‡
NGX_PID_PATH


392 
	#NGX_PID_PATH
 "/u§/loˇl/ngöx/ngöx.pid"

	)

396 #i‚de‡
NGX_LOCK_PATH


397 
	#NGX_LOCK_PATH
 "logs/ngöx.lock"

	)

401 #i‚de‡
NGX_ERROR_LOG_PATH


402 
	#NGX_ERROR_LOG_PATH
 "logs/îr‹.log"

	)

406 #i‚de‡
NGX_HTTP_LOG_PATH


407 
	#NGX_HTTP_LOG_PATH
 "logs/ac˚ss.log"

	)

411 #i‚de‡
NGX_HTTP_CLIENT_TEMP_PATH


412 
	#NGX_HTTP_CLIENT_TEMP_PATH
 "˛õ¡_body_ãmp"

	)

416 #i‚de‡
NGX_HTTP_PROXY_TEMP_PATH


417 
	#NGX_HTTP_PROXY_TEMP_PATH
 "¥oxy_ãmp"

	)

421 #i‚de‡
NGX_HTTP_FASTCGI_TEMP_PATH


422 
	#NGX_HTTP_FASTCGI_TEMP_PATH
 "Á°cgi_ãmp"

	)

426 #i‚de‡
NGX_HTTP_UWSGI_TEMP_PATH


427 
	#NGX_HTTP_UWSGI_TEMP_PATH
 "uwsgi_ãmp"

	)

431 #i‚de‡
NGX_HTTP_SCGI_TEMP_PATH


432 
	#NGX_HTTP_SCGI_TEMP_PATH
 "scgi_ãmp"

	)

436 #i‚de‡
NGX_SUPPRESS_WARN


437 
	#NGX_SUPPRESS_WARN
 1

	)

441 #i‚de‡
NGX_SMP


442 
	#NGX_SMP
 1

	)

446 #i‚de‡
NGX_USER


447 
	#NGX_USER
 "nobody"

	)

451 #i‚de‡
NGX_GROUP


452 
	#NGX_GROUP
 "nogroup"

	)

	@objs/ngx_auto_headers.h

3 #i‚de‡
NGX_HAVE_UNISTD_H


4 
	#NGX_HAVE_UNISTD_H
 1

	)

8 #i‚de‡
NGX_HAVE_INTTYPES_H


9 
	#NGX_HAVE_INTTYPES_H
 1

	)

13 #i‚de‡
NGX_HAVE_LIMITS_H


14 
	#NGX_HAVE_LIMITS_H
 1

	)

18 #i‚de‡
NGX_HAVE_SYS_PARAM_H


19 
	#NGX_HAVE_SYS_PARAM_H
 1

	)

23 #i‚de‡
NGX_HAVE_SYS_MOUNT_H


24 
	#NGX_HAVE_SYS_MOUNT_H
 1

	)

28 #i‚de‡
NGX_HAVE_SYS_STATVFS_H


29 
	#NGX_HAVE_SYS_STATVFS_H
 1

	)

33 #i‚de‡
NGX_HAVE_CRYPT_H


34 
	#NGX_HAVE_CRYPT_H
 1

	)

38 #i‚de‡
NGX_LINUX


39 
	#NGX_LINUX
 1

	)

43 #i‚de‡
NGX_HAVE_SYS_PRCTL_H


44 
	#NGX_HAVE_SYS_PRCTL_H
 1

	)

48 #i‚de‡
NGX_HAVE_SYS_VFS_H


49 
	#NGX_HAVE_SYS_VFS_H
 1

	)

	@objs/ngx_modules.c

2 
	~<ngx_c⁄fig.h
>

3 
	~<ngx_c‹e.h
>

7 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

8 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

9 
ngx_moduÀ_t
 
ngx_c⁄f_moduÀ
;

10 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

11 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

12 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

13 
ngx_moduÀ_t
 
ngx_›ís¶_moduÀ
;

14 
ngx_moduÀ_t
 
ngx_ªgex_moduÀ
;

15 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

16 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_hâp_log_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_hâp_°©ic_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_hâp_autoödex_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_hâp_ödex_moduÀ
;

22 
ngx_moduÀ_t
 
ngx_hâp_auth_basic_moduÀ
;

23 
ngx_moduÀ_t
 
ngx_hâp_ac˚ss_moduÀ
;

24 
ngx_moduÀ_t
 
ngx_hâp_limô_c⁄n_moduÀ
;

25 
ngx_moduÀ_t
 
ngx_hâp_limô_ªq_moduÀ
;

26 
ngx_moduÀ_t
 
ngx_hâp_geo_moduÀ
;

27 
ngx_moduÀ_t
 
ngx_hâp_m≠_moduÀ
;

28 
ngx_moduÀ_t
 
ngx_hâp_•lô_˛õ¡s_moduÀ
;

29 
ngx_moduÀ_t
 
ngx_hâp_ª„ªr_moduÀ
;

30 
ngx_moduÀ_t
 
ngx_hâp_ªwrôe_moduÀ
;

31 
ngx_moduÀ_t
 
ngx_hâp_s¶_moduÀ
;

32 
ngx_moduÀ_t
 
ngx_hâp_¥oxy_moduÀ
;

33 
ngx_moduÀ_t
 
ngx_hâp_Á°cgi_moduÀ
;

34 
ngx_moduÀ_t
 
ngx_hâp_uwsgi_moduÀ
;

35 
ngx_moduÀ_t
 
ngx_hâp_scgi_moduÀ
;

36 
ngx_moduÀ_t
 
ngx_hâp_memˇched_moduÀ
;

37 
ngx_moduÀ_t
 
ngx_hâp_em±y_gif_moduÀ
;

38 
ngx_moduÀ_t
 
ngx_hâp_brow£r_moduÀ
;

39 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_hash_moduÀ
;

40 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_ù_hash_moduÀ
;

41 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
;

42 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_kì∑live_moduÀ
;

43 
ngx_moduÀ_t
 
ngx_hâp_wrôe_fûãr_moduÀ
;

44 
ngx_moduÀ_t
 
ngx_hâp_hódî_fûãr_moduÀ
;

45 
ngx_moduÀ_t
 
ngx_hâp_chunked_fûãr_moduÀ
;

46 
ngx_moduÀ_t
 
ngx_hâp_ønge_hódî_fûãr_moduÀ
;

47 
ngx_moduÀ_t
 
ngx_hâp_gzù_fûãr_moduÀ
;

48 
ngx_moduÀ_t
 
ngx_hâp_po°p⁄e_fûãr_moduÀ
;

49 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

50 
ngx_moduÀ_t
 
ngx_hâp_ch¨£t_fûãr_moduÀ
;

51 
ngx_moduÀ_t
 
ngx_hâp_u£rid_fûãr_moduÀ
;

52 
ngx_moduÀ_t
 
ngx_hâp_hódîs_fûãr_moduÀ
;

53 
ngx_moduÀ_t
 
ngx_hâp_c›y_fûãr_moduÀ
;

54 
ngx_moduÀ_t
 
ngx_hâp_ønge_body_fûãr_moduÀ
;

55 
ngx_moduÀ_t
 
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
;

57 
ngx_moduÀ_t
 *
	gngx_moduÀs
[] = {

58 &
ngx_c‹e_moduÀ
,

59 &
ngx_îæog_moduÀ
,

60 &
ngx_c⁄f_moduÀ
,

61 &
ngx_evíts_moduÀ
,

62 &
ngx_evít_c‹e_moduÀ
,

63 &
ngx_ïﬁl_moduÀ
,

64 &
ngx_›ís¶_moduÀ
,

65 &
ngx_ªgex_moduÀ
,

66 &
ngx_hâp_moduÀ
,

67 &
ngx_hâp_c‹e_moduÀ
,

68 &
ngx_hâp_log_moduÀ
,

69 &
ngx_hâp_up°ªam_moduÀ
,

70 &
ngx_hâp_°©ic_moduÀ
,

71 &
ngx_hâp_autoödex_moduÀ
,

72 &
ngx_hâp_ödex_moduÀ
,

73 &
ngx_hâp_auth_basic_moduÀ
,

74 &
ngx_hâp_ac˚ss_moduÀ
,

75 &
ngx_hâp_limô_c⁄n_moduÀ
,

76 &
ngx_hâp_limô_ªq_moduÀ
,

77 &
ngx_hâp_geo_moduÀ
,

78 &
ngx_hâp_m≠_moduÀ
,

79 &
ngx_hâp_•lô_˛õ¡s_moduÀ
,

80 &
ngx_hâp_ª„ªr_moduÀ
,

81 &
ngx_hâp_ªwrôe_moduÀ
,

82 &
ngx_hâp_s¶_moduÀ
,

83 &
ngx_hâp_¥oxy_moduÀ
,

84 &
ngx_hâp_Á°cgi_moduÀ
,

85 &
ngx_hâp_uwsgi_moduÀ
,

86 &
ngx_hâp_scgi_moduÀ
,

87 &
ngx_hâp_memˇched_moduÀ
,

88 &
ngx_hâp_em±y_gif_moduÀ
,

89 &
ngx_hâp_brow£r_moduÀ
,

90 &
ngx_hâp_up°ªam_hash_moduÀ
,

91 &
ngx_hâp_up°ªam_ù_hash_moduÀ
,

92 &
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
,

93 &
ngx_hâp_up°ªam_kì∑live_moduÀ
,

94 &
ngx_hâp_wrôe_fûãr_moduÀ
,

95 &
ngx_hâp_hódî_fûãr_moduÀ
,

96 &
ngx_hâp_chunked_fûãr_moduÀ
,

97 &
ngx_hâp_ønge_hódî_fûãr_moduÀ
,

98 &
ngx_hâp_gzù_fûãr_moduÀ
,

99 &
ngx_hâp_po°p⁄e_fûãr_moduÀ
,

100 &
ngx_hâp_ssi_fûãr_moduÀ
,

101 &
ngx_hâp_ch¨£t_fûãr_moduÀ
,

102 &
ngx_hâp_u£rid_fûãr_moduÀ
,

103 &
ngx_hâp_hódîs_fûãr_moduÀ
,

104 &
ngx_hâp_c›y_fûãr_moduÀ
,

105 &
ngx_hâp_ønge_body_fûãr_moduÀ
,

106 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ
,

107 
NULL


	@src/core/nginx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
);

15 
ngx_öt_t
 
ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
);

16 
ngx_öt_t
 
ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
);

17 *
ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

18 *
ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

19 *
ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

20 *
ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

21 *
ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

22 *
ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_íum_t
 
	gngx_debug_poöts
[] = {

29 { 
ngx_°rög
("°›"), 
NGX_DEBUG_POINTS_STOP
 },

30 { 
ngx_°rög
("ab‹t"), 
NGX_DEBUG_POINTS_ABORT
 },

31 { 
ngx_nuŒ_°rög
, 0 }

35 
ngx_comm™d_t
 
	gngx_c‹e_comm™ds
[] = {

37 { 
ngx_°rög
("daemon"),

38 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

39 
ngx_c⁄f_£t_Êag_¶Ÿ
,

41 
off£tof
(
ngx_c‹e_c⁄f_t
, 
d´m⁄
),

42 
NULL
 },

44 { 
ngx_°rög
("master_process"),

45 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

46 
ngx_c⁄f_£t_Êag_¶Ÿ
,

48 
off£tof
(
ngx_c‹e_c⁄f_t
, 
ma°î
),

49 
NULL
 },

51 { 
ngx_°rög
("timer_resolution"),

52 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

53 
ngx_c⁄f_£t_m£c_¶Ÿ
,

55 
off£tof
(
ngx_c‹e_c⁄f_t
, 
timî_ªsﬁuti⁄
),

56 
NULL
 },

58 { 
ngx_°rög
("pid"),

59 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_°r_¶Ÿ
,

62 
off£tof
(
ngx_c‹e_c⁄f_t
, 
pid
),

63 
NULL
 },

65 { 
ngx_°rög
("lock_file"),

66 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_°r_¶Ÿ
,

69 
off£tof
(
ngx_c‹e_c⁄f_t
, 
lock_fûe
),

70 
NULL
 },

72 { 
ngx_°rög
("worker_processes"),

73 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

74 
ngx_£t_w‹kî_¥o˚s£s
,

77 
NULL
 },

79 { 
ngx_°rög
("debug_points"),

80 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

81 
ngx_c⁄f_£t_íum_¶Ÿ
,

83 
off£tof
(
ngx_c‹e_c⁄f_t
, 
debug_poöts
),

84 &
ngx_debug_poöts
 },

86 { 
ngx_°rög
("user"),

87 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE12
,

88 
ngx_£t_u£r
,

91 
NULL
 },

93 { 
ngx_°rög
("worker_priority"),

94 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_£t_¥i‹ôy
,

98 
NULL
 },

100 { 
ngx_°rög
("worker_cpu_affinity"),

101 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_1MORE
,

102 
ngx_£t_˝u_afföôy
,

105 
NULL
 },

107 { 
ngx_°rög
("worker_rlimit_nofile"),

108 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_num_¶Ÿ
,

111 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_nofûe
),

112 
NULL
 },

114 { 
ngx_°rög
("worker_rlimit_core"),

115 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

116 
ngx_c⁄f_£t_off_¶Ÿ
,

118 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_c‹e
),

119 
NULL
 },

121 { 
ngx_°rög
("worker_rlimit_sigpending"),

122 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

123 
ngx_c⁄f_£t_num_¶Ÿ
,

125 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_sig≥ndög
),

126 
NULL
 },

128 { 
ngx_°rög
("working_directory"),

129 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

130 
ngx_c⁄f_£t_°r_¶Ÿ
,

132 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kög_dúe˘‹y
),

133 
NULL
 },

135 { 
ngx_°rög
("env"),

136 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

137 
ngx_£t_ív
,

140 
NULL
 },

142 #i‡(
NGX_OLD_THREADS
)

144 { 
ngx_°rög
("worker_threads"),

145 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_num_¶Ÿ
,

148 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kî_thªads
),

149 
NULL
 },

151 { 
ngx_°rög
("thread_stack_size"),

152 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_size_¶Ÿ
,

155 
off£tof
(
ngx_c‹e_c⁄f_t
, 
thªad_°ack_size
),

156 
NULL
 },

160 
ngx_nuŒ_comm™d


164 
ngx_c‹e_moduÀ_t
 
	gngx_c‹e_moduÀ_˘x
 = {

165 
ngx_°rög
("core"),

166 
ngx_c‹e_moduÀ_¸óã_c⁄f
,

167 
ngx_c‹e_moduÀ_öô_c⁄f


171 
ngx_moduÀ_t
 
	gngx_c‹e_moduÀ
 = {

172 
NGX_MODULE_V1
,

173 &
ngx_c‹e_moduÀ_˘x
,

174 
ngx_c‹e_comm™ds
,

175 
NGX_CORE_MODULE
,

176 
NULL
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NGX_MODULE_V1_PADDING


187 
ngx_uöt_t
 
	gngx_max_moduÀ
;

189 
ngx_uöt_t
 
	gngx_show_hñp
;

190 
ngx_uöt_t
 
	gngx_show_vîsi⁄
;

191 
ngx_uöt_t
 
	gngx_show_c⁄figuª
;

192 
u_ch¨
 *
	gngx_¥efix
;

193 
u_ch¨
 *
	gngx_c⁄f_fûe
;

194 
u_ch¨
 *
	gngx_c⁄f_∑øms
;

195 *
	gngx_sig«l
;

198 **
	gngx_os_ívú⁄
;

201 
ngx_cde˛


202 
	$maö
(
¨gc
, *c⁄° *
¨gv
)

204 
ngx_öt_t
 
i
;

205 
ngx_log_t
 *
log
;

206 
ngx_cy˛e_t
 *
cy˛e
, 
öô_cy˛e
;

207 
ngx_c‹e_c⁄f_t
 *
ccf
;

209 
	`ngx_debug_öô
();

211 i‡(
	`ngx_°ªº‹_öô
(Ë!
NGX_OK
) {

215 i‡(
	`ngx_gë_›ti⁄s
(
¨gc
, 
¨gv
Ë!
NGX_OK
) {

219 i‡(
ngx_show_vîsi⁄
) {

220 
	`ngx_wrôe_°dîr
("ngöx vîsi⁄: " 
NGINX_VER_BUILD
 
NGX_LINEFEED
);

222 i‡(
ngx_show_hñp
) {

223 
	`ngx_wrôe_°dîr
(

225 "[-∞¥efix] [-g dúe˘ives]" 
NGX_LINEFEED


226 
NGX_LINEFEED


227 "O±i⁄s:" 
NGX_LINEFEED


228 " -?,-h :Åhi†hñp" 
NGX_LINEFEED


229 " -v : show vîsi⁄ándÉxô" 
NGX_LINEFEED


231 
NGX_LINEFEED


232 " -à :Åe° c⁄figuøti⁄ándÉxô" 
NGX_LINEFEED


234 "durög c⁄figuøti⁄Åe°ög" 
NGX_LINEFEED


236 "°›, quô,Ñe›í,Ññﬂd" 
NGX_LINEFEED


237 #ifde‡
NGX_PREFIX


239 
NGX_PREFIX
 ")" 
NGX_LINEFEED


241 " -∞¥efix : sëÖªfixÖ©h (deÁu…: NONE)" 
NGX_LINEFEED


244 
NGX_CONF_PATH
 ")" 
NGX_LINEFEED


246 "fûe" 
NGX_LINEFEED
 NGX_LINEFEED

250 i‡(
ngx_show_c⁄figuª
) {

252 #ifde‡
NGX_COMPILER


253 
	`ngx_wrôe_°dîr
("buûàby " 
NGX_COMPILER
 
NGX_LINEFEED
);

256 #i‡(
NGX_SSL
)

257 i‡(
	`SSLóy
(Ë=
SSLEAY_VERSION_NUMBER
) {

258 
	`ngx_wrôe_°dîr
("buûàwôh " 
OPENSSL_VERSION_TEXT


259 
NGX_LINEFEED
);

261 
	`ngx_wrôe_°dîr
("buûàwôh " 
OPENSSL_VERSION_TEXT


263 
	`ngx_wrôe_°dîr
((*Ë(
uöçå_t
)

264 
	`SSLóy_vîsi⁄
(
SSLEAY_VERSION
));

265 
	`ngx_wrôe_°dîr
(")" 
NGX_LINEFEED
);

267 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


268 
	`ngx_wrôe_°dîr
("TLS SNI suµ‹àíabÀd" 
NGX_LINEFEED
);

270 
	`ngx_wrôe_°dîr
("TLS SNI suµ‹àdißbÀd" 
NGX_LINEFEED
);

274 
	`ngx_wrôe_°dîr
("c⁄figuªárgumíts:" 
NGX_CONFIGURE
 
NGX_LINEFEED
);

277 i‡(!
ngx_ã°_c⁄fig
) {

282  
ngx_max_sockës
 = -1;

284 
	`ngx_time_öô
();

286 #i‡(
NGX_PCRE
)

287 
	`ngx_ªgex_öô
();

290 
ngx_pid
 = 
	`ngx_gëpid
();

292 
log
 = 
	`ngx_log_öô
(
ngx_¥efix
);

293 i‡(
log
 =
NULL
) {

298 #i‡(
NGX_OPENSSL
)

299 
	`ngx_s¶_öô
(
log
);

307 
	`ngx_memzîo
(&
öô_cy˛e
, (
ngx_cy˛e_t
));

308 
öô_cy˛e
.
log
 =Üog;

309 
ngx_cy˛e
 = &
öô_cy˛e
;

311 
öô_cy˛e
.
poﬁ
 = 
	`ngx_¸óã_poﬁ
(1024, 
log
);

312 i‡(
öô_cy˛e
.
poﬁ
 =
NULL
) {

316 i‡(
	`ngx_ßve_¨gv
(&
öô_cy˛e
, 
¨gc
, 
¨gv
Ë!
NGX_OK
) {

320 i‡(
	`ngx_¥o˚ss_›ti⁄s
(&
öô_cy˛e
Ë!
NGX_OK
) {

324 i‡(
	`ngx_os_öô
(
log
Ë!
NGX_OK
) {

332 i‡(
	`ngx_¸c32_èbÀ_öô
(Ë!
NGX_OK
) {

336 i‡(
	`ngx_add_öhîôed_sockës
(&
öô_cy˛e
Ë!
NGX_OK
) {

340 
ngx_max_moduÀ
 = 0;

341 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

342 
ngx_moduÀs
[
i
]->
ödex
 = 
ngx_max_moduÀ
++;

345 
cy˛e
 = 
	`ngx_öô_cy˛e
(&
öô_cy˛e
);

346 i‡(
cy˛e
 =
NULL
) {

347 i‡(
ngx_ã°_c⁄fig
) {

348 
	`ngx_log_°dîr
(0, "configuration file %sÅest failed",

349 
öô_cy˛e
.
c⁄f_fûe
.
d©a
);

355 i‡(
ngx_ã°_c⁄fig
) {

356 i‡(!
ngx_quõt_mode
) {

357 
	`ngx_log_°dîr
(0, "configuration file %sÅest is successful",

358 
cy˛e
->
c⁄f_fûe
.
d©a
);

364 i‡(
ngx_sig«l
) {

365  
	`ngx_sig«l_¥o˚ss
(
cy˛e
, 
ngx_sig«l
);

368 
	`ngx_os_°©us
(
cy˛e
->
log
);

370 
ngx_cy˛e
 = 
cy˛e
;

372 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

374 i‡(
ccf
->
ma°î
 && 
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

375 
ngx_¥o˚ss
 = 
NGX_PROCESS_MASTER
;

378 #i‡!(
NGX_WIN32
)

380 i‡(
	`ngx_öô_sig«ls
(
cy˛e
->
log
Ë!
NGX_OK
) {

384 i‡(!
ngx_öhîôed
 && 
ccf
->
d´m⁄
) {

385 i‡(
	`ngx_d´m⁄
(
cy˛e
->
log
Ë!
NGX_OK
) {

389 
ngx_d´m⁄ized
 = 1;

392 i‡(
ngx_öhîôed
) {

393 
ngx_d´m⁄ized
 = 1;

398 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
cy˛e
->
log
Ë!
NGX_OK
) {

402 i‡(
	`ngx_log_ªdúe˘_°dîr
(
cy˛e
Ë!
NGX_OK
) {

406 i‡(
log
->
fûe
->
fd
 !
ngx_°dîr
) {

407 i‡(
	`ngx_˛o£_fûe
(
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

408 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

409 
ngx_˛o£_fûe_n
 " built-inÜog failed");

413 
ngx_u£_°dîr
 = 0;

415 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

416 
	`ngx_sögÀ_¥o˚ss_cy˛e
(
cy˛e
);

419 
	`ngx_ma°î_¥o˚ss_cy˛e
(
cy˛e
);

423 
	}
}

426 
ngx_öt_t


427 
	$ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

429 
u_ch¨
 *
p
, *
v
, *
öhîôed
;

430 
ngx_öt_t
 
s
;

431 
ngx_li°íög_t
 *
ls
;

433 
öhîôed
 = (
u_ch¨
 *Ë
	`gëív
(
NGINX_VAR
);

435 i‡(
öhîôed
 =
NULL
) {

436  
NGX_OK
;

439 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

440 "usög inhîôed sockë†‰om \"%s\"", 
öhîôed
);

442 i‡(
	`ngx_¨øy_öô
(&
cy˛e
->
li°íög
, cy˛e->
poﬁ
, 10,

443 (
ngx_li°íög_t
))

444 !
NGX_OK
)

446  
NGX_ERROR
;

449 
p
 = 
öhîôed
, 
v
 =Ö; *p;Ö++) {

450 i‡(*
p
 == ':' || *p == ';') {

451 
s
 = 
	`ngx_©oi
(
v
, 
p
 - v);

452 i‡(
s
 =
NGX_ERROR
) {

453 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

454 "övÆid sockëÇumbî \"%s\" i¿" 
NGINX_VAR


456 " o‡thêv¨übÀ", 
v
);

460 
v
 = 
p
 + 1;

462 
ls
 = 
	`ngx_¨øy_push
(&
cy˛e
->
li°íög
);

463 i‡(
ls
 =
NULL
) {

464  
NGX_ERROR
;

467 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

469 
ls
->
fd
 = (
ngx_sockë_t
Ë
s
;

473 
ngx_öhîôed
 = 1;

475  
	`ngx_£t_öhîôed_sockës
(
cy˛e
);

476 
	}
}

480 
	$ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
)

482 **
p
, **
ív
;

483 
ngx_°r_t
 *
v¨
;

484 
ngx_uöt_t
 
i
, 
n
;

485 
ngx_c‹e_c⁄f_t
 *
ccf
;

487 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

489 i‡(
œ°
 =
NULL
 && 
ccf
->
ívú⁄mít
) {

490  
ccf
->
ívú⁄mít
;

493 
v¨
 = 
ccf
->
ív
.
ñts
;

495 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

496 i‡(
	`ngx_°rcmp
(
v¨
[
i
].
d©a
, "TZ") == 0

497 || 
	`ngx_°∫cmp
(
v¨
[
i
].
d©a
, "TZ=", 3) == 0)

499 
tz_found
;

503 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

504 i‡(
v¨
 =
NULL
) {

505  
NULL
;

508 
v¨
->
Àn
 = 2;

509 
v¨
->
d©a
 = (
u_ch¨
 *) "TZ";

511 
v¨
 = 
ccf
->
ív
.
ñts
;

513 
tz_found
:

515 
n
 = 0;

517 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

519 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

520 
n
++;

524 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

526 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

527 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

529 
n
++;

535 i‡(
œ°
) {

536 
ív
 = 
	`ngx_Æloc
((*
œ°
 + 
n
 + 1Ë* (*), 
cy˛e
->
log
);

537 *
œ°
 = 
n
;

540 
ív
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
n
 + 1) * (*));

543 i‡(
ív
 =
NULL
) {

544  
NULL
;

547 
n
 = 0;

549 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

551 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

552 
ív
[
n
++] = (*Ë
v¨
[
i
].
d©a
;

556 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

558 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

559 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

561 
ív
[
n
++] = *
p
;

567 
ív
[
n
] = 
NULL
;

569 i‡(
œ°
 =
NULL
) {

570 
ccf
->
ívú⁄mít
 = 
ív
;

571 
ívú⁄
 = 
ív
;

574  
ív
;

575 
	}
}

578 
ngx_pid_t


579 
	$ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
)

581 **
ív
, *
v¨
;

582 
u_ch¨
 *
p
;

583 
ngx_uöt_t
 
i
, 
n
;

584 
ngx_pid_t
 
pid
;

585 
ngx_exec_˘x_t
 
˘x
;

586 
ngx_c‹e_c⁄f_t
 *
ccf
;

587 
ngx_li°íög_t
 *
ls
;

589 
	`ngx_memzîo
(&
˘x
, (
ngx_exec_˘x_t
));

591 
˘x
.
∑th
 = 
¨gv
[0];

592 
˘x
.
«me
 = "new binaryÖrocess";

593 
˘x
.
¨gv
 =árgv;

595 
n
 = 2;

596 
ív
 = 
	`ngx_£t_ívú⁄mít
(
cy˛e
, &
n
);

597 i‡(
ív
 =
NULL
) {

598  
NGX_INVALID_PID
;

601 
v¨
 = 
	`ngx_Æloc
((
NGINX_VAR
)

602 + 
cy˛e
->
li°íög
.
√…s
 * (
NGX_INT32_LEN
 + 1) + 2,

603 
cy˛e
->
log
);

604 i‡(
v¨
 =
NULL
) {

605 
	`ngx_‰ì
(
ív
);

606  
NGX_INVALID_PID
;

609 
p
 = 
	`ngx_˝ymem
(
v¨
, 
NGINX_VAR
 "=", (NGINX_VAR));

611 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

612 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

613 
p
 = 
	`ngx_•rötf
’, "%ud;", 
ls
[
i
].
fd
);

616 *
p
 = '\0';

618 
ív
[
n
++] = 
v¨
;

620 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

624 
ív
[
n
++] = "SPARE=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

632 
ív
[
n
] = 
NULL
;

634 #i‡(
NGX_DEBUG
)

636 **
e
;

637 
e
 = 
ív
; *e;É++) {

638 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "ív: %s", *
e
);

643 
˘x
.
ívp
 = (*c⁄° *Ë
ív
;

645 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

647 i‡(
	`ngx_ª«me_fûe
(
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©aË=
NGX_FILE_ERROR
) {

648 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

649 
ngx_ª«me_fûe_n
 " %sÅo %s failed "

651 
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©a, 
¨gv
[0]);

653 
	`ngx_‰ì
(
ív
);

654 
	`ngx_‰ì
(
v¨
);

656  
NGX_INVALID_PID
;

659 
pid
 = 
	`ngx_execuã
(
cy˛e
, &
˘x
);

661 i‡(
pid
 =
NGX_INVALID_PID
) {

662 i‡(
	`ngx_ª«me_fûe
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.data)

663 =
NGX_FILE_ERROR
)

665 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

666 
ngx_ª«me_fûe_n
 " %s backÅo %s failedáfter "

668 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
¨gv
[0]);

672 
	`ngx_‰ì
(
ív
);

673 
	`ngx_‰ì
(
v¨
);

675  
pid
;

676 
	}
}

679 
ngx_öt_t


680 
	$ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
)

682 
u_ch¨
 *
p
;

683 
ngx_öt_t
 
i
;

685 
i
 = 1; i < 
¨gc
; i++) {

687 
p
 = (
u_ch¨
 *Ë
¨gv
[
i
];

689 i‡(*
p
++ != '-') {

690 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%s\"", 
¨gv
[
i
]);

691  
NGX_ERROR
;

694 *
p
) {

696 *
p
++) {

700 
ngx_show_vîsi⁄
 = 1;

701 
ngx_show_hñp
 = 1;

705 
ngx_show_vîsi⁄
 = 1;

709 
ngx_show_vîsi⁄
 = 1;

710 
ngx_show_c⁄figuª
 = 1;

714 
ngx_ã°_c⁄fig
 = 1;

718 
ngx_quõt_mode
 = 1;

722 i‡(*
p
) {

723 
ngx_¥efix
 = 
p
;

724 
√xt
;

727 i‡(
¨gv
[++
i
]) {

728 
ngx_¥efix
 = (
u_ch¨
 *Ë
¨gv
[
i
];

729 
√xt
;

732 
	`ngx_log_°dîr
(0, "option \"-p\"Ñequires directoryÇame");

733  
NGX_ERROR
;

736 i‡(*
p
) {

737 
ngx_c⁄f_fûe
 = 
p
;

738 
√xt
;

741 i‡(
¨gv
[++
i
]) {

742 
ngx_c⁄f_fûe
 = (
u_ch¨
 *Ë
¨gv
[
i
];

743 
√xt
;

746 
	`ngx_log_°dîr
(0, "option \"-c\"Ñequires fileÇame");

747  
NGX_ERROR
;

750 i‡(*
p
) {

751 
ngx_c⁄f_∑øms
 = 
p
;

752 
√xt
;

755 i‡(
¨gv
[++
i
]) {

756 
ngx_c⁄f_∑øms
 = (
u_ch¨
 *Ë
¨gv
[
i
];

757 
√xt
;

760 
	`ngx_log_°dîr
(0, "option \"-g\"ÑequiresÖarameter");

761  
NGX_ERROR
;

764 i‡(*
p
) {

765 
ngx_sig«l
 = (*Ë
p
;

767 } i‡(
¨gv
[++
i
]) {

768 
ngx_sig«l
 = 
¨gv
[
i
];

771 
	`ngx_log_°dîr
(0, "option \"-s\"ÑequiresÖarameter");

772  
NGX_ERROR
;

775 i‡(
	`ngx_°rcmp
(
ngx_sig«l
, "stop") == 0

776 || 
	`ngx_°rcmp
(
ngx_sig«l
, "quit") == 0

777 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reopen") == 0

778 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reload") == 0)

780 
ngx_¥o˚ss
 = 
NGX_PROCESS_SIGNALLER
;

781 
√xt
;

784 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"-†%s\"", 
ngx_sig«l
);

785  
NGX_ERROR
;

788 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%c\"", *(
p
 - 1));

789  
NGX_ERROR
;

793 
√xt
:

798  
NGX_OK
;

799 
	}
}

802 
ngx_öt_t


803 
	$ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
)

805 #i‡(
NGX_FREEBSD
)

807 
ngx_os_¨gv
 = (**Ë
¨gv
;

808 
ngx_¨gc
 = 
¨gc
;

809 
ngx_¨gv
 = (**Ë
¨gv
;

812 
size_t
 
Àn
;

813 
ngx_öt_t
 
i
;

815 
ngx_os_¨gv
 = (**Ë
¨gv
;

816 
ngx_¨gc
 = 
¨gc
;

818 
ngx_¨gv
 = 
	`ngx_Æloc
((
¨gc
 + 1Ë* (*), 
cy˛e
->
log
);

819 i‡(
ngx_¨gv
 =
NULL
) {

820  
NGX_ERROR
;

823 
i
 = 0; i < 
¨gc
; i++) {

824 
Àn
 = 
	`ngx_°æí
(
¨gv
[
i
]) + 1;

826 
ngx_¨gv
[
i
] = 
	`ngx_Æloc
(
Àn
, 
cy˛e
->
log
);

827 i‡(
ngx_¨gv
[
i
] =
NULL
) {

828  
NGX_ERROR
;

831 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_¨gv
[
i
], (u_ch¨ *Ë
¨gv
[i], 
Àn
);

834 
ngx_¨gv
[
i
] = 
NULL
;

838 
ngx_os_ívú⁄
 = 
ívú⁄
;

840  
NGX_OK
;

841 
	}
}

844 
ngx_öt_t


845 
	$ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
)

847 
u_ch¨
 *
p
;

848 
size_t
 
Àn
;

850 i‡(
ngx_¥efix
) {

851 
Àn
 = 
	`ngx_°æí
(
ngx_¥efix
);

852 
p
 = 
ngx_¥efix
;

854 i‡(
Àn
 && !
	`ngx_∑th_£∑øt‹
(
p
[len - 1])) {

855 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
 + 1);

856 i‡(
p
 =
NULL
) {

857  
NGX_ERROR
;

860 
	`ngx_mem˝y
(
p
, 
ngx_¥efix
, 
Àn
);

861 
p
[
Àn
++] = '/';

864 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

865 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

866 
cy˛e
->
¥efix
.
Àn
 =Üen;

867 
cy˛e
->
¥efix
.
d©a
 = 
p
;

871 #i‚de‡
NGX_PREFIX


873 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
NGX_MAX_PATH
);

874 i‡(
p
 =
NULL
) {

875  
NGX_ERROR
;

878 i‡(
	`ngx_gëcwd
(
p
, 
NGX_MAX_PATH
) == 0) {

879 
	`ngx_log_°dîr
(
ngx_î∫o
, "[emîg]: " 
ngx_gëcwd_n
 " failed");

880  
NGX_ERROR
;

883 
Àn
 = 
	`ngx_°æí
(
p
);

885 
p
[
Àn
++] = '/';

887 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

888 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

889 
cy˛e
->
¥efix
.
Àn
 =Üen;

890 
cy˛e
->
¥efix
.
d©a
 = 
p
;

894 #ifde‡
NGX_CONF_PREFIX


895 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_CONF_PREFIX
);

897 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_PREFIX
);

899 
	`ngx_°r_£t
(&
cy˛e
->
¥efix
, 
NGX_PREFIX
);

904 i‡(
ngx_c⁄f_fûe
) {

905 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_fûe
);

906 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
ngx_c⁄f_fûe
;

909 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_fûe
, 
NGX_CONF_PATH
);

912 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &cy˛e->
c⁄f_fûe
, 0Ë!
NGX_OK
) {

913  
NGX_ERROR
;

916 
p
 = 
cy˛e
->
c⁄f_fûe
.
d©a
 + cy˛e->c⁄f_fûe.
Àn
 - 1;

917 
p
 > 
cy˛e
->
c⁄f_fûe
.
d©a
;

918 
p
--)

920 i‡(
	`ngx_∑th_£∑øt‹
(*
p
)) {

921 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
p
 - 
ngx_cy˛e
->
c⁄f_fûe
.
d©a
 + 1;

922 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
ngx_cy˛e
->
c⁄f_fûe
.data;

927 i‡(
ngx_c⁄f_∑øms
) {

928 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_∑øms
);

929 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
ngx_c⁄f_∑øms
;

932 i‡(
ngx_ã°_c⁄fig
) {

933 
cy˛e
->
log
->
log_Àvñ
 = 
NGX_LOG_INFO
;

936  
NGX_OK
;

937 
	}
}

941 
	$ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

943 
ngx_c‹e_c⁄f_t
 *
ccf
;

945 
ccf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_c‹e_c⁄f_t
));

946 i‡(
ccf
 =
NULL
) {

947  
NULL
;

960 
ccf
->
d´m⁄
 = 
NGX_CONF_UNSET
;

961 
ccf
->
ma°î
 = 
NGX_CONF_UNSET
;

962 
ccf
->
timî_ªsﬁuti⁄
 = 
NGX_CONF_UNSET_MSEC
;

964 
ccf
->
w‹kî_¥o˚s£s
 = 
NGX_CONF_UNSET
;

965 
ccf
->
debug_poöts
 = 
NGX_CONF_UNSET
;

967 
ccf
->
æimô_nofûe
 = 
NGX_CONF_UNSET
;

968 
ccf
->
æimô_c‹e
 = 
NGX_CONF_UNSET
;

969 
ccf
->
æimô_sig≥ndög
 = 
NGX_CONF_UNSET
;

971 
ccf
->
u£r
 = (
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
;

972 
ccf
->
group
 = (
ngx_gid_t
Ë
NGX_CONF_UNSET_UINT
;

974 #i‡(
NGX_OLD_THREADS
)

975 
ccf
->
w‹kî_thªads
 = 
NGX_CONF_UNSET
;

976 
ccf
->
thªad_°ack_size
 = 
NGX_CONF_UNSET_SIZE
;

979 i‡(
	`ngx_¨øy_öô
(&
ccf
->
ív
, 
cy˛e
->
poﬁ
, 1, (
ngx_°r_t
))

980 !
NGX_OK
)

982  
NULL
;

985  
ccf
;

986 
	}
}

990 
	$ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

992 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

994 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
d´m⁄
, 1);

995 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
ma°î
, 1);

996 
	`ngx_c⁄f_öô_m£c_vÆue
(
ccf
->
timî_ªsﬁuti⁄
, 0);

998 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_¥o˚s£s
, 1);

999 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
debug_poöts
, 0);

1001 #i‡(
NGX_HAVE_CPU_AFFINITY
)

1003 i‡(
ccf
->
˝u_afföôy_n


1004 && 
ccf
->
˝u_afföôy_n
 != 1

1005 && 
ccf
->
˝u_afföôy_n
 !(
ngx_uöt_t
Ëccf->
w‹kî_¥o˚s£s
)

1007 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

1015 #i‡(
NGX_OLD_THREADS
)

1017 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_thªads
, 0);

1018 
ngx_thªads_n
 = 
ccf
->
w‹kî_thªads
;

1019 
	`ngx_c⁄f_öô_size_vÆue
(
ccf
->
thªad_°ack_size
, 2 * 1024 * 1024);

1024 i‡(
ccf
->
pid
.
Àn
 == 0) {

1025 
	`ngx_°r_£t
(&
ccf
->
pid
, 
NGX_PID_PATH
);

1028 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
pid
, 0Ë!
NGX_OK
) {

1029  
NGX_CONF_ERROR
;

1032 
ccf
->
ﬁdpid
.
Àn
 = ccf->
pid
.À¿+ (
NGX_OLDPID_EXT
);

1034 
ccf
->
ﬁdpid
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, ccf->ﬁdpid.
Àn
);

1035 i‡(
ccf
->
ﬁdpid
.
d©a
 =
NULL
) {

1036  
NGX_CONF_ERROR
;

1039 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, ccf->pid.
Àn
),

1040 
NGX_OLDPID_EXT
, (NGX_OLDPID_EXT));

1043 #i‡!(
NGX_WIN32
)

1045 i‡(
ccf
->
u£r
 =(
uid_t
Ë
NGX_CONF_UNSET_UINT
 && 
	`gëeuid
() == 0) {

1046 
group
 *
gΩ
;

1047 
∑sswd
 *
pwd
;

1049 
	`ngx_£t_î∫o
(0);

1050 
pwd
 = 
	`gëpw«m
(
NGX_USER
);

1051 i‡(
pwd
 =
NULL
) {

1052 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1053 "gëpw«m(\"" 
NGX_USER
 "\") failed");

1054  
NGX_CONF_ERROR
;

1057 
ccf
->
u£∫ame
 = 
NGX_USER
;

1058 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1060 
	`ngx_£t_î∫o
(0);

1061 
gΩ
 = 
	`gëg∫am
(
NGX_GROUP
);

1062 i‡(
gΩ
 =
NULL
) {

1063 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1064 "gëg∫am(\"" 
NGX_GROUP
 "\") failed");

1065  
NGX_CONF_ERROR
;

1068 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1072 i‡(
ccf
->
lock_fûe
.
Àn
 == 0) {

1073 
	`ngx_°r_£t
(&
ccf
->
lock_fûe
, 
NGX_LOCK_PATH
);

1076 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
lock_fûe
, 0Ë!
NGX_OK
) {

1077  
NGX_CONF_ERROR
;

1081 
ngx_°r_t
 
lock_fûe
;

1083 
lock_fûe
 = 
cy˛e
->
ﬁd_cy˛e
->lock_file;

1085 i‡(
lock_fûe
.
Àn
) {

1086 
lock_fûe
.
Àn
--;

1088 i‡(
ccf
->
lock_fûe
.
Àn
 !=Üock_file.len

1089 || 
	`ngx_°∫cmp
(
ccf
->
lock_fûe
.
d©a
,Üock_fûe.d©a,Üock_fûe.
Àn
)

1092 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1096 
cy˛e
->
lock_fûe
.
Àn
 =Üock_file.len + 1;

1097 
lock_fûe
.
Àn
 += (".accept");

1099 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_p°rdup
(cy˛e->
poﬁ
, &lock_file);

1100 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1101  
NGX_CONF_ERROR
;

1105 
cy˛e
->
lock_fûe
.
Àn
 = 
ccf
->lock_file.len + 1;

1106 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_≤Æloc
(cy˛e->
poﬁ
,

1107 
ccf
->
lock_fûe
.
Àn
 + (".accept"));

1108 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1109  
NGX_CONF_ERROR
;

1112 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
cy˛e
->
lock_fûe
.
d©a
, 
ccf
->lock_file.data,

1113 
ccf
->
lock_fûe
.
Àn
),

1120  
NGX_CONF_OK
;

1121 
	}
}

1125 
	$ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1127 #i‡(
NGX_WIN32
)

1129 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1132  
NGX_CONF_OK
;

1136 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1138 *
group
;

1139 
∑sswd
 *
pwd
;

1140 
group
 *
gΩ
;

1141 
ngx_°r_t
 *
vÆue
;

1143 i‡(
ccf
->
u£r
 !(
uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1147 i‡(
	`gëeuid
() != 0) {

1148 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1152  
NGX_CONF_OK
;

1155 
vÆue
 = (
ngx_°r_t
 *Ë
cf
->
¨gs
->
ñts
;

1157 
ccf
->
u£∫ame
 = (*Ë
vÆue
[1].
d©a
;

1159 
	`ngx_£t_î∫o
(0);

1160 
pwd
 = 
	`gëpw«m
((c⁄° *Ë
vÆue
[1].
d©a
);

1161 i‡(
pwd
 =
NULL
) {

1162 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1163 "gëpw«m(\"%s\"ËÁûed", 
vÆue
[1].
d©a
);

1164  
NGX_CONF_ERROR
;

1167 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1169 
group
 = (*Ë((
cf
->
¨gs
->
√…s
 =2Ë? 
vÆue
[1].
d©a
 : value[2].data);

1171 
	`ngx_£t_î∫o
(0);

1172 
gΩ
 = 
	`gëg∫am
(
group
);

1173 i‡(
gΩ
 =
NULL
) {

1174 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1175 "gëg∫am(\"%s\"ËÁûed", 
group
);

1176  
NGX_CONF_ERROR
;

1179 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1181  
NGX_CONF_OK
;

1184 
	}
}

1188 
	$ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1190 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1192 
ngx_°r_t
 *
vÆue
, *
v¨
;

1193 
ngx_uöt_t
 
i
;

1195 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

1196 i‡(
v¨
 =
NULL
) {

1197  
NGX_CONF_ERROR
;

1200 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1201 *
v¨
 = 
vÆue
[1];

1203 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

1205 i‡(
vÆue
[1].
d©a
[
i
] == '=') {

1207 
v¨
->
Àn
 = 
i
;

1209  
NGX_CONF_OK
;

1213  
NGX_CONF_OK
;

1214 
	}
}

1218 
	$ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1220 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1222 
ngx_°r_t
 *
vÆue
;

1223 
ngx_uöt_t
 
n
, 
möus
;

1225 i‡(
ccf
->
¥i‹ôy
 != 0) {

1229 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1231 i‡(
vÆue
[1].
d©a
[0] == '-') {

1232 
n
 = 1;

1233 
möus
 = 1;

1235 } i‡(
vÆue
[1].
d©a
[0] == '+') {

1236 
n
 = 1;

1237 
möus
 = 0;

1240 
n
 = 0;

1241 
möus
 = 0;

1244 
ccf
->
¥i‹ôy
 = 
	`ngx_©oi
(&
vÆue
[1].
d©a
[
n
], vÆue[1].
Àn
 -Ç);

1245 i‡(
ccf
->
¥i‹ôy
 =
NGX_ERROR
) {

1249 i‡(
möus
) {

1250 
ccf
->
¥i‹ôy
 = -ccf->priority;

1253  
NGX_CONF_OK
;

1254 
	}
}

1258 
	$ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1260 #i‡(
NGX_HAVE_CPU_AFFINITY
)

1261 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1263 
u_ch¨
 
ch
;

1264 
uöt64_t
 *
mask
;

1265 
ngx_°r_t
 *
vÆue
;

1266 
ngx_uöt_t
 
i
, 
n
;

1268 i‡(
ccf
->
˝u_afföôy
) {

1272 
mask
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (cf->
¨gs
->
√…s
 - 1Ë* (
uöt64_t
));

1273 i‡(
mask
 =
NULL
) {

1274  
NGX_CONF_ERROR
;

1277 
ccf
->
˝u_afföôy_n
 = 
cf
->
¨gs
->
√…s
 - 1;

1278 
ccf
->
˝u_afföôy
 = 
mask
;

1280 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1282 
n
 = 1;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

1284 i‡(
vÆue
[
n
].
Àn
 > 64) {

1285 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1287  
NGX_CONF_ERROR
;

1290 
mask
[
n
 - 1] = 0;

1292 
i
 = 0; i < 
vÆue
[
n
].
Àn
; i++) {

1294 
ch
 = 
vÆue
[
n
].
d©a
[
i
];

1296 i‡(
ch
 == ' ') {

1300 
mask
[
n
 - 1] <<= 1;

1302 i‡(
ch
 == '0') {

1306 i‡(
ch
 == '1') {

1307 
mask
[
n
 - 1] |= 1;

1311 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1313 
ch
);

1314  
NGX_CONF_ERROR
;

1320 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1325  
NGX_CONF_OK
;

1326 
	}
}

1329 
uöt64_t


1330 
	$ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
)

1332 
ngx_c‹e_c⁄f_t
 *
ccf
;

1334 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

1335 
ngx_c‹e_moduÀ
);

1337 i‡(
ccf
->
˝u_afföôy
 =
NULL
) {

1341 i‡(
ccf
->
˝u_afföôy_n
 > 
n
) {

1342  
ccf
->
˝u_afföôy
[
n
];

1345  
ccf
->
˝u_afföôy
[ccf->
˝u_afföôy_n
 - 1];

1346 
	}
}

1350 
	$ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1352 
ngx_°r_t
 *
vÆue
;

1353 
ngx_c‹e_c⁄f_t
 *
ccf
;

1355 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
c⁄f
;

1357 i‡(
ccf
->
w‹kî_¥o˚s£s
 !
NGX_CONF_UNSET
) {

1361 
vÆue
 = (
ngx_°r_t
 *Ë
cf
->
¨gs
->
ñts
;

1363 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "auto") == 0) {

1364 
ccf
->
w‹kî_¥o˚s£s
 = 
ngx_n˝u
;

1365  
NGX_CONF_OK
;

1368 
ccf
->
w‹kî_¥o˚s£s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1370 i‡(
ccf
->
w‹kî_¥o˚s£s
 =
NGX_ERROR
) {

1374  
NGX_CONF_OK
;

1375 
	}
}

	@src/core/nginx.h

8 #i‚de‡
_NGINX_H_INCLUDED_


9 
	#_NGINX_H_INCLUDED_


	)

12 
	#ngöx_vîsi⁄
 1008000

	)

13 
	#NGINX_VERSION
 "1.8.0"

	)

14 
	#NGINX_VER
 "ngöx/" 
NGINX_VERSION


	)

16 #ifde‡
NGX_BUILD


17 
	#NGINX_VER_BUILD
 
NGINX_VER
 " (" 
NGX_BUILD
 ")"

	)

19 
	#NGINX_VER_BUILD
 
NGINX_VER


	)

22 
	#NGINX_VAR
 "NGINX"

	)

23 
	#NGX_OLDPID_EXT
 ".ﬁdbö"

	)

	@src/core/ngx_array.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_¨øy_t
 *

13 
	$ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_¨øy_t
 *
a
;

17 
a
 = 
	`ngx_∑Œoc
(
p
, (
ngx_¨øy_t
));

18 i‡(
a
 =
NULL
) {

19  
NULL
;

22 i‡(
	`ngx_¨øy_öô
(
a
, 
p
, 
n
, 
size
Ë!
NGX_OK
) {

23  
NULL
;

26  
a
;

27 
	}
}

31 
	$ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
)

33 
ngx_poﬁ_t
 *
p
;

35 
p
 = 
a
->
poﬁ
;

37 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°
) {

38 
p
->
d
.
œ°
 -
a
->
size
 *á->
«Œoc
;

41 i‡((
u_ch¨
 *Ë
a
 + (
ngx_¨øy_t
Ë=
p
->
d
.
œ°
) {

42 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë
a
;

44 
	}
}

48 
	$ngx_¨øy_push
(
ngx_¨øy_t
 *
a
)

50 *
ñt
, *
√w
;

51 
size_t
 
size
;

52 
ngx_poﬁ_t
 *
p
;

54 i‡(
a
->
√…s
 =a->
«Œoc
) {

58 
size
 = 
a
->sizê*á->
«Œoc
;

60 
p
 = 
a
->
poﬁ
;

62 i‡((
u_ch¨
 *Ë
a
->
ñts
 + 
size
 =
p
->
d
.
œ°


63 && 
p
->
d
.
œ°
 + 
a
->
size
 <p->d.
íd
)

70 
p
->
d
.
œ°
 +
a
->
size
;

71 
a
->
«Œoc
++;

76 
√w
 = 
	`ngx_∑Œoc
(
p
, 2 * 
size
);

77 i‡(
√w
 =
NULL
) {

78  
NULL
;

81 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
, 
size
);

82 
a
->
ñts
 = 
√w
;

83 
a
->
«Œoc
 *= 2;

87 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

88 
a
->
√…s
++;

90  
ñt
;

91 
	}
}

95 
	$ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
)

97 *
ñt
, *
√w
;

98 
size_t
 
size
;

99 
ngx_uöt_t
 
«Œoc
;

100 
ngx_poﬁ_t
 *
p
;

102 
size
 = 
n
 * 
a
->size;

104 i‡(
a
->
√…s
 + 
n
 >á->
«Œoc
) {

108 
p
 = 
a
->
poﬁ
;

110 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°


111 && 
p
->
d
.
œ°
 + 
size
 <p->d.
íd
)

118 
p
->
d
.
œ°
 +
size
;

119 
a
->
«Œoc
 +
n
;

124 
«Œoc
 = 2 * ((
n
 >
a
->nalloc) ?Ç :á->nalloc);

126 
√w
 = 
	`ngx_∑Œoc
(
p
, 
«Œoc
 * 
a
->
size
);

127 i‡(
√w
 =
NULL
) {

128  
NULL
;

131 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
,á->
√…s
 *á->
size
);

132 
a
->
ñts
 = 
√w
;

133 
a
->
«Œoc
 =Çalloc;

137 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

138 
a
->
√…s
 +
n
;

140  
ñt
;

141 
	}
}

	@src/core/ngx_array.h

8 #i‚de‡
_NGX_ARRAY_H_INCLUDED_


9 
	#_NGX_ARRAY_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mñts
;

18 
ngx_uöt_t
 
	m√…s
;

19 
size_t
 
	msize
;

20 
ngx_uöt_t
 
	m«Œoc
;

21 
ngx_poﬁ_t
 *
	mpoﬁ
;

22 } 
	tngx_¨øy_t
;

25 
ngx_¨øy_t
 *
ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

26 
ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
);

27 *
ngx_¨øy_push
(
ngx_¨øy_t
 *
a
);

28 *
ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
);

31 
ngx_ölöe
 
ngx_öt_t


32 
	$ngx_¨øy_öô
(
ngx_¨øy_t
 *
¨øy
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
¨øy
->
√…s
 = 0;

40 
¨øy
->
size
 = size;

41 
¨øy
->
«Œoc
 = 
n
;

42 
¨øy
->
poﬁ
 =Öool;

44 
¨øy
->
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

45 i‡(
¨øy
->
ñts
 =
NULL
) {

46  
NGX_ERROR
;

49  
NGX_OK
;

50 
	}
}

	@src/core/ngx_buf.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_buf_t
 *

13 
	$ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

15 
ngx_buf_t
 *
b
;

17 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

18 i‡(
b
 =
NULL
) {

19  
NULL
;

22 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

23 i‡(
b
->
°¨t
 =
NULL
) {

24  
NULL
;

38 
b
->
pos
 = b->
°¨t
;

39 
b
->
œ°
 = b->
°¨t
;

40 
b
->
íd
 = b->
œ°
 + 
size
;

41 
b
->
ãmp‹¨y
 = 1;

43  
b
;

44 
	}
}

47 
ngx_chaö_t
 *

48 
	$ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
)

50 
ngx_chaö_t
 *
˛
;

52 
˛
 = 
poﬁ
->
chaö
;

54 i‡(
˛
) {

55 
poﬁ
->
chaö
 = 
˛
->
√xt
;

56  
˛
;

59 
˛
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_chaö_t
));

60 i‡(
˛
 =
NULL
) {

61  
NULL
;

64  
˛
;

65 
	}
}

68 
ngx_chaö_t
 *

69 
	$ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
)

71 
u_ch¨
 *
p
;

72 
ngx_öt_t
 
i
;

73 
ngx_buf_t
 *
b
;

74 
ngx_chaö_t
 *
chaö
, *
˛
, **
Œ
;

76 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
bufs
->
num
 * bufs->
size
);

77 i‡(
p
 =
NULL
) {

78  
NULL
;

81 
Œ
 = &
chaö
;

83 
i
 = 0; i < 
bufs
->
num
; i++) {

85 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

86 i‡(
b
 =
NULL
) {

87  
NULL
;

102 
b
->
pos
 = 
p
;

103 
b
->
œ°
 = 
p
;

104 
b
->
ãmp‹¨y
 = 1;

106 
b
->
°¨t
 = 
p
;

107 
p
 +
bufs
->
size
;

108 
b
->
íd
 = 
p
;

110 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

111 i‡(
˛
 =
NULL
) {

112  
NULL
;

115 
˛
->
buf
 = 
b
;

116 *
Œ
 = 
˛
;

117 
Œ
 = &
˛
->
√xt
;

120 *
Œ
 = 
NULL
;

122  
chaö
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
)

129 
ngx_chaö_t
 *
˛
, **
Œ
;

131 
Œ
 = 
chaö
;

133 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

134 
Œ
 = &
˛
->
√xt
;

137 
ö
) {

138 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

139 i‡(
˛
 =
NULL
) {

140  
NGX_ERROR
;

143 
˛
->
buf
 = 
ö
->buf;

144 *
Œ
 = 
˛
;

145 
Œ
 = &
˛
->
√xt
;

146 
ö
 = in->
√xt
;

149 *
Œ
 = 
NULL
;

151  
NGX_OK
;

152 
	}
}

155 
ngx_chaö_t
 *

156 
	$ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
)

158 
ngx_chaö_t
 *
˛
;

160 i‡(*
‰ì
) {

161 
˛
 = *
‰ì
;

162 *
‰ì
 = 
˛
->
√xt
;

163 
˛
->
√xt
 = 
NULL
;

164  
˛
;

167 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
);

168 i‡(
˛
 =
NULL
) {

169  
NULL
;

172 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
p
);

173 i‡(
˛
->
buf
 =
NULL
) {

174  
NULL
;

177 
˛
->
√xt
 = 
NULL
;

179  
˛
;

180 
	}
}

184 
	$ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,Çgx_chaö_à**
busy
,

185 
ngx_chaö_t
 **
out
, 
ngx_buf_èg_t
 
èg
)

187 
ngx_chaö_t
 *
˛
;

189 i‡(*
busy
 =
NULL
) {

190 *
busy
 = *
out
;

193 
˛
 = *
busy
; cl->
√xt
; cl = cl->next) { }

195 
˛
->
√xt
 = *
out
;

198 *
out
 = 
NULL
;

200 *
busy
) {

201 
˛
 = *
busy
;

203 i‡(
	`ngx_buf_size
(
˛
->
buf
) != 0) {

207 i‡(
˛
->
buf
->
èg
 !=Åag) {

208 *
busy
 = 
˛
->
√xt
;

209 
	`ngx_‰ì_chaö
(
p
, 
˛
);

213 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

214 
˛
->
buf
->
œ°
 = cl->buf->
°¨t
;

216 *
busy
 = 
˛
->
√xt
;

217 
˛
->
√xt
 = *
‰ì
;

218 *
‰ì
 = 
˛
;

220 
	}
}

223 
off_t


224 
	$ngx_chaö_cﬂÀs˚_fûe
(
ngx_chaö_t
 **
ö
, 
off_t
 
limô
)

226 
off_t
 
tŸÆ
, 
size
, 
Æig√d
, 
Âªv
;

227 
ngx_fd_t
 
fd
;

228 
ngx_chaö_t
 *
˛
;

230 
tŸÆ
 = 0;

232 
˛
 = *
ö
;

233 
fd
 = 
˛
->
buf
->
fûe
->fd;

236 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

238 i‡(
size
 > 
limô
 - 
tŸÆ
) {

239 
size
 = 
limô
 - 
tŸÆ
;

241 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

242 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

244 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

245 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

249 
tŸÆ
 +
size
;

250 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

251 
˛
 = cl->
√xt
;

253 } 
˛


254 && 
˛
->
buf
->
ö_fûe


255 && 
tŸÆ
 < 
limô


256 && 
fd
 =
˛
->
buf
->
fûe
->fd

257 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

259 *
ö
 = 
˛
;

261  
tŸÆ
;

262 
	}
}

265 
ngx_chaö_t
 *

266 
	$ngx_chaö_upd©e_£¡
(
ngx_chaö_t
 *
ö
, 
off_t
 
£¡
)

268 
off_t
 
size
;

270  ; 
ö
; i¿ö->
√xt
) {

272 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

276 i‡(
£¡
 == 0) {

280 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

282 i‡(
£¡
 >
size
) {

283 
£¡
 -
size
;

285 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

286 
ö
->
buf
->
pos
 = in->buf->
œ°
;

289 i‡(
ö
->
buf
->
ö_fûe
) {

290 
ö
->
buf
->
fûe_pos
 = in->buf->
fûe_œ°
;

296 i‡(
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

297 
ö
->
buf
->
pos
 +(
size_t
Ë
£¡
;

300 i‡(
ö
->
buf
->
ö_fûe
) {

301 
ö
->
buf
->
fûe_pos
 +
£¡
;

307  
ö
;

308 
	}
}

	@src/core/ngx_buf.h

8 #i‚de‡
_NGX_BUF_H_INCLUDED_


9 
	#_NGX_BUF_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 * 
	tngx_buf_èg_t
;

18 
ngx_buf_s
 
	tngx_buf_t
;

20 
	sngx_buf_s
 {

21 
u_ch¨
 *
	mpos
;

22 
u_ch¨
 *
	mœ°
;

23 
off_t
 
	mfûe_pos
;

24 
off_t
 
	mfûe_œ°
;

26 
u_ch¨
 *
	m°¨t
;

27 
u_ch¨
 *
	míd
;

28 
ngx_buf_èg_t
 
	mèg
;

29 
ngx_fûe_t
 *
	mfûe
;

30 
ngx_buf_t
 *
	mshadow
;

34 
	mãmp‹¨y
:1;

40 
	mmem‹y
:1;

43 
	mmm≠
:1;

45 
	mªcy˛ed
:1;

46 
	mö_fûe
:1;

47 
	mÊush
:1;

48 
	msync
:1;

49 
	mœ°_buf
:1;

50 
	mœ°_ö_chaö
:1;

52 
	mœ°_shadow
:1;

53 
	mãmp_fûe
:1;

55  
	mnum
;

59 
	sngx_chaö_s
 {

60 
ngx_buf_t
 *
	mbuf
;

61 
ngx_chaö_t
 *
	m√xt
;

66 
ngx_öt_t
 
	mnum
;

67 
size_t
 
	msize
;

68 } 
	tngx_bufs_t
;

71 
ngx_ouçut_chaö_˘x_s
 
	tngx_ouçut_chaö_˘x_t
;

73 
	$ngx_öt_t
 (*
	tngx_ouçut_chaö_fûãr_±
)(*
	t˘x
, 
	tngx_chaö_t
 *
	tö
);

75 #i‡(
NGX_HAVE_FILE_AIO
)

76 (*
	tngx_ouçut_chaö_aio_±
)(
	tngx_ouçut_chaö_˘x_t
 *
	t˘x
,

77 
	tngx_fûe_t
 *
	tfûe
);

80 
	sngx_ouçut_chaö_˘x_s
 {

81 
ngx_buf_t
 *
buf
;

82 
ngx_chaö_t
 *
ö
;

83 
ngx_chaö_t
 *
‰ì
;

84 
ngx_chaö_t
 *
busy
;

86 
£ndfûe
:1;

87 
dúe˘io
:1;

88 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

89 
u«lig√d
:1;

91 
√ed_ö_mem‹y
:1;

92 
√ed_ö_ãmp
:1;

93 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

94 
aio
:1;

97 #i‡(
NGX_HAVE_FILE_AIO
)

98 
ngx_ouçut_chaö_aio_±
 
aio_h™dÀr
;

99 #i‡(
NGX_HAVE_AIO_SENDFILE
)

100 
	`ssize_t
 (*
aio_¥ñﬂd
)(
ngx_buf_t
 *
fûe
);

104 #i‡(
NGX_THREADS
)

105 
	`ngx_öt_t
 (*
thªad_h™dÀr
)(
ngx_thªad_èsk_t
 *
èsk
,

106 
ngx_fûe_t
 *
fûe
);

107 
ngx_thªad_èsk_t
 *
thªad_èsk
;

110 
off_t
 
Æignmít
;

112 
ngx_poﬁ_t
 *
poﬁ
;

113 
ngx_öt_t
 
Æloˇãd
;

114 
ngx_bufs_t
 
bufs
;

115 
ngx_buf_èg_t
 
èg
;

117 
ngx_ouçut_chaö_fûãr_±
 
ouçut_fûãr
;

118 *
fûãr_˘x
;

123 
ngx_chaö_t
 *
out
;

124 
ngx_chaö_t
 **
œ°
;

125 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

126 
ngx_poﬁ_t
 *
poﬁ
;

127 
off_t
 
limô
;

128 } 
	tngx_chaö_wrôî_˘x_t
;

131 
	#NGX_CHAIN_ERROR
 (
ngx_chaö_t
 *Ë
NGX_ERROR


	)

134 
	#ngx_buf_ö_mem‹y
(
b
Ë(b->
ãmp‹¨y
 || b->
mem‹y
 || b->
mm≠
)

	)

135 
	#ngx_buf_ö_mem‹y_⁄ly
(
b
Ë(
	`ngx_buf_ö_mem‹y
(bË&& !b->
ö_fûe
)

	)

137 
	#ngx_buf_•ecül
(
b
) \

138 ((
b
->
Êush
 || b->
œ°_buf
 || b->
sync
) \

139 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
)

	)

141 
	#ngx_buf_sync_⁄ly
(
b
) \

142 (
b
->
sync
 \

143 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
 && !b->
Êush
 && !b->
œ°_buf
)

	)

145 
	#ngx_buf_size
(
b
) \

146 (
	`ngx_buf_ö_mem‹y
(
b
Ë? (
off_t
Ë(b->
œ°
 - b->
pos
): \

147 (
b
->
fûe_œ°
 - b->
fûe_pos
))

	)

149 
ngx_buf_t
 *
	`ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

150 
ngx_chaö_t
 *
	`ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
);

153 
	#ngx_Æloc_buf
(
poﬁ
Ë
	`ngx_∑Œoc
’oﬁ, (
ngx_buf_t
))

	)

154 
	#ngx_ˇŒoc_buf
(
poﬁ
Ë
	`ngx_pˇŒoc
’oﬁ, (
ngx_buf_t
))

	)

156 
ngx_chaö_t
 *
	`ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
);

157 
	#ngx_‰ì_chaö
(
poﬁ
, 
˛
) \

158 
˛
->
√xt
 = 
poﬁ
->
chaö
; \

159 
poﬁ
->
chaö
 = 
˛


	)

163 
ngx_öt_t
 
	`ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

164 
ngx_öt_t
 
	`ngx_chaö_wrôî
(*
˘x
, 
ngx_chaö_t
 *
ö
);

166 
ngx_öt_t
 
	`ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

167 
ngx_chaö_t
 *
ö
);

168 
ngx_chaö_t
 *
	`ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
,Çgx_chaö_à**
‰ì
);

169 
	`ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,

170 
ngx_chaö_t
 **
busy
,Çgx_chaö_à**
out
, 
ngx_buf_èg_t
 
èg
);

172 
off_t
 
	`ngx_chaö_cﬂÀs˚_fûe
(
ngx_chaö_t
 **
ö
, off_à
limô
);

174 
ngx_chaö_t
 *
	`ngx_chaö_upd©e_£¡
“gx_chaö_à*
ö
, 
off_t
 
£¡
);

	@src/core/ngx_conf_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

11 
	#NGX_CONF_BUFFER
 4096

	)

13 
ngx_öt_t
 
ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
,Çgx_öt_à
œ°
);

14 
ngx_öt_t
 
ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
);

18 
ngx_comm™d_t
 
	gngx_c⁄f_comm™ds
[] = {

20 { 
ngx_°rög
("include"),

21 
NGX_ANY_CONF
|
NGX_CONF_TAKE1
,

22 
ngx_c⁄f_ö˛ude
,

25 
NULL
 },

27 
ngx_nuŒ_comm™d


31 
ngx_moduÀ_t
 
	gngx_c⁄f_moduÀ
 = {

32 
NGX_MODULE_V1
,

33 
NULL
,

34 
ngx_c⁄f_comm™ds
,

35 
NGX_CONF_MODULE
,

36 
NULL
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
ngx_c⁄f_Êush_fûes
,

42 
NULL
,

43 
NGX_MODULE_V1_PADDING


49 
ngx_uöt_t
 
	g¨gumít_numbî
[] = {

50 
NGX_CONF_NOARGS
,

51 
NGX_CONF_TAKE1
,

52 
NGX_CONF_TAKE2
,

53 
NGX_CONF_TAKE3
,

54 
NGX_CONF_TAKE4
,

55 
NGX_CONF_TAKE5
,

56 
NGX_CONF_TAKE6
,

57 
NGX_CONF_TAKE7


62 
	$ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
)

64 *
rv
;

65 
ngx_°r_t
 *
∑øm
;

66 
ngx_buf_t
 
b
;

67 
ngx_c⁄f_fûe_t
 
c⁄f_fûe
;

69 
∑øm
 = &
cf
->
cy˛e
->
c⁄f_∑øm
;

71 i‡(
∑øm
->
Àn
 == 0) {

72  
NGX_CONF_OK
;

75 
	`ngx_memzîo
(&
c⁄f_fûe
, (
ngx_c⁄f_fûe_t
));

77 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

79 
b
.
°¨t
 = 
∑øm
->
d©a
;

80 
b
.
pos
 = 
∑øm
->
d©a
;

81 
b
.
œ°
 = 
∑øm
->
d©a
 +Ö¨am->
Àn
;

82 
b
.
íd
 = b.
œ°
;

83 
b
.
ãmp‹¨y
 = 1;

85 
c⁄f_fûe
.
fûe
.
fd
 = 
NGX_INVALID_FILE
;

86 
c⁄f_fûe
.
fûe
.
«me
.
d©a
 = 
NULL
;

87 
c⁄f_fûe
.
löe
 = 0;

89 
cf
->
c⁄f_fûe
 = &conf_file;

90 
cf
->
c⁄f_fûe
->
buf„r
 = &
b
;

92 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

94 
cf
->
c⁄f_fûe
 = 
NULL
;

96  
rv
;

97 
	}
}

101 
	$ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
)

103 *
rv
;

104 
ngx_fd_t
 
fd
;

105 
ngx_öt_t
 
rc
;

106 
ngx_buf_t
 
buf
;

107 
ngx_c⁄f_fûe_t
 *
¥ev
, 
c⁄f_fûe
;

109 
∑r£_fûe
 = 0,

110 
∑r£_block
,

111 
∑r£_∑øm


112 } 
ty≥
;

114 #i‡(
NGX_SUPPRESS_WARN
)

115 
fd
 = 
NGX_INVALID_FILE
;

116 
¥ev
 = 
NULL
;

119 i‡(
fûíame
) {

123 
fd
 = 
	`ngx_›í_fûe
(
fûíame
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

124 i‡(
fd
 =
NGX_INVALID_FILE
) {

125 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

126 
ngx_›í_fûe_n
 " \"%s\" failed",

127 
fûíame
->
d©a
);

128  
NGX_CONF_ERROR
;

131 
¥ev
 = 
cf
->
c⁄f_fûe
;

133 
cf
->
c⁄f_fûe
 = &conf_file;

135 i‡(
	`ngx_fd_öfo
(
fd
, &
cf
->
c⁄f_fûe
->
fûe
.
öfo
Ë=
NGX_FILE_ERROR
) {

136 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 
ngx_î∫o
,

137 
ngx_fd_öfo_n
 " \"%s\" faûed", 
fûíame
->
d©a
);

140 
cf
->
c⁄f_fûe
->
buf„r
 = &
buf
;

142 
buf
.
°¨t
 = 
	`ngx_Æloc
(
NGX_CONF_BUFFER
, 
cf
->
log
);

143 i‡(
buf
.
°¨t
 =
NULL
) {

144 
Áûed
;

147 
buf
.
pos
 = buf.
°¨t
;

148 
buf
.
œ°
 = buf.
°¨t
;

149 
buf
.
íd
 = buf.
œ°
 + 
NGX_CONF_BUFFER
;

150 
buf
.
ãmp‹¨y
 = 1;

152 
cf
->
c⁄f_fûe
->
fûe
.
fd
 = fd;

153 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
Àn
 = 
fûíame
->len;

154 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
 = 
fûíame
->data;

155 
cf
->
c⁄f_fûe
->
fûe
.
off£t
 = 0;

156 
cf
->
c⁄f_fûe
->
fûe
.
log
 = cf->log;

157 
cf
->
c⁄f_fûe
->
löe
 = 1;

159 
ty≥
 = 
∑r£_fûe
;

161 } i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

163 
ty≥
 = 
∑r£_block
;

166 
ty≥
 = 
∑r£_∑øm
;

171 
rc
 = 
	`ngx_c⁄f_ªad_tokí
(
cf
);

183 i‡(
rc
 =
NGX_ERROR
) {

184 
d⁄e
;

187 i‡(
rc
 =
NGX_CONF_BLOCK_DONE
) {

189 i‡(
ty≥
 !
∑r£_block
) {

190 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "unexpected \"}\"");

191 
Áûed
;

194 
d⁄e
;

197 i‡(
rc
 =
NGX_CONF_FILE_DONE
) {

199 i‡(
ty≥
 =
∑r£_block
) {

200 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

202 
Áûed
;

205 
d⁄e
;

208 i‡(
rc
 =
NGX_CONF_BLOCK_START
) {

210 i‡(
ty≥
 =
∑r£_∑øm
) {

211 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

214 
Áûed
;

220 i‡(
cf
->
h™dÀr
) {

227 i‡(
rc
 =
NGX_CONF_BLOCK_START
) {

228 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "unexpected \"{\"");

229 
Áûed
;

232 
rv
 = (*
cf
->
h™dÀr
)(cf, 
NULL
, cf->
h™dÀr_c⁄f
);

233 i‡(
rv
 =
NGX_CONF_OK
) {

237 i‡(
rv
 =
NGX_CONF_ERROR
) {

238 
Áûed
;

241 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, 
rv
);

243 
Áûed
;

247 
rc
 = 
	`ngx_c⁄f_h™dÀr
(
cf
,Ñc);

249 i‡(
rc
 =
NGX_ERROR
) {

250 
Áûed
;

254 
Áûed
:

256 
rc
 = 
NGX_ERROR
;

258 
d⁄e
:

260 i‡(
fûíame
) {

261 i‡(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
) {

262 
	`ngx_‰ì
(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
);

265 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

266 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

267 
ngx_˛o£_fûe_n
 " %s failed",

268 
fûíame
->
d©a
);

269 
rc
 = 
NGX_ERROR
;

272 
cf
->
c⁄f_fûe
 = 
¥ev
;

275 i‡(
rc
 =
NGX_ERROR
) {

276  
NGX_CONF_ERROR
;

279  
NGX_CONF_OK
;

280 
	}
}

283 
ngx_öt_t


284 
	$ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
, 
ngx_öt_t
 
œ°
)

286 *
rv
;

287 *
c⁄f
, **
c⁄Â
;

288 
ngx_uöt_t
 
i
, 
found
;

289 
ngx_°r_t
 *
«me
;

290 
ngx_comm™d_t
 *
cmd
;

292 
«me
 = 
cf
->
¨gs
->
ñts
;

294 
found
 = 0;

296 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

298 
cmd
 = 
ngx_moduÀs
[
i
]->
comm™ds
;

299 i‡(
cmd
 =
NULL
) {

303  ; 
cmd
->
«me
.
Àn
; cmd++) {

305 i‡(
«me
->
Àn
 !
cmd
->name.len) {

309 i‡(
	`ngx_°rcmp
(
«me
->
d©a
, 
cmd
->name.data) != 0) {

313 
found
 = 1;

315 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CONF_MODULE


316 && 
ngx_moduÀs
[
i
]->
ty≥
 !
cf
->
moduÀ_ty≥
)

323 i‡(!(
cmd
->
ty≥
 & 
cf
->
cmd_ty≥
)) {

327 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_OK
) {

328 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

330 
«me
->
d©a
);

331  
NGX_ERROR
;

334 i‡((
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_CONF_BLOCK_START
) {

335 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

337 
«me
->
d©a
);

338  
NGX_ERROR
;

343 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_ANY
)) {

345 i‡(
cmd
->
ty≥
 & 
NGX_CONF_FLAG
) {

347 i‡(
cf
->
¨gs
->
√…s
 != 2) {

348 
övÆid
;

351 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_1MORE
) {

353 i‡(
cf
->
¨gs
->
√…s
 < 2) {

354 
övÆid
;

357 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_2MORE
) {

359 i‡(
cf
->
¨gs
->
√…s
 < 3) {

360 
övÆid
;

363 } i‡(
cf
->
¨gs
->
√…s
 > 
NGX_CONF_MAX_ARGS
) {

365 
övÆid
;

367 } i‡(!(
cmd
->
ty≥
 & 
¨gumít_numbî
[
cf
->
¨gs
->
√…s
 - 1]))

369 
övÆid
;

375 
c⁄f
 = 
NULL
;

377 i‡(
cmd
->
ty≥
 & 
NGX_DIRECT_CONF
) {

378 
c⁄f
 = ((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
];

380 } i‡(
cmd
->
ty≥
 & 
NGX_MAIN_CONF
) {

381 
c⁄f
 = &(((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
]);

383 } i‡(
cf
->
˘x
) {

384 
c⁄Â
 = *(**Ë((*Ë
cf
->
˘x
 + 
cmd
->
c⁄f
);

386 i‡(
c⁄Â
) {

387 
c⁄f
 = 
c⁄Â
[
ngx_moduÀs
[
i
]->
˘x_ödex
];

391 
rv
 = 
cmd
->
	`£t
(
cf
, cmd, 
c⁄f
);

393 i‡(
rv
 =
NGX_CONF_OK
) {

394  
NGX_OK
;

397 i‡(
rv
 =
NGX_CONF_ERROR
) {

398  
NGX_ERROR
;

401 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

402 "\"%s\" dúe˘ivê%s", 
«me
->
d©a
, 
rv
);

404  
NGX_ERROR
;

408 i‡(
found
) {

409 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

410 "\"%s\" dúe˘ivêi†nŸáŒowed hîe", 
«me
->
d©a
);

412  
NGX_ERROR
;

415 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

416 "unknow¿dúe˘ivê\"%s\"", 
«me
->
d©a
);

418  
NGX_ERROR
;

420 
övÆid
:

422 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

424 
«me
->
d©a
);

426  
NGX_ERROR
;

427 
	}
}

430 
ngx_öt_t


431 
	$ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
)

433 
u_ch¨
 *
°¨t
, 
ch
, *
§c
, *
d°
;

434 
off_t
 
fûe_size
;

435 
size_t
 
Àn
;

436 
ssize_t
 
n
, 
size
;

437 
ngx_uöt_t
 
found
, 
√ed_•a˚
, 
œ°_•a˚
, 
sh¨p_commít
, 
v¨übÀ
;

438 
ngx_uöt_t
 
quŸed
, 
s_quŸed
, 
d_quŸed
, 
°¨t_löe
;

439 
ngx_°r_t
 *
w‹d
;

440 
ngx_buf_t
 *
b
;

442 
found
 = 0;

443 
√ed_•a˚
 = 0;

444 
œ°_•a˚
 = 1;

445 
sh¨p_commít
 = 0;

446 
v¨übÀ
 = 0;

447 
quŸed
 = 0;

448 
s_quŸed
 = 0;

449 
d_quŸed
 = 0;

451 
cf
->
¨gs
->
√…s
 = 0;

452 
b
 = 
cf
->
c⁄f_fûe
->
buf„r
;

453 
°¨t
 = 
b
->
pos
;

454 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

456 
fûe_size
 = 
	`ngx_fûe_size
(&
cf
->
c⁄f_fûe
->
fûe
.
öfo
);

460 i‡(
b
->
pos
 >b->
œ°
) {

462 i‡(
cf
->
c⁄f_fûe
->
fûe
.
off£t
 >
fûe_size
) {

464 i‡(
cf
->
¨gs
->
√…s
 > 0 || !
œ°_•a˚
) {

466 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

467 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

470  
NGX_ERROR
;

473 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

476  
NGX_ERROR
;

479  
NGX_CONF_FILE_DONE
;

482 
Àn
 = 
b
->
pos
 - 
°¨t
;

484 i‡(
Àn
 =
NGX_CONF_BUFFER
) {

485 
cf
->
c⁄f_fûe
->
löe
 = 
°¨t_löe
;

487 i‡(
d_quŸed
) {

488 
ch
 = '"';

490 } i‡(
s_quŸed
) {

491 
ch
 = '\'';

494 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

496 10, 
°¨t
);

497  
NGX_ERROR
;

500 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

502 "missögÅîmö©ög \"%c\" ch¨a˘î", 
ch
);

503  
NGX_ERROR
;

506 i‡(
Àn
) {

507 
	`ngx_memmove
(
b
->
°¨t
, sèπ, 
Àn
);

510 
size
 = (
ssize_t
Ë(
fûe_size
 - 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

512 i‡(
size
 > 
b
->
íd
 - (b->
°¨t
 + 
Àn
)) {

513 
size
 = 
b
->
íd
 - (b->
°¨t
 + 
Àn
);

516 
n
 = 
	`ngx_ªad_fûe
(&
cf
->
c⁄f_fûe
->
fûe
, 
b
->
°¨t
 + 
Àn
, 
size
,

517 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

519 i‡(
n
 =
NGX_ERROR
) {

520  
NGX_ERROR
;

523 i‡(
n
 !
size
) {

524 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

525 
ngx_ªad_fûe_n
 "Ñeturned "

527 
n
, 
size
);

528  
NGX_ERROR
;

531 
b
->
pos
 = b->
°¨t
 + 
Àn
;

532 
b
->
œ°
 = b->
pos
 + 
n
;

533 
°¨t
 = 
b
->start;

536 
ch
 = *
b
->
pos
++;

538 i‡(
ch
 =
LF
) {

539 
cf
->
c⁄f_fûe
->
löe
++;

541 i‡(
sh¨p_commít
) {

542 
sh¨p_commít
 = 0;

546 i‡(
sh¨p_commít
) {

550 i‡(
quŸed
) {

551 
quŸed
 = 0;

555 i‡(
√ed_•a˚
) {

556 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

557 
œ°_•a˚
 = 1;

558 
√ed_•a˚
 = 0;

562 i‡(
ch
 == ';') {

563  
NGX_OK
;

566 i‡(
ch
 == '{') {

567  
NGX_CONF_BLOCK_START
;

570 i‡(
ch
 == ')') {

571 
œ°_•a˚
 = 1;

572 
√ed_•a˚
 = 0;

575 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

576 "u√x≥˘ed \"%c\"", 
ch
);

577  
NGX_ERROR
;

581 i‡(
œ°_•a˚
) {

582 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

586 
°¨t
 = 
b
->
pos
 - 1;

587 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

589 
ch
) {

593 i‡(
cf
->
¨gs
->
√…s
 == 0) {

594 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

595 "u√x≥˘ed \"%c\"", 
ch
);

596  
NGX_ERROR
;

599 i‡(
ch
 == '{') {

600  
NGX_CONF_BLOCK_START
;

603  
NGX_OK
;

606 i‡(
cf
->
¨gs
->
√…s
 != 0) {

607 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

609  
NGX_ERROR
;

612  
NGX_CONF_BLOCK_DONE
;

615 
sh¨p_commít
 = 1;

619 
quŸed
 = 1;

620 
œ°_•a˚
 = 0;

624 
°¨t
++;

625 
d_quŸed
 = 1;

626 
œ°_•a˚
 = 0;

630 
°¨t
++;

631 
s_quŸed
 = 1;

632 
œ°_•a˚
 = 0;

636 
œ°_•a˚
 = 0;

640 i‡(
ch
 ='{' && 
v¨übÀ
) {

644 
v¨übÀ
 = 0;

646 i‡(
ch
 == '\\') {

647 
quŸed
 = 1;

651 i‡(
ch
 == '$') {

652 
v¨übÀ
 = 1;

656 i‡(
d_quŸed
) {

657 i‡(
ch
 == '"') {

658 
d_quŸed
 = 0;

659 
√ed_•a˚
 = 1;

660 
found
 = 1;

663 } i‡(
s_quŸed
) {

664 i‡(
ch
 == '\'') {

665 
s_quŸed
 = 0;

666 
√ed_•a˚
 = 1;

667 
found
 = 1;

670 } i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF


671 || 
ch
 == ';' || ch == '{')

673 
œ°_•a˚
 = 1;

674 
found
 = 1;

677 i‡(
found
) {

678 
w‹d
 = 
	`ngx_¨øy_push
(
cf
->
¨gs
);

679 i‡(
w‹d
 =
NULL
) {

680  
NGX_ERROR
;

683 
w‹d
->
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
b
->
pos
 - 
°¨t
 + 1);

684 i‡(
w‹d
->
d©a
 =
NULL
) {

685  
NGX_ERROR
;

688 
d°
 = 
w‹d
->
d©a
, 
§c
 = 
°¨t
, 
Àn
 = 0;

689 
§c
 < 
b
->
pos
 - 1;

690 
Àn
++)

692 i‡(*
§c
 == '\\') {

693 
§c
[1]) {

697 
§c
++;

701 *
d°
++ = '\t';

702 
§c
 += 2;

706 *
d°
++ = '\r';

707 
§c
 += 2;

711 *
d°
++ = '\n';

712 
§c
 += 2;

717 *
d°
++ = *
§c
++;

719 *
d°
 = '\0';

720 
w‹d
->
Àn
 =Üen;

722 i‡(
ch
 == ';') {

723  
NGX_OK
;

726 i‡(
ch
 == '{') {

727  
NGX_CONF_BLOCK_START
;

730 
found
 = 0;

734 
	}
}

738 
	$ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

740 *
rv
;

741 
ngx_öt_t
 
n
;

742 
ngx_°r_t
 *
vÆue
, 
fûe
, 
«me
;

743 
ngx_glob_t
 
gl
;

745 
vÆue
 = 
cf
->
¨gs
->
ñts
;

746 
fûe
 = 
vÆue
[1];

748 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

750 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

751  
NGX_CONF_ERROR
;

754 i‡(
	`°Ωbrk
((*Ë
fûe
.
d©a
, "*?["Ë=
NULL
) {

756 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

758  
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

761 
	`ngx_memzîo
(&
gl
, (
ngx_glob_t
));

763 
gl
.
∑âîn
 = 
fûe
.
d©a
;

764 
gl
.
log
 = 
cf
->log;

765 
gl
.
ã°
 = 1;

767 i‡(
	`ngx_›í_glob
(&
gl
Ë!
NGX_OK
) {

768 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

769 
ngx_›í_glob_n
 " \"%s\" faûed", 
fûe
.
d©a
);

770  
NGX_CONF_ERROR
;

773 
rv
 = 
NGX_CONF_OK
;

776 
n
 = 
	`ngx_ªad_glob
(&
gl
, &
«me
);

778 i‡(
n
 !
NGX_OK
) {

782 
fûe
.
Àn
 = 
«me
.len++;

783 
fûe
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

784 i‡(
fûe
.
d©a
 =
NULL
) {

785  
NGX_CONF_ERROR
;

788 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

790 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

792 i‡(
rv
 !
NGX_CONF_OK
) {

797 
	`ngx_˛o£_glob
(&
gl
);

799  
rv
;

800 
	}
}

803 
ngx_öt_t


804 
	$ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
c⁄f_¥efix
)

806 
ngx_°r_t
 *
¥efix
;

808 
¥efix
 = 
c⁄f_¥efix
 ? &
cy˛e
->conf_prefix : &cycle->prefix;

810  
	`ngx_gë_fuŒ_«me
(
cy˛e
->
poﬁ
, 
¥efix
, 
«me
);

811 
	}
}

814 
ngx_›í_fûe_t
 *

815 
	$ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

817 
ngx_°r_t
 
fuŒ
;

818 
ngx_uöt_t
 
i
;

819 
ngx_li°_∑π_t
 *
∑π
;

820 
ngx_›í_fûe_t
 *
fûe
;

822 #i‡(
NGX_SUPPRESS_WARN
)

823 
	`ngx_°r_nuŒ
(&
fuŒ
);

826 i‡(
«me
->
Àn
) {

827 
fuŒ
 = *
«me
;

829 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
fuŒ
, 0Ë!
NGX_OK
) {

830  
NULL
;

833 
∑π
 = &
cy˛e
->
›í_fûes
.part;

834 
fûe
 = 
∑π
->
ñts
;

836 
i
 = 0; ; i++) {

838 i‡(
i
 >
∑π
->
√…s
) {

839 i‡(
∑π
->
√xt
 =
NULL
) {

842 
∑π
 =Ö¨t->
√xt
;

843 
fûe
 = 
∑π
->
ñts
;

844 
i
 = 0;

847 i‡(
fuŒ
.
Àn
 !
fûe
[
i
].
«me
.len) {

851 i‡(
	`ngx_°rcmp
(
fuŒ
.
d©a
, 
fûe
[
i
].
«me
.data) == 0) {

852  &
fûe
[
i
];

857 
fûe
 = 
	`ngx_li°_push
(&
cy˛e
->
›í_fûes
);

858 i‡(
fûe
 =
NULL
) {

859  
NULL
;

862 i‡(
«me
->
Àn
) {

863 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

864 
fûe
->
«me
 = 
fuŒ
;

867 
fûe
->
fd
 = 
ngx_°dîr
;

868 
fûe
->
«me
 = *name;

871 
fûe
->
Êush
 = 
NULL
;

872 
fûe
->
d©a
 = 
NULL
;

874  
fûe
;

875 
	}
}

879 
	$ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
)

881 
ngx_uöt_t
 
i
;

882 
ngx_li°_∑π_t
 *
∑π
;

883 
ngx_›í_fûe_t
 *
fûe
;

885 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "flush files");

887 
∑π
 = &
cy˛e
->
›í_fûes
.part;

888 
fûe
 = 
∑π
->
ñts
;

890 
i
 = 0; ; i++) {

892 i‡(
i
 >
∑π
->
√…s
) {

893 i‡(
∑π
->
√xt
 =
NULL
) {

896 
∑π
 =Ö¨t->
√xt
;

897 
fûe
 = 
∑π
->
ñts
;

898 
i
 = 0;

901 i‡(
fûe
[
i
].
Êush
) {

902 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

905 
	}
}

908 
ngx_cde˛


909 
	$ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
, 
ngx_îr_t
 
îr
,

910 c⁄° *
fmt
, ...)

912 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
], *
p
, *
œ°
;

913 
va_li°
 
¨gs
;

915 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

917 
	`va_°¨t
(
¨gs
, 
fmt
);

918 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
, 
fmt
, 
¨gs
);

919 
	`va_íd
(
¨gs
);

921 i‡(
îr
) {

922 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

925 i‡(
cf
->
c⁄f_fûe
 =
NULL
) {

926 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s", 
p
 - 
îr°r
,Érrstr);

930 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

931 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in commandÜine",

932 
p
 - 
îr°r
,Érrstr);

936 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in %s:%ui",

937 
p
 - 
îr°r
,Érrstr,

938 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
, cf->c⁄f_fûe->
löe
);

939 
	}
}

943 
	$ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

945 *
p
 = 
c⁄f
;

947 
ngx_°r_t
 *
vÆue
;

948 
ngx_Êag_t
 *
Â
;

949 
ngx_c⁄f_po°_t
 *
po°
;

951 
Â
 = (
ngx_Êag_t
 *Ë(
p
 + 
cmd
->
off£t
);

953 i‡(*
Â
 !
NGX_CONF_UNSET
) {

957 
vÆue
 = 
cf
->
¨gs
->
ñts
;

959 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "on") == 0) {

960 *
Â
 = 1;

962 } i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "off") == 0) {

963 *
Â
 = 0;

966 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

969 
vÆue
[1].
d©a
, 
cmd
->
«me
.data);

970  
NGX_CONF_ERROR
;

973 i‡(
cmd
->
po°
) {

974 
po°
 = 
cmd
->post;

975  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
Â
);

978  
NGX_CONF_OK
;

979 
	}
}

983 
	$ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

985 *
p
 = 
c⁄f
;

987 
ngx_°r_t
 *
fõld
, *
vÆue
;

988 
ngx_c⁄f_po°_t
 *
po°
;

990 
fõld
 = (
ngx_°r_t
 *Ë(
p
 + 
cmd
->
off£t
);

992 i‡(
fõld
->
d©a
) {

996 
vÆue
 = 
cf
->
¨gs
->
ñts
;

998 *
fõld
 = 
vÆue
[1];

1000 i‡(
cmd
->
po°
) {

1001 
po°
 = 
cmd
->post;

1002  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
fõld
);

1005  
NGX_CONF_OK
;

1006 
	}
}

1010 
	$ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1012 *
p
 = 
c⁄f
;

1014 
ngx_°r_t
 *
vÆue
, *
s
;

1015 
ngx_¨øy_t
 **
a
;

1016 
ngx_c⁄f_po°_t
 *
po°
;

1018 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1020 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1021 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_°r_t
));

1022 i‡(*
a
 =
NULL
) {

1023  
NGX_CONF_ERROR
;

1027 
s
 = 
	`ngx_¨øy_push
(*
a
);

1028 i‡(
s
 =
NULL
) {

1029  
NGX_CONF_ERROR
;

1032 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1034 *
s
 = 
vÆue
[1];

1036 i‡(
cmd
->
po°
) {

1037 
po°
 = 
cmd
->post;

1038  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
s
);

1041  
NGX_CONF_OK
;

1042 
	}
}

1046 
	$ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1048 *
p
 = 
c⁄f
;

1050 
ngx_°r_t
 *
vÆue
;

1051 
ngx_¨øy_t
 **
a
;

1052 
ngx_keyvÆ_t
 *
kv
;

1053 
ngx_c⁄f_po°_t
 *
po°
;

1055 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1057 i‡(*
a
 =
NULL
) {

1058 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_keyvÆ_t
));

1059 i‡(*
a
 =
NULL
) {

1060  
NGX_CONF_ERROR
;

1064 
kv
 = 
	`ngx_¨øy_push
(*
a
);

1065 i‡(
kv
 =
NULL
) {

1066  
NGX_CONF_ERROR
;

1069 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1071 
kv
->
key
 = 
vÆue
[1];

1072 
kv
->
vÆue
 = value[2];

1074 i‡(
cmd
->
po°
) {

1075 
po°
 = 
cmd
->post;

1076  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
kv
);

1079  
NGX_CONF_OK
;

1080 
	}
}

1084 
	$ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1086 *
p
 = 
c⁄f
;

1088 
ngx_öt_t
 *
≈
;

1089 
ngx_°r_t
 *
vÆue
;

1090 
ngx_c⁄f_po°_t
 *
po°
;

1093 
≈
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1095 i‡(*
≈
 !
NGX_CONF_UNSET
) {

1099 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1100 *
≈
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1101 i‡(*
≈
 =
NGX_ERROR
) {

1105 i‡(
cmd
->
po°
) {

1106 
po°
 = 
cmd
->post;

1107  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
≈
);

1110  
NGX_CONF_OK
;

1111 
	}
}

1115 
	$ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1117 *
p
 = 
c⁄f
;

1119 
size_t
 *
•
;

1120 
ngx_°r_t
 *
vÆue
;

1121 
ngx_c⁄f_po°_t
 *
po°
;

1124 
•
 = (
size_t
 *Ë(
p
 + 
cmd
->
off£t
);

1125 i‡(*
•
 !
NGX_CONF_UNSET_SIZE
) {

1129 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1131 *
•
 = 
	`ngx_∑r£_size
(&
vÆue
[1]);

1132 i‡(*
•
 =(
size_t
Ë
NGX_ERROR
) {

1136 i‡(
cmd
->
po°
) {

1137 
po°
 = 
cmd
->post;

1138  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1141  
NGX_CONF_OK
;

1142 
	}
}

1146 
	$ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1148 *
p
 = 
c⁄f
;

1150 
off_t
 *
›
;

1151 
ngx_°r_t
 *
vÆue
;

1152 
ngx_c⁄f_po°_t
 *
po°
;

1155 
›
 = (
off_t
 *Ë(
p
 + 
cmd
->
off£t
);

1156 i‡(*
›
 !
NGX_CONF_UNSET
) {

1160 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1162 *
›
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

1163 i‡(*
›
 =(
off_t
Ë
NGX_ERROR
) {

1167 i‡(
cmd
->
po°
) {

1168 
po°
 = 
cmd
->post;

1169  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
›
);

1172  
NGX_CONF_OK
;

1173 
	}
}

1177 
	$ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1179 *
p
 = 
c⁄f
;

1181 
ngx_m£c_t
 *
m•
;

1182 
ngx_°r_t
 *
vÆue
;

1183 
ngx_c⁄f_po°_t
 *
po°
;

1186 
m•
 = (
ngx_m£c_t
 *Ë(
p
 + 
cmd
->
off£t
);

1187 i‡(*
m•
 !
NGX_CONF_UNSET_MSEC
) {

1191 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1193 *
m•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

1194 i‡(*
m•
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1198 i‡(
cmd
->
po°
) {

1199 
po°
 = 
cmd
->post;

1200  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
m•
);

1203  
NGX_CONF_OK
;

1204 
	}
}

1208 
	$ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1210 *
p
 = 
c⁄f
;

1212 
time_t
 *
•
;

1213 
ngx_°r_t
 *
vÆue
;

1214 
ngx_c⁄f_po°_t
 *
po°
;

1217 
•
 = (
time_t
 *Ë(
p
 + 
cmd
->
off£t
);

1218 i‡(*
•
 !
NGX_CONF_UNSET
) {

1222 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1224 *
•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

1225 i‡(*
•
 =(
time_t
Ë
NGX_ERROR
) {

1229 i‡(
cmd
->
po°
) {

1230 
po°
 = 
cmd
->post;

1231  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1234  
NGX_CONF_OK
;

1235 
	}
}

1239 
	$ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1241 *
p
 = 
c⁄f
;

1243 
ngx_°r_t
 *
vÆue
;

1244 
ngx_bufs_t
 *
bufs
;

1247 
bufs
 = (
ngx_bufs_t
 *Ë(
p
 + 
cmd
->
off£t
);

1248 i‡(
bufs
->
num
) {

1252 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1254 
bufs
->
num
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1255 i‡(
bufs
->
num
 =
NGX_ERROR
 || bufs->num == 0) {

1259 
bufs
->
size
 = 
	`ngx_∑r£_size
(&
vÆue
[2]);

1260 i‡(
bufs
->
size
 =(
size_t
Ë
NGX_ERROR
 || bufs->size == 0) {

1264  
NGX_CONF_OK
;

1265 
	}
}

1269 
	$ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1271 *
p
 = 
c⁄f
;

1273 
ngx_uöt_t
 *
≈
, 
i
;

1274 
ngx_°r_t
 *
vÆue
;

1275 
ngx_c⁄f_íum_t
 *
e
;

1277 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1279 i‡(*
≈
 !
NGX_CONF_UNSET_UINT
) {

1283 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1284 
e
 = 
cmd
->
po°
;

1286 
i
 = 0; 
e
[i].
«me
.
Àn
 != 0; i++) {

1287 i‡(
e
[
i
].
«me
.
Àn
 !
vÆue
[1].len

1288 || 
	`ngx_°rˇ£cmp
(
e
[
i
].
«me
.
d©a
, 
vÆue
[1].data) != 0)

1293 *
≈
 = 
e
[
i
].
vÆue
;

1295  
NGX_CONF_OK
;

1298 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1299 "övÆid vÆuê\"%s\"", 
vÆue
[1].
d©a
);

1301  
NGX_CONF_ERROR
;

1302 
	}
}

1306 
	$ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1308 *
p
 = 
c⁄f
;

1310 
ngx_uöt_t
 *
≈
, 
i
, 
m
;

1311 
ngx_°r_t
 *
vÆue
;

1312 
ngx_c⁄f_bômask_t
 *
mask
;

1315 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1316 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1317 
mask
 = 
cmd
->
po°
;

1319 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1320 
m
 = 0; 
mask
[m].
«me
.
Àn
 != 0; m++) {

1322 i‡(
mask
[
m
].
«me
.
Àn
 !
vÆue
[
i
].len

1323 || 
	`ngx_°rˇ£cmp
(
mask
[
m
].
«me
.
d©a
, 
vÆue
[
i
].data) != 0)

1328 i‡(*
≈
 & 
mask
[
m
].mask) {

1329 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1330 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1333 *
≈
 |
mask
[
m
].mask;

1339 i‡(
mask
[
m
].
«me
.
Àn
 == 0) {

1340 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1341 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1343  
NGX_CONF_ERROR
;

1347  
NGX_CONF_OK
;

1348 
	}
}

1354 
	$ngx_c⁄f_unsuµ‹ãd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1357 
	}
}

1363 
	$ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1365 
ngx_c⁄f_dïªˇãd_t
 *
d
 = 
po°
;

1367 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1370 
d
->
ﬁd_«me
, d->
√w_«me
);

1372  
NGX_CONF_OK
;

1373 
	}
}

1377 
	$ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1379 
ngx_c⁄f_num_bounds_t
 *
bounds
 = 
po°
;

1380 
ngx_öt_t
 *
≈
 = 
d©a
;

1382 i‡(
bounds
->
high
 == -1) {

1383 i‡(*
≈
 >
bounds
->
low
) {

1384  
NGX_CONF_OK
;

1387 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1389 
bounds
->
low
);

1391  
NGX_CONF_ERROR
;

1394 i‡(*
≈
 >
bounds
->
low
 && *≈ <bounds->
high
) {

1395  
NGX_CONF_OK
;

1398 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1400 
bounds
->
low
, bounds->
high
);

1402  
NGX_CONF_ERROR
;

1403 
	}
}

	@src/core/ngx_conf_file.h

8 #i‚de‡
_NGX_CONF_FILE_H_INCLUDED_


9 
	#_NGX_CONF_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

22 
	#NGX_CONF_NOARGS
 0x00000001

	)

23 
	#NGX_CONF_TAKE1
 0x00000002

	)

24 
	#NGX_CONF_TAKE2
 0x00000004

	)

25 
	#NGX_CONF_TAKE3
 0x00000008

	)

26 
	#NGX_CONF_TAKE4
 0x00000010

	)

27 
	#NGX_CONF_TAKE5
 0x00000020

	)

28 
	#NGX_CONF_TAKE6
 0x00000040

	)

29 
	#NGX_CONF_TAKE7
 0x00000080

	)

31 
	#NGX_CONF_MAX_ARGS
 8

	)

33 
	#NGX_CONF_TAKE12
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
)

	)

34 
	#NGX_CONF_TAKE13
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE3
)

	)

36 
	#NGX_CONF_TAKE23
 (
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

38 
	#NGX_CONF_TAKE123
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

39 
	#NGX_CONF_TAKE1234
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
 \

40 |
NGX_CONF_TAKE4
)

	)

42 
	#NGX_CONF_ARGS_NUMBER
 0x000000ff

	)

43 
	#NGX_CONF_BLOCK
 0x00000100

	)

44 
	#NGX_CONF_FLAG
 0x00000200

	)

45 
	#NGX_CONF_ANY
 0x00000400

	)

46 
	#NGX_CONF_1MORE
 0x00000800

	)

47 
	#NGX_CONF_2MORE
 0x00001000

	)

48 
	#NGX_CONF_MULTI
 0x00000000

	)

50 
	#NGX_DIRECT_CONF
 0x00010000

	)

52 
	#NGX_MAIN_CONF
 0x01000000

	)

53 
	#NGX_ANY_CONF
 0x0F000000

	)

57 
	#NGX_CONF_UNSET
 -1

	)

58 
	#NGX_CONF_UNSET_UINT
 (
ngx_uöt_t
Ë-1

	)

59 
	#NGX_CONF_UNSET_PTR
 (*Ë-1

	)

60 
	#NGX_CONF_UNSET_SIZE
 (
size_t
Ë-1

	)

61 
	#NGX_CONF_UNSET_MSEC
 (
ngx_m£c_t
Ë-1

	)

64 
	#NGX_CONF_OK
 
NULL


	)

65 
	#NGX_CONF_ERROR
 (*Ë-1

	)

67 
	#NGX_CONF_BLOCK_START
 1

	)

68 
	#NGX_CONF_BLOCK_DONE
 2

	)

69 
	#NGX_CONF_FILE_DONE
 3

	)

71 
	#NGX_CORE_MODULE
 0x45524F43

	)

72 
	#NGX_CONF_MODULE
 0x464E4F43

	)

75 
	#NGX_MAX_CONF_ERRSTR
 1024

	)

78 
	sngx_comm™d_s
 {

79 
ngx_°r_t
 
	m«me
;

80 
ngx_uöt_t
 
	mty≥
;

81 *(*
	m£t
)(
ngx_c⁄f_t
 *
	mcf
, 
ngx_comm™d_t
 *
	mcmd
, *
	mc⁄f
);

82 
ngx_uöt_t
 
	mc⁄f
;

83 
ngx_uöt_t
 
	moff£t
;

84 *
	mpo°
;

87 
	#ngx_nuŒ_comm™d
 { 
ngx_nuŒ_°rög
, 0, 
NULL
, 0, 0, NULL }

	)

90 
	sngx_›í_fûe_s
 {

91 
ngx_fd_t
 
	mfd
;

92 
ngx_°r_t
 
	m«me
;

94 (*
	mÊush
)(
ngx_›í_fûe_t
 *
	mfûe
, 
ngx_log_t
 *
	mlog
);

95 *
	md©a
;

99 
	#NGX_MODULE_V1
 0, 0, 0, 0, 0, 0, 1

	)

100 
	#NGX_MODULE_V1_PADDING
 0, 0, 0, 0, 0, 0, 0, 0

	)

102 
	sngx_moduÀ_s
 {

103 
ngx_uöt_t
 
	m˘x_ödex
;

104 
ngx_uöt_t
 
	mödex
;

106 
ngx_uöt_t
 
	m•¨e0
;

107 
ngx_uöt_t
 
	m•¨e1
;

108 
ngx_uöt_t
 
	m•¨e2
;

109 
ngx_uöt_t
 
	m•¨e3
;

111 
ngx_uöt_t
 
	mvîsi⁄
;

113 *
	m˘x
;

114 
ngx_comm™d_t
 *
	mcomm™ds
;

115 
ngx_uöt_t
 
	mty≥
;

117 
ngx_öt_t
 (*
öô_ma°î
)(
ngx_log_t
 *
	mlog
);

119 
ngx_öt_t
 (*
öô_moduÀ
)(
ngx_cy˛e_t
 *
	mcy˛e
);

121 
ngx_öt_t
 (*
öô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

122 
ngx_öt_t
 (*
öô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

123 (*
	mexô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

124 (*
	mexô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

126 (*
	mexô_ma°î
)(
ngx_cy˛e_t
 *
	mcy˛e
);

128 
uöçå_t
 
	m•¨e_hook0
;

129 
uöçå_t
 
	m•¨e_hook1
;

130 
uöçå_t
 
	m•¨e_hook2
;

131 
uöçå_t
 
	m•¨e_hook3
;

132 
uöçå_t
 
	m•¨e_hook4
;

133 
uöçå_t
 
	m•¨e_hook5
;

134 
uöçå_t
 
	m•¨e_hook6
;

135 
uöçå_t
 
	m•¨e_hook7
;

140 
ngx_°r_t
 
	m«me
;

141 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

142 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

143 } 
	tngx_c‹e_moduÀ_t
;

147 
ngx_fûe_t
 
	mfûe
;

148 
ngx_buf_t
 *
	mbuf„r
;

149 
ngx_uöt_t
 
	mlöe
;

150 } 
	tngx_c⁄f_fûe_t
;

153 *(*
	tngx_c⁄f_h™dÀr_±
)(
	tngx_c⁄f_t
 *
	tcf
,

154 
	tngx_comm™d_t
 *
	tdummy
, *
	tc⁄f
);

157 
	sngx_c⁄f_s
 {

158 *
	m«me
;

159 
ngx_¨øy_t
 *
	m¨gs
;

161 
ngx_cy˛e_t
 *
	mcy˛e
;

162 
ngx_poﬁ_t
 *
	mpoﬁ
;

163 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

164 
ngx_c⁄f_fûe_t
 *
	mc⁄f_fûe
;

165 
ngx_log_t
 *
	mlog
;

167 *
	m˘x
;

168 
ngx_uöt_t
 
	mmoduÀ_ty≥
;

169 
ngx_uöt_t
 
	mcmd_ty≥
;

171 
ngx_c⁄f_h™dÀr_±
 
	mh™dÀr
;

172 *
	mh™dÀr_c⁄f
;

176 *(*
	tngx_c⁄f_po°_h™dÀr_±
Ë(
	tngx_c⁄f_t
 *
	tcf
,

177 *
	td©a
, *
	tc⁄f
);

180 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

181 } 
	tngx_c⁄f_po°_t
;

185 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

186 *
	mﬁd_«me
;

187 *
	m√w_«me
;

188 } 
	tngx_c⁄f_dïªˇãd_t
;

192 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

193 
ngx_öt_t
 
	mlow
;

194 
ngx_öt_t
 
	mhigh
;

195 } 
	tngx_c⁄f_num_bounds_t
;

199 
ngx_°r_t
 
	m«me
;

200 
ngx_uöt_t
 
	mvÆue
;

201 } 
	tngx_c⁄f_íum_t
;

204 
	#NGX_CONF_BITMASK_SET
 1

	)

207 
ngx_°r_t
 
	m«me
;

208 
ngx_uöt_t
 
	mmask
;

209 } 
	tngx_c⁄f_bômask_t
;

213 * 
ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

214 *
ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

217 
	#ngx_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
Ëc⁄f_˘x[moduÀ.
ödex
]

	)

221 
	#ngx_c⁄f_öô_vÆue
(
c⁄f
, ) \

222 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

223 
c⁄f
 = ; \

224 }

	)

226 
	#ngx_c⁄f_öô_±r_vÆue
(
c⁄f
, ) \

227 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

228 
c⁄f
 = ; \

229 }

	)

231 
	#ngx_c⁄f_öô_uöt_vÆue
(
c⁄f
, ) \

232 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

233 
c⁄f
 = ; \

234 }

	)

236 
	#ngx_c⁄f_öô_size_vÆue
(
c⁄f
, ) \

237 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

238 
c⁄f
 = ; \

239 }

	)

241 
	#ngx_c⁄f_öô_m£c_vÆue
(
c⁄f
, ) \

242 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

243 
c⁄f
 = ; \

244 }

	)

246 
	#ngx_c⁄f_mîge_vÆue
(
c⁄f
, 
¥ev
, ) \

247 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

248 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

249 }

	)

251 
	#ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
, 
¥ev
, ) \

252 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

253 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_PTR
) ?  :Örev; \

254 }

	)

256 
	#ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
, 
¥ev
, ) \

257 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

258 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_UINT
) ?  :Örev; \

259 }

	)

261 
	#ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
, 
¥ev
, ) \

262 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

263 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_MSEC
) ?  :Örev; \

264 }

	)

266 
	#ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
, 
¥ev
, ) \

267 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

268 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

269 }

	)

271 
	#ngx_c⁄f_mîge_size_vÆue
(
c⁄f
, 
¥ev
, ) \

272 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

273 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_SIZE
) ?  :Örev; \

274 }

	)

276 
	#ngx_c⁄f_mîge_off_vÆue
(
c⁄f
, 
¥ev
, ) \

277 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

278 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

279 }

	)

281 
	#ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
, 
¥ev
, ) \

282 i‡(
c⁄f
.
d©a
 =
NULL
) { \

283 i‡(
¥ev
.
d©a
) { \

284 
c⁄f
.
Àn
 = 
¥ev
.len; \

285 
c⁄f
.
d©a
 = 
¥ev
.data; \

287 
c⁄f
.
Àn
 = () - 1; \

288 
c⁄f
.
d©a
 = (
u_ch¨
 *) ; \

290 }

	)

292 
	#ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
, 
¥ev
, 
deÁu…_num
, 
deÁu…_size
) \

293 i‡(
c⁄f
.
num
 == 0) { \

294 i‡(
¥ev
.
num
) { \

295 
c⁄f
.
num
 = 
¥ev
.num; \

296 
c⁄f
.
size
 = 
¥ev
.size; \

298 
c⁄f
.
num
 = 
deÁu…_num
; \

299 
c⁄f
.
size
 = 
deÁu…_size
; \

301 }

	)

303 
	#ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
, 
¥ev
, ) \

304 i‡(
c⁄f
 == 0) { \

305 
c⁄f
 = (
¥ev
 == 0) ?  :Örev; \

306 }

	)

309 *
ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
);

310 *
ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
);

311 *
ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

314 
ngx_öt_t
 
ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
,

315 
ngx_uöt_t
 
c⁄f_¥efix
);

316 
ngx_›í_fûe_t
 *
ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

317 
ngx_cde˛
 
ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
,

318 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

321 *
ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

322 *
ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

323 *
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

324 *
c⁄f
);

325 *
ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

326 *
ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

327 *
ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

328 *
ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

329 *
ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

330 *
ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

331 *
ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

332 *
ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

333 *
ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

336 
ngx_uöt_t
 
ngx_max_moduÀ
;

337 
ngx_moduÀ_t
 *
ngx_moduÀs
[];

	@src/core/ngx_config.h

8 #i‚de‡
_NGX_CONFIG_H_INCLUDED_


9 
	#_NGX_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_auto_hódîs.h
>

15 #i‡
deföed
 
__Døg⁄Fly__
 && !deföed 
__FªeBSD__


16 
	#__FªeBSD__
 4

	)

17 
	#__FªeBSD_vîsi⁄
 480101

	)

21 #i‡(
NGX_FREEBSD
)

22 
	~<ngx_‰ìbsd_c⁄fig.h
>

25 #ñi‡(
NGX_LINUX
)

26 
	~<ngx_löux_c⁄fig.h
>

29 #ñi‡(
NGX_SOLARIS
)

30 
	~<ngx_sﬁ¨is_c⁄fig.h
>

33 #ñi‡(
NGX_DARWIN
)

34 
	~<ngx_d¨wö_c⁄fig.h
>

37 #ñi‡(
NGX_WIN32
)

38 
	~<ngx_wö32_c⁄fig.h
>

42 
	~<ngx_posix_c⁄fig.h
>

47 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


48 
	#NGX_HAVE_SO_SNDLOWAT
 1

	)

52 #i‡!(
NGX_WIN32
)

54 
	#ngx_sig«l_hñ≥r
(
n
Ë
SIG
##
	)
n

55 
	#ngx_sig«l_vÆue
(
n
Ë
	`ngx_sig«l_hñ≥r
“)

	)

57 
	#ngx_øndom
 
øndom


	)

60 
	#NGX_SHUTDOWN_SIGNAL
 
QUIT


	)

61 
	#NGX_TERMINATE_SIGNAL
 
TERM


	)

62 
	#NGX_NOACCEPT_SIGNAL
 
WINCH


	)

63 
	#NGX_RECONFIGURE_SIGNAL
 
HUP


	)

65 #i‡(
NGX_LINUXTHREADS
)

66 
	#NGX_REOPEN_SIGNAL
 
INFO


	)

67 
	#NGX_CHANGEBIN_SIGNAL
 
XCPU


	)

69 
	#NGX_REOPEN_SIGNAL
 
USR1


	)

70 
	#NGX_CHANGEBIN_SIGNAL
 
USR2


	)

73 
	#ngx_cde˛


	)

74 
	#ngx_libc_cde˛


	)

78 
öçå_t
 
	tngx_öt_t
;

79 
uöçå_t
 
	tngx_uöt_t
;

80 
öçå_t
 
	tngx_Êag_t
;

83 
	#NGX_INT32_LEN
 (("-2147483648"Ë- 1)

	)

84 
	#NGX_INT64_LEN
 (("-9223372036854775808"Ë- 1)

	)

86 #i‡(
NGX_PTR_SIZE
 == 4)

87 
	#NGX_INT_T_LEN
 
NGX_INT32_LEN


	)

88 
	#NGX_MAX_INT_T_VALUE
 2147483647

	)

91 
	#NGX_INT_T_LEN
 
NGX_INT64_LEN


	)

92 
	#NGX_MAX_INT_T_VALUE
 9223372036854775807

	)

96 #i‚de‡
NGX_ALIGNMENT


97 
	#NGX_ALIGNMENT
 (Ë

	)

100 
	#ngx_Æign
(
d
, 
a
Ë(((dË+ (®- 1)Ë& ~◊ - 1))

	)

101 
	#ngx_Æign_±r
(
p
, 
a
) \

102 (
u_ch¨
 *Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
a
 - 1)Ë& ~((uöçå_tË®- 1))

	)

105 
	#ngx_ab‹t
 
ab‹t


	)

109 
	#NGX_INVALID_ARRAY_INDEX
 0x80000000

	)

113 #i‚de‡
ngx_ölöe


114 
	#ngx_ölöe
 
ölöe


	)

117 #i‚de‡
INADDR_NONE


118 
	#INADDR_NONE
 ((Ë-1)

	)

121 #ifde‡
MAXHOSTNAMELEN


122 
	#NGX_MAXHOSTNAMELEN
 
MAXHOSTNAMELEN


	)

124 
	#NGX_MAXHOSTNAMELEN
 256

	)

128 #i‡((
__GNU__
 =2Ë&& (
__GNUC_MINOR__
 < 8))

129 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffffLL

	)

131 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffff

	)

134 
	#NGX_MAX_INT32_VALUE
 (
uöt32_t
Ë0x7fffffff

	)

	@src/core/ngx_connection.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_os_io_t
 
	gngx_io
;

16 
ngx_døö_c⁄√˘i⁄s
();

19 
ngx_li°íög_t
 *

20 
	$ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
, 
sockÀn_t
 
sockÀn
)

22 
size_t
 
Àn
;

23 
ngx_li°íög_t
 *
ls
;

24 
sockaddr
 *
ß
;

25 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

27 
ls
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
li°íög
);

28 i‡(
ls
 =
NULL
) {

29  
NULL
;

32 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

34 
ß
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
sockÀn
);

35 i‡(
ß
 =
NULL
) {

36  
NULL
;

39 
	`ngx_mem˝y
(
ß
, 
sockaddr
, 
sockÀn
);

41 
ls
->
sockaddr
 = 
ß
;

42 
ls
->
sockÀn
 = socklen;

44 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
sockÀn
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 1);

45 
ls
->
addr_ãxt
.
Àn
 =Üen;

47 
ls
->
sockaddr
->
ß_Ámûy
) {

48 #i‡(
NGX_HAVE_INET6
)

49 
AF_INET6
:

50 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

53 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

54 
AF_UNIX
:

55 
ls
->
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

56 
Àn
++;

59 
AF_INET
:

60 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

63 
ls
->
addr_ãxt_max_Àn
 = 
NGX_SOCKADDR_STRLEN
;

67 
ls
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

68 i‡(
ls
->
addr_ãxt
.
d©a
 =
NULL
) {

69  
NULL
;

72 
	`ngx_mem˝y
(
ls
->
addr_ãxt
.
d©a
, 
ãxt
, 
Àn
);

74 
ls
->
fd
 = (
ngx_sockë_t
) -1;

75 
ls
->
ty≥
 = 
SOCK_STREAM
;

77 
ls
->
backlog
 = 
NGX_LISTEN_BACKLOG
;

78 
ls
->
rcvbuf
 = -1;

79 
ls
->
¢dbuf
 = -1;

81 #i‡(
NGX_HAVE_SETFIB
)

82 
ls
->
£tfib
 = -1;

85 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

86 
ls
->
Á°›í
 = -1;

89  
ls
;

90 
	}
}

93 
ngx_öt_t


94 
	$ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

96 
size_t
 
Àn
;

97 
ngx_uöt_t
 
i
;

98 
ngx_li°íög_t
 *
ls
;

99 
sockÀn_t
 
ﬁí
;

100 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 || 
NGX_HAVE_TCP_FASTOPEN
)

101 
ngx_îr_t
 
îr
;

103 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

104 
ac˚±_fûãr_¨g
 
af
;

106 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

107 
timeout
;

110 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

111 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

113 
ls
[
i
].
sockaddr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 
NGX_SOCKADDRLEN
);

114 i‡(
ls
[
i
].
sockaddr
 =
NULL
) {

115  
NGX_ERROR
;

118 
ls
[
i
].
sockÀn
 = 
NGX_SOCKADDRLEN
;

119 i‡(
	`gësock«me
(
ls
[
i
].
fd
,Üs[i].
sockaddr
, &ls[i].
sockÀn
) == -1) {

120 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

122 "sockë #%d faûed", 
ls
[
i
].
fd
);

123 
ls
[
i
].
ign‹e
 = 1;

127 
ls
[
i
].
sockaddr
->
ß_Ámûy
) {

129 #i‡(
NGX_HAVE_INET6
)

130 
AF_INET6
:

131 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

132 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + ("[]:65535") - 1;

136 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

137 
AF_UNIX
:

138 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

139 
Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

143 
AF_INET
:

144 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

145 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

149 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

151 "™ unsuµ‹ãdÖrŸocﬁ famûy", 
ls
[
i
].
fd
);

152 
ls
[
i
].
ign‹e
 = 1;

156 
ls
[
i
].
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
);

157 i‡(
ls
[
i
].
addr_ãxt
.
d©a
 =
NULL
) {

158  
NGX_ERROR
;

161 
Àn
 = 
	`ngx_sock_¡›
(
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
,

162 
ls
[
i
].
addr_ãxt
.
d©a
, 
Àn
, 1);

163 i‡(
Àn
 == 0) {

164  
NGX_ERROR
;

167 
ls
[
i
].
addr_ãxt
.
Àn
 =Üen;

169 
ls
[
i
].
backlog
 = 
NGX_LISTEN_BACKLOG
;

171 
ﬁí
 = ();

173 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*Ë&ls[i].
rcvbuf
,

174 &
ﬁí
)

177 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

179 &
ls
[
i
].
addr_ãxt
);

181 
ls
[
i
].
rcvbuf
 = -1;

184 
ﬁí
 = ();

186 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*Ë&ls[i].
¢dbuf
,

187 &
ﬁí
)

190 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

192 &
ls
[
i
].
addr_ãxt
);

194 
ls
[
i
].
¢dbuf
 = -1;

200 #i‡(
NGX_HAVE_SETFIB
)

202 
ﬁí
 = ();

204 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SETFIB
,

205 (*Ë&
ls
[
i
].
£tfib
, &
ﬁí
)

208 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

210 &
ls
[
i
].
addr_ãxt
);

212 
ls
[
i
].
£tfib
 = -1;

218 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

220 
ﬁí
 = ();

222 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_FASTOPEN
,

223 (*Ë&
ls
[
i
].
Á°›í
, &
ﬁí
)

226 
îr
 = 
ngx_sockë_î∫o
;

228 i‡(
îr
 !
NGX_EOPNOTSUPP
 &&Éº !
NGX_ENOPROTOOPT
) {

229 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

231 &
ls
[
i
].
addr_ãxt
);

234 
ls
[
i
].
Á°›í
 = -1;

239 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

241 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

242 
ﬁí
 = (
ac˚±_fûãr_¨g
);

244 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, &
af
, &
ﬁí
)

247 
îr
 = 
ngx_sockë_î∫o
;

249 i‡(
îr
 =
NGX_EINVAL
) {

253 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

255 &
ls
[
i
].
addr_ãxt
);

259 i‡(
ﬁí
 < (
ac˚±_fûãr_¨g
Ë|| 
af
.
af_«me
[0] == '\0') {

263 
ls
[
i
].
ac˚±_fûãr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 16);

264 i‡(
ls
[
i
].
ac˚±_fûãr
 =
NULL
) {

265  
NGX_ERROR
;

268 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
,

269 (
u_ch¨
 *Ë
af
.
af_«me
, 16);

272 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

274 
timeout
 = 0;

275 
ﬁí
 = ();

277 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
, &
timeout
, &
ﬁí
)

280 
îr
 = 
ngx_sockë_î∫o
;

282 i‡(
îr
 =
NGX_EOPNOTSUPP
) {

286 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

288 &
ls
[
i
].
addr_ãxt
);

292 i‡(
ﬁí
 < (Ë|| 
timeout
 == 0) {

296 
ls
[
i
].
de„ºed_ac˚±
 = 1;

300  
NGX_OK
;

301 
	}
}

304 
ngx_öt_t


305 
	$ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

307 
ªu£addr
;

308 
ngx_uöt_t
 
i
, 
åõs
, 
Áûed
;

309 
ngx_îr_t
 
îr
;

310 
ngx_log_t
 *
log
;

311 
ngx_sockë_t
 
s
;

312 
ngx_li°íög_t
 *
ls
;

314 
ªu£addr
 = 1;

315 #i‡(
NGX_SUPPRESS_WARN
)

316 
Áûed
 = 0;

319 
log
 = 
cy˛e
->log;

323 
åõs
 = 5;Åries;Åries--) {

324 
Áûed
 = 0;

328 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

329 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

331 i‡(
ls
[
i
].
ign‹e
) {

335 i‡(
ls
[
i
].
fd
 !(
ngx_sockë_t
) -1) {

339 i‡(
ls
[
i
].
öhîôed
) {

348 
s
 = 
	`ngx_sockë
(
ls
[
i
].
sockaddr
->
ß_Ámûy
,Üs[i].
ty≥
, 0);

350 i‡(
s
 =(
ngx_sockë_t
) -1) {

351 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

352 
ngx_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

353  
NGX_ERROR
;

356 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

357 (c⁄° *Ë&
ªu£addr
, ())

360 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

362 &
ls
[
i
].
addr_ãxt
);

364 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

365 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

366 
ngx_˛o£_sockë_n
 " %V failed",

367 &
ls
[
i
].
addr_ãxt
);

370  
NGX_ERROR
;

373 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

375 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

376 
ùv6⁄ly
;

378 
ùv6⁄ly
 = 
ls
[
i
].ipv6only;

380 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
,

381 (c⁄° *Ë&
ùv6⁄ly
, ())

384 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

386 &
ls
[
i
].
addr_ãxt
);

392 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
)) {

393 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

394 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

395 
ngx_n⁄blockög_n
 " %V failed",

396 &
ls
[
i
].
addr_ãxt
);

398 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

399 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

400 
ngx_˛o£_sockë_n
 " %V failed",

401 &
ls
[
i
].
addr_ãxt
);

404  
NGX_ERROR
;

408 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

409 "böd(Ë%V #%d ", &
ls
[
i
].
addr_ãxt
, 
s
);

411 i‡(
	`böd
(
s
, 
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
) == -1) {

412 
îr
 = 
ngx_sockë_î∫o
;

414 i‡(
îr
 !
NGX_EADDRINUSE
 || !
ngx_ã°_c⁄fig
) {

415 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

416 "böd(Ëtÿ%V faûed", &
ls
[
i
].
addr_ãxt
);

419 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

420 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

421 
ngx_˛o£_sockë_n
 " %V failed",

422 &
ls
[
i
].
addr_ãxt
);

425 i‡(
îr
 !
NGX_EADDRINUSE
) {

426  
NGX_ERROR
;

429 i‡(!
ngx_ã°_c⁄fig
) {

430 
Áûed
 = 1;

436 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

438 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

439 
mode_t
 
mode
;

440 
u_ch¨
 *
«me
;

442 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

443 
mode
 = (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
);

445 i‡(
	`chmod
((*Ë
«me
, 
mode
) == -1) {

446 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

447 "chmod(Ë\"%s\" faûed", 
«me
);

450 i‡(
ngx_ã°_c⁄fig
) {

451 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

452 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

453 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

459 i‡(
	`li°í
(
s
, 
ls
[
i
].
backlog
) == -1) {

460 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

462 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

464 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

465 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

466 
ngx_˛o£_sockë_n
 " %V failed",

467 &
ls
[
i
].
addr_ãxt
);

470  
NGX_ERROR
;

473 
ls
[
i
].
li°í
 = 1;

475 
ls
[
i
].
fd
 = 
s
;

478 i‡(!
Áûed
) {

484 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

487 
	`ngx_m¶ìp
(500);

490 i‡(
Áûed
) {

491 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0, "still couldÇot bind()");

492  
NGX_ERROR
;

495  
NGX_OK
;

496 
	}
}

500 
	$ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

502 
vÆue
;

503 
ngx_uöt_t
 
i
;

504 
ngx_li°íög_t
 *
ls
;

506 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

507 
ac˚±_fûãr_¨g
 
af
;

510 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

511 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

513 
ls
[
i
].
log
 = *ls[i].
logp
;

515 i‡(
ls
[
i
].
rcvbuf
 != -1) {

516 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

517 (c⁄° *Ë&
ls
[
i
].
rcvbuf
, ())

520 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

522 
ls
[
i
].
rcvbuf
, &ls[i].
addr_ãxt
);

526 i‡(
ls
[
i
].
¢dbuf
 != -1) {

527 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

528 (c⁄° *Ë&
ls
[
i
].
¢dbuf
, ())

531 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

533 
ls
[
i
].
¢dbuf
, &ls[i].
addr_ãxt
);

537 i‡(
ls
[
i
].
kì∑live
) {

538 
vÆue
 = (
ls
[
i
].
kì∑live
 == 1) ? 1 : 0;

540 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

541 (c⁄° *Ë&
vÆue
, ())

544 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

546 
vÆue
, &
ls
[
i
].
addr_ãxt
);

550 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

552 i‡(
ls
[
i
].
kìpidÀ
) {

553 
vÆue
 = 
ls
[
i
].
kìpidÀ
;

555 #i‡(
NGX_KEEPALIVE_FACTOR
)

556 
vÆue
 *
NGX_KEEPALIVE_FACTOR
;

559 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPIDLE
,

560 (c⁄° *Ë&
vÆue
, ())

563 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

565 
vÆue
, &
ls
[
i
].
addr_ãxt
);

569 i‡(
ls
[
i
].
kìpötvl
) {

570 
vÆue
 = 
ls
[
i
].
kìpötvl
;

572 #i‡(
NGX_KEEPALIVE_FACTOR
)

573 
vÆue
 *
NGX_KEEPALIVE_FACTOR
;

576 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPINTVL
,

577 (c⁄° *Ë&
vÆue
, ())

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

582 
vÆue
, &
ls
[
i
].
addr_ãxt
);

586 i‡(
ls
[
i
].
kìp˙t
) {

587 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPCNT
,

588 (c⁄° *Ë&
ls
[
i
].
kìp˙t
, ())

591 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

593 
ls
[
i
].
kìp˙t
, &ls[i].
addr_ãxt
);

599 #i‡(
NGX_HAVE_SETFIB
)

600 i‡(
ls
[
i
].
£tfib
 != -1) {

601 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SETFIB
,

602 (c⁄° *Ë&
ls
[
i
].
£tfib
, ())

605 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

607 
ls
[
i
].
£tfib
, &ls[i].
addr_ãxt
);

612 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

613 i‡(
ls
[
i
].
Á°›í
 != -1) {

614 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_FASTOPEN
,

615 (c⁄° *Ë&
ls
[
i
].
Á°›í
, ())

618 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

620 
ls
[
i
].
Á°›í
, &ls[i].
addr_ãxt
);

627 
t˝_nodñay
 = 1;

629 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

630 (c⁄° *Ë&
t˝_nodñay
, ())

633 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

635 &
ls
[
i
].
addr_ãxt
);

640 i‡(
ls
[
i
].
li°í
) {

644 i‡(
	`li°í
(
ls
[
i
].
fd
,Üs[i].
backlog
) == -1) {

645 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

647 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

656 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

658 #ifde‡
SO_ACCEPTFILTER


660 i‡(
ls
[
i
].
dñëe_de„ºed
) {

661 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, 
NULL
, 0)

664 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

667 &
ls
[
i
].
addr_ãxt
);

669 i‡(
ls
[
i
].
ac˚±_fûãr
) {

670 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

673 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

679 
ls
[
i
].
de„ºed_ac˚±
 = 0;

682 i‡(
ls
[
i
].
add_de„ºed
) {

683 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

684 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
af
.
af_«me
,

685 (
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
, 16);

687 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
,

688 &
af
, (
ac˚±_fûãr_¨g
))

691 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

694 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

698 
ls
[
i
].
de„ºed_ac˚±
 = 1;

703 #ifde‡
TCP_DEFER_ACCEPT


705 i‡(
ls
[
i
].
add_de„ºed
 ||Üs[i].
dñëe_de„ºed
) {

707 i‡(
ls
[
i
].
add_de„ºed
) {

714 
vÆue
 = 1;

717 
vÆue
 = 0;

720 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
,

721 &
vÆue
, ())

724 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

727 
vÆue
, &
ls
[
i
].
addr_ãxt
);

733 i‡(
ls
[
i
].
add_de„ºed
) {

734 
ls
[
i
].
de„ºed_ac˚±
 = 1;

743 
	}
}

747 
	$ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

749 
ngx_uöt_t
 
i
;

750 
ngx_li°íög_t
 *
ls
;

751 
ngx_c⁄√˘i⁄_t
 *
c
;

753 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

757 
ngx_ac˚±_muãx_hñd
 = 0;

758 
ngx_u£_ac˚±_muãx
 = 0;

760 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

761 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

763 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

765 i‡(
c
) {

766 i‡(
c
->
ªad
->
a˘ive
) {

767 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

768 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

770 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

778 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0);

781 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

785 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

787 
c
->
fd
 = (
ngx_sockë_t
) -1;

790 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

791 "˛o£Üi°íög %V #%d ", &
ls
[
i
].
addr_ãxt
,Üs[i].
fd
);

793 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

794 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

795 
ngx_˛o£_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

798 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

800 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX


801 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER


802 && 
ngx_√w_bö¨y
 == 0)

804 
u_ch¨
 *
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

806 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

807 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

808 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

814 
ls
[
i
].
fd
 = (
ngx_sockë_t
) -1;

817 
cy˛e
->
li°íög
.
√…s
 = 0;

818 
	}
}

821 
ngx_c⁄√˘i⁄_t
 *

822 
	$ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
)

824 
ngx_uöt_t
 
ö°™˚
;

825 
ngx_evít_t
 *
ªv
, *
wev
;

826 
ngx_c⁄√˘i⁄_t
 *
c
;

830 i‡(
ngx_cy˛e
->
fûes
 && (
ngx_uöt_t
Ë
s
 >ngx_cy˛e->
fûes_n
) {

831 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

834 
s
, 
ngx_cy˛e
->
fûes_n
);

835  
NULL
;

838 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

840 i‡(
c
 =
NULL
) {

841 
	`ngx_døö_c⁄√˘i⁄s
();

842 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

845 i‡(
c
 =
NULL
) {

846 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

848 
ngx_cy˛e
->
c⁄√˘i⁄_n
);

850  
NULL
;

853 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
->
d©a
;

854 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
--;

856 i‡(
ngx_cy˛e
->
fûes
) {

857 
ngx_cy˛e
->
fûes
[
s
] = 
c
;

860 
ªv
 = 
c
->
ªad
;

861 
wev
 = 
c
->
wrôe
;

863 
	`ngx_memzîo
(
c
, (
ngx_c⁄√˘i⁄_t
));

865 
c
->
ªad
 = 
ªv
;

866 
c
->
wrôe
 = 
wev
;

867 
c
->
fd
 = 
s
;

868 
c
->
log
 =Üog;

870 
ö°™˚
 = 
ªv
->instance;

872 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

873 
	`ngx_memzîo
(
wev
, (
ngx_evít_t
));

875 
ªv
->
ö°™˚
 = !instance;

876 
wev
->
ö°™˚
 = !instance;

878 
ªv
->
ödex
 = 
NGX_INVALID_INDEX
;

879 
wev
->
ödex
 = 
NGX_INVALID_INDEX
;

881 
ªv
->
d©a
 = 
c
;

882 
wev
->
d©a
 = 
c
;

884 
wev
->
wrôe
 = 1;

886  
c
;

887 
	}
}

891 
	$ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

893 
c
->
d©a
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

894 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
;

895 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
++;

897 i‡(
ngx_cy˛e
->
fûes
) {

898 
ngx_cy˛e
->
fûes
[
c
->
fd
] = 
NULL
;

900 
	}
}

904 
	$ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

906 
ngx_îr_t
 
îr
;

907 
ngx_uöt_t
 
log_îr‹
, 
Àvñ
;

908 
ngx_sockë_t
 
fd
;

910 i‡(
c
->
fd
 =(
ngx_sockë_t
) -1) {

911 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "connectionálready closed");

915 i‡(
c
->
ªad
->
timî_£t
) {

916 
	`ngx_dñ_timî
(
c
->
ªad
);

919 i‡(
c
->
wrôe
->
timî_£t
) {

920 
	`ngx_dñ_timî
(
c
->
wrôe
);

923 i‡(
ngx_dñ_c⁄n
) {

924 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

927 i‡(
c
->
ªad
->
a˘ive
 || c->ªad->
dißbÀd
) {

928 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

931 i‡(
c
->
wrôe
->
a˘ive
 || c->wrôe->
dißbÀd
) {

932 
	`ngx_dñ_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLOSE_EVENT
);

936 i‡(
c
->
ªad
->
po°ed
) {

937 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

940 i‡(
c
->
wrôe
->
po°ed
) {

941 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

944 
c
->
ªad
->
˛o£d
 = 1;

945 
c
->
wrôe
->
˛o£d
 = 1;

947 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

949 
log_îr‹
 = 
c
->log_error;

951 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

953 
fd
 = 
c
->fd;

954 
c
->
fd
 = (
ngx_sockë_t
) -1;

956 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

958 
îr
 = 
ngx_sockë_î∫o
;

960 i‡(
îr
 =
NGX_ECONNRESET
 ||Éº =
NGX_ENOTCONN
) {

962 
log_îr‹
) {

964 
NGX_ERROR_INFO
:

965 
Àvñ
 = 
NGX_LOG_INFO
;

968 
NGX_ERROR_ERR
:

969 
Àvñ
 = 
NGX_LOG_ERR
;

973 
Àvñ
 = 
NGX_LOG_CRIT
;

977 
Àvñ
 = 
NGX_LOG_CRIT
;

982 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 
îr
,

983 
ngx_˛o£_sockë_n
 " %d faûed", 
fd
);

985 
	}
}

989 
	$ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
)

991 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

992 "ªußbÀ c⁄√˘i⁄: %ui", 
ªußbÀ
);

994 i‡(
c
->
ªußbÀ
) {

995 
	`ngx_queue_ªmove
(&
c
->
queue
);

997 #i‡(
NGX_STAT_STUB
)

998 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_waôög
, -1);

1002 
c
->
ªußbÀ
 =Ñeusable;

1004 i‡(
ªußbÀ
) {

1007 
	`ngx_queue_ö£π_hód
(

1008 (
ngx_queue_t
 *Ë&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
, &
c
->
queue
);

1010 #i‡(
NGX_STAT_STUB
)

1011 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_waôög
, 1);

1014 
	}
}

1018 
	$ngx_døö_c⁄√˘i⁄s
()

1020 
ngx_öt_t
 
i
;

1021 
ngx_queue_t
 *
q
;

1022 
ngx_c⁄√˘i⁄_t
 *
c
;

1024 
i
 = 0; i < 32; i++) {

1025 i‡(
	`ngx_queue_em±y
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
)) {

1029 
q
 = 
	`ngx_queue_œ°
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

1030 
c
 = 
	`ngx_queue_d©a
(
q
, 
ngx_c⁄√˘i⁄_t
, 
queue
);

1032 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

1035 
c
->
˛o£
 = 1;

1036 
c
->
ªad
->
	`h™dÀr
(c->read);

1038 
	}
}

1041 
ngx_öt_t


1042 
	$ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

1043 
ngx_uöt_t
 
p‹t
)

1045 
sockÀn_t
 
Àn
;

1046 
ngx_uöt_t
 
addr
;

1047 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

1048 
sockaddr_ö
 *
sö
;

1049 #i‡(
NGX_HAVE_INET6
)

1050 
ngx_uöt_t
 
i
;

1051 
sockaddr_ö6
 *
sö6
;

1054 
addr
 = 0;

1056 i‡(
c
->
loˇl_sockÀn
) {

1057 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

1059 #i‡(
NGX_HAVE_INET6
)

1060 
AF_INET6
:

1061 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

1063 
i
 = 0; 
addr
 == 0 && i < 16; i++) {

1064 
addr
 |
sö6
->
sö6_addr
.
s6_addr
[
i
];

1070 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1071 
AF_UNIX
:

1072 
addr
 = 1;

1077 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

1078 
addr
 = 
sö
->
sö_addr
.
s_addr
;

1083 i‡(
addr
 == 0) {

1085 
Àn
 = 
NGX_SOCKADDRLEN
;

1087 i‡(
	`gësock«me
(
c
->
fd
, (
sockaddr
 *Ë&
ß
, &
Àn
) == -1) {

1088 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, "getsockname() failed");

1089  
NGX_ERROR
;

1092 
c
->
loˇl_sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
Àn
);

1093 i‡(
c
->
loˇl_sockaddr
 =
NULL
) {

1094  
NGX_ERROR
;

1097 
	`ngx_mem˝y
(
c
->
loˇl_sockaddr
, &
ß
, 
Àn
);

1099 
c
->
loˇl_sockÀn
 = 
Àn
;

1102 i‡(
s
 =
NULL
) {

1103  
NGX_OK
;

1106 
s
->
Àn
 = 
	`ngx_sock_¡›
(
c
->
loˇl_sockaddr
, c->
loˇl_sockÀn
,

1107 
s
->
d©a
, s->
Àn
, 
p‹t
);

1109  
NGX_OK
;

1110 
	}
}

1113 
ngx_öt_t


1114 
	$ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
)

1116 
ngx_uöt_t
 
Àvñ
;

1120 i‡((
îr
 =
NGX_ECONNRESET


1121 #i‡(
NGX_WIN32
)

1122 || 
îr
 =
NGX_ECONNABORTED


1124 Ë&& 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_ECONNRESET
)

1129 #i‡(
NGX_SOLARIS
)

1130 i‡(
îr
 =
NGX_EINVAL
 && 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_EINVAL
) {

1135 i‡(
îr
 == 0

1136 || 
îr
 =
NGX_ECONNRESET


1137 #i‡(
NGX_WIN32
)

1138 || 
îr
 =
NGX_ECONNABORTED


1140 || 
îr
 =
NGX_EPIPE


1142 || 
îr
 =
NGX_ENOTCONN


1143 || 
îr
 =
NGX_ETIMEDOUT


1144 || 
îr
 =
NGX_ECONNREFUSED


1145 || 
îr
 =
NGX_ENETDOWN


1146 || 
îr
 =
NGX_ENETUNREACH


1147 || 
îr
 =
NGX_EHOSTDOWN


1148 || 
îr
 =
NGX_EHOSTUNREACH
)

1150 
c
->
log_îr‹
) {

1152 
NGX_ERROR_IGNORE_EINVAL
:

1153 
NGX_ERROR_IGNORE_ECONNRESET
:

1154 
NGX_ERROR_INFO
:

1155 
Àvñ
 = 
NGX_LOG_INFO
;

1159 
Àvñ
 = 
NGX_LOG_ERR
;

1163 
Àvñ
 = 
NGX_LOG_ALERT
;

1166 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1168  
NGX_ERROR
;

1169 
	}
}

	@src/core/ngx_connection.h

8 #i‚de‡
_NGX_CONNECTION_H_INCLUDED_


9 
	#_NGX_CONNECTION_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°íög_s
 
	tngx_li°íög_t
;

18 
	sngx_li°íög_s
 {

19 
ngx_sockë_t
 
	mfd
;

21 
sockaddr
 *
	msockaddr
;

22 
sockÀn_t
 
	msockÀn
;

23 
size_t
 
	maddr_ãxt_max_Àn
;

24 
ngx_°r_t
 
	maddr_ãxt
;

26 
	mty≥
;

28 
	mbacklog
;

29 
	mrcvbuf
;

30 
	m¢dbuf
;

31 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

32 
	mkìpidÀ
;

33 
	mkìpötvl
;

34 
	mkìp˙t
;

38 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

40 *
	m£rvîs
;

42 
ngx_log_t
 
	mlog
;

43 
ngx_log_t
 *
	mlogp
;

45 
size_t
 
	mpoﬁ_size
;

47 
size_t
 
	mpo°_ac˚±_buf„r_size
;

49 
ngx_m£c_t
 
	mpo°_ac˚±_timeout
;

51 
ngx_li°íög_t
 *
	m¥evious
;

52 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

54 
	m›í
:1;

55 
	mªmaö
:1;

56 
	mign‹e
:1;

58 
	mbound
:1;

59 
	möhîôed
:1;

60 
	mn⁄blockög_ac˚±
:1;

61 
	mli°í
:1;

62 
	mn⁄blockög
:1;

63 
	msh¨ed
:1;

64 
	maddr_¡›
:1;

66 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

67 
	mùv6⁄ly
:1;

69 
	mkì∑live
:2;

71 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

72 
	mde„ºed_ac˚±
:1;

73 
	mdñëe_de„ºed
:1;

74 
	madd_de„ºed
:1;

75 #ifde‡
SO_ACCEPTFILTER


76 *
	mac˚±_fûãr
;

79 #i‡(
NGX_HAVE_SETFIB
)

80 
	m£tfib
;

83 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

84 
	mÁ°›í
;

91 
	mNGX_ERROR_ALERT
 = 0,

92 
	mNGX_ERROR_ERR
,

93 
	mNGX_ERROR_INFO
,

94 
	mNGX_ERROR_IGNORE_ECONNRESET
,

95 
	mNGX_ERROR_IGNORE_EINVAL


96 } 
	tngx_c⁄√˘i⁄_log_îr‹_e
;

100 
	mNGX_TCP_NODELAY_UNSET
 = 0,

101 
	mNGX_TCP_NODELAY_SET
,

102 
	mNGX_TCP_NODELAY_DISABLED


103 } 
	tngx_c⁄√˘i⁄_t˝_nodñay_e
;

107 
	mNGX_TCP_NOPUSH_UNSET
 = 0,

108 
	mNGX_TCP_NOPUSH_SET
,

109 
	mNGX_TCP_NOPUSH_DISABLED


110 } 
	tngx_c⁄√˘i⁄_t˝_n›ush_e
;

113 
	#NGX_LOWLEVEL_BUFFERED
 0x0f

	)

114 
	#NGX_SSL_BUFFERED
 0x01

	)

115 
	#NGX_SPDY_BUFFERED
 0x02

	)

118 
	sngx_c⁄√˘i⁄_s
 {

119 *
	md©a
;

120 
ngx_evít_t
 *
	mªad
;

121 
ngx_evít_t
 *
	mwrôe
;

123 
ngx_sockë_t
 
	mfd
;

125 
ngx_ªcv_±
 
	mªcv
;

126 
ngx_£nd_±
 
	m£nd
;

127 
ngx_ªcv_chaö_±
 
	mªcv_chaö
;

128 
ngx_£nd_chaö_±
 
	m£nd_chaö
;

130 
ngx_li°íög_t
 *
	mli°íög
;

132 
off_t
 
	m£¡
;

134 
ngx_log_t
 *
	mlog
;

136 
ngx_poﬁ_t
 *
	mpoﬁ
;

138 
sockaddr
 *
	msockaddr
;

139 
sockÀn_t
 
	msockÀn
;

140 
ngx_°r_t
 
	maddr_ãxt
;

142 
ngx_°r_t
 
	m¥oxy_¥Ÿocﬁ_addr
;

144 #i‡(
NGX_SSL
)

145 
ngx_s¶_c⁄√˘i⁄_t
 *
	ms¶
;

148 
sockaddr
 *
	mloˇl_sockaddr
;

149 
sockÀn_t
 
	mloˇl_sockÀn
;

151 
ngx_buf_t
 *
	mbuf„r
;

153 
ngx_queue_t
 
	mqueue
;

155 
ngx_©omic_uöt_t
 
	mnumbî
;

157 
ngx_uöt_t
 
	mªque°s
;

159 
	mbuf„ªd
:8;

161 
	mlog_îr‹
:3;

163 
	mu√x≥˘ed_eof
:1;

164 
	mtimedout
:1;

165 
	mîr‹
:1;

166 
	mde°royed
:1;

168 
	midÀ
:1;

169 
	mªußbÀ
:1;

170 
	m˛o£
:1;

172 
	m£ndfûe
:1;

173 
	m¢dlow©
:1;

174 
	mt˝_nodñay
:2;

175 
	mt˝_n›ush
:2;

177 
	m√ed_œ°_buf
:1;

179 #i‡(
NGX_HAVE_IOCP
)

180 
	mac˚±_c⁄ãxt_upd©ed
:1;

183 #i‡(
NGX_HAVE_AIO_SENDFILE
)

184 
	mbusy_cou¡
:2;

187 #i‡(
NGX_THREADS
)

188 
ngx_thªad_èsk_t
 *
	m£ndfûe_èsk
;

193 
ngx_li°íög_t
 *
ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
,

194 
sockÀn_t
 
sockÀn
);

195 
ngx_öt_t
 
ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

196 
ngx_öt_t
 
ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

197 
ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

198 
ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

199 
ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

200 
ngx_öt_t
 
ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

201 
ngx_uöt_t
 
p‹t
);

202 
ngx_öt_t
 
ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
);

204 
ngx_c⁄√˘i⁄_t
 *
ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
);

205 
ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

207 
ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
);

	@src/core/ngx_core.h

8 #i‚de‡
_NGX_CORE_H_INCLUDED_


9 
	#_NGX_CORE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

15 
ngx_moduÀ_s
 
	tngx_moduÀ_t
;

16 
ngx_c⁄f_s
 
	tngx_c⁄f_t
;

17 
ngx_cy˛e_s
 
	tngx_cy˛e_t
;

18 
ngx_poﬁ_s
 
	tngx_poﬁ_t
;

19 
ngx_chaö_s
 
	tngx_chaö_t
;

20 
ngx_log_s
 
	tngx_log_t
;

21 
ngx_›í_fûe_s
 
	tngx_›í_fûe_t
;

22 
ngx_comm™d_s
 
	tngx_comm™d_t
;

23 
ngx_fûe_s
 
	tngx_fûe_t
;

24 
ngx_evít_s
 
	tngx_evít_t
;

25 
ngx_evít_aio_s
 
	tngx_evít_aio_t
;

26 
ngx_c⁄√˘i⁄_s
 
	tngx_c⁄√˘i⁄_t
;

28 #i‡(
NGX_THREADS
)

29 
ngx_thªad_èsk_s
 
	tngx_thªad_èsk_t
;

32 (*
	tngx_evít_h™dÀr_±
)(
	tngx_evít_t
 *
	tev
);

33 (*
	tngx_c⁄√˘i⁄_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
);

36 
	#NGX_OK
 0

	)

37 
	#NGX_ERROR
 -1

	)

38 
	#NGX_AGAIN
 -2

	)

39 
	#NGX_BUSY
 -3

	)

40 
	#NGX_DONE
 -4

	)

41 
	#NGX_DECLINED
 -5

	)

42 
	#NGX_ABORT
 -6

	)

45 
	~<ngx_î∫o.h
>

46 
	~<ngx_©omic.h
>

47 
	~<ngx_thªad.h
>

48 
	~<ngx_rbåì.h
>

49 
	~<ngx_time.h
>

50 
	~<ngx_sockë.h
>

51 
	~<ngx_°rög.h
>

52 
	~<ngx_fûes.h
>

53 
	~<ngx_shmem.h
>

54 
	~<ngx_¥o˚ss.h
>

55 
	~<ngx_u£r.h
>

56 
	~<ngx_∑r£.h
>

57 
	~<ngx_log.h
>

58 
	~<ngx_Æloc.h
>

59 
	~<ngx_∑Œoc.h
>

60 
	~<ngx_buf.h
>

61 
	~<ngx_queue.h
>

62 
	~<ngx_¨øy.h
>

63 
	~<ngx_li°.h
>

64 
	~<ngx_hash.h
>

65 
	~<ngx_fûe.h
>

66 
	~<ngx_¸c.h
>

67 
	~<ngx_¸c32.h
>

68 
	~<ngx_murmurhash.h
>

69 #i‡(
NGX_PCRE
)

70 
	~<ngx_ªgex.h
>

72 
	~<ngx_ødix_åì.h
>

73 
	~<ngx_times.h
>

74 
	~<ngx_shmtx.h
>

75 
	~<ngx_¶ab.h
>

76 
	~<ngx_öë.h
>

77 
	~<ngx_cy˛e.h
>

78 
	~<ngx_ªsﬁvî.h
>

79 #i‡(
NGX_OPENSSL
)

80 
	~<ngx_evít_›ís¶.h
>

82 
	~<ngx_¥o˚ss_cy˛e.h
>

83 
	~<ngx_c⁄f_fûe.h
>

84 
	~<ngx_›í_fûe_ˇche.h
>

85 
	~<ngx_os.h
>

86 
	~<ngx_c⁄√˘i⁄.h
>

87 
	~<ngx_sy¶og.h
>

88 
	~<ngx_¥oxy_¥Ÿocﬁ.h
>

91 
	#LF
 (
u_ch¨
Ë'\n'

	)

92 
	#CR
 (
u_ch¨
Ë'\r'

	)

93 
	#CRLF
 "\r\n"

	)

96 
	#ngx_abs
(
vÆue
Ë(((vÆueË>0Ë? (vÆueË: - (vÆue))

	)

97 
	#ngx_max
(
vÆ1
, 
vÆ2
Ë((vÆ1 < vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

98 
	#ngx_mö
(
vÆ1
, 
vÆ2
Ë((vÆ1 > vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

100 
	`ngx_˝uöfo
();

102 #i‡(
NGX_HAVE_OPENAT
)

103 
	#NGX_DISABLE_SYMLINKS_OFF
 0

	)

104 
	#NGX_DISABLE_SYMLINKS_ON
 1

	)

105 
	#NGX_DISABLE_SYMLINKS_NOTOWNER
 2

	)

	@src/core/ngx_cpuinfo.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(–
__i386__
 || 
__amd64__
 ) && ( 
__GNUC__
 || 
__INTEL_COMPILER
 ))

15 
ngx_ölöe
 
ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
);

18 #i‡–
__i386__
 )

20 
ngx_ölöe
 

21 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

30 
	`__asm__
 (

42 : : "a" (
i
), "D" (
buf
) : "ecx", "edx", "esi", "memory" );

43 
	}
}

49 
ngx_ölöe
 

50 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

52 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

54 
	`__asm__
 (

58 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
Ë: "a" (
i
) );

60 
buf
[0] = 
óx
;

61 
buf
[1] = 
ebx
;

62 
buf
[2] = 
edx
;

63 
buf
[3] = 
ecx
;

64 
	}
}

73 
	$ngx_˝uöfo
()

75 
u_ch¨
 *
víd‹
;

76 
uöt32_t
 
vbuf
[5], 
˝u
[4], 
modñ
;

78 
vbuf
[0] = 0;

79 
vbuf
[1] = 0;

80 
vbuf
[2] = 0;

81 
vbuf
[3] = 0;

82 
vbuf
[4] = 0;

84 
	`ngx_˝uid
(0, 
vbuf
);

86 
víd‹
 = (
u_ch¨
 *Ë&
vbuf
[1];

88 i‡(
vbuf
[0] == 0) {

92 
	`ngx_˝uid
(1, 
˝u
);

94 i‡(
	`ngx_°rcmp
(
víd‹
, "GenuineIntel") == 0) {

96 (
˝u
[0] & 0xf00) >> 8) {

100 
ngx_ˇchñöe_size
 = 32;

105 
ngx_ˇchñöe_size
 = 32;

107 
modñ
 = ((
˝u
[0] & 0xf0000) >> 8) | (cpu[0] & 0xf0);

109 i‡(
modñ
 >= 0xd0) {

111 
ngx_ˇchñöe_size
 = 64;

121 
ngx_ˇchñöe_size
 = 128;

125 } i‡(
	`ngx_°rcmp
(
víd‹
, "AuthenticAMD") == 0) {

126 
ngx_ˇchñöe_size
 = 64;

128 
	}
}

134 
	$ngx_˝uöfo
()

136 
	}
}

	@src/core/ngx_crc.h

8 #i‚de‡
_NGX_CRC_H_INCLUDED_


9 
	#_NGX_CRC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
uöt32_t


19 
	$ngx_¸c
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

21 
uöt32_t
 
sum
;

23 
sum
 = 0; 
Àn
;Üen--) {

30 
sum
 = sum >> 1 | sum << 31;

32 
sum
 +*
d©a
++;

35  
sum
;

36 
	}
}

	@src/core/ngx_crc32.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

26 
uöt32_t
 
	gngx_¸c32_èbÀ16
[] = {

34 
uöt32_t
 
	gngx_¸c32_èbÀ256
[] = {

102 
uöt32_t
 *
	gngx_¸c32_èbÀ_sh‹t
 = 
ngx_¸c32_èbÀ16
;

105 
ngx_öt_t


106 
	$ngx_¸c32_èbÀ_öô
()

108 *
p
;

110 i‡(((
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t


111 & ~((
uöçå_t
Ë
ngx_ˇchñöe_size
 - 1))

112 =(
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t
)

114  
NGX_OK
;

117 
p
 = 
	`ngx_Æloc
(16 * (
uöt32_t
Ë+ 
ngx_ˇchñöe_size
, 
ngx_cy˛e
->
log
);

118 i‡(
p
 =
NULL
) {

119  
NGX_ERROR
;

122 
p
 = 
	`ngx_Æign_±r
’, 
ngx_ˇchñöe_size
);

124 
	`ngx_mem˝y
(
p
, 
ngx_¸c32_èbÀ16
, 16 * (
uöt32_t
));

126 
ngx_¸c32_èbÀ_sh‹t
 = 
p
;

128  
NGX_OK
;

129 
	}
}

	@src/core/ngx_crc32.h

8 #i‚de‡
_NGX_CRC32_H_INCLUDED_


9 
	#_NGX_CRC32_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 *
ngx_¸c32_èbÀ_sh‹t
;

17 
uöt32_t
 
ngx_¸c32_èbÀ256
[];

20 
ngx_ölöe
 
uöt32_t


21 
	$ngx_¸c32_sh‹t
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

23 
u_ch¨
 
c
;

24 
uöt32_t
 
¸c
;

26 
¸c
 = 0xffffffff;

28 
Àn
--) {

29 
c
 = *
p
++;

30 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 & 0xf)) & 0xf] ^ (crc >> 4);

31 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 >> 4)) & 0xf] ^ (crc >> 4);

34  
¸c
 ^ 0xffffffff;

35 
	}
}

38 
ngx_ölöe
 
uöt32_t


39 
	$ngx_¸c32_l⁄g
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

41 
uöt32_t
 
¸c
;

43 
¸c
 = 0xffffffff;

45 
Àn
--) {

46 
¸c
 = 
ngx_¸c32_èbÀ256
[(¸¯^ *
p
++) & 0xff] ^ (crc >> 8);

49  
¸c
 ^ 0xffffffff;

50 
	}
}

53 
	#ngx_¸c32_öô
(
¸c
) \

54 
¸c
 = 0xffffffff

	)

57 
ngx_ölöe
 

58 
	$ngx_¸c32_upd©e
(
uöt32_t
 *
¸c
, 
u_ch¨
 *
p
, 
size_t
 
Àn
)

60 
uöt32_t
 
c
;

62 
c
 = *
¸c
;

64 
Àn
--) {

65 
c
 = 
ngx_¸c32_èbÀ256
[(¯^ *
p
++) & 0xff] ^ (c >> 8);

68 *
¸c
 = 
c
;

69 
	}
}

72 
	#ngx_¸c32_föÆ
(
¸c
) \

73 
¸c
 ^0xffffffff

	)

76 
ngx_öt_t
 
ngx_¸c32_èbÀ_öô
();

	@src/core/ngx_crypt.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_¸y±.h
>

10 
	~<ngx_md5.h
>

11 #i‡(
NGX_HAVE_SHA1
)

12 
	~<ngx_sha1.h
>

16 #i‡(
NGX_CRYPT
)

18 
ngx_öt_t
 
ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

19 
u_ch¨
 **
í¸y±ed
);

20 
ngx_öt_t
 
ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

23 #i‡(
NGX_HAVE_SHA1
)

25 
ngx_öt_t
 
ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

26 
u_ch¨
 **
í¸y±ed
);

27 
ngx_öt_t
 
ngx_¸y±_sha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

28 
u_ch¨
 **
í¸y±ed
);

33 
u_ch¨
 *
ngx_¸y±_to64
(u_ch¨ *
p
, 
uöt32_t
 
v
, 
size_t
 
n
);

36 
ngx_öt_t


37 
	$ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

39 i‡(
	`ngx_°∫cmp
(
ß…
, "$apr1$", ("$apr1$") - 1) == 0) {

40  
	`ngx_¸y±_≠r1
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

42 } i‡(
	`ngx_°∫cmp
(
ß…
, "{PLAIN}", ("{PLAIN}") - 1) == 0) {

43  
	`ngx_¸y±_∂aö
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

45 #i‡(
NGX_HAVE_SHA1
)

46 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SSHA}", ("{SSHA}") - 1) == 0) {

47  
	`ngx_¸y±_ssha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

49 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SHA}", ("{SHA}") - 1) == 0) {

50  
	`ngx_¸y±_sha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

56  
	`ngx_libc_¸y±
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

57 
	}
}

60 
ngx_öt_t


61 
	$ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

63 
ngx_öt_t
 
n
;

64 
ngx_uöt_t
 
i
;

65 
u_ch¨
 *
p
, *
œ°
, 
föÆ
[16];

66 
size_t
 
ß…Àn
, 
keyÀn
;

67 
ngx_md5_t
 
md5
, 
˘x1
;

71 
keyÀn
 = 
	`ngx_°æí
(
key
);

75 
ß…
 += ("$apr1$") - 1;

76 
œ°
 = 
ß…
 + 8;

77 
p
 = 
ß…
; *∞&& *∞!'$' &&Ö < 
œ°
;Ö++) { }

78 
ß…Àn
 = 
p
 - 
ß…
;

82 
	`ngx_md5_öô
(&
md5
);

83 
	`ngx_md5_upd©e
(&
md5
, 
key
, 
keyÀn
);

84 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *) "$apr1$", ("$apr1$") - 1);

85 
	`ngx_md5_upd©e
(&
md5
, 
ß…
, 
ß…Àn
);

87 
	`ngx_md5_öô
(&
˘x1
);

88 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

89 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

90 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

91 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

93 
n
 = 
keyÀn
;Ç > 0;Ç -= 16) {

94 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 
n
 > 16 ? 16 :Ç);

97 
	`ngx_memzîo
(
föÆ
, (final));

99 
i
 = 
keyÀn
; i; i >>= 1) {

100 i‡(
i
 & 1) {

101 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 1);

104 
	`ngx_md5_upd©e
(&
md5
, 
key
, 1);

108 
	`ngx_md5_föÆ
(
föÆ
, &
md5
);

110 
i
 = 0; i < 1000; i++) {

111 
	`ngx_md5_öô
(&
˘x1
);

113 i‡(
i
 & 1) {

114 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

117 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

120 i‡(
i
 % 3) {

121 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

124 i‡(
i
 % 7) {

125 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

128 i‡(
i
 & 1) {

129 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

132 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

135 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

140 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("$≠r1$"Ë- 1 + 
ß…Àn
 + 1 + 22 + 1);

141 i‡(*
í¸y±ed
 =
NULL
) {

142  
NGX_ERROR
;

145 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "$apr1$", ("$apr1$") - 1);

146 
p
 = 
	`ngx_c›y
’, 
ß…
, 
ß…Àn
);

147 *
p
++ = '$';

149 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 0]<<16) | (final[ 6]<<8) | final[12], 4);

150 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 1]<<16) | (final[ 7]<<8) | final[13], 4);

151 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 2]<<16) | (final[ 8]<<8) | final[14], 4);

152 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 3]<<16) | (final[ 9]<<8) | final[15], 4);

153 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 4]<<16) | (final[10]<<8) | final[ 5], 4);

154 
p
 = 
	`ngx_¸y±_to64
’, 
föÆ
[11], 2);

155 *
p
 = '\0';

157  
NGX_OK
;

158 
	}
}

161 
u_ch¨
 *

162 
	$ngx_¸y±_to64
(
u_ch¨
 *
p
, 
uöt32_t
 
v
, 
size_t
 
n
)

164 
u_ch¨
 
ôﬂ64
[] =

167 
n
--) {

168 *
p
++ = 
ôﬂ64
[
v
 & 0x3f];

169 
v
 >>= 6;

172  
p
;

173 
	}
}

176 
ngx_öt_t


177 
	$ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

179 
size_t
 
Àn
;

180 
u_ch¨
 *
p
;

182 
Àn
 = 
	`ngx_°æí
(
key
);

184 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("{PLAIN}"Ë- 1 + 
Àn
 + 1);

185 i‡(*
í¸y±ed
 =
NULL
) {

186  
NGX_ERROR
;

189 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{PLAIN}", ("{PLAIN}") - 1);

190 
	`ngx_mem˝y
(
p
, 
key
, 
Àn
 + 1);

192  
NGX_OK
;

193 
	}
}

196 #i‡(
NGX_HAVE_SHA1
)

198 
ngx_öt_t


199 
	$ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

201 
size_t
 
Àn
;

202 
ngx_öt_t
 
rc
;

203 
ngx_°r_t
 
ícoded
, 
decoded
;

204 
ngx_sha1_t
 
sha1
;

210 
ícoded
.
d©a
 = 
ß…
 + ("{SSHA}") - 1;

211 
ícoded
.
Àn
 = 
	`ngx_°æí
”ncoded.
d©a
);

213 
Àn
 = 
	`ngx_max
(
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len), 20);

215 
decoded
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

216 i‡(
decoded
.
d©a
 =
NULL
) {

217  
NGX_ERROR
;

220 
rc
 = 
	`ngx_decode_ba£64
(&
decoded
, &
ícoded
);

222 i‡(
rc
 !
NGX_OK
 || 
decoded
.
Àn
 < 20) {

223 
decoded
.
Àn
 = 20;

228 
	`ngx_sha1_öô
(&
sha1
);

229 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

230 
	`ngx_sha1_upd©e
(&
sha1
, 
decoded
.
d©a
 + 20, decoded.
Àn
 - 20);

231 
	`ngx_sha1_föÆ
(
decoded
.
d©a
, &
sha1
);

235 
Àn
 = ("{SSHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

237 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

238 i‡(*
í¸y±ed
 =
NULL
) {

239  
NGX_ERROR
;

242 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SSHA}", ("{SSHA}") - 1);

243 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

244 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

246  
NGX_OK
;

247 
	}
}

250 
ngx_öt_t


251 
	$ngx_¸y±_sha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

253 
size_t
 
Àn
;

254 
ngx_°r_t
 
ícoded
, 
decoded
;

255 
ngx_sha1_t
 
sha1
;

256 
u_ch¨
 
dige°
[20];

260 
decoded
.
Àn
 = (
dige°
);

261 
decoded
.
d©a
 = 
dige°
;

263 
	`ngx_sha1_öô
(&
sha1
);

264 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

265 
	`ngx_sha1_föÆ
(
dige°
, &
sha1
);

267 
Àn
 = ("{SHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

269 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

270 i‡(*
í¸y±ed
 =
NULL
) {

271  
NGX_ERROR
;

274 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SHA}", ("{SHA}") - 1);

275 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

276 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

278  
NGX_OK
;

279 
	}
}

	@src/core/ngx_crypt.h

8 #i‚de‡
_NGX_CRYPT_H_INCLUDED_


9 
	#_NGX_CRYPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_öt_t
 
ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

17 
u_ch¨
 **
í¸y±ed
);

	@src/core/ngx_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
);

14 
ngx_öt_t
 
ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
,

15 
ngx_shm_z⁄e_t
 *
shm_z⁄e
);

16 
ngx_öt_t
 
ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
);

17 
ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
);

20 vﬁ©ûê
ngx_cy˛e_t
 *
	gngx_cy˛e
;

21 
ngx_¨øy_t
 
	gngx_ﬁd_cy˛es
;

23 
ngx_poﬁ_t
 *
	gngx_ãmp_poﬁ
;

24 
ngx_evít_t
 
	gngx_˛ó√r_evít
;

26 
ngx_uöt_t
 
	gngx_ã°_c⁄fig
;

27 
ngx_uöt_t
 
	gngx_quõt_mode
;

29 #i‡(
NGX_OLD_THREADS
)

30 
ngx_és_key_t
 
	gngx_c‹e_és_key
;

35 
ngx_c⁄√˘i⁄_t
 
	gdumb
;

39 
ngx_cy˛e_t
 *

40 
	$ngx_öô_cy˛e
(
ngx_cy˛e_t
 *
ﬁd_cy˛e
)

42 *
rv
;

43 **
£nv
, **
ív
;

44 
ngx_uöt_t
 
i
, 
n
;

45 
ngx_log_t
 *
log
;

46 
ngx_time_t
 *
ç
;

47 
ngx_c⁄f_t
 
c⁄f
;

48 
ngx_poﬁ_t
 *
poﬁ
;

49 
ngx_cy˛e_t
 *
cy˛e
, **
ﬁd
;

50 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
oshm_z⁄e
;

51 
ngx_li°_∑π_t
 *
∑π
, *
›¨t
;

52 
ngx_›í_fûe_t
 *
fûe
;

53 
ngx_li°íög_t
 *
ls
, *
∆s
;

54 
ngx_c‹e_c⁄f_t
 *
ccf
, *
ﬁd_ccf
;

55 
ngx_c‹e_moduÀ_t
 *
moduÀ
;

56 
ho°«me
[
NGX_MAXHOSTNAMELEN
];

58 
	`ngx_timez⁄e_upd©e
();

62 
ç
 = 
	`ngx_timeofday
();

63 
ç
->
£c
 = 0;

65 
	`ngx_time_upd©e
();

68 
log
 = 
ﬁd_cy˛e
->log;

70 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

71 i‡(
poﬁ
 =
NULL
) {

72  
NULL
;

74 
poﬁ
->
log
 =Üog;

76 
cy˛e
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_cy˛e_t
));

77 i‡(
cy˛e
 =
NULL
) {

78 
	`ngx_de°roy_poﬁ
(
poﬁ
);

79  
NULL
;

82 
cy˛e
->
poﬁ
 =Öool;

83 
cy˛e
->
log
 =Üog;

84 
cy˛e
->
ﬁd_cy˛e
 = old_cycle;

86 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
ﬁd_cy˛e
->conf_prefix.len;

87 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_prefix);

88 i‡(
cy˛e
->
c⁄f_¥efix
.
d©a
 =
NULL
) {

89 
	`ngx_de°roy_poﬁ
(
poﬁ
);

90  
NULL
;

93 
cy˛e
->
¥efix
.
Àn
 = 
ﬁd_cy˛e
->prefix.len;

94 
cy˛e
->
¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->prefix);

95 i‡(
cy˛e
->
¥efix
.
d©a
 =
NULL
) {

96 
	`ngx_de°roy_poﬁ
(
poﬁ
);

97  
NULL
;

100 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
ﬁd_cy˛e
->conf_file.len;

101 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ﬁd_cy˛e
->c⁄f_fûe.
Àn
 + 1);

102 i‡(
cy˛e
->
c⁄f_fûe
.
d©a
 =
NULL
) {

103 
	`ngx_de°roy_poﬁ
(
poﬁ
);

104  
NULL
;

106 
	`ngx_˝y°∫
(
cy˛e
->
c⁄f_fûe
.
d©a
, 
ﬁd_cy˛e
->conf_file.data,

107 
ﬁd_cy˛e
->
c⁄f_fûe
.
Àn
 + 1);

109 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
ﬁd_cy˛e
->conf_param.len;

110 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_param);

111 i‡(
cy˛e
->
c⁄f_∑øm
.
d©a
 =
NULL
) {

112 
	`ngx_de°roy_poﬁ
(
poﬁ
);

113  
NULL
;

117 
n
 = 
ﬁd_cy˛e
->
∑ths
.
√…s
 ? old_cycle->paths.nelts : 10;

119 
cy˛e
->
∑ths
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_∑th_t
 *));

120 i‡(
cy˛e
->
∑ths
.
ñts
 =
NULL
) {

121 
	`ngx_de°roy_poﬁ
(
poﬁ
);

122  
NULL
;

125 
cy˛e
->
∑ths
.
√…s
 = 0;

126 
cy˛e
->
∑ths
.
size
 = (
ngx_∑th_t
 *);

127 
cy˛e
->
∑ths
.
«Œoc
 = 
n
;

128 
cy˛e
->
∑ths
.
poﬁ
 =Öool;

131 i‡(
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
) {

132 
n
 = 
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
;

133 
∑π
 = 
ﬁd_cy˛e
->
›í_fûes
.∑π.
√xt
;Öart;Öart =Öart->next) {

134 
n
 +
∑π
->
√…s
;

138 
n
 = 20;

141 i‡(
	`ngx_li°_öô
(&
cy˛e
->
›í_fûes
, 
poﬁ
, 
n
, (
ngx_›í_fûe_t
))

142 !
NGX_OK
)

144 
	`ngx_de°roy_poﬁ
(
poﬁ
);

145  
NULL
;

149 i‡(
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
) {

150 
n
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
;

151 
∑π
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.∑π.
√xt
;Öart;Öart =Öart->next)

153 
n
 +
∑π
->
√…s
;

157 
n
 = 1;

160 i‡(
	`ngx_li°_öô
(&
cy˛e
->
sh¨ed_mem‹y
, 
poﬁ
, 
n
, (
ngx_shm_z⁄e_t
))

161 !
NGX_OK
)

163 
	`ngx_de°roy_poﬁ
(
poﬁ
);

164  
NULL
;

167 
n
 = 
ﬁd_cy˛e
->
li°íög
.
√…s
 ? old_cycle->listening.nelts : 10;

169 
cy˛e
->
li°íög
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_li°íög_t
));

170 i‡(
cy˛e
->
li°íög
.
ñts
 =
NULL
) {

171 
	`ngx_de°roy_poﬁ
(
poﬁ
);

172  
NULL
;

175 
cy˛e
->
li°íög
.
√…s
 = 0;

176 
cy˛e
->
li°íög
.
size
 = (
ngx_li°íög_t
);

177 
cy˛e
->
li°íög
.
«Œoc
 = 
n
;

178 
cy˛e
->
li°íög
.
poﬁ
 =Öool;

181 
	`ngx_queue_öô
(&
cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

184 
cy˛e
->
c⁄f_˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
ngx_max_moduÀ
 * (*));

185 i‡(
cy˛e
->
c⁄f_˘x
 =
NULL
) {

186 
	`ngx_de°roy_poﬁ
(
poﬁ
);

187  
NULL
;

191 i‡(
	`gëho°«me
(
ho°«me
, 
NGX_MAXHOSTNAMELEN
) == -1) {

192 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "gethostname() failed");

193 
	`ngx_de°roy_poﬁ
(
poﬁ
);

194  
NULL
;

199 
ho°«me
[
NGX_MAXHOSTNAMELEN
 - 1] = '\0';

200 
cy˛e
->
ho°«me
.
Àn
 = 
	`ngx_°æí
(hostname);

202 
cy˛e
->
ho°«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, cy˛e->ho°«me.
Àn
);

203 i‡(
cy˛e
->
ho°«me
.
d©a
 =
NULL
) {

204 
	`ngx_de°roy_poﬁ
(
poﬁ
);

205  
NULL
;

208 
	`ngx_°æow
(
cy˛e
->
ho°«me
.
d©a
, (
u_ch¨
 *Ëho°«me, cy˛e->ho°«me.
Àn
);

211 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

212 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

216 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

218 i‡(
moduÀ
->
¸óã_c⁄f
) {

219 
rv
 = 
moduÀ
->
	`¸óã_c⁄f
(
cy˛e
);

220 i‡(
rv
 =
NULL
) {

221 
	`ngx_de°roy_poﬁ
(
poﬁ
);

222  
NULL
;

224 
cy˛e
->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
] = 
rv
;

229 
£nv
 = 
ívú⁄
;

232 
	`ngx_memzîo
(&
c⁄f
, (
ngx_c⁄f_t
));

234 
c⁄f
.
¨gs
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 10, (
ngx_°r_t
));

235 i‡(
c⁄f
.
¨gs
 =
NULL
) {

236 
	`ngx_de°roy_poﬁ
(
poﬁ
);

237  
NULL
;

240 
c⁄f
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

241 i‡(
c⁄f
.
ãmp_poﬁ
 =
NULL
) {

242 
	`ngx_de°roy_poﬁ
(
poﬁ
);

243  
NULL
;

247 
c⁄f
.
˘x
 = 
cy˛e
->
c⁄f_˘x
;

248 
c⁄f
.
cy˛e
 = cycle;

249 
c⁄f
.
poﬁ
 =Öool;

250 
c⁄f
.
log
 =Üog;

251 
c⁄f
.
moduÀ_ty≥
 = 
NGX_CORE_MODULE
;

252 
c⁄f
.
cmd_ty≥
 = 
NGX_MAIN_CONF
;

255 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

258 i‡(
	`ngx_c⁄f_∑øm
(&
c⁄f
Ë!
NGX_CONF_OK
) {

259 
ívú⁄
 = 
£nv
;

260 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

261  
NULL
;

264 i‡(
	`ngx_c⁄f_∑r£
(&
c⁄f
, &
cy˛e
->
c⁄f_fûe
Ë!
NGX_CONF_OK
) {

265 
ívú⁄
 = 
£nv
;

266 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

267  
NULL
;

270 i‡(
ngx_ã°_c⁄fig
 && !
ngx_quõt_mode
) {

271 
	`ngx_log_°dîr
(0, "the configuration file %s syntax is ok",

272 
cy˛e
->
c⁄f_fûe
.
d©a
);

275 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

276 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

280 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

282 i‡(
moduÀ
->
öô_c⁄f
) {

283 i‡(
moduÀ
->
	`öô_c⁄f
(
cy˛e
, cy˛e->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
])

284 =
NGX_CONF_ERROR
)

286 
ívú⁄
 = 
£nv
;

287 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

288  
NULL
;

293 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SIGNALLER
) {

294  
cy˛e
;

297 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

299 i‡(
ngx_ã°_c⁄fig
) {

301 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

302 
Áûed
;

305 } i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

312 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

313 
ngx_c‹e_moduÀ
);

314 i‡(
ccf
->
pid
.
Àn
 !
ﬁd_ccf
->pid.len

315 || 
	`ngx_°rcmp
(
ccf
->
pid
.
d©a
, 
ﬁd_ccf
->pid.data) != 0)

319 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

320 
Áûed
;

323 
	`ngx_dñëe_pidfûe
(
ﬁd_cy˛e
);

328 i‡(
	`ngx_ã°_lockfûe
(
cy˛e
->
lock_fûe
.
d©a
, 
log
Ë!
NGX_OK
) {

329 
Áûed
;

333 i‡(
	`ngx_¸óã_∑ths
(
cy˛e
, 
ccf
->
u£r
Ë!
NGX_OK
) {

334 
Áûed
;

338 i‡(
	`ngx_log_›í_deÁu…
(
cy˛e
Ë!
NGX_OK
) {

339 
Áûed
;

344 
∑π
 = &
cy˛e
->
›í_fûes
.part;

345 
fûe
 = 
∑π
->
ñts
;

347 
i
 = 0; ; i++) {

349 i‡(
i
 >
∑π
->
√…s
) {

350 i‡(
∑π
->
√xt
 =
NULL
) {

353 
∑π
 =Ö¨t->
√xt
;

354 
fûe
 = 
∑π
->
ñts
;

355 
i
 = 0;

358 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

362 
fûe
[
i
].
fd
 = 
	`ngx_›í_fûe
(fûe[i].
«me
.
d©a
,

363 
NGX_FILE_APPEND
,

364 
NGX_FILE_CREATE_OR_OPEN
,

365 
NGX_FILE_DEFAULT_ACCESS
);

367 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

369 &
fûe
[
i
], fûe[i].
fd
, fûe[i].
«me
.
d©a
);

371 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

373 
ngx_›í_fûe_n
 " \"%s\" failed",

374 
fûe
[
i
].
«me
.
d©a
);

375 
Áûed
;

378 #i‡!(
NGX_WIN32
)

379 i‡(
	`f˙é
(
fûe
[
i
].
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

380 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

382 
fûe
[
i
].
«me
.
d©a
);

383 
Áûed
;

388 
cy˛e
->
log
 = &cy˛e->
√w_log
;

389 
poﬁ
->
log
 = &
cy˛e
->
√w_log
;

394 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

395 
shm_z⁄e
 = 
∑π
->
ñts
;

397 
i
 = 0; ; i++) {

399 i‡(
i
 >
∑π
->
√…s
) {

400 i‡(
∑π
->
√xt
 =
NULL
) {

403 
∑π
 =Ö¨t->
√xt
;

404 
shm_z⁄e
 = 
∑π
->
ñts
;

405 
i
 = 0;

408 i‡(
shm_z⁄e
[
i
].
shm
.
size
 == 0) {

409 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

411 &
shm_z⁄e
[
i
].
shm
.
«me
);

412 
Áûed
;

415 
shm_z⁄e
[
i
].
shm
.
log
 = 
cy˛e
->log;

417 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

418 
oshm_z⁄e
 = 
›¨t
->
ñts
;

420 
n
 = 0; ;Ç++) {

422 i‡(
n
 >
›¨t
->
√…s
) {

423 i‡(
›¨t
->
√xt
 =
NULL
) {

426 
›¨t
 = o∑π->
√xt
;

427 
oshm_z⁄e
 = 
›¨t
->
ñts
;

428 
n
 = 0;

431 i‡(
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
 !
oshm_z⁄e
[
n
].shm.name.len) {

435 i‡(
	`ngx_°∫cmp
(
shm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

436 
oshm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

437 
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

443 i‡(
shm_z⁄e
[
i
].
èg
 =
oshm_z⁄e
[
n
].tag

444 && 
shm_z⁄e
[
i
].
shm
.
size
 =
oshm_z⁄e
[
n
].shm.size)

446 
shm_z⁄e
[
i
].
shm
.
addr
 = 
oshm_z⁄e
[
n
].shm.addr;

448 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
oshm_z⁄e
[
n
].
d©a
)

449 !
NGX_OK
)

451 
Áûed
;

454 
shm_z⁄e_found
;

457 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
n
].
shm
);

462 i‡(
	`ngx_shm_Æloc
(&
shm_z⁄e
[
i
].
shm
Ë!
NGX_OK
) {

463 
Áûed
;

466 i‡(
	`ngx_öô_z⁄e_poﬁ
(
cy˛e
, &
shm_z⁄e
[
i
]Ë!
NGX_OK
) {

467 
Áûed
;

470 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
NULL
Ë!
NGX_OK
) {

471 
Áûed
;

474 
shm_z⁄e_found
:

482 i‡(
ﬁd_cy˛e
->
li°íög
.
√…s
) {

483 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

484 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

485 
ls
[
i
].
ªmaö
 = 0;

488 
∆s
 = 
cy˛e
->
li°íög
.
ñts
;

489 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

491 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

492 i‡(
ls
[
i
].
ign‹e
) {

496 i‡(
	`ngx_cmp_sockaddr
(
∆s
[
n
].
sockaddr
,Çls[n].
sockÀn
,

497 
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
, 1)

498 =
NGX_OK
)

500 
∆s
[
n
].
fd
 = 
ls
[
i
].fd;

501 
∆s
[
n
].
¥evious
 = &
ls
[
i
];

502 
ls
[
i
].
ªmaö
 = 1;

504 i‡(
ls
[
i
].
backlog
 !
∆s
[
n
].backlog) {

505 
∆s
[
n
].
li°í
 = 1;

508 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

514 
∆s
[
n
].
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

516 i‡(
ls
[
i
].
ac˚±_fûãr
 && 
∆s
[
n
].accept_filter) {

517 i‡(
	`ngx_°rcmp
(
ls
[
i
].
ac˚±_fûãr
,

518 
∆s
[
n
].
ac˚±_fûãr
)

521 
∆s
[
n
].
dñëe_de„ºed
 = 1;

522 
∆s
[
n
].
add_de„ºed
 = 1;

525 } i‡(
ls
[
i
].
ac˚±_fûãr
) {

526 
∆s
[
n
].
dñëe_de„ºed
 = 1;

528 } i‡(
∆s
[
n
].
ac˚±_fûãr
) {

529 
∆s
[
n
].
add_de„ºed
 = 1;

533 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

535 i‡(
ls
[
i
].
de„ºed_ac˚±
 && !
∆s
[
n
].deferred_accept) {

536 
∆s
[
n
].
dñëe_de„ºed
 = 1;

538 } i‡(
ls
[
i
].
de„ºed_ac˚±
 !
∆s
[
n
].deferred_accept)

540 
∆s
[
n
].
add_de„ºed
 = 1;

547 i‡(
∆s
[
n
].
fd
 =(
ngx_sockë_t
) -1) {

548 
∆s
[
n
].
›í
 = 1;

549 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

550 i‡(
∆s
[
n
].
ac˚±_fûãr
) {

551 
∆s
[
n
].
add_de„ºed
 = 1;

554 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

555 i‡(
∆s
[
n
].
de„ºed_ac˚±
) {

556 
∆s
[
n
].
add_de„ºed
 = 1;

563 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

564 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

565 
ls
[
i
].
›í
 = 1;

566 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

567 i‡(
ls
[
i
].
ac˚±_fûãr
) {

568 
ls
[
i
].
add_de„ºed
 = 1;

571 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

572 i‡(
ls
[
i
].
de„ºed_ac˚±
) {

573 
ls
[
i
].
add_de„ºed
 = 1;

579 i‡(
	`ngx_›í_li°íög_sockës
(
cy˛e
Ë!
NGX_OK
) {

580 
Áûed
;

583 i‡(!
ngx_ã°_c⁄fig
) {

584 
	`ngx_c⁄figuª_li°íög_sockës
(
cy˛e
);

590 i‡(!
ngx_u£_°dîr
) {

591 (Ë
	`ngx_log_ªdúe˘_°dîr
(
cy˛e
);

594 
poﬁ
->
log
 = 
cy˛e
->log;

596 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

597 i‡(
ngx_moduÀs
[
i
]->
öô_moduÀ
) {

598 i‡(
ngx_moduÀs
[
i
]->
	`öô_moduÀ
(
cy˛e
Ë!
NGX_OK
) {

600 
	`exô
(1);

610 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

611 
oshm_z⁄e
 = 
›¨t
->
ñts
;

613 
i
 = 0; ; i++) {

615 i‡(
i
 >
›¨t
->
√…s
) {

616 i‡(
›¨t
->
√xt
 =
NULL
) {

617 
ﬁd_shm_z⁄e_d⁄e
;

619 
›¨t
 = o∑π->
√xt
;

620 
oshm_z⁄e
 = 
›¨t
->
ñts
;

621 
i
 = 0;

624 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

625 
shm_z⁄e
 = 
∑π
->
ñts
;

627 
n
 = 0; ;Ç++) {

629 i‡(
n
 >
∑π
->
√…s
) {

630 i‡(
∑π
->
√xt
 =
NULL
) {

633 
∑π
 =Ö¨t->
√xt
;

634 
shm_z⁄e
 = 
∑π
->
ñts
;

635 
n
 = 0;

638 i‡(
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
 =
shm_z⁄e
[
n
].shm.name.len

639 && 
	`ngx_°∫cmp
(
oshm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

640 
shm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

641 
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

644 
live_shm_z⁄e
;

648 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
i
].
shm
);

650 
live_shm_z⁄e
:

655 
ﬁd_shm_z⁄e_d⁄e
:

660 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

661 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

663 i‡(
ls
[
i
].
ªmaö
 ||Üs[i].
fd
 =(
ngx_sockë_t
) -1) {

667 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

668 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

669 
ngx_˛o£_sockë_n
 "Üistening socket on %V failed",

670 &
ls
[
i
].
addr_ãxt
);

673 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

675 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

676 
u_ch¨
 *
«me
;

678 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

680 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

681 "dñëög sockë %s", 
«me
);

683 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

684 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

685 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

695 
∑π
 = &
ﬁd_cy˛e
->
›í_fûes
.part;

696 
fûe
 = 
∑π
->
ñts
;

698 
i
 = 0; ; i++) {

700 i‡(
i
 >
∑π
->
√…s
) {

701 i‡(
∑π
->
√xt
 =
NULL
) {

704 
∑π
 =Ö¨t->
√xt
;

705 
fûe
 = 
∑π
->
ñts
;

706 
i
 = 0;

709 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

713 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

714 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

715 
ngx_˛o£_fûe_n
 " \"%s\" failed",

716 
fûe
[
i
].
«me
.
d©a
);

720 
	`ngx_de°roy_poﬁ
(
c⁄f
.
ãmp_poﬁ
);

722 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_MASTER
 || 
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

730 
ív
 = 
ívú⁄
;

731 
ívú⁄
 = 
£nv
;

733 
	`ngx_de°roy_poﬁ
(
ﬁd_cy˛e
->
poﬁ
);

734 
cy˛e
->
ﬁd_cy˛e
 = 
NULL
;

736 
ívú⁄
 = 
ív
;

738  
cy˛e
;

742 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

743 
ngx_ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
cy˛e
->
log
);

744 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

745 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

747 
	`exô
(1);

750 
n
 = 10;

751 
ngx_ﬁd_cy˛es
.
ñts
 = 
	`ngx_pˇŒoc
(
ngx_ãmp_poﬁ
,

752 
n
 * (
ngx_cy˛e_t
 *));

753 i‡(
ngx_ﬁd_cy˛es
.
ñts
 =
NULL
) {

754 
	`exô
(1);

756 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

757 
ngx_ﬁd_cy˛es
.
size
 = (
ngx_cy˛e_t
 *);

758 
ngx_ﬁd_cy˛es
.
«Œoc
 = 
n
;

759 
ngx_ﬁd_cy˛es
.
poﬁ
 = 
ngx_ãmp_poﬁ
;

761 
ngx_˛ó√r_evít
.
h™dÀr
 = 
ngx_˛ón_ﬁd_cy˛es
;

762 
ngx_˛ó√r_evít
.
log
 = 
cy˛e
->log;

763 
ngx_˛ó√r_evít
.
d©a
 = &
dumb
;

764 
dumb
.
fd
 = (
ngx_sockë_t
) -1;

767 
ngx_ãmp_poﬁ
->
log
 = 
cy˛e
->log;

769 
ﬁd
 = 
	`ngx_¨øy_push
(&
ngx_ﬁd_cy˛es
);

770 i‡(
ﬁd
 =
NULL
) {

771 
	`exô
(1);

773 *
ﬁd
 = 
ﬁd_cy˛e
;

775 i‡(!
ngx_˛ó√r_evít
.
timî_£t
) {

776 
	`ngx_add_timî
(&
ngx_˛ó√r_evít
, 30000);

777 
ngx_˛ó√r_evít
.
timî_£t
 = 1;

780  
cy˛e
;

783 
Áûed
:

785 i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

786 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

787 
ngx_c‹e_moduÀ
);

788 i‡(
ﬁd_ccf
->
ívú⁄mít
) {

789 
ívú⁄
 = 
ﬁd_ccf
->
ívú⁄mít
;

795 
∑π
 = &
cy˛e
->
›í_fûes
.part;

796 
fûe
 = 
∑π
->
ñts
;

798 
i
 = 0; ; i++) {

800 i‡(
i
 >
∑π
->
√…s
) {

801 i‡(
∑π
->
√xt
 =
NULL
) {

804 
∑π
 =Ö¨t->
√xt
;

805 
fûe
 = 
∑π
->
ñts
;

806 
i
 = 0;

809 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

813 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

814 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

815 
ngx_˛o£_fûe_n
 " \"%s\" failed",

816 
fûe
[
i
].
«me
.
d©a
);

820 i‡(
ngx_ã°_c⁄fig
) {

821 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

822  
NULL
;

825 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

826 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

827 i‡(
ls
[
i
].
fd
 =(
ngx_sockë_t
Ë-1 || !ls[i].
›í
) {

831 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

832 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

833 
ngx_˛o£_sockë_n
 " %V failed",

834 &
ls
[
i
].
addr_ãxt
);

838 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

840  
NULL
;

841 
	}
}

845 
	$ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
)

847 
	`ngx_de°roy_poﬁ
(
c⁄f
->
ãmp_poﬁ
);

848 
	`ngx_de°roy_poﬁ
(
c⁄f
->
poﬁ
);

849 
	}
}

852 
ngx_öt_t


853 
	$ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_shm_z⁄e_t
 *
zn
)

855 
u_ch¨
 *
fûe
;

856 
ngx_¶ab_poﬁ_t
 *
•
;

858 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
zn
->
shm
.
addr
;

860 i‡(
zn
->
shm
.
exi°s
) {

862 i‡(
•
 =•->
addr
) {

863  
NGX_OK
;

866 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

868 &
zn
->
shm
.
«me
, 
•
->
addr
, sp);

869  
NGX_ERROR
;

872 
•
->
íd
 = 
zn
->
shm
.
addr
 + zn->shm.
size
;

873 
•
->
mö_shi·
 = 3;

874 
•
->
addr
 = 
zn
->
shm
.addr;

876 #i‡(
NGX_HAVE_ATOMIC_OPS
)

878 
fûe
 = 
NULL
;

882 
fûe
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, cy˛e->
lock_fûe
.
Àn
 + 
zn
->
shm
.
«me
.len);

883 i‡(
fûe
 =
NULL
) {

884  
NGX_ERROR
;

887 (Ë
	`ngx_•rötf
(
fûe
, "%V%V%Z", &
cy˛e
->
lock_fûe
, &
zn
->
shm
.
«me
);

891 i‡(
	`ngx_shmtx_¸óã
(&
•
->
muãx
, &•->
lock
, 
fûe
Ë!
NGX_OK
) {

892  
NGX_ERROR
;

895 
	`ngx_¶ab_öô
(
•
);

897  
NGX_OK
;

898 
	}
}

901 
ngx_öt_t


902 
	$ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
)

904 
size_t
 
Àn
;

905 
ngx_uöt_t
 
¸óã
;

906 
ngx_fûe_t
 
fûe
;

907 
u_ch¨
 
pid
[
NGX_INT64_LEN
 + 2];

909 i‡(
ngx_¥o˚ss
 > 
NGX_PROCESS_MASTER
) {

910  
NGX_OK
;

913 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

915 
fûe
.
«me
 = *name;

916 
fûe
.
log
 =Üog;

918 
¸óã
 = 
ngx_ã°_c⁄fig
 ? 
NGX_FILE_CREATE_OR_OPEN
 : 
NGX_FILE_TRUNCATE
;

920 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDWR
,

921 
¸óã
, 
NGX_FILE_DEFAULT_ACCESS
);

923 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

924 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

925 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

926  
NGX_ERROR
;

929 i‡(!
ngx_ã°_c⁄fig
) {

930 
Àn
 = 
	`ngx_¢¥ötf
(
pid
, 
NGX_INT64_LEN
 + 2, "%P%N", 
ngx_pid
) -Öid;

932 i‡(
	`ngx_wrôe_fûe
(&
fûe
, 
pid
, 
Àn
, 0Ë=
NGX_ERROR
) {

933  
NGX_ERROR
;

937 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

938 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

939 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

942  
NGX_OK
;

943 
	}
}

947 
	$ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
)

949 
u_ch¨
 *
«me
;

950 
ngx_c‹e_c⁄f_t
 *
ccf
;

952 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

954 
«me
 = 
ngx_√w_bö¨y
 ? 
ccf
->
ﬁdpid
.
d©a
 : ccf->
pid
.data;

956 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

957 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

958 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

960 
	}
}

963 
ngx_öt_t


964 
	$ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
)

966 
ssize_t
 
n
;

967 
ngx_öt_t
 
pid
;

968 
ngx_fûe_t
 
fûe
;

969 
ngx_c‹e_c⁄f_t
 *
ccf
;

970 
u_ch¨
 
buf
[
NGX_INT64_LEN
 + 2];

972 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "signalÖrocess started");

974 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

976 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

978 
fûe
.
«me
 = 
ccf
->
pid
;

979 
fûe
.
log
 = 
cy˛e
->log;

981 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDONLY
,

982 
NGX_FILE_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

984 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

985 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 
ngx_î∫o
,

986 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

990 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
, 
NGX_INT64_LEN
 + 2, 0);

992 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

993 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

994 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

997 i‡(
n
 =
NGX_ERROR
) {

1001 
n
-- && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

1003 
pid
 = 
	`ngx_©oi
(
buf
, ++
n
);

1005 i‡(
pid
 =
NGX_ERROR
) {

1006 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 0,

1008 
n
, 
buf
, 
fûe
.
«me
.
d©a
);

1012  
	`ngx_os_sig«l_¥o˚ss
(
cy˛e
, 
sig
, 
pid
);

1014 
	}
}

1017 
ngx_öt_t


1018 
	$ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
)

1020 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

1021 
ngx_fd_t
 
fd
;

1023 
fd
 = 
	`ngx_›í_fûe
(
fûe
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

1024 
NGX_FILE_DEFAULT_ACCESS
);

1026 i‡(
fd
 =
NGX_INVALID_FILE
) {

1027 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

1028 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
);

1029  
NGX_ERROR
;

1032 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1033 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1034 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
);

1037 i‡(
	`ngx_dñëe_fûe
(
fûe
Ë=
NGX_FILE_ERROR
) {

1038 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1039 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
fûe
);

1044  
NGX_OK
;

1045 
	}
}

1049 
	$ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

1051 
ngx_fd_t
 
fd
;

1052 
ngx_uöt_t
 
i
;

1053 
ngx_li°_∑π_t
 *
∑π
;

1054 
ngx_›í_fûe_t
 *
fûe
;

1056 
∑π
 = &
cy˛e
->
›í_fûes
.part;

1057 
fûe
 = 
∑π
->
ñts
;

1059 
i
 = 0; ; i++) {

1061 i‡(
i
 >
∑π
->
√…s
) {

1062 i‡(
∑π
->
√xt
 =
NULL
) {

1065 
∑π
 =Ö¨t->
√xt
;

1066 
fûe
 = 
∑π
->
ñts
;

1067 
i
 = 0;

1070 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

1074 i‡(
fûe
[
i
].
Êush
) {

1075 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

1078 
fd
 = 
	`ngx_›í_fûe
(
fûe
[
i
].
«me
.
d©a
, 
NGX_FILE_APPEND
,

1079 
NGX_FILE_CREATE_OR_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1081 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

1083 
fûe
[
i
].
«me
.
d©a
, fûe[i].
fd
, fd);

1085 i‡(
fd
 =
NGX_INVALID_FILE
) {

1086 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1087 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1091 #i‡!(
NGX_WIN32
)

1092 i‡(
u£r
 !(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1093 
ngx_fûe_öfo_t
 
fi
;

1095 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, &
fi
)

1096 =
NGX_FILE_ERROR
)

1098 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1099 
ngx_fûe_öfo_n
 " \"%s\" failed",

1100 
fûe
[
i
].
«me
.
d©a
);

1102 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1103 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1104 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1105 
fûe
[
i
].
«me
.
d©a
);

1111 i‡(
fi
.
°_uid
 !
u£r
) {

1112 i‡(
	`chown
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
u£r
, -1) == -1) {

1113 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1115 
fûe
[
i
].
«me
.
d©a
, 
u£r
);

1117 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1118 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1119 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1120 
fûe
[
i
].
«me
.
d©a
);

1127 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
)) != (S_IRUSR|S_IWUSR)) {

1129 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
);

1131 i‡(
	`chmod
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

1132 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1133 "chmod(Ë\"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1135 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1136 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1137 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1138 
fûe
[
i
].
«me
.
d©a
);

1146 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

1147 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1149 
fûe
[
i
].
«me
.
d©a
);

1151 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1152 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1153 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1154 
fûe
[
i
].
«me
.
d©a
);

1161 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

1162 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1163 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1164 
fûe
[
i
].
«me
.
d©a
);

1167 
fûe
[
i
].
fd
 = fd;

1170 (Ë
	`ngx_log_ªdúe˘_°dîr
(
cy˛e
);

1171 
	}
}

1174 
ngx_shm_z⁄e_t
 *

1175 
	$ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
size_t
 
size
, *
èg
)

1177 
ngx_uöt_t
 
i
;

1178 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1179 
ngx_li°_∑π_t
 *
∑π
;

1181 
∑π
 = &
cf
->
cy˛e
->
sh¨ed_mem‹y
.part;

1182 
shm_z⁄e
 = 
∑π
->
ñts
;

1184 
i
 = 0; ; i++) {

1186 i‡(
i
 >
∑π
->
√…s
) {

1187 i‡(
∑π
->
√xt
 =
NULL
) {

1190 
∑π
 =Ö¨t->
√xt
;

1191 
shm_z⁄e
 = 
∑π
->
ñts
;

1192 
i
 = 0;

1195 i‡(
«me
->
Àn
 !
shm_z⁄e
[
i
].
shm
.name.len) {

1199 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
shm_z⁄e
[
i
].
shm
.«me.d©a,Çame->
Àn
)

1205 i‡(
èg
 !
shm_z⁄e
[
i
].tag) {

1206 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1209 &
shm_z⁄e
[
i
].
shm
.
«me
);

1210  
NULL
;

1213 i‡(
size
 && sizê!
shm_z⁄e
[
i
].
shm
.size) {

1214 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1217 
size
, &
shm_z⁄e
[
i
].
shm
.
«me
, shm_zone[i].shm.size);

1218  
NULL
;

1221  &
shm_z⁄e
[
i
];

1224 
shm_z⁄e
 = 
	`ngx_li°_push
(&
cf
->
cy˛e
->
sh¨ed_mem‹y
);

1226 i‡(
shm_z⁄e
 =
NULL
) {

1227  
NULL
;

1230 
shm_z⁄e
->
d©a
 = 
NULL
;

1231 
shm_z⁄e
->
shm
.
log
 = 
cf
->
cy˛e
->log;

1232 
shm_z⁄e
->
shm
.
size
 = size;

1233 
shm_z⁄e
->
shm
.
«me
 = *name;

1234 
shm_z⁄e
->
shm
.
exi°s
 = 0;

1235 
shm_z⁄e
->
öô
 = 
NULL
;

1236 
shm_z⁄e
->
èg
 =Åag;

1238  
shm_z⁄e
;

1239 
	}
}

1243 
	$ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
)

1245 
ngx_uöt_t
 
i
, 
n
, 
found
, 
live
;

1246 
ngx_log_t
 *
log
;

1247 
ngx_cy˛e_t
 **
cy˛e
;

1249 
log
 = 
ngx_cy˛e
->log;

1250 
ngx_ãmp_poﬁ
->
log
 =Üog;

1252 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "clean old cycles");

1254 
live
 = 0;

1256 
cy˛e
 = 
ngx_ﬁd_cy˛es
.
ñts
;

1257 
i
 = 0; i < 
ngx_ﬁd_cy˛es
.
√…s
; i++) {

1259 i‡(
cy˛e
[
i
] =
NULL
) {

1263 
found
 = 0;

1265 
n
 = 0;Ç < 
cy˛e
[
i
]->
c⁄√˘i⁄_n
;Ç++) {

1266 i‡(
cy˛e
[
i
]->
c⁄√˘i⁄s
[
n
].
fd
 !(
ngx_sockë_t
) -1) {

1267 
found
 = 1;

1269 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "livêfd:%d", 
n
);

1275 i‡(
found
) {

1276 
live
 = 1;

1280 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "˛ó¿ﬁd cy˛e: %d", 
i
);

1282 
	`ngx_de°roy_poﬁ
(
cy˛e
[
i
]->
poﬁ
);

1283 
cy˛e
[
i
] = 
NULL
;

1286 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "ﬁd cy˛e†°©us: %d", 
live
);

1288 i‡(
live
) {

1289 
	`ngx_add_timî
(
ev
, 30000);

1292 
	`ngx_de°roy_poﬁ
(
ngx_ãmp_poﬁ
);

1293 
ngx_ãmp_poﬁ
 = 
NULL
;

1294 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

1296 
	}
}

	@src/core/ngx_cycle.h

8 #i‚de‡
_NGX_CYCLE_H_INCLUDED_


9 
	#_NGX_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‚de‡
NGX_CYCLE_POOL_SIZE


17 
	#NGX_CYCLE_POOL_SIZE
 
NGX_DEFAULT_POOL_SIZE


	)

21 
	#NGX_DEBUG_POINTS_STOP
 1

	)

22 
	#NGX_DEBUG_POINTS_ABORT
 2

	)

25 
ngx_shm_z⁄e_s
 
	tngx_shm_z⁄e_t
;

27 
	$ngx_öt_t
 (*
	tngx_shm_z⁄e_öô_±
Ë(
	tngx_shm_z⁄e_t
 *
	tz⁄e
, *
	td©a
);

29 
	sngx_shm_z⁄e_s
 {

30 *
d©a
;

31 
ngx_shm_t
 
shm
;

32 
ngx_shm_z⁄e_öô_±
 
öô
;

33 *
èg
;

37 
	sngx_cy˛e_s
 {

38 ****
c⁄f_˘x
;

39 
ngx_poﬁ_t
 *
poﬁ
;

41 
ngx_log_t
 *
log
;

42 
ngx_log_t
 
√w_log
;

44 
ngx_uöt_t
 
log_u£_°dîr
;

46 
ngx_c⁄√˘i⁄_t
 **
fûes
;

47 
ngx_c⁄√˘i⁄_t
 *
‰ì_c⁄√˘i⁄s
;

48 
ngx_uöt_t
 
‰ì_c⁄√˘i⁄_n
;

50 
ngx_queue_t
 
ªußbÀ_c⁄√˘i⁄s_queue
;

52 
ngx_¨øy_t
 
li°íög
;

53 
ngx_¨øy_t
 
∑ths
;

54 
ngx_li°_t
 
›í_fûes
;

55 
ngx_li°_t
 
sh¨ed_mem‹y
;

57 
ngx_uöt_t
 
c⁄√˘i⁄_n
;

58 
ngx_uöt_t
 
fûes_n
;

60 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄s
;

61 
ngx_evít_t
 *
ªad_evíts
;

62 
ngx_evít_t
 *
wrôe_evíts
;

64 
ngx_cy˛e_t
 *
ﬁd_cy˛e
;

66 
ngx_°r_t
 
c⁄f_fûe
;

67 
ngx_°r_t
 
c⁄f_∑øm
;

68 
ngx_°r_t
 
c⁄f_¥efix
;

69 
ngx_°r_t
 
¥efix
;

70 
ngx_°r_t
 
lock_fûe
;

71 
ngx_°r_t
 
ho°«me
;

76 
ngx_Êag_t
 
d´m⁄
;

77 
ngx_Êag_t
 
ma°î
;

79 
ngx_m£c_t
 
timî_ªsﬁuti⁄
;

81 
ngx_öt_t
 
w‹kî_¥o˚s£s
;

82 
ngx_öt_t
 
debug_poöts
;

84 
ngx_öt_t
 
æimô_nofûe
;

85 
ngx_öt_t
 
æimô_sig≥ndög
;

86 
off_t
 
æimô_c‹e
;

88 
¥i‹ôy
;

90 
ngx_uöt_t
 
˝u_afföôy_n
;

91 
uöt64_t
 *
˝u_afföôy
;

93 *
u£∫ame
;

94 
ngx_uid_t
 
u£r
;

95 
ngx_gid_t
 
group
;

97 
ngx_°r_t
 
w‹kög_dúe˘‹y
;

98 
ngx_°r_t
 
lock_fûe
;

100 
ngx_°r_t
 
pid
;

101 
ngx_°r_t
 
ﬁdpid
;

103 
ngx_¨øy_t
 
ív
;

104 **
ívú⁄mít
;

106 #i‡(
NGX_OLD_THREADS
)

107 
ngx_öt_t
 
w‹kî_thªads
;

108 
size_t
 
thªad_°ack_size
;

111 } 
	tngx_c‹e_c⁄f_t
;

114 #i‡(
NGX_OLD_THREADS
)

117 
ngx_poﬁ_t
 *
poﬁ
;

118 } 
	tngx_c‹e_és_t
;

123 
	#ngx_is_öô_cy˛e
(
cy˛e
Ë(cy˛e->
c⁄f_˘x
 =
NULL
)

	)

126 
ngx_cy˛e_t
 *
	`ngx_öô_cy˛e
“gx_cy˛e_à*
ﬁd_cy˛e
);

127 
ngx_öt_t
 
	`ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
);

128 
	`ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
);

129 
ngx_öt_t
 
	`ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
);

130 
	`ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

131 **
	`ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
);

132 
ngx_pid_t
 
	`ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
);

133 
uöt64_t
 
	`ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
);

134 
ngx_shm_z⁄e_t
 *
	`ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

135 
size_t
 
size
, *
èg
);

138 vﬁ©ûê
ngx_cy˛e_t
 *
ngx_cy˛e
;

139 
ngx_¨øy_t
 
ngx_ﬁd_cy˛es
;

140 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

141 
ngx_uöt_t
 
ngx_ã°_c⁄fig
;

142 
ngx_uöt_t
 
ngx_quõt_mode
;

143 #i‡(
NGX_OLD_THREADS
)

144 
ngx_és_key_t
 
ngx_c‹e_és_key
;

	@src/core/ngx_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
ngx_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
);

15 
ngx_©omic_t
 
	gãmp_numbî
 = 0;

16 
ngx_©omic_t
 *
	gngx_ãmp_numbî
 = &
ãmp_numbî
;

17 
ngx_©omic_öt_t
 
	gngx_øndom_numbî
 = 123456;

20 
ngx_öt_t


21 
	$ngx_gë_fuŒ_«me
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
¥efix
,Çgx_°r_à*
«me
)

23 
size_t
 
Àn
;

24 
u_ch¨
 *
p
, *
n
;

25 
ngx_öt_t
 
rc
;

27 
rc
 = 
	`ngx_ã°_fuŒ_«me
(
«me
);

29 i‡(
rc
 =
NGX_OK
) {

30  
rc
;

33 
Àn
 = 
¥efix
->len;

35 #i‡(
NGX_WIN32
)

37 i‡(
rc
 == 2) {

38 
Àn
 = 
rc
;

43 
n
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
 + 
«me
->len + 1);

44 i‡(
n
 =
NULL
) {

45  
NGX_ERROR
;

48 
p
 = 
	`ngx_˝ymem
(
n
, 
¥efix
->
d©a
, 
Àn
);

49 
	`ngx_˝y°∫
(
p
, 
«me
->
d©a
,Çame->
Àn
 + 1);

51 
«me
->
Àn
 +=Üen;

52 
«me
->
d©a
 = 
n
;

54  
NGX_OK
;

55 
	}
}

58 
ngx_öt_t


59 
	$ngx_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
)

61 #i‡(
NGX_WIN32
)

62 
u_ch¨
 
c0
, 
c1
;

64 
c0
 = 
«me
->
d©a
[0];

66 i‡(
«me
->
Àn
 < 2) {

67 i‡(
c0
 == '/') {

71  
NGX_DECLINED
;

74 
c1
 = 
«me
->
d©a
[1];

76 i‡(
c1
 == ':') {

77 
c0
 |= 0x20;

79 i‡((
c0
 >= 'a' && c0 <= 'z')) {

80  
NGX_OK
;

83  
NGX_DECLINED
;

86 i‡(
c1
 == '/') {

87  
NGX_OK
;

90 i‡(
c0
 == '/') {

94  
NGX_DECLINED
;

98 i‡(
«me
->
d©a
[0] == '/') {

99  
NGX_OK
;

102  
NGX_DECLINED
;

105 
	}
}

108 
ssize_t


109 
	$ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
)

111 
ngx_öt_t
 
rc
;

113 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

114 
rc
 = 
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

115 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
);

117 i‡(
rc
 !
NGX_OK
) {

118  
rc
;

121 i‡(
tf
->
log_Àvñ
) {

122 
	`ngx_log_îr‹
(
tf
->
log_Àvñ
,Åf->
fûe
.
log
, 0, "%s %V",

123 
tf
->
w¨n
, &tf->
fûe
.
«me
);

127  
	`ngx_wrôe_chaö_to_fûe
(&
tf
->
fûe
, 
chaö
,Åf->
off£t
,Åf->
poﬁ
);

128 
	}
}

131 
ngx_öt_t


132 
	$ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
, 
ngx_poﬁ_t
 *
poﬁ
,

133 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,Çgx_uöt_à
ac˚ss
)

135 
uöt32_t
 
n
;

136 
ngx_îr_t
 
îr
;

137 
ngx_poﬁ_˛ónup_t
 *
˛n
;

138 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

140 
fûe
->
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len + 10;

142 
fûe
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, fûe->«me.
Àn
 + 1);

143 i‡(
fûe
->
«me
.
d©a
 =
NULL
) {

144  
NGX_ERROR
;

148 
i
 = 0; i < 
fûe
->
«me
.
Àn
; i++) {

149 
fûe
->
«me
.
d©a
[
i
] = 'X';

153 
	`ngx_mem˝y
(
fûe
->
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

155 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0);

157 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

158 i‡(
˛n
 =
NULL
) {

159  
NGX_ERROR
;

163 (Ë
	`ngx_•rötf
(
fûe
->
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len,

164 "%010uD%Z", 
n
);

166 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
fûe
->
«me
.
d©a
, fûe->«me.
Àn
);

168 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

169 "hashedÖ©h: %s", 
fûe
->
«me
.
d©a
);

171 
fûe
->
fd
 = 
	`ngx_›í_ãmpfûe
(fûe->
«me
.
d©a
, 
≥rsi°ít
, 
ac˚ss
);

173 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

174 "ãm∞fd:%d", 
fûe
->
fd
);

176 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

178 
˛n
->
h™dÀr
 = 
˛ón
 ? 
ngx_poﬁ_dñëe_fûe
 : 
ngx_poﬁ_˛ónup_fûe
;

179 
˛nf
 = 
˛n
->
d©a
;

181 
˛nf
->
fd
 = 
fûe
->fd;

182 
˛nf
->
«me
 = 
fûe
->«me.
d©a
;

183 
˛nf
->
log
 = 
poﬁ
->log;

185  
NGX_OK
;

188 
îr
 = 
ngx_î∫o
;

190 i‡(
îr
 =
NGX_EEXIST
) {

191 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(1);

195 i‡((
∑th
->
Àvñ
[0] =0Ë|| (
îr
 !
NGX_ENOPATH
)) {

196 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

197 
ngx_›í_ãmpfûe_n
 " \"%s\" failed",

198 
fûe
->
«me
.
d©a
);

199  
NGX_ERROR
;

202 i‡(
	`ngx_¸óã_∑th
(
fûe
, 
∑th
Ë=
NGX_ERROR
) {

203  
NGX_ERROR
;

206 
	}
}

210 
	$ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
)

212 
size_t
 
i
, 
Àvñ
;

213 
ngx_uöt_t
 
n
;

215 
i
 = 
∑th
->
«me
.
Àn
 + 1;

217 
fûe
[
∑th
->
«me
.
Àn
 +Öath->len] = '/';

219 
n
 = 0;Ç < 3;Ç++) {

220 
Àvñ
 = 
∑th
->Àvñ[
n
];

222 i‡(
Àvñ
 == 0) {

226 
Àn
 -
Àvñ
;

227 
fûe
[
i
 - 1] = '/';

228 
	`ngx_mem˝y
(&
fûe
[
i
], &fûe[
Àn
], 
Àvñ
);

229 
i
 +
Àvñ
 + 1;

231 
	}
}

234 
ngx_öt_t


235 
	$ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
)

237 
size_t
 
pos
;

238 
ngx_îr_t
 
îr
;

239 
ngx_uöt_t
 
i
;

241 
pos
 = 
∑th
->
«me
.
Àn
;

243 
i
 = 0; i < 3; i++) {

244 i‡(
∑th
->
Àvñ
[
i
] == 0) {

248 
pos
 +
∑th
->
Àvñ
[
i
] + 1;

250 
fûe
->
«me
.
d©a
[
pos
] = '\0';

252 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

253 "ãm∞fûe: \"%s\"", 
fûe
->
«me
.
d©a
);

255 i‡(
	`ngx_¸óã_dú
(
fûe
->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

256 
îr
 = 
ngx_î∫o
;

257 i‡(
îr
 !
NGX_EEXIST
) {

258 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

259 
ngx_¸óã_dú_n
 " \"%s\" failed",

260 
fûe
->
«me
.
d©a
);

261  
NGX_ERROR
;

265 
fûe
->
«me
.
d©a
[
pos
] = '/';

268  
NGX_OK
;

269 
	}
}

272 
ngx_îr_t


273 
	$ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
)

275 
u_ch¨
 *
p
, 
ch
;

276 
ngx_îr_t
 
îr
;

278 
îr
 = 0;

280 #i‡(
NGX_WIN32
)

281 
p
 = 
dú
 + 3;

283 
p
 = 
dú
 + 1;

286  ; *
p
;Ö++) {

287 
ch
 = *
p
;

289 i‡(
ch
 != '/') {

293 *
p
 = '\0';

295 i‡(
	`ngx_¸óã_dú
(
dú
, 
ac˚ss
Ë=
NGX_FILE_ERROR
) {

296 
îr
 = 
ngx_î∫o
;

298 
îr
) {

299 
NGX_EEXIST
:

300 
îr
 = 0;

301 
NGX_EACCES
:

305  
îr
;

309 *
p
 = '/';

312  
îr
;

313 
	}
}

316 
ngx_©omic_uöt_t


317 
	$ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
)

319 
ngx_©omic_uöt_t
 
n
, 
add
;

321 
add
 = 
cﬁlisi⁄
 ? 
ngx_øndom_numbî
 : 1;

323 
n
 = 
	`ngx_©omic_„tch_add
(
ngx_ãmp_numbî
, 
add
);

325  
n
 + 
add
;

326 
	}
}

330 
	$ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

332 *
p
 = 
c⁄f
;

334 
ssize_t
 
Àvñ
;

335 
ngx_°r_t
 *
vÆue
;

336 
ngx_uöt_t
 
i
, 
n
;

337 
ngx_∑th_t
 *
∑th
, **
¶Ÿ
;

339 
¶Ÿ
 = (
ngx_∑th_t
 **Ë(
p
 + 
cmd
->
off£t
);

341 i‡(*
¶Ÿ
) {

345 
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

346 i‡(
∑th
 =
NULL
) {

347  
NGX_CONF_ERROR
;

350 
vÆue
 = 
cf
->
¨gs
->
ñts
;

352 
∑th
->
«me
 = 
vÆue
[1];

354 i‡(
∑th
->
«me
.
d©a
[∑th->«me.
Àn
 - 1] == '/') {

355 
∑th
->
«me
.
Àn
--;

358 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
∑th
->
«me
, 0Ë!
NGX_OK
) {

359  
NGX_CONF_ERROR
;

362 
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

363 
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

365 
i
 = 0, 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
; i++,Ç++) {

366 
Àvñ
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
, vÆue[n].
Àn
);

367 i‡(
Àvñ
 =
NGX_ERROR
 ||Üevel == 0) {

371 
∑th
->
Àvñ
[
i
] =Üevel;

372 
∑th
->
Àn
 +
Àvñ
 + 1;

375 i‡(
∑th
->
Àn
 > 10 + 
i
) {

379 *
¶Ÿ
 = 
∑th
;

381 i‡(
	`ngx_add_∑th
(
cf
, 
¶Ÿ
Ë=
NGX_ERROR
) {

382  
NGX_CONF_ERROR
;

385  
NGX_CONF_OK
;

386 
	}
}

390 
	$ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,Çgx_∑th_à*
¥ev
,

391 
ngx_∑th_öô_t
 *
öô
)

393 i‡(*
∑th
) {

394  
NGX_CONF_OK
;

397 i‡(
¥ev
) {

398 *
∑th
 = 
¥ev
;

399  
NGX_CONF_OK
;

402 *
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

403 i‡(*
∑th
 =
NULL
) {

404  
NGX_CONF_ERROR
;

407 (*
∑th
)->
«me
 = 
öô
->name;

409 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &(*
∑th
)->
«me
, 0Ë!
NGX_OK
) {

410  
NGX_CONF_ERROR
;

413 (*
∑th
)->
Àvñ
[0] = 
öô
->level[0];

414 (*
∑th
)->
Àvñ
[1] = 
öô
->level[1];

415 (*
∑th
)->
Àvñ
[2] = 
öô
->level[2];

417 (*
∑th
)->
Àn
 = 
öô
->
Àvñ
[0] + (init->level[0] ? 1 : 0)

418 + 
öô
->
Àvñ
[1] + (init->level[1] ? 1 : 0)

419 + 
öô
->
Àvñ
[2] + (init->level[2] ? 1 : 0);

421 i‡(
	`ngx_add_∑th
(
cf
, 
∑th
Ë!
NGX_OK
) {

422  
NGX_CONF_ERROR
;

425  
NGX_CONF_OK
;

426 
	}
}

430 
	$ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

432 *
c⁄Â
 = 
c⁄f
;

434 
u_ch¨
 *
p
;

435 
ngx_°r_t
 *
vÆue
;

436 
ngx_uöt_t
 
i
, 
right
, 
shi·
, *
ac˚ss
;

438 
ac˚ss
 = (
ngx_uöt_t
 *Ë(
c⁄Â
 + 
cmd
->
off£t
);

440 i‡(*
ac˚ss
 !
NGX_CONF_UNSET_UINT
) {

444 
vÆue
 = 
cf
->
¨gs
->
ñts
;

446 *
ac˚ss
 = 0600;

448 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

450 
p
 = 
vÆue
[
i
].
d©a
;

452 i‡(
	`ngx_°∫cmp
(
p
, "user:", ("user:") - 1) == 0) {

453 
shi·
 = 6;

454 
p
 += ("user:") - 1;

456 } i‡(
	`ngx_°∫cmp
(
p
, "group:", ("group:") - 1) == 0) {

457 
shi·
 = 3;

458 
p
 += ("group:") - 1;

460 } i‡(
	`ngx_°∫cmp
(
p
, "all:", ("all:") - 1) == 0) {

461 
shi·
 = 0;

462 
p
 += ("all:") - 1;

465 
övÆid
;

468 i‡(
	`ngx_°rcmp
(
p
, "rw") == 0) {

469 
right
 = 6;

471 } i‡(
	`ngx_°rcmp
(
p
, "r") == 0) {

472 
right
 = 4;

475 
övÆid
;

478 *
ac˚ss
 |
right
 << 
shi·
;

481  
NGX_CONF_OK
;

483 
övÆid
:

485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

487  
NGX_CONF_ERROR
;

488 
	}
}

491 
ngx_öt_t


492 
	$ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
)

494 
ngx_uöt_t
 
i
, 
n
;

495 
ngx_∑th_t
 *
∑th
, **
p
;

497 
∑th
 = *
¶Ÿ
;

499 
p
 = 
cf
->
cy˛e
->
∑ths
.
ñts
;

500 
i
 = 0; i < 
cf
->
cy˛e
->
∑ths
.
√…s
; i++) {

501 i‡(
p
[
i
]->
«me
.
Àn
 =
∑th
->name.len

502 && 
	`ngx_°rcmp
(
p
[
i
]->
«me
.
d©a
, 
∑th
->name.data) == 0)

504 i‡(
p
[
i
]->
d©a
 !
∑th
->data) {

505 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

508 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

509  
NGX_ERROR
;

512 
n
 = 0;Ç < 3;Ç++) {

513 i‡(
p
[
i
]->
Àvñ
[
n
] !
∑th
->level[n]) {

514 i‡(
∑th
->
c⁄f_fûe
 =
NULL
) {

515 i‡(
p
[
i
]->
c⁄f_fûe
 =
NULL
) {

516 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

521 &
p
[
i
]->
«me
);

522  
NGX_ERROR
;

525 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

530 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

531  
NGX_ERROR
;

534 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

537 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

538  
NGX_ERROR
;

541 i‡(
p
[
i
]->
Àvñ
[
n
] == 0) {

546 *
¶Ÿ
 = 
p
[
i
];

548  
NGX_OK
;

552 
p
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
∑ths
);

553 i‡(
p
 =
NULL
) {

554  
NGX_ERROR
;

557 *
p
 = 
∑th
;

559  
NGX_OK
;

560 
	}
}

563 
ngx_öt_t


564 
	$ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

566 
ngx_îr_t
 
îr
;

567 
ngx_uöt_t
 
i
;

568 
ngx_∑th_t
 **
∑th
;

570 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

571 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

573 i‡(
	`ngx_¸óã_dú
(
∑th
[
i
]->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

574 
îr
 = 
ngx_î∫o
;

575 i‡(
îr
 !
NGX_EEXIST
) {

576 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
îr
,

577 
ngx_¸óã_dú_n
 " \"%s\" failed",

578 
∑th
[
i
]->
«me
.
d©a
);

579  
NGX_ERROR
;

583 i‡(
u£r
 =(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

587 #i‡!(
NGX_WIN32
)

589 
ngx_fûe_öfo_t
 
fi
;

591 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, &
fi
)

592 =
NGX_FILE_ERROR
)

594 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

595 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

596  
NGX_ERROR
;

599 i‡(
fi
.
°_uid
 !
u£r
) {

600 i‡(
	`chown
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
u£r
, -1) == -1) {

601 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

603 
∑th
[
i
]->
«me
.
d©a
, 
u£r
);

604  
NGX_ERROR
;

608 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

609 !(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

611 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
);

613 i‡(
	`chmod
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

614 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

615 "chmod(Ë\"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

616  
NGX_ERROR
;

623  
NGX_OK
;

624 
	}
}

627 
ngx_öt_t


628 
	$ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
, 
ngx_ext_ª«me_fûe_t
 *
ext
)

630 
u_ch¨
 *
«me
;

631 
ngx_îr_t
 
îr
;

632 
ngx_c›y_fûe_t
 
cf
;

634 #i‡!(
NGX_WIN32
)

636 i‡(
ext
->
ac˚ss
) {

637 i‡(
	`ngx_ch™ge_fûe_ac˚ss
(
§c
->
d©a
, 
ext
->
ac˚ss
Ë=
NGX_FILE_ERROR
) {

638 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

639 
ngx_ch™ge_fûe_ac˚ss_n
 " \"%s\" faûed", 
§c
->
d©a
);

640 
îr
 = 0;

641 
Áûed
;

647 i‡(
ext
->
time
 != -1) {

648 i‡(
	`ngx_£t_fûe_time
(
§c
->
d©a
, 
ext
->
fd
,Éxt->
time
Ë!
NGX_OK
) {

649 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

650 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
§c
->
d©a
);

651 
îr
 = 0;

652 
Áûed
;

656 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

657  
NGX_OK
;

660 
îr
 = 
ngx_î∫o
;

662 i‡(
îr
 =
NGX_ENOPATH
) {

664 i‡(!
ext
->
¸óã_∑th
) {

665 
Áûed
;

668 
îr
 = 
	`ngx_¸óã_fuŒ_∑th
(
to
->
d©a
, 
	`ngx_dú_ac˚ss
(
ext
->
∑th_ac˚ss
));

670 i‡(
îr
) {

671 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

672 
ngx_¸óã_dú_n
 " \"%s\" faûed", 
to
->
d©a
);

673 
îr
 = 0;

674 
Áûed
;

677 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

678  
NGX_OK
;

681 
îr
 = 
ngx_î∫o
;

684 #i‡(
NGX_WIN32
)

686 i‡(
îr
 =
NGX_EEXIST
) {

687 
îr
 = 
	`ngx_wö32_ª«me_fûe
(
§c
, 
to
, 
ext
->
log
);

689 i‡(
îr
 == 0) {

690  
NGX_OK
;

696 i‡(
îr
 =
NGX_EXDEV
) {

698 
cf
.
size
 = -1;

699 
cf
.
buf_size
 = 0;

700 
cf
.
ac˚ss
 = 
ext
->access;

701 
cf
.
time
 = 
ext
->time;

702 
cf
.
log
 = 
ext
->log;

704 
«me
 = 
	`ngx_Æloc
(
to
->
Àn
 + 1 + 10 + 1, 
ext
->
log
);

705 i‡(
«me
 =
NULL
) {

706  
NGX_ERROR
;

709 (Ë
	`ngx_•rötf
(
«me
, "%*s.%010uD%Z", 
to
->
Àn
,Åo->
d©a
,

710 (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0));

712 i‡(
	`ngx_c›y_fûe
(
§c
->
d©a
, 
«me
, &
cf
Ë=
NGX_OK
) {

714 i‡(
	`ngx_ª«me_fûe
(
«me
, 
to
->
d©a
Ë!
NGX_FILE_ERROR
) {

715 
	`ngx_‰ì
(
«me
);

717 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

718 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

719 
ngx_dñëe_fûe_n
 " \"%s\" failed",

720 
§c
->
d©a
);

721  
NGX_ERROR
;

724  
NGX_OK
;

727 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

728 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

729 
«me
, 
to
->
d©a
);

731 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

732 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

733 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

738 
	`ngx_‰ì
(
«me
);

740 
îr
 = 0;

743 
Áûed
:

745 i‡(
ext
->
dñëe_fûe
) {

746 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

747 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

748 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
§c
->
d©a
);

752 i‡(
îr
) {

753 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

754 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

755 
§c
->
d©a
, 
to
->data);

758  
NGX_ERROR
;

759 
	}
}

762 
ngx_öt_t


763 
	$ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
)

765 *
buf
;

766 
off_t
 
size
;

767 
size_t
 
Àn
;

768 
ssize_t
 
n
;

769 
ngx_fd_t
 
fd
, 
nfd
;

770 
ngx_öt_t
 
rc
;

771 
ngx_fûe_öfo_t
 
fi
;

773 
rc
 = 
NGX_ERROR
;

774 
buf
 = 
NULL
;

775 
nfd
 = 
NGX_INVALID_FILE
;

777 
fd
 = 
	`ngx_›í_fûe
(
‰om
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

779 i‡(
fd
 =
NGX_INVALID_FILE
) {

780 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

781 
ngx_›í_fûe_n
 " \"%s\" faûed", 
‰om
);

782 
Áûed
;

785 i‡(
cf
->
size
 != -1) {

786 
size
 = 
cf
->size;

789 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

790 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

791 
ngx_fd_öfo_n
 " \"%s\" faûed", 
‰om
);

793 
Áûed
;

796 
size
 = 
	`ngx_fûe_size
(&
fi
);

799 
Àn
 = 
cf
->
buf_size
 ? cf->buf_size : 65536;

801 i‡((
off_t
Ë
Àn
 > 
size
) {

802 
Àn
 = (
size_t
Ë
size
;

805 
buf
 = 
	`ngx_Æloc
(
Àn
, 
cf
->
log
);

806 i‡(
buf
 =
NULL
) {

807 
Áûed
;

810 
nfd
 = 
	`ngx_›í_fûe
(
to
, 
NGX_FILE_WRONLY
, 
NGX_FILE_CREATE_OR_OPEN
,

811 
cf
->
ac˚ss
);

813 i‡(
nfd
 =
NGX_INVALID_FILE
) {

814 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

815 
ngx_›í_fûe_n
 " \"%s\" faûed", 
to
);

816 
Áûed
;

819 
size
 > 0) {

821 i‡((
off_t
Ë
Àn
 > 
size
) {

822 
Àn
 = (
size_t
Ë
size
;

825 
n
 = 
	`ngx_ªad_fd
(
fd
, 
buf
, 
Àn
);

827 i‡(
n
 == -1) {

828 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

829 
ngx_ªad_fd_n
 " \"%s\" faûed", 
‰om
);

830 
Áûed
;

833 i‡((
size_t
Ë
n
 !
Àn
) {

834 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

835 
ngx_ªad_fd_n
 " hasÑead only %z of %uz from %s",

836 
n
, 
size
, 
‰om
);

837 
Áûed
;

840 
n
 = 
	`ngx_wrôe_fd
(
nfd
, 
buf
, 
Àn
);

842 i‡(
n
 == -1) {

843 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

844 
ngx_wrôe_fd_n
 " \"%s\" faûed", 
to
);

845 
Áûed
;

848 i‡((
size_t
Ë
n
 !
Àn
) {

849 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

850 
ngx_wrôe_fd_n
 " has written only %z of %uzÅo %s",

851 
n
, 
size
, 
to
);

852 
Áûed
;

855 
size
 -
n
;

858 i‡(
cf
->
time
 != -1) {

859 i‡(
	`ngx_£t_fûe_time
(
to
, 
nfd
, 
cf
->
time
Ë!
NGX_OK
) {

860 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

861 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
to
);

862 
Áûed
;

866 
rc
 = 
NGX_OK
;

868 
Áûed
:

870 i‡(
nfd
 !
NGX_INVALID_FILE
) {

871 i‡(
	`ngx_˛o£_fûe
(
nfd
Ë=
NGX_FILE_ERROR
) {

872 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

873 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
to
);

877 i‡(
fd
 !
NGX_INVALID_FILE
) {

878 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

879 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

880 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
‰om
);

884 i‡(
buf
) {

885 
	`ngx_‰ì
(
buf
);

888  
rc
;

889 
	}
}

910 
ngx_öt_t


911 
	$ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
)

913 *
d©a
, *
¥ev
;

914 
u_ch¨
 *
p
, *
«me
;

915 
size_t
 
Àn
;

916 
ngx_öt_t
 
rc
;

917 
ngx_îr_t
 
îr
;

918 
ngx_°r_t
 
fûe
, 
buf
;

919 
ngx_dú_t
 
dú
;

921 
	`ngx_°r_nuŒ
(&
buf
);

923 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

924 "wÆkÅªê\"%V\"", 
åì
);

926 i‡(
	`ngx_›í_dú
(
åì
, &
dú
Ë=
NGX_ERROR
) {

927 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

928 
ngx_›í_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

929  
NGX_ERROR
;

932 
¥ev
 = 
˘x
->
d©a
;

934 i‡(
˘x
->
Æloc
) {

935 
d©a
 = 
	`ngx_Æloc
(
˘x
->
Æloc
, ctx->
log
);

936 i‡(
d©a
 =
NULL
) {

937 
Áûed
;

940 i‡(
˘x
->
	`öô_h™dÀr
(
d©a
, 
¥ev
Ë=
NGX_ABORT
) {

941 
Áûed
;

944 
˘x
->
d©a
 = data;

947 
d©a
 = 
NULL
;

952 
	`ngx_£t_î∫o
(0);

954 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

955 
îr
 = 
ngx_î∫o
;

957 i‡(
îr
 =
NGX_ENOMOREFILES
) {

958 
rc
 = 
NGX_OK
;

961 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
îr
,

962 
ngx_ªad_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

963 
rc
 = 
NGX_ERROR
;

966 
d⁄e
;

969 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

970 
«me
 = 
	`ngx_de_«me
(&
dú
);

972 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

973 "åìÇamê%uz:\"%s\"", 
Àn
, 
«me
);

975 i‡(
Àn
 =1 && 
«me
[0] == '.') {

979 i‡(
Àn
 =2 && 
«me
[0] == '.' &&Çame[1] == '.') {

983 
fûe
.
Àn
 = 
åì
->len + 1 +Üen;

985 i‡(
fûe
.
Àn
 + 
NGX_DIR_MASK_LEN
 > 
buf
.len) {

987 i‡(
buf
.
Àn
) {

988 
	`ngx_‰ì
(
buf
.
d©a
);

991 
buf
.
Àn
 = 
åì
->À¿+ 1 +Üí + 
NGX_DIR_MASK_LEN
;

993 
buf
.
d©a
 = 
	`ngx_Æloc
(buf.
Àn
 + 1, 
˘x
->
log
);

994 i‡(
buf
.
d©a
 =
NULL
) {

995 
Áûed
;

999 
p
 = 
	`ngx_˝ymem
(
buf
.
d©a
, 
åì
->d©a,Åªe->
Àn
);

1000 *
p
++ = '/';

1001 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 + 1);

1003 
fûe
.
d©a
 = 
buf
.data;

1005 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1006 "åìÖ©h \"%s\"", 
fûe
.
d©a
);

1008 i‡(!
dú
.
vÆid_öfo
) {

1009 i‡(
	`ngx_de_öfo
(
fûe
.
d©a
, &
dú
Ë=
NGX_FILE_ERROR
) {

1010 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1011 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûe
.
d©a
);

1016 i‡(
	`ngx_de_is_fûe
(&
dú
)) {

1018 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1019 "åì fûê\"%s\"", 
fûe
.
d©a
);

1021 
˘x
->
size
 = 
	`ngx_de_size
(&
dú
);

1022 
˘x
->
fs_size
 = 
	`ngx_de_fs_size
(&
dú
);

1023 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

1024 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1026 i‡(
˘x
->
	`fûe_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1027 
Áûed
;

1030 } i‡(
	`ngx_de_is_dú
(&
dú
)) {

1032 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1033 "åìÉ¡î dú \"%s\"", 
fûe
.
d©a
);

1035 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

1036 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1038 
rc
 = 
˘x
->
	`¥e_åì_h™dÀr
(˘x, &
fûe
);

1040 i‡(
rc
 =
NGX_ABORT
) {

1041 
Áûed
;

1044 i‡(
rc
 =
NGX_DECLINED
) {

1045 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1046 "åì skù dú \"%s\"", 
fûe
.
d©a
);

1050 i‡(
	`ngx_wÆk_åì
(
˘x
, &
fûe
Ë=
NGX_ABORT
) {

1051 
Áûed
;

1054 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

1055 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

1057 i‡(
˘x
->
	`po°_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1058 
Áûed
;

1063 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

1064 "åì s≥cü»\"%s\"", 
fûe
.
d©a
);

1066 i‡(
˘x
->
	`•ec_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

1067 
Áûed
;

1072 
Áûed
:

1074 
rc
 = 
NGX_ABORT
;

1076 
d⁄e
:

1078 i‡(
buf
.
Àn
) {

1079 
	`ngx_‰ì
(
buf
.
d©a
);

1082 i‡(
d©a
) {

1083 
	`ngx_‰ì
(
d©a
);

1084 
˘x
->
d©a
 = 
¥ev
;

1087 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

1088 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1089 
ngx_˛o£_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

1092  
rc
;

1093 
	}
}

	@src/core/ngx_file.h

8 #i‚de‡
_NGX_FILE_H_INCLUDED_


9 
	#_NGX_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	sngx_fûe_s
 {

17 
ngx_fd_t
 
	mfd
;

18 
ngx_°r_t
 
	m«me
;

19 
ngx_fûe_öfo_t
 
	möfo
;

21 
off_t
 
	moff£t
;

22 
off_t
 
	msys_off£t
;

24 
ngx_log_t
 *
	mlog
;

26 #i‡(
NGX_THREADS
)

27 
ngx_öt_t
 (*
thªad_h™dÀr
)(
ngx_thªad_èsk_t
 *
	mèsk
,

28 
ngx_fûe_t
 *
	mfûe
);

29 *
	mthªad_˘x
;

32 #i‡(
NGX_HAVE_FILE_AIO
)

33 
ngx_evít_aio_t
 *
	maio
;

36 
	mvÆid_öfo
:1;

37 
	mdúe˘io
:1;

41 
	#NGX_MAX_PATH_LEVEL
 3

	)

44 
	$time_t
 (*
	tngx_∑th_m™agî_±
Ë(*
	td©a
);

45 (*
	tngx_∑th_lﬂdî_±
Ë(*
	td©a
);

49 
ngx_°r_t
 
«me
;

50 
size_t
 
Àn
;

51 
size_t
 
Àvñ
[3];

53 
ngx_∑th_m™agî_±
 
m™agî
;

54 
ngx_∑th_lﬂdî_±
 
lﬂdî
;

55 *
d©a
;

57 
u_ch¨
 *
c⁄f_fûe
;

58 
ngx_uöt_t
 
löe
;

59 } 
	tngx_∑th_t
;

63 
ngx_°r_t
 
«me
;

64 
size_t
 
Àvñ
[3];

65 } 
	tngx_∑th_öô_t
;

69 
ngx_fûe_t
 
fûe
;

70 
off_t
 
off£t
;

71 
ngx_∑th_t
 *
∑th
;

72 
ngx_poﬁ_t
 *
poﬁ
;

73 *
w¨n
;

75 
ngx_uöt_t
 
ac˚ss
;

77 
log_Àvñ
:8;

78 
≥rsi°ít
:1;

79 
˛ón
:1;

80 } 
	tngx_ãmp_fûe_t
;

84 
ngx_uöt_t
 
ac˚ss
;

85 
ngx_uöt_t
 
∑th_ac˚ss
;

86 
time_t
 
time
;

87 
ngx_fd_t
 
fd
;

89 
¸óã_∑th
:1;

90 
dñëe_fûe
:1;

92 
ngx_log_t
 *
log
;

93 } 
	tngx_ext_ª«me_fûe_t
;

97 
off_t
 
size
;

98 
size_t
 
buf_size
;

100 
ngx_uöt_t
 
ac˚ss
;

101 
time_t
 
time
;

103 
ngx_log_t
 *
log
;

104 } 
	tngx_c›y_fûe_t
;

107 
ngx_åì_˘x_s
 
	tngx_åì_˘x_t
;

109 
	$ngx_öt_t
 (*
	tngx_åì_öô_h™dÀr_±
Ë(*
	t˘x
, *
	t¥ev
);

110 
	$ngx_öt_t
 (*
	tngx_åì_h™dÀr_±
Ë(
	tngx_åì_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 *
	t«me
);

112 
	sngx_åì_˘x_s
 {

113 
off_t
 
size
;

114 
off_t
 
fs_size
;

115 
ngx_uöt_t
 
ac˚ss
;

116 
time_t
 
mtime
;

118 
ngx_åì_öô_h™dÀr_±
 
öô_h™dÀr
;

119 
ngx_åì_h™dÀr_±
 
fûe_h™dÀr
;

120 
ngx_åì_h™dÀr_±
 
¥e_åì_h™dÀr
;

121 
ngx_åì_h™dÀr_±
 
po°_åì_h™dÀr
;

122 
ngx_åì_h™dÀr_±
 
•ec_h™dÀr
;

124 *
d©a
;

125 
size_t
 
Æloc
;

127 
ngx_log_t
 *
log
;

131 
ngx_öt_t
 
	`ngx_gë_fuŒ_«me
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
¥efix
,

132 
ngx_°r_t
 *
«me
);

134 
ssize_t
 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
);

135 
ngx_öt_t
 
	`ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
,

136 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,

137 
ngx_uöt_t
 
ac˚ss
);

138 
	`ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
);

139 
ngx_öt_t
 
	`ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
);

140 
ngx_îr_t
 
	`ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
);

141 
ngx_öt_t
 
	`ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
);

142 
ngx_öt_t
 
	`ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

143 
ngx_öt_t
 
	`ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
,

144 
ngx_ext_ª«me_fûe_t
 *
ext
);

145 
ngx_öt_t
 
	`ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
);

146 
ngx_öt_t
 
	`ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
);

148 
ngx_©omic_uöt_t
 
	`ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
);

150 *
	`ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

151 *
	`ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,

152 
ngx_∑th_t
 *
¥ev
, 
ngx_∑th_öô_t
 *
öô
);

153 *
	`ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

156 
ngx_©omic_t
 *
ngx_ãmp_numbî
;

157 
ngx_©omic_öt_t
 
ngx_øndom_numbî
;

	@src/core/ngx_hash.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

15 
ngx_uöt_t
 
i
;

16 
ngx_hash_ñt_t
 *
ñt
;

19 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "hf:\"%*s\"", 
Àn
, 
«me
);

22 
ñt
 = 
hash
->
buckës
[
key
 % hash->
size
];

24 i‡(
ñt
 =
NULL
) {

25  
NULL
;

28 
ñt
->
vÆue
) {

29 i‡(
Àn
 !(
size_t
Ë
ñt
->len) {

30 
√xt
;

33 
i
 = 0; i < 
Àn
; i++) {

34 i‡(
«me
[
i
] !
ñt
->name[i]) {

35 
√xt
;

39  
ñt
->
vÆue
;

41 
√xt
:

43 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

48  
NULL
;

49 
	}
}

53 
	$ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

55 *
vÆue
;

56 
ngx_uöt_t
 
i
, 
n
, 
key
;

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "wch:\"%*s\"", 
Àn
, 
«me
);

62 
n
 = 
Àn
;

64 
n
) {

65 i‡(
«me
[
n
 - 1] == '.') {

69 
n
--;

72 
key
 = 0;

74 
i
 = 
n
; i < 
Àn
; i++) {

75 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

79 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

82 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, &
«me
[
n
], 
Àn
 -Ç);

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

88 i‡(
vÆue
) {

101 i‡((
uöçå_t
Ë
vÆue
 & 2) {

103 i‡(
n
 == 0) {

107 i‡((
uöçå_t
Ë
vÆue
 & 1) {

108  
NULL
;

111 
hwc
 = (
ngx_hash_wûdˇrd_t
 *)

112 ((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

113  
hwc
->
vÆue
;

116 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

118 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hwc
, 
«me
, 
n
 - 1);

120 i‡(
vÆue
) {

121  
vÆue
;

124  
hwc
->
vÆue
;

127 i‡((
uöçå_t
Ë
vÆue
 & 1) {

129 i‡(
n
 == 0) {

133  
NULL
;

136  (*Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

139  
vÆue
;

142  
hwc
->
vÆue
;

143 
	}
}

147 
	$ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

149 *
vÆue
;

150 
ngx_uöt_t
 
i
, 
key
;

153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "w˘:\"%*s\"", 
Àn
, 
«me
);

156 
key
 = 0;

158 
i
 = 0; i < 
Àn
; i++) {

159 i‡(
«me
[
i
] == '.') {

163 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

166 i‡(
i
 =
Àn
) {

167  
NULL
;

171 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

174 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, 
«me
, 
i
);

177 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

180 i‡(
vÆue
) {

188 i‡((
uöçå_t
Ë
vÆue
 & 2) {

190 
i
++;

192 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

194 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hwc
, &
«me
[
i
], 
Àn
 - i);

196 i‡(
vÆue
) {

197  
vÆue
;

200  
hwc
->
vÆue
;

203  
vÆue
;

206  
hwc
->
vÆue
;

207 
	}
}

211 
	$ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
,

212 
size_t
 
Àn
)

214 *
vÆue
;

216 i‡(
hash
->hash.
buckës
) {

217 
vÆue
 = 
	`ngx_hash_föd
(&
hash
->hash, 
key
, 
«me
, 
Àn
);

219 i‡(
vÆue
) {

220  
vÆue
;

224 i‡(
Àn
 == 0) {

225  
NULL
;

228 i‡(
hash
->
wc_hód
 && hash->wc_hód->hash.
buckës
) {

229 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hash
->
wc_hód
, 
«me
, 
Àn
);

231 i‡(
vÆue
) {

232  
vÆue
;

236 i‡(
hash
->
wc_èû
 && hash->wc_èû->hash.
buckës
) {

237 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hash
->
wc_èû
, 
«me
, 
Àn
);

239 i‡(
vÆue
) {

240  
vÆue
;

244  
NULL
;

245 
	}
}

248 
	#NGX_HASH_ELT_SIZE
(
«me
) \

249 ((*Ë+ 
	`ngx_Æign
((
«me
)->
key
.
Àn
 + 2, (*)))

	)

251 
ngx_öt_t


252 
	$ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
, 
ngx_uöt_t
 
√…s
)

254 
u_ch¨
 *
ñts
;

255 
size_t
 
Àn
;

256 
u_sh‹t
 *
ã°
;

257 
ngx_uöt_t
 
i
, 
n
, 
key
, 
size
, 
°¨t
, 
buckë_size
;

258 
ngx_hash_ñt_t
 *
ñt
, **
buckës
;

260 
n
 = 0;Ç < 
√…s
;Ç++) {

261 i‡(
höô
->
buckë_size
 < 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]) + (*))

263 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

266 
höô
->
«me
, höô->«me, höô->
buckë_size
);

267  
NGX_ERROR
;

271 
ã°
 = 
	`ngx_Æloc
(
höô
->
max_size
 * (
u_sh‹t
), höô->
poﬁ
->
log
);

272 i‡(
ã°
 =
NULL
) {

273  
NGX_ERROR
;

276 
buckë_size
 = 
höô
->bucket_size - (*);

278 
°¨t
 = 
√…s
 / (
buckë_size
 / (2 * (*)));

279 
°¨t
 = start ? start : 1;

281 i‡(
höô
->
max_size
 > 10000 && 
√…s
 && hinit->max_size /Çelts < 100) {

282 
°¨t
 = 
höô
->
max_size
 - 1000;

285 
size
 = 
°¨t
; sizê<
höô
->
max_size
; size++) {

287 
	`ngx_memzîo
(
ã°
, 
size
 * (
u_sh‹t
));

289 
n
 = 0;Ç < 
√…s
;Ç++) {

290 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

294 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

295 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

298 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

300 
size
, 
key
, 
ã°
[key], &
«mes
[
n
].key);

303 i‡(
ã°
[
key
] > (
u_sh‹t
Ë
buckë_size
) {

304 
√xt
;

308 
found
;

310 
√xt
:

315 
size
 = 
höô
->
max_size
;

317 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
höô
->
poﬁ
->
log
, 0,

321 
höô
->
«me
, höô->«me, höô->
max_size
,

322 
höô
->
«me
, höô->
buckë_size
, hinit->name);

324 
found
:

326 
i
 = 0; i < 
size
; i++) {

327 
ã°
[
i
] = (*);

330 
n
 = 0;Ç < 
√…s
;Ç++) {

331 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

335 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

336 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

339 
Àn
 = 0;

341 
i
 = 0; i < 
size
; i++) {

342 i‡(
ã°
[
i
] == (*)) {

346 
ã°
[
i
] = (
u_sh‹t
Ë(
	`ngx_Æign
—e°[i], 
ngx_ˇchñöe_size
));

348 
Àn
 +
ã°
[
i
];

351 i‡(
höô
->
hash
 =
NULL
) {

352 
höô
->
hash
 = 
	`ngx_pˇŒoc
(höô->
poﬁ
, (
ngx_hash_wûdˇrd_t
)

353 + 
size
 * (
ngx_hash_ñt_t
 *));

354 i‡(
höô
->
hash
 =
NULL
) {

355 
	`ngx_‰ì
(
ã°
);

356  
NGX_ERROR
;

359 
buckës
 = (
ngx_hash_ñt_t
 **)

360 ((
u_ch¨
 *Ë
höô
->
hash
 + (
ngx_hash_wûdˇrd_t
));

363 
buckës
 = 
	`ngx_pˇŒoc
(
höô
->
poﬁ
, 
size
 * (
ngx_hash_ñt_t
 *));

364 i‡(
buckës
 =
NULL
) {

365 
	`ngx_‰ì
(
ã°
);

366  
NGX_ERROR
;

370 
ñts
 = 
	`ngx_∑Œoc
(
höô
->
poﬁ
, 
Àn
 + 
ngx_ˇchñöe_size
);

371 i‡(
ñts
 =
NULL
) {

372 
	`ngx_‰ì
(
ã°
);

373  
NGX_ERROR
;

376 
ñts
 = 
	`ngx_Æign_±r
”…s, 
ngx_ˇchñöe_size
);

378 
i
 = 0; i < 
size
; i++) {

379 i‡(
ã°
[
i
] == (*)) {

383 
buckës
[
i
] = (
ngx_hash_ñt_t
 *Ë
ñts
;

384 
ñts
 +
ã°
[
i
];

388 
i
 = 0; i < 
size
; i++) {

389 
ã°
[
i
] = 0;

392 
n
 = 0;Ç < 
√…s
;Ç++) {

393 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

397 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

398 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
key
] + 
ã°
[key]);

400 
ñt
->
vÆue
 = 
«mes
[
n
].value;

401 
ñt
->
Àn
 = (
u_sh‹t
Ë
«mes
[
n
].
key
.len;

403 
	`ngx_°æow
(
ñt
->
«me
, 
«mes
[
n
].
key
.
d©a
,Çames[n].key.
Àn
);

405 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

408 
i
 = 0; i < 
size
; i++) {

409 i‡(
buckës
[
i
] =
NULL
) {

413 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
i
] + 
ã°
[i]);

415 
ñt
->
vÆue
 = 
NULL
;

418 
	`ngx_‰ì
(
ã°
);

420 
höô
->
hash
->
buckës
 = buckets;

421 
höô
->
hash
->
size
 = size;

425 
i
 = 0; i < 
size
; i++) {

426 
ngx_°r_t
 
vÆ
;

427 
ngx_uöt_t
 
key
;

429 
ñt
 = 
buckës
[
i
];

431 i‡(
ñt
 =
NULL
) {

432 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

433 "%ui: NULL", 
i
);

437 
ñt
->
vÆue
) {

438 
vÆ
.
Àn
 = 
ñt
->len;

439 
vÆ
.
d©a
 = &
ñt
->
«me
[0];

441 
key
 = 
höô
->
	`key
(
vÆ
.
d©a
, vÆ.
Àn
);

443 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

444 "%ui: %∞\"%V\" %ui", 
i
, 
ñt
, &
vÆ
, 
key
);

446 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

453  
NGX_OK
;

454 
	}
}

457 
ngx_öt_t


458 
	$ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

459 
ngx_uöt_t
 
√…s
)

461 
size_t
 
Àn
, 
dŸ_Àn
;

462 
ngx_uöt_t
 
i
, 
n
, 
dŸ
;

463 
ngx_¨øy_t
 
cuº_«mes
, 
√xt_«mes
;

464 
ngx_hash_key_t
 *
«me
, *
√xt_«me
;

465 
ngx_hash_öô_t
 
h
;

466 
ngx_hash_wûdˇrd_t
 *
wdc
;

468 i‡(
	`ngx_¨øy_öô
(&
cuº_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

469 (
ngx_hash_key_t
))

470 !
NGX_OK
)

472  
NGX_ERROR
;

475 i‡(
	`ngx_¨øy_öô
(&
√xt_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

476 (
ngx_hash_key_t
))

477 !
NGX_OK
)

479  
NGX_ERROR
;

482 
n
 = 0;Ç < 
√…s
;Ç = 
i
) {

485 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

486 "wc0: \"%V\"", &
«mes
[
n
].
key
);

489 
dŸ
 = 0;

491 
Àn
 = 0;Üí < 
«mes
[
n
].
key
.len;Üen++) {

492 i‡(
«mes
[
n
].
key
.
d©a
[
Àn
] == '.') {

493 
dŸ
 = 1;

498 
«me
 = 
	`ngx_¨øy_push
(&
cuº_«mes
);

499 i‡(
«me
 =
NULL
) {

500  
NGX_ERROR
;

503 
«me
->
key
.
Àn
 =Üen;

504 
«me
->
key
.
d©a
 = 
«mes
[
n
].key.data;

505 
«me
->
key_hash
 = 
höô
->
	`key
“ame->
key
.
d©a
,Çame->key.
Àn
);

506 
«me
->
vÆue
 = 
«mes
[
n
].value;

509 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

510 "wc1: \"%V\" %ui", &
«me
->
key
, 
dŸ
);

513 
dŸ_Àn
 = 
Àn
 + 1;

515 i‡(
dŸ
) {

516 
Àn
++;

519 
√xt_«mes
.
√…s
 = 0;

521 i‡(
«mes
[
n
].
key
.
Àn
 !=Üen) {

522 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

523 i‡(
√xt_«me
 =
NULL
) {

524  
NGX_ERROR
;

527 
√xt_«me
->
key
.
Àn
 = 
«mes
[
n
].key.len -Üen;

528 
√xt_«me
->
key
.
d©a
 = 
«mes
[
n
].key.d©®+ 
Àn
;

529 
√xt_«me
->
key_hash
 = 0;

530 
√xt_«me
->
vÆue
 = 
«mes
[
n
].value;

533 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

534 "wc2: \"%V\"", &
√xt_«me
->
key
);

538 
i
 = 
n
 + 1; i < 
√…s
; i++) {

539 i‡(
	`ngx_°∫cmp
(
«mes
[
n
].
key
.
d©a
,Çames[
i
].key.d©a, 
Àn
) != 0) {

543 i‡(!
dŸ


544 && 
«mes
[
i
].
key
.
Àn
 >Üen

545 && 
«mes
[
i
].
key
.
d©a
[
Àn
] != '.')

550 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

551 i‡(
√xt_«me
 =
NULL
) {

552  
NGX_ERROR
;

555 
√xt_«me
->
key
.
Àn
 = 
«mes
[
i
].key.À¿- 
dŸ_Àn
;

556 
√xt_«me
->
key
.
d©a
 = 
«mes
[
i
].key.d©®+ 
dŸ_Àn
;

557 
√xt_«me
->
key_hash
 = 0;

558 
√xt_«me
->
vÆue
 = 
«mes
[
i
].value;

561 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

562 "wc3: \"%V\"", &
√xt_«me
->
key
);

566 i‡(
√xt_«mes
.
√…s
) {

568 
h
 = *
höô
;

569 
h
.
hash
 = 
NULL
;

571 i‡(
	`ngx_hash_wûdˇrd_öô
(&
h
, (
ngx_hash_key_t
 *Ë
√xt_«mes
.
ñts
,

572 
√xt_«mes
.
√…s
)

573 !
NGX_OK
)

575  
NGX_ERROR
;

578 
wdc
 = (
ngx_hash_wûdˇrd_t
 *Ë
h
.
hash
;

580 i‡(
«mes
[
n
].
key
.
Àn
 ==Üen) {

581 
wdc
->
vÆue
 = 
«mes
[
n
].value;

584 
«me
->
vÆue
 = (*Ë((
uöçå_t
Ë
wdc
 | (
dŸ
 ? 3 : 2));

586 } i‡(
dŸ
) {

587 
«me
->
vÆue
 = (*Ë((
uöçå_t
)Çame->value | 1);

591 i‡(
	`ngx_hash_öô
(
höô
, (
ngx_hash_key_t
 *Ë
cuº_«mes
.
ñts
,

592 
cuº_«mes
.
√…s
)

593 !
NGX_OK
)

595  
NGX_ERROR
;

598  
NGX_OK
;

599 
	}
}

602 
ngx_uöt_t


603 
	$ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

605 
ngx_uöt_t
 
i
, 
key
;

607 
key
 = 0;

609 
i
 = 0; i < 
Àn
; i++) {

610 
key
 = 
	`ngx_hash
(key, 
d©a
[
i
]);

613  
key
;

614 
	}
}

617 
ngx_uöt_t


618 
	$ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

620 
ngx_uöt_t
 
i
, 
key
;

622 
key
 = 0;

624 
i
 = 0; i < 
Àn
; i++) {

625 
key
 = 
	`ngx_hash
(key, 
	`ngx_tﬁowî
(
d©a
[
i
]));

628  
key
;

629 
	}
}

632 
ngx_uöt_t


633 
	$ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

635 
ngx_uöt_t
 
key
;

637 
key
 = 0;

639 
n
--) {

640 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

641 
key
 = 
	`ngx_hash
(key, *
d°
);

642 
d°
++;

643 
§c
++;

646  
key
;

647 
	}
}

650 
ngx_öt_t


651 
	$ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
)

653 
ngx_uöt_t
 
asize
;

655 i‡(
ty≥
 =
NGX_HASH_SMALL
) {

656 
asize
 = 4;

657 
ha
->
hsize
 = 107;

660 
asize
 = 
NGX_HASH_LARGE_ASIZE
;

661 
ha
->
hsize
 = 
NGX_HASH_LARGE_HSIZE
;

664 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys
, ha->
ãmp_poﬁ
, 
asize
, (
ngx_hash_key_t
))

665 !
NGX_OK
)

667  
NGX_ERROR
;

670 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_hód
, ha->
ãmp_poﬁ
, 
asize
,

671 (
ngx_hash_key_t
))

672 !
NGX_OK
)

674  
NGX_ERROR
;

677 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_èû
, ha->
ãmp_poﬁ
, 
asize
,

678 (
ngx_hash_key_t
))

679 !
NGX_OK
)

681  
NGX_ERROR
;

684 
ha
->
keys_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
, (
ngx_¨øy_t
Ë* ha->
hsize
);

685 i‡(
ha
->
keys_hash
 =
NULL
) {

686  
NGX_ERROR
;

689 
ha
->
dns_wc_hód_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

690 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

691 i‡(
ha
->
dns_wc_hód_hash
 =
NULL
) {

692  
NGX_ERROR
;

695 
ha
->
dns_wc_èû_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

696 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

697 i‡(
ha
->
dns_wc_èû_hash
 =
NULL
) {

698  
NGX_ERROR
;

701  
NGX_OK
;

702 
	}
}

705 
ngx_öt_t


706 
	$ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
, *
vÆue
,

707 
ngx_uöt_t
 
Êags
)

709 
size_t
 
Àn
;

710 
u_ch¨
 *
p
;

711 
ngx_°r_t
 *
«me
;

712 
ngx_uöt_t
 
i
, 
k
, 
n
, 
skù
, 
œ°
;

713 
ngx_¨øy_t
 *
keys
, *
hwc
;

714 
ngx_hash_key_t
 *
hk
;

716 
œ°
 = 
key
->
Àn
;

718 i‡(
Êags
 & 
NGX_HASH_WILDCARD_KEY
) {

725 
n
 = 0;

727 
i
 = 0; i < 
key
->
Àn
; i++) {

729 i‡(
key
->
d©a
[
i
] == '*') {

730 i‡(++
n
 > 1) {

731  
NGX_DECLINED
;

735 i‡(
key
->
d©a
[
i
] == '.' && key->data[i + 1] == '.') {

736  
NGX_DECLINED
;

740 i‡(
key
->
Àn
 > 1 && key->
d©a
[0] == '.') {

741 
skù
 = 1;

742 
wûdˇrd
;

745 i‡(
key
->
Àn
 > 2) {

747 i‡(
key
->
d©a
[0] == '*' && key->data[1] == '.') {

748 
skù
 = 2;

749 
wûdˇrd
;

752 i‡(
key
->
d©a
[
i
 - 2] == '.' && key->data[i - 1] == '*') {

753 
skù
 = 0;

754 
œ°
 -= 2;

755 
wûdˇrd
;

759 i‡(
n
) {

760  
NGX_DECLINED
;

766 
k
 = 0;

768 
i
 = 0; i < 
œ°
; i++) {

769 i‡(!(
Êags
 & 
NGX_HASH_READONLY_KEY
)) {

770 
key
->
d©a
[
i
] = 
	`ngx_tﬁowî
(key->data[i]);

772 
k
 = 
	`ngx_hash
(k, 
key
->
d©a
[
i
]);

775 
k
 %
ha
->
hsize
;

779 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

781 i‡(
«me
) {

782 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

783 i‡(
œ°
 !
«me
[
i
].
Àn
) {

787 i‡(
	`ngx_°∫cmp
(
key
->
d©a
, 
«me
[
i
].d©a, 
œ°
) == 0) {

788  
NGX_BUSY
;

793 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

794 (
ngx_°r_t
))

795 !
NGX_OK
)

797  
NGX_ERROR
;

801 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

802 i‡(
«me
 =
NULL
) {

803  
NGX_ERROR
;

806 *
«me
 = *
key
;

808 
hk
 = 
	`ngx_¨øy_push
(&
ha
->
keys
);

809 i‡(
hk
 =
NULL
) {

810  
NGX_ERROR
;

813 
hk
->
key
 = *key;

814 
hk
->
key_hash
 = 
	`ngx_hash_key
(
key
->
d©a
, 
œ°
);

815 
hk
->
vÆue
 = value;

817  
NGX_OK
;

820 
wûdˇrd
:

824 
k
 = 
	`ngx_hash_°æow
(&
key
->
d©a
[
skù
], &key->d©a[skù], 
œ°
 - skip);

826 
k
 %
ha
->
hsize
;

828 i‡(
skù
 == 1) {

832 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

834 i‡(
«me
) {

835 
Àn
 = 
œ°
 - 
skù
;

837 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

838 i‡(
Àn
 !
«me
[
i
].len) {

842 i‡(
	`ngx_°∫cmp
(&
key
->
d©a
[1], 
«me
[
i
].d©a, 
Àn
) == 0) {

843  
NGX_BUSY
;

848 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

849 (
ngx_°r_t
))

850 !
NGX_OK
)

852  
NGX_ERROR
;

856 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

857 i‡(
«me
 =
NULL
) {

858  
NGX_ERROR
;

861 
«me
->
Àn
 = 
œ°
 - 1;

862 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

863 i‡(
«me
->
d©a
 =
NULL
) {

864  
NGX_ERROR
;

867 
	`ngx_mem˝y
(
«me
->
d©a
, &
key
->d©a[1],Çame->
Àn
);

871 i‡(
skù
) {

878 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

879 i‡(
p
 =
NULL
) {

880  
NGX_ERROR
;

883 
Àn
 = 0;

884 
n
 = 0;

886 
i
 = 
œ°
 - 1; i; i--) {

887 i‡(
key
->
d©a
[
i
] == '.') {

888 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[
i
 + 1], 
Àn
);

889 
n
 +
Àn
;

890 
p
[
n
++] = '.';

891 
Àn
 = 0;

895 
Àn
++;

898 i‡(
Àn
) {

899 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[1], 
Àn
);

900 
n
 +
Àn
;

903 
p
[
n
] = '\0';

905 
hwc
 = &
ha
->
dns_wc_hód
;

906 
keys
 = &
ha
->
dns_wc_hód_hash
[
k
];

912 
œ°
++;

914 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

915 i‡(
p
 =
NULL
) {

916  
NGX_ERROR
;

919 
	`ngx_˝y°∫
(
p
, 
key
->
d©a
, 
œ°
);

921 
hwc
 = &
ha
->
dns_wc_èû
;

922 
keys
 = &
ha
->
dns_wc_èû_hash
[
k
];

928 
«me
 = 
keys
->
ñts
;

930 i‡(
«me
) {

931 
Àn
 = 
œ°
 - 
skù
;

933 
i
 = 0; i < 
keys
->
√…s
; i++) {

934 i‡(
Àn
 !
«me
[
i
].len) {

938 i‡(
	`ngx_°∫cmp
(
key
->
d©a
 + 
skù
, 
«me
[
i
].d©a, 
Àn
) == 0) {

939  
NGX_BUSY
;

944 i‡(
	`ngx_¨øy_öô
(
keys
, 
ha
->
ãmp_poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
)

946  
NGX_ERROR
;

950 
«me
 = 
	`ngx_¨øy_push
(
keys
);

951 i‡(
«me
 =
NULL
) {

952  
NGX_ERROR
;

955 
«me
->
Àn
 = 
œ°
 - 
skù
;

956 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

957 i‡(
«me
->
d©a
 =
NULL
) {

958  
NGX_ERROR
;

961 
	`ngx_mem˝y
(
«me
->
d©a
, 
key
->d©®+ 
skù
,Çame->
Àn
);

966 
hk
 = 
	`ngx_¨øy_push
(
hwc
);

967 i‡(
hk
 =
NULL
) {

968  
NGX_ERROR
;

971 
hk
->
key
.
Àn
 = 
œ°
 - 1;

972 
hk
->
key
.
d©a
 = 
p
;

973 
hk
->
key_hash
 = 0;

974 
hk
->
vÆue
 = value;

976  
NGX_OK
;

977 
	}
}

	@src/core/ngx_hash.h

8 #i‚de‡
_NGX_HASH_H_INCLUDED_


9 
	#_NGX_HASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mvÆue
;

18 
u_sh‹t
 
	mÀn
;

19 
u_ch¨
 
	m«me
[1];

20 } 
	tngx_hash_ñt_t
;

24 
ngx_hash_ñt_t
 **
	mbuckës
;

25 
ngx_uöt_t
 
	msize
;

26 } 
	tngx_hash_t
;

30 
ngx_hash_t
 
	mhash
;

31 *
	mvÆue
;

32 } 
	tngx_hash_wûdˇrd_t
;

36 
ngx_°r_t
 
	mkey
;

37 
ngx_uöt_t
 
	mkey_hash
;

38 *
	mvÆue
;

39 } 
	tngx_hash_key_t
;

42 
	$ngx_uöt_t
 (*
	tngx_hash_key_±
Ë(
	tu_ch¨
 *
	td©a
, 
	tsize_t
 
	tÀn
);

46 
ngx_hash_t
 
hash
;

47 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

48 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

49 } 
	tngx_hash_comböed_t
;

53 
ngx_hash_t
 *
hash
;

54 
ngx_hash_key_±
 
key
;

56 
ngx_uöt_t
 
max_size
;

57 
ngx_uöt_t
 
buckë_size
;

59 *
«me
;

60 
ngx_poﬁ_t
 *
poﬁ
;

61 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

62 } 
	tngx_hash_öô_t
;

65 
	#NGX_HASH_SMALL
 1

	)

66 
	#NGX_HASH_LARGE
 2

	)

68 
	#NGX_HASH_LARGE_ASIZE
 16384

	)

69 
	#NGX_HASH_LARGE_HSIZE
 10007

	)

71 
	#NGX_HASH_WILDCARD_KEY
 1

	)

72 
	#NGX_HASH_READONLY_KEY
 2

	)

76 
ngx_uöt_t
 
hsize
;

78 
ngx_poﬁ_t
 *
poﬁ
;

79 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

81 
ngx_¨øy_t
 
keys
;

82 
ngx_¨øy_t
 *
keys_hash
;

84 
ngx_¨øy_t
 
dns_wc_hód
;

85 
ngx_¨øy_t
 *
dns_wc_hód_hash
;

87 
ngx_¨øy_t
 
dns_wc_èû
;

88 
ngx_¨øy_t
 *
dns_wc_èû_hash
;

89 } 
	tngx_hash_keys_¨øys_t
;

93 
ngx_uöt_t
 
hash
;

94 
ngx_°r_t
 
key
;

95 
ngx_°r_t
 
vÆue
;

96 
u_ch¨
 *
lowˇ£_key
;

97 } 
	tngx_èbÀ_ñt_t
;

100 *
	`ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

101 *
	`ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

102 *
	`ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

103 *
	`ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
,

104 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

106 
ngx_öt_t
 
	`ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

107 
ngx_uöt_t
 
√…s
);

108 
ngx_öt_t
 
	`ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

109 
ngx_uöt_t
 
√…s
);

111 
	#ngx_hash
(
key
, 
c
Ë((
ngx_uöt_t
Ëkey * 31 + c)

	)

112 
ngx_uöt_t
 
	`ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

113 
ngx_uöt_t
 
	`ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

114 
ngx_uöt_t
 
	`ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

117 
ngx_öt_t
 
	`ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
);

118 
ngx_öt_t
 
	`ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
,

119 *
vÆue
, 
ngx_uöt_t
 
Êags
);

	@src/core/ngx_inet.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

13 
ngx_öt_t
 
ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

14 
ngx_öt_t
 
ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

17 
ö_addr_t


18 
	$ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

20 
u_ch¨
 *
p
, 
c
;

21 
ö_addr_t
 
addr
;

22 
ngx_uöt_t
 
o˘ë
, 
n
;

24 
addr
 = 0;

25 
o˘ë
 = 0;

26 
n
 = 0;

28 
p
 = 
ãxt
;Ö <Åexà+ 
Àn
;Ö++) {

30 i‡(
o˘ë
 > 255) {

31  
INADDR_NONE
;

34 
c
 = *
p
;

36 i‡(
c
 >= '0' && c <= '9') {

37 
o˘ë
 = o˘ë * 10 + (
c
 - '0');

41 i‡(
c
 == '.') {

42 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

43 
o˘ë
 = 0;

44 
n
++;

48  
INADDR_NONE
;

51 i‡(
n
 == 3) {

52 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

53  
	`ht⁄l
(
addr
);

56  
INADDR_NONE
;

57 
	}
}

60 #i‡(
NGX_HAVE_INET6
)

62 
ngx_öt_t


63 
	$ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
)

65 
u_ch¨
 
c
, *
zîo
, *
digô
, *
s
, *
d
;

66 
size_t
 
Àn4
;

67 
ngx_uöt_t
 
n
, 
nibbÀs
, 
w‹d
;

69 i‡(
Àn
 == 0) {

70  
NGX_ERROR
;

73 
zîo
 = 
NULL
;

74 
digô
 = 
NULL
;

75 
Àn4
 = 0;

76 
nibbÀs
 = 0;

77 
w‹d
 = 0;

78 
n
 = 8;

80 i‡(
p
[0] == ':') {

81 
p
++;

82 
Àn
--;

85  ; 
Àn
;Üen--) {

86 
c
 = *
p
++;

88 i‡(
c
 == ':') {

89 i‡(
nibbÀs
) {

90 
digô
 = 
p
;

91 
Àn4
 = 
Àn
;

92 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

93 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

95 i‡(--
n
) {

96 
nibbÀs
 = 0;

97 
w‹d
 = 0;

102 i‡(
zîo
 =
NULL
) {

103 
digô
 = 
p
;

104 
Àn4
 = 
Àn
;

105 
zîo
 = 
addr
;

110  
NGX_ERROR
;

113 i‡(
c
 ='.' && 
nibbÀs
) {

114 i‡(
n
 < 2 || 
digô
 =
NULL
) {

115  
NGX_ERROR
;

118 
w‹d
 = 
	`ngx_öë_addr
(
digô
, 
Àn4
 - 1);

119 i‡(
w‹d
 =
INADDR_NONE
) {

120  
NGX_ERROR
;

123 
w‹d
 = 
	`¡ohl
(word);

124 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 24) & 0xff);

125 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 16) & 0xff);

126 
n
--;

130 i‡(++
nibbÀs
 > 4) {

131  
NGX_ERROR
;

134 i‡(
c
 >= '0' && c <= '9') {

135 
w‹d
 = w‹d * 16 + (
c
 - '0');

139 
c
 |= 0x20;

141 i‡(
c
 >= 'a' && c <= 'f') {

142 
w‹d
 = w‹d * 16 + (
c
 - 'a') + 10;

146  
NGX_ERROR
;

149 i‡(
nibbÀs
 =0 && 
zîo
 =
NULL
) {

150  
NGX_ERROR
;

153 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

154 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

156 i‡(--
n
) {

157 i‡(
zîo
) {

158 
n
 *= 2;

159 
s
 = 
addr
 - 1;

160 
d
 = 
s
 + 
n
;

161 
s
 >
zîo
) {

162 *
d
-- = *
s
--;

164 
	`ngx_memzîo
(
zîo
, 
n
);

165  
NGX_OK
;

169 i‡(
zîo
 =
NULL
) {

170  
NGX_OK
;

174  
NGX_ERROR
;

175 
	}
}

180 
size_t


181 
	$ngx_sock_¡›
(
sockaddr
 *
ß
, 
sockÀn_t
 
sockÀn
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
,

182 
ngx_uöt_t
 
p‹t
)

184 
u_ch¨
 *
p
;

185 
sockaddr_ö
 *
sö
;

186 #i‡(
NGX_HAVE_INET6
)

187 
size_t
 
n
;

188 
sockaddr_ö6
 *
sö6
;

190 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

191 
sockaddr_un
 *
ßun
;

194 
ß
->
ß_Ámûy
) {

196 
AF_INET
:

198 
sö
 = (
sockaddr_ö
 *Ë
ß
;

199 
p
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

201 i‡(
p‹t
) {

202 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud:%d",

203 
p
[0],Ö[1],Ö[2],Ö[3], 
	`¡ohs
(
sö
->
sö_p‹t
));

205 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

206 
p
[0],Ö[1],Ö[2],Ö[3]);

209  (
p
 - 
ãxt
);

211 #i‡(
NGX_HAVE_INET6
)

213 
AF_INET6
:

215 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

217 
n
 = 0;

219 i‡(
p‹t
) {

220 
ãxt
[
n
++] = '[';

223 
n
 = 
	`ngx_öë6_¡›
(
sö6
->
sö6_addr
.
s6_addr
, &
ãxt
[n], 
Àn
);

225 i‡(
p‹t
) {

226 
n
 = 
	`ngx_•rötf
(&
ãxt
[1 +Ç], "]:%d",

227 
	`¡ohs
(
sö6
->
sö6_p‹t
)Ë- 
ãxt
;

230  
n
;

233 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

235 
AF_UNIX
:

236 
ßun
 = (
sockaddr_un
 *Ë
ß
;

240 i‡(
sockÀn
 <(
sockÀn_t
Ë
	`off£tof
(
sockaddr_un
, 
sun_∑th
)) {

241 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "unix:%Z");

244 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "unix:%s%Z", 
ßun
->
sun_∑th
);

249  (
p
 - 
ãxt
 - 1);

256 
	}
}

259 
size_t


260 
	$ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

262 
u_ch¨
 *
p
;

264 
Ámûy
) {

266 
AF_INET
:

268 
p
 = 
addr
;

270  
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

271 
p
[0],Ö[1],Ö[2],Ö[3])

272 - 
ãxt
;

274 #i‡(
NGX_HAVE_INET6
)

276 
AF_INET6
:

277  
	`ngx_öë6_¡›
(
addr
, 
ãxt
, 
Àn
);

284 
	}
}

287 #i‡(
NGX_HAVE_INET6
)

289 
size_t


290 
	$ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, 
size_t
 
Àn
)

292 
u_ch¨
 *
d°
;

293 
size_t
 
max
, 
n
;

294 
ngx_uöt_t
 
i
, 
zîo
, 
œ°
;

296 i‡(
Àn
 < 
NGX_INET6_ADDRSTRLEN
) {

300 
zîo
 = (
ngx_uöt_t
) -1;

301 
œ°
 = (
ngx_uöt_t
) -1;

302 
max
 = 1;

303 
n
 = 0;

305 
i
 = 0; i < 16; i += 2) {

307 i‡(
p
[
i
] ||Ö[i + 1]) {

309 i‡(
max
 < 
n
) {

310 
zîo
 = 
œ°
;

311 
max
 = 
n
;

314 
n
 = 0;

318 i‡(
n
++ == 0) {

319 
œ°
 = 
i
;

323 i‡(
max
 < 
n
) {

324 
zîo
 = 
œ°
;

325 
max
 = 
n
;

328 
d°
 = 
ãxt
;

329 
n
 = 16;

331 i‡(
zîo
 == 0) {

333 i‡((
max
 =5 && 
p
[10] == 0xff &&Ö[11] == 0xff)

334 || (
max
 == 6)

335 || (
max
 =7 && 
p
[14] != 0 &&Ö[15] != 1))

337 
n
 = 12;

340 *
d°
++ = ':';

343 
i
 = 0; i < 
n
; i += 2) {

345 i‡(
i
 =
zîo
) {

346 *
d°
++ = ':';

347 
i
 +(
max
 - 1) * 2;

351 
d°
 = 
	`ngx_•rötf
(d°, "%uxi", 
p
[
i
] * 256 +Ö[i + 1]);

353 i‡(
i
 < 14) {

354 *
d°
++ = ':';

358 i‡(
n
 == 12) {

359 
d°
 = 
	`ngx_•rötf
(d°, "%ud.%ud.%ud.%ud", 
p
[12],Ö[13],Ö[14],Ö[15]);

362  
d°
 - 
ãxt
;

363 
	}
}

368 
ngx_öt_t


369 
	$ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
)

371 
u_ch¨
 *
addr
, *
mask
, *
œ°
;

372 
size_t
 
Àn
;

373 
ngx_öt_t
 
shi·
;

374 #i‡(
NGX_HAVE_INET6
)

375 
ngx_öt_t
 
rc
;

376 
ngx_uöt_t
 
s
, 
i
;

379 
addr
 = 
ãxt
->
d©a
;

380 
œ°
 = 
addr
 + 
ãxt
->
Àn
;

382 
mask
 = 
	`ngx_°æchr
(
addr
, 
œ°
, '/');

383 
Àn
 = (
mask
 ? mask : 
œ°
Ë- 
addr
;

385 
cidr
->
u
.
ö
.
addr
 = 
	`ngx_öë_addr
◊ddr, 
Àn
);

387 i‡(
cidr
->
u
.
ö
.
addr
 !
INADDR_NONE
) {

388 
cidr
->
Ámûy
 = 
AF_INET
;

390 i‡(
mask
 =
NULL
) {

391 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

392  
NGX_OK
;

395 #i‡(
NGX_HAVE_INET6
)

396 } i‡(
	`ngx_öë6_addr
(
addr
, 
Àn
, 
cidr
->
u
.
ö6
.addr.
s6_addr
Ë=
NGX_OK
) {

397 
cidr
->
Ámûy
 = 
AF_INET6
;

399 i‡(
mask
 =
NULL
) {

400 
	`ngx_mem£t
(
cidr
->
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

401  
NGX_OK
;

406  
NGX_ERROR
;

409 
mask
++;

411 
shi·
 = 
	`ngx_©oi
(
mask
, 
œ°
 - mask);

412 i‡(
shi·
 =
NGX_ERROR
) {

413  
NGX_ERROR
;

416 
cidr
->
Ámûy
) {

418 #i‡(
NGX_HAVE_INET6
)

419 
AF_INET6
:

420 i‡(
shi·
 > 128) {

421  
NGX_ERROR
;

424 
addr
 = 
cidr
->
u
.
ö6
.addr.
s6_addr
;

425 
mask
 = 
cidr
->
u
.
ö6
.mask.
s6_addr
;

426 
rc
 = 
NGX_OK
;

428 
i
 = 0; i < 16; i++) {

430 
s
 = (
shi·
 > 8) ? 8 : shift;

431 
shi·
 -
s
;

433 
mask
[
i
] = (
u_ch¨
Ë(0xffu << (8 - 
s
));

435 i‡(
addr
[
i
] !◊ddr[i] & 
mask
[i])) {

436 
rc
 = 
NGX_DONE
;

437 
addr
[
i
] &
mask
[i];

441  
rc
;

445 i‡(
shi·
 > 32) {

446  
NGX_ERROR
;

449 i‡(
shi·
) {

450 
cidr
->
u
.
ö
.
mask
 = 
	`ht⁄l
((
uöt32_t
Ë(0xffffffffu << (32 - 
shi·
)));

454 
cidr
->
u
.
ö
.
mask
 = 0;

457 i‡(
cidr
->
u
.
ö
.
addr
 =(cidr->u.ö.add∏& cidr->u.ö.
mask
)) {

458  
NGX_OK
;

461 
cidr
->
u
.
ö
.
addr
 &cidr->u.ö.
mask
;

463  
NGX_DONE
;

465 
	}
}

468 
ngx_öt_t


469 
	$ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

471 
ö_addr_t
 
öaddr
;

472 
ngx_uöt_t
 
Ámûy
;

473 
sockaddr_ö
 *
sö
;

474 #i‡(
NGX_HAVE_INET6
)

475 
ö6_addr
 
öaddr6
;

476 
sockaddr_ö6
 *
sö6
;

482 
	`ngx_memzîo
(&
öaddr6
, (
ö6_addr
));

485 
öaddr
 = 
	`ngx_öë_addr
(
ãxt
, 
Àn
);

487 i‡(
öaddr
 !
INADDR_NONE
) {

488 
Ámûy
 = 
AF_INET
;

489 
Àn
 = (
sockaddr_ö
);

491 #i‡(
NGX_HAVE_INET6
)

492 } i‡(
	`ngx_öë6_addr
(
ãxt
, 
Àn
, 
öaddr6
.
s6_addr
Ë=
NGX_OK
) {

493 
Ámûy
 = 
AF_INET6
;

494 
Àn
 = (
sockaddr_ö6
);

498  
NGX_DECLINED
;

501 
addr
->
sockaddr
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Àn
);

502 i‡(
addr
->
sockaddr
 =
NULL
) {

503  
NGX_ERROR
;

506 
addr
->
sockaddr
->
ß_Ámûy
 = (
u_ch¨
Ë
Ámûy
;

507 
addr
->
sockÀn
 = 
Àn
;

509 
Ámûy
) {

511 #i‡(
NGX_HAVE_INET6
)

512 
AF_INET6
:

513 
sö6
 = (
sockaddr_ö6
 *Ë
addr
->
sockaddr
;

514 
	`ngx_mem˝y
(
sö6
->
sö6_addr
.
s6_addr
, 
öaddr6
.s6_addr, 16);

519 
sö
 = (
sockaddr_ö
 *Ë
addr
->
sockaddr
;

520 
sö
->
sö_addr
.
s_addr
 = 
öaddr
;

524  
NGX_OK
;

525 
	}
}

528 
ngx_öt_t


529 
	$ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

531 
u_ch¨
 *
p
;

533 
p
 = 
u
->
uæ
.
d©a
;

535 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "unix:", 5) == 0) {

536  
	`ngx_∑r£_unix_domaö_uæ
(
poﬁ
, 
u
);

539 i‡(
p
[0] == '[') {

540  
	`ngx_∑r£_öë6_uæ
(
poﬁ
, 
u
);

543  
	`ngx_∑r£_öë_uæ
(
poﬁ
, 
u
);

544 
	}
}

547 
ngx_öt_t


548 
	$ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

550 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

551 
u_ch¨
 *
∑th
, *
uri
, *
œ°
;

552 
size_t
 
Àn
;

553 
sockaddr_un
 *
ßun
;

555 
Àn
 = 
u
->
uæ
.len;

556 
∑th
 = 
u
->
uæ
.
d©a
;

558 
∑th
 += 5;

559 
Àn
 -= 5;

561 i‡(
u
->
uri_∑π
) {

563 
œ°
 = 
∑th
 + 
Àn
;

564 
uri
 = 
	`ngx_°æchr
(
∑th
, 
œ°
, ':');

566 i‡(
uri
) {

567 
Àn
 = 
uri
 - 
∑th
;

568 
uri
++;

569 
u
->
uri
.
Àn
 = 
œ°
 - uri;

570 
u
->
uri
.
d©a
 = uri;

574 i‡(
Àn
 == 0) {

575 
u
->
îr
 = "noÖath inÅhe unix domain socket";

576  
NGX_ERROR
;

579 
u
->
ho°
.
Àn
 =Üen++;

580 
u
->
ho°
.
d©a
 = 
∑th
;

582 i‡(
Àn
 > (
ßun
->
sun_∑th
)) {

583 
u
->
îr
 = "tooÜongÖath inÅhe unix domain socket";

584  
NGX_ERROR
;

587 
u
->
sockÀn
 = (
sockaddr_un
);

588 
ßun
 = (
sockaddr_un
 *Ë&
u
->
sockaddr
;

589 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

590 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

592 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

593 i‡(
u
->
addrs
 =
NULL
) {

594  
NGX_ERROR
;

597 
ßun
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_un
));

598 i‡(
ßun
 =
NULL
) {

599  
NGX_ERROR
;

602 
u
->
Ámûy
 = 
AF_UNIX
;

603 
u
->
«ddrs
 = 1;

605 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

606 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

608 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
ßun
;

609 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_un
);

610 
u
->
addrs
[0].
«me
.
Àn
 =Üen + 4;

611 
u
->
addrs
[0].
«me
.
d©a
 = u->
uæ
.data;

613  
NGX_OK
;

617 
u
->
îr
 = "the unix domain socketsáreÇot supported onÅhisÖlatform";

619  
NGX_ERROR
;

622 
	}
}

625 
ngx_öt_t


626 
	$ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

628 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
, *
¨gs
;

629 
size_t
 
Àn
;

630 
ngx_öt_t
 
n
;

631 
sockaddr_ö
 *
sö
;

632 #i‡(
NGX_HAVE_INET6
)

633 
sockaddr_ö6
 *
sö6
;

636 
u
->
sockÀn
 = (
sockaddr_ö
);

637 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

638 
sö
->
sö_Ámûy
 = 
AF_INET
;

640 
u
->
Ámûy
 = 
AF_INET
;

642 
ho°
 = 
u
->
uæ
.
d©a
;

644 
œ°
 = 
ho°
 + 
u
->
uæ
.
Àn
;

646 
p‹t
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ':');

648 
uri
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '/');

650 
¨gs
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '?');

652 i‡(
¨gs
) {

653 i‡(
uri
 =
NULL
 || 
¨gs
 < uri) {

654 
uri
 = 
¨gs
;

658 i‡(
uri
) {

659 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

660 
u
->
îr
 = "invalid host";

661  
NGX_ERROR
;

664 
u
->
uri
.
Àn
 = 
œ°
 - uri;

665 
u
->
uri
.
d©a
 = uri;

667 
œ°
 = 
uri
;

669 i‡(
uri
 < 
p‹t
) {

670 
p‹t
 = 
NULL
;

674 i‡(
p‹t
) {

675 
p‹t
++;

677 
Àn
 = 
œ°
 - 
p‹t
;

679 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

681 i‡(
n
 < 1 ||Ç > 65535) {

682 
u
->
îr
 = "invalidÖort";

683  
NGX_ERROR
;

686 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

687 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

689 
u
->
p‹t_ãxt
.
Àn
 =Üen;

690 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

692 
œ°
 = 
p‹t
 - 1;

695 i‡(
uri
 =
NULL
) {

697 i‡(
u
->
li°í
) {

701 
n
 = 
	`ngx_©oi
(
ho°
, 
œ°
 - host);

703 i‡(
n
 !
NGX_ERROR
) {

705 i‡(
n
 < 1 ||Ç > 65535) {

706 
u
->
îr
 = "invalidÖort";

707  
NGX_ERROR
;

710 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

711 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

713 
u
->
p‹t_ãxt
.
Àn
 = 
œ°
 - 
ho°
;

714 
u
->
p‹t_ãxt
.
d©a
 = 
ho°
;

716 
u
->
wûdˇrd
 = 1;

718  
NGX_OK
;

723 
u
->
no_p‹t
 = 1;

724 
u
->
p‹t
 = u->
deÁu…_p‹t
;

725 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

728 
Àn
 = 
œ°
 - 
ho°
;

730 i‡(
Àn
 == 0) {

731 
u
->
îr
 = "no host";

732  
NGX_ERROR
;

735 
u
->
ho°
.
Àn
 =Üen;

736 
u
->
ho°
.
d©a
 = host;

738 i‡(
u
->
li°í
 && 
Àn
 =1 && *
ho°
 == '*') {

739 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

740 
u
->
wûdˇrd
 = 1;

741  
NGX_OK
;

744 
sö
->
sö_addr
.
s_addr
 = 
	`ngx_öë_addr
(
ho°
, 
Àn
);

746 i‡(
sö
->
sö_addr
.
s_addr
 !
INADDR_NONE
) {

748 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

749 
u
->
wûdˇrd
 = 1;

752 
u
->
«ddrs
 = 1;

754 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

755 i‡(
u
->
addrs
 =
NULL
) {

756  
NGX_ERROR
;

759 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

760 i‡(
sö
 =
NULL
) {

761  
NGX_ERROR
;

764 
	`ngx_mem˝y
(
sö
, 
u
->
sockaddr
, (
sockaddr_ö
));

766 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

767 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

769 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

770 i‡(
p
 =
NULL
) {

771  
NGX_ERROR
;

774 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

775 &
u
->
ho°
, u->
p‹t
Ë- 
p
;

776 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

778  
NGX_OK
;

781 i‡(
u
->
no_ªsﬁve
) {

782  
NGX_OK
;

785 i‡(
	`ngx_öë_ªsﬁve_ho°
(
poﬁ
, 
u
Ë!
NGX_OK
) {

786  
NGX_ERROR
;

789 
u
->
Ámûy
 = u->
addrs
[0].
sockaddr
->
ß_Ámûy
;

790 
u
->
sockÀn
 = u->
addrs
[0].socklen;

791 
	`ngx_mem˝y
(
u
->
sockaddr
, u->
addrs
[0].sockaddr, u->addrs[0].
sockÀn
);

793 
u
->
Ámûy
) {

795 #i‡(
NGX_HAVE_INET6
)

796 
AF_INET6
:

797 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

799 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

800 
u
->
wûdˇrd
 = 1;

807 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

809 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

810 
u
->
wûdˇrd
 = 1;

816  
NGX_OK
;

817 
	}
}

820 
ngx_öt_t


821 
	$ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

823 #i‡(
NGX_HAVE_INET6
)

824 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
;

825 
size_t
 
Àn
;

826 
ngx_öt_t
 
n
;

827 
sockaddr_ö6
 *
sö6
;

829 
u
->
sockÀn
 = (
sockaddr_ö6
);

830 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

831 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

833 
ho°
 = 
u
->
uæ
.
d©a
 + 1;

835 
œ°
 = 
u
->
uæ
.
d©a
 + u->uæ.
Àn
;

837 
p
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ']');

839 i‡(
p
 =
NULL
) {

840 
u
->
îr
 = "invalid host";

841  
NGX_ERROR
;

844 i‡(
œ°
 - 
p
) {

846 
p‹t
 = 
p
 + 1;

848 
uri
 = 
	`ngx_°æchr
(
p‹t
, 
œ°
, '/');

850 i‡(
uri
) {

851 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

852 
u
->
îr
 = "invalid host";

853  
NGX_ERROR
;

856 
u
->
uri
.
Àn
 = 
œ°
 - uri;

857 
u
->
uri
.
d©a
 = uri;

859 
œ°
 = 
uri
;

862 i‡(*
p‹t
 == ':') {

863 
p‹t
++;

865 
Àn
 = 
œ°
 - 
p‹t
;

867 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

869 i‡(
n
 < 1 ||Ç > 65535) {

870 
u
->
îr
 = "invalidÖort";

871  
NGX_ERROR
;

874 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

875 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

877 
u
->
p‹t_ãxt
.
Àn
 =Üen;

878 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

881 
u
->
no_p‹t
 = 1;

882 
u
->
p‹t
 = u->
deÁu…_p‹t
;

883 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

887 
Àn
 = 
p
 - 
ho°
;

889 i‡(
Àn
 == 0) {

890 
u
->
îr
 = "no host";

891  
NGX_ERROR
;

894 
u
->
ho°
.
Àn
 =Üen + 2;

895 
u
->
ho°
.
d©a
 = host - 1;

897 i‡(
	`ngx_öë6_addr
(
ho°
, 
Àn
, 
sö6
->
sö6_addr
.
s6_addr
Ë!
NGX_OK
) {

898 
u
->
îr
 = "invalid IPv6áddress";

899  
NGX_ERROR
;

902 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

903 
u
->
wûdˇrd
 = 1;

906 
u
->
Ámûy
 = 
AF_INET6
;

907 
u
->
«ddrs
 = 1;

909 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

910 i‡(
u
->
addrs
 =
NULL
) {

911  
NGX_ERROR
;

914 
sö6
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö6
));

915 i‡(
sö6
 =
NULL
) {

916  
NGX_ERROR
;

919 
	`ngx_mem˝y
(
sö6
, 
u
->
sockaddr
, (
sockaddr_ö6
));

921 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö6
;

922 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö6
);

924 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

925 i‡(
p
 =
NULL
) {

926  
NGX_ERROR
;

929 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

930 &
u
->
ho°
, u->
p‹t
Ë- 
p
;

931 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

933  
NGX_OK
;

937 
u
->
îr
 = "the INET6 socketsáreÇot supported onÅhisÖlatform";

939  
NGX_ERROR
;

942 
	}
}

945 #i‡(
NGX_HAVE_GETADDRINFO
 && 
NGX_HAVE_INET6
)

947 
ngx_öt_t


948 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

950 
u_ch¨
 *
p
, *
ho°
;

951 
size_t
 
Àn
;

952 
ö_p‹t_t
 
p‹t
;

953 
ngx_uöt_t
 
i
;

954 
addröfo
 
höts
, *
ªs
, *
Ω
;

955 
sockaddr_ö
 *
sö
;

956 
sockaddr_ö6
 *
sö6
;

958 
p‹t
 = 
	`ht⁄s
(
u
->port);

960 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

961 i‡(
ho°
 =
NULL
) {

962  
NGX_ERROR
;

965 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

967 
	`ngx_memzîo
(&
höts
, (
addröfo
));

968 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

969 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

970 #ifde‡
AI_ADDRCONFIG


971 
höts
.
ai_Êags
 = 
AI_ADDRCONFIG
;

974 i‡(
	`gëaddröfo
((*Ë
ho°
, 
NULL
, &
höts
, &
ªs
) != 0) {

975 
u
->
îr
 = "hostÇot found";

976 
	`ngx_‰ì
(
ho°
);

977  
NGX_ERROR
;

980 
	`ngx_‰ì
(
ho°
);

982 
i
 = 0, 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

984 
Ω
->
ai_Ámûy
) {

986 
AF_INET
:

987 
AF_INET6
:

994 
i
++;

997 i‡(
i
 == 0) {

998 
u
->
îr
 = "hostÇot found";

999 
Áûed
;

1004 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

1005 i‡(
u
->
addrs
 =
NULL
) {

1006 
Áûed
;

1009 
u
->
«ddrs
 = 
i
;

1011 
i
 = 0;

1015 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

1017 i‡(
Ω
->
ai_Ámûy
 !
AF_INET
) {

1021 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Ω
->
ai_addæí
);

1022 i‡(
sö
 =
NULL
) {

1023 
Áûed
;

1026 
	`ngx_mem˝y
(
sö
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

1028 
sö
->
sö_p‹t
 = 
p‹t
;

1030 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

1031 
u
->
addrs
[
i
].
sockÀn
 = 
Ω
->
ai_addæí
;

1033 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

1035 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1036 i‡(
p
 =
NULL
) {

1037 
Áûed
;

1040 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
, 
Ω
->
ai_addæí
, 
p
,Üen, 1);

1042 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1043 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1045 
i
++;

1048 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

1050 i‡(
Ω
->
ai_Ámûy
 !
AF_INET6
) {

1054 
sö6
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Ω
->
ai_addæí
);

1055 i‡(
sö6
 =
NULL
) {

1056 
Áûed
;

1059 
	`ngx_mem˝y
(
sö6
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

1061 
sö6
->
sö6_p‹t
 = 
p‹t
;

1063 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö6
;

1064 
u
->
addrs
[
i
].
sockÀn
 = 
Ω
->
ai_addæí
;

1066 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + ("[]:65535") - 1;

1068 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1069 i‡(
p
 =
NULL
) {

1070 
Áûed
;

1073 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö6
, 
Ω
->
ai_addæí
, 
p
,

1074 
Àn
, 1);

1076 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1077 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1079 
i
++;

1082 
	`‰ìaddröfo
(
ªs
);

1083  
NGX_OK
;

1085 
Áûed
:

1087 
	`‰ìaddröfo
(
ªs
);

1088  
NGX_ERROR
;

1089 
	}
}

1093 
ngx_öt_t


1094 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

1096 
u_ch¨
 *
p
, *
ho°
;

1097 
size_t
 
Àn
;

1098 
ö_p‹t_t
 
p‹t
;

1099 
ö_addr_t
 
ö_addr
;

1100 
ngx_uöt_t
 
i
;

1101 
ho°ít
 *
h
;

1102 
sockaddr_ö
 *
sö
;

1106 
p‹t
 = 
	`ht⁄s
(
u
->port);

1108 
ö_addr
 = 
	`ngx_öë_addr
(
u
->
ho°
.
d©a
, u->ho°.
Àn
);

1110 i‡(
ö_addr
 =
INADDR_NONE
) {

1111 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

1112 i‡(
ho°
 =
NULL
) {

1113  
NGX_ERROR
;

1116 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

1118 
h
 = 
	`gëho°by«me
((*Ë
ho°
);

1120 
	`ngx_‰ì
(
ho°
);

1122 i‡(
h
 =
NULL
 || h->
h_addr_li°
[0] == NULL) {

1123 
u
->
îr
 = "hostÇot found";

1124  
NGX_ERROR
;

1127 
i
 = 0; 
h
->
h_addr_li°
[i] !
NULL
; i++) { }

1131 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

1132 i‡(
u
->
addrs
 =
NULL
) {

1133  
NGX_ERROR
;

1136 
u
->
«ddrs
 = 
i
;

1138 
i
 = 0; i < 
u
->
«ddrs
; i++) {

1140 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1141 i‡(
sö
 =
NULL
) {

1142  
NGX_ERROR
;

1145 
sö
->
sö_Ámûy
 = 
AF_INET
;

1146 
sö
->
sö_p‹t
 = 
p‹t
;

1147 
sö
->
sö_addr
.
s_addr
 = *(
ö_addr_t
 *Ë(
h
->
h_addr_li°
[
i
]);

1149 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

1150 
u
->
addrs
[
i
].
sockÀn
 = (
sockaddr_ö
);

1152 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

1154 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1155 i‡(
p
 =
NULL
) {

1156  
NGX_ERROR
;

1159 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
,

1160 (
sockaddr_ö
), 
p
, 
Àn
, 1);

1162 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1163 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1170 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

1171 i‡(
u
->
addrs
 =
NULL
) {

1172  
NGX_ERROR
;

1175 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1176 i‡(
sö
 =
NULL
) {

1177  
NGX_ERROR
;

1180 
u
->
«ddrs
 = 1;

1182 
sö
->
sö_Ámûy
 = 
AF_INET
;

1183 
sö
->
sö_p‹t
 = 
p‹t
;

1184 
sö
->
sö_addr
.
s_addr
 = 
ö_addr
;

1186 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

1187 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

1189 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

1190 i‡(
p
 =
NULL
) {

1191  
NGX_ERROR
;

1194 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

1195 &
u
->
ho°
, 
	`¡ohs
(
p‹t
)Ë- 
p
;

1196 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

1199  
NGX_OK
;

1200 
	}
}

1205 
ngx_öt_t


1206 
	$ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, 
sockÀn_t
 
¶í1
,

1207 
sockaddr
 *
ß2
, 
sockÀn_t
 
¶í2
, 
ngx_uöt_t
 
cmp_p‹t
)

1209 
sockaddr_ö
 *
sö1
, *
sö2
;

1210 #i‡(
NGX_HAVE_INET6
)

1211 
sockaddr_ö6
 *
sö61
, *
sö62
;

1213 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1214 
sockaddr_un
 *
ßun1
, *
ßun2
;

1217 i‡(
ß1
->
ß_Ámûy
 !
ß2
->sa_family) {

1218  
NGX_DECLINED
;

1221 
ß1
->
ß_Ámûy
) {

1223 #i‡(
NGX_HAVE_INET6
)

1224 
AF_INET6
:

1226 
sö61
 = (
sockaddr_ö6
 *Ë
ß1
;

1227 
sö62
 = (
sockaddr_ö6
 *Ë
ß2
;

1229 i‡(
cmp_p‹t
 && 
sö61
->
sö6_p‹t
 !
sö62
->sin6_port) {

1230  
NGX_DECLINED
;

1233 i‡(
	`ngx_memcmp
(&
sö61
->
sö6_addr
, &
sö62
->sin6_addr, 16) != 0) {

1234  
NGX_DECLINED
;

1240 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1241 
AF_UNIX
:

1245 
ßun1
 = (
sockaddr_un
 *Ë
ß1
;

1246 
ßun2
 = (
sockaddr_un
 *Ë
ß2
;

1248 i‡(
	`ngx_memcmp
(&
ßun1
->
sun_∑th
, &
ßun2
->sun_path,

1249 (
ßun1
->
sun_∑th
))

1252  
NGX_DECLINED
;

1260 
sö1
 = (
sockaddr_ö
 *Ë
ß1
;

1261 
sö2
 = (
sockaddr_ö
 *Ë
ß2
;

1263 i‡(
cmp_p‹t
 && 
sö1
->
sö_p‹t
 !
sö2
->sin_port) {

1264  
NGX_DECLINED
;

1267 i‡(
sö1
->
sö_addr
.
s_addr
 !
sö2
->sin_addr.s_addr) {

1268  
NGX_DECLINED
;

1274  
NGX_OK
;

1275 
	}
}

	@src/core/ngx_inet.h

8 #i‚de‡
_NGX_INET_H_INCLUDED_


9 
	#_NGX_INET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

24 
	#NGX_INET_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

25 
	#NGX_INET6_ADDRSTRLEN
 \

26 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

27 
	#NGX_UNIX_ADDRSTRLEN
 \

28 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

30 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

31 
	#NGX_SOCKADDR_STRLEN
 (("unix:"Ë- 1 + 
NGX_UNIX_ADDRSTRLEN
)

	)

33 
	#NGX_SOCKADDR_STRLEN
 (
NGX_INET6_ADDRSTRLEN
 + ("[]:65535"Ë- 1)

	)

36 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

37 
	#NGX_SOCKADDRLEN
 (
sockaddr_un
)

	)

39 
	#NGX_SOCKADDRLEN
 512

	)

44 
ö_addr_t
 
	maddr
;

45 
ö_addr_t
 
	mmask
;

46 } 
	tngx_ö_cidr_t
;

49 #i‡(
NGX_HAVE_INET6
)

52 
ö6_addr
 
	maddr
;

53 
ö6_addr
 
	mmask
;

54 } 
	tngx_ö6_cidr_t
;

60 
ngx_uöt_t
 
	mÁmûy
;

62 
ngx_ö_cidr_t
 
	mö
;

63 #i‡(
NGX_HAVE_INET6
)

64 
ngx_ö6_cidr_t
 
	mö6
;

66 } 
	mu
;

67 } 
	tngx_cidr_t
;

71 
sockaddr
 *
	msockaddr
;

72 
sockÀn_t
 
	msockÀn
;

73 
ngx_°r_t
 
	m«me
;

74 } 
	tngx_addr_t
;

78 
ngx_°r_t
 
	muæ
;

79 
ngx_°r_t
 
	mho°
;

80 
ngx_°r_t
 
	mp‹t_ãxt
;

81 
ngx_°r_t
 
	muri
;

83 
ö_p‹t_t
 
	mp‹t
;

84 
ö_p‹t_t
 
	mdeÁu…_p‹t
;

85 
	mÁmûy
;

87 
	mli°í
:1;

88 
	muri_∑π
:1;

89 
	mno_ªsﬁve
:1;

90 
	m⁄e_addr
:1;

92 
	mno_p‹t
:1;

93 
	mwûdˇrd
:1;

95 
sockÀn_t
 
	msockÀn
;

96 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

98 
ngx_addr_t
 *
	maddrs
;

99 
ngx_uöt_t
 
	m«ddrs
;

101 *
	mîr
;

102 } 
	tngx_uæ_t
;

105 
ö_addr_t
 
ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
);

106 #i‡(
NGX_HAVE_INET6
)

107 
ngx_öt_t
 
ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
);

108 
size_t
 
ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, size_à
Àn
);

110 
size_t
 
ngx_sock_¡›
(
sockaddr
 *
ß
, 
sockÀn_t
 
sockÀn
, 
u_ch¨
 *
ãxt
,

111 
size_t
 
Àn
, 
ngx_uöt_t
 
p‹t
);

112 
size_t
 
ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, size_à
Àn
);

113 
ngx_öt_t
 
ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
);

114 
ngx_öt_t
 
ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
,

115 
size_t
 
Àn
);

116 
ngx_öt_t
 
ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

117 
ngx_öt_t
 
ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

118 
ngx_öt_t
 
ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, 
sockÀn_t
 
¶í1
,

119 
sockaddr
 *
ß2
, 
sockÀn_t
 
¶í2
, 
ngx_uöt_t
 
cmp_p‹t
);

	@src/core/ngx_list.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_li°_t
 *

13 
	$ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_li°_t
 *
li°
;

17 
li°
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_li°_t
));

18 i‡(
li°
 =
NULL
) {

19  
NULL
;

22 i‡(
	`ngx_li°_öô
(
li°
, 
poﬁ
, 
n
, 
size
Ë!
NGX_OK
) {

23  
NULL
;

26  
li°
;

27 
	}
}

31 
	$ngx_li°_push
(
ngx_li°_t
 *
l
)

33 *
ñt
;

34 
ngx_li°_∑π_t
 *
œ°
;

36 
œ°
 = 
l
->last;

38 i‡(
œ°
->
√…s
 =
l
->
«Œoc
) {

42 
œ°
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
, (
ngx_li°_∑π_t
));

43 i‡(
œ°
 =
NULL
) {

44  
NULL
;

47 
œ°
->
ñts
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
,Ü->
«Œoc
 *Ü->
size
);

48 i‡(
œ°
->
ñts
 =
NULL
) {

49  
NULL
;

52 
œ°
->
√…s
 = 0;

53 
œ°
->
√xt
 = 
NULL
;

55 
l
->
œ°
->
√xt
 =Üast;

56 
l
->
œ°
 =Üast;

59 
ñt
 = (*Ë
œ°
->
ñts
 + 
l
->
size
 *Üa°->
√…s
;

60 
œ°
->
√…s
++;

62  
ñt
;

63 
	}
}

	@src/core/ngx_list.h

8 #i‚de‡
_NGX_LIST_H_INCLUDED_


9 
	#_NGX_LIST_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°_∑π_s
 
	tngx_li°_∑π_t
;

18 
	sngx_li°_∑π_s
 {

19 *
	mñts
;

20 
ngx_uöt_t
 
	m√…s
;

21 
ngx_li°_∑π_t
 *
	m√xt
;

26 
ngx_li°_∑π_t
 *
	mœ°
;

27 
ngx_li°_∑π_t
 
	m∑π
;

28 
size_t
 
	msize
;

29 
ngx_uöt_t
 
	m«Œoc
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 } 
	tngx_li°_t
;

34 
ngx_li°_t
 *
ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

36 
ngx_ölöe
 
ngx_öt_t


37 
	$ngx_li°_öô
(
ngx_li°_t
 *
li°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

40 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

41  
NGX_ERROR
;

44 
li°
->
∑π
.
√…s
 = 0;

45 
li°
->
∑π
.
√xt
 = 
NULL
;

46 
li°
->
œ°
 = &li°->
∑π
;

47 
li°
->
size
 = size;

48 
li°
->
«Œoc
 = 
n
;

49 
li°
->
poﬁ
 =Öool;

51  
NGX_OK
;

52 
	}
}

80 *
ngx_li°_push
(
ngx_li°_t
 *
li°
);

	@src/core/ngx_log.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

13 *
ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
);

14 
ngx_log_ö£π
(
ngx_log_t
 *
log
,Çgx_log_à*
√w_log
);

17 #i‡(
NGX_DEBUG
)

19 
ngx_log_mem‹y_wrôî
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Àvñ
,

20 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

21 
ngx_log_mem‹y_˛ónup
(*
d©a
);

25 
u_ch¨
 *
	m°¨t
;

26 
u_ch¨
 *
	míd
;

27 
u_ch¨
 *
	mpos
;

28 
ngx_©omic_t
 
	mwrôãn
;

29 } 
	tngx_log_mem‹y_buf_t
;

34 
ngx_comm™d_t
 
	gngx_îæog_comm™ds
[] = {

36 {
ngx_°rög
("error_log"),

37 
NGX_MAIN_CONF
|
NGX_CONF_1MORE
,

38 
ngx_îr‹_log
,

41 
NULL
},

43 
ngx_nuŒ_comm™d


47 
ngx_c‹e_moduÀ_t
 
	gngx_îæog_moduÀ_˘x
 = {

48 
ngx_°rög
("errlog"),

49 
NULL
,

50 
NULL


54 
ngx_moduÀ_t
 
	gngx_îæog_moduÀ
 = {

55 
NGX_MODULE_V1
,

56 &
ngx_îæog_moduÀ_˘x
,

57 
ngx_îæog_comm™ds
,

58 
NGX_CORE_MODULE
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NGX_MODULE_V1_PADDING


70 
ngx_log_t
 
	gngx_log
;

71 
ngx_›í_fûe_t
 
	gngx_log_fûe
;

72 
ngx_uöt_t
 
	gngx_u£_°dîr
 = 1;

75 
ngx_°r_t
 
	gîr_Àvñs
[] = {

76 
ngx_nuŒ_°rög
,

77 
ngx_°rög
("emerg"),

78 
ngx_°rög
("alert"),

79 
ngx_°rög
("crit"),

80 
ngx_°rög
("error"),

81 
ngx_°rög
("warn"),

82 
ngx_°rög
("notice"),

83 
ngx_°rög
("info"),

84 
ngx_°rög
("debug")

87 c⁄° *
	gdebug_Àvñs
[] = {

93 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

96 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

97 c⁄° *
fmt
, ...)

102 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

103 c⁄° *
fmt
, 
va_li°
 
¨gs
)

107 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

108 
va_li°
 
¨gs
;

110 
u_ch¨
 *
p
, *
œ°
, *
msg
;

111 
ssize_t
 
n
;

112 
ngx_uöt_t
 
wrŸe_°dîr
, 
debug_c⁄√˘i⁄
;

113 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

115 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

117 
p
 = 
	`ngx_˝ymem
(
îr°r
, 
ngx_ˇched_îr_log_time
.
d©a
,

118 
ngx_ˇched_îr_log_time
.
Àn
);

120 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, " [%V] ", &
îr_Àvñs
[
Àvñ
]);

123 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "%P#" 
NGX_TID_T_FMT
 ": ",

124 
ngx_log_pid
, 
ngx_log_tid
);

126 i‡(
log
->
c⁄√˘i⁄
) {

127 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "*%uA ", 
log
->
c⁄√˘i⁄
);

130 
msg
 = 
p
;

132 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

134 
	`va_°¨t
(
¨gs
, 
fmt
);

135 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

136 
	`va_íd
(
¨gs
);

140 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

144 i‡(
îr
) {

145 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

148 i‡(
Àvñ
 !
NGX_LOG_DEBUG
 && 
log
->
h™dÀr
) {

149 
p
 = 
log
->
	`h™dÀr
÷og,Ö, 
œ°
 -Ö);

152 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

153 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

156 
	`ngx_löe„ed
(
p
);

158 
wrŸe_°dîr
 = 0;

159 
debug_c⁄√˘i⁄
 = (
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
) != 0;

161 
log
) {

163 i‡(
log
->
log_Àvñ
 < 
Àvñ
 && !
debug_c⁄√˘i⁄
) {

167 i‡(
log
->
wrôî
) {

168 
log
->
	`wrôî
÷og, 
Àvñ
, 
îr°r
, 
p
 -Érrstr);

169 
√xt
;

172 i‡(
	`ngx_time
(Ë=
log
->
disk_fuŒ_time
) {

180 
√xt
;

183 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
îr°r
, 
p
 -Érrstr);

185 i‡(
n
 =-1 && 
ngx_î∫o
 =
NGX_ENOSPC
) {

186 
log
->
disk_fuŒ_time
 = 
	`ngx_time
();

189 i‡(
log
->
fûe
->
fd
 =
ngx_°dîr
) {

190 
wrŸe_°dîr
 = 1;

193 
√xt
:

195 
log
 =Üog->
√xt
;

198 i‡(!
ngx_u£_°dîr


199 || 
Àvñ
 > 
NGX_LOG_WARN


200 || 
wrŸe_°dîr
)

205 
msg
 -(7 + 
îr_Àvñs
[
Àvñ
].
Àn
 + 3);

207 (Ë
	`ngx_•rötf
(
msg
, "ngöx: [%V] ", &
îr_Àvñs
[
Àvñ
]);

209 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
msg
, 
p
 - msg);

210 
	}
}

213 #i‡!(
NGX_HAVE_VARIADIC_MACROS
)

215 
ngx_cde˛


216 
	$ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

217 c⁄° *
fmt
, ...)

219 
va_li°
 
¨gs
;

221 i‡(
log
->
log_Àvñ
 >
Àvñ
) {

222 
	`va_°¨t
(
¨gs
, 
fmt
);

223 
	`ngx_log_îr‹_c‹e
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨gs
);

224 
	`va_íd
(
¨gs
);

226 
	}
}

229 
ngx_cde˛


230 
	$ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

232 
va_li°
 
¨gs
;

234 
	`va_°¨t
(
¨gs
, 
fmt
);

235 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
îr
, 
fmt
, 
¨gs
);

236 
	`va_íd
(
¨gs
);

237 
	}
}

242 
ngx_cde˛


243 
	$ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

245 
u_ch¨
 *
p
;

246 
va_li°
 
¨gs
;

247 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

249 
	`va_°¨t
(
¨gs
, 
fmt
);

250 
p
 = 
	`ngx_v¢¥ötf
(
îr°r
, ”º°rË- 1, 
fmt
, 
¨gs
);

251 
	`va_íd
(
¨gs
);

253 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

254 "%*s", 
p
 - 
îr°r
,Érrstr);

255 
	}
}

258 
ngx_cde˛


259 
	$ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

261 
u_ch¨
 *
p
, *
œ°
;

262 
va_li°
 
¨gs
;

263 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

265 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

267 
p
 = 
	`ngx_˝ymem
(
îr°r
, "nginx: ", 7);

269 
	`va_°¨t
(
¨gs
, 
fmt
);

270 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

271 
	`va_íd
(
¨gs
);

273 i‡(
îr
) {

274 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

277 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

278 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

281 
	`ngx_löe„ed
(
p
);

283 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
îr°r
, 
p
 -Érrstr);

284 
	}
}

287 
u_ch¨
 *

288 
	$ngx_log_î∫o
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
)

290 i‡(
buf
 > 
œ°
 - 50) {

294 
buf
 = 
œ°
 - 50;

295 *
buf
++ = '.';

296 *
buf
++ = '.';

297 *
buf
++ = '.';

300 #i‡(
NGX_WIN32
)

301 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, ((Ë
îr
 < 0x80000000)

302 ? " (%d: " : " (%Xd: ", 
îr
);

304 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, " (%d: ", 
îr
);

307 
buf
 = 
	`ngx_°ªº‹
(
îr
, buf, 
œ°
 - buf);

309 i‡(
buf
 < 
œ°
) {

310 *
buf
++ = ')';

313  
buf
;

314 
	}
}

317 
ngx_log_t
 *

318 
	$ngx_log_öô
(
u_ch¨
 *
¥efix
)

320 
u_ch¨
 *
p
, *
«me
;

321 
size_t
 
∆í
, 
∂í
;

323 
ngx_log
.
fûe
 = &
ngx_log_fûe
;

324 
ngx_log
.
log_Àvñ
 = 
NGX_LOG_NOTICE
;

326 
«me
 = (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
;

333 
∆í
 = 
	`ngx_°æí
(
«me
);

335 i‡(
∆í
 == 0) {

336 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

337  &
ngx_log
;

340 
p
 = 
NULL
;

342 #i‡(
NGX_WIN32
)

343 i‡(
«me
[1] != ':') {

345 i‡(
«me
[0] != '/') {

348 i‡(
¥efix
) {

349 
∂í
 = 
	`ngx_°æí
(
¥efix
);

352 #ifde‡
NGX_PREFIX


353 
¥efix
 = (
u_ch¨
 *Ë
NGX_PREFIX
;

354 
∂í
 = 
	`ngx_°æí
(
¥efix
);

356 
∂í
 = 0;

360 i‡(
∂í
) {

361 
«me
 = 
	`mÆloc
(
∂í
 + 
∆í
 + 2);

362 i‡(
«me
 =
NULL
) {

363  
NULL
;

366 
p
 = 
	`ngx_˝ymem
(
«me
, 
¥efix
, 
∂í
);

368 i‡(!
	`ngx_∑th_£∑øt‹
(*(
p
 - 1))) {

369 *
p
++ = '/';

372 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
, 
∆í
 + 1);

374 
p
 = 
«me
;

378 
ngx_log_fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_APPEND
,

379 
NGX_FILE_CREATE_OR_OPEN
,

380 
NGX_FILE_DEFAULT_ACCESS
);

382 i‡(
ngx_log_fûe
.
fd
 =
NGX_INVALID_FILE
) {

383 
	`ngx_log_°dîr
(
ngx_î∫o
,

385 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

386 #i‡(
NGX_WIN32
)

387 
	`ngx_evít_log
(
ngx_î∫o
,

389 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

392 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

395 i‡(
p
) {

396 
	`ngx_‰ì
(
p
);

399  &
ngx_log
;

400 
	}
}

403 
ngx_öt_t


404 
	$ngx_log_›í_deÁu…
(
ngx_cy˛e_t
 *
cy˛e
)

406 
ngx_log_t
 *
log
;

407 
ngx_°r_t
 
îr‹_log
 = 
	`ngx_°rög
(
NGX_ERROR_LOG_PATH
);

409 i‡(
	`ngx_log_gë_fûe_log
(&
cy˛e
->
√w_log
Ë!
NULL
) {

410  
NGX_OK
;

413 i‡(
cy˛e
->
√w_log
.
log_Àvñ
 != 0) {

416 
log
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_log_t
));

417 i‡(
log
 =
NULL
) {

418  
NGX_ERROR
;

423 
log
 = &
cy˛e
->
√w_log
;

426 
log
->
log_Àvñ
 = 
NGX_LOG_ERR
;

428 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cy˛e
, &
îr‹_log
);

429 i‡(
log
->
fûe
 =
NULL
) {

430  
NGX_ERROR
;

433 i‡(
log
 !&
cy˛e
->
√w_log
) {

434 
	`ngx_log_ö£π
(&
cy˛e
->
√w_log
, 
log
);

437  
NGX_OK
;

438 
	}
}

441 
ngx_öt_t


442 
	$ngx_log_ªdúe˘_°dîr
(
ngx_cy˛e_t
 *
cy˛e
)

444 
ngx_fd_t
 
fd
;

446 i‡(
cy˛e
->
log_u£_°dîr
) {

447  
NGX_OK
;

451 
fd
 = 
	`ngx_log_gë_fûe_log
(
cy˛e
->
log
)->
fûe
->fd;

453 i‡(
fd
 !
ngx_°dîr
) {

454 i‡(
	`ngx_£t_°dîr
(
fd
Ë=
NGX_FILE_ERROR
) {

455 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

456 
ngx_£t_°dîr_n
 " failed");

458  
NGX_ERROR
;

462  
NGX_OK
;

463 
	}
}

466 
ngx_log_t
 *

467 
	$ngx_log_gë_fûe_log
(
ngx_log_t
 *
hód
)

469 
ngx_log_t
 *
log
;

471 
log
 = 
hód
;Üog;Üog =Üog->
√xt
) {

472 i‡(
log
->
fûe
 !
NULL
) {

473  
log
;

477  
NULL
;

478 
	}
}

482 
	$ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
)

484 
ngx_uöt_t
 
i
, 
n
, 
d
, 
found
;

485 
ngx_°r_t
 *
vÆue
;

487 i‡(
cf
->
¨gs
->
√…s
 == 2) {

488 
log
->
log_Àvñ
 = 
NGX_LOG_ERR
;

489  
NGX_CONF_OK
;

492 
vÆue
 = 
cf
->
¨gs
->
ñts
;

494 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

495 
found
 = 0;

497 
n
 = 1;Ç <
NGX_LOG_DEBUG
;Ç++) {

498 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
îr_Àvñs
[
n
].data) == 0) {

500 i‡(
log
->
log_Àvñ
 != 0) {

501 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

503 &
vÆue
[
i
]);

504  
NGX_CONF_ERROR
;

507 
log
->
log_Àvñ
 = 
n
;

508 
found
 = 1;

513 
n
 = 0, 
d
 = 
NGX_LOG_DEBUG_FIRST
; d <
NGX_LOG_DEBUG_LAST
; d <<= 1) {

514 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
debug_Àvñs
[
n
++]) == 0) {

515 i‡(
log
->
log_Àvñ
 & ~
NGX_LOG_DEBUG_ALL
) {

516 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

518 &
vÆue
[
i
]);

519  
NGX_CONF_ERROR
;

522 
log
->
log_Àvñ
 |
d
;

523 
found
 = 1;

529 i‡(!
found
) {

530 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

531 "övÆidÜogÜevñ \"%V\"", &
vÆue
[
i
]);

532  
NGX_CONF_ERROR
;

536 i‡(
log
->
log_Àvñ
 =
NGX_LOG_DEBUG
) {

537 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

540  
NGX_CONF_OK
;

541 
	}
}

545 
	$ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

547 
ngx_log_t
 *
dummy
;

549 
dummy
 = &
cf
->
cy˛e
->
√w_log
;

551  
	`ngx_log_£t_log
(
cf
, &
dummy
);

552 
	}
}

556 
	$ngx_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 **
hód
)

558 
ngx_log_t
 *
√w_log
;

559 
ngx_°r_t
 *
vÆue
, 
«me
;

560 
ngx_sy¶og_≥î_t
 *
≥î
;

562 i‡(*
hód
 !
NULL
 && (*hód)->
log_Àvñ
 == 0) {

563 
√w_log
 = *
hód
;

567 
√w_log
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_log_t
));

568 i‡(
√w_log
 =
NULL
) {

569  
NGX_CONF_ERROR
;

572 i‡(*
hód
 =
NULL
) {

573 *
hód
 = 
√w_log
;

577 
vÆue
 = 
cf
->
¨gs
->
ñts
;

579 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "stderr") == 0) {

580 
	`ngx_°r_nuŒ
(&
«me
);

581 
cf
->
cy˛e
->
log_u£_°dîr
 = 1;

583 
√w_log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
«me
);

584 i‡(
√w_log
->
fûe
 =
NULL
) {

585  
NGX_CONF_ERROR
;

588 } i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "memory:", 7) == 0) {

590 #i‡(
NGX_DEBUG
)

591 
size_t
 
size
, 
√eded
;

592 
ngx_poﬁ_˛ónup_t
 *
˛n
;

593 
ngx_log_mem‹y_buf_t
 *
buf
;

595 
vÆue
[1].
Àn
 -= 7;

596 
vÆue
[1].
d©a
 += 7;

598 
√eded
 = ("MEMLOG :" 
NGX_LINEFEED
)

599 + 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
Àn


600 + 
NGX_SIZE_T_LEN


601 + 
NGX_INT_T_LEN


602 + 
NGX_MAX_ERROR_STR
;

604 
size
 = 
	`ngx_∑r£_size
(&
vÆue
[1]);

606 i‡(
size
 =(
size_t
Ë
NGX_ERROR
 || sizê< 
√eded
) {

607 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

608 "övÆid buf„∏sizê\"%V\"", &
vÆue
[1]);

609  
NGX_CONF_ERROR
;

612 
buf
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_log_mem‹y_buf_t
));

613 i‡(
buf
 =
NULL
) {

614  
NGX_CONF_ERROR
;

617 
buf
->
°¨t
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

618 i‡(
buf
->
°¨t
 =
NULL
) {

619  
NGX_CONF_ERROR
;

622 
buf
->
íd
 = buf->
°¨t
 + 
size
;

624 
buf
->
pos
 = 
	`ngx_¶¥ötf
(buf->
°¨t
, buf->
íd
, "MEMLOG %uz %V:%ui%N",

625 
size
, &
cf
->
c⁄f_fûe
->
fûe
.
«me
,

626 
cf
->
c⁄f_fûe
->
löe
);

628 
	`ngx_mem£t
(
buf
->
pos
, ' ', buf->
íd
 - buf->pos);

630 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

631 i‡(
˛n
 =
NULL
) {

632  
NGX_CONF_ERROR
;

635 
˛n
->
d©a
 = 
√w_log
;

636 
˛n
->
h™dÀr
 = 
ngx_log_mem‹y_˛ónup
;

638 
√w_log
->
wrôî
 = 
ngx_log_mem‹y_wrôî
;

639 
√w_log
->
wd©a
 = 
buf
;

642 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

644  
NGX_CONF_ERROR
;

647 } i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "syslog:", 7) == 0) {

648 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_sy¶og_≥î_t
));

649 i‡(
≥î
 =
NULL
) {

650  
NGX_CONF_ERROR
;

653 i‡(
	`ngx_sy¶og_¥o˚ss_c⁄f
(
cf
, 
≥î
Ë!
NGX_CONF_OK
) {

654  
NGX_CONF_ERROR
;

657 
√w_log
->
wrôî
 = 
ngx_sy¶og_wrôî
;

658 
√w_log
->
wd©a
 = 
≥î
;

661 
√w_log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

662 i‡(
√w_log
->
fûe
 =
NULL
) {

663  
NGX_CONF_ERROR
;

667 i‡(
	`ngx_log_£t_Àvñs
(
cf
, 
√w_log
Ë!
NGX_CONF_OK
) {

668  
NGX_CONF_ERROR
;

671 i‡(*
hód
 !
√w_log
) {

672 
	`ngx_log_ö£π
(*
hód
, 
√w_log
);

675  
NGX_CONF_OK
;

676 
	}
}

680 
	$ngx_log_ö£π
(
ngx_log_t
 *
log
,Çgx_log_à*
√w_log
)

682 
ngx_log_t
 
tmp
;

684 i‡(
√w_log
->
log_Àvñ
 > 
log
->log_level) {

691 
tmp
 = *
log
;

692 *
log
 = *
√w_log
;

693 *
√w_log
 = 
tmp
;

695 
log
->
√xt
 = 
√w_log
;

699 
log
->
√xt
) {

700 i‡(
√w_log
->
log_Àvñ
 > 
log
->
√xt
->log_level) {

701 
√w_log
->
√xt
 = 
log
->next;

702 
log
->
√xt
 = 
√w_log
;

706 
log
 =Üog->
√xt
;

709 
log
->
√xt
 = 
√w_log
;

710 
	}
}

713 #i‡(
NGX_DEBUG
)

716 
	$ngx_log_mem‹y_wrôî
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Àvñ
, 
u_ch¨
 *
buf
,

717 
size_t
 
Àn
)

719 
u_ch¨
 *
p
;

720 
size_t
 
avaû
, 
wrôãn
;

721 
ngx_log_mem‹y_buf_t
 *
mem
;

723 
mem
 = 
log
->
wd©a
;

725 i‡(
mem
 =
NULL
) {

729 
wrôãn
 = 
	`ngx_©omic_„tch_add
(&
mem
->wrôãn, 
Àn
);

731 
p
 = 
mem
->
pos
 + 
wrôãn
 % (mem->
íd
 - mem->pos);

733 
avaû
 = 
mem
->
íd
 - 
p
;

735 i‡(
avaû
 >
Àn
) {

736 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

739 
	`ngx_mem˝y
(
p
, 
buf
, 
avaû
);

740 
	`ngx_mem˝y
(
mem
->
pos
, 
buf
 + 
avaû
, 
Àn
 -ávail);

742 
	}
}

746 
	$ngx_log_mem‹y_˛ónup
(*
d©a
)

748 
ngx_log_t
 *
log
 = 
d©a
;

750 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "destroy memoryÜog buffer");

752 
log
->
wd©a
 = 
NULL
;

753 
	}
}

	@src/core/ngx_log.h

8 #i‚de‡
_NGX_LOG_H_INCLUDED_


9 
	#_NGX_LOG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_LOG_STDERR
 0

	)

17 
	#NGX_LOG_EMERG
 1

	)

18 
	#NGX_LOG_ALERT
 2

	)

19 
	#NGX_LOG_CRIT
 3

	)

20 
	#NGX_LOG_ERR
 4

	)

21 
	#NGX_LOG_WARN
 5

	)

22 
	#NGX_LOG_NOTICE
 6

	)

23 
	#NGX_LOG_INFO
 7

	)

24 
	#NGX_LOG_DEBUG
 8

	)

26 
	#NGX_LOG_DEBUG_CORE
 0x010

	)

27 
	#NGX_LOG_DEBUG_ALLOC
 0x020

	)

28 
	#NGX_LOG_DEBUG_MUTEX
 0x040

	)

29 
	#NGX_LOG_DEBUG_EVENT
 0x080

	)

30 
	#NGX_LOG_DEBUG_HTTP
 0x100

	)

31 
	#NGX_LOG_DEBUG_MAIL
 0x200

	)

32 
	#NGX_LOG_DEBUG_MYSQL
 0x400

	)

39 
	#NGX_LOG_DEBUG_FIRST
 
NGX_LOG_DEBUG_CORE


	)

40 
	#NGX_LOG_DEBUG_LAST
 
NGX_LOG_DEBUG_MYSQL


	)

41 
	#NGX_LOG_DEBUG_CONNECTION
 0x80000000

	)

42 
	#NGX_LOG_DEBUG_ALL
 0x7ffffff0

	)

45 
	gu_ch¨
 *(*
	tngx_log_h™dÀr_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

46 (*
	tngx_log_wrôî_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tngx_uöt_t
 
	tÀvñ
,

47 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

50 
	sngx_log_s
 {

51 
ngx_uöt_t
 
log_Àvñ
;

52 
ngx_›í_fûe_t
 *
fûe
;

54 
ngx_©omic_uöt_t
 
c⁄√˘i⁄
;

56 
time_t
 
disk_fuŒ_time
;

58 
ngx_log_h™dÀr_±
 
h™dÀr
;

59 *
d©a
;

61 
ngx_log_wrôî_±
 
wrôî
;

62 *
wd©a
;

70 *
a˘i⁄
;

72 
ngx_log_t
 *
√xt
;

76 
	#NGX_MAX_ERROR_STR
 2048

	)

81 #i‡(
NGX_HAVE_C99_VARIADIC_MACROS
)

83 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

85 
	#ngx_log_îr‹
(
Àvñ
, 
log
, ...) \

86 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
__VA_ARGS__
)

	)

88 
	`ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

89 c⁄° *
fmt
, ...);

91 
	#ngx_log_debug
(
Àvñ
, 
log
, ...) \

92 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

93 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
__VA_ARGS__
)

	)

97 #ñi‡(
NGX_HAVE_GCC_VARIADIC_MACROS
)

99 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

101 
	#ngx_log_îr‹
(
Àvñ
, 
log
, 
¨gs
...) \

102 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
¨gs
)

	)

104 
	`ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

105 c⁄° *
fmt
, ...);

107 
	#ngx_log_debug
(
Àvñ
, 
log
, 
¨gs
...) \

108 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

109 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
¨gs
)

	)

115 
	#NGX_HAVE_VARIADIC_MACROS
 0

	)

117 
ngx_cde˛
 
	`ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

118 c⁄° *
fmt
, ...);

119 
	`ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

120 c⁄° *
fmt
, 
va_li°
 
¨gs
);

121 
ngx_cde˛
 
	`ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

122 c⁄° *
fmt
, ...);

130 #i‡(
NGX_DEBUG
)

132 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

134 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

135 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

137 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

138 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

140 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

141 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

143 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

144 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

146 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

147 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

149 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

150 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

152 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

153 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

154 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

155 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

157 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

158 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

159 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

160 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

162 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

163 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

164 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

165 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

170 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

171 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

172 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
)

	)

174 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

175 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

176 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
)

	)

178 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

179 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

180 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

182 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

183 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

184 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

186 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

187 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

188 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

190 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

191 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

192 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

194 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

195 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

196 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

197 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

199 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

200 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

201 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

202 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

203 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

205 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

206 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

207 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

208 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

209 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

215 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

216 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

217 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

218 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

219 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

220 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

221 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

222 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

223 
¨g6
, 
¨g7
)

	)

224 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

225 
¨g6
, 
¨g7
, 
¨g8
)

	)

231 
ngx_log_t
 *
	`ngx_log_öô
(
u_ch¨
 *
¥efix
);

232 
ngx_cde˛
 
	`ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

233 
ngx_cde˛
 
	`ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

234 
u_ch¨
 *
	`ngx_log_î∫o
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
);

235 
ngx_öt_t
 
	`ngx_log_›í_deÁu…
(
ngx_cy˛e_t
 *
cy˛e
);

236 
ngx_öt_t
 
	`ngx_log_ªdúe˘_°dîr
(
ngx_cy˛e_t
 *
cy˛e
);

237 
ngx_log_t
 *
	`ngx_log_gë_fûe_log
“gx_log_à*
hód
);

238 *
	`ngx_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 **
hód
);

250 
ngx_ölöe
 

251 
	$ngx_wrôe_°dîr
(*
ãxt
)

253 (Ë
	`ngx_wrôe_fd
(
ngx_°dîr
, 
ãxt
, 
	`ngx_°æí
(text));

254 
	}
}

257 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

258 
ngx_uöt_t
 
ngx_u£_°dîr
;

	@src/core/ngx_md5.c

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_md5.h
>

16 #i‡!(
NGX_HAVE_MD5
)

18 c⁄° 
u_ch¨
 *
ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° u_ch¨ *
d©a
,

19 
size_t
 
size
);

23 
	$ngx_md5_öô
(
ngx_md5_t
 *
˘x
)

25 
˘x
->
a
 = 0x67452301;

26 
˘x
->
b
 = 0xefcdab89;

27 
˘x
->
c
 = 0x98badcfe;

28 
˘x
->
d
 = 0x10325476;

30 
˘x
->
byãs
 = 0;

31 
	}
}

35 
	$ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
)

37 
size_t
 
u£d
, 
‰ì
;

39 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

40 
˘x
->
byãs
 +
size
;

42 i‡(
u£d
) {

43 
‰ì
 = 64 - 
u£d
;

45 i‡(
size
 < 
‰ì
) {

46 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

50 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

51 
d©a
 = (
u_ch¨
 *Ëd©®+ 
‰ì
;

52 
size
 -
‰ì
;

53 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

56 i‡(
size
 >= 64) {

57 
d©a
 = 
	`ngx_md5_body
(
˘x
, d©a, 
size
 & ~(
size_t
) 0x3f);

58 
size
 &= 0x3f;

61 
	`ngx_mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

62 
	}
}

66 
	$ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
)

68 
size_t
 
u£d
, 
‰ì
;

70 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

72 
˘x
->
buf„r
[
u£d
++] = 0x80;

74 
‰ì
 = 64 - 
u£d
;

76 i‡(
‰ì
 < 8) {

77 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
);

78 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

79 
u£d
 = 0;

80 
‰ì
 = 64;

83 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
 - 8);

85 
˘x
->
byãs
 <<= 3;

86 
˘x
->
buf„r
[56] = (
u_ch¨
Ë˘x->
byãs
;

87 
˘x
->
buf„r
[57] = (
u_ch¨
Ë(˘x->
byãs
 >> 8);

88 
˘x
->
buf„r
[58] = (
u_ch¨
Ë(˘x->
byãs
 >> 16);

89 
˘x
->
buf„r
[59] = (
u_ch¨
Ë(˘x->
byãs
 >> 24);

90 
˘x
->
buf„r
[60] = (
u_ch¨
Ë(˘x->
byãs
 >> 32);

91 
˘x
->
buf„r
[61] = (
u_ch¨
Ë(˘x->
byãs
 >> 40);

92 
˘x
->
buf„r
[62] = (
u_ch¨
Ë(˘x->
byãs
 >> 48);

93 
˘x
->
buf„r
[63] = (
u_ch¨
Ë(˘x->
byãs
 >> 56);

95 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

97 
ªsu…
[0] = (
u_ch¨
Ë
˘x
->
a
;

98 
ªsu…
[1] = (
u_ch¨
Ë(
˘x
->
a
 >> 8);

99 
ªsu…
[2] = (
u_ch¨
Ë(
˘x
->
a
 >> 16);

100 
ªsu…
[3] = (
u_ch¨
Ë(
˘x
->
a
 >> 24);

101 
ªsu…
[4] = (
u_ch¨
Ë
˘x
->
b
;

102 
ªsu…
[5] = (
u_ch¨
Ë(
˘x
->
b
 >> 8);

103 
ªsu…
[6] = (
u_ch¨
Ë(
˘x
->
b
 >> 16);

104 
ªsu…
[7] = (
u_ch¨
Ë(
˘x
->
b
 >> 24);

105 
ªsu…
[8] = (
u_ch¨
Ë
˘x
->
c
;

106 
ªsu…
[9] = (
u_ch¨
Ë(
˘x
->
c
 >> 8);

107 
ªsu…
[10] = (
u_ch¨
Ë(
˘x
->
c
 >> 16);

108 
ªsu…
[11] = (
u_ch¨
Ë(
˘x
->
c
 >> 24);

109 
ªsu…
[12] = (
u_ch¨
Ë
˘x
->
d
;

110 
ªsu…
[13] = (
u_ch¨
Ë(
˘x
->
d
 >> 8);

111 
ªsu…
[14] = (
u_ch¨
Ë(
˘x
->
d
 >> 16);

112 
ªsu…
[15] = (
u_ch¨
Ë(
˘x
->
d
 >> 24);

114 
	`ngx_memzîo
(
˘x
, (*ctx));

115 
	}
}

126 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

127 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

128 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

129 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

135 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

136 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

137 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

138 (
a
Ë+(
b
)

	)

149 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

151 
	#SET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

152 
	#GET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

156 
	#SET
(
n
) \

157 (
block
[
n
] = \

158 (
uöt32_t
Ë
p
[
n
 * 4] | \

159 ((
uöt32_t
Ë
p
[
n
 * 4 + 1] << 8) | \

160 ((
uöt32_t
Ë
p
[
n
 * 4 + 2] << 16) | \

161 ((
uöt32_t
Ë
p
[
n
 * 4 + 3] << 24))

	)

163 
	#GET
(
n
Ë
block
[n]

	)

173 c⁄° 
u_ch¨
 *

174 
	$ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° 
u_ch¨
 *
d©a
, 
size_t
 
size
)

176 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

177 
uöt32_t
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

178 c⁄° 
u_ch¨
 *
p
;

179 #i‡!(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

180 
uöt32_t
 
block
[16];

183 
p
 = 
d©a
;

185 
a
 = 
˘x
->a;

186 
b
 = 
˘x
->b;

187 
c
 = 
˘x
->c;

188 
d
 = 
˘x
->d;

191 
ßved_a
 = 
a
;

192 
ßved_b
 = 
b
;

193 
ßved_c
 = 
c
;

194 
ßved_d
 = 
d
;

198 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7);

199 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12);

200 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17);

201 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22);

202 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7);

203 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12);

204 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17);

205 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22);

206 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7);

207 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12);

208 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17);

209 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22);

210 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7);

211 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12);

212 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17);

213 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22);

217 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5);

218 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9);

219 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14);

220 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20);

221 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5);

222 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9);

223 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14);

224 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20);

225 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5);

226 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9);

227 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14);

228 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20);

229 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5);

230 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9);

231 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14);

232 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20);

236 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4);

237 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11);

238 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16);

239 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23);

240 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4);

241 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11);

242 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16);

243 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23);

244 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4);

245 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11);

246 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16);

247 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23);

248 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4);

249 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11);

250 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16);

251 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23);

255 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6);

256 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10);

257 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15);

258 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21);

259 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6);

260 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10);

261 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15);

262 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21);

263 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6);

264 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10);

265 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15);

266 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21);

267 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6);

268 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10);

269 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15);

270 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21);

272 
a
 +
ßved_a
;

273 
b
 +
ßved_b
;

274 
c
 +
ßved_c
;

275 
d
 +
ßved_d
;

277 
p
 += 64;

279 } 
size
 -= 64);

281 
˘x
->
a
 =á;

282 
˘x
->
b
 = b;

283 
˘x
->
c
 = c;

284 
˘x
->
d
 = d;

286  
p
;

287 
	}
}

	@src/core/ngx_md5.h

8 #i‚de‡
_NGX_MD5_H_INCLUDED_


9 
	#_NGX_MD5_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_MD5
)

18 #i‡(
NGX_HAVE_OPENSSL_MD5_H
)

19 
	~<›ís¶/md5.h
>

21 
	~<md5.h
>

25 
MD5_CTX
 
	tngx_md5_t
;

28 #i‡(
NGX_OPENSSL_MD5
)

30 
	#ngx_md5_öô
 
MD5_Inô


	)

31 
	#ngx_md5_upd©e
 
MD5_Upd©e


	)

32 
	#ngx_md5_föÆ
 
MD5_FöÆ


	)

36 
	#ngx_md5_öô
 
MD5Inô


	)

37 
	#ngx_md5_upd©e
 
MD5Upd©e


	)

38 
	#ngx_md5_föÆ
 
MD5FöÆ


	)

47 
uöt64_t
 
	mbyãs
;

48 
uöt32_t
 
	ma
, 
	mb
, 
	mc
, 
	md
;

49 
u_ch¨
 
	mbuf„r
[64];

50 } 
	tngx_md5_t
;

53 
ngx_md5_öô
(
ngx_md5_t
 *
˘x
);

54 
ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
);

55 
ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
);

	@src/core/ngx_murmurhash.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
uöt32_t


12 
	$ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

14 
uöt32_t
 
h
, 
k
;

16 
h
 = 0 ^ 
Àn
;

18 
Àn
 >= 4) {

19 
k
 = 
d©a
[0];

20 
k
 |
d©a
[1] << 8;

21 
k
 |
d©a
[2] << 16;

22 
k
 |
d©a
[3] << 24;

24 
k
 *= 0x5bd1e995;

25 
k
 ^= k >> 24;

26 
k
 *= 0x5bd1e995;

28 
h
 *= 0x5bd1e995;

29 
h
 ^
k
;

31 
d©a
 += 4;

32 
Àn
 -= 4;

35 
Àn
) {

37 
h
 ^
d©a
[2] << 16;

39 
h
 ^
d©a
[1] << 8;

41 
h
 ^
d©a
[0];

42 
h
 *= 0x5bd1e995;

45 
h
 ^= h >> 13;

46 
h
 *= 0x5bd1e995;

47 
h
 ^= h >> 15;

49  
h
;

50 
	}
}

	@src/core/ngx_murmurhash.h

8 #i‚de‡
_NGX_MURMURHASH_H_INCLUDED_


9 
	#_NGX_MURMURHASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 
ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

	@src/core/ngx_open_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

21 
	#NGX_MIN_READ_AHEAD
 (128 * 1024)

	)

24 
ngx_›í_fûe_ˇche_˛ónup
(*
d©a
);

25 #i‡(
NGX_HAVE_OPENAT
)

26 
ngx_fd_t
 
ngx_›í©_fûe_ow√r
“gx_fd_à
©_fd
, c⁄° 
u_ch¨
 *
«me
,

27 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
);

28 #i‡(
NGX_HAVE_O_PATH
)

29 
ngx_öt_t
 
ngx_fûe_o_∑th_öfo
(
ngx_fd_t
 
fd
, 
ngx_fûe_öfo_t
 *
fi
,

30 
ngx_log_t
 *
log
);

33 
ngx_fd_t
 
ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
,

34 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,

35 
ngx_öt_t
 
ac˚ss
, 
ngx_log_t
 *
log
);

36 
ngx_öt_t
 
ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
,

37 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
);

38 
ngx_öt_t
 
ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
,

39 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

40 
ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

41 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

42 
ngx_›í_fûe_˛ónup
(*
d©a
);

43 
ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

44 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
);

45 
ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
);

46 
ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

47 
ngx_uöt_t
 
n
, 
ngx_log_t
 *
log
);

48 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

49 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

50 
ngx_ˇched_›í_fûe_t
 *

51 
ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

52 
uöt32_t
 
hash
);

53 
ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
);

56 
ngx_›í_fûe_ˇche_t
 *

57 
	$ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
)

59 
ngx_poﬁ_˛ónup_t
 *
˛n
;

60 
ngx_›í_fûe_ˇche_t
 *
ˇche
;

62 
ˇche
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_›í_fûe_ˇche_t
));

63 i‡(
ˇche
 =
NULL
) {

64  
NULL
;

67 
	`ngx_rbåì_öô
(&
ˇche
->
rbåì
, &ˇche->
£¡öñ
,

68 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
);

70 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

72 
ˇche
->
cuºít
 = 0;

73 
ˇche
->
max
 = max;

74 
ˇche
->
öa˘ive
 = inactive;

76 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, 0);

77 i‡(
˛n
 =
NULL
) {

78  
NULL
;

81 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_˛ónup
;

82 
˛n
->
d©a
 = 
ˇche
;

84  
ˇche
;

85 
	}
}

89 
	$ngx_›í_fûe_ˇche_˛ónup
(*
d©a
)

91 
ngx_›í_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

93 
ngx_queue_t
 *
q
;

94 
ngx_ˇched_›í_fûe_t
 *
fûe
;

96 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

101 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

105 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

107 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

109 
	`ngx_queue_ªmove
(
q
);

111 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

113 
ˇche
->
cuºít
--;

115 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

116 "dñëêˇched o≥¿fûe: %s", 
fûe
->
«me
);

118 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

119 
fûe
->
˛o£
 = 1;

120 
fûe
->
cou¡
 = 0;

121 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
ngx_cy˛e
->
log
);

124 
	`ngx_‰ì
(
fûe
->
«me
);

125 
	`ngx_‰ì
(
fûe
);

129 i‡(
ˇche
->
cuºít
) {

130 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

132 
ˇche
->
cuºít
);

135 i‡(
ˇche
->
rbåì
.
roŸ
 !ˇche->rbåì.
£¡öñ
) {

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

140 
	}
}

143 
ngx_öt_t


144 
	$ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

145 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
)

147 
time_t
 
now
;

148 
uöt32_t
 
hash
;

149 
ngx_öt_t
 
rc
;

150 
ngx_fûe_öfo_t
 
fi
;

151 
ngx_poﬁ_˛ónup_t
 *
˛n
;

152 
ngx_ˇched_›í_fûe_t
 *
fûe
;

153 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

154 
ngx_›í_fûe_ˇche_˛ónup_t
 *
of˛n
;

156 
of
->
fd
 = 
NGX_INVALID_FILE
;

157 
of
->
îr
 = 0;

159 i‡(
ˇche
 =
NULL
) {

161 i‡(
of
->
ã°_⁄ly
) {

163 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
poﬁ
->
log
)

164 =
NGX_FILE_ERROR
)

166  
NGX_ERROR
;

169 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

170 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

171 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

172 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

173 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

174 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

175 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

176 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

178  
NGX_OK
;

181 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

182 i‡(
˛n
 =
NULL
) {

183  
NGX_ERROR
;

186 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

188 i‡(
rc
 =
NGX_OK
 && !
of
->
is_dú
) {

189 
˛n
->
h™dÀr
 = 
ngx_poﬁ_˛ónup_fûe
;

190 
˛nf
 = 
˛n
->
d©a
;

192 
˛nf
->
fd
 = 
of
->fd;

193 
˛nf
->
«me
 =Çame->
d©a
;

194 
˛nf
->
log
 = 
poﬁ
->log;

197  
rc
;

200 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_›í_fûe_ˇche_˛ónup_t
));

201 i‡(
˛n
 =
NULL
) {

202  
NGX_ERROR
;

205 
now
 = 
	`ngx_time
();

207 
hash
 = 
	`ngx_¸c32_l⁄g
(
«me
->
d©a
,Çame->
Àn
);

209 
fûe
 = 
	`ngx_›í_fûe_lookup
(
ˇche
, 
«me
, 
hash
);

211 i‡(
fûe
) {

213 
fûe
->
u£s
++;

215 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

217 i‡(
fûe
->
fd
 =
NGX_INVALID_FILE
 && fûe->
îr
 =0 && !fûe->
is_dú
) {

221 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

223 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

224 
Áûed
;

227 
add_evít
;

230 i‡(
fûe
->
u£_evít


231 || (
fûe
->
evít
 =
NULL


232 && (
of
->
uniq
 =0 || of->uniq =
fûe
->uniq)

233 && 
now
 - 
fûe
->
¸óãd
 < 
of
->
vÆid


234 #i‡(
NGX_HAVE_OPENAT
)

235 && 
of
->
dißbÀ_symlöks
 =
fûe
->disable_symlinks

236 && 
of
->
dißbÀ_symlöks_‰om
 =
fûe
->disable_symlinks_from

240 i‡(
fûe
->
îr
 == 0) {

242 
of
->
fd
 = 
fûe
->fd;

243 
of
->
uniq
 = 
fûe
->uniq;

244 
of
->
mtime
 = 
fûe
->mtime;

245 
of
->
size
 = 
fûe
->size;

247 
of
->
is_dú
 = 
fûe
->is_dir;

248 
of
->
is_fûe
 = 
fûe
->is_file;

249 
of
->
is_lök
 = 
fûe
->is_link;

250 
of
->
is_exec
 = 
fûe
->is_exec;

251 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

253 i‡(!
fûe
->
is_dú
) {

254 
fûe
->
cou¡
++;

255 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

259 
of
->
îr
 = 
fûe
->err;

260 #i‡(
NGX_HAVE_OPENAT
)

261 
of
->
Áûed
 = 
fûe
->
dißbÀ_symlöks
 ? 
ngx_›í©_fûe_n


262 : 
ngx_›í_fûe_n
;

264 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

268 
found
;

271 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

273 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
);

275 i‡(
fûe
->
is_dú
) {

283 
of
->
ã°_dú
 = 1;

286 
of
->
fd
 = 
fûe
->fd;

287 
of
->
uniq
 = 
fûe
->uniq;

289 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

291 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

292 
Áûed
;

295 i‡(
of
->
is_dú
) {

297 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

298 
upd©e
;

303 } i‡(
of
->
îr
 == 0) {

305 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

306 
add_evít
;

309 i‡(
of
->
uniq
 =
fûe
->uniq) {

311 i‡(
fûe
->
evít
) {

312 
fûe
->
u£_evít
 = 1;

315 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

317 
upd©e
;

324 i‡(
fûe
->
îr
 || fûe->
is_dú
) {

325 
upd©e
;

331 i‡(
fûe
->
cou¡
 == 0) {

333 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

335 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

336 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

337 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

340 
add_evít
;

343 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

345 
ˇche
->
cuºít
--;

347 
fûe
->
˛o£
 = 1;

349 
¸óã
;

354 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

356 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

357 
Áûed
;

360 
¸óã
:

362 i‡(
ˇche
->
cuºít
 >ˇche->
max
) {

363 
	`ngx_expúe_ﬁd_ˇched_fûes
(
ˇche
, 0, 
poﬁ
->
log
);

366 
fûe
 = 
	`ngx_Æloc
((
ngx_ˇched_›í_fûe_t
), 
poﬁ
->
log
);

368 i‡(
fûe
 =
NULL
) {

369 
Áûed
;

372 
fûe
->
«me
 = 
	`ngx_Æloc
“ame->
Àn
 + 1, 
poﬁ
->
log
);

374 i‡(
fûe
->
«me
 =
NULL
) {

375 
	`ngx_‰ì
(
fûe
);

376 
fûe
 = 
NULL
;

377 
Áûed
;

380 
	`ngx_˝y°∫
(
fûe
->
«me
,Çame->
d©a
,Çame->
Àn
 + 1);

382 
fûe
->
node
.
key
 = 
hash
;

384 
	`ngx_rbåì_ö£π
(&
ˇche
->
rbåì
, &
fûe
->
node
);

386 
ˇche
->
cuºít
++;

388 
fûe
->
u£s
 = 1;

389 
fûe
->
cou¡
 = 0;

390 
fûe
->
u£_evít
 = 0;

391 
fûe
->
evít
 = 
NULL
;

393 
add_evít
:

395 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

397 
upd©e
:

399 
fûe
->
fd
 = 
of
->fd;

400 
fûe
->
îr
 = 
of
->err;

401 #i‡(
NGX_HAVE_OPENAT
)

402 
fûe
->
dißbÀ_symlöks
 = 
of
->disable_symlinks;

403 
fûe
->
dißbÀ_symlöks_‰om
 = 
of
->disable_symlinks_from;

406 i‡(
of
->
îr
 == 0) {

407 
fûe
->
uniq
 = 
of
->uniq;

408 
fûe
->
mtime
 = 
of
->mtime;

409 
fûe
->
size
 = 
of
->size;

411 
fûe
->
˛o£
 = 0;

413 
fûe
->
is_dú
 = 
of
->is_dir;

414 
fûe
->
is_fûe
 = 
of
->is_file;

415 
fûe
->
is_lök
 = 
of
->is_link;

416 
fûe
->
is_exec
 = 
of
->is_exec;

417 
fûe
->
is_dúe˘io
 = 
of
->is_directio;

419 i‡(!
of
->
is_dú
) {

420 
fûe
->
cou¡
++;

424 
fûe
->
¸óãd
 = 
now
;

426 
found
:

428 
fûe
->
ac˚s£d
 = 
now
;

430 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

432 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

434 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
, fûe->
u£s
);

436 i‡(
of
->
îr
 == 0) {

438 i‡(!
of
->
is_dú
) {

439 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_˛ónup
;

440 
of˛n
 = 
˛n
->
d©a
;

442 
of˛n
->
ˇche
 = cache;

443 
of˛n
->
fûe
 = file;

444 
of˛n
->
mö_u£s
 = 
of
->min_uses;

445 
of˛n
->
log
 = 
poﬁ
->log;

448  
NGX_OK
;

451  
NGX_ERROR
;

453 
Áûed
:

455 i‡(
fûe
) {

456 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

458 
ˇche
->
cuºít
--;

460 i‡(
fûe
->
cou¡
 == 0) {

462 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

463 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

464 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

465 
ngx_˛o£_fûe_n
 " \"%s\" failed",

466 
fûe
->
«me
);

470 
	`ngx_‰ì
(
fûe
->
«me
);

471 
	`ngx_‰ì
(
fûe
);

474 
fûe
->
˛o£
 = 1;

478 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

479 i‡(
	`ngx_˛o£_fûe
(
of
->
fd
Ë=
NGX_FILE_ERROR
) {

480 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

481 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

485  
NGX_ERROR
;

486 
	}
}

489 #i‡(
NGX_HAVE_OPENAT
)

491 
ngx_fd_t


492 
	$ngx_›í©_fûe_ow√r
(
ngx_fd_t
 
©_fd
, c⁄° 
u_ch¨
 *
«me
,

493 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

495 
ngx_fd_t
 
fd
;

496 
ngx_îr_t
 
îr
;

497 
ngx_fûe_öfo_t
 
fi
, 
©fi
;

511 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
);

513 i‡(
fd
 =
NGX_INVALID_FILE
) {

514  
NGX_INVALID_FILE
;

517 i‡(
	`ngx_fûe_©_öfo
(
©_fd
, 
«me
, &
©fi
, 
AT_SYMLINK_NOFOLLOW
)

518 =
NGX_FILE_ERROR
)

520 
îr
 = 
ngx_î∫o
;

521 
Áûed
;

524 #i‡(
NGX_HAVE_O_PATH
)

525 i‡(
	`ngx_fûe_o_∑th_öfo
(
fd
, &
fi
, 
log
Ë=
NGX_ERROR
) {

526 
îr
 = 
ngx_î∫o
;

527 
Áûed
;

530 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

531 
îr
 = 
ngx_î∫o
;

532 
Áûed
;

536 i‡(
fi
.
°_uid
 !
©fi
.st_uid) {

537 
îr
 = 
NGX_ELOOP
;

538 
Áûed
;

541  
fd
;

543 
Áûed
:

545 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

546 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

547 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

550 
	`ngx_£t_î∫o
(
îr
);

552  
NGX_INVALID_FILE
;

553 
	}
}

556 #i‡(
NGX_HAVE_O_PATH
)

558 
ngx_öt_t


559 
	$ngx_fûe_o_∑th_öfo
(
ngx_fd_t
 
fd
, 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
)

561 
ngx_uöt_t
 
u£_f°©
 = 1;

585 i‡(
u£_f°©
) {

586 i‡(
	`ngx_fd_öfo
(
fd
, 
fi
Ë!
NGX_FILE_ERROR
) {

587  
NGX_OK
;

590 i‡(
ngx_î∫o
 !
NGX_EBADF
) {

591  
NGX_ERROR
;

594 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

598 
u£_f°©
 = 0;

601 i‡(
	`ngx_fûe_©_öfo
(
fd
, "", 
fi
, 
AT_EMPTY_PATH
Ë!
NGX_FILE_ERROR
) {

602  
NGX_OK
;

605  
NGX_ERROR
;

606 
	}
}

613 
ngx_fd_t


614 
	$ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

615 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

617 
ngx_fd_t
 
fd
;

619 #i‡!(
NGX_HAVE_OPENAT
)

621 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

623 i‡(
fd
 =
NGX_INVALID_FILE
) {

624 
of
->
îr
 = 
ngx_î∫o
;

625 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

626  
NGX_INVALID_FILE
;

629  
fd
;

633 
u_ch¨
 *
p
, *
˝
, *
íd
;

634 
ngx_fd_t
 
©_fd
;

635 
ngx_°r_t
 
©_«me
;

637 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

638 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

640 i‡(
fd
 =
NGX_INVALID_FILE
) {

641 
of
->
îr
 = 
ngx_î∫o
;

642 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

643  
NGX_INVALID_FILE
;

646  
fd
;

649 
p
 = 
«me
->
d©a
;

650 
íd
 = 
p
 + 
«me
->
Àn
;

652 
©_«me
 = *
«me
;

654 i‡(
of
->
dißbÀ_symlöks_‰om
) {

656 
˝
 = 
p
 + 
of
->
dißbÀ_symlöks_‰om
;

658 *
˝
 = '\0';

660 
©_fd
 = 
	`ngx_›í_fûe
(
p
, 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

661 
NGX_FILE_OPEN
, 0);

663 *
˝
 = '/';

665 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

666 
of
->
îr
 = 
ngx_î∫o
;

667 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

668  
NGX_INVALID_FILE
;

671 
©_«me
.
Àn
 = 
of
->
dißbÀ_symlöks_‰om
;

672 
p
 = 
˝
 + 1;

674 } i‡(*
p
 == '/') {

676 
©_fd
 = 
	`ngx_›í_fûe
("/",

677 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

678 
NGX_FILE_OPEN
, 0);

680 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

681 
of
->
îr
 = 
ngx_î∫o
;

682 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

683  
NGX_INVALID_FILE
;

686 
©_«me
.
Àn
 = 1;

687 
p
++;

690 
©_fd
 = 
NGX_AT_FDCWD
;

694 
˝
 = 
	`ngx_°æchr
(
p
, 
íd
, '/');

695 i‡(
˝
 =
NULL
) {

699 i‡(
˝
 =
p
) {

700 
p
++;

704 *
˝
 = '\0';

706 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER
) {

707 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
,

708 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

709 
NGX_FILE_OPEN
, 0, 
log
);

712 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
,

713 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
|
NGX_FILE_NOFOLLOW
,

714 
NGX_FILE_OPEN
, 0);

717 *
˝
 = '/';

719 i‡(
fd
 =
NGX_INVALID_FILE
) {

720 
of
->
îr
 = 
ngx_î∫o
;

721 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

722 
Áûed
;

725 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

726 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

727 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

730 
p
 = 
˝
 + 1;

731 
©_fd
 = 
fd
;

732 
©_«me
.
Àn
 = 
˝
 -át_«me.
d©a
;

735 i‡(
p
 =
íd
) {

748 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, ".", 
mode
, 
¸óã
, 
ac˚ss
);

749 
d⁄e
;

752 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER


753 && !(
¸óã
 & (
NGX_FILE_CREATE_OR_OPEN
|
NGX_FILE_TRUNCATE
)))

755 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
, 
mode
, 
¸óã
, 
ac˚ss
, 
log
);

758 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
, 
mode
|
NGX_FILE_NOFOLLOW
, 
¸óã
, 
ac˚ss
);

761 
d⁄e
:

763 i‡(
fd
 =
NGX_INVALID_FILE
) {

764 
of
->
îr
 = 
ngx_î∫o
;

765 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

768 
Áûed
:

770 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

771 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

772 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

775  
fd
;

777 
	}
}

780 
ngx_öt_t


781 
	$ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

782 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
)

784 
ngx_öt_t
 
rc
;

786 #i‡!(
NGX_HAVE_OPENAT
)

788 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

790 i‡(
rc
 =
NGX_FILE_ERROR
) {

791 
of
->
îr
 = 
ngx_î∫o
;

792 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

793  
NGX_FILE_ERROR
;

796  
rc
;

800 
ngx_fd_t
 
fd
;

802 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

804 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

806 i‡(
rc
 =
NGX_FILE_ERROR
) {

807 
of
->
îr
 = 
ngx_î∫o
;

808 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

809  
NGX_FILE_ERROR
;

812  
rc
;

815 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

816 
NGX_FILE_OPEN
, 0, 
log
);

818 i‡(
fd
 =
NGX_INVALID_FILE
) {

819  
NGX_FILE_ERROR
;

822 
rc
 = 
	`ngx_fd_öfo
(
fd
, 
fi
);

824 i‡(
rc
 =
NGX_FILE_ERROR
) {

825 
of
->
îr
 = 
ngx_î∫o
;

826 
of
->
Áûed
 = 
ngx_fd_öfo_n
;

829 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

830 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

831 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

834  
rc
;

836 
	}
}

839 
ngx_öt_t


840 
	$ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

841 
ngx_log_t
 *
log
)

843 
ngx_fd_t
 
fd
;

844 
ngx_fûe_öfo_t
 
fi
;

846 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

848 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

849 
of
->
fd
 = 
NGX_INVALID_FILE
;

850  
NGX_ERROR
;

853 i‡(
of
->
uniq
 =
	`ngx_fûe_uniq
(&
fi
)) {

854 
d⁄e
;

857 } i‡(
of
->
ã°_dú
) {

859 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

860 
of
->
fd
 = 
NGX_INVALID_FILE
;

861  
NGX_ERROR
;

864 i‡(
	`ngx_is_dú
(&
fi
)) {

865 
d⁄e
;

869 i‡(!
of
->
log
) {

876 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

877 
NGX_FILE_OPEN
, 0, 
log
);

880 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_APPEND
,

881 
NGX_FILE_CREATE_OR_OPEN
,

882 
NGX_FILE_DEFAULT_ACCESS
, 
log
);

885 i‡(
fd
 =
NGX_INVALID_FILE
) {

886 
of
->
fd
 = 
NGX_INVALID_FILE
;

887  
NGX_ERROR
;

890 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

891 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 
ngx_î∫o
,

892 
ngx_fd_öfo_n
 " \"%V\" faûed", 
«me
);

894 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

895 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

896 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

899 
of
->
fd
 = 
NGX_INVALID_FILE
;

901  
NGX_ERROR
;

904 i‡(
	`ngx_is_dú
(&
fi
)) {

905 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

906 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

907 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

910 
of
->
fd
 = 
NGX_INVALID_FILE
;

913 
of
->
fd
 = fd;

915 i‡(
of
->
ªad_ahód
 && 
	`ngx_fûe_size
(&
fi
Ë> 
NGX_MIN_READ_AHEAD
) {

916 i‡(
	`ngx_ªad_ahód
(
fd
, 
of
->
ªad_ahód
Ë=
NGX_ERROR
) {

917 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

918 
ngx_ªad_ahód_n
 " \"%V\" faûed", 
«me
);

922 i‡(
of
->
dúe˘io
 <
	`ngx_fûe_size
(&
fi
)) {

923 i‡(
	`ngx_dúe˘io_⁄
(
fd
Ë=
NGX_FILE_ERROR
) {

924 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

925 
ngx_dúe˘io_⁄_n
 " \"%V\" faûed", 
«me
);

928 
of
->
is_dúe˘io
 = 1;

933 
d⁄e
:

935 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

936 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

937 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

938 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

939 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

940 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

941 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

942 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

944  
NGX_OK
;

945 
	}
}

954 
	$ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

955 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
)

957 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

959 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_VNODE_EVENT
)

960 || !
of
->
evíts


961 || 
fûe
->
evít


962 || 
of
->
fd
 =
NGX_INVALID_FILE


963 || 
fûe
->
u£s
 < 
of
->
mö_u£s
)

968 
fûe
->
u£_evít
 = 0;

970 
fûe
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
log
);

971 i‡(
fûe
->
evít
=
NULL
) {

975 
„v
 = 
	`ngx_Æloc
((
ngx_›í_fûe_ˇche_evít_t
), 
log
);

976 i‡(
„v
 =
NULL
) {

977 
	`ngx_‰ì
(
fûe
->
evít
);

978 
fûe
->
evít
 = 
NULL
;

982 
„v
->
fd
 = 
of
->fd;

983 
„v
->
fûe
 = file;

984 
„v
->
ˇche
 = cache;

986 
fûe
->
evít
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_ªmove
;

987 
fûe
->
evít
->
d©a
 = 
„v
;

995 
fûe
->
evít
->
log
 = 
ngx_cy˛e
->log;

997 i‡(
	`ngx_add_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
, 
NGX_ONESHOT_EVENT
)

998 !
NGX_OK
)

1000 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

1001 
	`ngx_‰ì
(
fûe
->
evít
);

1002 
fûe
->
evít
 = 
NULL
;

1014 
	}
}

1018 
	$ngx_›í_fûe_˛ónup
(*
d©a
)

1020 
ngx_›í_fûe_ˇche_˛ónup_t
 *
c
 = 
d©a
;

1022 
c
->
fûe
->
cou¡
--;

1024 
	`ngx_˛o£_ˇched_fûe
(
c
->
ˇche
, c->
fûe
, c->
mö_u£s
, c->
log
);

1027 
	`ngx_expúe_ﬁd_ˇched_fûes
(
c
->
ˇche
, 1, c->
log
);

1028 
	}
}

1032 
	$ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

1033 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
)

1035 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

1037 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
u£s
, fûe->
˛o£
);

1039 i‡(!
fûe
->
˛o£
) {

1041 
fûe
->
ac˚s£d
 = 
	`ngx_time
();

1043 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

1045 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

1047 i‡(
fûe
->
u£s
 >
mö_u£s
 || fûe->
cou¡
) {

1052 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

1054 i‡(
fûe
->
cou¡
) {

1058 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

1060 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

1061 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1062 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
);

1065 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

1068 i‡(!
fûe
->
˛o£
) {

1072 
	`ngx_‰ì
(
fûe
->
«me
);

1073 
	`ngx_‰ì
(
fûe
);

1074 
	}
}

1078 
	$ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
)

1080 i‡(
fûe
->
evít
 =
NULL
) {

1084 (Ë
	`ngx_dñ_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
,

1085 
fûe
->
cou¡
 ? 
NGX_FLUSH_EVENT
 : 
NGX_CLOSE_EVENT
);

1087 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

1088 
	`ngx_‰ì
(
fûe
->
evít
);

1089 
fûe
->
evít
 = 
NULL
;

1090 
fûe
->
u£_evít
 = 0;

1091 
	}
}

1095 
	$ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_uöt_t
 
n
,

1096 
ngx_log_t
 *
log
)

1098 
time_t
 
now
;

1099 
ngx_queue_t
 *
q
;

1100 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1102 
now
 = 
	`ngx_time
();

1110 
n
 < 3) {

1112 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

1116 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

1118 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

1120 i‡(
n
++ !0 && 
now
 - 
fûe
->
ac˚s£d
 <
ˇche
->
öa˘ive
) {

1124 
	`ngx_queue_ªmove
(
q
);

1126 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

1128 
ˇche
->
cuºít
--;

1130 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

1131 "expúêˇched o≥¿fûe: %s", 
fûe
->
«me
);

1133 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

1134 
fûe
->
˛o£
 = 1;

1135 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
log
);

1138 
	`ngx_‰ì
(
fûe
->
«me
);

1139 
	`ngx_‰ì
(
fûe
);

1142 
	}
}

1146 
	$ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1147 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1149 
ngx_rbåì_node_t
 **
p
;

1150 
ngx_ˇched_›í_fûe_t
 *
fûe
, *
fûe_ãmp
;

1154 i‡(
node
->
key
 < 
ãmp
->key) {

1156 
p
 = &
ãmp
->
À·
;

1158 } i‡(
node
->
key
 > 
ãmp
->key) {

1160 
p
 = &
ãmp
->
right
;

1164 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1165 
fûe_ãmp
 = (
ngx_ˇched_›í_fûe_t
 *Ë
ãmp
;

1167 
p
 = (
	`ngx_°rcmp
(
fûe
->
«me
, 
fûe_ãmp
->name) < 0)

1168 ? &
ãmp
->
À·
 : &ãmp->
right
;

1171 i‡(*
p
 =
£¡öñ
) {

1175 
ãmp
 = *
p
;

1178 *
p
 = 
node
;

1179 
node
->
∑ª¡
 = 
ãmp
;

1180 
node
->
À·
 = 
£¡öñ
;

1181 
node
->
right
 = 
£¡öñ
;

1182 
	`ngx_rbt_ªd
(
node
);

1183 
	}
}

1186 
ngx_ˇched_›í_fûe_t
 *

1187 
	$ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

1188 
uöt32_t
 
hash
)

1190 
ngx_öt_t
 
rc
;

1191 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1192 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1194 
node
 = 
ˇche
->
rbåì
.
roŸ
;

1195 
£¡öñ
 = 
ˇche
->
rbåì
.sentinel;

1197 
node
 !
£¡öñ
) {

1199 i‡(
hash
 < 
node
->
key
) {

1200 
node
 =Çode->
À·
;

1204 i‡(
hash
 > 
node
->
key
) {

1205 
node
 =Çode->
right
;

1211 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1213 
rc
 = 
	`ngx_°rcmp
(
«me
->
d©a
, 
fûe
->name);

1215 i‡(
rc
 == 0) {

1216  
fûe
;

1219 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1222  
NULL
;

1223 
	}
}

1227 
	$ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
)

1229 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1230 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

1232 
„v
 = 
ev
->
d©a
;

1233 
fûe
 = 
„v
->file;

1235 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

1237 
	`ngx_rbåì_dñëe
(&
„v
->
ˇche
->
rbåì
, &
fûe
->
node
);

1239 
„v
->
ˇche
->
cuºít
--;

1242 
fûe
->
evít
 = 
NULL
;

1243 
fûe
->
u£_evít
 = 0;

1245 
fûe
->
˛o£
 = 1;

1247 
	`ngx_˛o£_ˇched_fûe
(
„v
->
ˇche
, 
fûe
, 0, 
ev
->
log
);

1251 
	`ngx_‰ì
(
ev
->
d©a
);

1252 
	`ngx_‰ì
(
ev
);

1253 
	}
}

	@src/core/ngx_open_file_cache.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_OPEN_FILE_CACHE_H_INCLUDED_


13 
	#_NGX_OPEN_FILE_CACHE_H_INCLUDED_


	)

16 
	#NGX_OPEN_FILE_DIRECTIO_OFF
 
NGX_MAX_OFF_T_VALUE


	)

20 
ngx_fd_t
 
	mfd
;

21 
ngx_fûe_uniq_t
 
	muniq
;

22 
time_t
 
	mmtime
;

23 
off_t
 
	msize
;

24 
off_t
 
	mfs_size
;

25 
off_t
 
	mdúe˘io
;

26 
size_t
 
	mªad_ahód
;

28 
ngx_îr_t
 
	mîr
;

29 *
	mÁûed
;

31 
time_t
 
	mvÆid
;

33 
ngx_uöt_t
 
	mmö_u£s
;

35 #i‡(
NGX_HAVE_OPENAT
)

36 
size_t
 
	mdißbÀ_symlöks_‰om
;

37 
	mdißbÀ_symlöks
:2;

40 
	mã°_dú
:1;

41 
	mã°_⁄ly
:1;

42 
	mlog
:1;

43 
	mîr‹s
:1;

44 
	mevíts
:1;

46 
	mis_dú
:1;

47 
	mis_fûe
:1;

48 
	mis_lök
:1;

49 
	mis_exec
:1;

50 
	mis_dúe˘io
:1;

51 } 
	tngx_›í_fûe_öfo_t
;

54 
ngx_ˇched_›í_fûe_s
 
	tngx_ˇched_›í_fûe_t
;

56 
	sngx_ˇched_›í_fûe_s
 {

57 
ngx_rbåì_node_t
 
	mnode
;

58 
ngx_queue_t
 
	mqueue
;

60 
u_ch¨
 *
	m«me
;

61 
time_t
 
	m¸óãd
;

62 
time_t
 
	mac˚s£d
;

64 
ngx_fd_t
 
	mfd
;

65 
ngx_fûe_uniq_t
 
	muniq
;

66 
time_t
 
	mmtime
;

67 
off_t
 
	msize
;

68 
ngx_îr_t
 
	mîr
;

70 
uöt32_t
 
	mu£s
;

72 #i‡(
NGX_HAVE_OPENAT
)

73 
size_t
 
	mdißbÀ_symlöks_‰om
;

74 
	mdißbÀ_symlöks
:2;

77 
	mcou¡
:24;

78 
	m˛o£
:1;

79 
	mu£_evít
:1;

81 
	mis_dú
:1;

82 
	mis_fûe
:1;

83 
	mis_lök
:1;

84 
	mis_exec
:1;

85 
	mis_dúe˘io
:1;

87 
ngx_evít_t
 *
	mevít
;

92 
ngx_rbåì_t
 
	mrbåì
;

93 
ngx_rbåì_node_t
 
	m£¡öñ
;

94 
ngx_queue_t
 
	mexpúe_queue
;

96 
ngx_uöt_t
 
	mcuºít
;

97 
ngx_uöt_t
 
	mmax
;

98 
time_t
 
	möa˘ive
;

99 } 
	tngx_›í_fûe_ˇche_t
;

103 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

104 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

105 
ngx_uöt_t
 
	mmö_u£s
;

106 
ngx_log_t
 *
	mlog
;

107 } 
	tngx_›í_fûe_ˇche_˛ónup_t
;

113 *
	md©a
;

114 
ngx_evít_t
 *
	mªad
;

115 
ngx_evít_t
 *
	mwrôe
;

116 
ngx_fd_t
 
	mfd
;

118 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

119 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

120 } 
	tngx_›í_fûe_ˇche_evít_t
;

123 
ngx_›í_fûe_ˇche_t
 *
ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
,

124 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
);

125 
ngx_öt_t
 
ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

126 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
);

	@src/core/ngx_output_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
	#NGX_SENDFILE_LIMIT
 4096

	)

27 
	#NGX_NONE
 1

	)

30 
ngx_ölöe
 
ngx_öt_t


31 
ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
);

32 #i‡(
NGX_HAVE_AIO_SENDFILE
)

33 
ngx_öt_t
 
ngx_ouçut_chaö_aio_£tup
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

34 
ngx_fûe_t
 *
fûe
);

36 
ngx_öt_t
 
ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
,

37 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
);

38 
ngx_öt_t
 
ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

39 
off_t
 
bsize
);

40 
ngx_öt_t
 
ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

41 
off_t
 
bsize
);

42 
ngx_öt_t
 
ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
);

45 
ngx_öt_t


46 
	$ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

48 
off_t
 
bsize
;

49 
ngx_öt_t
 
rc
, 
œ°
;

50 
ngx_chaö_t
 *
˛
, *
out
, **
œ°_out
;

52 i‡(
˘x
->
ö
 =
NULL
 && ctx->
busy
 == NULL

53 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

54 && !
˘x
->
aio


64 i‡(
ö
 =
NULL
) {

65  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

68 i‡(
ö
->
√xt
 =
NULL


69 #i‡(
NGX_SENDFILE_LIMIT
)

70 && !(
ö
->
buf
->
ö_fûe
 && in->buf->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

72 && 
	`ngx_ouçut_chaö_as_is
(
˘x
, 
ö
->
buf
))

74  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

80 i‡(
ö
) {

81 i‡(
	`ngx_ouçut_chaö_add_c›y
(
˘x
->
poﬁ
, &˘x->
ö
, inË=
NGX_ERROR
) {

82  
NGX_ERROR
;

86 
out
 = 
NULL
;

87 
œ°_out
 = &
out
;

88 
œ°
 = 
NGX_NONE
;

92 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

93 i‡(
˘x
->
aio
) {

94  
NGX_AGAIN
;

98 
˘x
->
ö
) {

105 
bsize
 = 
	`ngx_buf_size
(
˘x
->
ö
->
buf
);

107 i‡(
bsize
 =0 && !
	`ngx_buf_•ecül
(
˘x
->
ö
->
buf
)) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

112 
˘x
->
ö
->
buf
->
ãmp‹¨y
,

113 
˘x
->
ö
->
buf
->
ªcy˛ed
,

114 
˘x
->
ö
->
buf
->
ö_fûe
,

115 
˘x
->
ö
->
buf
->
°¨t
,

116 
˘x
->
ö
->
buf
->
pos
,

117 
˘x
->
ö
->
buf
->
œ°
,

118 
˘x
->
ö
->
buf
->
fûe
,

119 
˘x
->
ö
->
buf
->
fûe_pos
,

120 
˘x
->
ö
->
buf
->
fûe_œ°
);

122 
	`ngx_debug_poöt
();

124 
˘x
->
ö
 = ctx->ö->
√xt
;

129 i‡(
	`ngx_ouçut_chaö_as_is
(
˘x
, ctx->
ö
->
buf
)) {

133 
˛
 = 
˘x
->
ö
;

134 
˘x
->
ö
 = 
˛
->
√xt
;

136 *
œ°_out
 = 
˛
;

137 
œ°_out
 = &
˛
->
√xt
;

138 
˛
->
√xt
 = 
NULL
;

143 i‡(
˘x
->
buf
 =
NULL
) {

145 
rc
 = 
	`ngx_ouçut_chaö_Æign_fûe_buf
(
˘x
, 
bsize
);

147 i‡(
rc
 =
NGX_ERROR
) {

148  
NGX_ERROR
;

151 i‡(
rc
 !
NGX_OK
) {

153 i‡(
˘x
->
‰ì
) {

157 
˛
 = 
˘x
->
‰ì
;

158 
˘x
->
buf
 = 
˛
->buf;

159 
˘x
->
‰ì
 = 
˛
->
√xt
;

161 
	`ngx_‰ì_chaö
(
˘x
->
poﬁ
, 
˛
);

163 } i‡(
out
 || 
˘x
->
Æloˇãd
 =˘x->
bufs
.
num
) {

167 } i‡(
	`ngx_ouçut_chaö_gë_buf
(
˘x
, 
bsize
Ë!
NGX_OK
) {

168  
NGX_ERROR
;

173 
rc
 = 
	`ngx_ouçut_chaö_c›y_buf
(
˘x
);

175 i‡(
rc
 =
NGX_ERROR
) {

176  
rc
;

179 i‡(
rc
 =
NGX_AGAIN
) {

180 i‡(
out
) {

184  
rc
;

189 i‡(
	`ngx_buf_size
(
˘x
->
ö
->
buf
) == 0) {

190 
˘x
->
ö
 = ctx->ö->
√xt
;

193 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

194 i‡(
˛
 =
NULL
) {

195  
NGX_ERROR
;

198 
˛
->
buf
 = 
˘x
->buf;

199 
˛
->
√xt
 = 
NULL
;

200 *
œ°_out
 = 
˛
;

201 
œ°_out
 = &
˛
->
√xt
;

202 
˘x
->
buf
 = 
NULL
;

205 i‡(
out
 =
NULL
 && 
œ°
 !
NGX_NONE
) {

207 i‡(
˘x
->
ö
) {

208  
NGX_AGAIN
;

211  
œ°
;

214 
œ°
 = 
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
out
);

216 i‡(
œ°
 =
NGX_ERROR
 ||Üa° =
NGX_DONE
) {

217  
œ°
;

220 
	`ngx_chaö_upd©e_chaös
(
˘x
->
poﬁ
, &˘x->
‰ì
, &˘x->
busy
, &
out
,

221 
˘x
->
èg
);

222 
œ°_out
 = &
out
;

224 
	}
}

227 
ngx_ölöe
 
ngx_öt_t


228 
	$ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
)

230 
ngx_uöt_t
 
£ndfûe
;

232 i‡(
	`ngx_buf_•ecül
(
buf
)) {

236 #i‡(
NGX_THREADS
)

237 i‡(
buf
->
ö_fûe
) {

238 
buf
->
fûe
->
thªad_h™dÀr
 = 
˘x
->thread_handler;

239 
buf
->
fûe
->
thªad_˘x
 = 
˘x
->
fûãr_˘x
;

243 i‡(
buf
->
ö_fûe
 && buf->
fûe
->
dúe˘io
) {

247 
£ndfûe
 = 
˘x
->sendfile;

249 #i‡(
NGX_SENDFILE_LIMIT
)

251 i‡(
buf
->
ö_fûe
 && buf->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

252 
£ndfûe
 = 0;

257 i‡(!
£ndfûe
) {

259 i‡(!
	`ngx_buf_ö_mem‹y
(
buf
)) {

263 
buf
->
ö_fûe
 = 0;

266 #i‡(
NGX_HAVE_AIO_SENDFILE
)

267 i‡(
˘x
->
aio_¥ñﬂd
 && 
buf
->
ö_fûe
) {

268 (Ë
	`ngx_ouçut_chaö_aio_£tup
(
˘x
, 
buf
->
fûe
);

272 i‡(
˘x
->
√ed_ö_mem‹y
 && !
	`ngx_buf_ö_mem‹y
(
buf
)) {

276 i‡(
˘x
->
√ed_ö_ãmp
 && (
buf
->
mem‹y
 || buf->
mm≠
)) {

281 
	}
}

284 #i‡(
NGX_HAVE_AIO_SENDFILE
)

286 
ngx_öt_t


287 
	$ngx_ouçut_chaö_aio_£tup
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_fûe_t
 *
fûe
)

289 
ngx_evít_aio_t
 *
aio
;

291 i‡(
fûe
->
aio
 =
NULL
 && 
	`ngx_fûe_aio_öô
(fûe, 
˘x
->
poﬁ
Ë!
NGX_OK
) {

292  
NGX_ERROR
;

295 
aio
 = 
fûe
->aio;

297 
aio
->
d©a
 = 
˘x
->
fûãr_˘x
;

298 
aio
->
¥ñﬂd_h™dÀr
 = 
˘x
->
aio_¥ñﬂd
;

300  
NGX_OK
;

301 
	}
}

306 
ngx_öt_t


307 
	$ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

308 
ngx_chaö_t
 *
ö
)

310 
ngx_chaö_t
 *
˛
, **
Œ
;

311 #i‡(
NGX_SENDFILE_LIMIT
)

312 
ngx_buf_t
 *
b
, *
buf
;

315 
Œ
 = 
chaö
;

317 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

318 
Œ
 = &
˛
->
√xt
;

321 
ö
) {

323 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

324 i‡(
˛
 =
NULL
) {

325  
NGX_ERROR
;

328 #i‡(
NGX_SENDFILE_LIMIT
)

330 
buf
 = 
ö
->buf;

332 i‡(
buf
->
ö_fûe


333 && 
buf
->
fûe_pos
 < 
NGX_SENDFILE_LIMIT


334 && 
buf
->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

338 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

339 i‡(
b
 =
NULL
) {

340  
NGX_ERROR
;

343 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

345 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

346 
buf
->
pos
 +(
ssize_t
Ë(
NGX_SENDFILE_LIMIT
 - buf->
fûe_pos
);

347 
b
->
œ°
 = 
buf
->
pos
;

350 
buf
->
fûe_pos
 = 
NGX_SENDFILE_LIMIT
;

351 
b
->
fûe_œ°
 = 
NGX_SENDFILE_LIMIT
;

353 
˛
->
buf
 = 
b
;

356 
˛
->
buf
 = buf;

357 
ö
 = in->
√xt
;

361 
˛
->
buf
 = 
ö
->buf;

362 
ö
 = in->
√xt
;

366 
˛
->
√xt
 = 
NULL
;

367 *
Œ
 = 
˛
;

368 
Œ
 = &
˛
->
√xt
;

371  
NGX_OK
;

372 
	}
}

375 
ngx_öt_t


376 
	$ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

378 
size_t
 
size
;

379 
ngx_buf_t
 *
ö
;

381 
ö
 = 
˘x
->ö->
buf
;

383 i‡(
ö
->
fûe
 =
NULL
 || !ö->fûe->
dúe˘io
) {

384  
NGX_DECLINED
;

387 
˘x
->
dúe˘io
 = 1;

389 
size
 = (
size_t
Ë(
ö
->
fûe_pos
 - (ö->fûe_po†& ~(
˘x
->
Æignmít
 - 1)));

391 i‡(
size
 == 0) {

393 i‡(
bsize
 >(
off_t
Ë
˘x
->
bufs
.
size
) {

394  
NGX_DECLINED
;

397 
size
 = (
size_t
Ë
bsize
;

400 
size
 = (
size_t
Ë
˘x
->
Æignmít
 - size;

402 i‡((
off_t
Ë
size
 > 
bsize
) {

403 
size
 = (
size_t
Ë
bsize
;

407 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 
size
);

408 i‡(
˘x
->
buf
 =
NULL
) {

409  
NGX_ERROR
;

417 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

418 
˘x
->
u«lig√d
 = 1;

421  
NGX_OK
;

422 
	}
}

425 
ngx_öt_t


426 
	$ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

428 
size_t
 
size
;

429 
ngx_buf_t
 *
b
, *
ö
;

430 
ngx_uöt_t
 
ªcy˛ed
;

432 
ö
 = 
˘x
->ö->
buf
;

433 
size
 = 
˘x
->
bufs
.size;

434 
ªcy˛ed
 = 1;

436 i‡(
ö
->
œ°_ö_chaö
) {

438 i‡(
bsize
 < (
off_t
Ë
size
) {

445 
size
 = (
size_t
Ë
bsize
;

446 
ªcy˛ed
 = 0;

448 } i‡(!
˘x
->
dúe˘io


449 && 
˘x
->
bufs
.
num
 == 1

450 && (
bsize
 < (
off_t
Ë(
size
 + size / 4)))

458 
size
 = (
size_t
Ë
bsize
;

459 
ªcy˛ed
 = 0;

463 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
poﬁ
);

464 i‡(
b
 =
NULL
) {

465  
NGX_ERROR
;

468 i‡(
˘x
->
dúe˘io
) {

475 
b
->
°¨t
 = 
	`ngx_pmemÆign
(
˘x
->
poﬁ
, 
size
, (
size_t
Ë˘x->
Æignmít
);

476 i‡(
b
->
°¨t
 =
NULL
) {

477  
NGX_ERROR
;

481 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

482 i‡(
b
->
°¨t
 =
NULL
) {

483  
NGX_ERROR
;

487 
b
->
pos
 = b->
°¨t
;

488 
b
->
œ°
 = b->
°¨t
;

489 
b
->
íd
 = b->
œ°
 + 
size
;

490 
b
->
ãmp‹¨y
 = 1;

491 
b
->
èg
 = 
˘x
->tag;

492 
b
->
ªcy˛ed
 =Ñecycled;

494 
˘x
->
buf
 = 
b
;

495 
˘x
->
Æloˇãd
++;

497  
NGX_OK
;

498 
	}
}

501 
ngx_öt_t


502 
	$ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
)

504 
off_t
 
size
;

505 
ssize_t
 
n
;

506 
ngx_buf_t
 *
§c
, *
d°
;

507 
ngx_uöt_t
 
£ndfûe
;

509 
§c
 = 
˘x
->
ö
->
buf
;

510 
d°
 = 
˘x
->
buf
;

512 
size
 = 
	`ngx_buf_size
(
§c
);

513 
size
 = 
	`ngx_mö
(size, 
d°
->
íd
 - d°->
pos
);

515 
£ndfûe
 = 
˘x
->£ndfûê& !˘x->
dúe˘io
;

517 #i‡(
NGX_SENDFILE_LIMIT
)

519 i‡(
§c
->
ö_fûe
 && src->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

520 
£ndfûe
 = 0;

525 i‡(
	`ngx_buf_ö_mem‹y
(
§c
)) {

526 
	`ngx_mem˝y
(
d°
->
pos
, 
§c
->pos, (
size_t
Ë
size
);

527 
§c
->
pos
 +(
size_t
Ë
size
;

528 
d°
->
œ°
 +(
size_t
Ë
size
;

530 i‡(
§c
->
ö_fûe
) {

532 i‡(
£ndfûe
) {

533 
d°
->
ö_fûe
 = 1;

534 
d°
->
fûe
 = 
§c
->file;

535 
d°
->
fûe_pos
 = 
§c
->file_pos;

536 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
size
;

539 
d°
->
ö_fûe
 = 0;

542 
§c
->
fûe_pos
 +
size
;

545 
d°
->
ö_fûe
 = 0;

548 i‡(
§c
->
pos
 =§c->
œ°
) {

549 
d°
->
Êush
 = 
§c
->flush;

550 
d°
->
œ°_buf
 = 
§c
->last_buf;

551 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

556 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

558 i‡(
˘x
->
u«lig√d
) {

559 i‡(
	`ngx_dúe˘io_off
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

560 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

561 
ngx_dúe˘io_off_n
 " \"%s\" failed",

562 
§c
->
fûe
->
«me
.
d©a
);

568 #i‡(
NGX_HAVE_FILE_AIO
)

569 i‡(
˘x
->
aio_h™dÀr
) {

570 
n
 = 
	`ngx_fûe_aio_ªad
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

571 
§c
->
fûe_pos
, 
˘x
->
poﬁ
);

572 i‡(
n
 =
NGX_AGAIN
) {

573 
˘x
->
	`aio_h™dÀr
(˘x, 
§c
->
fûe
);

574  
NGX_AGAIN
;

579 #i‡(
NGX_THREADS
)

580 i‡(
§c
->
fûe
->
thªad_h™dÀr
) {

581 
n
 = 
	`ngx_thªad_ªad
(&
˘x
->
thªad_èsk
, 
§c
->
fûe
, 
d°
->
pos
,

582 (
size_t
Ë
size
, 
§c
->
fûe_pos
, 
˘x
->
poﬁ
);

583 i‡(
n
 =
NGX_AGAIN
) {

584 
˘x
->
aio
 = 1;

585  
NGX_AGAIN
;

591 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

592 
§c
->
fûe_pos
);

595 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

597 i‡(
˘x
->
u«lig√d
) {

598 
ngx_îr_t
 
îr
;

600 
îr
 = 
ngx_î∫o
;

602 i‡(
	`ngx_dúe˘io_⁄
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

603 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

604 
ngx_dúe˘io_⁄_n
 " \"%s\" failed",

605 
§c
->
fûe
->
«me
.
d©a
);

608 
	`ngx_£t_î∫o
(
îr
);

610 
˘x
->
u«lig√d
 = 0;

615 i‡(
n
 =
NGX_ERROR
) {

616  (
ngx_öt_t
Ë
n
;

619 i‡(
n
 !
size
) {

620 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

621 
ngx_ªad_fûe_n
 "Ñead only %z of %O from \"%s\"",

622 
n
, 
size
, 
§c
->
fûe
->
«me
.
d©a
);

623  
NGX_ERROR
;

626 
d°
->
œ°
 +
n
;

628 i‡(
£ndfûe
) {

629 
d°
->
ö_fûe
 = 1;

630 
d°
->
fûe
 = 
§c
->file;

631 
d°
->
fûe_pos
 = 
§c
->file_pos;

632 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
n
;

635 
d°
->
ö_fûe
 = 0;

638 
§c
->
fûe_pos
 +
n
;

640 i‡(
§c
->
fûe_pos
 =§c->
fûe_œ°
) {

641 
d°
->
Êush
 = 
§c
->flush;

642 
d°
->
œ°_buf
 = 
§c
->last_buf;

643 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

647  
NGX_OK
;

648 
	}
}

651 
ngx_öt_t


652 
	$ngx_chaö_wrôî
(*
d©a
, 
ngx_chaö_t
 *
ö
)

654 
ngx_chaö_wrôî_˘x_t
 *
˘x
 = 
d©a
;

656 
off_t
 
size
;

657 
ngx_chaö_t
 *
˛
, *
 
, *
chaö
;

658 
ngx_c⁄√˘i⁄_t
 *
c
;

660 
c
 = 
˘x
->
c⁄√˘i⁄
;

662 
size
 = 0; 
ö
; i¿ö->
√xt
) {

665 i‡(
	`ngx_buf_size
(
ö
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(in->buf)) {

667 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

670 
ö
->
buf
->
ãmp‹¨y
,

671 
ö
->
buf
->
ªcy˛ed
,

672 
ö
->
buf
->
ö_fûe
,

673 
ö
->
buf
->
°¨t
,

674 
ö
->
buf
->
pos
,

675 
ö
->
buf
->
œ°
,

676 
ö
->
buf
->
fûe
,

677 
ö
->
buf
->
fûe_pos
,

678 
ö
->
buf
->
fûe_œ°
);

680 
	`ngx_debug_poöt
();

686 
size
 +
	`ngx_buf_size
(
ö
->
buf
);

688 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

690 
ö
->
buf
->
Êush
, 
	`ngx_buf_size
(in->buf));

692 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

693 i‡(
˛
 =
NULL
) {

694  
NGX_ERROR
;

697 
˛
->
buf
 = 
ö
->buf;

698 
˛
->
√xt
 = 
NULL
;

699 *
˘x
->
œ°
 = 
˛
;

700 
˘x
->
œ°
 = &
˛
->
√xt
;

703 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

704 "chaö wrôî in: %p", 
˘x
->
out
);

706 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

709 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

711 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

714 
˛
->
buf
->
ãmp‹¨y
,

715 
˛
->
buf
->
ªcy˛ed
,

716 
˛
->
buf
->
ö_fûe
,

717 
˛
->
buf
->
°¨t
,

718 
˛
->
buf
->
pos
,

719 
˛
->
buf
->
œ°
,

720 
˛
->
buf
->
fûe
,

721 
˛
->
buf
->
fûe_pos
,

722 
˛
->
buf
->
fûe_œ°
);

724 
	`ngx_debug_poöt
();

730 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

733 i‡(
size
 =0 && !
c
->
buf„ªd
) {

734  
NGX_OK
;

737 
chaö
 = 
c
->
	`£nd_chaö
(c, 
˘x
->
out
, ctx->
limô
);

739 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

740 "chaö wrôî out: %p", 
chaö
);

742 i‡(
chaö
 =
NGX_CHAIN_ERROR
) {

743  
NGX_ERROR
;

746 
˛
 = 
˘x
->
out
; c»&& c»!
chaö
; ) {

747 
 
 = 
˛
;

748 
˛
 = cl->
√xt
;

749 
	`ngx_‰ì_chaö
(
˘x
->
poﬁ
, 
 
);

752 
˘x
->
out
 = 
chaö
;

754 i‡(
˘x
->
out
 =
NULL
) {

755 
˘x
->
œ°
 = &˘x->
out
;

757 i‡(!
c
->
buf„ªd
) {

758  
NGX_OK
;

762  
NGX_AGAIN
;

763 
	}
}

	@src/core/ngx_palloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

13 *
ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

16 
ngx_poﬁ_t
 *

17 
	$ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
)

19 
ngx_poﬁ_t
 *
p
;

21 
p
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
size
, 
log
);

22 i‡(
p
 =
NULL
) {

23  
NULL
;

26 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

27 
p
->
d
.
íd
 = (
u_ch¨
 *Ë∞+ 
size
;

28 
p
->
d
.
√xt
 = 
NULL
;

29 
p
->
d
.
Áûed
 = 0;

31 
size
 = sizê- (
ngx_poﬁ_t
);

32 
p
->
max
 = (
size
 < 
NGX_MAX_ALLOC_FROM_POOL
) ? size : NGX_MAX_ALLOC_FROM_POOL;

34 
p
->
cuºít
 =Ö;

35 
p
->
chaö
 = 
NULL
;

36 
p
->
œrge
 = 
NULL
;

37 
p
->
˛ónup
 = 
NULL
;

38 
p
->
log
 =Üog;

40  
p
;

41 
	}
}

45 
	$ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

47 
ngx_poﬁ_t
 *
p
, *
n
;

48 
ngx_poﬁ_œrge_t
 *
l
;

49 
ngx_poﬁ_˛ónup_t
 *
c
;

51 
c
 = 
poﬁ
->
˛ónup
; c; c = c->
√xt
) {

52 i‡(
c
->
h™dÀr
) {

53 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

54 "ru¿˛ónup: %p", 
c
);

55 
c
->
	`h™dÀr
(c->
d©a
);

59 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

61 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0, "‰ì: %p", 
l
->
Æloc
);

63 i‡(
l
->
Æloc
) {

64 
	`ngx_‰ì
(
l
->
Æloc
);

68 #i‡(
NGX_DEBUG
)

75 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

76 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

77 "‰ì: %p, unu£d: %uz", 
p
,Ö->
d
.
íd
 -Ö->d.
œ°
);

79 i‡(
n
 =
NULL
) {

86 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

87 
	`ngx_‰ì
(
p
);

89 i‡(
n
 =
NULL
) {

93 
	}
}

97 
	$ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

99 
ngx_poﬁ_t
 *
p
;

100 
ngx_poﬁ_œrge_t
 *
l
;

102 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

103 i‡(
l
->
Æloc
) {

104 
	`ngx_‰ì
(
l
->
Æloc
);

108 
p
 = 
poﬁ
;Ö;Ö =Ö->
d
.
√xt
) {

109 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

110 
p
->
d
.
Áûed
 = 0;

113 
poﬁ
->
cuºít
 =Öool;

114 
poﬁ
->
chaö
 = 
NULL
;

115 
poﬁ
->
œrge
 = 
NULL
;

116 
	}
}

120 
	$ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

122 
u_ch¨
 *
m
;

123 
ngx_poﬁ_t
 *
p
;

125 i‡(
size
 <
poﬁ
->
max
) {

127 
p
 = 
poﬁ
->
cuºít
;

130 
m
 = 
	`ngx_Æign_±r
(
p
->
d
.
œ°
, 
NGX_ALIGNMENT
);

132 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

133 
p
->
d
.
œ°
 = 
m
 + 
size
;

135  
m
;

138 
p
 =Ö->
d
.
√xt
;

140 } 
p
);

142  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

145  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

146 
	}
}

150 
	$ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

152 
u_ch¨
 *
m
;

153 
ngx_poﬁ_t
 *
p
;

155 i‡(
size
 <
poﬁ
->
max
) {

157 
p
 = 
poﬁ
->
cuºít
;

160 
m
 = 
p
->
d
.
œ°
;

162 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

163 
p
->
d
.
œ°
 = 
m
 + 
size
;

165  
m
;

168 
p
 =Ö->
d
.
√xt
;

170 } 
p
);

172  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

175  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

176 
	}
}

180 
	$ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

182 
u_ch¨
 *
m
;

183 
size_t
 
psize
;

184 
ngx_poﬁ_t
 *
p
, *
√w
;

186 
psize
 = (
size_t
Ë(
poﬁ
->
d
.
íd
 - (
u_ch¨
 *)Öool);

188 
m
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
psize
, 
poﬁ
->
log
);

189 i‡(
m
 =
NULL
) {

190  
NULL
;

193 
√w
 = (
ngx_poﬁ_t
 *Ë
m
;

195 
√w
->
d
.
íd
 = 
m
 + 
psize
;

196 
√w
->
d
.
√xt
 = 
NULL
;

197 
√w
->
d
.
Áûed
 = 0;

199 
m
 +(
ngx_poﬁ_d©a_t
);

200 
m
 = 
	`ngx_Æign_±r
(m, 
NGX_ALIGNMENT
);

201 
√w
->
d
.
œ°
 = 
m
 + 
size
;

203 
p
 = 
poﬁ
->
cuºít
;Ö->
d
.
√xt
;Ö =Ö->d.next) {

204 i‡(
p
->
d
.
Áûed
++ > 4) {

205 
poﬁ
->
cuºít
 = 
p
->
d
.
√xt
;

209 
p
->
d
.
√xt
 = 
√w
;

211  
m
;

212 
	}
}

216 
	$ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

218 *
p
;

219 
ngx_uöt_t
 
n
;

220 
ngx_poﬁ_œrge_t
 *
œrge
;

222 
p
 = 
	`ngx_Æloc
(
size
, 
poﬁ
->
log
);

223 i‡(
p
 =
NULL
) {

224  
NULL
;

227 
n
 = 0;

229 
œrge
 = 
poﬁ
->œrge;Ü¨ge;Ü¨gêœrge->
√xt
) {

230 i‡(
œrge
->
Æloc
 =
NULL
) {

231 
œrge
->
Æloc
 = 
p
;

232  
p
;

235 i‡(
n
++ > 3) {

240 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

241 i‡(
œrge
 =
NULL
) {

242 
	`ngx_‰ì
(
p
);

243  
NULL
;

246 
œrge
->
Æloc
 = 
p
;

247 
œrge
->
√xt
 = 
poﬁ
->large;

248 
poﬁ
->
œrge
 =Üarge;

250  
p
;

251 
	}
}

255 
	$ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
)

257 *
p
;

258 
ngx_poﬁ_œrge_t
 *
œrge
;

260 
p
 = 
	`ngx_memÆign
(
Æignmít
, 
size
, 
poﬁ
->
log
);

261 i‡(
p
 =
NULL
) {

262  
NULL
;

265 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

266 i‡(
œrge
 =
NULL
) {

267 
	`ngx_‰ì
(
p
);

268  
NULL
;

271 
œrge
->
Æloc
 = 
p
;

272 
œrge
->
√xt
 = 
poﬁ
->large;

273 
poﬁ
->
œrge
 =Üarge;

275  
p
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
)

282 
ngx_poﬁ_œrge_t
 *
l
;

284 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

285 i‡(
p
 =
l
->
Æloc
) {

286 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

287 "‰ì: %p", 
l
->
Æloc
);

288 
	`ngx_‰ì
(
l
->
Æloc
);

289 
l
->
Æloc
 = 
NULL
;

291  
NGX_OK
;

295  
NGX_DECLINED
;

296 
	}
}

300 
	$ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

302 *
p
;

304 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

305 i‡(
p
) {

306 
	`ngx_memzîo
(
p
, 
size
);

309  
p
;

310 
	}
}

313 
ngx_poﬁ_˛ónup_t
 *

314 
	$ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
)

316 
ngx_poﬁ_˛ónup_t
 *
c
;

318 
c
 = 
	`ngx_∑Œoc
(
p
, (
ngx_poﬁ_˛ónup_t
));

319 i‡(
c
 =
NULL
) {

320  
NULL
;

323 i‡(
size
) {

324 
c
->
d©a
 = 
	`ngx_∑Œoc
(
p
, 
size
);

325 i‡(
c
->
d©a
 =
NULL
) {

326  
NULL
;

330 
c
->
d©a
 = 
NULL
;

333 
c
->
h™dÀr
 = 
NULL
;

334 
c
->
√xt
 = 
p
->
˛ónup
;

336 
p
->
˛ónup
 = 
c
;

338 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
p
->
log
, 0, "add cÀ™up: %p", 
c
);

340  
c
;

341 
	}
}

345 
	$ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
)

347 
ngx_poﬁ_˛ónup_t
 *
c
;

348 
ngx_poﬁ_˛ónup_fûe_t
 *
cf
;

350 
c
 = 
p
->
˛ónup
; c; c = c->
√xt
) {

351 i‡(
c
->
h™dÀr
 =
ngx_poﬁ_˛ónup_fûe
) {

353 
cf
 = 
c
->
d©a
;

355 i‡(
cf
->
fd
 == fd) {

356 
c
->
	`h™dÀr
(
cf
);

357 
c
->
h™dÀr
 = 
NULL
;

362 
	}
}

366 
	$ngx_poﬁ_˛ónup_fûe
(*
d©a
)

368 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

370 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d",

371 
c
->
fd
);

373 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

374 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

375 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

377 
	}
}

381 
	$ngx_poﬁ_dñëe_fûe
(*
d©a
)

383 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

385 
ngx_îr_t
 
îr
;

387 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d %s",

388 
c
->
fd
, c->
«me
);

390 i‡(
	`ngx_dñëe_fûe
(
c
->
«me
Ë=
NGX_FILE_ERROR
) {

391 
îr
 = 
ngx_î∫o
;

393 i‡(
îr
 !
NGX_ENOENT
) {

394 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
îr
,

395 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

399 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

400 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

401 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

403 
	}
}

409 
	$ngx_gë_ˇched_block
(
size_t
 
size
)

411 *
p
;

412 
ngx_ˇched_block_¶Ÿ_t
 *
¶Ÿ
;

414 i‡(
ngx_cy˛e
->
ˇche
 =
NULL
) {

415  
NULL
;

418 
¶Ÿ
 = &
ngx_cy˛e
->
ˇche
[(
size
 + 
ngx_∑gesize
 - 1) /Çgx_pagesize];

420 
¶Ÿ
->
åõs
++;

422 i‡(
¶Ÿ
->
numbî
) {

423 
p
 = 
¶Ÿ
->
block
;

424 
¶Ÿ
->
block
 = slŸ->block->
√xt
;

425 
¶Ÿ
->
numbî
--;

426  
p
;

429  
NULL
;

430 
	}
}

	@src/core/ngx_palloc.h

8 #i‚de‡
_NGX_PALLOC_H_INCLUDED_


9 
	#_NGX_PALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

20 
	#NGX_MAX_ALLOC_FROM_POOL
 (
ngx_∑gesize
 - 1)

	)

22 
	#NGX_DEFAULT_POOL_SIZE
 (16 * 1024)

	)

24 
	#NGX_POOL_ALIGNMENT
 16

	)

25 
	#NGX_MIN_POOL_SIZE
 \

26 
	`ngx_Æign
(((
ngx_poﬁ_t
Ë+ 2 * (
ngx_poﬁ_œrge_t
)), \

27 
NGX_POOL_ALIGNMENT
)

	)

30 (*
	tngx_poﬁ_˛ónup_±
)(*
	td©a
);

32 
ngx_poﬁ_˛ónup_s
 
	tngx_poﬁ_˛ónup_t
;

34 
	sngx_poﬁ_˛ónup_s
 {

35 
ngx_poﬁ_˛ónup_±
 
h™dÀr
;

36 *
d©a
;

37 
ngx_poﬁ_˛ónup_t
 *
√xt
;

41 
ngx_poﬁ_œrge_s
 
	tngx_poﬁ_œrge_t
;

43 
	sngx_poﬁ_œrge_s
 {

44 
ngx_poﬁ_œrge_t
 *
√xt
;

45 *
Æloc
;

50 
u_ch¨
 *
œ°
;

51 
u_ch¨
 *
íd
;

52 
ngx_poﬁ_t
 *
√xt
;

53 
ngx_uöt_t
 
Áûed
;

54 } 
	tngx_poﬁ_d©a_t
;

57 
	sngx_poﬁ_s
 {

58 
ngx_poﬁ_d©a_t
 
d
;

59 
size_t
 
max
;

60 
ngx_poﬁ_t
 *
cuºít
;

61 
ngx_chaö_t
 *
chaö
;

62 
ngx_poﬁ_œrge_t
 *
œrge
;

63 
ngx_poﬁ_˛ónup_t
 *
˛ónup
;

64 
ngx_log_t
 *
log
;

69 
ngx_fd_t
 
fd
;

70 
u_ch¨
 *
«me
;

71 
ngx_log_t
 *
log
;

72 } 
	tngx_poﬁ_˛ónup_fûe_t
;

75 *
	`ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

76 *
	`ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

78 
ngx_poﬁ_t
 *
	`ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
);

79 
	`ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

80 
	`ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

82 *
	`ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

83 *
	`ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

84 *
	`ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

85 *
	`ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
);

86 
ngx_öt_t
 
	`ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
);

89 
ngx_poﬁ_˛ónup_t
 *
	`ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
);

90 
	`ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
);

91 
	`ngx_poﬁ_˛ónup_fûe
(*
d©a
);

92 
	`ngx_poﬁ_dñëe_fûe
(*
d©a
);

	@src/core/ngx_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ssize_t


13 
	$ngx_∑r£_size
(
ngx_°r_t
 *
löe
)

15 
u_ch¨
 
unô
;

16 
size_t
 
Àn
;

17 
ssize_t
 
size
, 
sˇÀ
, 
max
;

19 
Àn
 = 
löe
->len;

20 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

22 
unô
) {

25 
Àn
--;

26 
max
 = 
NGX_MAX_SIZE_T_VALUE
 / 1024;

27 
sˇÀ
 = 1024;

32 
Àn
--;

33 
max
 = 
NGX_MAX_SIZE_T_VALUE
 / (1024 * 1024);

34 
sˇÀ
 = 1024 * 1024;

38 
max
 = 
NGX_MAX_SIZE_T_VALUE
;

39 
sˇÀ
 = 1;

42 
size
 = 
	`ngx_©osz
(
löe
->
d©a
, 
Àn
);

43 i‡(
size
 =
NGX_ERROR
 || sizê> 
max
) {

44  
NGX_ERROR
;

47 
size
 *
sˇÀ
;

49  
size
;

50 
	}
}

53 
off_t


54 
	$ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
)

56 
u_ch¨
 
unô
;

57 
off_t
 
off£t
, 
sˇÀ
, 
max
;

58 
size_t
 
Àn
;

60 
Àn
 = 
löe
->len;

61 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

63 
unô
) {

66 
Àn
--;

67 
max
 = 
NGX_MAX_OFF_T_VALUE
 / 1024;

68 
sˇÀ
 = 1024;

73 
Àn
--;

74 
max
 = 
NGX_MAX_OFF_T_VALUE
 / (1024 * 1024);

75 
sˇÀ
 = 1024 * 1024;

80 
Àn
--;

81 
max
 = 
NGX_MAX_OFF_T_VALUE
 / (1024 * 1024 * 1024);

82 
sˇÀ
 = 1024 * 1024 * 1024;

86 
max
 = 
NGX_MAX_OFF_T_VALUE
;

87 
sˇÀ
 = 1;

90 
off£t
 = 
	`ngx_©oof
(
löe
->
d©a
, 
Àn
);

91 i‡(
off£t
 =
NGX_ERROR
 || off£à> 
max
) {

92  
NGX_ERROR
;

95 
off£t
 *
sˇÀ
;

97  
off£t
;

98 
	}
}

101 
ngx_öt_t


102 
	$ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
)

104 
u_ch¨
 *
p
, *
œ°
;

105 
ngx_öt_t
 
vÆue
, 
tŸÆ
, 
sˇÀ
;

106 
ngx_öt_t
 
max
, 
cutoff
, 
cuéim
;

107 
ngx_uöt_t
 
vÆid
;

109 
°_°¨t
 = 0,

110 
°_yór
,

111 
°_m⁄th
,

112 
°_wìk
,

113 
°_day
,

114 
°_hour
,

115 
°_mö
,

116 
°_£c
,

117 
°_m£c
,

118 
°_œ°


119 } 
°ï
;

121 
vÆid
 = 0;

122 
vÆue
 = 0;

123 
tŸÆ
 = 0;

124 
cutoff
 = 
NGX_MAX_INT_T_VALUE
 / 10;

125 
cuéim
 = 
NGX_MAX_INT_T_VALUE
 % 10;

126 
°ï
 = 
is_£c
 ? 
°_°¨t
 : 
°_m⁄th
;

128 
p
 = 
löe
->
d©a
;

129 
œ°
 = 
p
 + 
löe
->
Àn
;

131 
p
 < 
œ°
) {

133 i‡(*
p
 >= '0' && *p <= '9') {

134 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
p
 - '0' > 
cuéim
)) {

135  
NGX_ERROR
;

138 
vÆue
 = vÆuê* 10 + (*
p
++ - '0');

139 
vÆid
 = 1;

143 *
p
++) {

146 i‡(
°ï
 > 
°_°¨t
) {

147  
NGX_ERROR
;

149 
°ï
 = 
°_yór
;

150 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60 * 24 * 365);

151 
sˇÀ
 = 60 * 60 * 24 * 365;

155 i‡(
°ï
 >
°_m⁄th
) {

156  
NGX_ERROR
;

158 
°ï
 = 
°_m⁄th
;

159 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60 * 24 * 30);

160 
sˇÀ
 = 60 * 60 * 24 * 30;

164 i‡(
°ï
 >
°_wìk
) {

165  
NGX_ERROR
;

167 
°ï
 = 
°_wìk
;

168 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60 * 24 * 7);

169 
sˇÀ
 = 60 * 60 * 24 * 7;

173 i‡(
°ï
 >
°_day
) {

174  
NGX_ERROR
;

176 
°ï
 = 
°_day
;

177 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60 * 24);

178 
sˇÀ
 = 60 * 60 * 24;

182 i‡(
°ï
 >
°_hour
) {

183  
NGX_ERROR
;

185 
°ï
 = 
°_hour
;

186 
max
 = 
NGX_MAX_INT_T_VALUE
 / (60 * 60);

187 
sˇÀ
 = 60 * 60;

191 i‡(*
p
 == 's') {

192 i‡(
is_£c
 || 
°ï
 >
°_m£c
) {

193  
NGX_ERROR
;

195 
p
++;

196 
°ï
 = 
°_m£c
;

197 
max
 = 
NGX_MAX_INT_T_VALUE
;

198 
sˇÀ
 = 1;

202 i‡(
°ï
 >
°_mö
) {

203  
NGX_ERROR
;

205 
°ï
 = 
°_mö
;

206 
max
 = 
NGX_MAX_INT_T_VALUE
 / 60;

207 
sˇÀ
 = 60;

211 i‡(
°ï
 >
°_£c
) {

212  
NGX_ERROR
;

214 
°ï
 = 
°_£c
;

215 
max
 = 
NGX_MAX_INT_T_VALUE
;

216 
sˇÀ
 = 1;

220 i‡(
°ï
 >
°_£c
) {

221  
NGX_ERROR
;

223 
°ï
 = 
°_œ°
;

224 
max
 = 
NGX_MAX_INT_T_VALUE
;

225 
sˇÀ
 = 1;

229  
NGX_ERROR
;

232 i‡(
°ï
 !
°_m£c
 && !
is_£c
) {

233 
sˇÀ
 *= 1000;

234 
max
 /= 1000;

237 i‡(
vÆue
 > 
max
) {

238  
NGX_ERROR
;

241 
vÆue
 *
sˇÀ
;

243 i‡(
tŸÆ
 > 
NGX_MAX_INT_T_VALUE
 - 
vÆue
) {

244  
NGX_ERROR
;

247 
tŸÆ
 +
vÆue
;

249 
vÆue
 = 0;

251 
p
 < 
œ°
 && *p == ' ') {

252 
p
++;

256 i‡(!
vÆid
) {

257  
NGX_ERROR
;

260 i‡(!
is_£c
) {

261 i‡(
vÆue
 > 
NGX_MAX_INT_T_VALUE
 / 1000) {

262  
NGX_ERROR
;

265 
vÆue
 *= 1000;

268 i‡(
tŸÆ
 > 
NGX_MAX_INT_T_VALUE
 - 
vÆue
) {

269  
NGX_ERROR
;

272  
tŸÆ
 + 
vÆue
;

273 
	}
}

	@src/core/ngx_parse.h

8 #i‚de‡
_NGX_PARSE_H_INCLUDED_


9 
	#_NGX_PARSE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ssize_t
 
ngx_∑r£_size
(
ngx_°r_t
 *
löe
);

17 
off_t
 
ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
);

18 
ngx_öt_t
 
ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
);

	@src/core/ngx_proxy_protocol.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 *

13 
	$ngx_¥oxy_¥Ÿocﬁ_∑r£
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, u_ch¨ *
œ°
)

15 
size_t
 
Àn
;

16 
u_ch¨
 
ch
, *
p
, *
addr
;

18 
p
 = 
buf
;

19 
Àn
 = 
œ°
 - 
buf
;

21 i‡(
Àn
 < 8 || 
	`ngx_°∫cmp
(
p
, "PROXY ", 6) != 0) {

22 
övÆid
;

25 
p
 += 6;

26 
Àn
 -= 6;

28 i‡(
Àn
 >7 && 
	`ngx_°∫cmp
(
p
, "UNKNOWN", 7) == 0) {

29 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

31 
p
 += 7;

32 
skù
;

35 i‡(
Àn
 < 5 || 
	`ngx_°∫cmp
(
p
, "TCP", 3) != 0

36 || (
p
[3] != '4' &&Ö[3] != '6') ||Ö[4] != ' ')

38 
övÆid
;

41 
p
 += 5;

42 
addr
 = 
p
;

45 i‡(
p
 =
œ°
) {

46 
övÆid
;

49 
ch
 = *
p
++;

51 i‡(
ch
 == ' ') {

55 i‡(
ch
 != ':' && ch != '.'

56 && (
ch
 < 'a' || ch > 'f')

57 && (
ch
 < 'A' || ch > 'F')

58 && (
ch
 < '0' || ch > '9'))

60 
övÆid
;

64 
Àn
 = 
p
 - 
addr
 - 1;

65 
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
Àn
);

67 i‡(
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
 =
NULL
) {

68  
NULL
;

71 
	`ngx_mem˝y
(
c
->
¥oxy_¥Ÿocﬁ_addr
.
d©a
, 
addr
, 
Àn
);

72 
c
->
¥oxy_¥Ÿocﬁ_addr
.
Àn
 =Üen;

74 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

75 "PROXYÖrŸocﬁáddªss: \"%V\"", &
c
->
¥oxy_¥Ÿocﬁ_addr
);

77 
skù
:

79  ; 
p
 < 
œ°
 - 1;Ö++) {

80 i‡(
p
[0] =
CR
 &&Ö[1] =
LF
) {

81  
p
 + 2;

85 
övÆid
:

87 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

88 "brokí hódî: \"%*s\"", (
size_t
Ë(
œ°
 - 
buf
), buf);

90  
NULL
;

91 
	}
}

	@src/core/ngx_proxy_protocol.h

8 #i‚de‡
_NGX_PROXY_PROTOCOL_H_INCLUDED_


9 
	#_NGX_PROXY_PROTOCOL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_PROXY_PROTOCOL_MAX_HEADER
 107

	)

19 
u_ch¨
 *
ngx_¥oxy_¥Ÿocﬁ_∑r£
(
ngx_c⁄√˘i⁄_t
 *
c
, u_ch¨ *
buf
,

20 
u_ch¨
 *
œ°
);

	@src/core/ngx_queue.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

17 
ngx_queue_t
 *

18 
	$ngx_queue_middÀ
(
ngx_queue_t
 *
queue
)

20 
ngx_queue_t
 *
middÀ
, *
√xt
;

22 
middÀ
 = 
	`ngx_queue_hód
(
queue
);

24 i‡(
middÀ
 =
	`ngx_queue_œ°
(
queue
)) {

25  
middÀ
;

28 
√xt
 = 
	`ngx_queue_hód
(
queue
);

31 
middÀ
 = 
	`ngx_queue_√xt
(middle);

33 
√xt
 = 
	`ngx_queue_√xt
(next);

35 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

36  
middÀ
;

39 
√xt
 = 
	`ngx_queue_√xt
(next);

41 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

42  
middÀ
;

45 
	}
}

51 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

52 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *))

54 
ngx_queue_t
 *
q
, *
¥ev
, *
√xt
;

56 
q
 = 
	`ngx_queue_hód
(
queue
);

58 i‡(
q
 =
	`ngx_queue_œ°
(
queue
)) {

62 
q
 = 
	`ngx_queue_√xt
(q); q !
	`ngx_queue_£¡öñ
(
queue
); q = 
√xt
) {

64 
¥ev
 = 
	`ngx_queue_¥ev
(
q
);

65 
√xt
 = 
	`ngx_queue_√xt
(
q
);

67 
	`ngx_queue_ªmove
(
q
);

70 i‡(
	`cmp
(
¥ev
, 
q
) <= 0) {

74 
¥ev
 = 
	`ngx_queue_¥ev
(prev);

76 } 
¥ev
 !
	`ngx_queue_£¡öñ
(
queue
));

78 
	`ngx_queue_ö£π_a·î
(
¥ev
, 
q
);

80 
	}
}

	@src/core/ngx_queue.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_QUEUE_H_INCLUDED_


13 
	#_NGX_QUEUE_H_INCLUDED_


	)

16 
ngx_queue_s
 
	tngx_queue_t
;

18 
	sngx_queue_s
 {

19 
ngx_queue_t
 *
	m¥ev
;

20 
ngx_queue_t
 *
	m√xt
;

24 
	#ngx_queue_öô
(
q
) \

25 (
q
)->
¥ev
 = q; \

26 (
q
)->
√xt
 = 
	)
q

29 
	#ngx_queue_em±y
(
h
) \

30 (
h
 =(h)->
¥ev
)

	)

33 
	#ngx_queue_ö£π_hód
(
h
, 
x
) \

34 (
x
)->
√xt
 = (
h
)->next; \

35 (
x
)->
√xt
->
¥ev
 = x; \

36 (
x
)->
¥ev
 = 
h
; \

37 (
h
)->
√xt
 = 
x


	)

40 
	#ngx_queue_ö£π_a·î
 
ngx_queue_ö£π_hód


	)

43 
	#ngx_queue_ö£π_èû
(
h
, 
x
) \

44 (
x
)->
¥ev
 = (
h
)->prev; \

45 (
x
)->
¥ev
->
√xt
 = x; \

46 (
x
)->
√xt
 = 
h
; \

47 (
h
)->
¥ev
 = 
x


	)

50 
	#ngx_queue_hód
(
h
) \

51 (
h
)->
√xt


	)

54 
	#ngx_queue_œ°
(
h
) \

55 (
h
)->
¥ev


	)

58 
	#ngx_queue_£¡öñ
(
h
) \

59 (
h
)

	)

62 
	#ngx_queue_√xt
(
q
) \

63 (
q
)->
√xt


	)

66 
	#ngx_queue_¥ev
(
q
) \

67 (
q
)->
¥ev


	)

70 #i‡(
NGX_DEBUG
)

72 
	#ngx_queue_ªmove
(
x
) \

73 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

74 (
x
)->
¥ev
->
√xt
 = (x)->next; \

75 (
x
)->
¥ev
 = 
NULL
; \

76 (
x
)->
√xt
 = 
NULL


	)

80 
	#ngx_queue_ªmove
(
x
) \

81 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

82 (
x
)->
¥ev
->
√xt
 = (x)->
	)
next

87 
	#ngx_queue_•lô
(
h
, 
q
, 
n
) \

88 (
n
)->
¥ev
 = (
h
)->prev; \

89 (
n
)->
¥ev
->
√xt
 =Ç; \

90 (
n
)->
√xt
 = 
q
; \

91 (
h
)->
¥ev
 = (
q
)->prev; \

92 (
h
)->
¥ev
->
√xt
 = h; \

93 (
q
)->
¥ev
 = 
n
;

	)

96 
	#ngx_queue_add
(
h
, 
n
) \

97 (
h
)->
¥ev
->
√xt
 = (
n
)->next; \

98 (
n
)->
√xt
->
¥ev
 = (
h
)->prev; \

99 (
h
)->
¥ev
 = (
n
)->prev; \

100 (
h
)->
¥ev
->
√xt
 = h;

	)

103 
	#ngx_queue_d©a
(
q
, 
ty≥
, 
lök
) \

104 (
ty≥
 *Ë((
u_ch¨
 *Ë
q
 - 
	`off£tof
—y≥, 
lök
))

	)

107 
ngx_queue_t
 *
ngx_queue_middÀ
“gx_queue_à*
queue
);

108 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

109 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *));

	@src/core/ngx_radix_tree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_ødix_node_t
 *
ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
);

15 
ngx_ødix_åì_t
 *

16 
	$ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_öt_t
 
¥óŒoˇã
)

18 
uöt32_t
 
key
, 
mask
, 
öc
;

19 
ngx_ødix_åì_t
 *
åì
;

21 
åì
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_ødix_åì_t
));

22 i‡(
åì
 =
NULL
) {

23  
NULL
;

26 
åì
->
poﬁ
 =Öool;

27 
åì
->
‰ì
 = 
NULL
;

28 
åì
->
°¨t
 = 
NULL
;

29 
åì
->
size
 = 0;

31 
åì
->
roŸ
 = 
	`ngx_ødix_Æloc
(tree);

32 i‡(
åì
->
roŸ
 =
NULL
) {

33  
NULL
;

36 
åì
->
roŸ
->
right
 = 
NULL
;

37 
åì
->
roŸ
->
À·
 = 
NULL
;

38 
åì
->
roŸ
->
∑ª¡
 = 
NULL
;

39 
åì
->
roŸ
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

41 i‡(
¥óŒoˇã
 == 0) {

42  
åì
;

62 i‡(
¥óŒoˇã
 == -1) {

63 
ngx_∑gesize
 / (
ngx_ødix_node_t
)) {

67 
¥óŒoˇã
 = 6;

72 
¥óŒoˇã
 = 7;

77 
¥óŒoˇã
 = 8;

81 
mask
 = 0;

82 
öc
 = 0x80000000;

84 
¥óŒoˇã
--) {

86 
key
 = 0;

87 
mask
 >>= 1;

88 
mask
 |= 0x80000000;

91 i‡(
	`ngx_ødix32åì_ö£π
(
åì
, 
key
, 
mask
, 
NGX_RADIX_NO_VALUE
)

92 !
NGX_OK
)

94  
NULL
;

97 
key
 +
öc
;

99 } 
key
);

101 
öc
 >>= 1;

104  
åì
;

105 
	}
}

108 
ngx_öt_t


109 
	$ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
,

110 
uöçå_t
 
vÆue
)

112 
uöt32_t
 
bô
;

113 
ngx_ødix_node_t
 *
node
, *
√xt
;

115 
bô
 = 0x80000000;

117 
node
 = 
åì
->
roŸ
;

118 
√xt
 = 
åì
->
roŸ
;

120 
bô
 & 
mask
) {

121 i‡(
key
 & 
bô
) {

122 
√xt
 = 
node
->
right
;

125 
√xt
 = 
node
->
À·
;

128 i‡(
√xt
 =
NULL
) {

132 
bô
 >>= 1;

133 
node
 = 
√xt
;

136 i‡(
√xt
) {

137 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

138  
NGX_BUSY
;

141 
node
->
vÆue
 = value;

142  
NGX_OK
;

145 
bô
 & 
mask
) {

146 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

147 i‡(
√xt
 =
NULL
) {

148  
NGX_ERROR
;

151 
√xt
->
right
 = 
NULL
;

152 
√xt
->
À·
 = 
NULL
;

153 
√xt
->
∑ª¡
 = 
node
;

154 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

156 i‡(
key
 & 
bô
) {

157 
node
->
right
 = 
√xt
;

160 
node
->
À·
 = 
√xt
;

163 
bô
 >>= 1;

164 
node
 = 
√xt
;

167 
node
->
vÆue
 = value;

169  
NGX_OK
;

170 
	}
}

173 
ngx_öt_t


174 
	$ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
)

176 
uöt32_t
 
bô
;

177 
ngx_ødix_node_t
 *
node
;

179 
bô
 = 0x80000000;

180 
node
 = 
åì
->
roŸ
;

182 
node
 && (
bô
 & 
mask
)) {

183 i‡(
key
 & 
bô
) {

184 
node
 =Çode->
right
;

187 
node
 =Çode->
À·
;

190 
bô
 >>= 1;

193 i‡(
node
 =
NULL
) {

194  
NGX_ERROR
;

197 i‡(
node
->
right
 ||Çode->
À·
) {

198 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

199 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

200  
NGX_OK
;

203  
NGX_ERROR
;

207 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

208 
node
->
∑ª¡
->
right
 = 
NULL
;

211 
node
->
∑ª¡
->
À·
 = 
NULL
;

214 
node
->
right
 = 
åì
->
‰ì
;

215 
åì
->
‰ì
 = 
node
;

217 
node
 =Çode->
∑ª¡
;

219 i‡(
node
->
right
 ||Çode->
À·
) {

223 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

227 i‡(
node
->
∑ª¡
 =
NULL
) {

232  
NGX_OK
;

233 
	}
}

236 
uöçå_t


237 
	$ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
)

239 
uöt32_t
 
bô
;

240 
uöçå_t
 
vÆue
;

241 
ngx_ødix_node_t
 *
node
;

243 
bô
 = 0x80000000;

244 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

245 
node
 = 
åì
->
roŸ
;

247 
node
) {

248 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

249 
vÆue
 = 
node
->value;

252 i‡(
key
 & 
bô
) {

253 
node
 =Çode->
right
;

256 
node
 =Çode->
À·
;

259 
bô
 >>= 1;

262  
vÆue
;

263 
	}
}

266 #i‡(
NGX_HAVE_INET6
)

268 
ngx_öt_t


269 
	$ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
,

270 
uöçå_t
 
vÆue
)

272 
u_ch¨
 
bô
;

273 
ngx_uöt_t
 
i
;

274 
ngx_ødix_node_t
 *
node
, *
√xt
;

276 
i
 = 0;

277 
bô
 = 0x80;

279 
node
 = 
åì
->
roŸ
;

280 
√xt
 = 
åì
->
roŸ
;

282 
bô
 & 
mask
[
i
]) {

283 i‡(
key
[
i
] & 
bô
) {

284 
√xt
 = 
node
->
right
;

287 
√xt
 = 
node
->
À·
;

290 i‡(
√xt
 =
NULL
) {

294 
bô
 >>= 1;

295 
node
 = 
√xt
;

297 i‡(
bô
 == 0) {

298 i‡(++
i
 == 16) {

302 
bô
 = 0x80;

306 i‡(
√xt
) {

307 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

308  
NGX_BUSY
;

311 
node
->
vÆue
 = value;

312  
NGX_OK
;

315 
bô
 & 
mask
[
i
]) {

316 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

317 i‡(
√xt
 =
NULL
) {

318  
NGX_ERROR
;

321 
√xt
->
right
 = 
NULL
;

322 
√xt
->
À·
 = 
NULL
;

323 
√xt
->
∑ª¡
 = 
node
;

324 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

326 i‡(
key
[
i
] & 
bô
) {

327 
node
->
right
 = 
√xt
;

330 
node
->
À·
 = 
√xt
;

333 
bô
 >>= 1;

334 
node
 = 
√xt
;

336 i‡(
bô
 == 0) {

337 i‡(++
i
 == 16) {

341 
bô
 = 0x80;

345 
node
->
vÆue
 = value;

347  
NGX_OK
;

348 
	}
}

351 
ngx_öt_t


352 
	$ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
)

354 
u_ch¨
 
bô
;

355 
ngx_uöt_t
 
i
;

356 
ngx_ødix_node_t
 *
node
;

358 
i
 = 0;

359 
bô
 = 0x80;

360 
node
 = 
åì
->
roŸ
;

362 
node
 && (
bô
 & 
mask
[
i
])) {

363 i‡(
key
[
i
] & 
bô
) {

364 
node
 =Çode->
right
;

367 
node
 =Çode->
À·
;

370 
bô
 >>= 1;

372 i‡(
bô
 == 0) {

373 i‡(++
i
 == 16) {

377 
bô
 = 0x80;

381 i‡(
node
 =
NULL
) {

382  
NGX_ERROR
;

385 i‡(
node
->
right
 ||Çode->
À·
) {

386 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

387 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

388  
NGX_OK
;

391  
NGX_ERROR
;

395 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

396 
node
->
∑ª¡
->
right
 = 
NULL
;

399 
node
->
∑ª¡
->
À·
 = 
NULL
;

402 
node
->
right
 = 
åì
->
‰ì
;

403 
åì
->
‰ì
 = 
node
;

405 
node
 =Çode->
∑ª¡
;

407 i‡(
node
->
right
 ||Çode->
À·
) {

411 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

415 i‡(
node
->
∑ª¡
 =
NULL
) {

420  
NGX_OK
;

421 
	}
}

424 
uöçå_t


425 
	$ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
)

427 
u_ch¨
 
bô
;

428 
uöçå_t
 
vÆue
;

429 
ngx_uöt_t
 
i
;

430 
ngx_ødix_node_t
 *
node
;

432 
i
 = 0;

433 
bô
 = 0x80;

434 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

435 
node
 = 
åì
->
roŸ
;

437 
node
) {

438 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

439 
vÆue
 = 
node
->value;

442 i‡(
key
[
i
] & 
bô
) {

443 
node
 =Çode->
right
;

446 
node
 =Çode->
À·
;

449 
bô
 >>= 1;

451 i‡(
bô
 == 0) {

452 
i
++;

453 
bô
 = 0x80;

457  
vÆue
;

458 
	}
}

463 
ngx_ødix_node_t
 *

464 
	$ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
)

466 
ngx_ødix_node_t
 *
p
;

468 i‡(
åì
->
‰ì
) {

469 
p
 = 
åì
->
‰ì
;

470 
åì
->
‰ì
 =Åªe->‰ì->
right
;

471  
p
;

474 i‡(
åì
->
size
 < (
ngx_ødix_node_t
)) {

475 
åì
->
°¨t
 = 
	`ngx_pmemÆign
—ªe->
poﬁ
, 
ngx_∑gesize
,Çgx_pagesize);

476 i‡(
åì
->
°¨t
 =
NULL
) {

477  
NULL
;

480 
åì
->
size
 = 
ngx_∑gesize
;

483 
p
 = (
ngx_ødix_node_t
 *Ë
åì
->
°¨t
;

484 
åì
->
°¨t
 +(
ngx_ødix_node_t
);

485 
åì
->
size
 -(
ngx_ødix_node_t
);

487  
p
;

488 
	}
}

	@src/core/ngx_radix_tree.h

8 #i‚de‡
_NGX_RADIX_TREE_H_INCLUDED_


9 
	#_NGX_RADIX_TREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_RADIX_NO_VALUE
 (
uöçå_t
Ë-1

	)

18 
ngx_ødix_node_s
 
	tngx_ødix_node_t
;

20 
	sngx_ødix_node_s
 {

21 
ngx_ødix_node_t
 *
	mright
;

22 
ngx_ødix_node_t
 *
	mÀ·
;

23 
ngx_ødix_node_t
 *
	m∑ª¡
;

24 
uöçå_t
 
	mvÆue
;

29 
ngx_ødix_node_t
 *
	mroŸ
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 
ngx_ødix_node_t
 *
	m‰ì
;

32 *
	m°¨t
;

33 
size_t
 
	msize
;

34 } 
	tngx_ødix_åì_t
;

37 
ngx_ødix_åì_t
 *
ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
,

38 
ngx_öt_t
 
¥óŒoˇã
);

40 
ngx_öt_t
 
ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

41 
uöt32_t
 
key
, uöt32_à
mask
, 
uöçå_t
 
vÆue
);

42 
ngx_öt_t
 
ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

43 
uöt32_t
 
key
, uöt32_à
mask
);

44 
uöçå_t
 
ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
);

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_öt_t
 
ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

48 
u_ch¨
 *
key
, u_ch¨ *
mask
, 
uöçå_t
 
vÆue
);

49 
ngx_öt_t
 
ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

50 
u_ch¨
 *
key
, u_ch¨ *
mask
);

51 
uöçå_t
 
ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
);

	@src/core/ngx_rbtree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

19 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

20 
ngx_ölöe
 
ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

21 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

25 
	$ngx_rbåì_ö£π
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
)

27 
ngx_rbåì_node_t
 **
roŸ
, *
ãmp
, *
£¡öñ
;

31 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

32 
£¡öñ
 = 
åì
->sentinel;

34 i‡(*
roŸ
 =
£¡öñ
) {

35 
node
->
∑ª¡
 = 
NULL
;

36 
node
->
À·
 = 
£¡öñ
;

37 
node
->
right
 = 
£¡öñ
;

38 
	`ngx_rbt_bœck
(
node
);

39 *
roŸ
 = 
node
;

44 
åì
->
	`ö£π
(*
roŸ
, 
node
, 
£¡öñ
);

48 
node
 !*
roŸ
 && 
	`ngx_rbt_is_ªd
“ode->
∑ª¡
)) {

50 i‡(
node
->
∑ª¡
 =node->∑ª¡->∑ª¡->
À·
) {

51 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
right
;

53 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

54 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

55 
	`ngx_rbt_bœck
(
ãmp
);

56 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

57 
node
 =Çode->
∑ª¡
->parent;

60 i‡(
node
 =node->
∑ª¡
->
right
) {

61 
node
 =Çode->
∑ª¡
;

62 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

65 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

66 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

67 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

71 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
À·
;

73 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

74 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

75 
	`ngx_rbt_bœck
(
ãmp
);

76 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

77 
node
 =Çode->
∑ª¡
->parent;

80 i‡(
node
 =node->
∑ª¡
->
À·
) {

81 
node
 =Çode->
∑ª¡
;

82 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

85 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

86 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

87 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

92 
	`ngx_rbt_bœck
(*
roŸ
);

93 
	}
}

97 
	$ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

98 
ngx_rbåì_node_t
 *
£¡öñ
)

100 
ngx_rbåì_node_t
 **
p
;

104 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

106 i‡(*
p
 =
£¡öñ
) {

110 
ãmp
 = *
p
;

113 *
p
 = 
node
;

114 
node
->
∑ª¡
 = 
ãmp
;

115 
node
->
À·
 = 
£¡öñ
;

116 
node
->
right
 = 
£¡öñ
;

117 
	`ngx_rbt_ªd
(
node
);

118 
	}
}

122 
	$ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

123 
ngx_rbåì_node_t
 *
£¡öñ
)

125 
ngx_rbåì_node_t
 **
p
;

138 
p
 = ((
ngx_rbåì_key_öt_t
Ë(
node
->
key
 - 
ãmp
->key) < 0)

139 ? &
ãmp
->
À·
 : &ãmp->
right
;

141 i‡(*
p
 =
£¡öñ
) {

145 
ãmp
 = *
p
;

148 *
p
 = 
node
;

149 
node
->
∑ª¡
 = 
ãmp
;

150 
node
->
À·
 = 
£¡öñ
;

151 
node
->
right
 = 
£¡öñ
;

152 
	`ngx_rbt_ªd
(
node
);

153 
	}
}

157 
	$ngx_rbåì_dñëe
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
)

159 
ngx_uöt_t
 
ªd
;

160 
ngx_rbåì_node_t
 **
roŸ
, *
£¡öñ
, *
sub°
, *
ãmp
, *
w
;

164 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

165 
£¡öñ
 = 
åì
->sentinel;

167 i‡(
node
->
À·
 =
£¡öñ
) {

168 
ãmp
 = 
node
->
right
;

169 
sub°
 = 
node
;

171 } i‡(
node
->
right
 =
£¡öñ
) {

172 
ãmp
 = 
node
->
À·
;

173 
sub°
 = 
node
;

176 
sub°
 = 
	`ngx_rbåì_mö
(
node
->
right
, 
£¡öñ
);

178 i‡(
sub°
->
À·
 !
£¡öñ
) {

179 
ãmp
 = 
sub°
->
À·
;

181 
ãmp
 = 
sub°
->
right
;

185 i‡(
sub°
 =*
roŸ
) {

186 *
roŸ
 = 
ãmp
;

187 
	`ngx_rbt_bœck
(
ãmp
);

190 
node
->
À·
 = 
NULL
;

191 
node
->
right
 = 
NULL
;

192 
node
->
∑ª¡
 = 
NULL
;

193 
node
->
key
 = 0;

198 
ªd
 = 
	`ngx_rbt_is_ªd
(
sub°
);

200 i‡(
sub°
 =sub°->
∑ª¡
->
À·
) {

201 
sub°
->
∑ª¡
->
À·
 = 
ãmp
;

204 
sub°
->
∑ª¡
->
right
 = 
ãmp
;

207 i‡(
sub°
 =
node
) {

209 
ãmp
->
∑ª¡
 = 
sub°
->parent;

213 i‡(
sub°
->
∑ª¡
 =
node
) {

214 
ãmp
->
∑ª¡
 = 
sub°
;

217 
ãmp
->
∑ª¡
 = 
sub°
->parent;

220 
sub°
->
À·
 = 
node
->left;

221 
sub°
->
right
 = 
node
->right;

222 
sub°
->
∑ª¡
 = 
node
->parent;

223 
	`ngx_rbt_c›y_cﬁ‹
(
sub°
, 
node
);

225 i‡(
node
 =*
roŸ
) {

226 *
roŸ
 = 
sub°
;

229 i‡(
node
 =node->
∑ª¡
->
À·
) {

230 
node
->
∑ª¡
->
À·
 = 
sub°
;

232 
node
->
∑ª¡
->
right
 = 
sub°
;

236 i‡(
sub°
->
À·
 !
£¡öñ
) {

237 
sub°
->
À·
->
∑ª¡
 = subst;

240 i‡(
sub°
->
right
 !
£¡öñ
) {

241 
sub°
->
right
->
∑ª¡
 = subst;

246 
node
->
À·
 = 
NULL
;

247 
node
->
right
 = 
NULL
;

248 
node
->
∑ª¡
 = 
NULL
;

249 
node
->
key
 = 0;

251 i‡(
ªd
) {

257 
ãmp
 !*
roŸ
 && 
	`ngx_rbt_is_bœck
(temp)) {

259 i‡(
ãmp
 =ãmp->
∑ª¡
->
À·
) {

260 
w
 = 
ãmp
->
∑ª¡
->
right
;

262 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

263 
	`ngx_rbt_bœck
(
w
);

264 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

265 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

266 
w
 = 
ãmp
->
∑ª¡
->
right
;

269 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

270 
	`ngx_rbt_ªd
(
w
);

271 
ãmp
 =Åemp->
∑ª¡
;

274 i‡(
	`ngx_rbt_is_bœck
(
w
->
right
)) {

275 
	`ngx_rbt_bœck
(
w
->
À·
);

276 
	`ngx_rbt_ªd
(
w
);

277 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

278 
w
 = 
ãmp
->
∑ª¡
->
right
;

281 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

282 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

283 
	`ngx_rbt_bœck
(
w
->
right
);

284 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

285 
ãmp
 = *
roŸ
;

289 
w
 = 
ãmp
->
∑ª¡
->
À·
;

291 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

292 
	`ngx_rbt_bœck
(
w
);

293 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

294 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

295 
w
 = 
ãmp
->
∑ª¡
->
À·
;

298 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

299 
	`ngx_rbt_ªd
(
w
);

300 
ãmp
 =Åemp->
∑ª¡
;

303 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
)) {

304 
	`ngx_rbt_bœck
(
w
->
right
);

305 
	`ngx_rbt_ªd
(
w
);

306 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

307 
w
 = 
ãmp
->
∑ª¡
->
À·
;

310 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

311 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

312 
	`ngx_rbt_bœck
(
w
->
À·
);

313 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

314 
ãmp
 = *
roŸ
;

319 
	`ngx_rbt_bœck
(
ãmp
);

320 
	}
}

323 
ngx_ölöe
 

324 
	$ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

325 
ngx_rbåì_node_t
 *
node
)

327 
ngx_rbåì_node_t
 *
ãmp
;

329 
ãmp
 = 
node
->
right
;

330 
node
->
right
 = 
ãmp
->
À·
;

332 i‡(
ãmp
->
À·
 !
£¡öñ
) {

333 
ãmp
->
À·
->
∑ª¡
 = 
node
;

336 
ãmp
->
∑ª¡
 = 
node
->parent;

338 i‡(
node
 =*
roŸ
) {

339 *
roŸ
 = 
ãmp
;

341 } i‡(
node
 =node->
∑ª¡
->
À·
) {

342 
node
->
∑ª¡
->
À·
 = 
ãmp
;

345 
node
->
∑ª¡
->
right
 = 
ãmp
;

348 
ãmp
->
À·
 = 
node
;

349 
node
->
∑ª¡
 = 
ãmp
;

350 
	}
}

353 
ngx_ölöe
 

354 
	$ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

355 
ngx_rbåì_node_t
 *
node
)

357 
ngx_rbåì_node_t
 *
ãmp
;

359 
ãmp
 = 
node
->
À·
;

360 
node
->
À·
 = 
ãmp
->
right
;

362 i‡(
ãmp
->
right
 !
£¡öñ
) {

363 
ãmp
->
right
->
∑ª¡
 = 
node
;

366 
ãmp
->
∑ª¡
 = 
node
->parent;

368 i‡(
node
 =*
roŸ
) {

369 *
roŸ
 = 
ãmp
;

371 } i‡(
node
 =node->
∑ª¡
->
right
) {

372 
node
->
∑ª¡
->
right
 = 
ãmp
;

375 
node
->
∑ª¡
->
À·
 = 
ãmp
;

378 
ãmp
->
right
 = 
node
;

379 
node
->
∑ª¡
 = 
ãmp
;

380 
	}
}

	@src/core/ngx_rbtree.h

8 #i‚de‡
_NGX_RBTREE_H_INCLUDED_


9 
	#_NGX_RBTREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_uöt_t
 
	tngx_rbåì_key_t
;

17 
ngx_öt_t
 
	tngx_rbåì_key_öt_t
;

20 
ngx_rbåì_node_s
 
	tngx_rbåì_node_t
;

22 
	sngx_rbåì_node_s
 {

23 
ngx_rbåì_key_t
 
	mkey
;

24 
ngx_rbåì_node_t
 *
	mÀ·
;

25 
ngx_rbåì_node_t
 *
	mright
;

26 
ngx_rbåì_node_t
 *
	m∑ª¡
;

27 
u_ch¨
 
	mcﬁ‹
;

28 
u_ch¨
 
	md©a
;

32 
ngx_rbåì_s
 
	tngx_rbåì_t
;

34 (*
	tngx_rbåì_ö£π_±
Ë(
	tngx_rbåì_node_t
 *
	troŸ
,

35 
	tngx_rbåì_node_t
 *
	tnode
,Çgx_rbåì_node_à*
	t£¡öñ
);

37 
	sngx_rbåì_s
 {

38 
ngx_rbåì_node_t
 *
roŸ
;

39 
ngx_rbåì_node_t
 *
£¡öñ
;

40 
ngx_rbåì_ö£π_±
 
ö£π
;

44 
	#ngx_rbåì_öô
(
åì
, 
s
, 
i
) \

45 
	`ngx_rbåì_£¡öñ_öô
(
s
); \

46 (
åì
)->
roŸ
 = 
s
; \

47 (
åì
)->
£¡öñ
 = 
s
; \

48 (
åì
)->
ö£π
 = 
i


	)

51 
	`ngx_rbåì_ö£π
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
);

52 
	`ngx_rbåì_dñëe
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
);

53 
	`ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,Çgx_rbåì_node_à*
node
,

54 
ngx_rbåì_node_t
 *
£¡öñ
);

55 
	`ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,

56 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

59 
	#ngx_rbt_ªd
(
node
Ë(“ode)->
cﬁ‹
 = 1)

	)

60 
	#ngx_rbt_bœck
(
node
Ë(“ode)->
cﬁ‹
 = 0)

	)

61 
	#ngx_rbt_is_ªd
(
node
Ë(“ode)->
cﬁ‹
)

	)

62 
	#ngx_rbt_is_bœck
(
node
Ë(!
	`ngx_rbt_is_ªd
“ode))

	)

63 
	#ngx_rbt_c›y_cﬁ‹
(
n1
, 
n2
Ë“1->
cﬁ‹
 =Ç2->cﬁ‹)

	)

68 
	#ngx_rbåì_£¡öñ_öô
(
node
Ë
	`ngx_rbt_bœck
“ode)

	)

71 
ngx_ölöe
 
ngx_rbåì_node_t
 *

72 
	$ngx_rbåì_mö
(
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

74 
node
->
À·
 !
£¡öñ
) {

75 
node
 =Çode->
À·
;

78  
node
;

79 
	}
}

	@src/core/ngx_regex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
ngx_Êag_t
 
	mp¸e_jô
;

14 } 
	tngx_ªgex_c⁄f_t
;

17 * 
ngx_libc_cde˛
 
ngx_ªgex_mÆloc
(
size_t
 
size
);

18 
ngx_libc_cde˛
 
ngx_ªgex_‰ì
(*
p
);

19 #i‡(
NGX_HAVE_PCRE_JIT
)

20 
ngx_p¸e_‰ì_°udõs
(*
d©a
);

23 
ngx_öt_t
 
ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

25 *
ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

26 *
ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

28 *
ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

29 
ngx_c⁄f_po°_t
 
	gngx_ªgex_p¸e_jô_po°
 = { 
ngx_ªgex_p¸e_jô
 };

32 
ngx_comm™d_t
 
	gngx_ªgex_comm™ds
[] = {

34 { 
ngx_°rög
("pcre_jit"),

35 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

36 
ngx_c⁄f_£t_Êag_¶Ÿ
,

38 
off£tof
(
ngx_ªgex_c⁄f_t
, 
p¸e_jô
),

39 &
ngx_ªgex_p¸e_jô_po°
 },

41 
ngx_nuŒ_comm™d


45 
ngx_c‹e_moduÀ_t
 
	gngx_ªgex_moduÀ_˘x
 = {

46 
ngx_°rög
("regex"),

47 
ngx_ªgex_¸óã_c⁄f
,

48 
ngx_ªgex_öô_c⁄f


52 
ngx_moduÀ_t
 
	gngx_ªgex_moduÀ
 = {

53 
NGX_MODULE_V1
,

54 &
ngx_ªgex_moduÀ_˘x
,

55 
ngx_ªgex_comm™ds
,

56 
NGX_CORE_MODULE
,

57 
NULL
,

58 
ngx_ªgex_moduÀ_öô
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NGX_MODULE_V1_PADDING


68 
ngx_poﬁ_t
 *
	gngx_p¸e_poﬁ
;

69 
ngx_li°_t
 *
	gngx_p¸e_°udõs
;

73 
	$ngx_ªgex_öô
()

75 
p¸e_mÆloc
 = 
ngx_ªgex_mÆloc
;

76 
p¸e_‰ì
 = 
ngx_ªgex_‰ì
;

77 
	}
}

80 
ngx_ölöe
 

81 
	$ngx_ªgex_mÆloc_öô
(
ngx_poﬁ_t
 *
poﬁ
)

83 #i‡(
NGX_OLD_THREADS
)

84 
ngx_c‹e_és_t
 *
és
;

86 i‡(
ngx_thªaded
) {

87 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

88 
és
->
poﬁ
 =Öool;

94 
ngx_p¸e_poﬁ
 = 
poﬁ
;

95 
	}
}

98 
ngx_ölöe
 

99 
	$ngx_ªgex_mÆloc_d⁄e
()

101 #i‡(
NGX_OLD_THREADS
)

102 
ngx_c‹e_és_t
 *
és
;

104 i‡(
ngx_thªaded
) {

105 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

106 
és
->
poﬁ
 = 
NULL
;

112 
ngx_p¸e_poﬁ
 = 
NULL
;

113 
	}
}

116 
ngx_öt_t


117 
	$ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
)

119 
n
, 
îroff
;

120 *
p
;

121 
p¸e
 *
ª
;

122 c⁄° *
îr°r
;

123 
ngx_ªgex_ñt_t
 *
ñt
;

125 
	`ngx_ªgex_mÆloc_öô
(
rc
->
poﬁ
);

127 
ª
 = 
	`p¸e_compûe
((c⁄° *Ë
rc
->
∑âîn
.
d©a
, (Ërc->
›ti⁄s
,

128 &
îr°r
, &
îroff
, 
NULL
);

131 
	`ngx_ªgex_mÆloc_d⁄e
();

133 i‡(
ª
 =
NULL
) {

134 i‡((
size_t
Ë
îroff
 =
rc
->
∑âîn
.
Àn
) {

135 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

137 
îr°r
, &
rc
->
∑âîn
)

138 - 
rc
->
îr
.
d©a
;

141 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

143 
îr°r
, &
rc
->
∑âîn
,Ñc->∑âîn.
d©a
 + 
îroff
)

144 - 
rc
->
îr
.
d©a
;

147  
NGX_ERROR
;

150 
rc
->
ªgex
 = 
	`ngx_pˇŒoc
‘c->
poﬁ
, (
ngx_ªgex_t
));

151 i‡(
rc
->
ªgex
 =
NULL
) {

152 
nomem
;

155 
rc
->
ªgex
->
code
 = 
ª
;

159 i‡(
ngx_p¸e_°udõs
 !
NULL
) {

160 
ñt
 = 
	`ngx_li°_push
(
ngx_p¸e_°udõs
);

161 i‡(
ñt
 =
NULL
) {

162 
nomem
;

165 
ñt
->
ªgex
 = 
rc
->regex;

166 
ñt
->
«me
 = 
rc
->
∑âîn
.
d©a
;

169 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_CAPTURECOUNT
, &
rc
->
ˇ±uªs
);

170 i‡(
n
 < 0) {

171 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_CAPTURECOUNT) failed: %d";

172 
Áûed
;

175 i‡(
rc
->
ˇ±uªs
 == 0) {

176  
NGX_OK
;

179 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMECOUNT
, &
rc
->
«med_ˇ±uªs
);

180 i‡(
n
 < 0) {

181 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMECOUNT) failed: %d";

182 
Áûed
;

185 i‡(
rc
->
«med_ˇ±uªs
 == 0) {

186  
NGX_OK
;

189 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMEENTRYSIZE
, &
rc
->
«me_size
);

190 i‡(
n
 < 0) {

191 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMEENTRYSIZE) failed: %d";

192 
Áûed
;

195 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMETABLE
, &
rc
->
«mes
);

196 i‡(
n
 < 0) {

197 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMETABLE) failed: %d";

198 
Áûed
;

201  
NGX_OK
;

203 
Áûed
:

205 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->îr.Àn, 
p
, &rc->
∑âîn
, 
n
)

206 - 
rc
->
îr
.
d©a
;

207  
NGX_ERROR
;

209 
nomem
:

211 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

213 &
rc
->
∑âîn
)

214 - 
rc
->
îr
.
d©a
;

215  
NGX_ERROR
;

216 
	}
}

219 
ngx_öt_t


220 
	$ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
)

222 
ngx_öt_t
 
n
;

223 
ngx_uöt_t
 
i
;

224 
ngx_ªgex_ñt_t
 *
ª
;

226 
ª
 = 
a
->
ñts
;

228 
i
 = 0; i < 
a
->
√…s
; i++) {

230 
n
 = 
	`ngx_ªgex_exec
(
ª
[
i
].
ªgex
, 
s
, 
NULL
, 0);

232 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

236 i‡(
n
 < 0) {

237 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

238 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%s\"",

239 
n
, 
s
, 
ª
[
i
].
«me
);

240  
NGX_ERROR
;

245  
NGX_OK
;

248  
NGX_DECLINED
;

249 
	}
}

252 * 
ngx_libc_cde˛


253 
	$ngx_ªgex_mÆloc
(
size_t
 
size
)

255 
ngx_poﬁ_t
 *
poﬁ
;

256 #i‡(
NGX_OLD_THREADS
)

257 
ngx_c‹e_és_t
 *
és
;

259 i‡(
ngx_thªaded
) {

260 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

261 
poﬁ
 = 
és
->pool;

264 
poﬁ
 = 
ngx_p¸e_poﬁ
;

269 
poﬁ
 = 
ngx_p¸e_poﬁ
;

273 i‡(
poﬁ
) {

274  
	`ngx_∑Œoc
(
poﬁ
, 
size
);

277  
NULL
;

278 
	}
}

281 
ngx_libc_cde˛


282 
	$ngx_ªgex_‰ì
(*
p
)

285 
	}
}

288 #i‡(
NGX_HAVE_PCRE_JIT
)

291 
	$ngx_p¸e_‰ì_°udõs
(*
d©a
)

293 
ngx_li°_t
 *
°udõs
 = 
d©a
;

295 
ngx_uöt_t
 
i
;

296 
ngx_li°_∑π_t
 *
∑π
;

297 
ngx_ªgex_ñt_t
 *
ñts
;

299 
∑π
 = &
°udõs
->part;

300 
ñts
 = 
∑π
->elts;

302 
i
 = 0 ; ; i++) {

304 i‡(
i
 >
∑π
->
√…s
) {

305 i‡(
∑π
->
√xt
 =
NULL
) {

309 
∑π
 =Ö¨t->
√xt
;

310 
ñts
 = 
∑π
->elts;

311 
i
 = 0;

314 i‡(
ñts
[
i
].
ªgex
->
exåa
 !
NULL
) {

315 
	`p¸e_‰ì_°udy
(
ñts
[
i
].
ªgex
->
exåa
);

318 
	}
}

323 
ngx_öt_t


324 
	$ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

326 
›t
;

327 c⁄° *
îr°r
;

328 
ngx_uöt_t
 
i
;

329 
ngx_li°_∑π_t
 *
∑π
;

330 
ngx_ªgex_ñt_t
 *
ñts
;

332 
›t
 = 0;

334 #i‡(
NGX_HAVE_PCRE_JIT
)

336 
ngx_ªgex_c⁄f_t
 *
rcf
;

337 
ngx_poﬁ_˛ónup_t
 *
˛n
;

339 
rcf
 = (
ngx_ªgex_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ªgex_moduÀ
);

341 i‡(
rcf
->
p¸e_jô
) {

342 
›t
 = 
PCRE_STUDY_JIT_COMPILE
;

350 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cy˛e
->
poﬁ
, 0);

351 i‡(
˛n
 =
NULL
) {

352  
NGX_ERROR
;

355 
˛n
->
h™dÀr
 = 
ngx_p¸e_‰ì_°udõs
;

356 
˛n
->
d©a
 = 
ngx_p¸e_°udõs
;

361 
	`ngx_ªgex_mÆloc_öô
(
cy˛e
->
poﬁ
);

363 
∑π
 = &
ngx_p¸e_°udõs
->part;

364 
ñts
 = 
∑π
->elts;

366 
i
 = 0 ; ; i++) {

368 i‡(
i
 >
∑π
->
√…s
) {

369 i‡(
∑π
->
√xt
 =
NULL
) {

373 
∑π
 =Ö¨t->
√xt
;

374 
ñts
 = 
∑π
->elts;

375 
i
 = 0;

378 
ñts
[
i
].
ªgex
->
exåa
 = 
	`p¸e_°udy
”…s[i].ªgex->
code
, 
›t
, &
îr°r
);

380 i‡(
îr°r
 !
NULL
) {

381 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

383 
îr°r
, 
ñts
[
i
].
«me
);

386 #i‡(
NGX_HAVE_PCRE_JIT
)

387 i‡(
›t
 & 
PCRE_STUDY_JIT_COMPILE
) {

388 
jô
, 
n
;

390 
jô
 = 0;

391 
n
 = 
	`p¸e_fuŒöfo
(
ñts
[
i
].
ªgex
->
code
,É…s[i].ªgex->
exåa
,

392 
PCRE_INFO_JIT
, &
jô
);

394 i‡(
n
 !0 || 
jô
 != 1) {

395 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
cy˛e
->
log
, 0,

397 
ñts
[
i
].
«me
);

403 
	`ngx_ªgex_mÆloc_d⁄e
();

405 
ngx_p¸e_°udõs
 = 
NULL
;

407  
NGX_OK
;

408 
	}
}

412 
	$ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

414 
ngx_ªgex_c⁄f_t
 *
rcf
;

416 
rcf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_ªgex_c⁄f_t
));

417 i‡(
rcf
 =
NULL
) {

418  
NULL
;

421 
rcf
->
p¸e_jô
 = 
NGX_CONF_UNSET
;

423 
ngx_p¸e_°udõs
 = 
	`ngx_li°_¸óã
(
cy˛e
->
poﬁ
, 8, (
ngx_ªgex_ñt_t
));

424 i‡(
ngx_p¸e_°udõs
 =
NULL
) {

425  
NULL
;

428  
rcf
;

429 
	}
}

433 
	$ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

435 
ngx_ªgex_c⁄f_t
 *
rcf
 = 
c⁄f
;

437 
	`ngx_c⁄f_öô_vÆue
(
rcf
->
p¸e_jô
, 0);

439  
NGX_CONF_OK
;

440 
	}
}

444 
	$ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

446 
ngx_Êag_t
 *
Â
 = 
d©a
;

448 i‡(*
Â
 == 0) {

449  
NGX_CONF_OK
;

452 #i‡(
NGX_HAVE_PCRE_JIT
)

454 
jô
, 
r
;

456 
jô
 = 0;

457 
r
 = 
	`p¸e_c⁄fig
(
PCRE_CONFIG_JIT
, &
jô
);

459 i‡(
r
 !0 || 
jô
 != 1) {

460 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

462 *
Â
 = 0;

466 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

468 *
Â
 = 0;

471  
NGX_CONF_OK
;

472 
	}
}

	@src/core/ngx_regex.h

8 #i‚de‡
_NGX_REGEX_H_INCLUDED_


9 
	#_NGX_REGEX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<p¸e.h
>

18 
	#NGX_REGEX_NO_MATCHED
 
PCRE_ERROR_NOMATCH


	)

20 
	#NGX_REGEX_CASELESS
 
PCRE_CASELESS


	)

24 
p¸e
 *
	mcode
;

25 
p¸e_exåa
 *
	mexåa
;

26 } 
	tngx_ªgex_t
;

30 
ngx_°r_t
 
	m∑âîn
;

31 
ngx_poﬁ_t
 *
	mpoﬁ
;

32 
ngx_öt_t
 
	m›ti⁄s
;

34 
ngx_ªgex_t
 *
	mªgex
;

35 
	mˇ±uªs
;

36 
	m«med_ˇ±uªs
;

37 
	m«me_size
;

38 
u_ch¨
 *
	m«mes
;

39 
ngx_°r_t
 
	mîr
;

40 } 
	tngx_ªgex_compûe_t
;

44 
ngx_ªgex_t
 *
	mªgex
;

45 
u_ch¨
 *
	m«me
;

46 } 
	tngx_ªgex_ñt_t
;

49 
ngx_ªgex_öô
();

50 
ngx_öt_t
 
ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
);

52 
	#ngx_ªgex_exec
(
ª
, 
s
, 
ˇ±uªs
, 
size
) \

53 
	`p¸e_exec
(
ª
->
code
,Ñe->
exåa
, (c⁄° *Ë(
s
)->
d©a
, (s)->
Àn
, 0, 0, \

54 
ˇ±uªs
, 
size
)

	)

55 
	#ngx_ªgex_exec_n
 "p¸e_exec()"

	)

57 
ngx_öt_t
 
ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
);

	@src/core/ngx_resolver.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_RESOLVER_UDP_SIZE
 4096

	)

17 
u_ch¨
 
	midít_hi
;

18 
u_ch¨
 
	midít_lo
;

19 
u_ch¨
 
	mÊags_hi
;

20 
u_ch¨
 
	mÊags_lo
;

21 
u_ch¨
 
	mnqs_hi
;

22 
u_ch¨
 
	mnqs_lo
;

23 
u_ch¨
 
	m«n_hi
;

24 
u_ch¨
 
	m«n_lo
;

25 
u_ch¨
 
	m¬s_hi
;

26 
u_ch¨
 
	m¬s_lo
;

27 
u_ch¨
 
	m«r_hi
;

28 
u_ch¨
 
	m«r_lo
;

29 } 
	tngx_ªsﬁvî_hdr_t
;

33 
u_ch¨
 
	mty≥_hi
;

34 
u_ch¨
 
	mty≥_lo
;

35 
u_ch¨
 
	m˛ass_hi
;

36 
u_ch¨
 
	m˛ass_lo
;

37 } 
	tngx_ªsﬁvî_qs_t
;

41 
u_ch¨
 
	mty≥_hi
;

42 
u_ch¨
 
	mty≥_lo
;

43 
u_ch¨
 
	m˛ass_hi
;

44 
u_ch¨
 
	m˛ass_lo
;

45 
u_ch¨
 
	mâl
[4];

46 
u_ch¨
 
	mÀn_hi
;

47 
u_ch¨
 
	mÀn_lo
;

48 } 
	tngx_ªsﬁvî_™_t
;

51 
	#ngx_ªsﬁvî_node
(
n
) \

52 (
ngx_ªsﬁvî_node_t
 *) \

53 ((
u_ch¨
 *Ë(
n
Ë- 
	`off£tof
(
ngx_ªsﬁvî_node_t
, 
node
))

	)

56 
ngx_öt_t
 
ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
);

59 
ngx_ªsﬁvî_˛ónup
(*
d©a
);

60 
ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
);

61 
ngx_öt_t
 
ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
,

62 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

63 
ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

64 
ngx_queue_t
 *
queue
);

65 
ngx_öt_t
 
ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
,

66 
ngx_ªsﬁvî_node_t
 *
∫
);

67 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

68 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

69 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

70 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

71 
ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
);

72 
time_t
 
ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

73 
ngx_queue_t
 *
queue
);

74 
ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
);

75 
ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
,

76 
size_t
 
n
);

77 
ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

78 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
qty≥
,

79 
ngx_uöt_t
 
«n
,Çgx_uöt_à
™s
);

80 
ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

81 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
);

82 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
,

83 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
);

84 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
,

85 
ö_addr_t
 
addr
);

86 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

87 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

88 
ngx_öt_t
 
ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
,

89 
u_ch¨
 *
buf
, u_ch¨ *
§c
, u_ch¨ *
œ°
);

90 
ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
);

91 
ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
);

92 *
ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

93 *
ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

94 
ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

95 
ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

96 *
ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
);

97 
ngx_addr_t
 *
ngx_ªsﬁvî_exp‹t
(
ngx_ªsﬁvî_t
 *
r
,

98 
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_uöt_t
 
rŸ©e
);

99 
u_ch¨
 *
ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

101 #i‡(
NGX_HAVE_INET6
)

102 
ngx_ªsﬁvî_rbåì_ö£π_addr6_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

103 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

104 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_addr6
(
ngx_ªsﬁvî_t
 *
r
,

105 
ö6_addr
 *
addr
, 
uöt32_t
 
hash
);

109 
ngx_ªsﬁvî_t
 *

110 
	$ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
, 
ngx_uöt_t
 
n
)

112 
ngx_°r_t
 
s
;

113 
ngx_uæ_t
 
u
;

114 
ngx_uöt_t
 
i
, 
j
;

115 
ngx_ªsﬁvî_t
 *
r
;

116 
ngx_poﬁ_˛ónup_t
 *
˛n
;

117 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

119 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

120 i‡(
˛n
 =
NULL
) {

121  
NULL
;

124 
˛n
->
h™dÀr
 = 
ngx_ªsﬁvî_˛ónup
;

126 
r
 = 
	`ngx_ˇŒoc
((
ngx_ªsﬁvî_t
), 
cf
->
log
);

127 i‡(
r
 =
NULL
) {

128  
NULL
;

131 
˛n
->
d©a
 = 
r
;

133 
r
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
cf
->
log
);

134 i‡(
r
->
evít
 =
NULL
) {

135  
NULL
;

138 
	`ngx_rbåì_öô
(&
r
->
«me_rbåì
, &r->
«me_£¡öñ
,

139 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
);

141 
	`ngx_rbåì_öô
(&
r
->
addr_rbåì
, &r->
addr_£¡öñ
,

142 
ngx_rbåì_ö£π_vÆue
);

144 
	`ngx_queue_öô
(&
r
->
«me_ª£nd_queue
);

145 
	`ngx_queue_öô
(&
r
->
addr_ª£nd_queue
);

147 
	`ngx_queue_öô
(&
r
->
«me_expúe_queue
);

148 
	`ngx_queue_öô
(&
r
->
addr_expúe_queue
);

150 #i‡(
NGX_HAVE_INET6
)

151 
r
->
ùv6
 = 1;

153 
	`ngx_rbåì_öô
(&
r
->
addr6_rbåì
, &r->
addr6_£¡öñ
,

154 
ngx_ªsﬁvî_rbåì_ö£π_addr6_vÆue
);

156 
	`ngx_queue_öô
(&
r
->
addr6_ª£nd_queue
);

158 
	`ngx_queue_öô
(&
r
->
addr6_expúe_queue
);

161 
r
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_ª£nd_h™dÀr
;

162 
r
->
evít
->
d©a
 =Ñ;

163 
r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

164 
r
->
idít
 = -1;

166 
r
->
ª£nd_timeout
 = 5;

167 
r
->
expúe
 = 30;

168 
r
->
vÆid
 = 0;

170 
r
->
log
 = &
cf
->
cy˛e
->
√w_log
;

171 
r
->
log_Àvñ
 = 
NGX_LOG_ERR
;

173 i‡(
n
) {

174 i‡(
	`ngx_¨øy_öô
(&
r
->
udp_c⁄√˘i⁄s
, 
cf
->
poﬁ
, 
n
,

175 (
ngx_udp_c⁄√˘i⁄_t
))

176 !
NGX_OK
)

178  
NULL
;

182 
i
 = 0; i < 
n
; i++) {

183 i‡(
	`ngx_°∫cmp
(
«mes
[
i
].
d©a
, "valid=", 6) == 0) {

184 
s
.
Àn
 = 
«mes
[
i
].len - 6;

185 
s
.
d©a
 = 
«mes
[
i
].data + 6;

187 
r
->
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

189 i‡(
r
->
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

190 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

191 "övÆidÖ¨amëî: %V", &
«mes
[
i
]);

192  
NULL
;

198 #i‡(
NGX_HAVE_INET6
)

199 i‡(
	`ngx_°∫cmp
(
«mes
[
i
].
d©a
, "ipv6=", 5) == 0) {

201 i‡(
	`ngx_°rcmp
(&
«mes
[
i
].
d©a
[5], "on") == 0) {

202 
r
->
ùv6
 = 1;

204 } i‡(
	`ngx_°rcmp
(&
«mes
[
i
].
d©a
[5], "off") == 0) {

205 
r
->
ùv6
 = 0;

208 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

209 "övÆidÖ¨amëî: %V", &
«mes
[
i
]);

210  
NULL
;

217 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

219 
u
.
uæ
 = 
«mes
[
i
];

220 
u
.
deÁu…_p‹t
 = 53;

222 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

223 i‡(
u
.
îr
) {

224 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

226 
u
.
îr
, &u.
uæ
);

229  
NULL
;

232 
uc
 = 
	`ngx_¨øy_push_n
(&
r
->
udp_c⁄√˘i⁄s
, 
u
.
«ddrs
);

233 i‡(
uc
 =
NULL
) {

234  
NULL
;

237 
	`ngx_memzîo
(
uc
, 
u
.
«ddrs
 * (
ngx_udp_c⁄√˘i⁄_t
));

239 
j
 = 0; j < 
u
.
«ddrs
; j++) {

240 
uc
[
j
].
sockaddr
 = 
u
.
addrs
[j].sockaddr;

241 
uc
[
j
].
sockÀn
 = 
u
.
addrs
[j].socklen;

242 
uc
[
j
].
£rvî
 = 
u
.
addrs
[j].
«me
;

246  
r
;

247 
	}
}

251 
	$ngx_ªsﬁvî_˛ónup
(*
d©a
)

253 
ngx_ªsﬁvî_t
 *
r
 = 
d©a
;

255 
ngx_uöt_t
 
i
;

256 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

258 i‡(
r
) {

259 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

262 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
«me_rbåì
);

264 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
addr_rbåì
);

266 #i‡(
NGX_HAVE_INET6
)

267 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
addr6_rbåì
);

270 i‡(
r
->
evít
) {

271 
	`ngx_‰ì
(
r
->
evít
);

275 
uc
 = 
r
->
udp_c⁄√˘i⁄s
.
ñts
;

277 
i
 = 0; i < 
r
->
udp_c⁄√˘i⁄s
.
√…s
; i++) {

278 i‡(
uc
[
i
].
c⁄√˘i⁄
) {

279 
	`ngx_˛o£_c⁄√˘i⁄
(
uc
[
i
].
c⁄√˘i⁄
);

283 
	`ngx_‰ì
(
r
);

285 
	}
}

289 
	$ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
)

291 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

292 
ngx_ªsﬁvî_node_t
 *
∫
;

294 
åì
->
roŸ
 !åì->
£¡öñ
) {

296 
∫
 = 
	`ngx_ªsﬁvî_node
(
	`ngx_rbåì_mö
(
åì
->
roŸ
,Åªe->
£¡öñ
));

298 
	`ngx_queue_ªmove
(&
∫
->
queue
);

300 
˘x
 = 
∫
->
waôög
; ctx; ctx = 
√xt
) {

301 
√xt
 = 
˘x
->next;

303 i‡(
˘x
->
evít
) {

304 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

307 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

310 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

312 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

314 
	}
}

317 
ngx_ªsﬁvî_˘x_t
 *

318 
	$ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
ãmp
)

320 
ö_addr_t
 
addr
;

321 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

323 i‡(
ãmp
) {

324 
addr
 = 
	`ngx_öë_addr
(
ãmp
->
«me
.
d©a
,Åemp->«me.
Àn
);

326 i‡(
addr
 !
INADDR_NONE
) {

327 
ãmp
->
ªsﬁvî
 = 
r
;

328 
ãmp
->
°©e
 = 
NGX_OK
;

329 
ãmp
->
«ddrs
 = 1;

330 
ãmp
->
addrs
 = &ãmp->
addr
;

331 
ãmp
->
addr
.
sockaddr
 = (sockadd∏*Ë&ãmp->
sö
;

332 
ãmp
->
addr
.
sockÀn
 = (
sockaddr_ö
);

333 
	`ngx_memzîo
(&
ãmp
->
sö
, (
sockaddr_ö
));

334 
ãmp
->
sö
.
sö_Ámûy
 = 
AF_INET
;

335 
ãmp
->
sö
.
sö_addr
.
s_addr
 = 
addr
;

336 
ãmp
->
quick
 = 1;

338  
ãmp
;

342 i‡(
r
->
udp_c⁄√˘i⁄s
.
√…s
 == 0) {

343  
NGX_NO_RESOLVER
;

346 
˘x
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_ªsﬁvî_˘x_t
));

348 i‡(
˘x
) {

349 
˘x
->
ªsﬁvî
 = 
r
;

352  
˘x
;

353 
	}
}

356 
ngx_öt_t


357 
	$ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

359 
ngx_öt_t
 
rc
;

360 
ngx_ªsﬁvî_t
 *
r
;

362 
r
 = 
˘x
->
ªsﬁvî
;

364 i‡(
˘x
->
«me
.
Àn
 > 0 && ctx->«me.
d©a
[ctx->name.len - 1] == '.') {

365 
˘x
->
«me
.
Àn
--;

368 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

369 "ªsﬁve: \"%V\"", &
˘x
->
«me
);

371 i‡(
˘x
->
quick
) {

372 
˘x
->
	`h™dÀr
(ctx);

373  
NGX_OK
;

378 
rc
 = 
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

380 i‡(
rc
 =
NGX_OK
) {

381  
NGX_OK
;

386 i‡(
rc
 =
NGX_AGAIN
) {

387  
NGX_OK
;

392 i‡(
˘x
->
evít
) {

393 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

396 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

398  
NGX_ERROR
;

399 
	}
}

403 
	$ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

405 
uöt32_t
 
hash
;

406 
ngx_ªsﬁvî_t
 *
r
;

407 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

408 
ngx_ªsﬁvî_node_t
 *
∫
;

410 
r
 = 
˘x
->
ªsﬁvî
;

412 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

413 "ªsﬁvê«mêd⁄e: %i", 
˘x
->
°©e
);

415 i‡(
˘x
->
quick
) {

419 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

420 
	`ngx_dñ_timî
(
˘x
->
evít
);

425 i‡(
˘x
->
°©e
 =
NGX_AGAIN
) {

427 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

429 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

431 i‡(
∫
) {

432 
p
 = &
∫
->
waôög
;

433 
w
 = 
∫
->
waôög
;

435 
w
) {

436 i‡(
w
 =
˘x
) {

437 *
p
 = 
w
->
√xt
;

439 
d⁄e
;

442 
p
 = &
w
->
√xt
;

443 
w
 = w->
√xt
;

447 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

448 "couldÇŸ c™˚»%VÑesﬁvög", &
˘x
->
«me
);

451 
d⁄e
:

453 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
«me_rbåì
, &r->
«me_expúe_queue
);

459 i‡(
˘x
->
evít
) {

460 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

463 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

466 
	}
}

469 
ngx_öt_t


470 
	$ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

472 
uöt32_t
 
hash
;

473 
ngx_öt_t
 
rc
;

474 
ngx_uöt_t
 
«ddrs
;

475 
ngx_addr_t
 *
addrs
;

476 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

477 
ngx_ªsﬁvî_node_t
 *
∫
;

479 
	`ngx_°æow
(
˘x
->
«me
.
d©a
, ctx->«me.d©a, ctx->«me.
Àn
);

481 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

483 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

485 i‡(
∫
) {

487 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

489 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

491 
	`ngx_queue_ªmove
(&
∫
->
queue
);

493 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

495 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

497 
«ddrs
 = (
∫
->«ddr†=(
u_sh‹t
) -1) ? 0 :Ñn->naddrs;

498 #i‡(
NGX_HAVE_INET6
)

499 
«ddrs
 +(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) ? 0 :Ñn->naddrs6;

502 i‡(
«ddrs
) {

504 i‡(
«ddrs
 =1 && 
∫
->naddrs == 1) {

505 
addrs
 = 
NULL
;

508 
addrs
 = 
	`ngx_ªsﬁvî_exp‹t
(
r
, 
∫
, 1);

509 i‡(
addrs
 =
NULL
) {

510  
NGX_ERROR
;

514 
˘x
->
√xt
 = 
∫
->
waôög
;

515 
∫
->
waôög
 = 
NULL
;

520 
˘x
->
°©e
 = 
NGX_OK
;

521 
˘x
->
«ddrs
 =Çaddrs;

523 i‡(
addrs
 =
NULL
) {

524 
˘x
->
addrs
 = &˘x->
addr
;

525 
˘x
->
addr
.
sockaddr
 = (sockadd∏*Ë&˘x->
sö
;

526 
˘x
->
addr
.
sockÀn
 = (
sockaddr_ö
);

527 
	`ngx_memzîo
(&
˘x
->
sö
, (
sockaddr_ö
));

528 
˘x
->
sö
.
sö_Ámûy
 = 
AF_INET
;

529 
˘x
->
sö
.
sö_addr
.
s_addr
 = 
∫
->
u
.
addr
;

532 
˘x
->
addrs
 =áddrs;

535 
√xt
 = 
˘x
->next;

537 
˘x
->
	`h™dÀr
(ctx);

539 
˘x
 = 
√xt
;

540 } 
˘x
);

542 i‡(
addrs
 !
NULL
) {

543 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
->
sockaddr
);

544 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

547  
NGX_OK
;

552 i‡(
˘x
->
ªcursi⁄
++ < 
NGX_RESOLVER_MAX_RECURSION
) {

554 
˘x
->
«me
.
Àn
 = 
∫
->
˙Àn
;

555 
˘x
->
«me
.
d©a
 = 
∫
->
u
.
˙ame
;

557  
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

560 
˘x
->
√xt
 = 
∫
->
waôög
;

561 
∫
->
waôög
 = 
NULL
;

566 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

567 
√xt
 = 
˘x
->next;

569 
˘x
->
	`h™dÀr
(ctx);

571 
˘x
 = 
√xt
;

572 } 
˘x
);

574  
NGX_OK
;

577 i‡(
∫
->
waôög
) {

579 
˘x
->
√xt
 = 
∫
->
waôög
;

580 
∫
->
waôög
 = 
˘x
;

581 
˘x
->
°©e
 = 
NGX_AGAIN
;

583  
NGX_AGAIN
;

586 
	`ngx_queue_ªmove
(&
∫
->
queue
);

590 i‡(
∫
->
quîy
) {

591 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

592 
∫
->
quîy
 = 
NULL
;

593 #i‡(
NGX_HAVE_INET6
)

594 
∫
->
quîy6
 = 
NULL
;

598 i‡(
∫
->
˙Àn
) {

599 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

602 i‡(
∫
->
«ddrs
 > 1 &&Ñn->«ddr†!(
u_sh‹t
) -1) {

603 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

606 #i‡(
NGX_HAVE_INET6
)

607 i‡(
∫
->
«ddrs6
 > 1 &&Ñn->«ddrs6 !(
u_sh‹t
) -1) {

608 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u6
.
addrs6
);

616 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

617 i‡(
∫
 =
NULL
) {

618  
NGX_ERROR
;

621 
∫
->
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
˘x
->«me.
d©a
, ctx->«me.
Àn
);

622 i‡(
∫
->
«me
 =
NULL
) {

623 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

624  
NGX_ERROR
;

627 
∫
->
node
.
key
 = 
hash
;

628 
∫
->
∆í
 = (
u_sh‹t
Ë
˘x
->
«me
.
Àn
;

629 
∫
->
quîy
 = 
NULL
;

630 #i‡(
NGX_HAVE_INET6
)

631 
∫
->
quîy6
 = 
NULL
;

634 
	`ngx_rbåì_ö£π
(&
r
->
«me_rbåì
, &
∫
->
node
);

637 
rc
 = 
	`ngx_ªsﬁvî_¸óã_«me_quîy
(
∫
, 
˘x
);

639 i‡(
rc
 =
NGX_ERROR
) {

640 
Áûed
;

643 i‡(
rc
 =
NGX_DECLINED
) {

644 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

646 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

647 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

648 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

650 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

651 
˘x
->
	`h™dÀr
(ctx);

653  
NGX_OK
;

656 
∫
->
«ddrs
 = (
u_sh‹t
) -1;

657 #i‡(
NGX_HAVE_INET6
)

658 
∫
->
«ddrs6
 = 
r
->
ùv6
 ? (
u_sh‹t
) -1 : 0;

661 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

662 
Áûed
;

665 i‡(
˘x
->
evít
 =
NULL
) {

666 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

667 i‡(
˘x
->
evít
 =
NULL
) {

668 
Áûed
;

671 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

672 
˘x
->
evít
->
d©a
 = 
∫
;

673 
˘x
->
evít
->
log
 = 
r
->log;

674 
∫
->
idít
 = -1;

676 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

679 i‡(
	`ngx_queue_em±y
(&
r
->
«me_ª£nd_queue
)) {

680 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

683 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

685 
	`ngx_queue_ö£π_hód
(&
r
->
«me_ª£nd_queue
, &
∫
->
queue
);

687 
∫
->
code
 = 0;

688 
∫
->
˙Àn
 = 0;

689 
∫
->
vÆid
 = 0;

690 
∫
->
âl
 = 
NGX_MAX_UINT32_VALUE
;

691 
∫
->
waôög
 = 
˘x
;

693 
˘x
->
°©e
 = 
NGX_AGAIN
;

695  
NGX_AGAIN
;

697 
Áûed
:

699 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

701 i‡(
∫
->
quîy
) {

702 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

705 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

707 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

709  
NGX_ERROR
;

710 
	}
}

713 
ngx_öt_t


714 
	$ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

716 
u_ch¨
 *
«me
;

717 
ö_addr_t
 
addr
;

718 
ngx_queue_t
 *
ª£nd_queue
, *
expúe_queue
;

719 
ngx_rbåì_t
 *
åì
;

720 
ngx_ªsﬁvî_t
 *
r
;

721 
sockaddr_ö
 *
sö
;

722 
ngx_ªsﬁvî_node_t
 *
∫
;

723 #i‡(
NGX_HAVE_INET6
)

724 
uöt32_t
 
hash
;

725 
sockaddr_ö6
 *
sö6
;

728 #i‡(
NGX_SUPPRESS_WARN
)

729 
addr
 = 0;

730 #i‡(
NGX_HAVE_INET6
)

731 
hash
 = 0;

732 
sö6
 = 
NULL
;

736 
r
 = 
˘x
->
ªsﬁvî
;

738 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

740 #i‡(
NGX_HAVE_INET6
)

741 
AF_INET6
:

742 
sö6
 = (
sockaddr_ö6
 *Ë
˘x
->
addr
.
sockaddr
;

743 
hash
 = 
	`ngx_¸c32_sh‹t
(
sö6
->
sö6_addr
.
s6_addr
, 16);

747 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr6
(
r
, &
sö6
->
sö6_addr
, 
hash
);

749 
åì
 = &
r
->
addr6_rbåì
;

750 
ª£nd_queue
 = &
r
->
addr6_ª£nd_queue
;

751 
expúe_queue
 = &
r
->
addr6_expúe_queue
;

757 
sö
 = (
sockaddr_ö
 *Ë
˘x
->
addr
.
sockaddr
;

758 
addr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

762 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

764 
åì
 = &
r
->
addr_rbåì
;

765 
ª£nd_queue
 = &
r
->
addr_ª£nd_queue
;

766 
expúe_queue
 = &
r
->
addr_expúe_queue
;

769 i‡(
∫
) {

771 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

773 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

775 
	`ngx_queue_ªmove
(&
∫
->
queue
);

777 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

779 
	`ngx_queue_ö£π_hód
(
expúe_queue
, &
∫
->
queue
);

781 
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Ñn->
∆í
);

782 i‡(
«me
 =
NULL
) {

783 
Áûed
;

786 
˘x
->
«me
.
Àn
 = 
∫
->
∆í
;

787 
˘x
->
«me
.
d©a
 =Çame;

791 
˘x
->
°©e
 = 
NGX_OK
;

793 
˘x
->
	`h™dÀr
(ctx);

795 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
);

797  
NGX_OK
;

800 i‡(
∫
->
waôög
) {

802 
˘x
->
√xt
 = 
∫
->
waôög
;

803 
∫
->
waôög
 = 
˘x
;

804 
˘x
->
°©e
 = 
NGX_AGAIN
;

808  
NGX_OK
;

811 
	`ngx_queue_ªmove
(&
∫
->
queue
);

813 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

814 
∫
->
quîy
 = 
NULL
;

815 #i‡(
NGX_HAVE_INET6
)

816 
∫
->
quîy6
 = 
NULL
;

820 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

821 i‡(
∫
 =
NULL
) {

822 
Áûed
;

825 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

827 #i‡(
NGX_HAVE_INET6
)

828 
AF_INET6
:

829 
∫
->
addr6
 = 
sö6
->
sö6_addr
;

830 
∫
->
node
.
key
 = 
hash
;

835 
∫
->
node
.
key
 = 
addr
;

838 
∫
->
quîy
 = 
NULL
;

839 #i‡(
NGX_HAVE_INET6
)

840 
∫
->
quîy6
 = 
NULL
;

843 
	`ngx_rbåì_ö£π
(
åì
, &
∫
->
node
);

846 i‡(
	`ngx_ªsﬁvî_¸óã_addr_quîy
(
∫
, 
˘x
Ë!
NGX_OK
) {

847 
Áûed
;

850 
∫
->
«ddrs
 = (
u_sh‹t
) -1;

851 #i‡(
NGX_HAVE_INET6
)

852 
∫
->
«ddrs6
 = (
u_sh‹t
) -1;

855 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

856 
Áûed
;

859 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

860 i‡(
˘x
->
evít
 =
NULL
) {

861 
Áûed
;

864 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

865 
˘x
->
evít
->
d©a
 = 
∫
;

866 
˘x
->
evít
->
log
 = 
r
->log;

867 
∫
->
idít
 = -1;

869 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

871 i‡(
	`ngx_queue_em±y
(
ª£nd_queue
)) {

872 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

875 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

877 
	`ngx_queue_ö£π_hód
(
ª£nd_queue
, &
∫
->
queue
);

879 
∫
->
code
 = 0;

880 
∫
->
˙Àn
 = 0;

881 
∫
->
«me
 = 
NULL
;

882 
∫
->
∆í
 = 0;

883 
∫
->
vÆid
 = 0;

884 
∫
->
âl
 = 
NGX_MAX_UINT32_VALUE
;

885 
∫
->
waôög
 = 
˘x
;

889 
˘x
->
°©e
 = 
NGX_AGAIN
;

891  
NGX_OK
;

893 
Áûed
:

895 i‡(
∫
) {

896 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

898 i‡(
∫
->
quîy
) {

899 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

902 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

907 i‡(
˘x
->
evít
) {

908 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

911 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

913  
NGX_ERROR
;

914 
	}
}

918 
	$ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

920 
ö_addr_t
 
addr
;

921 
ngx_queue_t
 *
expúe_queue
;

922 
ngx_rbåì_t
 *
åì
;

923 
ngx_ªsﬁvî_t
 *
r
;

924 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

925 
sockaddr_ö
 *
sö
;

926 
ngx_ªsﬁvî_node_t
 *
∫
;

927 #i‡(
NGX_HAVE_INET6
)

928 
uöt32_t
 
hash
;

929 
sockaddr_ö6
 *
sö6
;

932 
r
 = 
˘x
->
ªsﬁvî
;

934 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

936 #i‡(
NGX_HAVE_INET6
)

937 
AF_INET6
:

938 
åì
 = &
r
->
addr6_rbåì
;

939 
expúe_queue
 = &
r
->
addr6_expúe_queue
;

944 
åì
 = &
r
->
addr_rbåì
;

945 
expúe_queue
 = &
r
->
addr_expúe_queue
;

948 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

949 "ªsﬁvêadd∏d⁄e: %i", 
˘x
->
°©e
);

951 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

952 
	`ngx_dñ_timî
(
˘x
->
evít
);

957 i‡(
˘x
->
°©e
 =
NGX_AGAIN
) {

959 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

961 #i‡(
NGX_HAVE_INET6
)

962 
AF_INET6
:

963 
sö6
 = (
sockaddr_ö6
 *Ë
˘x
->
addr
.
sockaddr
;

964 
hash
 = 
	`ngx_¸c32_sh‹t
(
sö6
->
sö6_addr
.
s6_addr
, 16);

965 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr6
(
r
, &
sö6
->
sö6_addr
, 
hash
);

970 
sö
 = (
sockaddr_ö
 *Ë
˘x
->
addr
.
sockaddr
;

971 
addr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

972 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

975 i‡(
∫
) {

976 
p
 = &
∫
->
waôög
;

977 
w
 = 
∫
->
waôög
;

979 
w
) {

980 i‡(
w
 =
˘x
) {

981 *
p
 = 
w
->
√xt
;

983 
d⁄e
;

986 
p
 = &
w
->
√xt
;

987 
w
 = w->
√xt
;

992 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

993 
ngx_°r_t
 
addπext
;

995 
addπext
.
d©a
 = 
ãxt
;

996 
addπext
.
Àn
 = 
	`ngx_sock_¡›
(
˘x
->
addr
.
sockaddr
, ctx->addr.
sockÀn
,

997 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

999 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

1000 "couldÇŸ c™˚»%VÑesﬁvög", &
addπext
);

1004 
d⁄e
:

1006 
	`ngx_ªsﬁvî_expúe
(
r
, 
åì
, 
expúe_queue
);

1012 i‡(
˘x
->
evít
) {

1013 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

1016 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

1019 
	}
}

1023 
	$ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

1025 
time_t
 
now
;

1026 
ngx_uöt_t
 
i
;

1027 
ngx_queue_t
 *
q
;

1028 
ngx_ªsﬁvî_node_t
 *
∫
;

1030 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolverÉxpire");

1032 
now
 = 
	`ngx_time
();

1034 
i
 = 0; i < 2; i++) {

1035 i‡(
	`ngx_queue_em±y
(
queue
)) {

1039 
q
 = 
	`ngx_queue_œ°
(
queue
);

1041 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1043 i‡(
now
 <
∫
->
expúe
) {

1047 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1048 "ªsﬁvîÉxpúê\"%*s\"", (
size_t
Ë
∫
->
∆í
,Ñn->
«me
);

1050 
	`ngx_queue_ªmove
(
q
);

1052 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

1054 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1056 
	}
}

1059 
ngx_öt_t


1060 
	$ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

1062 
ssize_t
 
n
;

1063 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

1065 
uc
 = 
r
->
udp_c⁄√˘i⁄s
.
ñts
;

1067 
uc
 = &uc[
r
->
œ°_c⁄√˘i⁄
++];

1068 i‡(
r
->
œ°_c⁄√˘i⁄
 =r->
udp_c⁄√˘i⁄s
.
√…s
) {

1069 
r
->
œ°_c⁄√˘i⁄
 = 0;

1072 i‡(
uc
->
c⁄√˘i⁄
 =
NULL
) {

1074 
uc
->
log
 = *
r
->log;

1075 
uc
->
log
.
h™dÀr
 = 
ngx_ªsﬁvî_log_îr‹
;

1076 
uc
->
log
.
d©a
 = uc;

1077 
uc
->
log
.
a˘i⁄
 = "resolving";

1079 i‡(
	`ngx_udp_c⁄√˘
(
uc
Ë!
NGX_OK
) {

1080  
NGX_ERROR
;

1083 
uc
->
c⁄√˘i⁄
->
d©a
 = 
r
;

1084 
uc
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_ªsﬁvî_ªad_ª•⁄£
;

1085 
uc
->
c⁄√˘i⁄
->
ªad
->
ªsﬁvî
 = 1;

1088 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1089 
n
 = 
	`ngx_£nd
(
uc
->
c⁄√˘i⁄
, 
∫
->
quîy
,Ñn->
qÀn
);

1091 i‡(
n
 == -1) {

1092  
NGX_ERROR
;

1095 i‡((
size_t
Ë
n
 !(size_tË
∫
->
qÀn
) {

1096 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 0, "send() incomplete");

1097  
NGX_ERROR
;

1101 #i‡(
NGX_HAVE_INET6
)

1102 i‡(
∫
->
quîy6
 &&Ñn->
«ddrs6
 =(
u_sh‹t
) -1) {

1103 
n
 = 
	`ngx_£nd
(
uc
->
c⁄√˘i⁄
, 
∫
->
quîy6
,Ñn->
qÀn
);

1105 i‡(
n
 == -1) {

1106  
NGX_ERROR
;

1109 i‡((
size_t
Ë
n
 !(size_tË
∫
->
qÀn
) {

1110 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 0, "send() incomplete");

1111  
NGX_ERROR
;

1116  
NGX_OK
;

1117 
	}
}

1121 
	$ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
)

1123 
time_t
 
timî
, 
©imî
, 
¡imî
;

1124 #i‡(
NGX_HAVE_INET6
)

1125 
time_t
 
a6timî
;

1127 
ngx_ªsﬁvî_t
 *
r
;

1129 
r
 = 
ev
->
d©a
;

1131 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1136 
¡imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
«me_rbåì
, &r->
«me_ª£nd_queue
);

1142 
©imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
addr_rbåì
, &r->
addr_ª£nd_queue
);

1146 #i‡(
NGX_HAVE_INET6
)

1150 
a6timî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
addr6_rbåì
, &r->
addr6_ª£nd_queue
);

1156 
timî
 = 
¡imî
;

1158 i‡(
timî
 == 0) {

1159 
timî
 = 
©imî
;

1161 } i‡(
©imî
) {

1162 
timî
 = 
	`ngx_mö
—imî, 
©imî
);

1165 #i‡(
NGX_HAVE_INET6
)

1167 i‡(
timî
 == 0) {

1168 
timî
 = 
a6timî
;

1170 } i‡(
a6timî
) {

1171 
timî
 = 
	`ngx_mö
—imî, 
a6timî
);

1176 i‡(
timî
) {

1177 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë(
timî
 * 1000));

1179 
	}
}

1182 
time_t


1183 
	$ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

1185 
time_t
 
now
;

1186 
ngx_queue_t
 *
q
;

1187 
ngx_ªsﬁvî_node_t
 *
∫
;

1189 
now
 = 
	`ngx_time
();

1192 i‡(
	`ngx_queue_em±y
(
queue
)) {

1196 
q
 = 
	`ngx_queue_œ°
(
queue
);

1198 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1200 i‡(
now
 < 
∫
->
expúe
) {

1201  
∫
->
expúe
 - 
now
;

1204 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1206 (
size_t
Ë
∫
->
∆í
,Ñn->
«me
,Ñn->
waôög
);

1208 
	`ngx_queue_ªmove
(
q
);

1210 i‡(
∫
->
waôög
) {

1212 (Ë
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
);

1214 
∫
->
expúe
 = 
now
 + 
r
->
ª£nd_timeout
;

1216 
	`ngx_queue_ö£π_hód
(
queue
, 
q
);

1221 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

1223 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1225 
	}
}

1229 
	$ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
)

1231 
ssize_t
 
n
;

1232 
ngx_c⁄√˘i⁄_t
 *
c
;

1233 
u_ch¨
 
buf
[
NGX_RESOLVER_UDP_SIZE
];

1235 
c
 = 
ªv
->
d©a
;

1238 
n
 = 
	`ngx_udp_ªcv
(
c
, 
buf
, 
NGX_RESOLVER_UDP_SIZE
);

1240 i‡(
n
 < 0) {

1244 
	`ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
c
->
d©a
, 
buf
, 
n
);

1246 } 
ªv
->
ªady
);

1247 
	}
}

1251 
	$ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
)

1253 *
îr
;

1254 
ngx_uöt_t
 
i
, 
times
, 
idít
, 
qidít
, 
Êags
, 
code
, 
nqs
, 
«n
,

1255 
qty≥
, 
q˛ass
;

1256 #i‡(
NGX_HAVE_INET6
)

1257 
ngx_uöt_t
 
qidít6
;

1259 
ngx_queue_t
 *
q
;

1260 
ngx_ªsﬁvî_qs_t
 *
qs
;

1261 
ngx_ªsﬁvî_hdr_t
 *
ª•⁄£
;

1262 
ngx_ªsﬁvî_node_t
 *
∫
;

1264 i‡(
n
 < (
ngx_ªsﬁvî_hdr_t
)) {

1265 
sh‹t_ª•⁄£
;

1268 
ª•⁄£
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
buf
;

1270 
idít
 = (
ª•⁄£
->
idít_hi
 << 8Ë+Ñe•⁄£->
idít_lo
;

1271 
Êags
 = (
ª•⁄£
->
Êags_hi
 << 8Ë+Ñe•⁄£->
Êags_lo
;

1272 
nqs
 = (
ª•⁄£
->
nqs_hi
 << 8Ë+Ñe•⁄£->
nqs_lo
;

1273 
«n
 = (
ª•⁄£
->
«n_hi
 << 8Ë+Ñe•⁄£->
«n_lo
;

1275 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1277 
idít
, 
Êags
, 
nqs
, 
«n
,

1278 (
ª•⁄£
->
¬s_hi
 << 8Ë+Ñe•⁄£->
¬s_lo
,

1279 (
ª•⁄£
->
«r_hi
 << 8Ë+Ñe•⁄£->
«r_lo
);

1282 i‡((
Êags
 & 0xf870) != 0x8000) {

1283 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1284 "övÆid DNSÑe•⁄£ %uòÊ:%04Xui", 
idít
, 
Êags
);

1288 
code
 = 
Êags
 & 0xf;

1290 i‡(
code
 =
NGX_RESOLVE_FORMERR
) {

1292 
times
 = 0;

1294 
q
 = 
	`ngx_queue_hód
(&
r
->
«me_ª£nd_queue
);

1295 
q
 !
	`ngx_queue_£¡öñ
(&
r
->
«me_ª£nd_queue
Ë|| 
times
++ < 100;

1296 
q
 = 
	`ngx_queue_√xt
(q))

1298 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1299 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1301 i‡(
qidít
 =
idít
) {

1302 
dns_îr‹_«me
;

1305 #i‡(
NGX_HAVE_INET6
)

1306 i‡(
∫
->
quîy6
) {

1307 
qidít6
 = (
∫
->
quîy6
[0] << 8) +Ñn->query6[1];

1309 i‡(
qidít6
 =
idít
) {

1310 
dns_îr‹_«me
;

1316 
dns_îr‹
;

1319 i‡(
code
 > 
NGX_RESOLVE_REFUSED
) {

1320 
dns_îr‹
;

1323 i‡(
nqs
 != 1) {

1324 
îr
 = "invalidÇumber of questions in DNSÑesponse";

1325 
d⁄e
;

1328 
i
 = (
ngx_ªsﬁvî_hdr_t
);

1330 
i
 < (
ngx_uöt_t
Ë
n
) {

1331 i‡(
buf
[
i
] == '\0') {

1332 
found
;

1335 
i
 +1 + 
buf
[i];

1338 
sh‹t_ª•⁄£
;

1340 
found
:

1342 i‡(
i
++ =(
ngx_ªsﬁvî_hdr_t
)) {

1343 
îr
 = "zero-length domainÇame in DNSÑesponse";

1344 
d⁄e
;

1347 i‡(
i
 + (
ngx_ªsﬁvî_qs_t
Ë+ 
«n
 * (2 + (
ngx_ªsﬁvî_™_t
))

1348 > (
ngx_uöt_t
Ë
n
)

1350 
sh‹t_ª•⁄£
;

1353 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë&
buf
[
i
];

1355 
qty≥
 = (
qs
->
ty≥_hi
 << 8Ë+ qs->
ty≥_lo
;

1356 
q˛ass
 = (
qs
->
˛ass_hi
 << 8Ë+ qs->
˛ass_lo
;

1358 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1359 "ªsﬁvî DNSÑe•⁄£ qt:%uò˛:%ui", 
qty≥
, 
q˛ass
);

1361 i‡(
q˛ass
 != 1) {

1362 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1363 "unknow¿quîy cœs†%uòö DNSÑe•⁄£", 
q˛ass
);

1367 
qty≥
) {

1369 
NGX_RESOLVE_A
:

1370 #i‡(
NGX_HAVE_INET6
)

1371 
NGX_RESOLVE_AAAA
:

1374 
	`ngx_ªsﬁvî_¥o˚ss_a
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
qty≥
, 
«n
,

1375 
i
 + (
ngx_ªsﬁvî_qs_t
));

1379 
NGX_RESOLVE_PTR
:

1381 
	`ngx_ªsﬁvî_¥o˚ss_±r
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
);

1386 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1387 "unknow¿quîyÅy≥ %uòö DNSÑe•⁄£", 
qty≥
);

1393 
sh‹t_ª•⁄£
:

1395 
îr
 = "short DNSÑesponse";

1397 
d⁄e
:

1399 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1403 
dns_îr‹_«me
:

1405 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1407 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
,

1408 
∫
->
∆í
,Ñn->
«me
);

1411 
dns_îr‹
:

1413 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1415 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
);

1417 
	}
}

1421 
	$ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
œ°
,

1422 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
qty≥
,

1423 
ngx_uöt_t
 
«n
,Çgx_uöt_à
™s
)

1425 *
îr
;

1426 
u_ch¨
 *
˙ame
;

1427 
size_t
 
Àn
;

1428 
öt32_t
 
âl
;

1429 
uöt32_t
 
hash
;

1430 
ö_addr_t
 *
addr
;

1431 
ngx_°r_t
 
«me
;

1432 
ngx_addr_t
 *
addrs
;

1433 
ngx_uöt_t
 
ty≥
, 
˛ass
, 
qidít
, 
«ddrs
, 
a
, 
i
, 
n
, 
°¨t
;

1434 #i‡(
NGX_HAVE_INET6
)

1435 
ö6_addr
 *
addr6
;

1437 
ngx_ªsﬁvî_™_t
 *
™
;

1438 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

1439 
ngx_ªsﬁvî_node_t
 *
∫
;

1441 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
,

1442 
buf
 + (
ngx_ªsﬁvî_hdr_t
), bu‡+ 
œ°
)

1443 !
NGX_OK
)

1448 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvî qs:%V", &
«me
);

1450 
hash
 = 
	`ngx_¸c32_sh‹t
(
«me
.
d©a
,Çame.
Àn
);

1454 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
«me
, 
hash
);

1456 i‡(
∫
 =
NULL
) {

1457 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1458 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1459 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1460 
Áûed
;

1463 
qty≥
) {

1465 #i‡(
NGX_HAVE_INET6
)

1466 
NGX_RESOLVE_AAAA
:

1468 i‡(
∫
->
quîy6
 =
NULL
 ||Ñn->
«ddrs6
 !(
u_sh‹t
) -1) {

1469 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1470 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1471 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1472 
Áûed
;

1475 
qidít
 = (
∫
->
quîy6
[0] << 8) +Ñn->query6[1];

1482 i‡(
∫
->
quîy
 =
NULL
 ||Ñn->
«ddrs
 !(
u_sh‹t
) -1) {

1483 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1484 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1485 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1486 
Áûed
;

1489 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1492 i‡(
idít
 !
qidít
) {

1493 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1495 
idít
, &
«me
, 
qidít
);

1496 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1497 
Áûed
;

1500 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1502 i‡(
code
 =0 && 
∫
->code) {

1503 
code
 = 
∫
->code;

1506 i‡(
code
 =0 && 
«n
 == 0) {

1508 #i‡(
NGX_HAVE_INET6
)

1509 
qty≥
) {

1511 
NGX_RESOLVE_AAAA
:

1513 
∫
->
«ddrs6
 = 0;

1515 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1516 
√xt
;

1519 i‡(
∫
->
«ddrs
) {

1520 
exp‹t
;

1527 
∫
->
«ddrs
 = 0;

1529 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

1530 
√xt
;

1533 i‡(
∫
->
«ddrs6
) {

1534 
exp‹t
;

1539 
code
 = 
NGX_RESOLVE_NXDOMAIN
;

1542 i‡(
code
) {

1544 #i‡(
NGX_HAVE_INET6
)

1545 
qty≥
) {

1547 
NGX_RESOLVE_AAAA
:

1549 
∫
->
«ddrs6
 = 0;

1551 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1552 
∫
->
code
 = (
u_ch¨
) code;

1553 
√xt
;

1560 
∫
->
«ddrs
 = 0;

1562 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

1563 
∫
->
code
 = (
u_ch¨
) code;

1564 
√xt
;

1569 
√xt
 = 
∫
->
waôög
;

1570 
∫
->
waôög
 = 
NULL
;

1572 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1574 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

1578 
√xt
) {

1579 
˘x
 = 
√xt
;

1580 
˘x
->
°©e
 = 
code
;

1581 
√xt
 = 
˘x
->next;

1583 
˘x
->
	`h™dÀr
(ctx);

1586 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1591 
i
 = 
™s
;

1592 
«ddrs
 = 0;

1593 
˙ame
 = 
NULL
;

1595 
a
 = 0;á < 
«n
;á++) {

1597 
°¨t
 = 
i
;

1599 
i
 < 
œ°
) {

1601 i‡(
buf
[
i
] & 0xc0) {

1602 
i
 += 2;

1603 
found
;

1606 i‡(
buf
[
i
] == 0) {

1607 
i
++;

1608 
ã°_Àngth
;

1611 
i
 +1 + 
buf
[i];

1614 
sh‹t_ª•⁄£
;

1616 
ã°_Àngth
:

1618 i‡(
i
 - 
°¨t
 < 2) {

1619 
îr
 = "invalidÇame in DNSÑesponse";

1620 
övÆid
;

1623 
found
:

1625 i‡(
i
 + (
ngx_ªsﬁvî_™_t
Ë>
œ°
) {

1626 
sh‹t_ª•⁄£
;

1629 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1631 
ty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1632 
˛ass
 = (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
;

1633 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1634 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

1635 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

1637 i‡(
˛ass
 != 1) {

1638 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1639 "u√x≥˘ed RR cœs†%ui", 
˛ass
);

1640 
Áûed
;

1643 i‡(
âl
 < 0) {

1644 
âl
 = 0;

1647 
∫
->
âl
 = 
	`ngx_mö
‘n->âl, (
uöt32_t
)Åtl);

1649 
i
 +(
ngx_ªsﬁvî_™_t
);

1651 
ty≥
) {

1653 
NGX_RESOLVE_A
:

1655 i‡(
qty≥
 !
NGX_RESOLVE_A
) {

1656 
îr
 = "unexpected AÑecord in DNSÑesponse";

1657 
övÆid
;

1660 i‡(
Àn
 != 4) {

1661 
îr
 = "invalid AÑecord in DNSÑesponse";

1662 
övÆid
;

1665 i‡(
i
 + 4 > 
œ°
) {

1666 
sh‹t_ª•⁄£
;

1669 
«ddrs
++;

1673 #i‡(
NGX_HAVE_INET6
)

1674 
NGX_RESOLVE_AAAA
:

1676 i‡(
qty≥
 !
NGX_RESOLVE_AAAA
) {

1677 
îr
 = "unexpected AAAAÑecord in DNSÑesponse";

1678 
övÆid
;

1681 i‡(
Àn
 != 16) {

1682 
îr
 = "invalid AAAAÑecord in DNSÑesponse";

1683 
övÆid
;

1686 i‡(
i
 + 16 > 
œ°
) {

1687 
sh‹t_ª•⁄£
;

1690 
«ddrs
++;

1695 
NGX_RESOLVE_CNAME
:

1697 
˙ame
 = &
buf
[
i
];

1701 
NGX_RESOLVE_DNAME
:

1707 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1708 "u√x≥˘ed RRÅy≥ %ui", 
ty≥
);

1711 
i
 +
Àn
;

1714 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1716 
«ddrs
, 
˙ame
, 
∫
->
âl
);

1718 i‡(
«ddrs
) {

1720 
qty≥
) {

1722 #i‡(
NGX_HAVE_INET6
)

1723 
NGX_RESOLVE_AAAA
:

1725 i‡(
«ddrs
 == 1) {

1726 
addr6
 = &
∫
->
u6
.addr6;

1727 
∫
->
«ddrs6
 = 1;

1730 
addr6
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
«ddrs
 * (
ö6_addr
));

1731 i‡(
addr6
 =
NULL
) {

1732 
Áûed
;

1735 
∫
->
u6
.
addrs6
 = 
addr6
;

1736 
∫
->
«ddrs6
 = (
u_sh‹t
Ë
«ddrs
;

1739 #i‡(
NGX_SUPPRESS_WARN
)

1740 
addr
 = 
NULL
;

1748 i‡(
«ddrs
 == 1) {

1749 
addr
 = &
∫
->
u
.addr;

1750 
∫
->
«ddrs
 = 1;

1753 
addr
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
«ddrs
 * (
ö_addr_t
));

1754 i‡(
addr
 =
NULL
) {

1755 
Áûed
;

1758 
∫
->
u
.
addrs
 = 
addr
;

1759 
∫
->
«ddrs
 = (
u_sh‹t
)Çaddrs;

1762 #i‡(
NGX_HAVE_INET6
 && 
NGX_SUPPRESS_WARN
)

1763 
addr6
 = 
NULL
;

1767 
n
 = 0;

1768 
i
 = 
™s
;

1770 
a
 = 0;á < 
«n
;á++) {

1774 i‡(
buf
[
i
] & 0xc0) {

1775 
i
 += 2;

1779 i‡(
buf
[
i
] == 0) {

1780 
i
++;

1784 
i
 +1 + 
buf
[i];

1787 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1789 
ty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1790 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1792 
i
 +(
ngx_ªsﬁvî_™_t
);

1794 i‡(
ty≥
 =
NGX_RESOLVE_A
) {

1796 
addr
[
n
] = 
	`ht⁄l
((
buf
[
i
] << 24) + (buf[i + 1] << 16)

1797 + (
buf
[
i
 + 2] << 8) + (buf[i + 3]));

1799 i‡(++
n
 =
«ddrs
) {

1801 #i‡(
NGX_HAVE_INET6
)

1802 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

1803 
√xt
;

1811 #i‡(
NGX_HAVE_INET6
)

1812 i‡(
ty≥
 =
NGX_RESOLVE_AAAA
) {

1814 
	`ngx_mem˝y
(
addr6
[
n
].
s6_addr
, &
buf
[
i
], 16);

1816 i‡(++
n
 =
«ddrs
) {

1818 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1819 
√xt
;

1827 
i
 +
Àn
;

1831 
qty≥
) {

1833 #i‡(
NGX_HAVE_INET6
)

1834 
NGX_RESOLVE_AAAA
:

1836 i‡(
∫
->
«ddrs6
 =(
u_sh‹t
) -1) {

1837 
∫
->
«ddrs6
 = 0;

1845 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1) {

1846 
∫
->
«ddrs
 = 0;

1850 i‡(
∫
->
«ddrs
 !(
u_sh‹t
) -1

1851 #i‡(
NGX_HAVE_INET6
)

1852 && 
∫
->
«ddrs6
 !(
u_sh‹t
) -1

1854 && 
∫
->
«ddrs


1855 #i‡(
NGX_HAVE_INET6
)

1856 + 
∫
->
«ddrs6


1861 #i‡(
NGX_HAVE_INET6
)

1862 
exp‹t
:

1865 
«ddrs
 = 
∫
->naddrs;

1866 #i‡(
NGX_HAVE_INET6
)

1867 
«ddrs
 +
∫
->
«ddrs6
;

1870 i‡(
«ddrs
 =1 && 
∫
->naddrs == 1) {

1871 
addrs
 = 
NULL
;

1874 
addrs
 = 
	`ngx_ªsﬁvî_exp‹t
(
r
, 
∫
, 0);

1875 i‡(
addrs
 =
NULL
) {

1876 
Áûed
;

1880 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1882 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : (
time_t
Ë∫->
âl
);

1883 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1885 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1887 
√xt
 = 
∫
->
waôög
;

1888 
∫
->
waôög
 = 
NULL
;

1892 
√xt
) {

1893 
˘x
 = 
√xt
;

1894 
˘x
->
°©e
 = 
NGX_OK
;

1895 
˘x
->
«ddrs
 =Çaddrs;

1897 i‡(
addrs
 =
NULL
) {

1898 
˘x
->
addrs
 = &˘x->
addr
;

1899 
˘x
->
addr
.
sockaddr
 = (sockadd∏*Ë&˘x->
sö
;

1900 
˘x
->
addr
.
sockÀn
 = (
sockaddr_ö
);

1901 
	`ngx_memzîo
(&
˘x
->
sö
, (
sockaddr_ö
));

1902 
˘x
->
sö
.
sö_Ámûy
 = 
AF_INET
;

1903 
˘x
->
sö
.
sö_addr
.
s_addr
 = 
∫
->
u
.
addr
;

1906 
˘x
->
addrs
 =áddrs;

1909 
√xt
 = 
˘x
->next;

1911 
˘x
->
	`h™dÀr
(ctx);

1914 i‡(
addrs
 !
NULL
) {

1915 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
->
sockaddr
);

1916 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

1919 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1920 
∫
->
quîy
 = 
NULL
;

1921 #i‡(
NGX_HAVE_INET6
)

1922 
∫
->
quîy6
 = 
NULL
;

1928 i‡(
˙ame
) {

1932 i‡(
∫
->
«ddrs
 =(
u_sh‹t
) -1

1933 #i‡(
NGX_HAVE_INET6
)

1934 || 
∫
->
«ddrs6
 =(
u_sh‹t
) -1

1938 
√xt
;

1941 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, 
˙ame
, bu‡+ 
œ°
Ë!
NGX_OK
) {

1942 
Áûed
;

1945 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1946 "ªsﬁvî c«me:\"%V\"", &
«me
);

1948 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1950 
∫
->
˙Àn
 = (
u_sh‹t
Ë
«me
.
Àn
;

1951 
∫
->
u
.
˙ame
 = 
«me
.
d©a
;

1953 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : (
time_t
Ë∫->
âl
);

1954 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1956 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1958 
˘x
 = 
∫
->
waôög
;

1959 
∫
->
waôög
 = 
NULL
;

1961 i‡(
˘x
) {

1962 
˘x
->
«me
 =Çame;

1964 (Ë
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

1967 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1968 
∫
->
quîy
 = 
NULL
;

1969 #i‡(
NGX_HAVE_INET6
)

1970 
∫
->
quîy6
 = 
NULL
;

1978 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1982 
sh‹t_ª•⁄£
:

1984 
îr
 = "short DNSÑesponse";

1986 
övÆid
:

1990 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1994 
Áûed
:

1996 
√xt
:

2001 
	}
}

2005 
	$ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

2006 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
)

2008 *
îr
;

2009 
size_t
 
Àn
;

2010 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

2011 
ö_addr_t
 
addr
;

2012 
öt32_t
 
âl
;

2013 
ngx_öt_t
 
o˘ë
;

2014 
ngx_°r_t
 
«me
;

2015 
ngx_uöt_t
 
i
, 
mask
, 
qidít
, 
˛ass
;

2016 
ngx_queue_t
 *
expúe_queue
;

2017 
ngx_rbåì_t
 *
åì
;

2018 
ngx_ªsﬁvî_™_t
 *
™
;

2019 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

2020 
ngx_ªsﬁvî_node_t
 *
∫
;

2021 #i‡(
NGX_HAVE_INET6
)

2022 
uöt32_t
 
hash
;

2023 
ngx_öt_t
 
digô
;

2024 
ö6_addr
 
addr6
;

2027 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, 
NULL
, 
buf
,

2028 
buf
 + (
ngx_ªsﬁvî_hdr_t
), bu‡+ 
n
)

2029 !
NGX_OK
)

2036 
addr
 = 0;

2037 
i
 = (
ngx_ªsﬁvî_hdr_t
);

2039 
mask
 = 0; mask < 32; mask += 8) {

2040 
Àn
 = 
buf
[
i
++];

2042 
o˘ë
 = 
	`ngx_©oi
(&
buf
[
i
], 
Àn
);

2043 i‡(
o˘ë
 =
NGX_ERROR
 || octet > 255) {

2044 
övÆid_ö_addr_¨∑
;

2047 
addr
 +
o˘ë
 << 
mask
;

2048 
i
 +
Àn
;

2051 i‡(
	`ngx_°rˇ£cmp
(&
buf
[
i
], (
u_ch¨
 *) "\7in-addr\4arpa") == 0) {

2052 
i
 += ("\7in-addr\4arpa");

2056 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

2058 
åì
 = &
r
->
addr_rbåì
;

2059 
expúe_queue
 = &
r
->
addr_expúe_queue
;

2061 
addr
 = 
	`ht⁄l
(addr);

2062 
«me
.
Àn
 = 
	`ngx_öë_¡›
(
AF_INET
, &
addr
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
);

2063 
«me
.
d©a
 = 
ãxt
;

2065 
vÆid
;

2068 
övÆid_ö_addr_¨∑
:

2070 #i‡(
NGX_HAVE_INET6
)

2072 
i
 = (
ngx_ªsﬁvî_hdr_t
);

2074 
o˘ë
 = 15; octet >= 0; octet--) {

2075 i‡(
buf
[
i
++] != '\1') {

2076 
övÆid_ù6_¨∑
;

2079 
digô
 = 
	`ngx_hextoi
(&
buf
[
i
++], 1);

2080 i‡(
digô
 =
NGX_ERROR
) {

2081 
övÆid_ù6_¨∑
;

2084 
addr6
.
s6_addr
[
o˘ë
] = (
u_ch¨
Ë
digô
;

2086 i‡(
buf
[
i
++] != '\1') {

2087 
övÆid_ù6_¨∑
;

2090 
digô
 = 
	`ngx_hextoi
(&
buf
[
i
++], 1);

2091 i‡(
digô
 =
NGX_ERROR
) {

2092 
övÆid_ù6_¨∑
;

2095 
addr6
.
s6_addr
[
o˘ë
] +(
u_ch¨
Ë(
digô
 * 16);

2098 i‡(
	`ngx_°rˇ£cmp
(&
buf
[
i
], (
u_ch¨
 *) "\3ip6\4arpa") == 0) {

2099 
i
 += ("\3ip6\4arpa");

2103 
hash
 = 
	`ngx_¸c32_sh‹t
(
addr6
.
s6_addr
, 16);

2104 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr6
(
r
, &
addr6
, 
hash
);

2106 
åì
 = &
r
->
addr6_rbåì
;

2107 
expúe_queue
 = &
r
->
addr6_expúe_queue
;

2109 
«me
.
Àn
 = 
	`ngx_öë6_¡›
(
addr6
.
s6_addr
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
);

2110 
«me
.
d©a
 = 
ãxt
;

2112 
vÆid
;

2115 
övÆid_ù6_¨∑
:

2118 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2122 
vÆid
:

2124 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

2125 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2126 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

2127 
Áûed
;

2130 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

2132 i‡(
idít
 !
qidít
) {

2133 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2135 
idít
, &
«me
, 
qidít
);

2136 
Áûed
;

2139 i‡(
code
 =0 && 
«n
 == 0) {

2140 
code
 = 
NGX_RESOLVE_NXDOMAIN
;

2143 i‡(
code
) {

2144 
√xt
 = 
∫
->
waôög
;

2145 
∫
->
waôög
 = 
NULL
;

2147 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2149 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

2153 
√xt
) {

2154 
˘x
 = 
√xt
;

2155 
˘x
->
°©e
 = 
code
;

2156 
√xt
 = 
˘x
->next;

2158 
˘x
->
	`h™dÀr
(ctx);

2161 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

2166 
i
 +(
ngx_ªsﬁvî_qs_t
);

2168 i‡(
i
 + 2 + (
ngx_ªsﬁvî_™_t
Ë>
n
) {

2169 
sh‹t_ª•⁄£
;

2174 i‡(
buf
[
i
] !0xc0 || buf[ò+ 1] !(
ngx_ªsﬁvî_hdr_t
)) {

2175 
îr
 = "invalid in-addr.arpa or ip6.arpaÇame in DNSÑesponse";

2176 
övÆid
;

2179 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
 + 2];

2181 
˛ass
 = (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
;

2182 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

2183 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

2184 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

2186 i‡(
˛ass
 != 1) {

2187 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

2188 "u√x≥˘ed RR cœs†%ui", 
˛ass
);

2189 
Áûed
;

2192 i‡(
âl
 < 0) {

2193 
âl
 = 0;

2196 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

2198 (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
,

2199 
˛ass
, 
Àn
);

2201 
i
 +2 + (
ngx_ªsﬁvî_™_t
);

2203 i‡(
i
 + 
Àn
 > 
n
) {

2204 
sh‹t_ª•⁄£
;

2207 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, bu‡+ 
i
, bu‡+ 
n
Ë!
NGX_OK
) {

2208 
Áûed
;

2211 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvîán:%V", &
«me
);

2213 i‡(
«me
.
Àn
 !(
size_t
Ë
∫
->
∆í


2214 || 
	`ngx_°∫cmp
(
«me
.
d©a
, 
∫
->«me,Çame.
Àn
) != 0)

2216 i‡(
∫
->
∆í
) {

2217 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

2220 
∫
->
∆í
 = (
u_sh‹t
Ë
«me
.
Àn
;

2221 
∫
->
«me
 =Çame.
d©a
;

2223 
«me
.
d©a
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Çame.
Àn
);

2224 i‡(
«me
.
d©a
 =
NULL
) {

2225 
Áûed
;

2229 
	`ngx_queue_ªmove
(&
∫
->
queue
);

2231 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : 
âl
);

2232 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

2234 
	`ngx_queue_ö£π_hód
(
expúe_queue
, &
∫
->
queue
);

2236 
√xt
 = 
∫
->
waôög
;

2237 
∫
->
waôög
 = 
NULL
;

2241 
√xt
) {

2242 
˘x
 = 
√xt
;

2243 
˘x
->
°©e
 = 
NGX_OK
;

2244 
˘x
->
«me
 =Çame;

2245 
√xt
 = 
˘x
->next;

2247 
˘x
->
	`h™dÀr
(ctx);

2250 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

2254 
sh‹t_ª•⁄£
:

2256 
îr
 = "short DNSÑesponse";

2258 
övÆid
:

2262 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

2266 
Áûed
:

2271 
	}
}

2274 
ngx_ªsﬁvî_node_t
 *

2275 
	$ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
)

2277 
ngx_öt_t
 
rc
;

2278 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2279 
ngx_ªsﬁvî_node_t
 *
∫
;

2281 
node
 = 
r
->
«me_rbåì
.
roŸ
;

2282 
£¡öñ
 = 
r
->
«me_rbåì
.sentinel;

2284 
node
 !
£¡öñ
) {

2286 i‡(
hash
 < 
node
->
key
) {

2287 
node
 =Çode->
À·
;

2291 i‡(
hash
 > 
node
->
key
) {

2292 
node
 =Çode->
right
;

2298 
∫
 = 
	`ngx_ªsﬁvî_node
(
node
);

2300 
rc
 = 
	`ngx_memn2cmp
(
«me
->
d©a
, 
∫
->«me,Çame->
Àn
,Ñn->
∆í
);

2302 i‡(
rc
 == 0) {

2303  
∫
;

2306 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2311  
NULL
;

2312 
	}
}

2315 
ngx_ªsﬁvî_node_t
 *

2316 
	$ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
, 
ö_addr_t
 
addr
)

2318 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2320 
node
 = 
r
->
addr_rbåì
.
roŸ
;

2321 
£¡öñ
 = 
r
->
addr_rbåì
.sentinel;

2323 
node
 !
£¡öñ
) {

2325 i‡(
addr
 < 
node
->
key
) {

2326 
node
 =Çode->
À·
;

2330 i‡(
addr
 > 
node
->
key
) {

2331 
node
 =Çode->
right
;

2337  
	`ngx_ªsﬁvî_node
(
node
);

2342  
NULL
;

2343 
	}
}

2346 #i‡(
NGX_HAVE_INET6
)

2348 
ngx_ªsﬁvî_node_t
 *

2349 
	$ngx_ªsﬁvî_lookup_addr6
(
ngx_ªsﬁvî_t
 *
r
, 
ö6_addr
 *
addr
,

2350 
uöt32_t
 
hash
)

2352 
ngx_öt_t
 
rc
;

2353 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2354 
ngx_ªsﬁvî_node_t
 *
∫
;

2356 
node
 = 
r
->
addr6_rbåì
.
roŸ
;

2357 
£¡öñ
 = 
r
->
addr6_rbåì
.sentinel;

2359 
node
 !
£¡öñ
) {

2361 i‡(
hash
 < 
node
->
key
) {

2362 
node
 =Çode->
À·
;

2366 i‡(
hash
 > 
node
->
key
) {

2367 
node
 =Çode->
right
;

2373 
∫
 = 
	`ngx_ªsﬁvî_node
(
node
);

2375 
rc
 = 
	`ngx_memcmp
(
addr
, &
∫
->
addr6
, 16);

2377 i‡(
rc
 == 0) {

2378  
∫
;

2381 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2386  
NULL
;

2387 
	}
}

2393 
	$ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

2394 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

2396 
ngx_rbåì_node_t
 **
p
;

2397 
ngx_ªsﬁvî_node_t
 *
∫
, *
∫_ãmp
;

2401 i‡(
node
->
key
 < 
ãmp
->key) {

2403 
p
 = &
ãmp
->
À·
;

2405 } i‡(
node
->
key
 > 
ãmp
->key) {

2407 
p
 = &
ãmp
->
right
;

2411 
∫
 = 
	`ngx_ªsﬁvî_node
(
node
);

2412 
∫_ãmp
 = 
	`ngx_ªsﬁvî_node
(
ãmp
);

2414 
p
 = (
	`ngx_memn2cmp
(
∫
->
«me
, 
∫_ãmp
->«me,Ñn->
∆í
,Ñn_temp->nlen)

2415 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2418 i‡(*
p
 =
£¡öñ
) {

2422 
ãmp
 = *
p
;

2425 *
p
 = 
node
;

2426 
node
->
∑ª¡
 = 
ãmp
;

2427 
node
->
À·
 = 
£¡öñ
;

2428 
node
->
right
 = 
£¡öñ
;

2429 
	`ngx_rbt_ªd
(
node
);

2430 
	}
}

2433 #i‡(
NGX_HAVE_INET6
)

2436 
	$ngx_ªsﬁvî_rbåì_ö£π_addr6_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

2437 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

2439 
ngx_rbåì_node_t
 **
p
;

2440 
ngx_ªsﬁvî_node_t
 *
∫
, *
∫_ãmp
;

2444 i‡(
node
->
key
 < 
ãmp
->key) {

2446 
p
 = &
ãmp
->
À·
;

2448 } i‡(
node
->
key
 > 
ãmp
->key) {

2450 
p
 = &
ãmp
->
right
;

2454 
∫
 = 
	`ngx_ªsﬁvî_node
(
node
);

2455 
∫_ãmp
 = 
	`ngx_ªsﬁvî_node
(
ãmp
);

2457 
p
 = (
	`ngx_memcmp
(&
∫
->
addr6
, &
∫_ãmp
->addr6, 16)

2458 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2461 i‡(*
p
 =
£¡öñ
) {

2465 
ãmp
 = *
p
;

2468 *
p
 = 
node
;

2469 
node
->
∑ª¡
 = 
ãmp
;

2470 
node
->
À·
 = 
£¡öñ
;

2471 
node
->
right
 = 
£¡öñ
;

2472 
	`ngx_rbt_ªd
(
node
);

2473 
	}
}

2478 
ngx_öt_t


2479 
	$ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

2481 
u_ch¨
 *
p
, *
s
;

2482 
size_t
 
Àn
, 
∆í
;

2483 
ngx_uöt_t
 
idít
;

2484 #i‡(
NGX_HAVE_INET6
)

2485 
ngx_ªsﬁvî_t
 *
r
;

2487 
ngx_ªsﬁvî_qs_t
 *
qs
;

2488 
ngx_ªsﬁvî_hdr_t
 *
quîy
;

2490 
∆í
 = 
˘x
->
«me
.
Àn
 ? (1 + ctx->name.len + 1) : 1;

2492 
Àn
 = (
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
 + (
ngx_ªsﬁvî_qs_t
);

2494 #i‡(
NGX_HAVE_INET6
)

2495 
r
 = 
˘x
->
ªsﬁvî
;

2497 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
r
->
ùv6
 ? 
Àn
 * 2 :Üen);

2499 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

2501 i‡(
p
 =
NULL
) {

2502  
NGX_ERROR
;

2505 
∫
->
qÀn
 = (
u_sh‹t
Ë
Àn
;

2506 
∫
->
quîy
 = 
p
;

2508 #i‡(
NGX_HAVE_INET6
)

2509 i‡(
r
->
ùv6
) {

2510 
∫
->
quîy6
 = 
p
 + 
Àn
;

2514 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

2516 
idít
 = 
	`ngx_øndom
();

2518 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
ªsﬁvî
->
log
, 0,

2519 "ªsﬁve: \"%V\" A %i", &
˘x
->
«me
, 
idít
 & 0xffff);

2521 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

2522 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

2525 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

2528 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

2529 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

2530 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

2531 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

2533 
p
 +(
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
;

2535 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

2538 
qs
->
ty≥_hi
 = 0; qs->
ty≥_lo
 = 
NGX_RESOLVE_A
;

2541 
qs
->
˛ass_hi
 = 0; qs->
˛ass_lo
 = 1;

2545 
Àn
 = 0;

2546 
p
--;

2547 *
p
-- = '\0';

2549 i‡(
˘x
->
«me
.
Àn
 == 0) {

2550  
NGX_DECLINED
;

2553 
s
 = 
˘x
->
«me
.
d©a
 + ctx->«me.
Àn
 - 1; s >= ctx->name.data; s--) {

2554 i‡(*
s
 != '.') {

2555 *
p
 = *
s
;

2556 
Àn
++;

2559 i‡(
Àn
 == 0 ||Üen > 255) {

2560  
NGX_DECLINED
;

2563 *
p
 = (
u_ch¨
Ë
Àn
;

2564 
Àn
 = 0;

2567 
p
--;

2570 i‡(
Àn
 == 0 ||Üen > 255) {

2571  
NGX_DECLINED
;

2574 *
p
 = (
u_ch¨
Ë
Àn
;

2576 #i‡(
NGX_HAVE_INET6
)

2577 i‡(!
r
->
ùv6
) {

2578  
NGX_OK
;

2581 
p
 = 
∫
->
quîy6
;

2583 
	`ngx_mem˝y
(
p
, 
∫
->
quîy
,Ñn->
qÀn
);

2585 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

2587 
idít
 = 
	`ngx_øndom
();

2589 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
ªsﬁvî
->
log
, 0,

2590 "ªsﬁve: \"%V\" AAAA %i", &
˘x
->
«me
, 
idít
 & 0xffff);

2592 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

2593 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

2595 
p
 +(
ngx_ªsﬁvî_hdr_t
Ë+ 
∆í
;

2597 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

2599 
qs
->
ty≥_lo
 = 
NGX_RESOLVE_AAAA
;

2602  
NGX_OK
;

2603 
	}
}

2606 
ngx_öt_t


2607 
	$ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

2609 
u_ch¨
 *
p
, *
d
;

2610 
size_t
 
Àn
;

2611 
ö_addr_t
 
addr
;

2612 
ngx_öt_t
 
n
;

2613 
ngx_uöt_t
 
idít
;

2614 
ngx_ªsﬁvî_hdr_t
 *
quîy
;

2615 
sockaddr_ö
 *
sö
;

2616 #i‡(
NGX_HAVE_INET6
)

2617 
sockaddr_ö6
 *
sö6
;

2620 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

2622 #i‡(
NGX_HAVE_INET6
)

2623 
AF_INET6
:

2624 
Àn
 = (
ngx_ªsﬁvî_hdr_t
)

2626 + (
ngx_ªsﬁvî_qs_t
);

2632 
Àn
 = (
ngx_ªsﬁvî_hdr_t
)

2634 + (
ngx_ªsﬁvî_qs_t
);

2637 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

2638 i‡(
p
 =
NULL
) {

2639  
NGX_ERROR
;

2642 
∫
->
quîy
 = 
p
;

2643 
quîy
 = (
ngx_ªsﬁvî_hdr_t
 *Ë
p
;

2645 
idít
 = 
	`ngx_øndom
();

2647 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

2648 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

2651 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

2654 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

2655 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

2656 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

2657 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

2659 
p
 +(
ngx_ªsﬁvî_hdr_t
);

2661 
˘x
->
addr
.
sockaddr
->
ß_Ámûy
) {

2663 #i‡(
NGX_HAVE_INET6
)

2664 
AF_INET6
:

2665 
sö6
 = (
sockaddr_ö6
 *Ë
˘x
->
addr
.
sockaddr
;

2667 
n
 = 15;Ç >= 0;Ç--) {

2668 
p
 = 
	`ngx_•rötf
(p, "\1%xd\1%xd",

2669 
sö6
->
sö6_addr
.
s6_addr
[
n
] & 0xf,

2670 (
sö6
->
sö6_addr
.
s6_addr
[
n
] >> 4) & 0xf);

2673 
p
 = 
	`ngx_˝ymem
(p, "\3ip6\4arpa\0", 10);

2680 
sö
 = (
sockaddr_ö
 *Ë
˘x
->
addr
.
sockaddr
;

2681 
addr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

2683 
n
 = 0;Ç < 32;Ç += 8) {

2684 
d
 = 
	`ngx_•rötf
(&
p
[1], "%ud", (
addr
 >> 
n
) & 0xff);

2685 *
p
 = (
u_ch¨
Ë(
d
 - &p[1]);

2686 
p
 = 
d
;

2689 
p
 = 
	`ngx_˝ymem
(p, "\7in-addr\4arpa\0", 14);

2693 
p
 = 
	`ngx_˝ymem
(p, "\0\14\0\1", 4);

2695 
∫
->
qÀn
 = (
u_sh‹t
Ë(
p
 -Ñn->
quîy
);

2697  
NGX_OK
;

2698 
	}
}

2701 
ngx_öt_t


2702 
	$ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
u_ch¨
 *
buf
, u_ch¨ *
§c
,

2703 
u_ch¨
 *
œ°
)

2705 *
îr
;

2706 
u_ch¨
 *
p
, *
d°
;

2707 
ssize_t
 
Àn
;

2708 
ngx_uöt_t
 
i
, 
n
;

2710 
p
 = 
§c
;

2711 
Àn
 = -1;

2718 
i
 = 0; i < 128; i++) {

2719 
n
 = *
p
++;

2721 i‡(
n
 == 0) {

2722 
d⁄e
;

2725 i‡(
n
 & 0xc0) {

2726 
n
 = (“ & 0x3fË<< 8Ë+ *
p
;

2727 
p
 = &
buf
[
n
];

2730 
Àn
 +1 + 
n
;

2731 
p
 = &p[
n
];

2734 i‡(
p
 >
œ°
) {

2735 
îr
 = "name is out ofÑesponse";

2736 
övÆid
;

2740 
îr
 = "compressionÖointersÜoop";

2742 
övÆid
:

2744 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

2746  
NGX_ERROR
;

2748 
d⁄e
:

2750 i‡(
«me
 =
NULL
) {

2751  
NGX_OK
;

2754 i‡(
Àn
 == -1) {

2755 
	`ngx_°r_nuŒ
(
«me
);

2756  
NGX_OK
;

2759 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
Àn
);

2760 i‡(
d°
 =
NULL
) {

2761  
NGX_ERROR
;

2764 
«me
->
d©a
 = 
d°
;

2766 
n
 = *
§c
++;

2769 i‡(
n
 & 0xc0) {

2770 
n
 = (“ & 0x3fË<< 8Ë+ *
§c
;

2771 
§c
 = &
buf
[
n
];

2773 
n
 = *
§c
++;

2776 
	`ngx_°æow
(
d°
, 
§c
, 
n
);

2777 
d°
 +
n
;

2778 
§c
 +
n
;

2780 
n
 = *
§c
++;

2782 i‡(
n
 != 0) {

2783 *
d°
++ = '.';

2787 i‡(
n
 == 0) {

2788 
«me
->
Àn
 = 
d°
 -Çame->
d©a
;

2789  
NGX_OK
;

2792 
	}
}

2796 
	$ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
)

2798 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

2799 
ngx_ªsﬁvî_node_t
 *
∫
;

2801 
∫
 = 
ev
->
d©a
;

2802 
˘x
 = 
∫
->
waôög
;

2803 
∫
->
waôög
 = 
NULL
;

2806 
˘x
->
°©e
 = 
NGX_RESOLVE_TIMEDOUT
;

2807 
√xt
 = 
˘x
->next;

2809 
˘x
->
	`h™dÀr
(ctx);

2811 
˘x
 = 
√xt
;

2812 } 
˘x
);

2813 
	}
}

2817 
	$ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

2821 i‡(
∫
->
quîy
) {

2822 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

2825 i‡(
∫
->
«me
) {

2826 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
«me
);

2829 i‡(
∫
->
˙Àn
) {

2830 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

2833 i‡(
∫
->
«ddrs
 > 1 &&Ñn->«ddr†!(
u_sh‹t
) -1) {

2834 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

2837 #i‡(
NGX_HAVE_INET6
)

2838 i‡(
∫
->
«ddrs6
 > 1 &&Ñn->«ddrs6 !(
u_sh‹t
) -1) {

2839 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u6
.
addrs6
);

2843 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
);

2846 
	}
}

2850 
	$ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

2852 
u_ch¨
 *
p
;

2856 
p
 = 
	`ngx_Æloc
(
size
, 
r
->
log
);

2860  
p
;

2861 
	}
}

2865 
	$ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

2867 
u_ch¨
 *
p
;

2869 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2871 i‡(
p
) {

2872 
	`ngx_memzîo
(
p
, 
size
);

2875  
p
;

2876 
	}
}

2880 
	$ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2884 
	`ngx_‰ì
(
p
);

2887 
	}
}

2891 
	$ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2893 
	`ngx_‰ì
(
p
);

2894 
	}
}

2898 
	$ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
)

2900 *
d°
;

2902 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2904 i‡(
d°
 =
NULL
) {

2905  
d°
;

2908 
	`ngx_mem˝y
(
d°
, 
§c
, 
size
);

2910  
d°
;

2911 
	}
}

2914 
ngx_addr_t
 *

2915 
	$ngx_ªsﬁvî_exp‹t
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
,

2916 
ngx_uöt_t
 
rŸ©e
)

2918 
ngx_addr_t
 *
d°
;

2919 
ngx_uöt_t
 
d
, 
i
, 
j
, 
n
;

2920 
	`u_ch¨
 (*
sockaddr
)[
NGX_SOCKADDRLEN
];

2921 
ö_addr_t
 *
addr
;

2922 
sockaddr_ö
 *
sö
;

2923 #i‡(
NGX_HAVE_INET6
)

2924 
ö6_addr
 *
addr6
;

2925 
sockaddr_ö6
 *
sö6
;

2928 
n
 = 
∫
->
«ddrs
;

2929 #i‡(
NGX_HAVE_INET6
)

2930 
n
 +
∫
->
«ddrs6
;

2933 
d°
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
n
 * (
ngx_addr_t
));

2934 i‡(
d°
 =
NULL
) {

2935  
NULL
;

2938 
sockaddr
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, 
n
 * 
NGX_SOCKADDRLEN
);

2939 i‡(
sockaddr
 =
NULL
) {

2940 
	`ngx_ªsﬁvî_‰ì
(
r
, 
d°
);

2941  
NULL
;

2944 
i
 = 0;

2945 
d
 = 
rŸ©e
 ? 
	`ngx_øndom
(Ë% 
n
 : 0;

2947 i‡(
∫
->
«ddrs
) {

2948 
j
 = 
rŸ©e
 ? 
	`ngx_øndom
(Ë% 
∫
->
«ddrs
 : 0;

2950 
addr
 = (
∫
->
«ddrs
 =1Ë? &∫->
u
.add∏:Ñn->u.
addrs
;

2953 
sö
 = (
sockaddr_ö
 *Ë
sockaddr
[
d
];

2954 
sö
->
sö_Ámûy
 = 
AF_INET
;

2955 
sö
->
sö_addr
.
s_addr
 = 
addr
[
j
++];

2956 
d°
[
d
].
sockaddr
 = (sockadd∏*Ë
sö
;

2957 
d°
[
d
++].
sockÀn
 = (
sockaddr_ö
);

2959 i‡(
d
 =
n
) {

2960 
d
 = 0;

2963 i‡(
j
 =
∫
->
«ddrs
) {

2964 
j
 = 0;

2966 } ++
i
 < 
∫
->
«ddrs
);

2969 #i‡(
NGX_HAVE_INET6
)

2970 i‡(
∫
->
«ddrs6
) {

2971 
j
 = 
rŸ©e
 ? 
	`ngx_øndom
(Ë% 
∫
->
«ddrs6
 : 0;

2973 
addr6
 = (
∫
->
«ddrs6
 =1Ë? &∫->
u6
.addr6 :Ñn->u6.
addrs6
;

2976 
sö6
 = (
sockaddr_ö6
 *Ë
sockaddr
[
d
];

2977 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

2978 
	`ngx_mem˝y
(
sö6
->
sö6_addr
.
s6_addr
, 
addr6
[
j
++].s6_addr, 16);

2979 
d°
[
d
].
sockaddr
 = (sockadd∏*Ë
sö6
;

2980 
d°
[
d
++].
sockÀn
 = (
sockaddr_ö6
);

2982 i‡(
d
 =
n
) {

2983 
d
 = 0;

2986 i‡(
j
 =
∫
->
«ddrs6
) {

2987 
j
 = 0;

2989 } ++
i
 < 
n
);

2993  
d°
;

2994 
	}
}

2998 
	$ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
)

3000 *
îr‹s
[] = {

3008 i‡(
îr
 > 0 &&Érr < 6) {

3009  
îr‹s
[
îr
 - 1];

3012 i‡(
îr
 =
NGX_RESOLVE_TIMEDOUT
) {

3017 
	}
}

3020 
u_ch¨
 *

3021 
	$ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3023 
u_ch¨
 *
p
;

3024 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

3026 
p
 = 
buf
;

3028 i‡(
log
->
a˘i⁄
) {

3029 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

3030 
Àn
 -
p
 - 
buf
;

3033 
uc
 = 
log
->
d©a
;

3035 i‡(
uc
) {

3036 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ",Ñesﬁvî: %V", &
uc
->
£rvî
);

3039  
p
;

3040 
	}
}

3043 
ngx_öt_t


3044 
	$ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
)

3046 
rc
;

3047 
ngx_öt_t
 
evít
;

3048 
ngx_evít_t
 *
ªv
, *
wev
;

3049 
ngx_sockë_t
 
s
;

3050 
ngx_c⁄√˘i⁄_t
 *
c
;

3052 
s
 = 
	`ngx_sockë
(
uc
->
sockaddr
->
ß_Ámûy
, 
SOCK_DGRAM
, 0);

3054 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0, "UDP sockë %d", 
s
);

3056 i‡(
s
 =(
ngx_sockë_t
) -1) {

3057 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

3058 
ngx_sockë_n
 " failed");

3059  
NGX_ERROR
;

3062 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, &
uc
->
log
);

3064 i‡(
c
 =
NULL
) {

3065 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

3066 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

3067 
ngx_˛o£_sockë_n
 "failed");

3070  
NGX_ERROR
;

3073 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

3074 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

3075 
ngx_n⁄blockög_n
 " failed");

3077 
Áûed
;

3080 
ªv
 = 
c
->
ªad
;

3081 
wev
 = 
c
->
wrôe
;

3083 
ªv
->
log
 = &
uc
->log;

3084 
wev
->
log
 = &
uc
->log;

3086 
uc
->
c⁄√˘i⁄
 = 
c
;

3088 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

3090 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0,

3091 "c⁄√˘Åÿ%V, fd:%d #%uA", &
uc
->
£rvî
, 
s
, 
c
->
numbî
);

3093 
rc
 = 
	`c⁄√˘
(
s
, 
uc
->
sockaddr
, uc->
sockÀn
);

3097 i‡(
rc
 == -1) {

3098 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

3101 
Áûed
;

3105 
wev
->
ªady
 = 1;

3107 i‡(
ngx_add_evít
) {

3109 
evít
 = (
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) ?

3110  
NGX_CLEAR_EVENT
:

3111  
NGX_LEVEL_EVENT
;

3114 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

3115 
Áûed
;

3121 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

3122 
Áûed
;

3126  
NGX_OK
;

3128 
Áûed
:

3130 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

3131 
uc
->
c⁄√˘i⁄
 = 
NULL
;

3133  
NGX_ERROR
;

3134 
	}
}

	@src/core/ngx_resolver.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_RESOLVER_H_INCLUDED_


13 
	#_NGX_RESOLVER_H_INCLUDED_


	)

16 
	#NGX_RESOLVE_A
 1

	)

17 
	#NGX_RESOLVE_CNAME
 5

	)

18 
	#NGX_RESOLVE_PTR
 12

	)

19 
	#NGX_RESOLVE_MX
 15

	)

20 
	#NGX_RESOLVE_TXT
 16

	)

21 #i‡(
NGX_HAVE_INET6
)

22 
	#NGX_RESOLVE_AAAA
 28

	)

24 
	#NGX_RESOLVE_DNAME
 39

	)

26 
	#NGX_RESOLVE_FORMERR
 1

	)

27 
	#NGX_RESOLVE_SERVFAIL
 2

	)

28 
	#NGX_RESOLVE_NXDOMAIN
 3

	)

29 
	#NGX_RESOLVE_NOTIMP
 4

	)

30 
	#NGX_RESOLVE_REFUSED
 5

	)

31 
	#NGX_RESOLVE_TIMEDOUT
 
NGX_ETIMEDOUT


	)

34 
	#NGX_NO_RESOLVER
 (*Ë-1

	)

36 
	#NGX_RESOLVER_MAX_RECURSION
 50

	)

40 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

41 
sockaddr
 *
	msockaddr
;

42 
sockÀn_t
 
	msockÀn
;

43 
ngx_°r_t
 
	m£rvî
;

44 
ngx_log_t
 
	mlog
;

45 } 
	tngx_udp_c⁄√˘i⁄_t
;

48 
ngx_ªsﬁvî_˘x_s
 
	tngx_ªsﬁvî_˘x_t
;

50 (*
	tngx_ªsﬁvî_h™dÀr_±
)(
	tngx_ªsﬁvî_˘x_t
 *
	t˘x
);

55 
u_ch¨
 *
«me
;

57 
ngx_queue_t
 
queue
;

60 
ngx_öt_t
 
idít
;

62 
ngx_rbåì_node_t
 
node
;

64 #i‡(
NGX_HAVE_INET6
)

66 
ö6_addr
 
addr6
;

69 
u_sh‹t
 
∆í
;

70 
u_sh‹t
 
qÀn
;

72 
u_ch¨
 *
quîy
;

73 #i‡(
NGX_HAVE_INET6
)

74 
u_ch¨
 *
quîy6
;

78 
ö_addr_t
 
addr
;

79 
ö_addr_t
 *
addrs
;

80 
u_ch¨
 *
˙ame
;

81 } 
u
;

83 
u_ch¨
 
code
;

84 
u_sh‹t
 
«ddrs
;

85 
u_sh‹t
 
˙Àn
;

87 #i‡(
NGX_HAVE_INET6
)

89 
ö6_addr
 
addr6
;

90 
ö6_addr
 *
addrs6
;

91 } 
u6
;

93 
u_sh‹t
 
«ddrs6
;

96 
time_t
 
expúe
;

97 
time_t
 
vÆid
;

98 
uöt32_t
 
âl
;

100 
ngx_ªsﬁvî_˘x_t
 *
waôög
;

101 } 
	tngx_ªsﬁvî_node_t
;

106 
ngx_evít_t
 *
evít
;

107 *
dummy
;

108 
ngx_log_t
 *
log
;

111 
ngx_öt_t
 
idít
;

114 
ngx_¨øy_t
 
udp_c⁄√˘i⁄s
;

115 
ngx_uöt_t
 
œ°_c⁄√˘i⁄
;

117 
ngx_rbåì_t
 
«me_rbåì
;

118 
ngx_rbåì_node_t
 
«me_£¡öñ
;

120 
ngx_rbåì_t
 
addr_rbåì
;

121 
ngx_rbåì_node_t
 
addr_£¡öñ
;

123 
ngx_queue_t
 
«me_ª£nd_queue
;

124 
ngx_queue_t
 
addr_ª£nd_queue
;

126 
ngx_queue_t
 
«me_expúe_queue
;

127 
ngx_queue_t
 
addr_expúe_queue
;

129 #i‡(
NGX_HAVE_INET6
)

130 
ngx_uöt_t
 
ùv6
;

131 
ngx_rbåì_t
 
addr6_rbåì
;

132 
ngx_rbåì_node_t
 
addr6_£¡öñ
;

133 
ngx_queue_t
 
addr6_ª£nd_queue
;

134 
ngx_queue_t
 
addr6_expúe_queue
;

137 
time_t
 
ª£nd_timeout
;

138 
time_t
 
expúe
;

139 
time_t
 
vÆid
;

141 
ngx_uöt_t
 
log_Àvñ
;

142 } 
	tngx_ªsﬁvî_t
;

145 
	sngx_ªsﬁvî_˘x_s
 {

146 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

147 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

148 
ngx_udp_c⁄√˘i⁄_t
 *
udp_c⁄√˘i⁄
;

150 
ngx_öt_t
 
°©e
;

151 
ngx_°r_t
 
«me
;

153 
ngx_uöt_t
 
«ddrs
;

154 
ngx_addr_t
 *
addrs
;

155 
ngx_addr_t
 
addr
;

156 
sockaddr_ö
 
sö
;

158 
ngx_ªsﬁvî_h™dÀr_±
 
h™dÀr
;

159 *
d©a
;

160 
ngx_m£c_t
 
timeout
;

162 
ngx_uöt_t
 
quick
;

163 
ngx_uöt_t
 
ªcursi⁄
;

164 
ngx_evít_t
 *
evít
;

168 
ngx_ªsﬁvî_t
 *
	`ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
,

169 
ngx_uöt_t
 
n
);

170 
ngx_ªsﬁvî_˘x_t
 *
	`ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
,

171 
ngx_ªsﬁvî_˘x_t
 *
ãmp
);

172 
ngx_öt_t
 
	`ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

173 
	`ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

174 
ngx_öt_t
 
	`ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

175 
	`ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

176 *
	`ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
);

	@src/core/ngx_sha1.h

8 #i‚de‡
_NGX_SHA1_H_INCLUDED_


9 
	#_NGX_SHA1_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_OPENSSL_SHA1_H
)

17 
	~<›ís¶/sha.h
>

19 
	~<sha.h
>

23 
SHA_CTX
 
	tngx_sha1_t
;

26 
	#ngx_sha1_öô
 
SHA1_Inô


	)

27 
	#ngx_sha1_upd©e
 
SHA1_Upd©e


	)

28 
	#ngx_sha1_föÆ
 
SHA1_FöÆ


	)

	@src/core/ngx_shmtx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_ATOMIC_OPS
)

15 
ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
);

18 
ngx_öt_t


19 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

21 
mtx
->
lock
 = &
addr
->lock;

23 i‡(
mtx
->
•ö
 =(
ngx_uöt_t
) -1) {

24  
NGX_OK
;

27 
mtx
->
•ö
 = 2048;

29 #i‡(
NGX_HAVE_POSIX_SEM
)

31 
mtx
->
waô
 = &
addr
->wait;

33 i‡(
	`£m_öô
(&
mtx
->
£m
, 1, 0) == -1) {

34 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

37 
mtx
->
£m≠h‹e
 = 1;

42  
NGX_OK
;

43 
	}
}

47 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

49 #i‡(
NGX_HAVE_POSIX_SEM
)

51 i‡(
mtx
->
£m≠h‹e
) {

52 i‡(
	`£m_de°roy
(&
mtx
->
£m
) == -1) {

53 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

59 
	}
}

62 
ngx_uöt_t


63 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

65  (*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
));

66 
	}
}

70 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

72 
ngx_uöt_t
 
i
, 
n
;

74 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtxÜock");

78 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

82 i‡(
ngx_n˝u
 > 1) {

84 
n
 = 1;Ç < 
mtx
->
•ö
;Ç <<= 1) {

86 
i
 = 0; i < 
n
; i++) {

87 
	`ngx_˝u_∑u£
();

90 i‡(*
mtx
->
lock
 == 0

91 && 
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 0, 
ngx_pid
))

98 #i‡(
NGX_HAVE_POSIX_SEM
)

100 i‡(
mtx
->
£m≠h‹e
) {

101 (Ë
	`ngx_©omic_„tch_add
(
mtx
->
waô
, 1);

103 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

104 (Ë
	`ngx_©omic_„tch_add
(
mtx
->
waô
, -1);

108 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

109 "shmtx waô %uA", *
mtx
->
waô
);

111 
	`£m_waô
(&
mtx
->
£m
) == -1) {

112 
ngx_îr_t
 
îr
;

114 
îr
 = 
ngx_î∫o
;

116 i‡(
îr
 !
NGX_EINTR
) {

117 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

123 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

131 
	`ngx_sched_yõld
();

133 
	}
}

137 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

139 i‡(
mtx
->
•ö
 !(
ngx_uöt_t
) -1) {

140 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtx unlock");

143 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
ngx_pid
, 0)) {

144 
	`ngx_shmtx_wakeup
(
mtx
);

146 
	}
}

149 
ngx_uöt_t


150 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

152 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

155 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
pid
, 0)) {

156 
	`ngx_shmtx_wakeup
(
mtx
);

161 
	}
}

165 
	$ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
)

167 #i‡(
NGX_HAVE_POSIX_SEM
)

168 
ngx_©omic_uöt_t
 
waô
;

170 i‡(!
mtx
->
£m≠h‹e
) {

176 
waô
 = *
mtx
->wait;

178 i‡((
ngx_©omic_öt_t
Ë
waô
 <= 0) {

182 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
waô
, wait, wait - 1)) {

187 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

188 "shmtx wakê%uA", 
waô
);

190 i‡(
	`£m_po°
(&
mtx
->
£m
) == -1) {

191 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

196 
	}
}

202 
ngx_öt_t


203 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

205 i‡(
mtx
->
«me
) {

207 i‡(
	`ngx_°rcmp
(
«me
, 
mtx
->name) == 0) {

208 
mtx
->
«me
 =Çame;

209  
NGX_OK
;

212 
	`ngx_shmtx_de°roy
(
mtx
);

215 
mtx
->
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

216 
NGX_FILE_DEFAULT_ACCESS
);

218 i‡(
mtx
->
fd
 =
NGX_INVALID_FILE
) {

219 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

220 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

221  
NGX_ERROR
;

224 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

225 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

226 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

229 
mtx
->
«me
 =Çame;

231  
NGX_OK
;

232 
	}
}

236 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

238 i‡(
	`ngx_˛o£_fûe
(
mtx
->
fd
Ë=
NGX_FILE_ERROR
) {

239 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

240 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
mtx
->
«me
);

242 
	}
}

245 
ngx_uöt_t


246 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

248 
ngx_îr_t
 
îr
;

250 
îr
 = 
	`ngx_åylock_fd
(
mtx
->
fd
);

252 i‡(
îr
 == 0) {

256 i‡(
îr
 =
NGX_EAGAIN
) {

260 #i‡
__osf__


262 i‡(
îr
 =
NGX_EACCES
) {

268 
	`ngx_log_ab‹t
(
îr
, 
ngx_åylock_fd_n
 " %†Áûed", 
mtx
->
«me
);

271 
	}
}

275 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

277 
ngx_îr_t
 
îr
;

279 
îr
 = 
	`ngx_lock_fd
(
mtx
->
fd
);

281 i‡(
îr
 == 0) {

285 
	`ngx_log_ab‹t
(
îr
, 
ngx_lock_fd_n
 " %†Áûed", 
mtx
->
«me
);

286 
	}
}

290 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

292 
ngx_îr_t
 
îr
;

294 
îr
 = 
	`ngx_u∆ock_fd
(
mtx
->
fd
);

296 i‡(
îr
 == 0) {

300 
	`ngx_log_ab‹t
(
îr
, 
ngx_u∆ock_fd_n
 " %†Áûed", 
mtx
->
«me
);

301 
	}
}

304 
ngx_uöt_t


305 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

308 
	}
}

	@src/core/ngx_shmtx.h

8 #i‚de‡
_NGX_SHMTX_H_INCLUDED_


9 
	#_NGX_SHMTX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
ngx_©omic_t
 
	mlock
;

18 #i‡(
NGX_HAVE_POSIX_SEM
)

19 
ngx_©omic_t
 
	mwaô
;

21 } 
	tngx_shmtx_sh_t
;

25 #i‡(
NGX_HAVE_ATOMIC_OPS
)

26 
ngx_©omic_t
 *
	mlock
;

27 #i‡(
NGX_HAVE_POSIX_SEM
)

28 
ngx_©omic_t
 *
	mwaô
;

29 
ngx_uöt_t
 
	m£m≠h‹e
;

30 
£m_t
 
	m£m
;

33 
ngx_fd_t
 
	mfd
;

34 
u_ch¨
 *
	m«me
;

36 
ngx_uöt_t
 
	m•ö
;

37 } 
	tngx_shmtx_t
;

40 
ngx_öt_t
 
ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
,

41 
u_ch¨
 *
«me
);

42 
ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
);

43 
ngx_uöt_t
 
ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
);

44 
ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
);

45 
ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
);

46 
ngx_uöt_t
 
ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
);

	@src/core/ngx_slab.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
	#NGX_SLAB_PAGE_MASK
 3

	)

12 
	#NGX_SLAB_PAGE
 0

	)

13 
	#NGX_SLAB_BIG
 1

	)

14 
	#NGX_SLAB_EXACT
 2

	)

15 
	#NGX_SLAB_SMALL
 3

	)

17 #i‡(
NGX_PTR_SIZE
 == 4)

19 
	#NGX_SLAB_PAGE_FREE
 0

	)

20 
	#NGX_SLAB_PAGE_BUSY
 0xffffffff

	)

21 
	#NGX_SLAB_PAGE_START
 0x80000000

	)

23 
	#NGX_SLAB_SHIFT_MASK
 0x0000000f

	)

24 
	#NGX_SLAB_MAP_MASK
 0xffff0000

	)

25 
	#NGX_SLAB_MAP_SHIFT
 16

	)

27 
	#NGX_SLAB_BUSY
 0xffffffff

	)

31 
	#NGX_SLAB_PAGE_FREE
 0

	)

32 
	#NGX_SLAB_PAGE_BUSY
 0xffffffffffffffff

	)

33 
	#NGX_SLAB_PAGE_START
 0x8000000000000000

	)

35 
	#NGX_SLAB_SHIFT_MASK
 0x000000000000000f

	)

36 
	#NGX_SLAB_MAP_MASK
 0xffffffff00000000

	)

37 
	#NGX_SLAB_MAP_SHIFT
 32

	)

39 
	#NGX_SLAB_BUSY
 0xffffffffffffffff

	)

44 #i‡(
NGX_DEBUG_MALLOC
)

46 
	#ngx_¶ab_junk
(
p
, 
size
Ë
	`ngx_mem£t
’, 0xA5, size)

	)

48 #ñi‡(
NGX_HAVE_DEBUG_MALLOC
)

50 
	#ngx_¶ab_junk
(
p
, 
size
) \

51 i‡(
ngx_debug_mÆloc
Ë
	`ngx_mem£t
(
p
, 0xA5, 
size
)

	)

55 
	#ngx_¶ab_junk
(
p
, 
size
)

	)

59 
ngx_¶ab_∑ge_t
 *
ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
,

60 
ngx_uöt_t
 
∑ges
);

61 
ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

62 
ngx_uöt_t
 
∑ges
);

63 
ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
,

64 *
ãxt
);

67 
ngx_uöt_t
 
	gngx_¶ab_max_size
;

68 
ngx_uöt_t
 
	gngx_¶ab_exa˘_size
;

69 
ngx_uöt_t
 
	gngx_¶ab_exa˘_shi·
;

73 
	$ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
)

75 
u_ch¨
 *
p
;

76 
size_t
 
size
;

77 
ngx_öt_t
 
m
;

78 
ngx_uöt_t
 
i
, 
n
, 
∑ges
;

79 
ngx_¶ab_∑ge_t
 *
¶Ÿs
;

82 i‡(
ngx_¶ab_max_size
 == 0) {

83 
ngx_¶ab_max_size
 = 
ngx_∑gesize
 / 2;

84 
ngx_¶ab_exa˘_size
 = 
ngx_∑gesize
 / (8 * (
uöçå_t
));

85 
n
 = 
ngx_¶ab_exa˘_size
;Ç >>1; 
ngx_¶ab_exa˘_shi·
++) {

91 
poﬁ
->
mö_size
 = 1 <<Öoﬁ->
mö_shi·
;

93 
p
 = (
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
);

94 
size
 = 
poﬁ
->
íd
 - 
p
;

96 
	`ngx_¶ab_junk
(
p
, 
size
);

98 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

99 
n
 = 
ngx_∑gesize_shi·
 - 
poﬁ
->
mö_shi·
;

101 
i
 = 0; i < 
n
; i++) {

102 
¶Ÿs
[
i
].
¶ab
 = 0;

103 
¶Ÿs
[
i
].
√xt
 = &slots[i];

104 
¶Ÿs
[
i
].
¥ev
 = 0;

107 
p
 +
n
 * (
ngx_¶ab_∑ge_t
);

109 
∑ges
 = (
ngx_uöt_t
Ë(
size
 / (
ngx_∑gesize
 + (
ngx_¶ab_∑ge_t
)));

111 
	`ngx_memzîo
(
p
, 
∑ges
 * (
ngx_¶ab_∑ge_t
));

113 
poﬁ
->
∑ges
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

115 
poﬁ
->
‰ì
.
¥ev
 = 0;

116 
poﬁ
->
‰ì
.
√xt
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

118 
poﬁ
->
∑ges
->
¶ab
 =Öages;

119 
poﬁ
->
∑ges
->
√xt
 = &poﬁ->
‰ì
;

120 
poﬁ
->
∑ges
->
¥ev
 = (
uöçå_t
Ë&poﬁ->
‰ì
;

122 
poﬁ
->
°¨t
 = (
u_ch¨
 *)

123 
	`ngx_Æign_±r
((
uöçå_t
Ë
p
 + 
∑ges
 * (
ngx_¶ab_∑ge_t
),

124 
ngx_∑gesize
);

126 
m
 = 
∑ges
 - (
poﬁ
->
íd
 -Öoﬁ->
°¨t
Ë/ 
ngx_∑gesize
;

127 i‡(
m
 > 0) {

128 
∑ges
 -
m
;

129 
poﬁ
->
∑ges
->
¶ab
 =Öages;

132 
poﬁ
->
œ°
 =Öoﬁ->
∑ges
 +Öages;

134 
poﬁ
->
log_nomem
 = 1;

135 
poﬁ
->
log_˘x
 = &poﬁ->
zîo
;

136 
poﬁ
->
zîo
 = '\0';

137 
	}
}

141 
	$ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

143 *
p
;

145 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

147 
p
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
size
);

149 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

151  
p
;

152 
	}
}

156 
	$ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

158 
size_t
 
s
;

159 
uöçå_t
 
p
, 
n
, 
m
, 
mask
, *
bôm≠
;

160 
ngx_uöt_t
 
i
, 
¶Ÿ
, 
shi·
, 
m≠
;

161 
ngx_¶ab_∑ge_t
 *
∑ge
, *
¥ev
, *
¶Ÿs
;

163 i‡(
size
 > 
ngx_¶ab_max_size
) {

165 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

166 "¶abáŒoc: %uz", 
size
);

168 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, (
size
 >> 
ngx_∑gesize_shi·
)

169 + ((
size
 % 
ngx_∑gesize
) ? 1 : 0));

170 i‡(
∑ge
) {

171 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

172 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

175 
p
 = 0;

178 
d⁄e
;

181 i‡(
size
 > 
poﬁ
->
mö_size
) {

182 
shi·
 = 1;

183 
s
 = 
size
 - 1; s >>1; 
shi·
++) { }

184 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

187 
size
 = 
poﬁ
->
mö_size
;

188 
shi·
 = 
poﬁ
->
mö_shi·
;

189 
¶Ÿ
 = 0;

192 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

193 "¶abáŒoc: %uz slŸ: %ui", 
size
, 
¶Ÿ
);

195 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

196 
∑ge
 = 
¶Ÿs
[
¶Ÿ
].
√xt
;

198 i‡(
∑ge
->
√xt
 !=Öage) {

200 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

203 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

204 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

206 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
))

207 / ((
uöçå_t
) * 8);

209 
n
 = 0;Ç < 
m≠
;Ç++) {

211 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

213 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

214 i‡((
bôm≠
[
n
] & 
m
)) {

218 
bôm≠
[
n
] |
m
;

220 
i
 = ((
n
 * (
uöçå_t
Ë* 8Ë<< 
shi·
)

221 + (
i
 << 
shi·
);

223 i‡(
bôm≠
[
n
] =
NGX_SLAB_BUSY
) {

224 
n
 =Ç + 1;Ç < 
m≠
;Ç++) {

225 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

226 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

228 
d⁄e
;

232 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

233 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

234 
¥ev
->
√xt
 = 
∑ge
->next;

235 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

237 
∑ge
->
√xt
 = 
NULL
;

238 
∑ge
->
¥ev
 = 
NGX_SLAB_SMALL
;

241 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

243 
d⁄e
;

248 
∑ge
 =Öage->
√xt
;

250 } 
∑ge
);

252 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

255 i‡(
∑ge
->
¶ab
 !
NGX_SLAB_BUSY
) {

257 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

258 i‡((
∑ge
->
¶ab
 & 
m
)) {

262 
∑ge
->
¶ab
 |
m
;

264 i‡(
∑ge
->
¶ab
 =
NGX_SLAB_BUSY
) {

265 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

266 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

267 
¥ev
->
√xt
 = 
∑ge
->next;

268 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

270 
∑ge
->
√xt
 = 
NULL
;

271 
∑ge
->
¥ev
 = 
NGX_SLAB_EXACT
;

274 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

275 
p
 +
i
 << 
shi·
;

276 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

278 
d⁄e
;

282 
∑ge
 =Öage->
√xt
;

284 } 
∑ge
);

288 
n
 = 
ngx_∑gesize_shi·
 - (
∑ge
->
¶ab
 & 
NGX_SLAB_SHIFT_MASK
);

289 
n
 = 1 <<Ç;

290 
n
 = ((
uöçå_t
) 1 <<Ç) - 1;

291 
mask
 = 
n
 << 
NGX_SLAB_MAP_SHIFT
;

294 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë!
mask
) {

296 
m
 = (
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
, 
i
 = 0;

297 
m
 & 
mask
;

298 
m
 <<1, 
i
++)

300 i‡((
∑ge
->
¶ab
 & 
m
)) {

304 
∑ge
->
¶ab
 |
m
;

306 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë=
mask
) {

307 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

308 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

309 
¥ev
->
√xt
 = 
∑ge
->next;

310 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

312 
∑ge
->
√xt
 = 
NULL
;

313 
∑ge
->
¥ev
 = 
NGX_SLAB_BIG
;

316 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

317 
p
 +
i
 << 
shi·
;

318 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

320 
d⁄e
;

324 
∑ge
 =Öage->
√xt
;

326 } 
∑ge
);

330 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, 1);

332 i‡(
∑ge
) {

333 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

334 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

335 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

337 
s
 = 1 << 
shi·
;

338 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ 8 / 
s
;

340 i‡(
n
 == 0) {

341 
n
 = 1;

344 
bôm≠
[0] = (2 << 
n
) - 1;

346 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

348 
i
 = 1; i < 
m≠
; i++) {

349 
bôm≠
[
i
] = 0;

352 
∑ge
->
¶ab
 = 
shi·
;

353 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

354 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

356 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

358 
p
 = ((
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
Ë+ 
s
 * 
n
;

359 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

361 
d⁄e
;

363 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

365 
∑ge
->
¶ab
 = 1;

366 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

367 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

369 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

371 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

372 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

374 
d⁄e
;

378 
∑ge
->
¶ab
 = ((
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
Ë| 
shi·
;

379 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

380 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

382 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

384 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

385 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

387 
d⁄e
;

391 
p
 = 0;

393 
d⁄e
:

395 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶abáŒoc: %p", 
p
);

397  (*Ë
p
;

398 
	}
}

402 
	$ngx_¶ab_ˇŒoc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

404 *
p
;

406 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

408 
p
 = 
	`ngx_¶ab_ˇŒoc_locked
(
poﬁ
, 
size
);

410 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

412  
p
;

413 
	}
}

417 
	$ngx_¶ab_ˇŒoc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

419 *
p
;

421 
p
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
size
);

422 i‡(
p
) {

423 
	`ngx_memzîo
(
p
, 
size
);

426  
p
;

427 
	}
}

431 
	$ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

433 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

435 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
p
);

437 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

438 
	}
}

442 
	$ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

444 
size_t
 
size
;

445 
uöçå_t
 
¶ab
, 
m
, *
bôm≠
;

446 
ngx_uöt_t
 
n
, 
ty≥
, 
¶Ÿ
, 
shi·
, 
m≠
;

447 
ngx_¶ab_∑ge_t
 *
¶Ÿs
, *
∑ge
;

449 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶ab fªe: %p", 
p
);

451 i‡((
u_ch¨
 *Ë
p
 < 
poﬁ
->
°¨t
 || (u_ch¨ *Ë∞>Öoﬁ->
íd
) {

452 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
, "ngx_slab_free(): outside ofÖool");

453 
Áû
;

456 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

457 
∑ge
 = &
poﬁ
->
∑ges
[
n
];

458 
¶ab
 = 
∑ge
->slab;

459 
ty≥
 = 
∑ge
->
¥ev
 & 
NGX_SLAB_PAGE_MASK
;

461 
ty≥
) {

463 
NGX_SLAB_SMALL
:

465 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

466 
size
 = 1 << 
shi·
;

468 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

469 
wr⁄g_chunk
;

472 
n
 = ((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
;

473 
m
 = (
uöçå_t
Ë1 << (
n
 & ((uintptr_t) * 8 - 1));

474 
n
 /((
uöçå_t
) * 8);

475 
bôm≠
 = (
uöçå_t
 *)

476 ((
uöçå_t
Ë
p
 & ~((uöçå_tË
ngx_∑gesize
 - 1));

478 i‡(
bôm≠
[
n
] & 
m
) {

480 i‡(
∑ge
->
√xt
 =
NULL
) {

481 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

482 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

483 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

485 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

486 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

488 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

489 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_SMALL
;

492 
bôm≠
[
n
] &~
m
;

494 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)) / 8 / (1 << shift);

496 i‡(
n
 == 0) {

497 
n
 = 1;

500 i‡(
bôm≠
[0] & ~(((
uöçå_t
Ë1 << 
n
) - 1)) {

501 
d⁄e
;

504 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

506 
n
 = 1;Ç < 
m≠
;Ç++) {

507 i‡(
bôm≠
[
n
]) {

508 
d⁄e
;

512 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

514 
d⁄e
;

517 
chunk_Æªady_‰ì
;

519 
NGX_SLAB_EXACT
:

521 
m
 = (
uöçå_t
) 1 <<

522 (((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
ngx_¶ab_exa˘_shi·
);

523 
size
 = 
ngx_¶ab_exa˘_size
;

525 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

526 
wr⁄g_chunk
;

529 i‡(
¶ab
 & 
m
) {

530 i‡(
¶ab
 =
NGX_SLAB_BUSY
) {

531 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

532 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

533 
¶Ÿ
 = 
ngx_¶ab_exa˘_shi·
 - 
poﬁ
->
mö_shi·
;

535 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

536 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

538 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

539 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_EXACT
;

542 
∑ge
->
¶ab
 &~
m
;

544 i‡(
∑ge
->
¶ab
) {

545 
d⁄e
;

548 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

550 
d⁄e
;

553 
chunk_Æªady_‰ì
;

555 
NGX_SLAB_BIG
:

557 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

558 
size
 = 1 << 
shi·
;

560 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

561 
wr⁄g_chunk
;

564 
m
 = (
uöçå_t
Ë1 << ((((uöçå_tË
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
)

565 + 
NGX_SLAB_MAP_SHIFT
);

567 i‡(
¶ab
 & 
m
) {

569 i‡(
∑ge
->
√xt
 =
NULL
) {

570 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

571 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

572 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

574 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

575 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

577 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

578 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_BIG
;

581 
∑ge
->
¶ab
 &~
m
;

583 i‡(
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
) {

584 
d⁄e
;

587 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

589 
d⁄e
;

592 
chunk_Æªady_‰ì
;

594 
NGX_SLAB_PAGE
:

596 i‡((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)) {

597 
wr⁄g_chunk
;

600 i‡(
¶ab
 =
NGX_SLAB_PAGE_FREE
) {

601 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

603 
Áû
;

606 i‡(
¶ab
 =
NGX_SLAB_PAGE_BUSY
) {

607 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

609 
Áû
;

612 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

613 
size
 = 
¶ab
 & ~
NGX_SLAB_PAGE_START
;

615 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, &poﬁ->
∑ges
[
n
], 
size
);

617 
	`ngx_¶ab_junk
(
p
, 
size
 << 
ngx_∑gesize_shi·
);

626 
d⁄e
:

628 
	`ngx_¶ab_junk
(
p
, 
size
);

632 
wr⁄g_chunk
:

634 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

637 
Áû
;

639 
chunk_Æªady_‰ì
:

641 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

644 
Áû
:

647 
	}
}

650 
ngx_¶ab_∑ge_t
 *

651 
	$ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
∑ges
)

653 
ngx_¶ab_∑ge_t
 *
∑ge
, *
p
;

655 
∑ge
 = 
poﬁ
->
‰ì
.
√xt
;Öage != &pool->free;Öage =Öage->next) {

657 i‡(
∑ge
->
¶ab
 >
∑ges
) {

659 i‡(
∑ge
->
¶ab
 > 
∑ges
) {

660 
∑ge
[∑ge->
¶ab
 - 1].
¥ev
 = (
uöçå_t
Ë&∑ge[
∑ges
];

662 
∑ge
[
∑ges
].
¶ab
 =Öage->slab -Öages;

663 
∑ge
[
∑ges
].
√xt
 =Öage->next;

664 
∑ge
[
∑ges
].
¥ev
 =Öage->prev;

666 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

667 
p
->
√xt
 = &
∑ge
[
∑ges
];

668 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë&∑ge[
∑ges
];

671 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

672 
p
->
√xt
 = 
∑ge
->next;

673 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

676 
∑ge
->
¶ab
 = 
∑ges
 | 
NGX_SLAB_PAGE_START
;

677 
∑ge
->
√xt
 = 
NULL
;

678 
∑ge
->
¥ev
 = 
NGX_SLAB_PAGE
;

680 i‡(--
∑ges
 == 0) {

681  
∑ge
;

684 
p
 = 
∑ge
 + 1; 
∑ges
;Öages--) {

685 
p
->
¶ab
 = 
NGX_SLAB_PAGE_BUSY
;

686 
p
->
√xt
 = 
NULL
;

687 
p
->
¥ev
 = 
NGX_SLAB_PAGE
;

688 
p
++;

691  
∑ge
;

695 i‡(
poﬁ
->
log_nomem
) {

696 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_CRIT
,

700  
NULL
;

701 
	}
}

705 
	$ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

706 
ngx_uöt_t
 
∑ges
)

708 
ngx_uöt_t
 
ty≥
;

709 
ngx_¶ab_∑ge_t
 *
¥ev
, *
joö
;

711 
∑ge
->
¶ab
 = 
∑ges
--;

713 i‡(
∑ges
) {

714 
	`ngx_memzîo
(&
∑ge
[1], 
∑ges
 * (
ngx_¶ab_∑ge_t
));

717 i‡(
∑ge
->
√xt
) {

718 
¥ev
 = (
ngx_¶ab_∑ge_t
 *Ë(
∑ge
->¥ev & ~
NGX_SLAB_PAGE_MASK
);

719 
¥ev
->
√xt
 = 
∑ge
->next;

720 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

723 
joö
 = 
∑ge
 +Öage->
¶ab
;

725 i‡(
joö
 < 
poﬁ
->
œ°
) {

726 
ty≥
 = 
joö
->
¥ev
 & 
NGX_SLAB_PAGE_MASK
;

728 i‡(
ty≥
 =
NGX_SLAB_PAGE
) {

730 i‡(
joö
->
√xt
 !
NULL
) {

731 
∑ges
 +
joö
->
¶ab
;

732 
∑ge
->
¶ab
 +
joö
->slab;

734 
¥ev
 = (
ngx_¶ab_∑ge_t
 *Ë(
joö
->¥ev & ~
NGX_SLAB_PAGE_MASK
);

735 
¥ev
->
√xt
 = 
joö
->next;

736 
joö
->
√xt
->
¥ev
 = join->prev;

738 
joö
->
¶ab
 = 
NGX_SLAB_PAGE_FREE
;

739 
joö
->
√xt
 = 
NULL
;

740 
joö
->
¥ev
 = 
NGX_SLAB_PAGE
;

745 i‡(
∑ge
 > 
poﬁ
->
∑ges
) {

746 
joö
 = 
∑ge
 - 1;

747 
ty≥
 = 
joö
->
¥ev
 & 
NGX_SLAB_PAGE_MASK
;

749 i‡(
ty≥
 =
NGX_SLAB_PAGE
) {

751 i‡(
joö
->
¶ab
 =
NGX_SLAB_PAGE_FREE
) {

752 
joö
 = (
ngx_¶ab_∑ge_t
 *Ë(joö->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

755 i‡(
joö
->
√xt
 !
NULL
) {

756 
∑ges
 +
joö
->
¶ab
;

757 
joö
->
¶ab
 +
∑ge
->slab;

759 
¥ev
 = (
ngx_¶ab_∑ge_t
 *Ë(
joö
->¥ev & ~
NGX_SLAB_PAGE_MASK
);

760 
¥ev
->
√xt
 = 
joö
->next;

761 
joö
->
√xt
->
¥ev
 = join->prev;

763 
∑ge
->
¶ab
 = 
NGX_SLAB_PAGE_FREE
;

764 
∑ge
->
√xt
 = 
NULL
;

765 
∑ge
->
¥ev
 = 
NGX_SLAB_PAGE
;

767 
∑ge
 = 
joö
;

772 i‡(
∑ges
) {

773 
∑ge
[
∑ges
].
¥ev
 = (
uöçå_t
)Öage;

776 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
poﬁ
->
‰ì
;

777 
∑ge
->
√xt
 = 
poﬁ
->
‰ì
.next;

779 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
)Öage;

781 
poﬁ
->
‰ì
.
√xt
 = 
∑ge
;

782 
	}
}

786 
	$ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
, *
ãxt
)

788 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 0, "%s%s", 
ãxt
, 
poﬁ
->
log_˘x
);

789 
	}
}

	@src/core/ngx_slab.h

8 #i‚de‡
_NGX_SLAB_H_INCLUDED_


9 
	#_NGX_SLAB_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_¶ab_∑ge_s
 
	tngx_¶ab_∑ge_t
;

18 
	sngx_¶ab_∑ge_s
 {

19 
uöçå_t
 
	m¶ab
;

20 
ngx_¶ab_∑ge_t
 *
	m√xt
;

21 
uöçå_t
 
	m¥ev
;

26 
ngx_shmtx_sh_t
 
	mlock
;

28 
size_t
 
	mmö_size
;

29 
size_t
 
	mmö_shi·
;

31 
ngx_¶ab_∑ge_t
 *
	m∑ges
;

32 
ngx_¶ab_∑ge_t
 *
	mœ°
;

33 
ngx_¶ab_∑ge_t
 
	m‰ì
;

35 
u_ch¨
 *
	m°¨t
;

36 
u_ch¨
 *
	míd
;

38 
ngx_shmtx_t
 
	mmuãx
;

40 
u_ch¨
 *
	mlog_˘x
;

41 
u_ch¨
 
	mzîo
;

43 
	mlog_nomem
:1;

45 *
	md©a
;

46 *
	maddr
;

47 } 
	tngx_¶ab_poﬁ_t
;

50 
ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
);

51 *
ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

52 *
ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

53 *
ngx_¶ab_ˇŒoc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

54 *
ngx_¶ab_ˇŒoc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

55 
ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

56 
ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

	@src/core/ngx_spinlock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
)

16 #i‡(
NGX_HAVE_ATOMIC_OPS
)

18 
ngx_uöt_t
 
i
, 
n
;

22 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

26 i‡(
ngx_n˝u
 > 1) {

28 
n
 = 1;Ç < 
•ö
;Ç <<= 1) {

30 
i
 = 0; i < 
n
; i++) {

31 
	`ngx_˝u_∑u£
();

34 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

40 
	`ngx_sched_yõld
();

45 #i‡(
NGX_THREADS
)

47 #îr‹ 
	`ngx_•ölock
(Ë
‹
 
	`ngx_©omic_cmp_£t
(Ë
¨e
 
nŸ
 
deföed
 !

53 
	}
}

	@src/core/ngx_string.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 *
ngx_•rötf_num
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
,

13 
u_ch¨
 
zîo
, 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
);

14 
ngx_ícode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
,

15 c⁄° 
u_ch¨
 *
basis
, 
ngx_uöt_t
 
∑ddög
);

16 
ngx_öt_t
 
ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
,

17 c⁄° 
u_ch¨
 *
basis
);

21 
	$ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

23 
n
) {

24 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

25 
d°
++;

26 
§c
++;

27 
n
--;

29 
	}
}

32 
u_ch¨
 *

33 
	$ngx_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

35 i‡(
n
 == 0) {

36  
d°
;

39 --
n
) {

40 *
d°
 = *
§c
;

42 i‡(*
d°
 == '\0') {

43  
d°
;

46 
d°
++;

47 
§c
++;

50 *
d°
 = '\0';

52  
d°
;

53 
	}
}

56 
u_ch¨
 *

57 
	$ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
)

59 
u_ch¨
 *
d°
;

61 
d°
 = 
	`ngx_≤Æloc
(
poﬁ
, 
§c
->
Àn
);

62 i‡(
d°
 =
NULL
) {

63  
NULL
;

66 
	`ngx_mem˝y
(
d°
, 
§c
->
d©a
, src->
Àn
);

68  
d°
;

69 
	}
}

104 
u_ch¨
 * 
ngx_cde˛


105 
	$ngx_•rötf
(
u_ch¨
 *
buf
, c⁄° *
fmt
, ...)

107 
u_ch¨
 *
p
;

108 
va_li°
 
¨gs
;

110 
	`va_°¨t
(
¨gs
, 
fmt
);

111 
p
 = 
	`ngx_v¶¥ötf
(
buf
, (*Ë-1, 
fmt
, 
¨gs
);

112 
	`va_íd
(
¨gs
);

114  
p
;

115 
	}
}

118 
u_ch¨
 * 
ngx_cde˛


119 
	$ngx_¢¥ötf
(
u_ch¨
 *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...)

121 
u_ch¨
 *
p
;

122 
va_li°
 
¨gs
;

124 
	`va_°¨t
(
¨gs
, 
fmt
);

125 
p
 = 
	`ngx_v¶¥ötf
(
buf
, bu‡+ 
max
, 
fmt
, 
¨gs
);

126 
	`va_íd
(
¨gs
);

128  
p
;

129 
	}
}

132 
u_ch¨
 * 
ngx_cde˛


133 
	$ngx_¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, ...)

135 
u_ch¨
 *
p
;

136 
va_li°
 
¨gs
;

138 
	`va_°¨t
(
¨gs
, 
fmt
);

139 
p
 = 
	`ngx_v¶¥ötf
(
buf
, 
œ°
, 
fmt
, 
¨gs
);

140 
	`va_íd
(
¨gs
);

142  
p
;

143 
	}
}

146 
u_ch¨
 *

147 
	$ngx_v¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

149 
u_ch¨
 *
p
, 
zîo
;

150 
d
;

151 
f
;

152 
size_t
 
Àn
, 
¶í
;

153 
öt64_t
 
i64
;

154 
uöt64_t
 
ui64
, 
‰ac
;

155 
ngx_m£c_t
 
ms
;

156 
ngx_uöt_t
 
width
, 
sign
, 
hex
, 
max_width
, 
‰ac_width
, 
sˇÀ
, 
n
;

157 
ngx_°r_t
 *
v
;

158 
ngx_v¨übÀ_vÆue_t
 *
vv
;

160 *
fmt
 && 
buf
 < 
œ°
) {

167 i‡(*
fmt
 == '%') {

169 
i64
 = 0;

170 
ui64
 = 0;

172 
zîo
 = (
u_ch¨
Ë((*++
fmt
 == '0') ? '0' : ' ');

173 
width
 = 0;

174 
sign
 = 1;

175 
hex
 = 0;

176 
max_width
 = 0;

177 
‰ac_width
 = 0;

178 
¶í
 = (
size_t
) -1;

180 *
fmt
 >= '0' && *fmt <= '9') {

181 
width
 = width * 10 + *
fmt
++ - '0';

186 *
fmt
) {

189 
sign
 = 0;

190 
fmt
++;

194 
max_width
 = 1;

195 
fmt
++;

199 
hex
 = 2;

200 
sign
 = 0;

201 
fmt
++;

205 
hex
 = 1;

206 
sign
 = 0;

207 
fmt
++;

211 
fmt
++;

213 *
fmt
 >= '0' && *fmt <= '9') {

214 
‰ac_width
 = føc_width * 10 + *
fmt
++ - '0';

220 
¶í
 = 
	`va_¨g
(
¨gs
, 
size_t
);

221 
fmt
++;

232 *
fmt
) {

235 
v
 = 
	`va_¨g
(
¨gs
, 
ngx_°r_t
 *);

237 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
v
->len);

238 
buf
 = 
	`ngx_˝ymem
(buf, 
v
->
d©a
, 
Àn
);

239 
fmt
++;

244 
vv
 = 
	`va_¨g
(
¨gs
, 
ngx_v¨übÀ_vÆue_t
 *);

246 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
vv
->len);

247 
buf
 = 
	`ngx_˝ymem
(buf, 
vv
->
d©a
, 
Àn
);

248 
fmt
++;

253 
p
 = 
	`va_¨g
(
¨gs
, 
u_ch¨
 *);

255 i‡(
¶í
 =(
size_t
) -1) {

256 *
p
 && 
buf
 < 
œ°
) {

257 *
buf
++ = *
p
++;

261 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
¶í
);

262 
buf
 = 
	`ngx_˝ymem
(buf, 
p
, 
Àn
);

265 
fmt
++;

270 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
off_t
);

271 
sign
 = 1;

275 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_pid_t
);

276 
sign
 = 1;

280 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
time_t
);

281 
sign
 = 1;

285 
ms
 = (
ngx_m£c_t
Ë
	`va_¨g
(
¨gs
,Çgx_msec_t);

286 i‡((
ngx_m£c_öt_t
Ë
ms
 == -1) {

287 
sign
 = 1;

288 
i64
 = -1;

290 
sign
 = 0;

291 
ui64
 = (
uöt64_t
Ë
ms
;

296 i‡(
sign
) {

297 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ssize_t
);

299 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
size_t
);

304 i‡(
sign
) {

305 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_öt_t
);

307 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_uöt_t
);

310 i‡(
max_width
) {

311 
width
 = 
NGX_INT_T_LEN
;

317 i‡(
sign
) {

318 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

320 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_öt
);

325 i‡(
sign
) {

326 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

328 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_l⁄g
);

333 i‡(
sign
) {

334 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
öt32_t
);

336 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
uöt32_t
);

341 i‡(
sign
) {

342 
i64
 = 
	`va_¨g
(
¨gs
, 
öt64_t
);

344 
ui64
 = 
	`va_¨g
(
¨gs
, 
uöt64_t
);

349 i‡(
sign
) {

350 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_öt_t
);

352 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_uöt_t
);

355 i‡(
max_width
) {

356 
width
 = 
NGX_ATOMIC_T_LEN
;

362 
f
 = 
	`va_¨g
(
¨gs
, );

364 i‡(
f
 < 0) {

365 *
buf
++ = '-';

366 
f
 = -f;

369 
ui64
 = (
öt64_t
Ë
f
;

370 
‰ac
 = 0;

372 i‡(
‰ac_width
) {

374 
sˇÀ
 = 1;

375 
n
 = 
‰ac_width
;Ç;Ç--) {

376 
sˇÀ
 *= 10;

379 
‰ac
 = (
uöt64_t
Ë((
f
 - (Ë
ui64
Ë* 
sˇÀ
 + 0.5);

381 i‡(
‰ac
 =
sˇÀ
) {

382 
ui64
++;

383 
‰ac
 = 0;

387 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 0, 
width
);

389 i‡(
‰ac_width
) {

390 i‡(
buf
 < 
œ°
) {

391 *
buf
++ = '.';

394 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
‰ac
, '0', 0, 
‰ac_width
);

397 
fmt
++;

401 #i‡!(
NGX_WIN32
)

403 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
æim_t
);

404 
sign
 = 1;

409 
ui64
 = (
uöçå_t
Ë
	`va_¨g
(
¨gs
, *);

410 
hex
 = 2;

411 
sign
 = 0;

412 
zîo
 = '0';

413 
width
 = 
NGX_PTR_SIZE
 * 2;

417 
d
 = 
	`va_¨g
(
¨gs
, );

418 *
buf
++ = (
u_ch¨
Ë(
d
 & 0xff);

419 
fmt
++;

424 *
buf
++ = '\0';

425 
fmt
++;

430 #i‡(
NGX_WIN32
)

431 *
buf
++ = 
CR
;

432 i‡(
buf
 < 
œ°
) {

433 *
buf
++ = 
LF
;

436 *
buf
++ = 
LF
;

438 
fmt
++;

443 *
buf
++ = '%';

444 
fmt
++;

449 *
buf
++ = *
fmt
++;

454 i‡(
sign
) {

455 i‡(
i64
 < 0) {

456 *
buf
++ = '-';

457 
ui64
 = (
uöt64_t
Ë-
i64
;

460 
ui64
 = (
uöt64_t
Ë
i64
;

464 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 
hex
, 
width
);

466 
fmt
++;

469 *
buf
++ = *
fmt
++;

473  
buf
;

474 
	}
}

477 
u_ch¨
 *

478 
	$ngx_•rötf_num
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
, u_ch¨ 
zîo
,

479 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
)

481 
u_ch¨
 *
p
, 
ãmp
[
NGX_INT64_LEN
 + 1];

486 
size_t
 
Àn
;

487 
uöt32_t
 
ui32
;

488 
u_ch¨
 
hex
[] = "0123456789abcdef";

489 
u_ch¨
 
HEX
[] = "0123456789ABCDEF";

491 
p
 = 
ãmp
 + 
NGX_INT64_LEN
;

493 i‡(
hexadecimÆ
 == 0) {

495 i‡(
ui64
 <(
uöt64_t
Ë
NGX_MAX_UINT32_VALUE
) {

512 
ui32
 = (
uöt32_t
Ë
ui64
;

515 *--
p
 = (
u_ch¨
Ë(
ui32
 % 10 + '0');

516 } 
ui32
 /= 10);

520 *--
p
 = (
u_ch¨
Ë(
ui64
 % 10 + '0');

521 } 
ui64
 /= 10);

524 } i‡(
hexadecimÆ
 == 1) {

529 *--
p
 = 
hex
[(
uöt32_t
Ë(
ui64
 & 0xf)];

531 } 
ui64
 >>= 4);

538 *--
p
 = 
HEX
[(
uöt32_t
Ë(
ui64
 & 0xf)];

540 } 
ui64
 >>= 4);

545 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

547 
Àn
++ < 
width
 && 
buf
 < 
œ°
) {

548 *
buf
++ = 
zîo
;

553 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

555 i‡(
buf
 + 
Àn
 > 
œ°
) {

556 
Àn
 = 
œ°
 - 
buf
;

559  
	`ngx_˝ymem
(
buf
, 
p
, 
Àn
);

560 
	}
}

570 
ngx_öt_t


571 
	$ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

573 
ngx_uöt_t
 
c1
, 
c2
;

576 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

577 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

579 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

580 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

582 i‡(
c1
 =
c2
) {

584 i‡(
c1
) {

591  
c1
 - 
c2
;

593 
	}
}

596 
ngx_öt_t


597 
	$ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

599 
ngx_uöt_t
 
c1
, 
c2
;

601 
n
) {

602 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

603 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

605 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

606 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

608 i‡(
c1
 =
c2
) {

610 i‡(
c1
) {

611 
n
--;

618  
c1
 - 
c2
;

622 
	}
}

625 
u_ch¨
 *

626 
	$ngx_°∫°r
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
Àn
)

628 
u_ch¨
 
c1
, 
c2
;

629 
size_t
 
n
;

631 
c2
 = *(
u_ch¨
 *Ë
s2
++;

633 
n
 = 
	`ngx_°æí
(
s2
);

637 i‡(
Àn
-- == 0) {

638  
NULL
;

641 
c1
 = *
s1
++;

643 i‡(
c1
 == 0) {

644  
NULL
;

647 } 
c1
 !
c2
);

649 i‡(
n
 > 
Àn
) {

650  
NULL
;

653 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

655  --
s1
;

656 
	}
}

665 
u_ch¨
 *

666 
	$ngx_°r°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

668 
u_ch¨
 
c1
, 
c2
;

670 
c2
 = *(
u_ch¨
 *Ë
s2
++;

674 
c1
 = *
s1
++;

676 i‡(
c1
 == 0) {

677  
NULL
;

680 } 
c1
 !
c2
);

682 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

684  --
s1
;

685 
	}
}

688 
u_ch¨
 *

689 
	$ngx_°rˇ£°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

691 
ngx_uöt_t
 
c1
, 
c2
;

693 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

694 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

698 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

700 i‡(
c1
 == 0) {

701  
NULL
;

704 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

706 } 
c1
 !
c2
);

708 } 
	`ngx_°∫ˇ£cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

710  --
s1
;

711 
	}
}

720 
u_ch¨
 *

721 
	$ngx_°æˇ£°∫
(
u_ch¨
 *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
)

723 
ngx_uöt_t
 
c1
, 
c2
;

725 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

726 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

727 
œ°
 -
n
;

731 i‡(
s1
 >
œ°
) {

732  
NULL
;

735 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

737 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

739 } 
c1
 !
c2
);

741 } 
	`ngx_°∫ˇ£cmp
(
s1
, 
s2
, 
n
) != 0);

743  --
s1
;

744 
	}
}

747 
ngx_öt_t


748 
	$ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

750 i‡(
n
 == 0) {

754 
n
--;

757 i‡(
s1
[
n
] !
s2
[n]) {

758  
s1
[
n
] - 
s2
[n];

761 i‡(
n
 == 0) {

765 
n
--;

767 
	}
}

770 
ngx_öt_t


771 
	$ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

773 
u_ch¨
 
c1
, 
c2
;

775 i‡(
n
 == 0) {

779 
n
--;

782 
c1
 = 
s1
[
n
];

783 i‡(
c1
 >= 'a' && c1 <= 'z') {

784 
c1
 -= 'a' - 'A';

787 
c2
 = 
s2
[
n
];

788 i‡(
c2
 >= 'a' && c2 <= 'z') {

789 
c2
 -= 'a' - 'A';

792 i‡(
c1
 !
c2
) {

793  
c1
 - 
c2
;

796 i‡(
n
 == 0) {

800 
n
--;

802 
	}
}

805 
ngx_öt_t


806 
	$ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
)

808 
size_t
 
n
;

809 
ngx_öt_t
 
m
, 
z
;

811 i‡(
n1
 <
n2
) {

812 
n
 = 
n1
;

813 
z
 = -1;

816 
n
 = 
n2
;

817 
z
 = 1;

820 
m
 = 
	`ngx_memcmp
(
s1
, 
s2
, 
n
);

822 i‡(
m
 || 
n1
 =
n2
) {

823  
m
;

826  
z
;

827 
	}
}

830 
ngx_öt_t


831 
	$ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

833 
ngx_uöt_t
 
c1
, 
c2
;

836 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

837 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

839 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

840 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

842 i‡(
c1
 =
c2
) {

844 i‡(
c1
) {

853 
c1
 = (c1 == '.') ? ' ' : c1;

854 
c2
 = (c2 == '.') ? ' ' : c2;

856  
c1
 - 
c2
;

858 
	}
}

861 
ngx_öt_t


862 
	$ngx_fûíame_cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

864 
ngx_uöt_t
 
c1
, 
c2
;

866 
n
) {

867 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

868 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

870 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

871 
c1
 = 
	`tﬁowî
(c1);

872 
c2
 = 
	`tﬁowî
(c2);

875 i‡(
c1
 =
c2
) {

877 i‡(
c1
) {

878 
n
--;

887 i‡(
c1
 =0 || 
c2
 == 0) {

888  
c1
 - 
c2
;

891 
c1
 = (c1 == '/') ? 0 : c1;

892 
c2
 = (c2 == '/') ? 0 : c2;

894  
c1
 - 
c2
;

898 
	}
}

901 
ngx_öt_t


902 
	$ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

904 
ngx_öt_t
 
vÆue
, 
cutoff
, 
cuéim
;

906 i‡(
n
 == 0) {

907  
NGX_ERROR
;

910 
cutoff
 = 
NGX_MAX_INT_T_VALUE
 / 10;

911 
cuéim
 = 
NGX_MAX_INT_T_VALUE
 % 10;

913 
vÆue
 = 0; 
n
--; 
löe
++) {

914 i‡(*
löe
 < '0' || *line > '9') {

915  
NGX_ERROR
;

918 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

919  
NGX_ERROR
;

922 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

925  
vÆue
;

926 
	}
}

931 
ngx_öt_t


932 
	$ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
)

934 
ngx_öt_t
 
vÆue
, 
cutoff
, 
cuéim
;

935 
ngx_uöt_t
 
dŸ
;

937 i‡(
n
 == 0) {

938  
NGX_ERROR
;

941 
cutoff
 = 
NGX_MAX_INT_T_VALUE
 / 10;

942 
cuéim
 = 
NGX_MAX_INT_T_VALUE
 % 10;

944 
dŸ
 = 0;

946 
vÆue
 = 0; 
n
--; 
löe
++) {

948 i‡(
poöt
 == 0) {

949  
NGX_ERROR
;

952 i‡(*
löe
 == '.') {

953 i‡(
dŸ
) {

954  
NGX_ERROR
;

957 
dŸ
 = 1;

961 i‡(*
löe
 < '0' || *line > '9') {

962  
NGX_ERROR
;

965 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

966  
NGX_ERROR
;

969 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

970 
poöt
 -
dŸ
;

973 
poöt
--) {

974 i‡(
vÆue
 > 
cutoff
) {

975  
NGX_ERROR
;

978 
vÆue
 = value * 10;

981  
vÆue
;

982 
	}
}

985 
ssize_t


986 
	$ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
)

988 
ssize_t
 
vÆue
, 
cutoff
, 
cuéim
;

990 i‡(
n
 == 0) {

991  
NGX_ERROR
;

994 
cutoff
 = 
NGX_MAX_SIZE_T_VALUE
 / 10;

995 
cuéim
 = 
NGX_MAX_SIZE_T_VALUE
 % 10;

997 
vÆue
 = 0; 
n
--; 
löe
++) {

998 i‡(*
löe
 < '0' || *line > '9') {

999  
NGX_ERROR
;

1002 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

1003  
NGX_ERROR
;

1006 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1009  
vÆue
;

1010 
	}
}

1013 
off_t


1014 
	$ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1016 
off_t
 
vÆue
, 
cutoff
, 
cuéim
;

1018 i‡(
n
 == 0) {

1019  
NGX_ERROR
;

1022 
cutoff
 = 
NGX_MAX_OFF_T_VALUE
 / 10;

1023 
cuéim
 = 
NGX_MAX_OFF_T_VALUE
 % 10;

1025 
vÆue
 = 0; 
n
--; 
löe
++) {

1026 i‡(*
löe
 < '0' || *line > '9') {

1027  
NGX_ERROR
;

1030 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

1031  
NGX_ERROR
;

1034 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1037  
vÆue
;

1038 
	}
}

1041 
time_t


1042 
	$ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1044 
time_t
 
vÆue
, 
cutoff
, 
cuéim
;

1046 i‡(
n
 == 0) {

1047  
NGX_ERROR
;

1050 
cutoff
 = 
NGX_MAX_TIME_T_VALUE
 / 10;

1051 
cuéim
 = 
NGX_MAX_TIME_T_VALUE
 % 10;

1053 
vÆue
 = 0; 
n
--; 
löe
++) {

1054 i‡(*
löe
 < '0' || *line > '9') {

1055  
NGX_ERROR
;

1058 i‡(
vÆue
 >
cutoff
 && (vÆuê> cutof‡|| *
löe
 - '0' > 
cuéim
)) {

1059  
NGX_ERROR
;

1062 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1065  
vÆue
;

1066 
	}
}

1069 
ngx_öt_t


1070 
	$ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1072 
u_ch¨
 
c
, 
ch
;

1073 
ngx_öt_t
 
vÆue
, 
cutoff
;

1075 i‡(
n
 == 0) {

1076  
NGX_ERROR
;

1079 
cutoff
 = 
NGX_MAX_INT_T_VALUE
 / 16;

1081 
vÆue
 = 0; 
n
--; 
löe
++) {

1082 i‡(
vÆue
 > 
cutoff
) {

1083  
NGX_ERROR
;

1086 
ch
 = *
löe
;

1088 i‡(
ch
 >= '0' && ch <= '9') {

1089 
vÆue
 = vÆuê* 16 + (
ch
 - '0');

1093 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1095 i‡(
c
 >= 'a' && c <= 'f') {

1096 
vÆue
 = vÆuê* 16 + (
c
 - 'a' + 10);

1100  
NGX_ERROR
;

1103  
vÆue
;

1104 
	}
}

1107 
u_ch¨
 *

1108 
	$ngx_hex_dump
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

1110 
u_ch¨
 
hex
[] = "0123456789abcdef";

1112 
Àn
--) {

1113 *
d°
++ = 
hex
[*
§c
 >> 4];

1114 *
d°
++ = 
hex
[*
§c
++ & 0xf];

1117  
d°
;

1118 
	}
}

1122 
	$ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1124 
u_ch¨
 
basis64
[] =

1127 
	`ngx_ícode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
, 1);

1128 
	}
}

1132 
	$ngx_ícode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1134 
u_ch¨
 
basis64
[] =

1137 
	`ngx_ícode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
, 0);

1138 
	}
}

1142 
	$ngx_ícode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
, c⁄° 
u_ch¨
 *
basis
,

1143 
ngx_uöt_t
 
∑ddög
)

1145 
u_ch¨
 *
d
, *
s
;

1146 
size_t
 
Àn
;

1148 
Àn
 = 
§c
->len;

1149 
s
 = 
§c
->
d©a
;

1150 
d
 = 
d°
->
d©a
;

1152 
Àn
 > 2) {

1153 *
d
++ = 
basis
[(
s
[0] >> 2) & 0x3f];

1154 *
d
++ = 
basis
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1155 *
d
++ = 
basis
[((
s
[1] & 0x0f) << 2) | (s[2] >> 6)];

1156 *
d
++ = 
basis
[
s
[2] & 0x3f];

1158 
s
 += 3;

1159 
Àn
 -= 3;

1162 i‡(
Àn
) {

1163 *
d
++ = 
basis
[(
s
[0] >> 2) & 0x3f];

1165 i‡(
Àn
 == 1) {

1166 *
d
++ = 
basis
[(
s
[0] & 3) << 4];

1167 i‡(
∑ddög
) {

1168 *
d
++ = '=';

1172 *
d
++ = 
basis
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1173 *
d
++ = 
basis
[(
s
[1] & 0x0f) << 2];

1176 i‡(
∑ddög
) {

1177 *
d
++ = '=';

1181 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1182 
	}
}

1185 
ngx_öt_t


1186 
	$ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1188 
u_ch¨
 
basis64
[] = {

1208  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1209 
	}
}

1212 
ngx_öt_t


1213 
	$ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1215 
u_ch¨
 
basis64
[] = {

1235  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1236 
	}
}

1239 
ngx_öt_t


1240 
	$ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
, c⁄° 
u_ch¨
 *
basis
)

1242 
size_t
 
Àn
;

1243 
u_ch¨
 *
d
, *
s
;

1245 
Àn
 = 0;Üí < 
§c
->len;Üen++) {

1246 i‡(
§c
->
d©a
[
Àn
] == '=') {

1250 i‡(
basis
[
§c
->
d©a
[
Àn
]] == 77) {

1251  
NGX_ERROR
;

1255 i‡(
Àn
 % 4 == 1) {

1256  
NGX_ERROR
;

1259 
s
 = 
§c
->
d©a
;

1260 
d
 = 
d°
->
d©a
;

1262 
Àn
 > 3) {

1263 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1264 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1265 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[2]] << 6 | basis[s[3]]);

1267 
s
 += 4;

1268 
Àn
 -= 4;

1271 i‡(
Àn
 > 1) {

1272 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1275 i‡(
Àn
 > 2) {

1276 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1279 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1281  
NGX_OK
;

1282 
	}
}

1294 
uöt32_t


1295 
	$ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
)

1297 
size_t
 
Àn
;

1298 
uöt32_t
 
u
, 
i
, 
vÆid
;

1300 
u
 = **
p
;

1302 i‡(
u
 >= 0xf0) {

1304 
u
 &= 0x07;

1305 
vÆid
 = 0xffff;

1306 
Àn
 = 3;

1308 } i‡(
u
 >= 0xe0) {

1310 
u
 &= 0x0f;

1311 
vÆid
 = 0x7ff;

1312 
Àn
 = 2;

1314 } i‡(
u
 >= 0xc2) {

1316 
u
 &= 0x1f;

1317 
vÆid
 = 0x7f;

1318 
Àn
 = 1;

1321 (*
p
)++;

1325 i‡(
n
 - 1 < 
Àn
) {

1329 (*
p
)++;

1331 
Àn
) {

1332 
i
 = *(*
p
)++;

1334 i‡(
i
 < 0x80) {

1338 
u
 = (u << 6Ë| (
i
 & 0x3f);

1340 
Àn
--;

1343 i‡(
u
 > 
vÆid
) {

1344  
u
;

1348 
	}
}

1351 
size_t


1352 
	$ngx_utf8_Àngth
(
u_ch¨
 *
p
, 
size_t
 
n
)

1354 
u_ch¨
 
c
, *
œ°
;

1355 
size_t
 
Àn
;

1357 
œ°
 = 
p
 + 
n
;

1359 
Àn
 = 0; 
p
 < 
œ°
;Üen++) {

1361 
c
 = *
p
;

1363 i‡(
c
 < 0x80) {

1364 
p
++;

1368 i‡(
	`ngx_utf8_decode
(&
p
, 
n
) > 0x10ffff) {

1370  
n
;

1374  
Àn
;

1375 
	}
}

1378 
u_ch¨
 *

1379 
	$ngx_utf8_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
)

1381 
u_ch¨
 
c
, *
√xt
;

1383 i‡(
n
 == 0) {

1384  
d°
;

1387 --
n
) {

1389 
c
 = *
§c
;

1390 *
d°
 = 
c
;

1392 i‡(
c
 < 0x80) {

1394 i‡(
c
 != '\0') {

1395 
d°
++;

1396 
§c
++;

1397 
Àn
--;

1402  
d°
;

1405 
√xt
 = 
§c
;

1407 i‡(
	`ngx_utf8_decode
(&
√xt
, 
Àn
) > 0x10ffff) {

1412 
§c
 < 
√xt
) {

1413 *
d°
++ = *
§c
++;

1414 
Àn
--;

1418 *
d°
 = '\0';

1420  
d°
;

1421 
	}
}

1424 
uöçå_t


1425 
	$ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1427 
ngx_uöt_t
 
n
;

1428 
uöt32_t
 *
esˇ≥
;

1429 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

1433 
uöt32_t
 
uri
[] = {

1453 
uöt32_t
 
¨gs
[] = {

1473 
uöt32_t
 
uri_comp⁄ít
[] = {

1493 
uöt32_t
 
html
[] = {

1513 
uöt32_t
 
ª‰esh
[] = {

1533 
uöt32_t
 
memˇched
[] = {

1553 
uöt32_t
 *
m≠
[] =

1554 { 
uri
, 
¨gs
, 
uri_comp⁄ít
, 
html
, 
ª‰esh
, 
memˇched
, memcached };

1557 
esˇ≥
 = 
m≠
[
ty≥
];

1559 i‡(
d°
 =
NULL
) {

1563 
n
 = 0;

1565 
size
) {

1566 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1567 
n
++;

1569 
§c
++;

1570 
size
--;

1573  (
uöçå_t
Ë
n
;

1576 
size
) {

1577 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1578 *
d°
++ = '%';

1579 *
d°
++ = 
hex
[*
§c
 >> 4];

1580 *
d°
++ = 
hex
[*
§c
 & 0xf];

1581 
§c
++;

1584 *
d°
++ = *
§c
++;

1586 
size
--;

1589  (
uöçå_t
Ë
d°
;

1590 
	}
}

1594 
	$ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1596 
u_ch¨
 *
d
, *
s
, 
ch
, 
c
, 
decoded
;

1598 
sw_usuÆ
 = 0,

1599 
sw_quŸed
,

1600 
sw_quŸed_£c⁄d


1601 } 
°©e
;

1603 
d
 = *
d°
;

1604 
s
 = *
§c
;

1606 
°©e
 = 0;

1607 
decoded
 = 0;

1609 
size
--) {

1611 
ch
 = *
s
++;

1613 
°©e
) {

1614 
sw_usuÆ
:

1615 i‡(
ch
 == '?'

1616 && (
ty≥
 & (
NGX_UNESCAPE_URI
|
NGX_UNESCAPE_REDIRECT
)))

1618 *
d
++ = 
ch
;

1619 
d⁄e
;

1622 i‡(
ch
 == '%') {

1623 
°©e
 = 
sw_quŸed
;

1627 *
d
++ = 
ch
;

1630 
sw_quŸed
:

1632 i‡(
ch
 >= '0' && ch <= '9') {

1633 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1634 
°©e
 = 
sw_quŸed_£c⁄d
;

1638 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1639 i‡(
c
 >= 'a' && c <= 'f') {

1640 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1641 
°©e
 = 
sw_quŸed_£c⁄d
;

1647 
°©e
 = 
sw_usuÆ
;

1649 *
d
++ = 
ch
;

1653 
sw_quŸed_£c⁄d
:

1655 
°©e
 = 
sw_usuÆ
;

1657 i‡(
ch
 >= '0' && ch <= '9') {

1658 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1660 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1661 i‡(
ch
 > '%' && ch < 0x7f) {

1662 *
d
++ = 
ch
;

1666 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1671 *
d
++ = 
ch
;

1676 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1677 i‡(
c
 >= 'a' && c <= 'f') {

1678 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1680 i‡(
ty≥
 & 
NGX_UNESCAPE_URI
) {

1681 i‡(
ch
 == '?') {

1682 *
d
++ = 
ch
;

1683 
d⁄e
;

1686 *
d
++ = 
ch
;

1690 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1691 i‡(
ch
 == '?') {

1692 *
d
++ = 
ch
;

1693 
d⁄e
;

1696 i‡(
ch
 > '%' && ch < 0x7f) {

1697 *
d
++ = 
ch
;

1701 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1705 *
d
++ = 
ch
;

1716 
d⁄e
:

1718 *
d°
 = 
d
;

1719 *
§c
 = 
s
;

1720 
	}
}

1723 
uöçå_t


1724 
	$ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

1726 
u_ch¨
 
ch
;

1727 
ngx_uöt_t
 
Àn
;

1729 i‡(
d°
 =
NULL
) {

1731 
Àn
 = 0;

1733 
size
) {

1734 *
§c
++) {

1737 
Àn
 += ("&lt;") - 2;

1741 
Àn
 += ("&gt;") - 2;

1745 
Àn
 += ("&amp;") - 2;

1749 
Àn
 += ("&quot;") - 2;

1755 
size
--;

1758  (
uöçå_t
Ë
Àn
;

1761 
size
) {

1762 
ch
 = *
§c
++;

1764 
ch
) {

1767 *
d°
++ = '&'; *dst++ = 'l'; *dst++ = 't'; *dst++ = ';';

1771 *
d°
++ = '&'; *dst++ = 'g'; *dst++ = 't'; *dst++ = ';';

1775 *
d°
++ = '&'; *dst++ = 'a'; *dst++ = 'm'; *dst++ = 'p';

1776 *
d°
++ = ';';

1780 *
d°
++ = '&'; *dst++ = 'q'; *dst++ = 'u'; *dst++ = 'o';

1781 *
d°
++ = 't'; *dst++ = ';';

1785 *
d°
++ = 
ch
;

1788 
size
--;

1791  (
uöçå_t
Ë
d°
;

1792 
	}
}

1795 
uöçå_t


1796 
	$ngx_esˇ≥_js⁄
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

1798 
u_ch¨
 
ch
;

1799 
ngx_uöt_t
 
Àn
;

1801 i‡(
d°
 =
NULL
) {

1802 
Àn
 = 0;

1804 
size
) {

1805 
ch
 = *
§c
++;

1807 i‡(
ch
 == '\\' || ch == '"') {

1808 
Àn
++;

1810 } i‡(
ch
 <= 0x1f) {

1811 
Àn
 += ("\\u001F") - 2;

1814 
size
--;

1817  (
uöçå_t
Ë
Àn
;

1820 
size
) {

1821 
ch
 = *
§c
++;

1823 i‡(
ch
 > 0x1f) {

1825 i‡(
ch
 == '\\' || ch == '"') {

1826 *
d°
++ = '\\';

1829 *
d°
++ = 
ch
;

1832 *
d°
++ = '\\'; *dst++ = 'u'; *dst++ = '0'; *dst++ = '0';

1833 *
d°
++ = '0' + (
ch
 >> 4);

1835 
ch
 &= 0xf;

1837 *
d°
++ = (
ch
 < 10) ? ('0' + ch) : ('A' + ch - 10);

1840 
size
--;

1843  (
uöçå_t
Ë
d°
;

1844 
	}
}

1848 
	$ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1849 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1851 
ngx_°r_node_t
 *
n
, *
t
;

1852 
ngx_rbåì_node_t
 **
p
;

1856 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1857 
t
 = (
ngx_°r_node_t
 *Ë
ãmp
;

1859 i‡(
node
->
key
 !
ãmp
->key) {

1861 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

1863 } i‡(
n
->
°r
.
Àn
 !
t
->str.len) {

1865 
p
 = (
n
->
°r
.
Àn
 < 
t
->°r.ÀnË? &
ãmp
->
À·
 : &ãmp->
right
;

1868 
p
 = (
	`ngx_memcmp
(
n
->
°r
.
d©a
, 
t
->°r.d©a,Ç->°r.
Àn
) < 0)

1869 ? &
ãmp
->
À·
 : &ãmp->
right
;

1872 i‡(*
p
 =
£¡öñ
) {

1876 
ãmp
 = *
p
;

1879 *
p
 = 
node
;

1880 
node
->
∑ª¡
 = 
ãmp
;

1881 
node
->
À·
 = 
£¡öñ
;

1882 
node
->
right
 = 
£¡öñ
;

1883 
	`ngx_rbt_ªd
(
node
);

1884 
	}
}

1887 
ngx_°r_node_t
 *

1888 
	$ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
vÆ
, 
uöt32_t
 
hash
)

1890 
ngx_öt_t
 
rc
;

1891 
ngx_°r_node_t
 *
n
;

1892 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1894 
node
 = 
rbåì
->
roŸ
;

1895 
£¡öñ
 = 
rbåì
->sentinel;

1897 
node
 !
£¡öñ
) {

1899 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1901 i‡(
hash
 !
node
->
key
) {

1902 
node
 = (
hash
 <Çode->
key
Ë?Çode->
À·
 :Çode->
right
;

1906 i‡(
vÆ
->
Àn
 !
n
->
°r
.len) {

1907 
node
 = (
vÆ
->
Àn
 < 
n
->
°r
.ÀnË?Çode->
À·
 :Çode->
right
;

1911 
rc
 = 
	`ngx_memcmp
(
vÆ
->
d©a
, 
n
->
°r
.d©a, vÆ->
Àn
);

1913 i‡(
rc
 < 0) {

1914 
node
 =Çode->
À·
;

1918 i‡(
rc
 > 0) {

1919 
node
 =Çode->
right
;

1923  
n
;

1926  
NULL
;

1927 
	}
}

1933 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

1934 
	$ngx_öt_t
 (*
cmp
)(const *, const *))

1936 
u_ch¨
 *
p1
, *
p2
, *
p
;

1938 
p
 = 
	`ngx_Æloc
(
size
, 
ngx_cy˛e
->
log
);

1939 i‡(
p
 =
NULL
) {

1943 
p1
 = (
u_ch¨
 *Ë
ba£
 + 
size
;

1944 
p1
 < (
u_ch¨
 *Ë
ba£
 + 
n
 * 
size
;

1945 
p1
 +
size
)

1947 
	`ngx_mem˝y
(
p
, 
p1
, 
size
);

1949 
p2
 = 
p1
;

1950 
p2
 > (
u_ch¨
 *Ë
ba£
 && 
	`cmp
’2 - 
size
, 
p
) > 0;

1951 
p2
 -
size
)

1953 
	`ngx_mem˝y
(
p2
,Ö2 - 
size
, size);

1956 
	`ngx_mem˝y
(
p2
, 
p
, 
size
);

1959 
	`ngx_‰ì
(
p
);

1960 
	}
}

1963 #i‡(
NGX_MEMCPY_LIMIT
)

1966 
	$ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

1968 i‡(
n
 > 
NGX_MEMCPY_LIMIT
) {

1969 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "mem˝y %uz byãs", 
n
);

1970 
	`ngx_debug_poöt
();

1973  
	`mem˝y
(
d°
, 
§c
, 
n
);

1974 
	}
}

	@src/core/ngx_string.h

8 #i‚de‡
_NGX_STRING_H_INCLUDED_


9 
	#_NGX_STRING_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
size_t
 
	mÀn
;

18 
u_ch¨
 *
	md©a
;

19 } 
	tngx_°r_t
;

23 
ngx_°r_t
 
	mkey
;

24 
ngx_°r_t
 
	mvÆue
;

25 } 
	tngx_keyvÆ_t
;

29 
	mÀn
:28;

31 
	mvÆid
:1;

32 
	mno_ˇchóbÀ
:1;

33 
	mnŸ_found
:1;

34 
	mesˇ≥
:1;

36 
u_ch¨
 *
	md©a
;

37 } 
	tngx_v¨übÀ_vÆue_t
;

40 
	#ngx_°rög
(
°r
Ë{ (°rË- 1, (
u_ch¨
 *Ë°∏}

	)

41 
	#ngx_nuŒ_°rög
 { 0, 
NULL
 }

	)

42 
	#ngx_°r_£t
(
°r
, 
ãxt
) \

43 (
°r
)->
Àn
 = (
ãxt
Ë- 1; (°r)->
d©a
 = (
u_ch¨
 *Ë
	)
text

44 
	#ngx_°r_nuŒ
(
°r
Ë(°r)->
Àn
 = 0; (°r)->
d©a
 = 
NULL


	)

47 
	#ngx_tﬁowî
(
c
Ë(
u_ch¨
Ë((¯>'A' && c <'Z'Ë? (¯| 0x20Ë: c)

	)

48 
	#ngx_touµî
(
c
Ë(
u_ch¨
Ë((¯>'a' && c <'z'Ë? (¯& ~0x20Ë: c)

	)

50 
ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

53 
	#ngx_°∫cmp
(
s1
, 
s2
, 
n
Ë
	`°∫cmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

57 
	#ngx_°rcmp
(
s1
, 
s2
Ë
	`°rcmp
((c⁄° *Ës1, (c⁄° *Ës2)

	)

60 
	#ngx_°r°r
(
s1
, 
s2
Ë
	`°r°r
((c⁄° *Ës1, (c⁄° *Ës2)

	)

61 
	#ngx_°æí
(
s
Ë
	`°æí
((c⁄° *Ës)

	)

63 
	#ngx_°rchr
(
s1
, 
c
Ë
	`°rchr
((c⁄° *Ës1, (Ëc)

	)

65 
ngx_ölöe
 
u_ch¨
 *

66 
	$ngx_°æchr
(
u_ch¨
 *
p
, u_ch¨ *
œ°
, u_ch¨ 
c
)

68 
p
 < 
œ°
) {

70 i‡(*
p
 =
c
) {

71  
p
;

74 
p
++;

77  
NULL
;

78 
	}
}

86 
	#ngx_memzîo
(
buf
, 
n
Ë(Ë
	`mem£t
(buf, 0,Ç)

	)

87 
	#ngx_mem£t
(
buf
, 
c
, 
n
Ë(Ë
	`mem£t
(buf, c,Ç)

	)

90 #i‡(
NGX_MEMCPY_LIMIT
)

92 *
ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

93 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`ngx_mem˝y
(d°, src,Ç)Ë+ (n))

	)

102 
	#ngx_mem˝y
(
d°
, 
§c
, 
n
Ë(Ë
	`mem˝y
(d°, src,Ç)

	)

103 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`mem˝y
(d°, src,Ç)Ë+ (n))

	)

108 #i‡–
__INTEL_COMPILER
 >= 800 )

115 
ngx_ölöe
 
u_ch¨
 *

116 
	$ngx_c›y
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

118 i‡(
Àn
 < 17) {

120 
Àn
) {

121 *
d°
++ = *
§c
++;

122 
Àn
--;

125  
d°
;

128  
	`ngx_˝ymem
(
d°
, 
§c
, 
Àn
);

130 
	}
}

134 
	#ngx_c›y
 
ngx_˝ymem


	)

139 
	#ngx_memmove
(
d°
, 
§c
, 
n
Ë(Ë
	`memmove
(d°, src,Ç)

	)

140 
	#ngx_movemem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`memmove
(d°, src,Ç)Ë+ (n))

	)

144 
	#ngx_memcmp
(
s1
, 
s2
, 
n
Ë
	`memcmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

147 
u_ch¨
 *
ngx_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

148 
u_ch¨
 *
ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
);

149 
u_ch¨
 * 
ngx_cde˛
 
ngx_•rötf
(u_ch¨ *
buf
, c⁄° *
fmt
, ...);

150 
u_ch¨
 * 
ngx_cde˛
 
ngx_¢¥ötf
(u_ch¨ *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...);

151 
u_ch¨
 * 
ngx_cde˛
 
ngx_¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
,

153 
u_ch¨
 *
ngx_v¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

154 
	#ngx_v¢¥ötf
(
buf
, 
max
, 
fmt
, 
¨gs
) \

155 
	`ngx_v¶¥ötf
(
buf
, bu‡+ (
max
), 
fmt
, 
¨gs
)

	)

157 
ngx_öt_t
 
ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

158 
ngx_öt_t
 
ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

160 
u_ch¨
 *
ngx_°∫°r
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

162 
u_ch¨
 *
ngx_°r°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

163 
u_ch¨
 *
ngx_°rˇ£°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

164 
u_ch¨
 *
ngx_°æˇ£°∫
(u_ch¨ *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
);

166 
ngx_öt_t
 
ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

167 
ngx_öt_t
 
ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

168 
ngx_öt_t
 
ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
);

169 
ngx_öt_t
 
ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

170 
ngx_öt_t
 
ngx_fûíame_cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

172 
ngx_öt_t
 
ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

173 
ngx_öt_t
 
ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
);

174 
ssize_t
 
ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
);

175 
off_t
 
ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
);

176 
time_t
 
ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
);

177 
ngx_öt_t
 
ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

179 
u_ch¨
 *
ngx_hex_dump
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
);

182 
	#ngx_ba£64_ícoded_Àngth
(
Àn
Ë((÷í + 2Ë/ 3Ë* 4)

	)

183 
	#ngx_ba£64_decoded_Àngth
(
Àn
Ë((÷í + 3Ë/ 4Ë* 3)

	)

185 
ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

186 
ngx_ícode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

187 
ngx_öt_t
 
ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

188 
ngx_öt_t
 
ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

190 
uöt32_t
 
ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
);

191 
size_t
 
ngx_utf8_Àngth
(
u_ch¨
 *
p
, size_à
n
);

192 
u_ch¨
 *
ngx_utf8_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
);

195 
	#NGX_ESCAPE_URI
 0

	)

196 
	#NGX_ESCAPE_ARGS
 1

	)

197 
	#NGX_ESCAPE_URI_COMPONENT
 2

	)

198 
	#NGX_ESCAPE_HTML
 3

	)

199 
	#NGX_ESCAPE_REFRESH
 4

	)

200 
	#NGX_ESCAPE_MEMCACHED
 5

	)

201 
	#NGX_ESCAPE_MAIL_AUTH
 6

	)

203 
	#NGX_UNESCAPE_URI
 1

	)

204 
	#NGX_UNESCAPE_REDIRECT
 2

	)

206 
uöçå_t
 
ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
,

207 
ngx_uöt_t
 
ty≥
);

208 
ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
);

209 
uöçå_t
 
ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

210 
uöçå_t
 
ngx_esˇ≥_js⁄
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

214 
ngx_rbåì_node_t
 
	mnode
;

215 
ngx_°r_t
 
	m°r
;

216 } 
	tngx_°r_node_t
;

219 
ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

220 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

221 
ngx_°r_node_t
 *
ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
«me
,

222 
uöt32_t
 
hash
);

225 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

226 
	$ngx_öt_t
 (*
cmp
)(const *, const *));

227 
	#ngx_qs‹t
 
qs‹t


	)

230 
	#ngx_vÆue_hñ≥r
(
n
Ë#n

	)

231 
	#ngx_vÆue
(
n
Ë
	`ngx_vÆue_hñ≥r
“)

	)

	@src/core/ngx_syslog.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_evít.h
>

12 
	#NGX_SYSLOG_MAX_STR
 \

13 
NGX_MAX_ERROR_STR
 + ("<255>Jan 01 00:00:00 ") - 1 \

14 + (
NGX_MAXHOSTNAMELEN
 - 1) + 1 \

15 + 32 + 2

	)

18 *
ngx_sy¶og_∑r£_¨gs
(
ngx_c⁄f_t
 *
cf
, 
ngx_sy¶og_≥î_t
 *
≥î
);

19 
ngx_öt_t
 
ngx_sy¶og_öô_≥î
(
ngx_sy¶og_≥î_t
 *
≥î
);

20 
ngx_sy¶og_˛ónup
(*
d©a
);

23 *
	gÁcûôõs
[] = {

27 
NULL


31 *
	g£vîôõs
[] = {

32 "emîg", "Æît", "¸ô", "îr‹", "w¨n", "nŸi˚", "öfo", "debug", 
NULL


35 
ngx_log_t
 
	gngx_sy¶og_dummy_log
;

36 
ngx_evít_t
 
	gngx_sy¶og_dummy_evít
;

40 
	$ngx_sy¶og_¥o˚ss_c⁄f
(
ngx_c⁄f_t
 *
cf
, 
ngx_sy¶og_≥î_t
 *
≥î
)

42 
≥î
->
poﬁ
 = 
cf
->pool;

43 
≥î
->
Ácûôy
 = 
NGX_CONF_UNSET_UINT
;

44 
≥î
->
£vîôy
 = 
NGX_CONF_UNSET_UINT
;

46 i‡(
	`ngx_sy¶og_∑r£_¨gs
(
cf
, 
≥î
Ë!
NGX_CONF_OK
) {

47  
NGX_CONF_ERROR
;

50 i‡(
≥î
->
£rvî
.
sockaddr
 =
NULL
) {

51 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

53  
NGX_CONF_ERROR
;

56 i‡(
≥î
->
Ácûôy
 =
NGX_CONF_UNSET_UINT
) {

57 
≥î
->
Ácûôy
 = 23;

60 i‡(
≥î
->
£vîôy
 =
NGX_CONF_UNSET_UINT
) {

61 
≥î
->
£vîôy
 = 6;

64 i‡(
≥î
->
èg
.
d©a
 =
NULL
) {

65 
	`ngx_°r_£t
(&
≥î
->
èg
, "nginx");

68 
≥î
->
c⁄n
.
fd
 = (
ngx_sockë_t
) -1;

70  
NGX_CONF_OK
;

71 
	}
}

75 
	$ngx_sy¶og_∑r£_¨gs
(
ngx_c⁄f_t
 *
cf
, 
ngx_sy¶og_≥î_t
 *
≥î
)

77 
u_ch¨
 *
p
, *
comma
, 
c
;

78 
size_t
 
Àn
;

79 
ngx_°r_t
 *
vÆue
;

80 
ngx_uæ_t
 
u
;

81 
ngx_uöt_t
 
i
;

83 
vÆue
 = 
cf
->
¨gs
->
ñts
;

85 
p
 = 
vÆue
[1].
d©a
 + ("syslog:") - 1;

88 
comma
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
p
, ',');

90 i‡(
comma
 !
NULL
) {

91 
Àn
 = 
comma
 - 
p
;

92 *
comma
 = '\0';

95 
Àn
 = 
vÆue
[1].
d©a
 + vÆue[1].À¿- 
p
;

98 i‡(
	`ngx_°∫cmp
(
p
, "server=", 7) == 0) {

100 i‡(
≥î
->
£rvî
.
sockaddr
 !
NULL
) {

101 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

103  
NGX_CONF_ERROR
;

106 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

108 
u
.
uæ
.
d©a
 = 
p
 + 7;

109 
u
.
uæ
.
Àn
 =Üen - 7;

110 
u
.
deÁu…_p‹t
 = 514;

112 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

113 i‡(
u
.
îr
) {

114 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

116 
u
.
îr
, &u.
uæ
);

119  
NGX_CONF_ERROR
;

122 
≥î
->
£rvî
 = 
u
.
addrs
[0];

124 } i‡(
	`ngx_°∫cmp
(
p
, "facility=", 9) == 0) {

126 i‡(
≥î
->
Ácûôy
 !
NGX_CONF_UNSET_UINT
) {

127 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

129  
NGX_CONF_ERROR
;

132 
i
 = 0; 
Ácûôõs
[i] !
NULL
; i++) {

134 i‡(
	`ngx_°rcmp
(
p
 + 9, 
Ácûôõs
[
i
]) == 0) {

135 
≥î
->
Ácûôy
 = 
i
;

136 
√xt
;

140 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

141 "unknow¿sy¶og facûôy \"%s\"", 
p
 + 9);

142  
NGX_CONF_ERROR
;

144 } i‡(
	`ngx_°∫cmp
(
p
, "severity=", 9) == 0) {

146 i‡(
≥î
->
£vîôy
 !
NGX_CONF_UNSET_UINT
) {

147 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

149  
NGX_CONF_ERROR
;

152 
i
 = 0; 
£vîôõs
[i] !
NULL
; i++) {

154 i‡(
	`ngx_°rcmp
(
p
 + 9, 
£vîôõs
[
i
]) == 0) {

155 
≥î
->
£vîôy
 = 
i
;

156 
√xt
;

160 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

161 "unknow¿sy¶og sevîôy \"%s\"", 
p
 + 9);

162  
NGX_CONF_ERROR
;

164 } i‡(
	`ngx_°∫cmp
(
p
, "tag=", 4) == 0) {

166 i‡(
≥î
->
èg
.
d©a
 !
NULL
) {

167 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

169  
NGX_CONF_ERROR
;

176 i‡(
Àn
 - 4 > 32) {

177 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

179  
NGX_CONF_ERROR
;

182 
i
 = 4; i < 
Àn
; i++) {

183 
c
 = 
	`ngx_tﬁowî
(
p
[
i
]);

185 i‡(
c
 < '0' || (c > '9' && c < 'a' && c != '_') || c > 'z') {

186 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

190  
NGX_CONF_ERROR
;

194 
≥î
->
èg
.
d©a
 = 
p
 + 4;

195 
≥î
->
èg
.
Àn
 =Üen - 4;

198 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

199 "unknow¿sy¶ogÖ¨amëî \"%s\"", 
p
);

200  
NGX_CONF_ERROR
;

203 
√xt
:

205 i‡(
comma
 =
NULL
) {

209 
p
 = 
comma
 + 1;

212  
NGX_CONF_OK
;

213 
	}
}

216 
u_ch¨
 *

217 
	$ngx_sy¶og_add_hódî
(
ngx_sy¶og_≥î_t
 *
≥î
, 
u_ch¨
 *
buf
)

219 
ngx_uöt_t
 
¥i
;

221 
¥i
 = 
≥î
->
Ácûôy
 * 8 +Öìr->
£vîôy
;

223  
	`ngx_•rötf
(
buf
, "<%ui>%V %V %V: ", 
¥i
, &
ngx_ˇched_sy¶og_time
,

224 &
ngx_cy˛e
->
ho°«me
, &
≥î
->
èg
);

225 
	}
}

229 
	$ngx_sy¶og_wrôî
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Àvñ
, 
u_ch¨
 *
buf
,

230 
size_t
 
Àn
)

232 
u_ch¨
 *
p
, 
msg
[
NGX_SYSLOG_MAX_STR
];

233 
ngx_uöt_t
 
hód_Àn
;

234 
ngx_sy¶og_≥î_t
 *
≥î
;

236 
≥î
 = 
log
->
wd©a
;

238 i‡(
≥î
->
busy
) {

242 
≥î
->
busy
 = 1;

243 
≥î
->
£vîôy
 = 
Àvñ
 - 1;

245 
p
 = 
	`ngx_sy¶og_add_hódî
(
≥î
, 
msg
);

246 
hód_Àn
 = 
p
 - 
msg
;

248 
Àn
 -
NGX_LINEFEED_SIZE
;

250 i‡(
Àn
 > 
NGX_SYSLOG_MAX_STR
 - 
hód_Àn
) {

251 
Àn
 = 
NGX_SYSLOG_MAX_STR
 - 
hód_Àn
;

254 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, "%s", 
buf
);

256 (Ë
	`ngx_sy¶og_£nd
(
≥î
, 
msg
, 
p
 - msg);

258 
≥î
->
busy
 = 0;

259 
	}
}

262 
ssize_t


263 
	$ngx_sy¶og_£nd
(
ngx_sy¶og_≥î_t
 *
≥î
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

265 
ssize_t
 
n
;

267 i‡(
≥î
->
c⁄n
.
fd
 =(
ngx_sockë_t
) -1) {

268 i‡(
	`ngx_sy¶og_öô_≥î
(
≥î
Ë!
NGX_OK
) {

269  
NGX_ERROR
;

274 
≥î
->
c⁄n
.
log
 = 
ngx_cy˛e
->log;

276 i‡(
ngx_£nd
) {

277 
n
 = 
	`ngx_£nd
(&
≥î
->
c⁄n
, 
buf
, 
Àn
);

281 
n
 = 
ngx_os_io
.
	`£nd
(&
≥î
->
c⁄n
, 
buf
, 
Àn
);

284 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

286 i‡(
n
 =
NGX_ERROR
 && 
≥î
->
£rvî
.
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

288 i‡(
	`ngx_˛o£_sockë
(
≥î
->
c⁄n
.
fd
) == -1) {

289 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

290 
ngx_˛o£_sockë_n
 " failed");

293 
≥î
->
c⁄n
.
fd
 = (
ngx_sockë_t
) -1;

298  
n
;

299 
	}
}

302 
ngx_öt_t


303 
	$ngx_sy¶og_öô_≥î
(
ngx_sy¶og_≥î_t
 *
≥î
)

305 
ngx_sockë_t
 
fd
;

306 
ngx_poﬁ_˛ónup_t
 *
˛n
;

308 
≥î
->
c⁄n
.
ªad
 = &
ngx_sy¶og_dummy_evít
;

309 
≥î
->
c⁄n
.
wrôe
 = &
ngx_sy¶og_dummy_evít
;

311 
ngx_sy¶og_dummy_evít
.
log
 = &
ngx_sy¶og_dummy_log
;

313 
fd
 = 
	`ngx_sockë
(
≥î
->
£rvî
.
sockaddr
->
ß_Ámûy
, 
SOCK_DGRAM
, 0);

314 i‡(
fd
 =(
ngx_sockë_t
) -1) {

315 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

316 
ngx_sockë_n
 " failed");

317  
NGX_ERROR
;

320 i‡(
	`ngx_n⁄blockög
(
fd
) == -1) {

321 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

322 
ngx_n⁄blockög_n
 " failed");

323 
Áûed
;

326 i‡(
	`c⁄√˘
(
fd
, 
≥î
->
£rvî
.
sockaddr
,Öìr->£rvî.
sockÀn
) == -1) {

327 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

329 
Áûed
;

332 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
≥î
->
poﬁ
, 0);

333 i‡(
˛n
 =
NULL
) {

334 
Áûed
;

337 
˛n
->
d©a
 = 
≥î
;

338 
˛n
->
h™dÀr
 = 
ngx_sy¶og_˛ónup
;

340 
≥î
->
c⁄n
.
fd
 = fd;

343 
≥î
->
c⁄n
.
wrôe
->
ªady
 = 1;

345  
NGX_OK
;

347 
Áûed
:

349 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

350 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

351 
ngx_˛o£_sockë_n
 " failed");

354  
NGX_ERROR
;

355 
	}
}

359 
	$ngx_sy¶og_˛ónup
(*
d©a
)

361 
ngx_sy¶og_≥î_t
 *
≥î
 = 
d©a
;

364 
≥î
->
busy
 = 1;

366 i‡(
≥î
->
c⁄n
.
fd
 =(
ngx_sockë_t
) -1) {

370 i‡(
	`ngx_˛o£_sockë
(
≥î
->
c⁄n
.
fd
) == -1) {

371 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_sockë_î∫o
,

372 
ngx_˛o£_sockë_n
 " failed");

374 
	}
}

	@src/core/ngx_syslog.h

7 #i‚de‡
_NGX_SYSLOG_H_INCLUDED_


8 
	#_NGX_SYSLOG_H_INCLUDED_


	)

12 
ngx_poﬁ_t
 *
	mpoﬁ
;

13 
ngx_uöt_t
 
	mÁcûôy
;

14 
ngx_uöt_t
 
	m£vîôy
;

15 
ngx_°r_t
 
	mèg
;

17 
ngx_addr_t
 
	m£rvî
;

18 
ngx_c⁄√˘i⁄_t
 
	mc⁄n
;

19 
ngx_uöt_t
 
	mbusy
;

20 } 
	tngx_sy¶og_≥î_t
;

23 *
ngx_sy¶og_¥o˚ss_c⁄f
(
ngx_c⁄f_t
 *
cf
, 
ngx_sy¶og_≥î_t
 *
≥î
);

24 
u_ch¨
 *
ngx_sy¶og_add_hódî
(
ngx_sy¶og_≥î_t
 *
≥î
, u_ch¨ *
buf
);

25 
ngx_sy¶og_wrôî
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Àvñ
, 
u_ch¨
 *
buf
,

26 
size_t
 
Àn
);

27 
ssize_t
 
ngx_sy¶og_£nd
(
ngx_sy¶og_≥î_t
 *
≥î
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

	@src/core/ngx_thread_pool.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_thªad_poﬁ.h
>

15 
ngx_¨øy_t
 
	mpoﬁs
;

16 } 
	tngx_thªad_poﬁ_c⁄f_t
;

20 
ngx_thªad_èsk_t
 *
	mfú°
;

21 
ngx_thªad_èsk_t
 **
	mœ°
;

22 } 
	tngx_thªad_poﬁ_queue_t
;

24 
	#ngx_thªad_poﬁ_queue_öô
(
q
) \

25 (
q
)->
fú°
 = 
NULL
; \

26 (
q
)->
œ°
 = &(q)->
fú°


	)

29 
	sngx_thªad_poﬁ_s
 {

30 
ngx_thªad_muãx_t
 
	mmtx
;

31 
ngx_thªad_poﬁ_queue_t
 
	mqueue
;

32 
ngx_öt_t
 
	mwaôög
;

33 
ngx_thªad_c⁄d_t
 
	mc⁄d
;

35 
ngx_log_t
 *
	mlog
;

37 
ngx_°r_t
 
	m«me
;

38 
ngx_uöt_t
 
	mthªads
;

39 
ngx_öt_t
 
	mmax_queue
;

41 
u_ch¨
 *
	mfûe
;

42 
ngx_uöt_t
 
	mlöe
;

46 
ngx_öt_t
 
ngx_thªad_poﬁ_öô
(
ngx_thªad_poﬁ_t
 *
ç
, 
ngx_log_t
 *
log
,

47 
ngx_poﬁ_t
 *
poﬁ
);

48 
ngx_thªad_poﬁ_de°roy
(
ngx_thªad_poﬁ_t
 *
ç
);

49 
ngx_thªad_poﬁ_exô_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
);

51 *
ngx_thªad_poﬁ_cy˛e
(*
d©a
);

52 
ngx_thªad_poﬁ_h™dÀr
(
ngx_evít_t
 *
ev
);

54 *
ngx_thªad_poﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_thªad_poﬁ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

57 *
ngx_thªad_poﬁ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

59 
ngx_öt_t
 
ngx_thªad_poﬁ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

60 
ngx_thªad_poﬁ_exô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

63 
ngx_comm™d_t
 
	gngx_thªad_poﬁ_comm™ds
[] = {

65 { 
ngx_°rög
("thread_pool"),

66 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE23
,

67 
ngx_thªad_poﬁ
,

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_c‹e_moduÀ_t
 
	gngx_thªad_poﬁ_moduÀ_˘x
 = {

77 
ngx_°rög
("thread_pool"),

78 
ngx_thªad_poﬁ_¸óã_c⁄f
,

79 
ngx_thªad_poﬁ_öô_c⁄f


83 
ngx_moduÀ_t
 
	gngx_thªad_poﬁ_moduÀ
 = {

84 
NGX_MODULE_V1
,

85 &
ngx_thªad_poﬁ_moduÀ_˘x
,

86 
ngx_thªad_poﬁ_comm™ds
,

87 
NGX_CORE_MODULE
,

88 
NULL
,

89 
NULL
,

90 
ngx_thªad_poﬁ_öô_w‹kî
,

91 
NULL
,

92 
NULL
,

93 
ngx_thªad_poﬁ_exô_w‹kî
,

94 
NULL
,

95 
NGX_MODULE_V1_PADDING


99 
ngx_°r_t
 
	gngx_thªad_poﬁ_deÁu…
 = 
ngx_°rög
("default");

101 
ngx_uöt_t
 
	gngx_thªad_poﬁ_èsk_id
;

102 
ngx_©omic_t
 
	gngx_thªad_poﬁ_d⁄e_lock
;

103 
ngx_thªad_poﬁ_queue_t
 
	gngx_thªad_poﬁ_d⁄e
;

106 
ngx_öt_t


107 
	$ngx_thªad_poﬁ_öô
(
ngx_thªad_poﬁ_t
 *
ç
, 
ngx_log_t
 *
log
, 
ngx_poﬁ_t
 *
poﬁ
)

109 
îr
;

110 
±hªad_t
 
tid
;

111 
ngx_uöt_t
 
n
;

112 
±hªad_©å_t
 
©å
;

114 i‡(
ngx_nŸify
 =
NULL
) {

115 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

117  
NGX_ERROR
;

120 
	`ngx_thªad_poﬁ_queue_öô
(&
ç
->
queue
);

122 i‡(
	`ngx_thªad_muãx_¸óã
(&
ç
->
mtx
, 
log
Ë!
NGX_OK
) {

123  
NGX_ERROR
;

126 i‡(
	`ngx_thªad_c⁄d_¸óã
(&
ç
->
c⁄d
, 
log
Ë!
NGX_OK
) {

127 (Ë
	`ngx_thªad_muãx_de°roy
(&
ç
->
mtx
, 
log
);

128  
NGX_ERROR
;

131 
ç
->
log
 =Üog;

133 
îr
 = 
	`±hªad_©å_öô
(&
©å
);

134 i‡(
îr
) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

137  
NGX_ERROR
;

141 
îr
 = 
	`±hªad_©å_£t°acksize
(&
©å
, 
PTHREAD_STACK_MIN
);

142 i‡(
îr
) {

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

145  
NGX_ERROR
;

149 
n
 = 0;Ç < 
ç
->
thªads
;Ç++) {

150 
îr
 = 
	`±hªad_¸óã
(&
tid
, &
©å
, 
ngx_thªad_poﬁ_cy˛e
, 
ç
);

151 i‡(
îr
) {

152 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

154  
NGX_ERROR
;

158 (Ë
	`±hªad_©å_de°roy
(&
©å
);

160  
NGX_OK
;

161 
	}
}

165 
	$ngx_thªad_poﬁ_de°roy
(
ngx_thªad_poﬁ_t
 *
ç
)

167 
ngx_uöt_t
 
n
;

168 
ngx_thªad_èsk_t
 
èsk
;

169 vﬁ©ûê
ngx_uöt_t
 
lock
;

171 
	`ngx_memzîo
(&
èsk
, (
ngx_thªad_èsk_t
));

173 
èsk
.
h™dÀr
 = 
ngx_thªad_poﬁ_exô_h™dÀr
;

174 
èsk
.
˘x
 = (*Ë&
lock
;

176 
n
 = 0;Ç < 
ç
->
thªads
;Ç++) {

177 
lock
 = 1;

179 i‡(
	`ngx_thªad_èsk_po°
(
ç
, &
èsk
Ë!
NGX_OK
) {

183 
lock
) {

184 
	`ngx_sched_yõld
();

187 
èsk
.
evít
.
a˘ive
 = 0;

190 (Ë
	`ngx_thªad_c⁄d_de°roy
(&
ç
->
c⁄d
,Åp->
log
);

192 (Ë
	`ngx_thªad_muãx_de°roy
(&
ç
->
mtx
,Åp->
log
);

193 
	}
}

197 
	$ngx_thªad_poﬁ_exô_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
)

199 
ngx_uöt_t
 *
lock
 = 
d©a
;

201 *
lock
 = 0;

203 
	`±hªad_exô
(0);

204 
	}
}

207 
ngx_thªad_èsk_t
 *

208 
	$ngx_thªad_èsk_Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

210 
ngx_thªad_èsk_t
 *
èsk
;

212 
èsk
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_thªad_èsk_t
Ë+ 
size
);

213 i‡(
èsk
 =
NULL
) {

214  
NULL
;

217 
èsk
->
˘x
 =Åask + 1;

219  
èsk
;

220 
	}
}

223 
ngx_öt_t


224 
	$ngx_thªad_èsk_po°
(
ngx_thªad_poﬁ_t
 *
ç
, 
ngx_thªad_èsk_t
 *
èsk
)

226 i‡(
èsk
->
evít
.
a˘ive
) {

227 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ç
->
log
, 0,

228 "èsk #%uòÆªadyá˘ive", 
èsk
->
id
);

229  
NGX_ERROR
;

232 i‡(
	`ngx_thªad_muãx_lock
(&
ç
->
mtx
,Åp->
log
Ë!
NGX_OK
) {

233  
NGX_ERROR
;

236 i‡(
ç
->
waôög
 >ç->
max_queue
) {

237 (Ë
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
);

239 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ç
->
log
, 0,

241 &
ç
->
«me
,Åp->
waôög
);

242  
NGX_ERROR
;

245 
èsk
->
evít
.
a˘ive
 = 1;

247 
èsk
->
id
 = 
ngx_thªad_poﬁ_èsk_id
++;

248 
èsk
->
√xt
 = 
NULL
;

250 i‡(
	`ngx_thªad_c⁄d_sig«l
(&
ç
->
c⁄d
,Åp->
log
Ë!
NGX_OK
) {

251 (Ë
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
);

252  
NGX_ERROR
;

255 *
ç
->
queue
.
œ°
 = 
èsk
;

256 
ç
->
queue
.
œ°
 = &
èsk
->
√xt
;

258 
ç
->
waôög
++;

260 (Ë
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
);

262 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ç
->
log
, 0,

264 
èsk
->
id
, &
ç
->
«me
);

266  
NGX_OK
;

267 
	}
}

271 
	$ngx_thªad_poﬁ_cy˛e
(*
d©a
)

273 
ngx_thªad_poﬁ_t
 *
ç
 = 
d©a
;

275 
îr
;

276 
sig£t_t
 
£t
;

277 
ngx_thªad_èsk_t
 *
èsk
;

280 
	`ngx_time_upd©e
();

283 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ç
->
log
, 0,

284 "thªad i¿poﬁ \"%V\" sèπed", &
ç
->
«me
);

286 
	`sigfûl£t
(&
£t
);

288 
	`sigdñ£t
(&
£t
, 
SIGILL
);

289 
	`sigdñ£t
(&
£t
, 
SIGFPE
);

290 
	`sigdñ£t
(&
£t
, 
SIGSEGV
);

291 
	`sigdñ£t
(&
£t
, 
SIGBUS
);

293 
îr
 = 
	`±hªad_sigmask
(
SIG_BLOCK
, &
£t
, 
NULL
);

294 i‡(
îr
) {

295 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ç
->
log
, 
îr
, "pthread_sigmask() failed");

296  
NULL
;

300 i‡(
	`ngx_thªad_muãx_lock
(&
ç
->
mtx
,Åp->
log
Ë!
NGX_OK
) {

301  
NULL
;

305 
ç
->
waôög
--;

307 
ç
->
queue
.
fú°
 =
NULL
) {

308 i‡(
	`ngx_thªad_c⁄d_waô
(&
ç
->
c⁄d
, &ç->
mtx
,Åp->
log
)

309 !
NGX_OK
)

311 (Ë
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
);

312  
NULL
;

316 
èsk
 = 
ç
->
queue
.
fú°
;

317 
ç
->
queue
.
fú°
 = 
èsk
->
√xt
;

319 i‡(
ç
->
queue
.
fú°
 =
NULL
) {

320 
ç
->
queue
.
œ°
 = &ç->queue.
fú°
;

323 i‡(
	`ngx_thªad_muãx_u∆ock
(&
ç
->
mtx
,Åp->
log
Ë!
NGX_OK
) {

324  
NULL
;

328 
	`ngx_time_upd©e
();

331 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ç
->
log
, 0,

333 
èsk
->
id
, &
ç
->
«me
);

335 
èsk
->
	`h™dÀr
—ask->
˘x
, 
ç
->
log
);

337 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ç
->
log
, 0,

339 
èsk
->
id
, &
ç
->
«me
);

341 
èsk
->
√xt
 = 
NULL
;

343 
	`ngx_•ölock
(&
ngx_thªad_poﬁ_d⁄e_lock
, 1, 2048);

345 *
ngx_thªad_poﬁ_d⁄e
.
œ°
 = 
èsk
;

346 
ngx_thªad_poﬁ_d⁄e
.
œ°
 = &
èsk
->
√xt
;

348 
	`ngx_u∆ock
(&
ngx_thªad_poﬁ_d⁄e_lock
);

350 (Ë
	`ngx_nŸify
(
ngx_thªad_poﬁ_h™dÀr
);

352 
	}
}

356 
	$ngx_thªad_poﬁ_h™dÀr
(
ngx_evít_t
 *
ev
)

358 
ngx_evít_t
 *
evít
;

359 
ngx_thªad_èsk_t
 *
èsk
;

361 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "threadÖool handler");

363 
	`ngx_•ölock
(&
ngx_thªad_poﬁ_d⁄e_lock
, 1, 2048);

365 
èsk
 = 
ngx_thªad_poﬁ_d⁄e
.
fú°
;

366 
ngx_thªad_poﬁ_d⁄e
.
fú°
 = 
NULL
;

367 
ngx_thªad_poﬁ_d⁄e
.
œ°
 = &ngx_thªad_poﬁ_d⁄e.
fú°
;

369 
	`ngx_u∆ock
(&
ngx_thªad_poﬁ_d⁄e_lock
);

371 
èsk
) {

372 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

373 "ru¿com∂ëi⁄ h™dÀ∏f‹Åask #%ui", 
èsk
->
id
);

375 
evít
 = &
èsk
->event;

376 
èsk
 =Åask->
√xt
;

378 
evít
->
com∂ëe
 = 1;

379 
evít
->
a˘ive
 = 0;

381 
evít
->
	`h™dÀr
(event);

383 
	}
}

387 
	$ngx_thªad_poﬁ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

389 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

391 
tcf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_thªad_poﬁ_c⁄f_t
));

392 i‡(
tcf
 =
NULL
) {

393  
NULL
;

396 i‡(
	`ngx_¨øy_öô
(&
tcf
->
poﬁs
, 
cy˛e
->
poﬁ
, 4,

397 (
ngx_thªad_poﬁ_t
 *))

398 !
NGX_OK
)

400  
NULL
;

403  
tcf
;

404 
	}
}

408 
	$ngx_thªad_poﬁ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

410 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
 = 
c⁄f
;

412 
ngx_uöt_t
 
i
;

413 
ngx_thªad_poﬁ_t
 **
çp
;

415 
çp
 = 
tcf
->
poﬁs
.
ñts
;

417 
i
 = 0; i < 
tcf
->
poﬁs
.
√…s
; i++) {

419 i‡(
çp
[
i
]->
thªads
) {

423 i‡(
çp
[
i
]->
«me
.
Àn
 =
ngx_thªad_poﬁ_deÁu…
.len

424 && 
	`ngx_°∫cmp
(
çp
[
i
]->
«me
.
d©a
, 
ngx_thªad_poﬁ_deÁu…
.data,

425 
ngx_thªad_poﬁ_deÁu…
.
Àn
)

428 
çp
[
i
]->
thªads
 = 32;

429 
çp
[
i
]->
max_queue
 = 65536;

433 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

435 &
çp
[
i
]->
«me
,Åµ[i]->
fûe
,Åµ[i]->
löe
);

437  
NGX_CONF_ERROR
;

440  
NGX_CONF_OK
;

441 
	}
}

445 
	$ngx_thªad_poﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

447 
ngx_°r_t
 *
vÆue
;

448 
ngx_uöt_t
 
i
;

449 
ngx_thªad_poﬁ_t
 *
ç
;

451 
vÆue
 = 
cf
->
¨gs
->
ñts
;

453 
ç
 = 
	`ngx_thªad_poﬁ_add
(
cf
, &
vÆue
[1]);

455 i‡(
ç
 =
NULL
) {

456  
NGX_CONF_ERROR
;

459 i‡(
ç
->
thªads
) {

460 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

461 "du∂iˇãÅhªadÖoﬁ \"%V\"", &
ç
->
«me
);

462  
NGX_CONF_ERROR
;

465 
ç
->
max_queue
 = 65536;

467 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

469 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "threads=", 8) == 0) {

471 
ç
->
thªads
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 8, vÆue[i].
Àn
 - 8);

473 i‡(
ç
->
thªads
 =(
ngx_uöt_t
Ë
NGX_ERROR
 ||Åp->threads == 0) {

474 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

475 "övÆidÅhªad†vÆuê\"%V\"", &
vÆue
[
i
]);

476  
NGX_CONF_ERROR
;

482 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_queue=", 10) == 0) {

484 
ç
->
max_queue
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 10, vÆue[i].
Àn
 - 10);

486 i‡(
ç
->
max_queue
 =
NGX_ERROR
) {

487 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

488 "övÆid max_queuêvÆuê\"%V\"", &
vÆue
[
i
]);

489  
NGX_CONF_ERROR
;

496 i‡(
ç
->
thªads
 == 0) {

497 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

499 &
cmd
->
«me
);

500  
NGX_CONF_ERROR
;

503  
NGX_CONF_OK
;

504 
	}
}

507 
ngx_thªad_poﬁ_t
 *

508 
	$ngx_thªad_poﬁ_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
)

510 
ngx_thªad_poﬁ_t
 *
ç
, **
çp
;

511 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

513 i‡(
«me
 =
NULL
) {

514 
«me
 = &
ngx_thªad_poﬁ_deÁu…
;

517 
ç
 = 
	`ngx_thªad_poﬁ_gë
(
cf
->
cy˛e
, 
«me
);

519 i‡(
ç
) {

520  
ç
;

523 
ç
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_thªad_poﬁ_t
));

524 i‡(
ç
 =
NULL
) {

525  
NULL
;

528 
ç
->
«me
 = *name;

529 
ç
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

530 
ç
->
löe
 = 
cf
->
c⁄f_fûe
->line;

532 
tcf
 = (
ngx_thªad_poﬁ_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
,

533 
ngx_thªad_poﬁ_moduÀ
);

535 
çp
 = 
	`ngx_¨øy_push
(&
tcf
->
poﬁs
);

536 i‡(
çp
 =
NULL
) {

537  
NULL
;

540 *
çp
 = 
ç
;

542  
ç
;

543 
	}
}

546 
ngx_thªad_poﬁ_t
 *

547 
	$ngx_thªad_poﬁ_gë
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

549 
ngx_uöt_t
 
i
;

550 
ngx_thªad_poﬁ_t
 **
çp
;

551 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

553 
tcf
 = (
ngx_thªad_poﬁ_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

554 
ngx_thªad_poﬁ_moduÀ
);

556 
çp
 = 
tcf
->
poﬁs
.
ñts
;

558 
i
 = 0; i < 
tcf
->
poﬁs
.
√…s
; i++) {

560 i‡(
çp
[
i
]->
«me
.
Àn
 ==Çame->len

561 && 
	`ngx_°∫cmp
(
çp
[
i
]->
«me
.
d©a
,Çame->d©a,Çame->
Àn
) == 0)

563  
çp
[
i
];

567  
NULL
;

568 
	}
}

571 
ngx_öt_t


572 
	$ngx_thªad_poﬁ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

574 
ngx_uöt_t
 
i
;

575 
ngx_thªad_poﬁ_t
 **
çp
;

576 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

578 i‡(
ngx_¥o˚ss
 !
NGX_PROCESS_WORKER


579 && 
ngx_¥o˚ss
 !
NGX_PROCESS_SINGLE
)

581  
NGX_OK
;

584 
tcf
 = (
ngx_thªad_poﬁ_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

585 
ngx_thªad_poﬁ_moduÀ
);

587 i‡(
tcf
 =
NULL
) {

588  
NGX_OK
;

591 
	`ngx_thªad_poﬁ_queue_öô
(&
ngx_thªad_poﬁ_d⁄e
);

593 
çp
 = 
tcf
->
poﬁs
.
ñts
;

595 
i
 = 0; i < 
tcf
->
poﬁs
.
√…s
; i++) {

596 i‡(
	`ngx_thªad_poﬁ_öô
(
çp
[
i
], 
cy˛e
->
log
, cy˛e->
poﬁ
Ë!
NGX_OK
) {

597  
NGX_ERROR
;

601  
NGX_OK
;

602 
	}
}

606 
	$ngx_thªad_poﬁ_exô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

608 
ngx_uöt_t
 
i
;

609 
ngx_thªad_poﬁ_t
 **
çp
;

610 
ngx_thªad_poﬁ_c⁄f_t
 *
tcf
;

612 i‡(
ngx_¥o˚ss
 !
NGX_PROCESS_WORKER


613 && 
ngx_¥o˚ss
 !
NGX_PROCESS_SINGLE
)

618 
tcf
 = (
ngx_thªad_poﬁ_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

619 
ngx_thªad_poﬁ_moduÀ
);

621 i‡(
tcf
 =
NULL
) {

625 
çp
 = 
tcf
->
poﬁs
.
ñts
;

627 
i
 = 0; i < 
tcf
->
poﬁs
.
√…s
; i++) {

628 
	`ngx_thªad_poﬁ_de°roy
(
çp
[
i
]);

630 
	}
}

	@src/core/ngx_thread_pool.h

8 #i‚de‡
_NGX_THREAD_POOL_H_INCLUDED_


9 
	#_NGX_THREAD_POOL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	sngx_thªad_èsk_s
 {

18 
ngx_thªad_èsk_t
 *
	m√xt
;

19 
ngx_uöt_t
 
	mid
;

20 *
	m˘x
;

21 (*
	mh™dÀr
)(*
	md©a
, 
ngx_log_t
 *
	mlog
);

22 
ngx_evít_t
 
	mevít
;

26 
ngx_thªad_poﬁ_s
 
	tngx_thªad_poﬁ_t
;

29 
ngx_thªad_poﬁ_t
 *
ngx_thªad_poﬁ_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

30 
ngx_thªad_poﬁ_t
 *
ngx_thªad_poﬁ_gë
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

32 
ngx_thªad_èsk_t
 *
ngx_thªad_èsk_Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

33 
ngx_öt_t
 
ngx_thªad_èsk_po°
(
ngx_thªad_poﬁ_t
 *
ç
, 
ngx_thªad_èsk_t
 *
èsk
);

	@src/core/ngx_times.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

21 
	#NGX_TIME_SLOTS
 64

	)

23 
ngx_uöt_t
 
	g¶Ÿ
;

24 
ngx_©omic_t
 
	gngx_time_lock
;

26 vﬁ©ûê
ngx_m£c_t
 
	gngx_cuºít_m£c
;

27 vﬁ©ûê
ngx_time_t
 *
	gngx_ˇched_time
;

28 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_îr_log_time
;

29 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_time
;

30 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_time
;

31 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_iso8601
;

32 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_sy¶og_time
;

34 #i‡!(
NGX_WIN32
)

42 
ngx_öt_t
 
	gˇched_gmtoff
;

45 
ngx_time_t
 
	gˇched_time
[
NGX_TIME_SLOTS
];

46 
u_ch¨
 
	gˇched_îr_log_time
[
NGX_TIME_SLOTS
]

48 
u_ch¨
 
	gˇched_hâp_time
[
NGX_TIME_SLOTS
]

50 
u_ch¨
 
	gˇched_hâp_log_time
[
NGX_TIME_SLOTS
]

52 
u_ch¨
 
	gˇched_hâp_log_iso8601
[
NGX_TIME_SLOTS
]

54 
u_ch¨
 
	gˇched_sy¶og_time
[
NGX_TIME_SLOTS
]

58 *
	gwìk
[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

59 *
	gm⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

63 
	$ngx_time_öô
()

65 
ngx_ˇched_îr_log_time
.
Àn
 = ("1970/09/28 12:00:00") - 1;

66 
ngx_ˇched_hâp_time
.
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT") - 1;

67 
ngx_ˇched_hâp_log_time
.
Àn
 = ("28/Sep/1970:12:00:00 +0600") - 1;

68 
ngx_ˇched_hâp_log_iso8601
.
Àn
 = ("1970-09-28T12:00:00+06:00") - 1;

69 
ngx_ˇched_sy¶og_time
.
Àn
 = ("Sep 28 12:00:00") - 1;

71 
ngx_ˇched_time
 = &
ˇched_time
[0];

73 
	`ngx_time_upd©e
();

74 
	}
}

78 
	$ngx_time_upd©e
()

80 
u_ch¨
 *
p0
, *
p1
, *
p2
, *
p3
, *
p4
;

81 
ngx_tm_t
 
tm
, 
gmt
;

82 
time_t
 
£c
;

83 
ngx_uöt_t
 
m£c
;

84 
ngx_time_t
 *
ç
;

85 
timevÆ
 
tv
;

87 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

91 
	`ngx_gëtimeofday
(&
tv
);

93 
£c
 = 
tv
.
tv_£c
;

94 
m£c
 = 
tv
.
tv_u£c
 / 1000;

96 
ngx_cuºít_m£c
 = (
ngx_m£c_t
Ë
£c
 * 1000 + 
m£c
;

98 
ç
 = &
ˇched_time
[
¶Ÿ
];

100 i‡(
ç
->
£c
 == sec) {

101 
ç
->
m£c
 = msec;

102 
	`ngx_u∆ock
(&
ngx_time_lock
);

106 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

107 
¶Ÿ
 = 0;

109 
¶Ÿ
++;

112 
ç
 = &
ˇched_time
[
¶Ÿ
];

114 
ç
->
£c
 = sec;

115 
ç
->
m£c
 = msec;

117 
	`ngx_gmtime
(
£c
, &
gmt
);

120 
p0
 = &
ˇched_hâp_time
[
¶Ÿ
][0];

122 (Ë
	`ngx_•rötf
(
p0
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

123 
wìk
[
gmt
.
ngx_tm_wday
], gmt.
ngx_tm_mday
,

124 
m⁄ths
[
gmt
.
ngx_tm_m⁄
 - 1], gmt.
ngx_tm_yór
,

125 
gmt
.
ngx_tm_hour
, gmt.
ngx_tm_mö
, gmt.
ngx_tm_£c
);

127 #i‡(
NGX_HAVE_GETTIMEZONE
)

129 
ç
->
gmtoff
 = 
	`ngx_gëtimez⁄e
();

130 
	`ngx_gmtime
(
£c
 + 
ç
->
gmtoff
 * 60, &
tm
);

132 #ñi‡(
NGX_HAVE_GMTOFF
)

134 
	`ngx_loˇ…ime
(
£c
, &
tm
);

135 
ˇched_gmtoff
 = (
ngx_öt_t
Ë(
tm
.
ngx_tm_gmtoff
 / 60);

136 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

140 
	`ngx_loˇ…ime
(
£c
, &
tm
);

141 
ˇched_gmtoff
 = 
	`ngx_timez⁄e
(
tm
.
ngx_tm_isd°
);

142 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

147 
p1
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

149 (Ë
	`ngx_•rötf
(
p1
, "%4d/%02d/%02d %02d:%02d:%02d",

150 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

151 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

152 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

155 
p2
 = &
ˇched_hâp_log_time
[
¶Ÿ
][0];

157 (Ë
	`ngx_•rötf
(
p2
, "%02d/%s/%d:%02d:%02d:%02d %c%02d%02d",

158 
tm
.
ngx_tm_mday
, 
m⁄ths
[tm.
ngx_tm_m⁄
 - 1],

159 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_hour
,

160 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

161 
ç
->
gmtoff
 < 0 ? '-' : '+',

162 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

164 
p3
 = &
ˇched_hâp_log_iso8601
[
¶Ÿ
][0];

166 (Ë
	`ngx_•rötf
(
p3
, "%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d",

167 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

168 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

169 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

170 
ç
->
gmtoff
 < 0 ? '-' : '+',

171 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

173 
p4
 = &
ˇched_sy¶og_time
[
¶Ÿ
][0];

175 (Ë
	`ngx_•rötf
(
p4
, "%s %2d %02d:%02d:%02d",

176 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],Åm.
ngx_tm_mday
,

177 
tm
.
ngx_tm_hour
,Åm.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

179 
	`ngx_mem‹y_b¨rõr
();

181 
ngx_ˇched_time
 = 
ç
;

182 
ngx_ˇched_hâp_time
.
d©a
 = 
p0
;

183 
ngx_ˇched_îr_log_time
.
d©a
 = 
p1
;

184 
ngx_ˇched_hâp_log_time
.
d©a
 = 
p2
;

185 
ngx_ˇched_hâp_log_iso8601
.
d©a
 = 
p3
;

186 
ngx_ˇched_sy¶og_time
.
d©a
 = 
p4
;

188 
	`ngx_u∆ock
(&
ngx_time_lock
);

189 
	}
}

192 #i‡!(
NGX_WIN32
)

195 
	$ngx_time_sigß„_upd©e
()

197 
u_ch¨
 *
p
, *
p2
;

198 
ngx_tm_t
 
tm
;

199 
time_t
 
£c
;

200 
ngx_time_t
 *
ç
;

201 
timevÆ
 
tv
;

203 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

207 
	`ngx_gëtimeofday
(&
tv
);

209 
£c
 = 
tv
.
tv_£c
;

211 
ç
 = &
ˇched_time
[
¶Ÿ
];

213 i‡(
ç
->
£c
 == sec) {

214 
	`ngx_u∆ock
(&
ngx_time_lock
);

218 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

219 
¶Ÿ
 = 0;

221 
¶Ÿ
++;

224 
ç
 = &
ˇched_time
[
¶Ÿ
];

226 
ç
->
£c
 = 0;

228 
	`ngx_gmtime
(
£c
 + 
ˇched_gmtoff
 * 60, &
tm
);

230 
p
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

232 (Ë
	`ngx_•rötf
(
p
, "%4d/%02d/%02d %02d:%02d:%02d",

233 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

234 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

235 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

237 
p2
 = &
ˇched_sy¶og_time
[
¶Ÿ
][0];

239 (Ë
	`ngx_•rötf
(
p2
, "%s %2d %02d:%02d:%02d",

240 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],Åm.
ngx_tm_mday
,

241 
tm
.
ngx_tm_hour
,Åm.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

243 
	`ngx_mem‹y_b¨rõr
();

245 
ngx_ˇched_îr_log_time
.
d©a
 = 
p
;

246 
ngx_ˇched_sy¶og_time
.
d©a
 = 
p2
;

248 
	`ngx_u∆ock
(&
ngx_time_lock
);

249 
	}
}

254 
u_ch¨
 *

255 
	$ngx_hâp_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

257 
ngx_tm_t
 
tm
;

259 
	`ngx_gmtime
(
t
, &
tm
);

261  
	`ngx_•rötf
(
buf
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

262 
wìk
[
tm
.
ngx_tm_wday
],

263 
tm
.
ngx_tm_mday
,

264 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

265 
tm
.
ngx_tm_yór
,

266 
tm
.
ngx_tm_hour
,

267 
tm
.
ngx_tm_mö
,

268 
tm
.
ngx_tm_£c
);

269 
	}
}

272 
u_ch¨
 *

273 
	$ngx_hâp_cookõ_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

275 
ngx_tm_t
 
tm
;

277 
	`ngx_gmtime
(
t
, &
tm
);

284  
	`ngx_•rötf
(
buf
,

285 (
tm
.
ngx_tm_yór
 > 2037) ?

288 
wìk
[
tm
.
ngx_tm_wday
],

289 
tm
.
ngx_tm_mday
,

290 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

291 (
tm
.
ngx_tm_yór
 > 2037) ?Åm.ngx_tm_year:

292 
tm
.
ngx_tm_yór
 % 100,

293 
tm
.
ngx_tm_hour
,

294 
tm
.
ngx_tm_mö
,

295 
tm
.
ngx_tm_£c
);

296 
	}
}

300 
	$ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
)

302 
ngx_öt_t
 
yday
;

303 
ngx_uöt_t
 
n
, 
£c
, 
mö
, 
hour
, 
mday
, 
m⁄
, 
yór
, 
wday
, 
days
, 
À≠
;

307 
n
 = (
ngx_uöt_t
Ë
t
;

309 
days
 = 
n
 / 86400;

313 
wday
 = (4 + 
days
) % 7;

315 
n
 %= 86400;

316 
hour
 = 
n
 / 3600;

317 
n
 %= 3600;

318 
mö
 = 
n
 / 60;

319 
£c
 = 
n
 % 60;

327 
days
 = days - (31 + 28) + 719527;

336 
yór
 = (
days
 + 2) * 400 / (365 * 400 + 100 - 4 + 1);

338 
yday
 = 
days
 - (365 * 
yór
 + year / 4 - year / 100 + year / 400);

340 i‡(
yday
 < 0) {

341 
À≠
 = (
yór
 % 4 == 0) && (year % 100 || (year % 400 == 0));

342 
yday
 = 365 + 
À≠
 + yday;

343 
yór
--;

354 
m⁄
 = (
yday
 + 31) * 10 / 306;

358 
mday
 = 
yday
 - (367 * 
m⁄
 / 12 - 30) + 1;

360 i‡(
yday
 >= 306) {

362 
yór
++;

363 
m⁄
 -= 10;

373 
m⁄
 += 2;

382 
ç
->
ngx_tm_£c
 = (
ngx_tm_£c_t
Ë
£c
;

383 
ç
->
ngx_tm_mö
 = (
ngx_tm_mö_t
Ë
mö
;

384 
ç
->
ngx_tm_hour
 = (
ngx_tm_hour_t
Ë
hour
;

385 
ç
->
ngx_tm_mday
 = (
ngx_tm_mday_t
Ë
mday
;

386 
ç
->
ngx_tm_m⁄
 = (
ngx_tm_m⁄_t
Ë
m⁄
;

387 
ç
->
ngx_tm_yór
 = (
ngx_tm_yór_t
Ë
yór
;

388 
ç
->
ngx_tm_wday
 = (
ngx_tm_wday_t
Ë
wday
;

389 
	}
}

392 
time_t


393 
	$ngx_√xt_time
(
time_t
 
whí
)

395 
time_t
 
now
, 
√xt
;

396 
tm
Åm;

398 
now
 = 
	`ngx_time
();

400 
	`ngx_libc_loˇ…ime
(
now
, &
tm
);

402 
tm
.
tm_hour
 = (Ë(
whí
 / 3600);

403 
whí
 %= 3600;

404 
tm
.
tm_mö
 = (Ë(
whí
 / 60);

405 
tm
.
tm_£c
 = (Ë(
whí
 % 60);

407 
√xt
 = 
	`mktime
(&
tm
);

409 i‡(
√xt
 == -1) {

413 i‡(
√xt
 - 
now
 > 0) {

414  
√xt
;

417 
tm
.
tm_mday
++;

421 
√xt
 = 
	`mktime
(&
tm
);

423 i‡(
√xt
 != -1) {

424  
√xt
;

428 
	}
}

	@src/core/ngx_times.h

8 #i‚de‡
_NGX_TIMES_H_INCLUDED_


9 
	#_NGX_TIMES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
time_t
 
	m£c
;

18 
ngx_uöt_t
 
	mm£c
;

19 
ngx_öt_t
 
	mgmtoff
;

20 } 
	tngx_time_t
;

23 
ngx_time_öô
();

24 
ngx_time_upd©e
();

25 
ngx_time_sigß„_upd©e
();

26 
u_ch¨
 *
ngx_hâp_time
(u_ch¨ *
buf
, 
time_t
 
t
);

27 
u_ch¨
 *
ngx_hâp_cookõ_time
(u_ch¨ *
buf
, 
time_t
 
t
);

28 
ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
);

30 
time_t
 
ngx_√xt_time
—ime_à
whí
);

31 
	#ngx_√xt_time_n
 "mktime()"

	)

34 vﬁ©ûê
ngx_time_t
 *
ngx_ˇched_time
;

36 
	#ngx_time
(Ë
ngx_ˇched_time
->
£c


	)

37 
	#ngx_timeofday
(Ë(
ngx_time_t
 *Ë
ngx_ˇched_time


	)

39 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_îr_log_time
;

40 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_time
;

41 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_time
;

42 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_iso8601
;

43 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_sy¶og_time
;

49 vﬁ©ûê
ngx_m£c_t
 
ngx_cuºít_m£c
;

	@src/event/modules/ngx_aio_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evít_moduÀ_t
 
ngx_kqueue_moduÀ_˘x
;

16 
ngx_öt_t
 
ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

17 
ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

18 
ngx_öt_t
 
ngx_aio_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

19 
ngx_uöt_t
 
Êags
);

20 
ngx_öt_t
 
ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

21 
ngx_uöt_t
 
Êags
);

22 
ngx_öt_t
 
ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
);

23 
ngx_öt_t
 
ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

24 
ngx_uöt_t
 
Êags
);

27 
ngx_os_io_t
 
	gngx_os_aio
 = {

28 
ngx_aio_ªad
,

29 
ngx_aio_ªad_chaö
,

30 
NULL
,

31 
ngx_aio_wrôe
,

32 
ngx_aio_wrôe_chaö
,

37 
ngx_°r_t
 
	gaio_«me
 = 
ngx_°rög
("aio");

39 
ngx_evít_moduÀ_t
 
	gngx_aio_moduÀ_˘x
 = {

40 &
aio_«me
,

41 
NULL
,

42 
NULL
,

45 
ngx_aio_add_evít
,

46 
ngx_aio_dñ_evít
,

47 
NULL
,

48 
NULL
,

49 
NULL
,

50 
ngx_aio_dñ_c⁄√˘i⁄
,

51 
NULL
,

52 
ngx_aio_¥o˚ss_evíts
,

53 
ngx_aio_öô
,

54 
ngx_aio_d⁄e


59 
ngx_moduÀ_t
 
	gngx_aio_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_aio_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 #i‡(
NGX_HAVE_KQUEUE
)

77 
ngx_öt_t


78 
	$ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

80 i‡(
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`öô
(
cy˛e
, 
timî
Ë=
NGX_ERROR
) {

81  
NGX_ERROR
;

84 
ngx_io
 = 
ngx_os_aio
;

86 
ngx_evít_Êags
 = 
NGX_USE_AIO_EVENT
;

87 
ngx_evít_a˘i⁄s
 = 
ngx_aio_moduÀ_˘x
.
a˘i⁄s
;

90  
NGX_OK
;

91 
	}
}

95 
	$ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

97 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`d⁄e
(
cy˛e
);

98 
	}
}

103 
ngx_öt_t


104 
	$ngx_aio_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

106  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`add
(
ev
, 
evít
, 
Êags
);

107 
	}
}

110 
ngx_öt_t


111 
	$ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

113  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`dñ
(
ev
, 
evít
, 
Êags
);

114 
	}
}

117 
ngx_öt_t


118 
	$ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

120 
rc
;

122 i‡(
c
->
ªad
->
a˘ive
 =0 && c->
wrôe
->active == 0) {

123  
NGX_OK
;

126 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

127  
NGX_OK
;

130 
rc
 = 
	`aio_ˇn˚l
(
c
->
fd
, 
NULL
);

132 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ˇn˚l: %d", 
rc
);

134 i‡(
rc
 =
AIO_CANCELED
) {

135 
c
->
ªad
->
a˘ive
 = 0;

136 
c
->
wrôe
->
a˘ive
 = 0;

137  
NGX_OK
;

140 i‡(
rc
 =
AIO_ALLDONE
) {

141 
c
->
ªad
->
a˘ive
 = 0;

142 
c
->
wrôe
->
a˘ive
 = 0;

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

145  
NGX_OK
;

148 i‡(
rc
 == -1) {

149 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

151  
NGX_ERROR
;

154 i‡(
rc
 =
AIO_NOTCANCELED
) {

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

158  
NGX_ERROR
;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

168  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

169 
	}
}

	@src/event/modules/ngx_devpoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_DEVPOLL
)

17 
	#POLLREMOVE
 0x0800

	)

18 
	#DP_POLL
 0xD001

	)

19 
	#DP_ISPOLLED
 0xD002

	)

21 
	sdvpﬁl
 {

22 
pﬁlfd
 *
	mdp_fds
;

23 
	mdp_nfds
;

24 
	mdp_timeout
;

31 
ngx_uöt_t
 
	mch™ges
;

32 
ngx_uöt_t
 
	mevíts
;

33 } 
	tngx_devpﬁl_c⁄f_t
;

36 
ngx_öt_t
 
ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

37 
ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_öt_t
 
ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

39 
ngx_uöt_t
 
Êags
);

40 
ngx_öt_t
 
ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

41 
ngx_uöt_t
 
Êags
);

42 
ngx_öt_t
 
ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

43 
ngx_uöt_t
 
Êags
);

44 
ngx_öt_t
 
ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

45 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

47 *
ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

48 *
ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

50 
	gdp
 = -1;

51 
pﬁlfd
 *
	gch™ge_li°
, *
	gevít_li°
;

52 
ngx_uöt_t
 
	gnch™ges
, 
	gmax_ch™ges
, 
	g√víts
;

54 
ngx_evít_t
 **
	gch™ge_ödex
;

57 
ngx_°r_t
 
	gdevpﬁl_«me
 = 
ngx_°rög
("/dev/poll");

59 
ngx_comm™d_t
 
	gngx_devpﬁl_comm™ds
[] = {

61 { 
ngx_°rög
("devpoll_changes"),

62 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

65 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
ch™ges
),

66 
NULL
 },

68 { 
ngx_°rög
("devpoll_events"),

69 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

72 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
evíts
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_evít_moduÀ_t
 
	gngx_devpﬁl_moduÀ_˘x
 = {

80 &
devpﬁl_«me
,

81 
ngx_devpﬁl_¸óã_c⁄f
,

82 
ngx_devpﬁl_öô_c⁄f
,

85 
ngx_devpﬁl_add_evít
,

86 
ngx_devpﬁl_dñ_evít
,

87 
ngx_devpﬁl_add_evít
,

88 
ngx_devpﬁl_dñ_evít
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
ngx_devpﬁl_¥o˚ss_evíts
,

93 
ngx_devpﬁl_öô
,

94 
ngx_devpﬁl_d⁄e
,

99 
ngx_moduÀ_t
 
	gngx_devpﬁl_moduÀ
 = {

100 
NGX_MODULE_V1
,

101 &
ngx_devpﬁl_moduÀ_˘x
,

102 
ngx_devpﬁl_comm™ds
,

103 
NGX_EVENT_MODULE
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NGX_MODULE_V1_PADDING


115 
ngx_öt_t


116 
	$ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

118 
size_t
 
n
;

119 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

121 
dpcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_devpﬁl_moduÀ
);

123 i‡(
dp
 == -1) {

124 
dp
 = 
	`›í
("/dev/pﬁl", 
O_RDWR
);

126 i‡(
dp
 == -1) {

127 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

129  
NGX_ERROR
;

133 i‡(
max_ch™ges
 < 
dpcf
->
ch™ges
) {

134 i‡(
nch™ges
) {

135 
n
 = 
nch™ges
 * (
pﬁlfd
);

136 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139  
NGX_ERROR
;

142 
nch™ges
 = 0;

145 i‡(
ch™ge_li°
) {

146 
	`ngx_‰ì
(
ch™ge_li°
);

149 
ch™ge_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
ch™ges
,

150 
cy˛e
->
log
);

151 i‡(
ch™ge_li°
 =
NULL
) {

152  
NGX_ERROR
;

155 i‡(
ch™ge_ödex
) {

156 
	`ngx_‰ì
(
ch™ge_ödex
);

159 
ch™ge_ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 
dpcf
->
ch™ges
,

160 
cy˛e
->
log
);

161 i‡(
ch™ge_ödex
 =
NULL
) {

162  
NGX_ERROR
;

166 
max_ch™ges
 = 
dpcf
->
ch™ges
;

168 i‡(
√víts
 < 
dpcf
->
evíts
) {

169 i‡(
evít_li°
) {

170 
	`ngx_‰ì
(
evít_li°
);

173 
evít_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
evíts
,

174 
cy˛e
->
log
);

175 i‡(
evít_li°
 =
NULL
) {

176  
NGX_ERROR
;

180 
√víts
 = 
dpcf
->
evíts
;

182 
ngx_io
 = 
ngx_os_io
;

184 
ngx_evít_a˘i⁄s
 = 
ngx_devpﬁl_moduÀ_˘x
.
a˘i⁄s
;

186 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

188  
NGX_OK
;

189 
	}
}

193 
	$ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

195 i‡(
	`˛o£
(
dp
) == -1) {

196 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

200 
dp
 = -1;

202 
	`ngx_‰ì
(
ch™ge_li°
);

203 
	`ngx_‰ì
(
evít_li°
);

204 
	`ngx_‰ì
(
ch™ge_ödex
);

206 
ch™ge_li°
 = 
NULL
;

207 
evít_li°
 = 
NULL
;

208 
ch™ge_ödex
 = 
NULL
;

209 
max_ch™ges
 = 0;

210 
nch™ges
 = 0;

211 
√víts
 = 0;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

218 #i‡(
NGX_DEBUG
)

219 
ngx_c⁄√˘i⁄_t
 *
c
;

222 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

223 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

226 #i‡(
NGX_DEBUG
)

227 
c
 = 
ev
->
d©a
;

228 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

229 "devpﬁ»addÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

232 
ev
->
a˘ive
 = 1;

234  
	`ngx_devpﬁl_£t_evít
(
ev
, 
evít
, 0);

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

241 
ngx_evít_t
 *
e
;

242 
ngx_c⁄√˘i⁄_t
 *
c
;

244 
c
 = 
ev
->
d©a
;

246 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

247 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

250 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

251 "devpﬁ»dñÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

253 i‡(
	`ngx_devpﬁl_£t_evít
(
ev
, 
POLLREMOVE
, 
Êags
Ë=
NGX_ERROR
) {

254  
NGX_ERROR
;

257 
ev
->
a˘ive
 = 0;

259 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

260 
e
 = (
evít
 =
POLLIN
Ë? 
c
->
wrôe
 : c->
ªad
;

262 i‡(
e
) {

263 
e
->
a˘ive
 = 0;

266  
NGX_OK
;

271 i‡(
evít
 =
POLLIN
) {

272 
e
 = 
c
->
wrôe
;

273 
evít
 = 
POLLOUT
;

276 
e
 = 
c
->
ªad
;

277 
evít
 = 
POLLIN
;

280 i‡(
e
 &&É->
a˘ive
) {

281  
	`ngx_devpﬁl_£t_evít
(
e
, 
evít
, 0);

284  
NGX_OK
;

285 
	}
}

288 
ngx_öt_t


289 
	$ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

291 
size_t
 
n
;

292 
ngx_c⁄√˘i⁄_t
 *
c
;

294 
c
 = 
ev
->
d©a
;

296 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

297 "devpﬁ»fd:%dÉv:%04XòÊ:%04Xi", 
c
->
fd
, 
evít
, 
Êags
);

299 i‡(
nch™ges
 >
max_ch™ges
) {

300 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

303 
n
 = 
nch™ges
 * (
pﬁlfd
);

304 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

307  
NGX_ERROR
;

310 
nch™ges
 = 0;

313 
ch™ge_li°
[
nch™ges
].
fd
 = 
c
->fd;

314 
ch™ge_li°
[
nch™ges
].
evíts
 = (Ë
evít
;

315 
ch™ge_li°
[
nch™ges
].
ªvíts
 = 0;

317 
ch™ge_ödex
[
nch™ges
] = 
ev
;

318 
ev
->
ödex
 = 
nch™ges
;

320 
nch™ges
++;

322 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

323 
n
 = 
nch™ges
 * (
pﬁlfd
);

324 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

325 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

327  
NGX_ERROR
;

330 
nch™ges
 = 0;

333  
NGX_OK
;

334 
	}
}

337 
ngx_öt_t


338 
	$ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

339 
ngx_uöt_t
 
Êags
)

341 
evíts
, 
ªvíts
, 
rc
;

342 
size_t
 
n
;

343 
ngx_fd_t
 
fd
;

344 
ngx_îr_t
 
îr
;

345 
ngx_öt_t
 
i
;

346 
ngx_uöt_t
 
Àvñ
, 
ö°™˚
;

347 
ngx_evít_t
 *
ªv
, *
wev
;

348 
ngx_queue_t
 *
queue
;

349 
ngx_c⁄√˘i⁄_t
 *
c
;

350 
pﬁlfd
 
pfd
;

351 
dvpﬁl
 
dvp
;

355 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

356 "devpﬁ»timî: %M", 
timî
);

358 i‡(
nch™ges
) {

359 
n
 = 
nch™ges
 * (
pﬁlfd
);

360 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

361 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

363  
NGX_ERROR
;

366 
nch™ges
 = 0;

369 
dvp
.
dp_fds
 = 
evít_li°
;

370 
dvp
.
dp_nfds
 = (Ë
√víts
;

371 
dvp
.
dp_timeout
 = 
timî
;

372 
evíts
 = 
	`io˘l
(
dp
, 
DP_POLL
, &
dvp
);

374 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

376 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

377 
	`ngx_time_upd©e
();

380 i‡(
îr
) {

381 i‡(
îr
 =
NGX_EINTR
) {

383 i‡(
ngx_evít_timî_Æ¨m
) {

384 
ngx_evít_timî_Æ¨m
 = 0;

385  
NGX_OK
;

388 
Àvñ
 = 
NGX_LOG_INFO
;

391 
Àvñ
 = 
NGX_LOG_ALERT
;

394 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "ioctl(DP_POLL) failed");

395  
NGX_ERROR
;

398 i‡(
evíts
 == 0) {

399 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

400  
NGX_OK
;

403 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

405  
NGX_ERROR
;

408 
i
 = 0; i < 
evíts
; i++) {

410 
fd
 = 
evít_li°
[
i
].fd;

411 
ªvíts
 = 
evít_li°
[
i
].revents;

413 
c
 = 
ngx_cy˛e
->
fûes
[
fd
];

415 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

417 
pfd
.
fd
 = fd;

418 
pfd
.
evíts
 = 0;

419 
pfd
.
ªvíts
 = 0;

421 
rc
 = 
	`io˘l
(
dp
, 
DP_ISPOLLED
, &
pfd
);

423 
rc
) {

426 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

428 
fd
, 
ªvíts
);

432 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

434 
ªvíts
, 
fd
);

438 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

441 
ªvíts
, 
fd
, 
rc
, 
pfd
.fd,Öfd.revents);

443 
pfd
.
fd
 = fd;

444 
pfd
.
evíts
 = 
POLLREMOVE
;

445 
pfd
.
ªvíts
 = 0;

447 i‡(
	`wrôe
(
dp
, &
pfd
, (
pﬁlfd
))

448 !(
ssize_t
Ë(
pﬁlfd
))

450 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

451 "wrôe(/dev/pﬁlËf‹ %d faûed", 
fd
);

454 i‡(
	`˛o£
(
fd
) == -1) {

455 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

456 "˛o£(%dËÁûed", 
fd
);

465 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

467 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

469 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

470 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

472 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

475 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

476 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

479 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

482 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

483 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

491 
ªvíts
 |
POLLIN
|
POLLOUT
;

494 
ªv
 = 
c
->
ªad
;

496 i‡((
ªvíts
 & 
POLLIN
Ë&& 
ªv
->
a˘ive
) {

497 
ªv
->
ªady
 = 1;

499 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

500 
queue
 = 
ªv
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


501 : &
ngx_po°ed_evíts
;

503 
	`ngx_po°_evít
(
ªv
, 
queue
);

506 
ö°™˚
 = 
ªv
->instance;

508 
ªv
->
	`h™dÀr
(rev);

510 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

516 
wev
 = 
c
->
wrôe
;

518 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
wev
->
a˘ive
) {

519 
wev
->
ªady
 = 1;

521 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

522 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

525 
wev
->
	`h™dÀr
(wev);

530  
NGX_OK
;

531 
	}
}

535 
	$ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

537 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

539 
dpcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_devpﬁl_c⁄f_t
));

540 i‡(
dpcf
 =
NULL
) {

541  
NULL
;

544 
dpcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

545 
dpcf
->
evíts
 = 
NGX_CONF_UNSET
;

547  
dpcf
;

548 
	}
}

552 
	$ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

554 
ngx_devpﬁl_c⁄f_t
 *
dpcf
 = 
c⁄f
;

556 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
ch™ges
, 32);

557 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
evíts
, 32);

559  
NGX_CONF_OK
;

560 
	}
}

	@src/event/modules/ngx_epoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EPOLL
)

17 
	#EPOLLIN
 0x001

	)

18 
	#EPOLLPRI
 0x002

	)

19 
	#EPOLLOUT
 0x004

	)

20 
	#EPOLLRDNORM
 0x040

	)

21 
	#EPOLLRDBAND
 0x080

	)

22 
	#EPOLLWRNORM
 0x100

	)

23 
	#EPOLLWRBAND
 0x200

	)

24 
	#EPOLLMSG
 0x400

	)

25 
	#EPOLLERR
 0x008

	)

26 
	#EPOLLHUP
 0x010

	)

28 
	#EPOLLRDHUP
 0x2000

	)

30 
	#EPOLLET
 0x80000000

	)

31 
	#EPOLLONESHOT
 0x40000000

	)

33 
	#EPOLL_CTL_ADD
 1

	)

34 
	#EPOLL_CTL_DEL
 2

	)

35 
	#EPOLL_CTL_MOD
 3

	)

37 
	uïﬁl_d©a
 {

38 *
	m±r
;

39 
	mfd
;

40 
uöt32_t
 
	mu32
;

41 
uöt64_t
 
	mu64
;

42 } 
	tïﬁl_d©a_t
;

44 
	sïﬁl_evít
 {

45 
uöt32_t
 
	mevíts
;

46 
ïﬁl_d©a_t
 
	md©a
;

50 
ïﬁl_¸óã
(
size
);

52 
	$ïﬁl_¸óã
(
size
)

55 
	}
}

58 
ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
);

60 
	$ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
)

63 
	}
}

66 
ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
);

68 
	$ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
)

71 
	}
}

73 #i‡(
NGX_HAVE_EVENTFD
)

74 
	#SYS_evítfd
 323

	)

77 #i‡(
NGX_HAVE_FILE_AIO
)

79 
	#SYS_io_£tup
 245

	)

80 
	#SYS_io_de°roy
 246

	)

81 
	#SYS_io_gëevíts
 247

	)

83 
u_öt
 
	taio_c⁄ãxt_t
;

85 
	sio_evít
 {

86 
uöt64_t
 
	md©a
;

87 
uöt64_t
 
	mobj
;

88 
öt64_t
 
	mªs
;

89 
öt64_t
 
	mªs2
;

98 
ngx_uöt_t
 
	mevíts
;

99 
ngx_uöt_t
 
	maio_ªque°s
;

100 } 
	tngx_ïﬁl_c⁄f_t
;

103 
ngx_öt_t
 
ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

104 #i‡(
NGX_HAVE_EVENTFD
)

105 
ngx_öt_t
 
ngx_ïﬁl_nŸify_öô
(
ngx_log_t
 *
log
);

106 
ngx_ïﬁl_nŸify_h™dÀr
(
ngx_evít_t
 *
ev
);

108 
ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

109 
ngx_öt_t
 
ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

110 
ngx_uöt_t
 
Êags
);

111 
ngx_öt_t
 
ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

112 
ngx_uöt_t
 
Êags
);

113 
ngx_öt_t
 
ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

114 
ngx_öt_t
 
ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

115 
ngx_uöt_t
 
Êags
);

116 #i‡(
NGX_HAVE_EVENTFD
)

117 
ngx_öt_t
 
ngx_ïﬁl_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
);

119 
ngx_öt_t
 
ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

120 
ngx_uöt_t
 
Êags
);

122 #i‡(
NGX_HAVE_FILE_AIO
)

123 
ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
);

126 *
ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

127 *
ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

129 
	gï
 = -1;

130 
ïﬁl_evít
 *
	gevít_li°
;

131 
ngx_uöt_t
 
	g√víts
;

133 #i‡(
NGX_HAVE_EVENTFD
)

134 
	gnŸify_fd
 = -1;

135 
ngx_evít_t
 
	gnŸify_evít
;

136 
ngx_c⁄√˘i⁄_t
 
	gnŸify_c⁄n
;

139 #i‡(
NGX_HAVE_FILE_AIO
)

141 
	gngx_evítfd
 = -1;

142 
aio_c⁄ãxt_t
 
	gngx_aio_˘x
 = 0;

144 
ngx_evít_t
 
	gngx_evítfd_evít
;

145 
ngx_c⁄√˘i⁄_t
 
	gngx_evítfd_c⁄n
;

149 
ngx_°r_t
 
	gïﬁl_«me
 = 
ngx_°rög
("epoll");

151 
ngx_comm™d_t
 
	gngx_ïﬁl_comm™ds
[] = {

153 { 
ngx_°rög
("epoll_events"),

154 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

155 
ngx_c⁄f_£t_num_¶Ÿ
,

157 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
evíts
),

158 
NULL
 },

160 { 
ngx_°rög
("worker_aio_requests"),

161 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

162 
ngx_c⁄f_£t_num_¶Ÿ
,

164 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
aio_ªque°s
),

165 
NULL
 },

167 
ngx_nuŒ_comm™d


171 
ngx_evít_moduÀ_t
 
	gngx_ïﬁl_moduÀ_˘x
 = {

172 &
ïﬁl_«me
,

173 
ngx_ïﬁl_¸óã_c⁄f
,

174 
ngx_ïﬁl_öô_c⁄f
,

177 
ngx_ïﬁl_add_evít
,

178 
ngx_ïﬁl_dñ_evít
,

179 
ngx_ïﬁl_add_evít
,

180 
ngx_ïﬁl_dñ_evít
,

181 
ngx_ïﬁl_add_c⁄√˘i⁄
,

182 
ngx_ïﬁl_dñ_c⁄√˘i⁄
,

183 #i‡(
NGX_HAVE_EVENTFD
)

184 
ngx_ïﬁl_nŸify
,

186 
NULL
,

188 
ngx_ïﬁl_¥o˚ss_evíts
,

189 
ngx_ïﬁl_öô
,

190 
ngx_ïﬁl_d⁄e
,

194 
ngx_moduÀ_t
 
	gngx_ïﬁl_moduÀ
 = {

195 
NGX_MODULE_V1
,

196 &
ngx_ïﬁl_moduÀ_˘x
,

197 
ngx_ïﬁl_comm™ds
,

198 
NGX_EVENT_MODULE
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NGX_MODULE_V1_PADDING


210 #i‡(
NGX_HAVE_FILE_AIO
)

219 
	$io_£tup
(
u_öt
 
ƒ_ªqs
, 
aio_c⁄ãxt_t
 *
˘x
)

221  
	`sysˇŒ
(
SYS_io_£tup
, 
ƒ_ªqs
, 
˘x
);

222 
	}
}

226 
	$io_de°roy
(
aio_c⁄ãxt_t
 
˘x
)

228  
	`sysˇŒ
(
SYS_io_de°roy
, 
˘x
);

229 
	}
}

233 
	$io_gëevíts
(
aio_c⁄ãxt_t
 
˘x
, 
mö_ƒ
, 
ƒ
, 
io_evít
 *
evíts
,

234 
time•ec
 *
tmo
)

236  
	`sysˇŒ
(
SYS_io_gëevíts
, 
˘x
, 
mö_ƒ
, 
ƒ
, 
evíts
, 
tmo
);

237 
	}
}

241 
	$ngx_ïﬁl_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ïﬁl_c⁄f_t
 *
ïcf
)

243 
n
;

244 
ïﬁl_evít
 
ì
;

246 #i‡(
NGX_HAVE_SYS_EVENTFD_H
)

247 
ngx_evítfd
 = 
	`evítfd
(0, 0);

249 
ngx_evítfd
 = 
	`sysˇŒ
(
SYS_evítfd
, 0);

252 i‡(
ngx_evítfd
 == -1) {

253 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

255 
ngx_fûe_aio
 = 0;

259 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

260 "evítfd: %d", 
ngx_evítfd
);

262 
n
 = 1;

264 i‡(
	`io˘l
(
ngx_evítfd
, 
FIONBIO
, &
n
) == -1) {

265 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

267 
Áûed
;

270 i‡(
	`io_£tup
(
ïcf
->
aio_ªque°s
, &
ngx_aio_˘x
) == -1) {

271 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

273 
Áûed
;

276 
ngx_evítfd_evít
.
d©a
 = &
ngx_evítfd_c⁄n
;

277 
ngx_evítfd_evít
.
h™dÀr
 = 
ngx_ïﬁl_evítfd_h™dÀr
;

278 
ngx_evítfd_evít
.
log
 = 
cy˛e
->log;

279 
ngx_evítfd_evít
.
a˘ive
 = 1;

280 
ngx_evítfd_c⁄n
.
fd
 = 
ngx_evítfd
;

281 
ngx_evítfd_c⁄n
.
ªad
 = &
ngx_evítfd_evít
;

282 
ngx_evítfd_c⁄n
.
log
 = 
cy˛e
->log;

284 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLET
;

285 
ì
.
d©a
.
±r
 = &
ngx_evítfd_c⁄n
;

287 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
ngx_evítfd
, &
ì
) != -1) {

291 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

294 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

295 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

299 
Áûed
:

301 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

302 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

306 
ngx_evítfd
 = -1;

307 
ngx_aio_˘x
 = 0;

308 
ngx_fûe_aio
 = 0;

309 
	}
}

314 
ngx_öt_t


315 
	$ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

317 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

319 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ïﬁl_moduÀ
);

321 i‡(
ï
 == -1) {

322 
ï
 = 
	`ïﬁl_¸óã
(
cy˛e
->
c⁄√˘i⁄_n
 / 2);

324 i‡(
ï
 == -1) {

325 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

327  
NGX_ERROR
;

330 #i‡(
NGX_HAVE_EVENTFD
)

331 i‡(
	`ngx_ïﬁl_nŸify_öô
(
cy˛e
->
log
Ë!
NGX_OK
) {

332  
NGX_ERROR
;

336 #i‡(
NGX_HAVE_FILE_AIO
)

338 
	`ngx_ïﬁl_aio_öô
(
cy˛e
, 
ïcf
);

343 i‡(
√víts
 < 
ïcf
->
evíts
) {

344 i‡(
evít_li°
) {

345 
	`ngx_‰ì
(
evít_li°
);

348 
evít_li°
 = 
	`ngx_Æloc
((
ïﬁl_evít
Ë* 
ïcf
->
evíts
,

349 
cy˛e
->
log
);

350 i‡(
evít_li°
 =
NULL
) {

351  
NGX_ERROR
;

355 
√víts
 = 
ïcf
->
evíts
;

357 
ngx_io
 = 
ngx_os_io
;

359 
ngx_evít_a˘i⁄s
 = 
ngx_ïﬁl_moduÀ_˘x
.
a˘i⁄s
;

361 #i‡(
NGX_HAVE_CLEAR_EVENT
)

362 
ngx_evít_Êags
 = 
NGX_USE_CLEAR_EVENT


364 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT


366 |
NGX_USE_GREEDY_EVENT


367 |
NGX_USE_EPOLL_EVENT
;

369  
NGX_OK
;

370 
	}
}

373 #i‡(
NGX_HAVE_EVENTFD
)

375 
ngx_öt_t


376 
	$ngx_ïﬁl_nŸify_öô
(
ngx_log_t
 *
log
)

378 
ïﬁl_evít
 
ì
;

380 #i‡(
NGX_HAVE_SYS_EVENTFD_H
)

381 
nŸify_fd
 = 
	`evítfd
(0, 0);

383 
nŸify_fd
 = 
	`sysˇŒ
(
SYS_evítfd
, 0);

386 i‡(
nŸify_fd
 == -1) {

387 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "eventfd() failed");

388  
NGX_ERROR
;

391 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

392 "nŸifyÉvítfd: %d", 
nŸify_fd
);

394 
nŸify_evít
.
h™dÀr
 = 
ngx_ïﬁl_nŸify_h™dÀr
;

395 
nŸify_evít
.
log
 =Üog;

396 
nŸify_evít
.
a˘ive
 = 1;

398 
nŸify_c⁄n
.
fd
 = 
nŸify_fd
;

399 
nŸify_c⁄n
.
ªad
 = &
nŸify_evít
;

400 
nŸify_c⁄n
.
log
 =Üog;

402 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLET
;

403 
ì
.
d©a
.
±r
 = &
nŸify_c⁄n
;

405 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
nŸify_fd
, &
ì
) == -1) {

406 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

409 i‡(
	`˛o£
(
nŸify_fd
) == -1) {

410 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

414  
NGX_ERROR
;

417  
NGX_OK
;

418 
	}
}

422 
	$ngx_ïﬁl_nŸify_h™dÀr
(
ngx_evít_t
 *
ev
)

424 
ssize_t
 
n
;

425 
uöt64_t
 
cou¡
;

426 
ngx_îr_t
 
îr
;

427 
ngx_evít_h™dÀr_±
 
h™dÀr
;

429 i‡(++
ev
->
ödex
 =
NGX_MAX_UINT32_VALUE
) {

430 
ev
->
ödex
 = 0;

432 
n
 = 
	`ªad
(
nŸify_fd
, &
cou¡
, (
uöt64_t
));

434 
îr
 = 
ngx_î∫o
;

436 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

437 "ªad(Ëevítfd %d: %z cou¡:%uL", 
nŸify_fd
, 
n
, 
cou¡
);

439 i‡((
size_t
Ë
n
 !(
uöt64_t
)) {

440 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
îr
,

441 "ªad(Ëevítfd %d faûed", 
nŸify_fd
);

445 
h™dÀr
 = 
ev
->
d©a
;

446 
	`h™dÀr
(
ev
);

447 
	}
}

453 
	$ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

455 i‡(
	`˛o£
(
ï
) == -1) {

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

460 
ï
 = -1;

462 #i‡(
NGX_HAVE_EVENTFD
)

464 i‡(
	`˛o£
(
nŸify_fd
) == -1) {

465 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

469 
nŸify_fd
 = -1;

473 #i‡(
NGX_HAVE_FILE_AIO
)

475 i‡(
ngx_evítfd
 != -1) {

477 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

478 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

482 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

483 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

487 
ngx_evítfd
 = -1;

490 
ngx_aio_˘x
 = 0;

494 
	`ngx_‰ì
(
evít_li°
);

496 
evít_li°
 = 
NULL
;

497 
√víts
 = 0;

498 
	}
}

501 
ngx_öt_t


502 
	$ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

504 
›
;

505 
uöt32_t
 
evíts
, 
¥ev
;

506 
ngx_evít_t
 *
e
;

507 
ngx_c⁄√˘i⁄_t
 *
c
;

508 
ïﬁl_evít
 
ì
;

510 
c
 = 
ev
->
d©a
;

512 
evíts
 = (
uöt32_t
Ë
evít
;

514 i‡(
evít
 =
NGX_READ_EVENT
) {

515 
e
 = 
c
->
wrôe
;

516 
¥ev
 = 
EPOLLOUT
;

517 #i‡(
NGX_READ_EVENT
 !
EPOLLIN
|
EPOLLRDHUP
)

518 
evíts
 = 
EPOLLIN
|
EPOLLRDHUP
;

522 
e
 = 
c
->
ªad
;

523 
¥ev
 = 
EPOLLIN
|
EPOLLRDHUP
;

524 #i‡(
NGX_WRITE_EVENT
 !
EPOLLOUT
)

525 
evíts
 = 
EPOLLOUT
;

529 i‡(
e
->
a˘ive
) {

530 
›
 = 
EPOLL_CTL_MOD
;

531 
evíts
 |
¥ev
;

534 
›
 = 
EPOLL_CTL_ADD
;

537 
ì
.
evíts
 =Évít†| (
uöt32_t
Ë
Êags
;

538 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

540 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

542 
c
->
fd
, 
›
, 
ì
.
evíts
);

544 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

545 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

546 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

547  
NGX_ERROR
;

550 
ev
->
a˘ive
 = 1;

552 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

555  
NGX_OK
;

556 
	}
}

559 
ngx_öt_t


560 
	$ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

562 
›
;

563 
uöt32_t
 
¥ev
;

564 
ngx_evít_t
 *
e
;

565 
ngx_c⁄√˘i⁄_t
 *
c
;

566 
ïﬁl_evít
 
ì
;

574 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

575 
ev
->
a˘ive
 = 0;

576  
NGX_OK
;

579 
c
 = 
ev
->
d©a
;

581 i‡(
evít
 =
NGX_READ_EVENT
) {

582 
e
 = 
c
->
wrôe
;

583 
¥ev
 = 
EPOLLOUT
;

586 
e
 = 
c
->
ªad
;

587 
¥ev
 = 
EPOLLIN
|
EPOLLRDHUP
;

590 i‡(
e
->
a˘ive
) {

591 
›
 = 
EPOLL_CTL_MOD
;

592 
ì
.
evíts
 = 
¥ev
 | (
uöt32_t
Ë
Êags
;

593 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

596 
›
 = 
EPOLL_CTL_DEL
;

597 
ì
.
evíts
 = 0;

598 
ì
.
d©a
.
±r
 = 
NULL
;

601 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

603 
c
->
fd
, 
›
, 
ì
.
evíts
);

605 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

606 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

607 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

608  
NGX_ERROR
;

611 
ev
->
a˘ive
 = 0;

613  
NGX_OK
;

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

620 
ïﬁl_evít
 
ì
;

622 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLOUT
|
EPOLLET
|
EPOLLRDHUP
;

623 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | c->
ªad
->
ö°™˚
);

625 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

626 "ïﬁ»add c⁄√˘i⁄: fd:%dÉv:%08XD", 
c
->
fd
, 
ì
.
evíts
);

628 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
c
->
fd
, &
ì
) == -1) {

629 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

630 "ïﬁl_˘l(EPOLL_CTL_ADD, %dËÁûed", 
c
->
fd
);

631  
NGX_ERROR
;

634 
c
->
ªad
->
a˘ive
 = 1;

635 
c
->
wrôe
->
a˘ive
 = 1;

637  
NGX_OK
;

638 
	}
}

641 
ngx_öt_t


642 
	$ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

644 
›
;

645 
ïﬁl_evít
 
ì
;

653 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

654 
c
->
ªad
->
a˘ive
 = 0;

655 
c
->
wrôe
->
a˘ive
 = 0;

656  
NGX_OK
;

659 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

660 "ïﬁ»dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

662 
›
 = 
EPOLL_CTL_DEL
;

663 
ì
.
evíts
 = 0;

664 
ì
.
d©a
.
±r
 = 
NULL
;

666 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

667 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

668 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

669  
NGX_ERROR
;

672 
c
->
ªad
->
a˘ive
 = 0;

673 
c
->
wrôe
->
a˘ive
 = 0;

675  
NGX_OK
;

676 
	}
}

679 #i‡(
NGX_HAVE_EVENTFD
)

681 
ngx_öt_t


682 
	$ngx_ïﬁl_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
)

684 
uöt64_t
 
öc
 = 1;

686 
nŸify_evít
.
d©a
 = 
h™dÀr
;

688 i‡((
size_t
Ë
	`wrôe
(
nŸify_fd
, &
öc
, (
uöt64_t
)) != (uint64_t)) {

689 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
nŸify_evít
.
log
, 
ngx_î∫o
,

690 "wrôe(Ëtÿevítfd %d faûed", 
nŸify_fd
);

691  
NGX_ERROR
;

694  
NGX_OK
;

695 
	}
}

700 
ngx_öt_t


701 
	$ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

703 
evíts
;

704 
uöt32_t
 
ªvíts
;

705 
ngx_öt_t
 
ö°™˚
, 
i
;

706 
ngx_uöt_t
 
Àvñ
;

707 
ngx_îr_t
 
îr
;

708 
ngx_evít_t
 *
ªv
, *
wev
;

709 
ngx_queue_t
 *
queue
;

710 
ngx_c⁄√˘i⁄_t
 *
c
;

714 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

715 "ïﬁ»timî: %M", 
timî
);

717 
evíts
 = 
	`ïﬁl_waô
(
ï
, 
evít_li°
, (Ë
√víts
, 
timî
);

719 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

721 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

722 
	`ngx_time_upd©e
();

725 i‡(
îr
) {

726 i‡(
îr
 =
NGX_EINTR
) {

728 i‡(
ngx_evít_timî_Æ¨m
) {

729 
ngx_evít_timî_Æ¨m
 = 0;

730  
NGX_OK
;

733 
Àvñ
 = 
NGX_LOG_INFO
;

736 
Àvñ
 = 
NGX_LOG_ALERT
;

739 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "epoll_wait() failed");

740  
NGX_ERROR
;

743 i‡(
evíts
 == 0) {

744 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

745  
NGX_OK
;

748 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

750  
NGX_ERROR
;

753 
i
 = 0; i < 
evíts
; i++) {

754 
c
 = 
evít_li°
[
i
].
d©a
.
±r
;

756 
ö°™˚
 = (
uöçå_t
Ë
c
 & 1;

757 
c
 = (
ngx_c⁄√˘i⁄_t
 *Ë((
uöçå_t
) c & (uintptr_t) ~1);

759 
ªv
 = 
c
->
ªad
;

761 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

768 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

769 "ïﬁl: sèÀÉvíà%p", 
c
);

773 
ªvíts
 = 
evít_li°
[
i
].
evíts
;

775 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

777 
c
->
fd
, 
ªvíts
, 
evít_li°
[
i
].
d©a
.
±r
);

779 i‡(
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
)) {

780 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

782 
c
->
fd
, 
ªvíts
);

786 i‡(
ªvíts
 & ~(
EPOLLIN
|
EPOLLOUT
|
EPOLLERR
|
EPOLLHUP
)) {

787 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

789 
c
->
fd
, 
ªvíts
);

793 i‡((
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
))

794 && (
ªvíts
 & (
EPOLLIN
|
EPOLLOUT
)) == 0)

802 
ªvíts
 |
EPOLLIN
|
EPOLLOUT
;

805 i‡((
ªvíts
 & 
EPOLLIN
Ë&& 
ªv
->
a˘ive
) {

807 #i‡(
NGX_HAVE_EPOLLRDHUP
)

808 i‡(
ªvíts
 & 
EPOLLRDHUP
) {

809 
ªv
->
≥ndög_eof
 = 1;

813 
ªv
->
ªady
 = 1;

815 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

816 
queue
 = 
ªv
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


817 : &
ngx_po°ed_evíts
;

819 
	`ngx_po°_evít
(
ªv
, 
queue
);

822 
ªv
->
	`h™dÀr
(rev);

826 
wev
 = 
c
->
wrôe
;

828 i‡((
ªvíts
 & 
EPOLLOUT
Ë&& 
wev
->
a˘ive
) {

830 i‡(
c
->
fd
 =-1 || 
wev
->
ö°™˚
 != instance) {

837 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

838 "ïﬁl: sèÀÉvíà%p", 
c
);

842 
wev
->
ªady
 = 1;

844 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

845 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

848 
wev
->
	`h™dÀr
(wev);

853  
NGX_OK
;

854 
	}
}

857 #i‡(
NGX_HAVE_FILE_AIO
)

860 
	$ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
)

862 
n
, 
evíts
;

863 
i
;

864 
uöt64_t
 
ªady
;

865 
ngx_îr_t
 
îr
;

866 
ngx_evít_t
 *
e
;

867 
ngx_evít_aio_t
 *
aio
;

868 
io_evít
 
evít
[64];

869 
time•ec
 
ts
;

871 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "eventfd handler");

873 
n
 = 
	`ªad
(
ngx_evítfd
, &
ªady
, 8);

875 
îr
 = 
ngx_î∫o
;

877 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "evítfd: %d", 
n
);

879 i‡(
n
 != 8) {

880 i‡(
n
 == -1) {

881 i‡(
îr
 =
NGX_EAGAIN
) {

885 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
îr
, "read(eventfd) failed");

889 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

890 "ªad”vítfdËªtu∫ed o∆y %d byãs", 
n
);

894 
ts
.
tv_£c
 = 0;

895 
ts
.
tv_n£c
 = 0;

897 
ªady
) {

899 
evíts
 = 
	`io_gëevíts
(
ngx_aio_˘x
, 1, 64, 
evít
, &
ts
);

901 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

902 "io_gëevíts: %l", 
evíts
);

904 i‡(
evíts
 > 0) {

905 
ªady
 -
evíts
;

907 
i
 = 0; i < 
evíts
; i++) {

909 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

911 
evít
[
i
].
d©a
,Évít[i].
obj
,

912 
evít
[
i
].
ªs
,Évít[i].
ªs2
);

914 
e
 = (
ngx_evít_t
 *Ë(
uöçå_t
Ë
evít
[
i
].
d©a
;

916 
e
->
com∂ëe
 = 1;

917 
e
->
a˘ive
 = 0;

918 
e
->
ªady
 = 1;

920 
aio
 = 
e
->
d©a
;

921 
aio
->
ªs
 = 
evít
[
i
].res;

923 
	`ngx_po°_evít
(
e
, &
ngx_po°ed_evíts
);

929 i‡(
evíts
 == 0) {

934 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

938 
	}
}

944 
	$ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

946 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

948 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_ïﬁl_c⁄f_t
));

949 i‡(
ïcf
 =
NULL
) {

950  
NULL
;

953 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

954 
ïcf
->
aio_ªque°s
 = 
NGX_CONF_UNSET
;

956  
ïcf
;

957 
	}
}

961 
	$ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

963 
ngx_ïﬁl_c⁄f_t
 *
ïcf
 = 
c⁄f
;

965 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 512);

966 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
aio_ªque°s
, 32);

968  
NGX_CONF_OK
;

969 
	}
}

	@src/event/modules/ngx_eventport_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EVENTPORT
)

15 
	#ush‹t_t
 
u_sh‹t


	)

16 
	#uöt_t
 
u_öt


	)

18 #i‚de‡
CLOCK_REALTIME


19 
	#CLOCK_REALTIME
 0

	)

20 
	t˛ockid_t
;

21 * 
	ttimî_t
;

26 
	#PORT_SOURCE_AIO
 1

	)

27 
	#PORT_SOURCE_TIMER
 2

	)

28 
	#PORT_SOURCE_USER
 3

	)

29 
	#PORT_SOURCE_FD
 4

	)

30 
	#PORT_SOURCE_ALERT
 5

	)

31 
	#PORT_SOURCE_MQ
 6

	)

33 #i‚de‡
ETIME


34 
	#ETIME
 64

	)

37 
	#SIGEV_PORT
 4

	)

40 
	mp‹ãv_evíts
;

41 
ush‹t_t
 
	mp‹ãv_sour˚
;

42 
ush‹t_t
 
	mp‹ãv_∑d
;

43 
uöçå_t
 
	mp‹ãv_obje˘
;

44 *
	mp‹ãv_u£r
;

45 } 
	tp‹t_evít_t
;

47 
	sp‹t_nŸify
 {

48 
	mp‹äfy_p‹t
;

49 *
	mp‹äfy_u£r
;

50 } 
	tp‹t_nŸify_t
;

52 #i‡(
__FªeBSD_vîsi⁄
 < 700005)

54 
	sôimî•ec
 {

55 
time•ec
 
	mô_öãrvÆ
;

56 
time•ec
 
	mô_vÆue
;

57 } 
	tôimî•ec_t
;

61 
p‹t_¸óã
();

63 
	$p‹t_¸óã
()

66 
	}
}

69 
p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

70 *
u£r
);

72 
	$p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

73 *
u£r
)

76 
	}
}

79 
p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
);

81 
	$p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
)

84 
	}
}

87 
p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

88 
time•ec
 *
timeout
);

90 
	$p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

91 
time•ec
 *
timeout
)

94 
	}
}

96 
p‹t_£nd
(
p‹t
, 
evíts
, *
u£r
);

98 
	$p‹t_£nd
(
p‹t
, 
evíts
, *
u£r
)

101 
	}
}

104 
timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
);

106 
	$timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
)

109 
	}
}

112 
timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

113 
ôimî•ec
 *
ovÆue
);

115 
	$timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

116 
ôimî•ec
 *
ovÆue
)

119 
	}
}

122 
timî_dñëe
(
timî_t
 
timîid
);

124 
	$timî_dñëe
(
timî_t
 
timîid
)

127 
	}
}

133 
ngx_uöt_t
 
	mevíts
;

134 } 
	tngx_evíç‹t_c⁄f_t
;

137 
ngx_öt_t
 
ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

138 
ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

139 
ngx_öt_t
 
ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

140 
ngx_uöt_t
 
Êags
);

141 
ngx_öt_t
 
ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

142 
ngx_uöt_t
 
Êags
);

143 
ngx_öt_t
 
ngx_evíç‹t_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
);

144 
ngx_öt_t
 
ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

145 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

147 *
ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

148 *
ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

150 
	gï
 = -1;

151 
p‹t_evít_t
 *
	gevít_li°
;

152 
ngx_uöt_t
 
	g√víts
;

153 
timî_t
 
	gevít_timî
 = (timer_t) -1;

154 
ngx_evít_t
 
	gnŸify_evít
;

156 
ngx_°r_t
 
	gevíç‹t_«me
 = 
ngx_°rög
("eventport");

159 
ngx_comm™d_t
 
	gngx_evíç‹t_comm™ds
[] = {

161 { 
ngx_°rög
("eventport_events"),

162 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

163 
ngx_c⁄f_£t_num_¶Ÿ
,

165 
off£tof
(
ngx_evíç‹t_c⁄f_t
, 
evíts
),

166 
NULL
 },

168 
ngx_nuŒ_comm™d


172 
ngx_evít_moduÀ_t
 
	gngx_evíç‹t_moduÀ_˘x
 = {

173 &
evíç‹t_«me
,

174 
ngx_evíç‹t_¸óã_c⁄f
,

175 
ngx_evíç‹t_öô_c⁄f
,

178 
ngx_evíç‹t_add_evít
,

179 
ngx_evíç‹t_dñ_evít
,

180 
ngx_evíç‹t_add_evít
,

181 
ngx_evíç‹t_dñ_evít
,

182 
NULL
,

183 
NULL
,

184 
ngx_evíç‹t_nŸify
,

185 
ngx_evíç‹t_¥o˚ss_evíts
,

186 
ngx_evíç‹t_öô
,

187 
ngx_evíç‹t_d⁄e
,

192 
ngx_moduÀ_t
 
	gngx_evíç‹t_moduÀ
 = {

193 
NGX_MODULE_V1
,

194 &
ngx_evíç‹t_moduÀ_˘x
,

195 
ngx_evíç‹t_comm™ds
,

196 
NGX_EVENT_MODULE
,

197 
NULL
,

198 
NULL
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NGX_MODULE_V1_PADDING


208 
ngx_öt_t


209 
	$ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

211 
p‹t_nŸify_t
 
≤
;

212 
ôimî•ec
 
ôs
;

213 
sigevít
 
£v
;

214 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

216 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíç‹t_moduÀ
);

218 i‡(
ï
 == -1) {

219 
ï
 = 
	`p‹t_¸óã
();

221 i‡(
ï
 == -1) {

222 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

224  
NGX_ERROR
;

227 
nŸify_evít
.
a˘ive
 = 1;

228 
nŸify_evít
.
log
 = 
cy˛e
->log;

231 i‡(
√víts
 < 
ïcf
->
evíts
) {

232 i‡(
evít_li°
) {

233 
	`ngx_‰ì
(
evít_li°
);

236 
evít_li°
 = 
	`ngx_Æloc
((
p‹t_evít_t
Ë* 
ïcf
->
evíts
,

237 
cy˛e
->
log
);

238 i‡(
evít_li°
 =
NULL
) {

239  
NGX_ERROR
;

243 
ngx_evít_Êags
 = 
NGX_USE_EVENTPORT_EVENT
;

245 i‡(
timî
) {

246 
	`ngx_memzîo
(&
≤
, (
p‹t_nŸify_t
));

247 
≤
.
p‹äfy_p‹t
 = 
ï
;

249 
	`ngx_memzîo
(&
£v
, (
sigevít
));

250 
£v
.
sigev_nŸify
 = 
SIGEV_PORT
;

251 #i‡!(
NGX_TEST_BUILD_EVENTPORT
)

252 
£v
.
sigev_vÆue
.
sivÆ_±r
 = &
≤
;

255 i‡(
	`timî_¸óã
(
CLOCK_REALTIME
, &
£v
, &
evít_timî
) == -1) {

256 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

258  
NGX_ERROR
;

261 
ôs
.
ô_öãrvÆ
.
tv_£c
 = 
timî
 / 1000;

262 
ôs
.
ô_öãrvÆ
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

263 
ôs
.
ô_vÆue
.
tv_£c
 = 
timî
 / 1000;

264 
ôs
.
ô_vÆue
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

266 i‡(
	`timî_£âime
(
evít_timî
, 0, &
ôs
, 
NULL
) == -1) {

267 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

269  
NGX_ERROR
;

272 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

275 
√víts
 = 
ïcf
->
evíts
;

277 
ngx_io
 = 
ngx_os_io
;

279 
ngx_evít_a˘i⁄s
 = 
ngx_evíç‹t_moduÀ_˘x
.
a˘i⁄s
;

281  
NGX_OK
;

282 
	}
}

286 
	$ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

288 i‡(
evít_timî
 !(
timî_t
) -1) {

289 i‡(
	`timî_dñëe
(
evít_timî
) == -1) {

290 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

294 
evít_timî
 = (
timî_t
) -1;

297 i‡(
	`˛o£
(
ï
) == -1) {

298 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

302 
ï
 = -1;

304 
	`ngx_‰ì
(
evít_li°
);

306 
evít_li°
 = 
NULL
;

307 
√víts
 = 0;

308 
	}
}

311 
ngx_öt_t


312 
	$ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

314 
ngx_öt_t
 
evíts
, 
¥ev
;

315 
ngx_evít_t
 *
e
;

316 
ngx_c⁄√˘i⁄_t
 *
c
;

318 
c
 = 
ev
->
d©a
;

320 
evíts
 = 
evít
;

322 i‡(
evít
 =
NGX_READ_EVENT
) {

323 
e
 = 
c
->
wrôe
;

324 
¥ev
 = 
POLLOUT
;

325 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

326 
evíts
 = 
POLLIN
;

330 
e
 = 
c
->
ªad
;

331 
¥ev
 = 
POLLIN
;

332 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

333 
evíts
 = 
POLLOUT
;

337 i‡(
e
->
⁄eshŸ
) {

338 
evíts
 |
¥ev
;

341 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

342 "evíç‹àaddÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evíts
);

344 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evíts
,

345 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

348 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

350  
NGX_ERROR
;

353 
ev
->
a˘ive
 = 1;

354 
ev
->
⁄eshŸ
 = 1;

356  
NGX_OK
;

357 
	}
}

360 
ngx_öt_t


361 
	$ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

363 
ngx_evít_t
 *
e
;

364 
ngx_c⁄√˘i⁄_t
 *
c
;

372 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

373 
ev
->
a˘ive
 = 0;

374 
ev
->
⁄eshŸ
 = 0;

375  
NGX_OK
;

378 
c
 = 
ev
->
d©a
;

380 i‡(
evít
 =
NGX_READ_EVENT
) {

381 
e
 = 
c
->
wrôe
;

382 
evít
 = 
POLLOUT
;

385 
e
 = 
c
->
ªad
;

386 
evít
 = 
POLLIN
;

389 i‡(
e
->
⁄eshŸ
) {

390 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

391 "evíç‹àch™gêevít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

393 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evít
,

394 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

397 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

399  
NGX_ERROR
;

403 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

404 "evíç‹àdñÉvít: fd:%d", 
c
->
fd
);

406 i‡(
	`p‹t_dissocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
) == -1) {

407 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

409  
NGX_ERROR
;

413 
ev
->
a˘ive
 = 0;

414 
ev
->
⁄eshŸ
 = 0;

416  
NGX_OK
;

417 
	}
}

420 
ngx_öt_t


421 
	$ngx_evíç‹t_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
)

423 
nŸify_evít
.
h™dÀr
 = handler;

425 i‡(
	`p‹t_£nd
(
ï
, 0, &
nŸify_evít
) != 0) {

426 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
nŸify_evít
.
log
, 
ngx_î∫o
,

428  
NGX_ERROR
;

431  
NGX_OK
;

432 
	}
}

435 
ngx_öt_t


436 
	$ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

437 
ngx_uöt_t
 
Êags
)

439 
n
, 
ªvíts
;

440 
u_öt
 
evíts
;

441 
ngx_îr_t
 
îr
;

442 
ngx_öt_t
 
ö°™˚
;

443 
ngx_uöt_t
 
i
, 
Àvñ
;

444 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
;

445 
ngx_queue_t
 *
queue
;

446 
ngx_c⁄√˘i⁄_t
 *
c
;

447 
time•ec
 
ts
, *
ç
;

449 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

450 
ç
 = 
NULL
;

453 
ts
.
tv_£c
 = 
timî
 / 1000;

454 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

455 
ç
 = &
ts
;

458 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

459 "evíç‹àtimî: %M", 
timî
);

461 
evíts
 = 1;

463 
n
 = 
	`p‹t_gën
(
ï
, 
evít_li°
, (
u_öt
Ë
√víts
, &
evíts
, 
ç
);

465 
îr
 = 
ngx_î∫o
;

467 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

468 
	`ngx_time_upd©e
();

471 i‡(
n
 == -1) {

472 i‡(
îr
 =
ETIME
) {

473 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

474  
NGX_OK
;

477 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

479  
NGX_ERROR
;

482 
Àvñ
 = (
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
;

483 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "port_getn() failed");

484  
NGX_ERROR
;

487 i‡(
evíts
 == 0) {

488 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

489  
NGX_OK
;

492 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

494  
NGX_ERROR
;

497 
i
 = 0; i < 
evíts
; i++) {

499 i‡(
evít_li°
[
i
].
p‹ãv_sour˚
 =
PORT_SOURCE_TIMER
) {

500 
	`ngx_time_upd©e
();

504 
ev
 = 
evít_li°
[
i
].
p‹ãv_u£r
;

506 
evít_li°
[
i
].
p‹ãv_sour˚
) {

508 
PORT_SOURCE_FD
:

510 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

511 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

513 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

520 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

521 "evíç‹t: sèÀÉvíà%p", 
ev
);

525 
ªvíts
 = 
evít_li°
[
i
].
p‹ãv_evíts
;

527 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

529 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

531 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

532 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

534 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

537 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

538 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

540 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

543 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

544 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

552 
ªvíts
 |
POLLIN
|
POLLOUT
;

555 
c
 = 
ev
->
d©a
;

556 
ªv
 = 
c
->
ªad
;

557 
wev
 = 
c
->
wrôe
;

559 
ªv
->
a˘ive
 = 0;

560 
wev
->
a˘ive
 = 0;

562 i‡(
ªvíts
 & 
POLLIN
) {

563 
ªv
->
ªady
 = 1;

565 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

566 
queue
 = 
ªv
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


567 : &
ngx_po°ed_evíts
;

569 
	`ngx_po°_evít
(
ªv
, 
queue
);

572 
ªv
->
	`h™dÀr
(rev);

574 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

579 i‡(
ªv
->
ac˚±
) {

580 i‡(
ngx_u£_ac˚±_muãx
) {

581 
ngx_ac˚±_evíts
 = 1;

585 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
POLLIN
,

586 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

589 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

591  
NGX_ERROR
;

596 i‡(
ªvíts
 & 
POLLOUT
) {

597 
wev
->
ªady
 = 1;

599 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

600 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

603 
wev
->
	`h™dÀr
(wev);

609 
PORT_SOURCE_USER
:

611 
ev
->
	`h™dÀr
(ev);

616 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

618 
evít_li°
[
i
].
p‹ãv_obje˘
);

623  
NGX_OK
;

624 
	}
}

628 
	$ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

630 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

632 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evíç‹t_c⁄f_t
));

633 i‡(
ïcf
 =
NULL
) {

634  
NULL
;

637 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

639  
ïcf
;

640 
	}
}

644 
	$ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

646 
ngx_evíç‹t_c⁄f_t
 *
ïcf
 = 
c⁄f
;

648 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 32);

650  
NGX_CONF_OK
;

651 
	}
}

	@src/event/modules/ngx_kqueue_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mch™ges
;

15 
ngx_uöt_t
 
	mevíts
;

16 } 
	tngx_kqueue_c⁄f_t
;

19 
ngx_öt_t
 
ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

20 #ifde‡
EVFILT_USER


21 
ngx_öt_t
 
ngx_kqueue_nŸify_öô
(
ngx_log_t
 *
log
);

23 
ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

24 
ngx_öt_t
 
ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

25 
ngx_uöt_t
 
Êags
);

26 
ngx_öt_t
 
ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

27 
ngx_uöt_t
 
Êags
);

28 
ngx_öt_t
 
ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
fûãr
,

29 
ngx_uöt_t
 
Êags
);

30 #ifde‡
EVFILT_USER


31 
ngx_öt_t
 
ngx_kqueue_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
);

33 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

34 
ngx_uöt_t
 
Êags
);

35 
ngx_ölöe
 
ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
,

36 
kevít
 *
kev
);

38 *
ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

39 *
ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

42 
	gngx_kqueue
 = -1;

44 
kevít
 *
	gch™ge_li°
;

45 
kevít
 *
	gevít_li°
;

46 
ngx_uöt_t
 
	gmax_ch™ges
, 
	gnch™ges
, 
	g√víts
;

48 #ifde‡
EVFILT_USER


49 
ngx_evít_t
 
	gnŸify_evít
;

50 
kevít
 
	gnŸify_kev
;

54 
ngx_°r_t
 
	gkqueue_«me
 = 
ngx_°rög
("kqueue");

56 
ngx_comm™d_t
 
	gngx_kqueue_comm™ds
[] = {

58 { 
ngx_°rög
("kqueue_changes"),

59 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_num_¶Ÿ
,

62 
off£tof
(
ngx_kqueue_c⁄f_t
, 
ch™ges
),

63 
NULL
 },

65 { 
ngx_°rög
("kqueue_events"),

66 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_num_¶Ÿ
,

69 
off£tof
(
ngx_kqueue_c⁄f_t
, 
evíts
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_evít_moduÀ_t
 
	gngx_kqueue_moduÀ_˘x
 = {

77 &
kqueue_«me
,

78 
ngx_kqueue_¸óã_c⁄f
,

79 
ngx_kqueue_öô_c⁄f
,

82 
ngx_kqueue_add_evít
,

83 
ngx_kqueue_dñ_evít
,

84 
ngx_kqueue_add_evít
,

85 
ngx_kqueue_dñ_evít
,

86 
NULL
,

87 
NULL
,

88 #ifde‡
EVFILT_USER


89 
ngx_kqueue_nŸify
,

91 
NULL
,

93 
ngx_kqueue_¥o˚ss_evíts
,

94 
ngx_kqueue_öô
,

95 
ngx_kqueue_d⁄e


100 
ngx_moduÀ_t
 
	gngx_kqueue_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_kqueue_moduÀ_˘x
,

103 
ngx_kqueue_comm™ds
,

104 
NGX_EVENT_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_öt_t


117 
	$ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

119 
ngx_kqueue_c⁄f_t
 *
kcf
;

120 
time•ec
 
ts
;

121 #i‡(
NGX_HAVE_TIMER_EVENT
)

122 
kevít
 
kev
;

125 
kcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_kqueue_moduÀ
);

127 i‡(
ngx_kqueue
 == -1) {

128 
ngx_kqueue
 = 
	`kqueue
();

130 i‡(
ngx_kqueue
 == -1) {

131 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

133  
NGX_ERROR
;

136 #ifde‡
EVFILT_USER


137 i‡(
	`ngx_kqueue_nŸify_öô
(
cy˛e
->
log
Ë!
NGX_OK
) {

138  
NGX_ERROR
;

143 i‡(
max_ch™ges
 < 
kcf
->
ch™ges
) {

144 i‡(
nch™ges
) {

145 
ts
.
tv_£c
 = 0;

146 
ts
.
tv_n£c
 = 0;

148 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

151 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

153  
NGX_ERROR
;

155 
nch™ges
 = 0;

158 i‡(
ch™ge_li°
) {

159 
	`ngx_‰ì
(
ch™ge_li°
);

162 
ch™ge_li°
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

163 
cy˛e
->
log
);

164 i‡(
ch™ge_li°
 =
NULL
) {

165  
NGX_ERROR
;

169 
max_ch™ges
 = 
kcf
->
ch™ges
;

171 i‡(
√víts
 < 
kcf
->
evíts
) {

172 i‡(
evít_li°
) {

173 
	`ngx_‰ì
(
evít_li°
);

176 
evít_li°
 = 
	`ngx_Æloc
(
kcf
->
evíts
 * (
kevít
), 
cy˛e
->
log
);

177 i‡(
evít_li°
 =
NULL
) {

178  
NGX_ERROR
;

182 
ngx_evít_Êags
 = 
NGX_USE_ONESHOT_EVENT


183 |
NGX_USE_KQUEUE_EVENT


184 |
NGX_USE_VNODE_EVENT
;

186 #i‡(
NGX_HAVE_TIMER_EVENT
)

188 i‡(
timî
) {

189 
kev
.
idít
 = 0;

190 
kev
.
fûãr
 = 
EVFILT_TIMER
;

191 
kev
.
Êags
 = 
EV_ADD
|
EV_ENABLE
;

192 
kev
.
fÊags
 = 0;

193 
kev
.
d©a
 = 
timî
;

194 
kev
.
ud©a
 = 0;

196 
ts
.
tv_£c
 = 0;

197 
ts
.
tv_n£c
 = 0;

199 i‡(
	`kevít
(
ngx_kqueue
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

200 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

202  
NGX_ERROR
;

205 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

210 #i‡(
NGX_HAVE_CLEAR_EVENT
)

211 
ngx_evít_Êags
 |
NGX_USE_CLEAR_EVENT
;

213 
ngx_evít_Êags
 |
NGX_USE_LEVEL_EVENT
;

216 #i‡(
NGX_HAVE_LOWAT_EVENT
)

217 
ngx_evít_Êags
 |
NGX_USE_LOWAT_EVENT
;

220 
√víts
 = 
kcf
->
evíts
;

222 
ngx_io
 = 
ngx_os_io
;

224 
ngx_evít_a˘i⁄s
 = 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
;

226  
NGX_OK
;

227 
	}
}

230 #ifde‡
EVFILT_USER


232 
ngx_öt_t


233 
	$ngx_kqueue_nŸify_öô
(
ngx_log_t
 *
log
)

235 
nŸify_kev
.
idít
 = 0;

236 
nŸify_kev
.
fûãr
 = 
EVFILT_USER
;

237 
nŸify_kev
.
d©a
 = 0;

238 
nŸify_kev
.
Êags
 = 
EV_ADD
|
EV_CLEAR
;

239 
nŸify_kev
.
fÊags
 = 0;

240 
nŸify_kev
.
ud©a
 = 0;

242 i‡(
	`kevít
(
ngx_kqueue
, &
nŸify_kev
, 1, 
NULL
, 0, NULL) == -1) {

243 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

245  
NGX_ERROR
;

248 
nŸify_evít
.
a˘ive
 = 1;

249 
nŸify_evít
.
log
 =Üog;

251 
nŸify_kev
.
Êags
 = 0;

252 
nŸify_kev
.
fÊags
 = 
NOTE_TRIGGER
;

253 
nŸify_kev
.
ud©a
 = 
	`NGX_KQUEUE_UDATA_T
 ((
uöçå_t
Ë&
nŸify_evít
);

255  
NGX_OK
;

256 
	}
}

262 
	$ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

264 i‡(
	`˛o£
(
ngx_kqueue
) == -1) {

265 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

269 
ngx_kqueue
 = -1;

271 
	`ngx_‰ì
(
ch™ge_li°
);

272 
	`ngx_‰ì
(
evít_li°
);

274 
ch™ge_li°
 = 
NULL
;

275 
evít_li°
 = 
NULL
;

276 
max_ch™ges
 = 0;

277 
nch™ges
 = 0;

278 
√víts
 = 0;

279 
	}
}

282 
ngx_öt_t


283 
	$ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

285 
ngx_öt_t
 
rc
;

287 
ngx_evít_t
 *
e
;

288 
ngx_c⁄√˘i⁄_t
 *
c
;

291 
ev
->
a˘ive
 = 1;

292 
ev
->
dißbÀd
 = 0;

293 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

297 i‡(
ev
->
ödex
 < 
nch™ges


298 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

299 =(
uöçå_t
Ë
ev
)

301 i‡(
ch™ge_li°
[
ev
->
ödex
].
Êags
 =
EV_DISABLE
) {

308 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

310 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

312 i‡(
ev
->
ödex
 < --
nch™ges
) {

313 
e
 = (
ngx_evít_t
 *)

314 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

315 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

316 
e
->
ödex
 = 
ev
->index;

319  
NGX_OK
;

322 
c
 = 
ev
->
d©a
;

324 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

325 "¥eviou†evíà⁄ #%d wîênŸÖas£d i¿kî√l", 
c
->
fd
);

327  
NGX_ERROR
;

332 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
EV_ADD
|
EV_ENABLE
|
Êags
);

334  
rc
;

335 
	}
}

338 
ngx_öt_t


339 
	$ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

341 
ngx_öt_t
 
rc
;

342 
ngx_evít_t
 *
e
;

344 
ev
->
a˘ive
 = 0;

345 
ev
->
dißbÀd
 = 0;

347 i‡(
ev
->
ödex
 < 
nch™ges


348 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

349 =(
uöçå_t
Ë
ev
)

351 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

353 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

357 
nch™ges
--;

359 i‡(
ev
->
ödex
 < 
nch™ges
) {

360 
e
 = (
ngx_evít_t
 *)

361 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

362 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

363 
e
->
ödex
 = 
ev
->index;

366  
NGX_OK
;

375 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

376  
NGX_OK
;

379 i‡(
Êags
 & 
NGX_DISABLE_EVENT
) {

380 
ev
->
dißbÀd
 = 1;

383 
Êags
 |
EV_DELETE
;

386 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
Êags
);

388  
rc
;

389 
	}
}

392 
ngx_öt_t


393 
	$ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
fûãr
, 
ngx_uöt_t
 
Êags
)

395 
kevít
 *
kev
;

396 
time•ec
 
ts
;

397 
ngx_c⁄√˘i⁄_t
 *
c
;

399 
c
 = 
ev
->
d©a
;

401 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

403 
c
->
fd
, 
fûãr
, 
Êags
);

405 i‡(
nch™ges
 >
max_ch™ges
) {

406 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

409 
ts
.
tv_£c
 = 0;

410 
ts
.
tv_n£c
 = 0;

412 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

415 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

416  
NGX_ERROR
;

419 
nch™ges
 = 0;

422 
kev
 = &
ch™ge_li°
[
nch™ges
];

424 
kev
->
idít
 = 
c
->
fd
;

425 
kev
->
fûãr
 = () filter;

426 
kev
->
Êags
 = (
u_sh‹t
) flags;

427 
kev
->
ud©a
 = 
	`NGX_KQUEUE_UDATA_T
 ((
uöçå_t
Ë
ev
 |Év->
ö°™˚
);

429 i‡(
fûãr
 =
EVFILT_VNODE
) {

430 
kev
->
fÊags
 = 
NOTE_DELETE
|
NOTE_WRITE
|
NOTE_EXTEND


431 |
NOTE_ATTRIB
|
NOTE_RENAME


432 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 430000) \

433 || 
__FªeBSD_vîsi⁄
 >= 500018

434 |
NOTE_REVOKE


437 
kev
->
d©a
 = 0;

440 #i‡(
NGX_HAVE_LOWAT_EVENT
)

441 i‡(
Êags
 & 
NGX_LOWAT_EVENT
) {

442 
kev
->
fÊags
 = 
NOTE_LOWAT
;

443 
kev
->
d©a
 = 
ev
->
avaûabÀ
;

446 
kev
->
fÊags
 = 0;

447 
kev
->
d©a
 = 0;

450 
kev
->
fÊags
 = 0;

451 
kev
->
d©a
 = 0;

455 
ev
->
ödex
 = 
nch™ges
;

456 
nch™ges
++;

458 i‡(
Êags
 & 
NGX_FLUSH_EVENT
) {

459 
ts
.
tv_£c
 = 0;

460 
ts
.
tv_n£c
 = 0;

462 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "kevent flush");

464 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

467 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

468  
NGX_ERROR
;

471 
nch™ges
 = 0;

474  
NGX_OK
;

475 
	}
}

478 #ifde‡
EVFILT_USER


480 
ngx_öt_t


481 
	$ngx_kqueue_nŸify
(
ngx_evít_h™dÀr_±
 
h™dÀr
)

483 
nŸify_evít
.
h™dÀr
 = handler;

485 i‡(
	`kevít
(
ngx_kqueue
, &
nŸify_kev
, 1, 
NULL
, 0, NULL) == -1) {

486 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
nŸify_evít
.
log
, 
ngx_î∫o
,

488  
NGX_ERROR
;

491  
NGX_OK
;

492 
	}
}

497 
ngx_öt_t


498 
	$ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

499 
ngx_uöt_t
 
Êags
)

501 
evíts
, 
n
;

502 
ngx_öt_t
 
i
, 
ö°™˚
;

503 
ngx_uöt_t
 
Àvñ
;

504 
ngx_îr_t
 
îr
;

505 
ngx_evít_t
 *
ev
;

506 
ngx_queue_t
 *
queue
;

507 
time•ec
 
ts
, *
ç
;

509 
n
 = (Ë
nch™ges
;

510 
nch™ges
 = 0;

512 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

513 
ç
 = 
NULL
;

517 
ts
.
tv_£c
 = 
timî
 / 1000;

518 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

526 #i‡(
NGX_DARWIN_KEVENT_BUG
)

527 
ts
.
tv_n£c
 <<= 32;

530 
ç
 = &
ts
;

533 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

534 "kevíàtimî: %M, ch™ges: %d", 
timî
, 
n
);

536 
evíts
 = 
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, 
n
, 
evít_li°
, (Ë
√víts
, 
ç
);

538 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

540 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

541 
	`ngx_time_upd©e
();

544 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

545 "kevíàevíts: %d", 
evíts
);

547 i‡(
îr
) {

548 i‡(
îr
 =
NGX_EINTR
) {

550 i‡(
ngx_evít_timî_Æ¨m
) {

551 
ngx_evít_timî_Æ¨m
 = 0;

552  
NGX_OK
;

555 
Àvñ
 = 
NGX_LOG_INFO
;

558 
Àvñ
 = 
NGX_LOG_ALERT
;

561 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "kevent() failed");

562  
NGX_ERROR
;

565 i‡(
evíts
 == 0) {

566 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

567  
NGX_OK
;

570 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

572  
NGX_ERROR
;

575 
i
 = 0; i < 
evíts
; i++) {

577 
	`ngx_kqueue_dump_evít
(
cy˛e
->
log
, &
evít_li°
[
i
]);

579 i‡(
evít_li°
[
i
].
Êags
 & 
EV_ERROR
) {

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
evít_li°
[
i
].
d©a
,

582 
evít_li°
[
i
].
idít
,Évít_li°[i].
fûãr
,

583 
evít_li°
[
i
].
Êags
);

587 #i‡(
NGX_HAVE_TIMER_EVENT
)

589 i‡(
evít_li°
[
i
].
fûãr
 =
EVFILT_TIMER
) {

590 
	`ngx_time_upd©e
();

596 
ev
 = (
ngx_evít_t
 *Ë
evít_li°
[
i
].
ud©a
;

598 
evít_li°
[
i
].
fûãr
) {

600 
EVFILT_READ
:

601 
EVFILT_WRITE
:

603 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

604 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

606 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

613 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

614 "kevít: sèÀÉvíà%p", 
ev
);

618 i‡(
ev
->
log
 && (ev->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

619 
	`ngx_kqueue_dump_evít
(
ev
->
log
, &
evít_li°
[
i
]);

622 i‡(
ev
->
⁄eshŸ
) {

623 
ev
->
a˘ive
 = 0;

626 
ev
->
avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

628 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

629 
ev
->
≥ndög_eof
 = 1;

630 
ev
->
kq_î∫o
 = 
evít_li°
[
i
].
fÊags
;

633 
ev
->
ªady
 = 1;

637 
EVFILT_VNODE
:

638 
ev
->
kq_vnode
 = 1;

642 
EVFILT_AIO
:

643 
ev
->
com∂ëe
 = 1;

644 
ev
->
ªady
 = 1;

648 #ifde‡
EVFILT_USER


649 
EVFILT_USER
:

654 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

656 
evít_li°
[
i
].
fûãr
);

660 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

661 
queue
 = 
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


662 : &
ngx_po°ed_evíts
;

664 
	`ngx_po°_evít
(
ev
, 
queue
);

669 
ev
->
	`h™dÀr
(ev);

672  
NGX_OK
;

673 
	}
}

676 
ngx_ölöe
 

677 
	$ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
, 
kevít
 *
kev
)

679 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

680 (
kev
->
idít
 > 0x8000000 && kev->ident != () -1) ?

683 
kev
->
idít
, kev->
fûãr
,

684 
kev
->
Êags
, kev->
fÊags
,

685 
kev
->
d©a
, kev->
ud©a
);

686 
	}
}

690 
	$ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

692 
ngx_kqueue_c⁄f_t
 *
kcf
;

694 
kcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_kqueue_c⁄f_t
));

695 i‡(
kcf
 =
NULL
) {

696  
NULL
;

699 
kcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

700 
kcf
->
evíts
 = 
NGX_CONF_UNSET
;

702  
kcf
;

703 
	}
}

707 
	$ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

709 
ngx_kqueue_c⁄f_t
 *
kcf
 = 
c⁄f
;

711 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
ch™ges
, 512);

712 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
evíts
, 512);

714  
NGX_CONF_OK
;

715 
	}
}

	@src/event/modules/ngx_poll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 *
ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

24 
pﬁlfd
 *
	gevít_li°
;

25 
ngx_uöt_t
 
	g√víts
;

28 
ngx_°r_t
 
	gpﬁl_«me
 = 
ngx_°rög
("poll");

30 
ngx_evít_moduÀ_t
 
	gngx_pﬁl_moduÀ_˘x
 = {

31 &
pﬁl_«me
,

32 
NULL
,

33 
ngx_pﬁl_öô_c⁄f
,

36 
ngx_pﬁl_add_evít
,

37 
ngx_pﬁl_dñ_evít
,

38 
ngx_pﬁl_add_evít
,

39 
ngx_pﬁl_dñ_evít
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
ngx_pﬁl_¥o˚ss_evíts
,

44 
ngx_pﬁl_öô
,

45 
ngx_pﬁl_d⁄e


50 
ngx_moduÀ_t
 
	gngx_pﬁl_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_pﬁl_moduÀ_˘x
,

53 
NULL
,

54 
NGX_EVENT_MODULE
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
ngx_öt_t


68 
	$ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

70 
pﬁlfd
 *
li°
;

72 i‡(
evít_li°
 =
NULL
) {

73 
√víts
 = 0;

76 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


77 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


78 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

80 
li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
cy˛e
->
c⁄√˘i⁄_n
,

81 
cy˛e
->
log
);

82 i‡(
li°
 =
NULL
) {

83  
NGX_ERROR
;

86 i‡(
evít_li°
) {

87 
	`ngx_mem˝y
(
li°
, 
evít_li°
, (
ngx_evít_t
 *Ë* 
√víts
);

88 
	`ngx_‰ì
(
evít_li°
);

91 
evít_li°
 = 
li°
;

94 
ngx_io
 = 
ngx_os_io
;

96 
ngx_evít_a˘i⁄s
 = 
ngx_pﬁl_moduÀ_˘x
.
a˘i⁄s
;

98 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

100  
NGX_OK
;

101 
	}
}

105 
	$ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

107 
	`ngx_‰ì
(
evít_li°
);

109 
evít_li°
 = 
NULL
;

110 
	}
}

113 
ngx_öt_t


114 
	$ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

116 
ngx_evít_t
 *
e
;

117 
ngx_c⁄√˘i⁄_t
 *
c
;

119 
c
 = 
ev
->
d©a
;

121 
ev
->
a˘ive
 = 1;

123 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

125 "pﬁ»evíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

126  
NGX_OK
;

129 i‡(
evít
 =
NGX_READ_EVENT
) {

130 
e
 = 
c
->
wrôe
;

131 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

132 
evít
 = 
POLLIN
;

136 
e
 = 
c
->
ªad
;

137 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

138 
evít
 = 
POLLOUT
;

142 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

143 "pﬁ»addÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

145 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

146 
evít_li°
[
√víts
].
fd
 = 
c
->fd;

147 
evít_li°
[
√víts
].
evíts
 = (Ë
evít
;

148 
evít_li°
[
√víts
].
ªvíts
 = 0;

150 
ev
->
ödex
 = 
√víts
;

151 
√víts
++;

154 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

155 "pﬁ»add index: %i", 
e
->
ödex
);

157 
evít_li°
[
e
->
ödex
].
evíts
 |(Ë
evít
;

158 
ev
->
ödex
 = 
e
->index;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

168 
ngx_evít_t
 *
e
;

169 
ngx_c⁄√˘i⁄_t
 *
c
;

171 
c
 = 
ev
->
d©a
;

173 
ev
->
a˘ive
 = 0;

175 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

178 
c
->
fd
, 
evít
);

179  
NGX_OK
;

182 i‡(
evít
 =
NGX_READ_EVENT
) {

183 
e
 = 
c
->
wrôe
;

184 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

185 
evít
 = 
POLLIN
;

189 
e
 = 
c
->
ªad
;

190 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

191 
evít
 = 
POLLOUT
;

195 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

196 "pﬁ»dñÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

198 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

199 
√víts
--;

201 i‡(
ev
->
ödex
 < 
√víts
) {

203 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

204 "ödex: c›yÉvíà%uòtÿ%i", 
√víts
, 
ev
->
ödex
);

206 
evít_li°
[
ev
->
ödex
] =Évít_li°[
√víts
];

208 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
√víts
].
fd
];

210 i‡(
c
->
fd
 == -1) {

211 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

215 i‡(
c
->
ªad
->
ödex
 =
√víts
) {

216 
c
->
ªad
->
ödex
 = 
ev
->index;

219 i‡(
c
->
wrôe
->
ödex
 =
√víts
) {

220 
c
->
wrôe
->
ödex
 = 
ev
->index;

226 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

227 "pﬁ»dñ index: %i", 
e
->
ödex
);

229 
evít_li°
[
e
->
ödex
].
evíts
 &(Ë~
evít
;

232 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

234  
NGX_OK
;

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

241 
ªady
, 
ªvíts
;

242 
ngx_îr_t
 
îr
;

243 
ngx_uöt_t
 
i
, 
found
, 
Àvñ
;

244 
ngx_evít_t
 *
ev
;

245 
ngx_queue_t
 *
queue
;

246 
ngx_c⁄√˘i⁄_t
 *
c
;

250 #i‡(
NGX_DEBUG0
)

251 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

252 
i
 = 0; i < 
√víts
; i++) {

253 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

255 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
);

260 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "pﬁ»timî: %M", 
timî
);

262 
ªady
 = 
	`pﬁl
(
evít_li°
, (
u_öt
Ë
√víts
, (Ë
timî
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "pﬁ»ªady %d o‡%ui", 
ªady
, 
√víts
);

273 i‡(
îr
) {

274 i‡(
îr
 =
NGX_EINTR
) {

276 i‡(
ngx_evít_timî_Æ¨m
) {

277 
ngx_evít_timî_Æ¨m
 = 0;

278  
NGX_OK
;

281 
Àvñ
 = 
NGX_LOG_INFO
;

284 
Àvñ
 = 
NGX_LOG_ALERT
;

287 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "poll() failed");

288  
NGX_ERROR
;

291 i‡(
ªady
 == 0) {

292 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

293  
NGX_OK
;

296 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

298  
NGX_ERROR
;

301 
i
 = 0; i < 
√víts
 && 
ªady
; i++) {

303 
ªvíts
 = 
evít_li°
[
i
].revents;

306 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

308 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

310 i‡(
ªvíts
) {

311 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

313 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

317 i‡(
ªvíts
 & 
POLLNVAL
) {

318 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

320 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

323 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

324 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

326 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

329 i‡(
evít_li°
[
i
].
fd
 == -1) {

337 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
i
].
fd
];

339 i‡(
c
->
fd
 == -1) {

340 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "unexpectedÉvent");

347 i‡(
i
 =
√víts
 - 1) {

348 
√víts
--;

350 
evít_li°
[
i
].
fd
 = -1;

356 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

357 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

365 
ªvíts
 |
POLLIN
|
POLLOUT
;

368 
found
 = 0;

370 i‡((
ªvíts
 & 
POLLIN
Ë&& 
c
->
ªad
->
a˘ive
) {

371 
found
 = 1;

373 
ev
 = 
c
->
ªad
;

374 
ev
->
ªady
 = 1;

376 
queue
 = 
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


377 : &
ngx_po°ed_evíts
;

379 
	`ngx_po°_evít
(
ev
, 
queue
);

382 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
c
->
wrôe
->
a˘ive
) {

383 
found
 = 1;

385 
ev
 = 
c
->
wrôe
;

386 
ev
->
ªady
 = 1;

388 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

391 i‡(
found
) {

392 
ªady
--;

397 i‡(
ªady
 != 0) {

398 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "pollÑeady !=Évents");

401  
NGX_OK
;

402 
	}
}

406 
	$ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

408 
ngx_evít_c⁄f_t
 *
ecf
;

410 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

412 i‡(
ecf
->
u£
 !
ngx_pﬁl_moduÀ
.
˘x_ödex
) {

413  
NGX_CONF_OK
;

416 #i‡(
NGX_OLD_THREADS
)

418 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

420  
NGX_CONF_ERROR
;

424  
NGX_CONF_OK
;

427 
	}
}

	@src/event/modules/ngx_rtsig_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_RTSIG
)

15 #i‡(
NGX_DARWIN
)

17 
	#SIGRTMIN
 33

	)

18 
	#si_fd
 
__∑d
[0]

	)

22 #ifde‡ 
SIGRTMIN


23 
	#si_fd
 
_ªas⁄
.
__•¨e__
.
__•¨e2__
[0]

	)

25 
	#SIGRTMIN
 33

	)

26 
	#si_fd
 
__•¨e__
[0]

	)

31 
	#F_SETSIG
 10

	)

32 
	#KERN_RTSIGNR
 30

	)

33 
	#KERN_RTSIGMAX
 31

	)

35 
sigtimedwaô
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
,

36 c⁄° 
time•ec
 *
timeout
);

38 
	$sigtimedwaô
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
,

39 c⁄° 
time•ec
 *
timeout
)

42 
	}
}

44 
	gngx_löux_πsig_max
;

50 
ngx_uöt_t
 
	msigno
;

51 
ngx_uöt_t
 
	movîÊow_evíts
;

52 
ngx_uöt_t
 
	movîÊow_ã°
;

53 
ngx_uöt_t
 
	movîÊow_thªshﬁd
;

54 } 
	tngx_πsig_c⁄f_t
;

57 
ngx_evít_moduÀ_t
 
ngx_pﬁl_moduÀ_˘x
;

59 
ngx_öt_t
 
ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

60 
ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

61 
ngx_öt_t
 
ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

62 
ngx_öt_t
 
ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

63 
ngx_uöt_t
 
Êags
);

64 
ngx_öt_t
 
ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

65 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

66 
ngx_öt_t
 
ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
,

67 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

69 *
ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

70 *
ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

71 *
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
,

72 *
po°
, *
d©a
);

75 
sig£t_t
 
	g£t
;

76 
ngx_uöt_t
 
	govîÊow
, 
	govîÊow_cuºít
;

77 
pﬁlfd
 *
	govîÊow_li°
;

80 
ngx_°r_t
 
	gπsig_«me
 = 
ngx_°rög
("rtsig");

82 
ngx_c⁄f_num_bounds_t
 
	gngx_ovîÊow_thªshﬁd_bounds
 = {

83 
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
, 2, 10

87 
ngx_comm™d_t
 
	gngx_πsig_comm™ds
[] = {

89 { 
ngx_°rög
("rtsig_signo"),

90 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

91 
ngx_c⁄f_£t_num_¶Ÿ
,

93 
off£tof
(
ngx_πsig_c⁄f_t
, 
signo
),

94 
NULL
 },

96 { 
ngx_°rög
("rtsig_overflow_events"),

97 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_num_¶Ÿ
,

100 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_evíts
),

101 
NULL
 },

103 { 
ngx_°rög
("rtsig_overflow_test"),

104 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

105 
ngx_c⁄f_£t_num_¶Ÿ
,

107 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_ã°
),

108 
NULL
 },

110 { 
ngx_°rög
("rtsig_overflow_threshold"),

111 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

112 
ngx_c⁄f_£t_num_¶Ÿ
,

114 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_thªshﬁd
),

115 &
ngx_ovîÊow_thªshﬁd_bounds
 },

117 
ngx_nuŒ_comm™d


121 
ngx_evít_moduÀ_t
 
	gngx_πsig_moduÀ_˘x
 = {

122 &
πsig_«me
,

123 
ngx_πsig_¸óã_c⁄f
,

124 
ngx_πsig_öô_c⁄f
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
ngx_πsig_add_c⁄√˘i⁄
,

132 
ngx_πsig_dñ_c⁄√˘i⁄
,

133 
NULL
,

134 
ngx_πsig_¥o˚ss_evíts
,

135 
ngx_πsig_öô
,

136 
ngx_πsig_d⁄e
,

141 
ngx_moduÀ_t
 
	gngx_πsig_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_πsig_moduÀ_˘x
,

144 
ngx_πsig_comm™ds
,

145 
NGX_EVENT_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


157 
ngx_öt_t


158 
	$ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

160 
ngx_πsig_c⁄f_t
 *
πscf
;

162 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

164 
	`sigem±y£t
(&
£t
);

165 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
);

166 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
 + 1);

167 
	`sigadd£t
(&
£t
, 
SIGIO
);

168 
	`sigadd£t
(&
£t
, 
SIGALRM
);

170 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

171 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

173  
NGX_ERROR
;

176 i‡(
ovîÊow_li°
) {

177 
	`ngx_‰ì
(
ovîÊow_li°
);

180 
ovîÊow_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
πscf
->
ovîÊow_evíts
,

181 
cy˛e
->
log
);

182 i‡(
ovîÊow_li°
 =
NULL
) {

183  
NGX_ERROR
;

186 
ngx_io
 = 
ngx_os_io
;

188 
ngx_evít_a˘i⁄s
 = 
ngx_πsig_moduÀ_˘x
.
a˘i⁄s
;

190 
ngx_evít_Êags
 = 
NGX_USE_RTSIG_EVENT


191 |
NGX_USE_GREEDY_EVENT


192 |
NGX_USE_FD_EVENT
;

194  
NGX_OK
;

195 
	}
}

199 
	$ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

201 
	`ngx_‰ì
(
ovîÊow_li°
);

203 
ovîÊow_li°
 = 
NULL
;

204 
	}
}

207 
ngx_öt_t


208 
	$ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

210 
ngx_uöt_t
 
signo
;

211 
ngx_πsig_c⁄f_t
 *
πscf
;

213 i‡(
c
->
ªad
->
ac˚±
 && c->ªad->
dißbÀd
) {

215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

216 "πsigÉ«bÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

218 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

219 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

221  
NGX_ERROR
;

224 
c
->
ªad
->
a˘ive
 = 1;

225 
c
->
ªad
->
dißbÀd
 = 0;

228 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

230 
signo
 = 
πscf
->signÿ+ 
c
->
ªad
->
ö°™˚
;

232 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

233 "πsigádd c⁄√˘i⁄: fd:%d signo:%ui", 
c
->
fd
, 
signo
);

235 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
|
O_ASYNC
) == -1) {

236 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

238  
NGX_ERROR
;

241 i‡(
	`f˙é
(
c
->
fd
, 
F_SETSIG
, (Ë
signo
) == -1) {

242 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

244  
NGX_ERROR
;

247 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

248 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

250  
NGX_ERROR
;

253 #i‡(
NGX_HAVE_ONESIGFD
)

254 i‡(
	`f˙é
(
c
->
fd
, 
F_SETAUXFL
, 
O_ONESIGFD
) == -1) {

255 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

257  
NGX_ERROR
;

261 
c
->
ªad
->
a˘ive
 = 1;

262 
c
->
wrôe
->
a˘ive
 = 1;

264  
NGX_OK
;

265 
	}
}

268 
ngx_öt_t


269 
	$ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

271 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

272 "πsig dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

274 i‡((
Êags
 & 
NGX_DISABLE_EVENT
Ë&& 
c
->
ªad
->
ac˚±
) {

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

277 "πsig dißbÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

279 
c
->
ªad
->
a˘ive
 = 0;

280 
c
->
ªad
->
dißbÀd
 = 1;

281  
NGX_OK
;

284 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

285 
c
->
ªad
->
a˘ive
 = 0;

286 
c
->
wrôe
->
a˘ive
 = 0;

287  
NGX_OK
;

290 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
) == -1) {

291 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

293  
NGX_ERROR
;

296 
c
->
ªad
->
a˘ive
 = 0;

297 
c
->
wrôe
->
a˘ive
 = 0;

299  
NGX_OK
;

300 
	}
}

303 
ngx_öt_t


304 
	$ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

306 
signo
;

307 
ngx_öt_t
 
ö°™˚
;

308 
ngx_îr_t
 
îr
;

309 
sigöfo_t
 
si
;

310 
ngx_evít_t
 *
ªv
, *
wev
;

311 
ngx_queue_t
 *
queue
;

312 
time•ec
 
ts
, *
ç
;

313 
siga˘i⁄
 
ß
;

314 
ngx_c⁄√˘i⁄_t
 *
c
;

315 
ngx_πsig_c⁄f_t
 *
πscf
;

317 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

318 
ç
 = 
NULL
;

321 
ts
.
tv_£c
 = 
timî
 / 1000;

322 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

323 
ç
 = &
ts
;

326 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

327 "πsigÅimî: %M", 
timî
);

331 
signo
 = 
	`sigtimedwaô
(&
£t
, &
si
, 
ç
);

333 i‡(
signo
 == -1) {

334 
îr
 = 
ngx_î∫o
;

336 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 
îr
,

337 "πsig signo:%d", 
signo
);

339 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

340 
	`ngx_time_upd©e
();

343 i‡(
îr
 =
NGX_EAGAIN
) {

347 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

348  
NGX_AGAIN
;

351 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

353  
NGX_ERROR
;

356 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

357 
cy˛e
->
log
, 
îr
, "sigtimedwait() failed");

358  
NGX_ERROR
;

361 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

363 
signo
, 
si
.
si_fd
, si.
si_b™d
);

365 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

366 
	`ngx_time_upd©e
();

369 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

371 i‡(
signo
 =(Ë
πscf
->signo || signo == ()Ñtscf->signo + 1) {

373 i‡(
ovîÊow
 && (
ngx_uöt_t
Ë
si
.
si_fd
 > 
ovîÊow_cuºít
) {

374  
NGX_OK
;

377 
c
 = 
ngx_cy˛e
->
fûes
[
si
.
si_fd
];

379 i‡(
c
 =
NULL
) {

383  
NGX_OK
;

386 
ö°™˚
 = 
signo
 - (Ë
πscf
->signo;

388 
ªv
 = 
c
->
ªad
;

390 i‡(
ªv
->
ö°™˚
 != instance) {

397 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

398 "πsig: sèÀÉvíà%p", 
c
);

400  
NGX_OK
;

403 i‡((
si
.
si_b™d
 & (
POLLIN
|
POLLHUP
|
POLLERR
)Ë&& 
ªv
->
a˘ive
) {

405 
ªv
->
ªady
 = 1;

407 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

408 
queue
 = 
ªv
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


409 : &
ngx_po°ed_evíts
;

411 
	`ngx_po°_evít
(
ªv
, 
queue
);

414 
ªv
->
	`h™dÀr
(rev);

418 
wev
 = 
c
->
wrôe
;

420 i‡((
si
.
si_b™d
 & (
POLLOUT
|
POLLHUP
|
POLLERR
)Ë&& 
wev
->
a˘ive
) {

422 
wev
->
ªady
 = 1;

424 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

425 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

428 
wev
->
	`h™dÀr
(wev);

432  
NGX_OK
;

434 } i‡(
signo
 =
SIGALRM
) {

436 
	`ngx_time_upd©e
();

438  
NGX_OK
;

440 } i‡(
signo
 =
SIGIO
) {

442 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

447 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

448 
ß
.
ß_h™dÀr
 = 
SIG_DFL
;

449 
	`sigem±y£t
(&
ß
.
ß_mask
);

451 i‡(
	`siga˘i⁄
(
πscf
->
signo
, &
ß
, 
NULL
) == -1) {

452 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

453 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
);

456 i‡(
	`siga˘i⁄
(
πscf
->
signo
 + 1, &
ß
, 
NULL
) == -1) {

457 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

458 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
 + 1);

461 
ovîÊow
 = 1;

462 
ovîÊow_cuºít
 = 0;

463 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_ovîÊow
;

465  
NGX_ERROR
;

469 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

470 "sigtimedwaô(Ëªtu∫ed u√x≥˘ed sig«l: %d", 
signo
);

472  
NGX_ERROR
;

473 
	}
}

476 
ngx_öt_t


477 
	$ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

478 
ngx_uöt_t
 
Êags
)

480 
«me
[2], 
πsig_max
, 
πsig_ƒ
, 
evíts
, 
ªady
;

481 
size_t
 
Àn
;

482 
ngx_îr_t
 
îr
;

483 
ngx_uöt_t
 
ã°ed
, 
n
, 
i
;

484 
ngx_evít_t
 *
ªv
, *
wev
;

485 
ngx_queue_t
 *
queue
;

486 
ngx_c⁄√˘i⁄_t
 *
c
;

487 
ngx_πsig_c⁄f_t
 *
πscf
;

489 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

492 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

494 
ã°ed
 = 0;

498 
n
 = 0;

499 
n
 < 
πscf
->
ovîÊow_evíts
) {

501 i‡(
ovîÊow_cuºít
 =
cy˛e
->
c⁄√˘i⁄_n
) {

505 
c
 = 
cy˛e
->
fûes
[
ovîÊow_cuºít
++];

507 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

511 
evíts
 = 0;

513 i‡(
c
->
ªad
->
a˘ive
 && c->ªad->
h™dÀr
) {

514 
evíts
 |
POLLIN
;

517 i‡(
c
->
wrôe
->
a˘ive
 && c->wrôe->
h™dÀr
) {

518 
evíts
 |
POLLOUT
;

521 i‡(
evíts
 == 0) {

525 
ovîÊow_li°
[
n
].
fd
 = 
c
->fd;

526 
ovîÊow_li°
[
n
].
evíts
 =Évents;

527 
ovîÊow_li°
[
n
].
ªvíts
 = 0;

528 
n
++;

531 i‡(
n
 == 0) {

536 
ªady
 = 
	`pﬁl
(
ovîÊow_li°
, 
n
, 0);

538 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

539 "πsig ovîÊowÖﬁl:%d", 
ªady
);

541 i‡(
ªady
 == -1) {

542 
îr
 = 
ngx_î∫o
;

543 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

544 
cy˛e
->
log
, 0,

547 i‡(
îr
 =
NGX_EINTR
) {

555 i‡(
ªady
 <= 0) {

559 
i
 = 0; i < 
n
; i++) {

560 
c
 = 
cy˛e
->
fûes
[
ovîÊow_li°
[
i
].
fd
];

562 i‡(
c
 =
NULL
) {

566 
ªv
 = 
c
->
ªad
;

568 i‡(
ªv
->
a˘ive


569 && !
ªv
->
˛o£d


570 && 
ªv
->
h™dÀr


571 && (
ovîÊow_li°
[
i
].
ªvíts


572 & (
POLLIN
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

574 
ã°ed
++;

576 
ªv
->
ªady
 = 1;

578 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

579 
queue
 = 
ªv
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


580 : &
ngx_po°ed_evíts
;

582 
	`ngx_po°_evít
(
ªv
, 
queue
);

585 
ªv
->
	`h™dÀr
(rev);

589 
wev
 = 
c
->
wrôe
;

591 i‡(
wev
->
a˘ive


592 && !
wev
->
˛o£d


593 && 
wev
->
h™dÀr


594 && (
ovîÊow_li°
[
i
].
ªvíts


595 & (
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

597 
ã°ed
++;

599 
wev
->
ªady
 = 1;

601 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

602 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

605 
wev
->
	`h™dÀr
(wev);

610 i‡(
ã°ed
 >
πscf
->
ovîÊow_ã°
) {

612 i‡(
ngx_löux_πsig_max
) {

622 
«me
[0] = 
CTL_KERN
;

623 
«me
[1] = 
KERN_RTSIGMAX
;

624 
Àn
 = (
πsig_max
);

626 i‡(
	`sys˘l
(
«me
, 2, &
πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

627 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

629  
NGX_ERROR
;

633 
«me
[1] = 
KERN_RTSIGNR
;

634 
Àn
 = (
πsig_ƒ
);

636 i‡(
	`sys˘l
(
«me
, 2, &
πsig_ƒ
, &
Àn
, 
NULL
, 0) == -1) {

637 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

639  
NGX_ERROR
;

648 i‡(
πsig_max
 / (Ë
πscf
->
ovîÊow_thªshﬁd
 < 
πsig_ƒ
) {

649 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

651 
πsig_ƒ
, 
πsig_max
);

652 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
)

665 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
) {

670 
ã°ed
 = 0;

674 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

675 
	`ngx_time_upd©e
();

678 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

681 
ovîÊow
 = 0;

682 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_evíts
;

684  
NGX_OK
;

685 
	}
}

689 
	$ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

691 
ngx_πsig_c⁄f_t
 *
πscf
;

693 
πscf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_πsig_c⁄f_t
));

694 i‡(
πscf
 =
NULL
) {

695  
NULL
;

698 
πscf
->
signo
 = 
NGX_CONF_UNSET
;

699 
πscf
->
ovîÊow_evíts
 = 
NGX_CONF_UNSET
;

700 
πscf
->
ovîÊow_ã°
 = 
NGX_CONF_UNSET
;

701 
πscf
->
ovîÊow_thªshﬁd
 = 
NGX_CONF_UNSET
;

703  
πscf
;

704 
	}
}

708 
	$ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

710 
ngx_πsig_c⁄f_t
 *
πscf
 = 
c⁄f
;

713 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
signo
, 
SIGRTMIN
 + 10);

715 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_evíts
, 16);

716 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_ã°
, 32);

717 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_thªshﬁd
, 10);

719  
NGX_CONF_OK
;

720 
	}
}

724 
	$ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

726 i‡(
ngx_löux_πsig_max
) {

727  
	`ngx_c⁄f_check_num_bounds
(
cf
, 
po°
, 
d©a
);

730 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

734  
NGX_CONF_OK
;

735 
	}
}

	@src/event/modules/ngx_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_öt_t
 
	gmax_fd
;

31 
ngx_uöt_t
 
	g√víts
;

33 
ngx_evít_t
 **
	gevít_ödex
;

36 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

38 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

39 &
£À˘_«me
,

40 
NULL
,

41 
ngx_£À˘_öô_c⁄f
,

44 
ngx_£À˘_add_evít
,

45 
ngx_£À˘_dñ_evít
,

46 
ngx_£À˘_add_evít
,

47 
ngx_£À˘_dñ_evít
,

48 
NULL
,

49 
NULL
,

50 
NULL
,

51 
ngx_£À˘_¥o˚ss_evíts
,

52 
ngx_£À˘_öô
,

53 
ngx_£À˘_d⁄e


58 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_£À˘_moduÀ_˘x
,

61 
NULL
,

62 
NGX_EVENT_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

77 
ngx_evít_t
 **
ödex
;

79 i‡(
evít_ödex
 =
NULL
) {

80 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

81 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

82 
√víts
 = 0;

85 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


86 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


87 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

89 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

90 
cy˛e
->
log
);

91 i‡(
ödex
 =
NULL
) {

92  
NGX_ERROR
;

95 i‡(
evít_ödex
) {

96 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

97 
	`ngx_‰ì
(
evít_ödex
);

100 
evít_ödex
 = 
ödex
;

103 
ngx_io
 = 
ngx_os_io
;

105 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

107 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

109 
max_fd
 = -1;

111  
NGX_OK
;

112 
	}
}

116 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

118 
	`ngx_‰ì
(
evít_ödex
);

120 
evít_ödex
 = 
NULL
;

121 
	}
}

124 
ngx_öt_t


125 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

127 
ngx_c⁄√˘i⁄_t
 *
c
;

129 
c
 = 
ev
->
d©a
;

131 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

132 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

134 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

136 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

137  
NGX_OK
;

140 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

141 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

145 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

146  
NGX_ERROR
;

149 i‡(
evít
 =
NGX_READ_EVENT
) {

150 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

152 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

153 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

156 i‡(
max_fd
 !-1 && max_fd < 
c
->
fd
) {

157 
max_fd
 = 
c
->
fd
;

160 
ev
->
a˘ive
 = 1;

162 
evít_ödex
[
√víts
] = 
ev
;

163 
ev
->
ödex
 = 
√víts
;

164 
√víts
++;

166  
NGX_OK
;

167 
	}
}

170 
ngx_öt_t


171 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

173 
ngx_evít_t
 *
e
;

174 
ngx_c⁄√˘i⁄_t
 *
c
;

176 
c
 = 
ev
->
d©a
;

178 
ev
->
a˘ive
 = 0;

180 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

181  
NGX_OK
;

184 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

185 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

187 i‡(
evít
 =
NGX_READ_EVENT
) {

188 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

190 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

191 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

194 i‡(
max_fd
 =
c
->
fd
) {

195 
max_fd
 = -1;

198 i‡(
ev
->
ödex
 < --
√víts
) {

199 
e
 = 
evít_ödex
[
√víts
];

200 
evít_ödex
[
ev
->
ödex
] = 
e
;

201 
e
->
ödex
 = 
ev
->index;

204 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

206  
NGX_OK
;

207 
	}
}

210 
ngx_öt_t


211 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

212 
ngx_uöt_t
 
Êags
)

214 
ªady
, 
ƒódy
;

215 
ngx_îr_t
 
îr
;

216 
ngx_uöt_t
 
i
, 
found
;

217 
ngx_evít_t
 *
ev
;

218 
ngx_queue_t
 *
queue
;

219 
timevÆ
 
tv
, *
ç
;

220 
ngx_c⁄√˘i⁄_t
 *
c
;

222 i‡(
max_fd
 == -1) {

223 
i
 = 0; i < 
√víts
; i++) {

224 
c
 = 
evít_ödex
[
i
]->
d©a
;

225 i‡(
max_fd
 < 
c
->
fd
) {

226 
max_fd
 = 
c
->
fd
;

230 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

231 "ch™gêmax_fd: %i", 
max_fd
);

234 #i‡(
NGX_DEBUG
)

235 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

236 
i
 = 0; i < 
√víts
; i++) {

237 
ev
 = 
evít_ödex
[
i
];

238 
c
 = 
ev
->
d©a
;

239 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

240 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

243 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

244 "max_fd: %i", 
max_fd
);

248 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

249 
ç
 = 
NULL
;

252 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

253 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

254 
ç
 = &
tv
;

257 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

258 "£À˘Åimî: %M", 
timî
);

260 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

261 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

263 
ªady
 = 
	`£À˘
(
max_fd
 + 1, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

265 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

267 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

268 
	`ngx_time_upd©e
();

271 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

272 "£À˘Ñódy %d", 
ªady
);

274 i‡(
îr
) {

275 
ngx_uöt_t
 
Àvñ
;

277 i‡(
îr
 =
NGX_EINTR
) {

279 i‡(
ngx_evít_timî_Æ¨m
) {

280 
ngx_evít_timî_Æ¨m
 = 0;

281  
NGX_OK
;

284 
Àvñ
 = 
NGX_LOG_INFO
;

287 
Àvñ
 = 
NGX_LOG_ALERT
;

290 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "select() failed");

292 i‡(
îr
 =
NGX_EBADF
) {

293 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

296  
NGX_ERROR
;

299 i‡(
ªady
 == 0) {

300 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

301  
NGX_OK
;

304 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

306  
NGX_ERROR
;

309 
ƒódy
 = 0;

311 
i
 = 0; i < 
√víts
; i++) {

312 
ev
 = 
evít_ödex
[
i
];

313 
c
 = 
ev
->
d©a
;

314 
found
 = 0;

316 i‡(
ev
->
wrôe
) {

317 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

318 
found
 = 1;

319 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

320 "£À˘ wrôê%d", 
c
->
fd
);

324 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

325 
found
 = 1;

326 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

327 "£À˘Ñód %d", 
c
->
fd
);

331 i‡(
found
) {

332 
ev
->
ªady
 = 1;

334 
queue
 = 
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


335 : &
ngx_po°ed_evíts
;

337 
	`ngx_po°_evít
(
ev
, 
queue
);

339 
ƒódy
++;

343 i‡(
ªady
 !
ƒódy
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

345 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

347 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

350  
NGX_OK
;

351 
	}
}

355 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

357 
n
;

358 
sockÀn_t
 
Àn
;

359 
ngx_îr_t
 
îr
;

360 
ngx_sockë_t
 
s
;

362 
s
 = 0; s <
max_fd
; s++) {

364 i‡(
	`FD_ISSET
(
s
, &
ma°î_ªad_fd_£t
) == 0) {

368 
Àn
 = ();

370 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

371 
îr
 = 
ngx_sockë_î∫o
;

373 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

374 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

376 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

380 
s
 = 0; s <
max_fd
; s++) {

382 i‡(
	`FD_ISSET
(
s
, &
ma°î_wrôe_fd_£t
) == 0) {

386 
Àn
 = ();

388 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

389 
îr
 = 
ngx_sockë_î∫o
;

391 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

392 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

394 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

398 
max_fd
 = -1;

399 
	}
}

403 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

405 
ngx_evít_c⁄f_t
 *
ecf
;

407 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

409 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

410  
NGX_CONF_OK
;

415 i‡(
cy˛e
->
c⁄√˘i⁄_n
 > 
FD_SETSIZE
) {

416 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

418 "suµ‹ãd by sñe˘(Ëi†%ud", 
FD_SETSIZE
);

419  
NGX_CONF_ERROR
;

422 #i‡(
NGX_OLD_THREADS
)

424 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

426  
NGX_CONF_ERROR
;

430  
NGX_CONF_OK
;

433 
	}
}

	@src/event/modules/ngx_win32_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_uöt_t
 
	gmax_ªad
;

31 
ngx_uöt_t
 
	gmax_wrôe
;

32 
ngx_uöt_t
 
	g√víts
;

34 
ngx_evít_t
 **
	gevít_ödex
;

37 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

39 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

40 &
£À˘_«me
,

41 
NULL
,

42 
ngx_£À˘_öô_c⁄f
,

45 
ngx_£À˘_add_evít
,

46 
ngx_£À˘_dñ_evít
,

47 
ngx_£À˘_add_evít
,

48 
ngx_£À˘_dñ_evít
,

49 
NULL
,

50 
NULL
,

51 
NULL
,

52 
ngx_£À˘_¥o˚ss_evíts
,

53 
ngx_£À˘_öô
,

54 
ngx_£À˘_d⁄e


59 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_£À˘_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 
ngx_öt_t


76 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

78 
ngx_evít_t
 **
ödex
;

80 i‡(
evít_ödex
 =
NULL
) {

81 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

82 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

83 
√víts
 = 0;

86 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


87 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


88 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

90 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

91 
cy˛e
->
log
);

92 i‡(
ödex
 =
NULL
) {

93  
NGX_ERROR
;

96 i‡(
evít_ödex
) {

97 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

98 
	`ngx_‰ì
(
evít_ödex
);

101 
evít_ödex
 = 
ödex
;

104 
ngx_io
 = 
ngx_os_io
;

106 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

108 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

110 
max_ªad
 = 0;

111 
max_wrôe
 = 0;

113  
NGX_OK
;

114 
	}
}

118 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

120 
	`ngx_‰ì
(
evít_ödex
);

122 
evít_ödex
 = 
NULL
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

129 
ngx_c⁄√˘i⁄_t
 *
c
;

131 
c
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

134 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

136 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

138 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

139  
NGX_OK
;

142 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

143 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

145 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

147 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

148  
NGX_ERROR
;

151 i‡((
evít
 =
NGX_READ_EVENT
 && 
max_ªad
 >
FD_SETSIZE
)

152 || (
evít
 =
NGX_WRITE_EVENT
 && 
max_wrôe
 >
FD_SETSIZE
))

154 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ev
->
log
, 0,

156 "suµ‹ãd by sñe˘(Ëi†%d", 
FD_SETSIZE
);

157  
NGX_ERROR
;

160 i‡(
evít
 =
NGX_READ_EVENT
) {

161 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

162 
max_ªad
++;

164 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

165 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

166 
max_wrôe
++;

169 
ev
->
a˘ive
 = 1;

171 
evít_ödex
[
√víts
] = 
ev
;

172 
ev
->
ödex
 = 
√víts
;

173 
√víts
++;

175  
NGX_OK
;

176 
	}
}

179 
ngx_öt_t


180 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

182 
ngx_evít_t
 *
e
;

183 
ngx_c⁄√˘i⁄_t
 *
c
;

185 
c
 = 
ev
->
d©a
;

187 
ev
->
a˘ive
 = 0;

189 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

190  
NGX_OK
;

193 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

194 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

196 i‡(
evít
 =
NGX_READ_EVENT
) {

197 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

198 
max_ªad
--;

200 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

201 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

202 
max_wrôe
--;

205 i‡(
ev
->
ödex
 < --
√víts
) {

206 
e
 = 
evít_ödex
[
√víts
];

207 
evít_ödex
[
ev
->
ödex
] = 
e
;

208 
e
->
ödex
 = 
ev
->index;

211 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

213  
NGX_OK
;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

219 
ngx_uöt_t
 
Êags
)

221 
ªady
, 
ƒódy
;

222 
ngx_îr_t
 
îr
;

223 
ngx_uöt_t
 
i
, 
found
;

224 
ngx_evít_t
 *
ev
;

225 
ngx_queue_t
 *
queue
;

226 
timevÆ
 
tv
, *
ç
;

227 
ngx_c⁄√˘i⁄_t
 *
c
;

229 #i‡(
NGX_DEBUG
)

230 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

231 
i
 = 0; i < 
√víts
; i++) {

232 
ev
 = 
evít_ödex
[
i
];

233 
c
 = 
ev
->
d©a
;

234 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

235 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

240 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

241 
ç
 = 
NULL
;

244 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

245 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

246 
ç
 = &
tv
;

249 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

250 "£À˘Åimî: %M", 
timî
);

252 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

253 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

255 i‡(
max_ªad
 || 
max_wrôe
) {

256 
ªady
 = 
	`£À˘
(0, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

266 
	`ngx_m¶ìp
(
timî
);

268 
ªady
 = 0;

271 
îr
 = (
ªady
 =-1Ë? 
ngx_sockë_î∫o
 : 0;

273 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

274 
	`ngx_time_upd©e
();

277 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

278 "£À˘Ñódy %d", 
ªady
);

280 i‡(
îr
) {

281 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
, "select() failed");

283 i‡(
îr
 =
WSAENOTSOCK
) {

284 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

287  
NGX_ERROR
;

290 i‡(
ªady
 == 0) {

291 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

292  
NGX_OK
;

295 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

297  
NGX_ERROR
;

300 
ƒódy
 = 0;

302 
i
 = 0; i < 
√víts
; i++) {

303 
ev
 = 
evít_ödex
[
i
];

304 
c
 = 
ev
->
d©a
;

305 
found
 = 0;

307 i‡(
ev
->
wrôe
) {

308 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

309 
found
 = 1;

310 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

311 "£À˘ wrôê%d", 
c
->
fd
);

315 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

316 
found
 = 1;

317 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

318 "£À˘Ñód %d", 
c
->
fd
);

322 i‡(
found
) {

323 
ev
->
ªady
 = 1;

325 
queue
 = 
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts


326 : &
ngx_po°ed_evíts
;

328 
	`ngx_po°_evít
(
ev
, 
queue
);

330 
ƒódy
++;

334 i‡(
ªady
 !
ƒódy
) {

335 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

336 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

338 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

341  
NGX_OK
;

342 
	}
}

346 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

348 
n
;

349 
u_öt
 
i
;

350 
sockÀn_t
 
Àn
;

351 
ngx_îr_t
 
îr
;

352 
ngx_sockë_t
 
s
;

354 
i
 = 0; i < 
ma°î_ªad_fd_£t
.
fd_cou¡
; i++) {

356 
s
 = 
ma°î_ªad_fd_£t
.
fd_¨øy
[
i
];

357 
Àn
 = ();

359 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

360 
îr
 = 
ngx_sockë_î∫o
;

362 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

363 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

365 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

369 
i
 = 0; i < 
ma°î_wrôe_fd_£t
.
fd_cou¡
; i++) {

371 
s
 = 
ma°î_wrôe_fd_£t
.
fd_¨øy
[
i
];

372 
Àn
 = ();

374 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

375 
îr
 = 
ngx_sockë_î∫o
;

377 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

378 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

380 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

383 
	}
}

387 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

389 
ngx_evít_c⁄f_t
 *
ecf
;

391 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

393 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

394  
NGX_CONF_OK
;

397  
NGX_CONF_OK
;

398 
	}
}

	@src/event/ngx_event.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#DEFAULT_CONNECTIONS
 512

	)

16 
ngx_moduÀ_t
 
ngx_kqueue_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_evíç‹t_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_devpﬁl_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_πsig_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_£À˘_moduÀ
;

24 *
ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
ngx_öt_t
 
ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_öt_t
 
ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
);

27 *
ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

29 *
ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

30 *
c⁄f
);

31 *
ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

32 *
ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

35 *
ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

36 *
ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

39 
ngx_uöt_t
 
	gngx_timî_ªsﬁuti⁄
;

40 
sig_©omic_t
 
	gngx_evít_timî_Æ¨m
;

42 
ngx_uöt_t
 
	gngx_evít_max_moduÀ
;

44 
ngx_uöt_t
 
	gngx_evít_Êags
;

45 
ngx_evít_a˘i⁄s_t
 
	gngx_evít_a˘i⁄s
;

48 
ngx_©omic_t
 
	gc⁄√˘i⁄_cou¡î
 = 1;

49 
ngx_©omic_t
 *
	gngx_c⁄√˘i⁄_cou¡î
 = &
c⁄√˘i⁄_cou¡î
;

52 
ngx_©omic_t
 *
	gngx_ac˚±_muãx_±r
;

53 
ngx_shmtx_t
 
	gngx_ac˚±_muãx
;

54 
ngx_uöt_t
 
	gngx_u£_ac˚±_muãx
;

55 
ngx_uöt_t
 
	gngx_ac˚±_evíts
;

56 
ngx_uöt_t
 
	gngx_ac˚±_muãx_hñd
;

57 
ngx_m£c_t
 
	gngx_ac˚±_muãx_dñay
;

58 
ngx_öt_t
 
	gngx_ac˚±_dißbÀd
;

61 #i‡(
NGX_STAT_STUB
)

63 
ngx_©omic_t
 
	gngx_°©_ac˚±ed0
;

64 
ngx_©omic_t
 *
	gngx_°©_ac˚±ed
 = &
ngx_°©_ac˚±ed0
;

65 
ngx_©omic_t
 
	gngx_°©_h™dÀd0
;

66 
ngx_©omic_t
 *
	gngx_°©_h™dÀd
 = &
ngx_°©_h™dÀd0
;

67 
ngx_©omic_t
 
	gngx_°©_ªque°s0
;

68 
ngx_©omic_t
 *
	gngx_°©_ªque°s
 = &
ngx_°©_ªque°s0
;

69 
ngx_©omic_t
 
	gngx_°©_a˘ive0
;

70 
ngx_©omic_t
 *
	gngx_°©_a˘ive
 = &
ngx_°©_a˘ive0
;

71 
ngx_©omic_t
 
	gngx_°©_ªadög0
;

72 
ngx_©omic_t
 *
	gngx_°©_ªadög
 = &
ngx_°©_ªadög0
;

73 
ngx_©omic_t
 
	gngx_°©_wrôög0
;

74 
ngx_©omic_t
 *
	gngx_°©_wrôög
 = &
ngx_°©_wrôög0
;

75 
ngx_©omic_t
 
	gngx_°©_waôög0
;

76 
ngx_©omic_t
 *
	gngx_°©_waôög
 = &
ngx_°©_waôög0
;

82 
ngx_comm™d_t
 
	gngx_evíts_comm™ds
[] = {

84 { 
ngx_°rög
("events"),

85 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

86 
ngx_evíts_block
,

89 
NULL
 },

91 
ngx_nuŒ_comm™d


95 
ngx_c‹e_moduÀ_t
 
	gngx_evíts_moduÀ_˘x
 = {

96 
ngx_°rög
("events"),

97 
NULL
,

98 
ngx_evít_öô_c⁄f


102 
ngx_moduÀ_t
 
	gngx_evíts_moduÀ
 = {

103 
NGX_MODULE_V1
,

104 &
ngx_evíts_moduÀ_˘x
,

105 
ngx_evíts_comm™ds
,

106 
NGX_CORE_MODULE
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NGX_MODULE_V1_PADDING


118 
ngx_°r_t
 
	gevít_c‹e_«me
 = 
ngx_°rög
("event_core");

121 
ngx_comm™d_t
 
	gngx_evít_c‹e_comm™ds
[] = {

123 { 
ngx_°rög
("worker_connections"),

124 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

125 
ngx_evít_c⁄√˘i⁄s
,

128 
NULL
 },

130 { 
ngx_°rög
("connections"),

131 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

132 
ngx_evít_c⁄√˘i⁄s
,

135 
NULL
 },

137 { 
ngx_°rög
("use"),

138 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

139 
ngx_evít_u£
,

142 
NULL
 },

144 { 
ngx_°rög
("multi_accept"),

145 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

146 
ngx_c⁄f_£t_Êag_¶Ÿ
,

148 
off£tof
(
ngx_evít_c⁄f_t
, 
mu…i_ac˚±
),

149 
NULL
 },

151 { 
ngx_°rög
("accept_mutex"),

152 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

153 
ngx_c⁄f_£t_Êag_¶Ÿ
,

155 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx
),

156 
NULL
 },

158 { 
ngx_°rög
("accept_mutex_delay"),

159 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

160 
ngx_c⁄f_£t_m£c_¶Ÿ
,

162 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx_dñay
),

163 
NULL
 },

165 { 
ngx_°rög
("debug_connection"),

166 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

167 
ngx_evít_debug_c⁄√˘i⁄
,

170 
NULL
 },

172 
ngx_nuŒ_comm™d


176 
ngx_evít_moduÀ_t
 
	gngx_evít_c‹e_moduÀ_˘x
 = {

177 &
evít_c‹e_«me
,

178 
ngx_evít_c‹e_¸óã_c⁄f
,

179 
ngx_evít_c‹e_öô_c⁄f
,

181 { 
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }

185 
ngx_moduÀ_t
 
	gngx_evít_c‹e_moduÀ
 = {

186 
NGX_MODULE_V1
,

187 &
ngx_evít_c‹e_moduÀ_˘x
,

188 
ngx_evít_c‹e_comm™ds
,

189 
NGX_EVENT_MODULE
,

190 
NULL
,

191 
ngx_evít_moduÀ_öô
,

192 
ngx_evít_¥o˚ss_öô
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
NULL
,

197 
NGX_MODULE_V1_PADDING


202 
	$ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
)

204 
ngx_uöt_t
 
Êags
;

205 
ngx_m£c_t
 
timî
, 
dñè
;

207 i‡(
ngx_timî_ªsﬁuti⁄
) {

208 
timî
 = 
NGX_TIMER_INFINITE
;

209 
Êags
 = 0;

212 
timî
 = 
	`ngx_evít_föd_timî
();

213 
Êags
 = 
NGX_UPDATE_TIME
;

215 #i‡(
NGX_OLD_THREADS
)

217 i‡(
timî
 =
NGX_TIMER_INFINITE
 ||Åimer > 500) {

218 
timî
 = 500;

224 i‡(
ngx_u£_ac˚±_muãx
) {

225 i‡(
ngx_ac˚±_dißbÀd
 > 0) {

226 
ngx_ac˚±_dißbÀd
--;

229 i‡(
	`ngx_åylock_ac˚±_muãx
(
cy˛e
Ë=
NGX_ERROR
) {

233 i‡(
ngx_ac˚±_muãx_hñd
) {

234 
Êags
 |
NGX_POST_EVENTS
;

237 i‡(
timî
 =
NGX_TIMER_INFINITE


238 || 
timî
 > 
ngx_ac˚±_muãx_dñay
)

240 
timî
 = 
ngx_ac˚±_muãx_dñay
;

246 
dñè
 = 
ngx_cuºít_m£c
;

248 (Ë
	`ngx_¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

250 
dñè
 = 
ngx_cuºít_m£c
 - delta;

252 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

253 "timî dñè: %M", 
dñè
);

255 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_ac˚±_evíts
);

257 i‡(
ngx_ac˚±_muãx_hñd
) {

258 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

261 i‡(
dñè
) {

262 
	`ngx_evít_expúe_timîs
();

265 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_evíts
);

266 
	}
}

269 
ngx_öt_t


270 
	$ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
)

272 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

276 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

277 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_CLEAR_EVENT
)

278 =
NGX_ERROR
)

280  
NGX_ERROR
;

284  
NGX_OK
;

286 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

290 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

291 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
)

292 =
NGX_ERROR
)

294  
NGX_ERROR
;

297  
NGX_OK
;

300 i‡(
ªv
->
a˘ive
 && (ªv->
ªady
 || (
Êags
 & 
NGX_CLOSE_EVENT
))) {

301 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
 | 
Êags
)

302 =
NGX_ERROR
)

304  
NGX_ERROR
;

307  
NGX_OK
;

310 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

314 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

315 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

316  
NGX_ERROR
;

319  
NGX_OK
;

322 i‡(
ªv
->
⁄eshŸ
 && !ªv->
ªady
) {

323 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

324  
NGX_ERROR
;

327  
NGX_OK
;

333  
NGX_OK
;

334 
	}
}

337 
ngx_öt_t


338 
	$ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
)

340 
ngx_c⁄√˘i⁄_t
 *
c
;

342 i‡(
low©
) {

343 
c
 = 
wev
->
d©a
;

345 i‡(
	`ngx_£nd_low©
(
c
, 
low©
Ë=
NGX_ERROR
) {

346  
NGX_ERROR
;

350 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

354 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

355 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
,

356 
NGX_CLEAR_EVENT
 | (
low©
 ? 
NGX_LOWAT_EVENT
 : 0))

357 =
NGX_ERROR
)

359  
NGX_ERROR
;

363  
NGX_OK
;

365 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

369 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

370 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

371 =
NGX_ERROR
)

373  
NGX_ERROR
;

376  
NGX_OK
;

379 i‡(
wev
->
a˘ive
 && wev->
ªady
) {

380 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

381 =
NGX_ERROR
)

383  
NGX_ERROR
;

386  
NGX_OK
;

389 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

393 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

394 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

395  
NGX_ERROR
;

398  
NGX_OK
;

401 i‡(
wev
->
⁄eshŸ
 && wev->
ªady
) {

402 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

403  
NGX_ERROR
;

406  
NGX_OK
;

412  
NGX_OK
;

413 
	}
}

417 
	$ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

419 i‡(
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
Ë=
NULL
) {

420 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

422  
NGX_CONF_ERROR
;

425  
NGX_CONF_OK
;

426 
	}
}

429 
ngx_öt_t


430 
	$ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

432 ***
cf
;

433 
u_ch¨
 *
sh¨ed
;

434 
size_t
 
size
, 
˛
;

435 
ngx_shm_t
 
shm
;

436 
ngx_time_t
 *
ç
;

437 
ngx_c‹e_c⁄f_t
 *
ccf
;

438 
ngx_evít_c⁄f_t
 *
ecf
;

440 
cf
 = 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
);

441 
ecf
 = (*
cf
)[
ngx_evít_c‹e_moduÀ
.
˘x_ödex
];

443 i‡(!
ngx_ã°_c⁄fig
 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER
) {

444 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

445 "usögÅhê\"%s\"Évíàmëhod", 
ecf
->
«me
);

448 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

450 
ngx_timî_ªsﬁuti⁄
 = 
ccf
->
timî_ªsﬁuti⁄
;

452 #i‡!(
NGX_WIN32
)

454 
ngx_öt_t
 
limô
;

455 
æimô
 
æmt
;

457 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

458 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

462 i‡(
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
æmt
.
æim_cur


463 && (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET


464 || 
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
ccf
->
æimô_nofûe
))

466 
limô
 = (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET
) ?

467 (
ngx_öt_t
Ë
æmt
.
æim_cur
 : 
ccf
->
æimô_nofûe
;

469 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

472 
ecf
->
c⁄√˘i⁄s
, 
limô
);

479 i‡(
ccf
->
ma°î
 == 0) {

480  
NGX_OK
;

483 i‡(
ngx_ac˚±_muãx_±r
) {

484  
NGX_OK
;

490 
˛
 = 128;

492 
size
 = 
˛


493 + 
˛


494 + 
˛
;

496 #i‡(
NGX_STAT_STUB
)

498 
size
 +
˛


499 + 
˛


500 + 
˛


501 + 
˛


502 + 
˛


503 + 
˛


504 + 
˛
;

508 
shm
.
size
 = size;

509 
shm
.
«me
.
Àn
 = ("nginx_shared_zone");

510 
shm
.
«me
.
d©a
 = (
u_ch¨
 *) "nginx_shared_zone";

511 
shm
.
log
 = 
cy˛e
->log;

513 i‡(
	`ngx_shm_Æloc
(&
shm
Ë!
NGX_OK
) {

514  
NGX_ERROR
;

517 
sh¨ed
 = 
shm
.
addr
;

519 
ngx_ac˚±_muãx_±r
 = (
ngx_©omic_t
 *Ë
sh¨ed
;

520 
ngx_ac˚±_muãx
.
•ö
 = (
ngx_uöt_t
) -1;

522 i‡(
	`ngx_shmtx_¸óã
(&
ngx_ac˚±_muãx
, (
ngx_shmtx_sh_t
 *Ë
sh¨ed
,

523 
cy˛e
->
lock_fûe
.
d©a
)

524 !
NGX_OK
)

526  
NGX_ERROR
;

529 
ngx_c⁄√˘i⁄_cou¡î
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 1 * 
˛
);

531 (Ë
	`ngx_©omic_cmp_£t
(
ngx_c⁄√˘i⁄_cou¡î
, 0, 1);

533 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

535 
ngx_c⁄√˘i⁄_cou¡î
, *ngx_connection_counter);

537 
ngx_ãmp_numbî
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 2 * 
˛
);

539 
ç
 = 
	`ngx_timeofday
();

541 
ngx_øndom_numbî
 = (
ç
->
m£c
 << 16Ë+ 
ngx_pid
;

543 #i‡(
NGX_STAT_STUB
)

545 
ngx_°©_ac˚±ed
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 3 * 
˛
);

546 
ngx_°©_h™dÀd
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 4 * 
˛
);

547 
ngx_°©_ªque°s
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 5 * 
˛
);

548 
ngx_°©_a˘ive
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 6 * 
˛
);

549 
ngx_°©_ªadög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 7 * 
˛
);

550 
ngx_°©_wrôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 8 * 
˛
);

551 
ngx_°©_waôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 9 * 
˛
);

555  
NGX_OK
;

556 
	}
}

559 #i‡!(
NGX_WIN32
)

562 
	$ngx_timî_sig«l_h™dÀr
(
signo
)

564 
ngx_evít_timî_Æ¨m
 = 1;

567 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0, "timer signal");

569 
	}
}

574 
ngx_öt_t


575 
	$ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
)

577 
ngx_uöt_t
 
m
, 
i
;

578 
ngx_evít_t
 *
ªv
, *
wev
;

579 
ngx_li°íög_t
 *
ls
;

580 
ngx_c⁄√˘i⁄_t
 *
c
, *
√xt
, *
ﬁd
;

581 
ngx_c‹e_c⁄f_t
 *
ccf
;

582 
ngx_evít_c⁄f_t
 *
ecf
;

583 
ngx_evít_moduÀ_t
 *
moduÀ
;

585 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

586 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

588 i‡(
ccf
->
ma°î
 && ccf->
w‹kî_¥o˚s£s
 > 1 && 
ecf
->
ac˚±_muãx
) {

589 
ngx_u£_ac˚±_muãx
 = 1;

590 
ngx_ac˚±_muãx_hñd
 = 0;

591 
ngx_ac˚±_muãx_dñay
 = 
ecf
->
ac˚±_muãx_dñay
;

594 
ngx_u£_ac˚±_muãx
 = 0;

597 #i‡(
NGX_WIN32
)

604 
ngx_u£_ac˚±_muãx
 = 0;

608 
	`ngx_queue_öô
(&
ngx_po°ed_ac˚±_evíts
);

609 
	`ngx_queue_öô
(&
ngx_po°ed_evíts
);

611 i‡(
	`ngx_evít_timî_öô
(
cy˛e
->
log
Ë=
NGX_ERROR
) {

612  
NGX_ERROR
;

615 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

616 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

620 i‡(
ngx_moduÀs
[
m
]->
˘x_ödex
 !
ecf
->
u£
) {

624 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

626 i‡(
moduÀ
->
a˘i⁄s
.
	`öô
(
cy˛e
, 
ngx_timî_ªsﬁuti⁄
Ë!
NGX_OK
) {

628 
	`exô
(2);

634 #i‡!(
NGX_WIN32
)

636 i‡(
ngx_timî_ªsﬁuti⁄
 && !(
ngx_evít_Êags
 & 
NGX_USE_TIMER_EVENT
)) {

637 
siga˘i⁄
 
ß
;

638 
ôimîvÆ
 
ôv
;

640 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

641 
ß
.
ß_h™dÀr
 = 
ngx_timî_sig«l_h™dÀr
;

642 
	`sigem±y£t
(&
ß
.
ß_mask
);

644 i‡(
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
) == -1) {

645 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

647  
NGX_ERROR
;

650 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

651 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000) * 1000;

652 
ôv
.
ô_vÆue
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

653 
ôv
.
ô_vÆue
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000 ) * 1000;

655 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

656 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

661 i‡(
ngx_evít_Êags
 & 
NGX_USE_FD_EVENT
) {

662 
æimô
 
æmt
;

664 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

665 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

667  
NGX_ERROR
;

670 
cy˛e
->
fûes_n
 = (
ngx_uöt_t
Ë
æmt
.
æim_cur
;

672 
cy˛e
->
fûes
 = 
	`ngx_ˇŒoc
((
ngx_c⁄√˘i⁄_t
 *Ë* cy˛e->
fûes_n
,

673 
cy˛e
->
log
);

674 i‡(
cy˛e
->
fûes
 =
NULL
) {

675  
NGX_ERROR
;

681 
cy˛e
->
c⁄√˘i⁄s
 =

682 
	`ngx_Æloc
((
ngx_c⁄√˘i⁄_t
Ë* 
cy˛e
->
c⁄√˘i⁄_n
, cy˛e->
log
);

683 i‡(
cy˛e
->
c⁄√˘i⁄s
 =
NULL
) {

684  
NGX_ERROR
;

687 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

689 
cy˛e
->
ªad_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

690 
cy˛e
->
log
);

691 i‡(
cy˛e
->
ªad_evíts
 =
NULL
) {

692  
NGX_ERROR
;

695 
ªv
 = 
cy˛e
->
ªad_evíts
;

696 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

697 
ªv
[
i
].
˛o£d
 = 1;

698 
ªv
[
i
].
ö°™˚
 = 1;

701 
cy˛e
->
wrôe_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

702 
cy˛e
->
log
);

703 i‡(
cy˛e
->
wrôe_evíts
 =
NULL
) {

704  
NGX_ERROR
;

707 
wev
 = 
cy˛e
->
wrôe_evíts
;

708 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

709 
wev
[
i
].
˛o£d
 = 1;

712 
i
 = 
cy˛e
->
c⁄√˘i⁄_n
;

713 
√xt
 = 
NULL
;

716 
i
--;

718 
c
[
i
].
d©a
 = 
√xt
;

719 
c
[
i
].
ªad
 = &
cy˛e
->
ªad_evíts
[i];

720 
c
[
i
].
wrôe
 = &
cy˛e
->
wrôe_evíts
[i];

721 
c
[
i
].
fd
 = (
ngx_sockë_t
) -1;

723 
√xt
 = &
c
[
i
];

724 } 
i
);

726 
cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
√xt
;

727 
cy˛e
->
‰ì_c⁄√˘i⁄_n
 = cy˛e->
c⁄√˘i⁄_n
;

731 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

732 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

734 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
ls
[
i
].
fd
, 
cy˛e
->
log
);

736 i‡(
c
 =
NULL
) {

737  
NGX_ERROR
;

740 
c
->
log
 = &
ls
[
i
].log;

742 
c
->
li°íög
 = &
ls
[
i
];

743 
ls
[
i
].
c⁄√˘i⁄
 = 
c
;

745 
ªv
 = 
c
->
ªad
;

747 
ªv
->
log
 = 
c
->log;

748 
ªv
->
ac˚±
 = 1;

750 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

751 
ªv
->
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

754 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
)) {

755 i‡(
ls
[
i
].
¥evious
) {

762 
ﬁd
 = 
ls
[
i
].
¥evious
->
c⁄√˘i⁄
;

764 i‡(
	`ngx_dñ_evít
(
ﬁd
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
)

765 =
NGX_ERROR
)

767  
NGX_ERROR
;

770 
ﬁd
->
fd
 = (
ngx_sockë_t
) -1;

774 #i‡(
NGX_WIN32
)

776 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

777 
ngx_io˝_c⁄f_t
 *
io˝cf
;

779 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±ex
;

781 i‡(
ngx_u£_ac˚±_muãx
) {

785 i‡(
	`ngx_add_evít
(
ªv
, 0, 
NGX_IOCP_ACCEPT
Ë=
NGX_ERROR
) {

786  
NGX_ERROR
;

789 
ls
[
i
].
log
.
h™dÀr
 = 
ngx_ac˚±ex_log_îr‹
;

791 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

792 i‡(
	`ngx_evít_po°_ac˚±ex
(&
ls
[
i
], 
io˝cf
->
po°_ac˚±ex
)

793 =
NGX_ERROR
)

795  
NGX_ERROR
;

799 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

801 i‡(
ngx_u£_ac˚±_muãx
) {

805 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

806  
NGX_ERROR
;

812 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

814 i‡(
ngx_u£_ac˚±_muãx
) {

818 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

819 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

820  
NGX_ERROR
;

824 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

825  
NGX_ERROR
;

833  
NGX_OK
;

834 
	}
}

837 
ngx_öt_t


838 
	$ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
)

840 
¢dlow©
;

842 #i‡(
NGX_HAVE_LOWAT_EVENT
)

844 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

845 
c
->
wrôe
->
avaûabÀ
 = 
low©
;

846  
NGX_OK
;

851 i‡(
low©
 =0 || 
c
->
¢dlow©
) {

852  
NGX_OK
;

855 
¢dlow©
 = (Ë
low©
;

857 i‡(
	`£tsock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_SNDLOWAT
,

858 (c⁄° *Ë&
¢dlow©
, ())

861 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

863  
NGX_ERROR
;

866 
c
->
¢dlow©
 = 1;

868  
NGX_OK
;

869 
	}
}

873 
	$ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

875 *
rv
;

876 ***
˘x
;

877 
ngx_uöt_t
 
i
;

878 
ngx_c⁄f_t
 
pcf
;

879 
ngx_evít_moduÀ_t
 *
m
;

881 i‡(*(**Ë
c⁄f
) {

887 
ngx_evít_max_moduÀ
 = 0;

888 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

889 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

893 
ngx_moduÀs
[
i
]->
˘x_ödex
 = 
ngx_evít_max_moduÀ
++;

896 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*));

897 i‡(
˘x
 =
NULL
) {

898  
NGX_CONF_ERROR
;

901 *
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 
ngx_evít_max_moduÀ
 * (*));

902 i‡(*
˘x
 =
NULL
) {

903  
NGX_CONF_ERROR
;

906 *(**Ë
c⁄f
 = 
˘x
;

908 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

909 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

913 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

915 i‡(
m
->
¸óã_c⁄f
) {

916 (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
m
->
	`¸óã_c⁄f
(
cf
->
cy˛e
);

917 i‡((*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

918  
NGX_CONF_ERROR
;

923 
pcf
 = *
cf
;

924 
cf
->
˘x
 = ctx;

925 
cf
->
moduÀ_ty≥
 = 
NGX_EVENT_MODULE
;

926 
cf
->
cmd_ty≥
 = 
NGX_EVENT_CONF
;

928 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

930 *
cf
 = 
pcf
;

932 i‡(
rv
 !
NGX_CONF_OK
)

933  
rv
;

935 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

936 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

940 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

942 i‡(
m
->
öô_c⁄f
) {

943 
rv
 = 
m
->
	`öô_c⁄f
(
cf
->
cy˛e
, (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
]);

944 i‡(
rv
 !
NGX_CONF_OK
) {

945  
rv
;

950  
NGX_CONF_OK
;

951 
	}
}

955 
	$ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

957 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

959 
ngx_°r_t
 *
vÆue
;

961 i‡(
ecf
->
c⁄√˘i⁄s
 !
NGX_CONF_UNSET_UINT
) {

965 i‡(
	`ngx_°rcmp
(
cmd
->
«me
.
d©a
, "connections") == 0) {

966 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

971 
vÆue
 = 
cf
->
¨gs
->
ñts
;

972 
ecf
->
c⁄√˘i⁄s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

973 i‡(
ecf
->
c⁄√˘i⁄s
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

974 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

975 "övÆidÇumbî \"%V\"", &
vÆue
[1]);

977  
NGX_CONF_ERROR
;

980 
cf
->
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

982  
NGX_CONF_OK
;

983 
	}
}

987 
	$ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

989 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

991 
ngx_öt_t
 
m
;

992 
ngx_°r_t
 *
vÆue
;

993 
ngx_evít_c⁄f_t
 *
ﬁd_ecf
;

994 
ngx_evít_moduÀ_t
 *
moduÀ
;

996 i‡(
ecf
->
u£
 !
NGX_CONF_UNSET_UINT
) {

1000 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1002 i‡(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
) {

1003 
ﬁd_ecf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
,

1004 
ngx_evít_c‹e_moduÀ
);

1006 
ﬁd_ecf
 = 
NULL
;

1010 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

1011 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1015 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

1016 i‡(
moduÀ
->
«me
->
Àn
 =
vÆue
[1].len) {

1017 i‡(
	`ngx_°rcmp
(
moduÀ
->
«me
->
d©a
, 
vÆue
[1].data) == 0) {

1018 
ecf
->
u£
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

1019 
ecf
->
«me
 = 
moduÀ
->«me->
d©a
;

1021 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE


1022 && 
ﬁd_ecf


1023 && 
ﬁd_ecf
->
u£
 !
ecf
->use)

1025 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1032 &
vÆue
[1], 
ﬁd_ecf
->
«me
);

1034  
NGX_CONF_ERROR
;

1037  
NGX_CONF_OK
;

1042 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1043 "övÆidÉvíàty≥ \"%V\"", &
vÆue
[1]);

1045  
NGX_CONF_ERROR
;

1046 
	}
}

1050 
	$ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1052 #i‡(
NGX_DEBUG
)

1053 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1055 
ngx_öt_t
 
rc
;

1056 
ngx_°r_t
 *
vÆue
;

1057 
ngx_uæ_t
 
u
;

1058 
ngx_cidr_t
 
c
, *
cidr
;

1059 
ngx_uöt_t
 
i
;

1060 
sockaddr_ö
 *
sö
;

1061 #i‡(
NGX_HAVE_INET6
)

1062 
sockaddr_ö6
 *
sö6
;

1065 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1067 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1069 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

1070 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1071 i‡(
cidr
 =
NULL
) {

1072  
NGX_CONF_ERROR
;

1075 
cidr
->
Ámûy
 = 
AF_UNIX
;

1076  
NGX_CONF_OK
;

1081 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
c
);

1083 i‡(
rc
 !
NGX_ERROR
) {

1084 i‡(
rc
 =
NGX_DONE
) {

1085 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1087 &
vÆue
[1]);

1090 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1091 i‡(
cidr
 =
NULL
) {

1092  
NGX_CONF_ERROR
;

1095 *
cidr
 = 
c
;

1097  
NGX_CONF_OK
;

1100 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1101 
u
.
ho°
 = 
vÆue
[1];

1103 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1104 i‡(
u
.
îr
) {

1105 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1107 
u
.
îr
, &u.
ho°
);

1110  
NGX_CONF_ERROR
;

1113 
cidr
 = 
	`ngx_¨øy_push_n
(&
ecf
->
debug_c⁄√˘i⁄
, 
u
.
«ddrs
);

1114 i‡(
cidr
 =
NULL
) {

1115  
NGX_CONF_ERROR
;

1118 
	`ngx_memzîo
(
cidr
, 
u
.
«ddrs
 * (
ngx_cidr_t
));

1120 
i
 = 0; i < 
u
.
«ddrs
; i++) {

1121 
cidr
[
i
].
Ámûy
 = 
u
.
addrs
[i].
sockaddr
->
ß_Ámûy
;

1123 
cidr
[
i
].
Ámûy
) {

1125 #i‡(
NGX_HAVE_INET6
)

1126 
AF_INET6
:

1127 
sö6
 = (
sockaddr_ö6
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1128 
cidr
[
i
].
u
.
ö6
.
addr
 = 
sö6
->
sö6_addr
;

1129 
	`ngx_mem£t
(
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

1134 
sö
 = (
sockaddr_ö
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1135 
cidr
[
i
].
u
.
ö
.
addr
 = 
sö
->
sö_addr
.
s_addr
;

1136 
cidr
[
i
].
u
.
ö
.
mask
 = 0xffffffff;

1143 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1149  
NGX_CONF_OK
;

1150 
	}
}

1154 
	$ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

1156 
ngx_evít_c⁄f_t
 *
ecf
;

1158 
ecf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evít_c⁄f_t
));

1159 i‡(
ecf
 =
NULL
) {

1160  
NULL
;

1163 
ecf
->
c⁄√˘i⁄s
 = 
NGX_CONF_UNSET_UINT
;

1164 
ecf
->
u£
 = 
NGX_CONF_UNSET_UINT
;

1165 
ecf
->
mu…i_ac˚±
 = 
NGX_CONF_UNSET
;

1166 
ecf
->
ac˚±_muãx
 = 
NGX_CONF_UNSET
;

1167 
ecf
->
ac˚±_muãx_dñay
 = 
NGX_CONF_UNSET_MSEC
;

1168 
ecf
->
«me
 = (*Ë
NGX_CONF_UNSET
;

1170 #i‡(
NGX_DEBUG
)

1172 i‡(
	`ngx_¨øy_öô
(&
ecf
->
debug_c⁄√˘i⁄
, 
cy˛e
->
poﬁ
, 4,

1173 (
ngx_cidr_t
)Ë=
NGX_ERROR
)

1175  
NULL
;

1180  
ecf
;

1181 
	}
}

1185 
	$ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

1187 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1189 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1190 
fd
;

1192 #i‡(
NGX_HAVE_RTSIG
)

1193 
ngx_uöt_t
 
πsig
;

1194 
ngx_c‹e_c⁄f_t
 *
ccf
;

1196 
ngx_öt_t
 
i
;

1197 
ngx_moduÀ_t
 *
moduÀ
;

1198 
ngx_evít_moduÀ_t
 *
evít_moduÀ
;

1200 
moduÀ
 = 
NULL
;

1202 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1204 
fd
 = 
	`ïﬁl_¸óã
(100);

1206 i‡(
fd
 != -1) {

1207 (Ë
	`˛o£
(
fd
);

1208 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1210 } i‡(
ngx_î∫o
 !
NGX_ENOSYS
) {

1211 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1216 #i‡(
NGX_HAVE_RTSIG
)

1218 i‡(
moduÀ
 =
NULL
) {

1219 
moduÀ
 = &
ngx_πsig_moduÀ
;

1220 
πsig
 = 1;

1223 
πsig
 = 0;

1228 #i‡(
NGX_HAVE_DEVPOLL
)

1230 
moduÀ
 = &
ngx_devpﬁl_moduÀ
;

1234 #i‡(
NGX_HAVE_KQUEUE
)

1236 
moduÀ
 = &
ngx_kqueue_moduÀ
;

1240 #i‡(
NGX_HAVE_SELECT
)

1242 i‡(
moduÀ
 =
NULL
) {

1243 
moduÀ
 = &
ngx_£À˘_moduÀ
;

1248 i‡(
moduÀ
 =
NULL
) {

1249 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1251 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1255 
evít_moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

1257 i‡(
	`ngx_°rcmp
(
evít_moduÀ
->
«me
->
d©a
, 
evít_c‹e_«me
.data) == 0)

1262 
moduÀ
 = 
ngx_moduÀs
[
i
];

1267 i‡(
moduÀ
 =
NULL
) {

1268 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0, "noÉvents module found");

1269  
NGX_CONF_ERROR
;

1272 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
c⁄√˘i⁄s
, 
DEFAULT_CONNECTIONS
);

1273 
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

1275 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
u£
, 
moduÀ
->
˘x_ödex
);

1277 
evít_moduÀ
 = 
moduÀ
->
˘x
;

1278 
	`ngx_c⁄f_öô_±r_vÆue
(
ecf
->
«me
, 
evít_moduÀ
->«me->
d©a
);

1280 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
mu…i_ac˚±
, 0);

1281 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
ac˚±_muãx
, 1);

1282 
	`ngx_c⁄f_öô_m£c_vÆue
(
ecf
->
ac˚±_muãx_dñay
, 500);

1285 #i‡(
NGX_HAVE_RTSIG
)

1287 i‡(!
πsig
) {

1288  
NGX_CONF_OK
;

1291 i‡(
ecf
->
ac˚±_muãx
) {

1292  
NGX_CONF_OK
;

1295 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1297 i‡(
ccf
->
w‹kî_¥o˚s£s
 == 0) {

1298  
NGX_CONF_OK
;

1301 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1304  
NGX_CONF_ERROR
;

1308  
NGX_CONF_OK
;

1311 
	}
}

	@src/event/ngx_event.h

8 #i‚de‡
_NGX_EVENT_H_INCLUDED_


9 
	#_NGX_EVENT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_INVALID_INDEX
 0xd0d0d0d0

	)

19 #i‡(
NGX_HAVE_IOCP
)

22 
WSAOVERLAPPED
 
	movÕ
;

23 
ngx_evít_t
 *
	mevít
;

24 
	mîr‹
;

25 } 
	tngx_evít_ovÕ_t
;

30 
	sngx_evít_s
 {

31 *
	md©a
;

33 
	mwrôe
:1;

35 
	mac˚±
:1;

38 
	mö°™˚
:1;

44 
	ma˘ive
:1;

46 
	mdißbÀd
:1;

49 
	mªady
:1;

51 
	m⁄eshŸ
:1;

54 
	mcom∂ëe
:1;

56 
	meof
:1;

57 
	mîr‹
:1;

59 
	mtimedout
:1;

60 
	mtimî_£t
:1;

62 
	mdñayed
:1;

64 
	mde„ºed_ac˚±
:1;

67 
	m≥ndög_eof
:1;

69 
	mpo°ed
:1;

71 #i‡(
NGX_WIN32
)

73 
	mac˚±_c⁄ãxt_upd©ed
:1;

76 #i‡(
NGX_HAVE_KQUEUE
)

77 
	mkq_vnode
:1;

80 
	mkq_î∫o
;

97 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

98 
	mavaûabÀ
;

100 
	mavaûabÀ
:1;

103 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

106 #i‡(
NGX_HAVE_AIO
)

108 #i‡(
NGX_HAVE_IOCP
)

109 
ngx_evít_ovÕ_t
 
	movÕ
;

111 
aiocb
 
	maiocb
;

116 
ngx_uöt_t
 
	mödex
;

118 
ngx_log_t
 *
	mlog
;

120 
ngx_rbåì_node_t
 
	mtimî
;

123 
ngx_queue_t
 
	mqueue
;

125 
	m˛o£d
:1;

128 
	mch™√l
:1;

129 
	mªsﬁvî
:1;

131 
	mˇn˚œbÀ
:1;

144 *
	mthr_˘x
;

146 #i‡(
NGX_EVENT_T_PADDING
)

150 
uöt32_t
 
	m∑ddög
[
NGX_EVENT_T_PADDING
];

156 #i‡(
NGX_HAVE_FILE_AIO
)

158 
	sngx_evít_aio_s
 {

159 *
	md©a
;

160 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

161 
ngx_fûe_t
 *
	mfûe
;

163 #i‡(
NGX_HAVE_AIO_SENDFILE
)

164 
ssize_t
 (*
¥ñﬂd_h™dÀr
)(
ngx_buf_t
 *
	mfûe
);

167 
ngx_fd_t
 
	mfd
;

169 #i‡(
NGX_HAVE_EVENTFD
)

170 
öt64_t
 
	mªs
;

173 #i‡!(
NGX_HAVE_EVENTFD
Ë|| (
NGX_TEST_BUILD_EPOLL
)

174 
ngx_îr_t
 
	mîr
;

175 
size_t
 
	mnbyãs
;

178 
ngx_aiocb_t
 
	maiocb
;

179 
ngx_evít_t
 
	mevít
;

186 
ngx_öt_t
 (*
add
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

187 
ngx_öt_t
 (*
dñ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

189 
ngx_öt_t
 (*
íabÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

190 
ngx_öt_t
 (*
dißbÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

192 
ngx_öt_t
 (*
add_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
);

193 
ngx_öt_t
 (*
dñ_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
, 
ngx_uöt_t
 
	mÊags
);

195 
ngx_öt_t
 (*
nŸify
)(
ngx_evít_h™dÀr_±
 
	mh™dÀr
);

197 
ngx_öt_t
 (*
¥o˚ss_evíts
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
,

198 
ngx_uöt_t
 
	mÊags
);

200 
ngx_öt_t
 (*
öô
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
);

201 (*
	md⁄e
)(
ngx_cy˛e_t
 *
	mcy˛e
);

202 } 
	tngx_evít_a˘i⁄s_t
;

205 
ngx_evít_a˘i⁄s_t
 
ngx_evít_a˘i⁄s
;

212 
	#NGX_USE_LEVEL_EVENT
 0x00000001

	)

218 
	#NGX_USE_ONESHOT_EVENT
 0x00000002

	)

224 
	#NGX_USE_CLEAR_EVENT
 0x00000004

	)

230 
	#NGX_USE_KQUEUE_EVENT
 0x00000008

	)

236 
	#NGX_USE_LOWAT_EVENT
 0x00000010

	)

241 
	#NGX_USE_GREEDY_EVENT
 0x00000020

	)

246 
	#NGX_USE_EPOLL_EVENT
 0x00000040

	)

251 
	#NGX_USE_RTSIG_EVENT
 0x00000080

	)

257 
	#NGX_USE_AIO_EVENT
 0x00000100

	)

263 
	#NGX_USE_IOCP_EVENT
 0x00000200

	)

269 
	#NGX_USE_FD_EVENT
 0x00000400

	)

275 
	#NGX_USE_TIMER_EVENT
 0x00000800

	)

281 
	#NGX_USE_EVENTPORT_EVENT
 0x00001000

	)

286 
	#NGX_USE_VNODE_EVENT
 0x00002000

	)

299 
	#NGX_CLOSE_EVENT
 1

	)

305 
	#NGX_DISABLE_EVENT
 2

	)

310 
	#NGX_FLUSH_EVENT
 4

	)

314 
	#NGX_LOWAT_EVENT
 0

	)

315 
	#NGX_VNODE_EVENT
 0

	)

318 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_HAVE_EPOLLRDHUP
)

319 
	#EPOLLRDHUP
 0

	)

323 #i‡(
NGX_HAVE_KQUEUE
)

325 
	#NGX_READ_EVENT
 
EVFILT_READ


	)

326 
	#NGX_WRITE_EVENT
 
EVFILT_WRITE


	)

328 #unde‡
NGX_VNODE_EVENT


329 
	#NGX_VNODE_EVENT
 
EVFILT_VNODE


	)

338 #unde‡
NGX_CLOSE_EVENT


339 
	#NGX_CLOSE_EVENT
 
EV_EOF


	)

341 #unde‡
NGX_LOWAT_EVENT


342 
	#NGX_LOWAT_EVENT
 
EV_FLAG1


	)

344 #unde‡
NGX_FLUSH_EVENT


345 
	#NGX_FLUSH_EVENT
 
EV_ERROR


	)

347 
	#NGX_LEVEL_EVENT
 0

	)

348 
	#NGX_ONESHOT_EVENT
 
EV_ONESHOT


	)

349 
	#NGX_CLEAR_EVENT
 
EV_CLEAR


	)

351 #unde‡
NGX_DISABLE_EVENT


352 
	#NGX_DISABLE_EVENT
 
EV_DISABLE


	)

355 #ñi‡(
NGX_HAVE_DEVPOLL
 || 
NGX_HAVE_EVENTPORT
)

357 
	#NGX_READ_EVENT
 
POLLIN


	)

358 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

360 
	#NGX_LEVEL_EVENT
 0

	)

361 
	#NGX_ONESHOT_EVENT
 1

	)

364 #ñi‡(
NGX_HAVE_EPOLL
)

366 
	#NGX_READ_EVENT
 (
EPOLLIN
|
EPOLLRDHUP
)

	)

367 
	#NGX_WRITE_EVENT
 
EPOLLOUT


	)

369 
	#NGX_LEVEL_EVENT
 0

	)

370 
	#NGX_CLEAR_EVENT
 
EPOLLET


	)

371 
	#NGX_ONESHOT_EVENT
 0x70000000

	)

373 
	#NGX_ONESHOT_EVENT
 
EPOLLONESHOT


	)

377 #ñi‡(
NGX_HAVE_POLL
)

379 
	#NGX_READ_EVENT
 
POLLIN


	)

380 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

382 
	#NGX_LEVEL_EVENT
 0

	)

383 
	#NGX_ONESHOT_EVENT
 1

	)

388 
	#NGX_READ_EVENT
 0

	)

389 
	#NGX_WRITE_EVENT
 1

	)

391 
	#NGX_LEVEL_EVENT
 0

	)

392 
	#NGX_ONESHOT_EVENT
 1

	)

397 #i‡(
NGX_HAVE_IOCP
)

398 
	#NGX_IOCP_ACCEPT
 0

	)

399 
	#NGX_IOCP_IO
 1

	)

400 
	#NGX_IOCP_CONNECT
 2

	)

404 #i‚de‡
NGX_CLEAR_EVENT


405 
	#NGX_CLEAR_EVENT
 0

	)

409 
	#ngx_¥o˚ss_evíts
 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts


	)

410 
	#ngx_d⁄e_evíts
 
ngx_evít_a˘i⁄s
.
d⁄e


	)

412 
	#ngx_add_evít
 
ngx_evít_a˘i⁄s
.
add


	)

413 
	#ngx_dñ_evít
 
ngx_evít_a˘i⁄s
.
dñ


	)

414 
	#ngx_add_c⁄n
 
ngx_evít_a˘i⁄s
.
add_c⁄n


	)

415 
	#ngx_dñ_c⁄n
 
ngx_evít_a˘i⁄s
.
dñ_c⁄n


	)

417 
	#ngx_nŸify
 
ngx_evít_a˘i⁄s
.
nŸify


	)

419 
	#ngx_add_timî
 
ngx_evít_add_timî


	)

420 
	#ngx_dñ_timî
 
ngx_evít_dñ_timî


	)

423 
ngx_os_io_t
 
ngx_io
;

425 
	#ngx_ªcv
 
ngx_io
.
ªcv


	)

426 
	#ngx_ªcv_chaö
 
ngx_io
.
ªcv_chaö


	)

427 
	#ngx_udp_ªcv
 
ngx_io
.
udp_ªcv


	)

428 
	#ngx_£nd
 
ngx_io
.
£nd


	)

429 
	#ngx_£nd_chaö
 
ngx_io
.
£nd_chaö


	)

432 
	#NGX_EVENT_MODULE
 0x544E5645

	)

433 
	#NGX_EVENT_CONF
 0x02000000

	)

437 
ngx_uöt_t
 
	mc⁄√˘i⁄s
;

438 
ngx_uöt_t
 
	mu£
;

440 
ngx_Êag_t
 
	mmu…i_ac˚±
;

441 
ngx_Êag_t
 
	mac˚±_muãx
;

443 
ngx_m£c_t
 
	mac˚±_muãx_dñay
;

445 
u_ch¨
 *
	m«me
;

447 #i‡(
NGX_DEBUG
)

448 
ngx_¨øy_t
 
	mdebug_c⁄√˘i⁄
;

450 } 
	tngx_evít_c⁄f_t
;

454 
ngx_°r_t
 *
	m«me
;

456 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

457 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

459 
ngx_evít_a˘i⁄s_t
 
	ma˘i⁄s
;

460 } 
	tngx_evít_moduÀ_t
;

463 
ngx_©omic_t
 *
ngx_c⁄√˘i⁄_cou¡î
;

465 
ngx_©omic_t
 *
ngx_ac˚±_muãx_±r
;

466 
ngx_shmtx_t
 
ngx_ac˚±_muãx
;

467 
ngx_uöt_t
 
ngx_u£_ac˚±_muãx
;

468 
ngx_uöt_t
 
ngx_ac˚±_evíts
;

469 
ngx_uöt_t
 
ngx_ac˚±_muãx_hñd
;

470 
ngx_m£c_t
 
ngx_ac˚±_muãx_dñay
;

471 
ngx_öt_t
 
ngx_ac˚±_dißbÀd
;

474 #i‡(
NGX_STAT_STUB
)

476 
ngx_©omic_t
 *
ngx_°©_ac˚±ed
;

477 
ngx_©omic_t
 *
ngx_°©_h™dÀd
;

478 
ngx_©omic_t
 *
ngx_°©_ªque°s
;

479 
ngx_©omic_t
 *
ngx_°©_a˘ive
;

480 
ngx_©omic_t
 *
ngx_°©_ªadög
;

481 
ngx_©omic_t
 *
ngx_°©_wrôög
;

482 
ngx_©omic_t
 *
ngx_°©_waôög
;

487 
	#NGX_UPDATE_TIME
 1

	)

488 
	#NGX_POST_EVENTS
 2

	)

491 
sig_©omic_t
 
ngx_evít_timî_Æ¨m
;

492 
ngx_uöt_t
 
ngx_evít_Êags
;

493 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

494 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

497 
	#ngx_evít_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
) \

498 (*(
	`ngx_gë_c⁄f
(
c⁄f_˘x
, 
ngx_evíts_moduÀ
))Ë[
moduÀ
.
˘x_ödex
];

	)

502 
ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
);

503 
ngx_öt_t
 
ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
);

504 
u_ch¨
 *
ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

507 
ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
);

508 
ngx_öt_t
 
ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
);

509 
ngx_öt_t
 
ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
);

512 #i‡(
NGX_WIN32
)

513 
ngx_evít_ac˚±ex
(
ngx_evít_t
 *
ev
);

514 
ngx_öt_t
 
ngx_evít_po°_ac˚±ex
(
ngx_li°íög_t
 *
ls
, 
ngx_uöt_t
 
n
);

515 
u_ch¨
 *
ngx_ac˚±ex_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

519 
ngx_öt_t
 
ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
);

523 
	#ngx_evít_idít
(
p
Ë((
ngx_c⁄√˘i⁄_t
 *Ë’))->
fd


	)

526 
	~<ngx_evít_timî.h
>

527 
	~<ngx_evít_po°ed.h
>

529 #i‡(
NGX_WIN32
)

530 
	~<ngx_io˝_moduÀ.h
>

	@src/event/ngx_event_accept.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

19 
	$ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
)

21 
sockÀn_t
 
sockÀn
;

22 
ngx_îr_t
 
îr
;

23 
ngx_log_t
 *
log
;

24 
ngx_uöt_t
 
Àvñ
;

25 
ngx_sockë_t
 
s
;

26 
ngx_evít_t
 *
ªv
, *
wev
;

27 
ngx_li°íög_t
 *
ls
;

28 
ngx_c⁄√˘i⁄_t
 *
c
, *
lc
;

29 
ngx_evít_c⁄f_t
 *
ecf
;

30 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

31 #i‡(
NGX_HAVE_ACCEPT4
)

32 
ngx_uöt_t
 
u£_ac˚±4
 = 1;

35 i‡(
ev
->
timedout
) {

36 i‡(
	`ngx_íabÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
Ë!
NGX_OK
) {

40 
ev
->
timedout
 = 0;

43 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

45 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

46 
ev
->
avaûabÀ
 = 1;

48 } i‡(!(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
)) {

49 
ev
->
avaûabÀ
 = 
ecf
->
mu…i_ac˚±
;

52 
lc
 = 
ev
->
d©a
;

53 
ls
 = 
lc
->
li°íög
;

54 
ev
->
ªady
 = 0;

56 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

57 "ac˚± o¿%V,Ñódy: %d", &
ls
->
addr_ãxt
, 
ev
->
avaûabÀ
);

60 
sockÀn
 = 
NGX_SOCKADDRLEN
;

62 #i‡(
NGX_HAVE_ACCEPT4
)

63 i‡(
u£_ac˚±4
) {

64 
s
 = 
	`ac˚±4
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
,

65 
SOCK_NONBLOCK
);

67 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

70 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

73 i‡(
s
 =(
ngx_sockë_t
) -1) {

74 
îr
 = 
ngx_sockë_î∫o
;

76 i‡(
îr
 =
NGX_EAGAIN
) {

77 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 
îr
,

82 
Àvñ
 = 
NGX_LOG_ALERT
;

84 i‡(
îr
 =
NGX_ECONNABORTED
) {

85 
Àvñ
 = 
NGX_LOG_ERR
;

87 } i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

88 
Àvñ
 = 
NGX_LOG_CRIT
;

91 #i‡(
NGX_HAVE_ACCEPT4
)

92 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
,

93 
u£_ac˚±4
 ? "accept4() failed" : "accept() failed");

95 i‡(
u£_ac˚±4
 && 
îr
 =
NGX_ENOSYS
) {

96 
u£_ac˚±4
 = 0;

97 
ngx_öhîôed_n⁄blockög
 = 0;

101 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
, "accept() failed");

104 i‡(
îr
 =
NGX_ECONNABORTED
) {

105 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

106 
ev
->
avaûabÀ
--;

109 i‡(
ev
->
avaûabÀ
) {

114 i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

115 i‡(
	`ngx_dißbÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
)

116 !
NGX_OK
)

121 i‡(
ngx_u£_ac˚±_muãx
) {

122 i‡(
ngx_ac˚±_muãx_hñd
) {

123 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

124 
ngx_ac˚±_muãx_hñd
 = 0;

127 
ngx_ac˚±_dißbÀd
 = 1;

130 
	`ngx_add_timî
(
ev
, 
ecf
->
ac˚±_muãx_dñay
);

137 #i‡(
NGX_STAT_STUB
)

138 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ac˚±ed
, 1);

141 
ngx_ac˚±_dißbÀd
 = 
ngx_cy˛e
->
c⁄√˘i⁄_n
 / 8

142 - 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
;

144 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
ev
->
log
);

146 i‡(
c
 =
NULL
) {

147 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

148 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

149 
ngx_˛o£_sockë_n
 " failed");

155 #i‡(
NGX_STAT_STUB
)

156 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, 1);

159 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
ls
->
poﬁ_size
, 
ev
->
log
);

160 i‡(
c
->
poﬁ
 =
NULL
) {

161 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

165 
c
->
sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
sockÀn
);

166 i‡(
c
->
sockaddr
 =
NULL
) {

167 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

171 
	`ngx_mem˝y
(
c
->
sockaddr
, 
ß
, 
sockÀn
);

173 
log
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_log_t
));

174 i‡(
log
 =
NULL
) {

175 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

181 i‡(
ngx_öhîôed_n⁄blockög
) {

182 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

183 i‡(
	`ngx_blockög
(
s
) == -1) {

184 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

185 
ngx_blockög_n
 " failed");

186 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

192 i‡(!(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
))) {

193 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

194 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

195 
ngx_n⁄blockög_n
 " failed");

196 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

202 *
log
 = 
ls
->log;

204 
c
->
ªcv
 = 
ngx_ªcv
;

205 
c
->
£nd
 = 
ngx_£nd
;

206 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

207 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

209 
c
->
log
 =Üog;

210 
c
->
poﬁ
->
log
 =Üog;

212 
c
->
sockÀn
 = socklen;

213 
c
->
li°íög
 = 
ls
;

214 
c
->
loˇl_sockaddr
 = 
ls
->
sockaddr
;

215 
c
->
loˇl_sockÀn
 = 
ls
->
sockÀn
;

217 
c
->
u√x≥˘ed_eof
 = 1;

219 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

220 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

221 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

222 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

223 #i‡(
NGX_SOLARIS
)

225 
c
->
£ndfûe
 = 0;

230 
ªv
 = 
c
->
ªad
;

231 
wev
 = 
c
->
wrôe
;

233 
wev
->
ªady
 = 1;

235 i‡(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
)) {

237 
ªv
->
ªady
 = 1;

240 i‡(
ev
->
de„ºed_ac˚±
) {

241 
ªv
->
ªady
 = 1;

242 #i‡(
NGX_HAVE_KQUEUE
)

243 
ªv
->
avaûabÀ
 = 1;

247 
ªv
->
log
 =Üog;

248 
wev
->
log
 =Üog;

259 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

261 #i‡(
NGX_STAT_STUB
)

262 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_h™dÀd
, 1);

265 i‡(
ls
->
addr_¡›
) {

266 
c
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
ls
->
addr_ãxt_max_Àn
);

267 i‡(
c
->
addr_ãxt
.
d©a
 =
NULL
) {

268 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

272 
c
->
addr_ãxt
.
Àn
 = 
	`ngx_sock_¡›
(c->
sockaddr
, c->
sockÀn
,

273 
c
->
addr_ãxt
.
d©a
,

274 
ls
->
addr_ãxt_max_Àn
, 0);

275 i‡(
c
->
addr_ãxt
.
Àn
 == 0) {

276 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

281 #i‡(
NGX_DEBUG
)

284 
ngx_°r_t
 
addr
;

285 
sockaddr_ö
 *
sö
;

286 
ngx_cidr_t
 *
cidr
;

287 
ngx_uöt_t
 
i
;

288 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

289 #i‡(
NGX_HAVE_INET6
)

290 
sockaddr_ö6
 *
sö6
;

291 
ngx_uöt_t
 
n
;

294 
cidr
 = 
ecf
->
debug_c⁄√˘i⁄
.
ñts
;

295 
i
 = 0; i < 
ecf
->
debug_c⁄√˘i⁄
.
√…s
; i++) {

296 i‡(
cidr
[
i
].
Ámûy
 !(
ngx_uöt_t
Ë
c
->
sockaddr
->
ß_Ámûy
) {

297 
√xt
;

300 
cidr
[
i
].
Ámûy
) {

302 #i‡(
NGX_HAVE_INET6
)

303 
AF_INET6
:

304 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
sockaddr
;

305 
n
 = 0;Ç < 16;Ç++) {

306 i‡((
sö6
->
sö6_addr
.
s6_addr
[
n
]

307 & 
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
[
n
])

308 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

310 
√xt
;

316 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

317 
AF_UNIX
:

322 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

323 i‡((
sö
->
sö_addr
.
s_addr
 & 
cidr
[
i
].
u
.
ö
.
mask
)

324 !
cidr
[
i
].
u
.
ö
.
addr
)

326 
√xt
;

331 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_CONNECTION
|
NGX_LOG_DEBUG_ALL
;

334 
√xt
:

338 i‡(
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_EVENT
) {

339 
addr
.
d©a
 = 
ãxt
;

340 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
c
->
sockaddr
, c->
sockÀn
, 
ãxt
,

341 
NGX_SOCKADDR_STRLEN
, 1);

343 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

344 "*%uAác˚±: %V fd:%d", 
c
->
numbî
, &
addr
, 
s
);

350 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

351 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

352 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

357 
log
->
d©a
 = 
NULL
;

358 
log
->
h™dÀr
 = 
NULL
;

360 
ls
->
	`h™dÀr
(
c
);

362 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

363 
ev
->
avaûabÀ
--;

366 } 
ev
->
avaûabÀ
);

367 
	}
}

370 
ngx_öt_t


371 
	$ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
)

373 i‡(
	`ngx_shmtx_åylock
(&
ngx_ac˚±_muãx
)) {

375 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

378 i‡(
ngx_ac˚±_muãx_hñd


379 && 
ngx_ac˚±_evíts
 == 0

380 && !(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
))

382  
NGX_OK
;

385 i‡(
	`ngx_íabÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

386 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

387  
NGX_ERROR
;

390 
ngx_ac˚±_evíts
 = 0;

391 
ngx_ac˚±_muãx_hñd
 = 1;

393  
NGX_OK
;

396 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

397 "ac˚± muãxÜock faûed: %ui", 
ngx_ac˚±_muãx_hñd
);

399 i‡(
ngx_ac˚±_muãx_hñd
) {

400 i‡(
	`ngx_dißbÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

401  
NGX_ERROR
;

404 
ngx_ac˚±_muãx_hñd
 = 0;

407  
NGX_OK
;

408 
	}
}

411 
ngx_öt_t


412 
	$ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

414 
ngx_uöt_t
 
i
;

415 
ngx_li°íög_t
 *
ls
;

416 
ngx_c⁄√˘i⁄_t
 *
c
;

418 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

419 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

421 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

423 i‡(
c
->
ªad
->
a˘ive
) {

427 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

429 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

430  
NGX_ERROR
;

434 i‡(
	`ngx_add_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

435  
NGX_ERROR
;

440  
NGX_OK
;

441 
	}
}

444 
ngx_öt_t


445 
	$ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

447 
ngx_uöt_t
 
i
;

448 
ngx_li°íög_t
 *
ls
;

449 
ngx_c⁄√˘i⁄_t
 *
c
;

451 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

452 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

454 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

456 i‡(!
c
->
ªad
->
a˘ive
) {

460 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

461 i‡(
	`ngx_dñ_c⁄n
(
c
, 
NGX_DISABLE_EVENT
Ë=
NGX_ERROR
) {

462  
NGX_ERROR
;

466 i‡(
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_DISABLE_EVENT
)

467 =
NGX_ERROR
)

469  
NGX_ERROR
;

474  
NGX_OK
;

475 
	}
}

479 
	$ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

481 
ngx_sockë_t
 
fd
;

483 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

485 
fd
 = 
c
->fd;

486 
c
->
fd
 = (
ngx_sockë_t
) -1;

488 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

489 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_sockë_î∫o
,

490 
ngx_˛o£_sockë_n
 " failed");

493 i‡(
c
->
poﬁ
) {

494 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

497 #i‡(
NGX_STAT_STUB
)

498 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

500 
	}
}

503 
u_ch¨
 *

504 
	$ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

506  
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whileácceptingÇew connection on %V",

507 
log
->
d©a
);

508 
	}
}

	@src/event/ngx_event_connect.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 
ngx_öt_t


15 
	$ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
)

17 
rc
;

18 
ngx_öt_t
 
evít
;

19 
ngx_îr_t
 
îr
;

20 
ngx_uöt_t
 
Àvñ
;

21 
ngx_sockë_t
 
s
;

22 
ngx_evít_t
 *
ªv
, *
wev
;

23 
ngx_c⁄√˘i⁄_t
 *
c
;

25 
rc
 = 
pc
->
	`gë
’c,Öc->
d©a
);

26 i‡(
rc
 !
NGX_OK
) {

27  
rc
;

30 
s
 = 
	`ngx_sockë
(
pc
->
sockaddr
->
ß_Ámûy
, 
SOCK_STREAM
, 0);

32 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "sockë %d", 
s
);

34 i‡(
s
 =(
ngx_sockë_t
) -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

36 
ngx_sockë_n
 " failed");

37  
NGX_ERROR
;

41 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
pc
->
log
);

43 i‡(
c
 =
NULL
) {

44 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

46 
ngx_˛o£_sockë_n
 "failed");

49  
NGX_ERROR
;

52 i‡(
pc
->
rcvbuf
) {

53 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_RCVBUF
,

54 (c⁄° *Ë&
pc
->
rcvbuf
, ()) == -1)

56 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

58 
Áûed
;

62 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

64 
ngx_n⁄blockög_n
 " failed");

66 
Áûed
;

69 i‡(
pc
->
loˇl
) {

70 i‡(
	`böd
(
s
, 
pc
->
loˇl
->
sockaddr
,Öc->loˇl->
sockÀn
) == -1) {

71 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

72 "böd(%VËÁûed", &
pc
->
loˇl
->
«me
);

74 
Áûed
;

78 
c
->
ªcv
 = 
ngx_ªcv
;

79 
c
->
£nd
 = 
ngx_£nd
;

80 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

81 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

83 
c
->
£ndfûe
 = 1;

85 
c
->
log_îr‹
 = 
pc
->log_error;

87 i‡(
pc
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

88 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

89 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

91 #i‡(
NGX_SOLARIS
)

93 
c
->
£ndfûe
 = 0;

97 
ªv
 = 
c
->
ªad
;

98 
wev
 = 
c
->
wrôe
;

100 
ªv
->
log
 = 
pc
->log;

101 
wev
->
log
 = 
pc
->log;

103 
pc
->
c⁄√˘i⁄
 = 
c
;

105 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

107 i‡(
ngx_add_c⁄n
) {

108 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

109 
Áûed
;

113 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0,

114 "c⁄√˘Åÿ%V, fd:%d #%uA", 
pc
->
«me
, 
s
, 
c
->
numbî
);

116 
rc
 = 
	`c⁄√˘
(
s
, 
pc
->
sockaddr
,Öc->
sockÀn
);

118 i‡(
rc
 == -1) {

119 
îr
 = 
ngx_sockë_î∫o
;

122 i‡(
îr
 !
NGX_EINPROGRESS


123 #i‡(
NGX_WIN32
)

125 && 
îr
 !
NGX_EAGAIN


129 i‡(
îr
 =
NGX_ECONNREFUSED


130 #i‡(
NGX_LINUX
)

135 || 
îr
 =
NGX_EAGAIN


137 || 
îr
 =
NGX_ECONNRESET


138 || 
îr
 =
NGX_ENETDOWN


139 || 
îr
 =
NGX_ENETUNREACH


140 || 
îr
 =
NGX_EHOSTDOWN


141 || 
îr
 =
NGX_EHOSTUNREACH
)

143 
Àvñ
 = 
NGX_LOG_ERR
;

146 
Àvñ
 = 
NGX_LOG_CRIT
;

149 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, "connect()Åo %V failed",

150 
pc
->
«me
);

152 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

153 
pc
->
c⁄√˘i⁄
 = 
NULL
;

155  
NGX_DECLINED
;

159 i‡(
ngx_add_c⁄n
) {

160 i‡(
rc
 == -1) {

164  
NGX_AGAIN
;

167 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

169 
wev
->
ªady
 = 1;

171  
NGX_OK
;

174 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

176 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

177 "c⁄√˘(): %d", 
rc
);

181 i‡(
	`ngx_blockög
(
s
) == -1) {

182 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

183 
ngx_blockög_n
 " failed");

184 
Áûed
;

194 
ªv
->
ªady
 = 1;

195 
wev
->
ªady
 = 1;

197  
NGX_OK
;

200 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

204 
evít
 = 
NGX_CLEAR_EVENT
;

210 
evít
 = 
NGX_LEVEL_EVENT
;

213 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

214 
Áûed
;

217 i‡(
rc
 == -1) {

221 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
evít
Ë!
NGX_OK
) {

222 
Áûed
;

225  
NGX_AGAIN
;

228 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

230 
wev
->
ªady
 = 1;

232  
NGX_OK
;

234 
Áûed
:

236 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

237 
pc
->
c⁄√˘i⁄
 = 
NULL
;

239  
NGX_ERROR
;

240 
	}
}

243 
ngx_öt_t


244 
	$ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

246  
NGX_OK
;

247 
	}
}

	@src/event/ngx_event_connect.h

8 #i‚de‡
_NGX_EVENT_CONNECT_H_INCLUDED_


9 
	#_NGX_EVENT_CONNECT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_PEER_KEEPALIVE
 1

	)

18 
	#NGX_PEER_NEXT
 2

	)

19 
	#NGX_PEER_FAILED
 4

	)

22 
ngx_≥î_c⁄√˘i⁄_s
 
	tngx_≥î_c⁄√˘i⁄_t
;

24 
	$ngx_öt_t
 (*
	tngx_evít_gë_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

25 *
	td©a
);

26 (*
	tngx_evít_‰ì_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
, *
	td©a
,

27 
	tngx_uöt_t
 
	t°©e
);

28 #i‡(
NGX_SSL
)

30 
	$ngx_öt_t
 (*
	tngx_evít_£t_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

31 *
	td©a
);

32 (*
	tngx_evít_ßve_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

33 *
	td©a
);

37 
	sngx_≥î_c⁄√˘i⁄_s
 {

38 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

40 
sockaddr
 *sockaddr;

41 
sockÀn_t
 
sockÀn
;

42 
ngx_°r_t
 *
«me
;

44 
ngx_uöt_t
 
åõs
;

45 
ngx_m£c_t
 
°¨t_time
;

47 
ngx_evít_gë_≥î_±
 
gë
;

48 
ngx_evít_‰ì_≥î_±
 
‰ì
;

49 *
d©a
;

51 #i‡(
NGX_SSL
)

52 
ngx_evít_£t_≥î_£ssi⁄_±
 
£t_£ssi⁄
;

53 
ngx_evít_ßve_≥î_£ssi⁄_±
 
ßve_£ssi⁄
;

56 
ngx_addr_t
 *
loˇl
;

58 
rcvbuf
;

60 
ngx_log_t
 *
log
;

62 
ˇched
:1;

65 
log_îr‹
:2;

69 
ngx_öt_t
 
	`ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
);

70 
ngx_öt_t
 
	`ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

	@src/event/ngx_event_openssl.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_SSL_PASSWORD_BUFFER_SIZE
 4096

	)

17 
ngx_uöt_t
 
	mígöe
;

18 } 
	tngx_›ís¶_c⁄f_t
;

21 
ngx_s¶_∑ssw‹d_ˇŒback
(*
buf
, 
size
, 
rwÊag
,

22 *
u£rd©a
);

23 
ngx_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
);

24 
ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
,

25 
ªt
);

26 
ngx_s¶_∑ssw‹ds_˛ónup
(*
d©a
);

27 
ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
);

28 
ngx_öt_t
 
ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
);

29 
ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

30 
ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

31 
ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
,

33 
ngx_îr_t
 
îr
, *
ãxt
);

34 
ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
);

36 
ngx_öt_t
 
ngx_s¶_£ssi⁄_id_c⁄ãxt
(
ngx_s¶_t
 *
s¶
,

37 
ngx_°r_t
 *
£ss_˘x
);

38 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

39 
ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

40 
ngx_s¶_£ssi⁄_t
 *
£ss
);

41 
ngx_s¶_£ssi⁄_t
 *
ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

42 
u_ch¨
 *
id
, 
Àn
, *
c›y
);

43 
ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

44 
ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

45 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
);

46 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

47 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

49 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


50 
ngx_s¶_£ssi⁄_tickë_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

51 *
«me
, *
iv
, 
EVP_CIPHER_CTX
 *
e˘x
,

52 
HMAC_CTX
 *
h˘x
, 
íc
);

55 #i‡(
OPENSSL_VERSION_NUMBER
 < 0x10002002L || 
deföed
 
LIBRESSL_VERSION_NUMBER
)

56 
ngx_öt_t
 
ngx_s¶_check_«me
(
ngx_°r_t
 *
«me
, 
ASN1_STRING
 *
°r
);

59 *
ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

60 *
ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

61 
ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
);

64 
ngx_comm™d_t
 
	gngx_›ís¶_comm™ds
[] = {

66 { 
ngx_°rög
("ssl_engine"),

67 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

68 
ngx_›ís¶_ígöe
,

71 
NULL
 },

73 
ngx_nuŒ_comm™d


77 
ngx_c‹e_moduÀ_t
 
	gngx_›ís¶_moduÀ_˘x
 = {

78 
ngx_°rög
("openssl"),

79 
ngx_›ís¶_¸óã_c⁄f
,

80 
NULL


84 
ngx_moduÀ_t
 
	gngx_›ís¶_moduÀ
 = {

85 
NGX_MODULE_V1
,

86 &
ngx_›ís¶_moduÀ_˘x
,

87 
ngx_›ís¶_comm™ds
,

88 
NGX_CORE_MODULE
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
NULL
,

93 
NULL
,

94 
NULL
,

95 
ngx_›ís¶_exô
,

96 
NGX_MODULE_V1_PADDING


100 
	gngx_s¶_c⁄√˘i⁄_ödex
;

101 
	gngx_s¶_£rvî_c⁄f_ödex
;

102 
	gngx_s¶_£ssi⁄_ˇche_ödex
;

103 
	gngx_s¶_£ssi⁄_tickë_keys_ödex
;

104 
	gngx_s¶_˚πifiˇã_ödex
;

105 
	gngx_s¶_°≠lög_ödex
;

108 
ngx_öt_t


109 
	$ngx_s¶_öô
(
ngx_log_t
 *
log
)

111 #i‚de‡
OPENSSL_IS_BORINGSSL


112 
	`OPENSSL_c⁄fig
(
NULL
);

115 
	`SSL_libøry_öô
();

116 
	`SSL_lﬂd_îr‹_°rögs
();

118 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

120 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

121 #i‚de‡
SSL_OP_NO_COMPRESSION


127 
n
;

128 
	`STACK_OF
(
SSL_COMP
Ë*
s¶_comp_mëhods
;

130 
s¶_comp_mëhods
 = 
	`SSL_COMP_gë_com¥essi⁄_mëhods
();

131 
n
 = 
	`sk_SSL_COMP_num
(
s¶_comp_mëhods
);

133 
n
--) {

134 (Ë
	`sk_SSL_COMP_p›
(
s¶_comp_mëhods
);

140 
ngx_s¶_c⁄√˘i⁄_ödex
 = 
	`SSL_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL, NULL);

142 i‡(
ngx_s¶_c⁄√˘i⁄_ödex
 == -1) {

143 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "SSL_get_ex_new_index() failed");

144  
NGX_ERROR
;

147 
ngx_s¶_£rvî_c⁄f_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

148 
NULL
);

149 i‡(
ngx_s¶_£rvî_c⁄f_ödex
 == -1) {

150 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

152  
NGX_ERROR
;

155 
ngx_s¶_£ssi⁄_ˇche_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

156 
NULL
);

157 i‡(
ngx_s¶_£ssi⁄_ˇche_ödex
 == -1) {

158 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

160  
NGX_ERROR
;

163 
ngx_s¶_£ssi⁄_tickë_keys_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL,

164 
NULL
, NULL);

165 i‡(
ngx_s¶_£ssi⁄_tickë_keys_ödex
 == -1) {

166 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

168  
NGX_ERROR
;

171 
ngx_s¶_˚πifiˇã_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

172 
NULL
);

173 i‡(
ngx_s¶_˚πifiˇã_ödex
 == -1) {

174 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

176  
NGX_ERROR
;

179 
ngx_s¶_°≠lög_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

180 
NULL
);

181 i‡(
ngx_s¶_°≠lög_ödex
 == -1) {

182 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

184  
NGX_ERROR
;

187  
NGX_OK
;

188 
	}
}

191 
ngx_öt_t


192 
	$ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
)

194 
s¶
->
˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_mëhod
());

196 i‡(
s¶
->
˘x
 =
NULL
) {

197 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "SSL_CTX_new() failed");

198  
NGX_ERROR
;

201 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
, 
d©a
) == 0) {

202 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

204  
NGX_ERROR
;

207 
s¶
->
buf„r_size
 = 
NGX_SSL_BUFSIZE
;

211 #ifde‡
SSL_OP_MICROSOFT_SESS_ID_BUG


212 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_SESS_ID_BUG
);

215 #ifde‡
SSL_OP_NETSCAPE_CHALLENGE_BUG


216 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NETSCAPE_CHALLENGE_BUG
);

221 #ifde‡
SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG


222 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
);

225 #ifde‡
SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER


226 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
);

229 #ifde‡
SSL_OP_MSIE_SSLV2_RSA_PADDING


231 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MSIE_SSLV2_RSA_PADDING
);

234 #ifde‡
SSL_OP_SSLEAY_080_CLIENT_DH_BUG


235 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLEAY_080_CLIENT_DH_BUG
);

238 #ifde‡
SSL_OP_TLS_D5_BUG


239 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_D5_BUG
);

242 #ifde‡
SSL_OP_TLS_BLOCK_PADDING_BUG


243 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_BLOCK_PADDING_BUG
);

246 #ifde‡
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS


247 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
);

250 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_DH_USE
);

252 #ifde‡
SSL_CTRL_CLEAR_OPTIONS


254 
	`SSL_CTX_˛ór_›ti⁄s
(
s¶
->
˘x
,

255 
SSL_OP_NO_SSLv2
|
SSL_OP_NO_SSLv3
|
SSL_OP_NO_TLSv1
);

258 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv2
)) {

259 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv2
);

261 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv3
)) {

262 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv3
);

264 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1
)) {

265 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1
);

267 #ifde‡
SSL_OP_NO_TLSv1_1


268 
	`SSL_CTX_˛ór_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_1
);

269 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_1
)) {

270 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_1
);

273 #ifde‡
SSL_OP_NO_TLSv1_2


274 
	`SSL_CTX_˛ór_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_2
);

275 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_2
)) {

276 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_2
);

280 #ifde‡
SSL_OP_NO_COMPRESSION


281 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_COMPRESSION
);

284 #ifde‡
SSL_MODE_RELEASE_BUFFERS


285 
	`SSL_CTX_£t_mode
(
s¶
->
˘x
, 
SSL_MODE_RELEASE_BUFFERS
);

288 #ifde‡
SSL_MODE_NO_AUTO_CHAIN


289 
	`SSL_CTX_£t_mode
(
s¶
->
˘x
, 
SSL_MODE_NO_AUTO_CHAIN
);

292 
	`SSL_CTX_£t_ªad_ahód
(
s¶
->
˘x
, 1);

294 
	`SSL_CTX_£t_öfo_ˇŒback
(
s¶
->
˘x
, 
ngx_s¶_öfo_ˇŒback
);

296  
NGX_OK
;

297 
	}
}

300 
ngx_öt_t


301 
	$ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

302 
ngx_°r_t
 *
key
, 
ngx_¨øy_t
 *
∑ssw‹ds
)

304 
BIO
 *
bio
;

305 
X509
 *
x509
;

306 
u_l⁄g
 
n
;

307 
ngx_°r_t
 *
pwd
;

308 
ngx_uöt_t
 
åõs
;

310 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

311  
NGX_ERROR
;

320 
bio
 = 
	`BIO_√w_fûe
((*Ë
˚π
->
d©a
, "r");

321 i‡(
bio
 =
NULL
) {

322 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

323 "BIO_√w_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

324  
NGX_ERROR
;

327 
x509
 = 
	`PEM_ªad_bio_X509_AUX
(
bio
, 
NULL
, NULL, NULL);

328 i‡(
x509
 =
NULL
) {

329 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

330 "PEM_ªad_bio_X509_AUX(\"%s\"ËÁûed", 
˚π
->
d©a
);

331 
	`BIO_‰ì
(
bio
);

332  
NGX_ERROR
;

335 i‡(
	`SSL_CTX_u£_˚πifiˇã
(
s¶
->
˘x
, 
x509
) == 0) {

336 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

337 "SSL_CTX_u£_˚πifiˇã(\"%s\"ËÁûed", 
˚π
->
d©a
);

338 
	`X509_‰ì
(
x509
);

339 
	`BIO_‰ì
(
bio
);

340  
NGX_ERROR
;

343 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
, 
x509
)

346 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

348 
	`X509_‰ì
(
x509
);

349 
	`BIO_‰ì
(
bio
);

350  
NGX_ERROR
;

353 
	`X509_‰ì
(
x509
);

359 
x509
 = 
	`PEM_ªad_bio_X509
(
bio
, 
NULL
, NULL, NULL);

360 i‡(
x509
 =
NULL
) {

361 
n
 = 
	`ERR_≥ek_œ°_îr‹
();

363 i‡(
	`ERR_GET_LIB
(
n
Ë=
ERR_LIB_PEM


364 && 
	`ERR_GET_REASON
(
n
Ë=
PEM_R_NO_START_LINE
)

367 
	`ERR_˛ór_îr‹
();

373 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

374 "PEM_ªad_bio_X509(\"%s\"ËÁûed", 
˚π
->
d©a
);

375 
	`BIO_‰ì
(
bio
);

376  
NGX_ERROR
;

379 i‡(
	`SSL_CTX_add_exåa_chaö_˚π
(
s¶
->
˘x
, 
x509
) == 0) {

380 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

382 
˚π
->
d©a
);

383 
	`X509_‰ì
(
x509
);

384 
	`BIO_‰ì
(
bio
);

385  
NGX_ERROR
;

389 
	`BIO_‰ì
(
bio
);

391 i‡(
	`ngx_°∫cmp
(
key
->
d©a
, "engine:", ("engine:") - 1) == 0) {

393 #i‚de‡
OPENSSL_NO_ENGINE


395 
u_ch¨
 *
p
, *
œ°
;

396 
ENGINE
 *
ígöe
;

397 
EVP_PKEY
 *
pkey
;

399 
p
 = 
key
->
d©a
 + ("engine:") - 1;

400 
œ°
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
p
, ':');

402 i‡(
œ°
 =
NULL
) {

403 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

404 "övÆid sy¡ax i¿\"%V\"", 
key
);

405  
NGX_ERROR
;

408 *
œ°
 = '\0';

410 
ígöe
 = 
	`ENGINE_by_id
((*Ë
p
);

412 i‡(
ígöe
 =
NULL
) {

413 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

414 "ENGINE_by_id(\"%s\"ËÁûed", 
p
);

415  
NGX_ERROR
;

418 *
œ°
++ = ':';

420 
pkey
 = 
	`ENGINE_lﬂd_¥iv©e_key
(
ígöe
, (*Ë
œ°
, 0, 0);

422 i‡(
pkey
 =
NULL
) {

423 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

424 "ENGINE_lﬂd_¥iv©e_key(\"%s\"ËÁûed", 
œ°
);

425 
	`ENGINE_‰ì
(
ígöe
);

426  
NGX_ERROR
;

429 
	`ENGINE_‰ì
(
ígöe
);

431 i‡(
	`SSL_CTX_u£_Priv©eKey
(
s¶
->
˘x
, 
pkey
) == 0) {

432 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

433 "SSL_CTX_u£_Priv©eKey(\"%s\"ËÁûed", 
œ°
);

434 
	`EVP_PKEY_‰ì
(
pkey
);

435  
NGX_ERROR
;

438 
	`EVP_PKEY_‰ì
(
pkey
);

440  
NGX_OK
;

444 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

447  
NGX_ERROR
;

452 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
key
, 1Ë!
NGX_OK
) {

453  
NGX_ERROR
;

456 i‡(
∑ssw‹ds
) {

457 
åõs
 = 
∑ssw‹ds
->
√…s
;

458 
pwd
 = 
∑ssw‹ds
->
ñts
;

460 
	`SSL_CTX_£t_deÁu…_∑sswd_cb
(
s¶
->
˘x
, 
ngx_s¶_∑ssw‹d_ˇŒback
);

461 
	`SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
s¶
->
˘x
, 
pwd
);

464 
åõs
 = 1;

465 #i‡(
NGX_SUPPRESS_WARN
)

466 
pwd
 = 
NULL
;

472 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
s¶
->
˘x
, (*Ë
key
->
d©a
,

473 
SSL_FILETYPE_PEM
)

479 i‡(--
åõs
) {

480 
	`ERR_˛ór_îr‹
();

481 
	`SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
s¶
->
˘x
, ++
pwd
);

485 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

486 "SSL_CTX_u£_Priv©eKey_fûe(\"%s\"ËÁûed", 
key
->
d©a
);

487  
NGX_ERROR
;

490 
	`SSL_CTX_£t_deÁu…_∑sswd_cb
(
s¶
->
˘x
, 
NULL
);

492  
NGX_OK
;

493 
	}
}

497 
	$ngx_s¶_∑ssw‹d_ˇŒback
(*
buf
, 
size
, 
rwÊag
, *
u£rd©a
)

499 
ngx_°r_t
 *
pwd
 = 
u£rd©a
;

501 i‡(
rwÊag
) {

502 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

507 i‡(
pwd
->
Àn
 > (
size_t
Ë
size
) {

508 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ngx_cy˛e
->
log
, 0,

509 "∑ssw‹d i†åunˇãdÅÿ%d byãs", 
size
);

511 
size
 = 
pwd
->
Àn
;

514 
	`ngx_mem˝y
(
buf
, 
pwd
->
d©a
, 
size
);

516  
size
;

517 
	}
}

520 
ngx_öt_t


521 
	$ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

522 
ngx_öt_t
 
dïth
)

524 
	`STACK_OF
(
X509_NAME
Ë*
li°
;

526 
	`SSL_CTX_£t_vîify
(
s¶
->
˘x
, 
SSL_VERIFY_PEER
, 
ngx_s¶_vîify_ˇŒback
);

528 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

530 i‡(
˚π
->
Àn
 == 0) {

531  
NGX_OK
;

534 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

535  
NGX_ERROR
;

538 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

541 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

543 
˚π
->
d©a
);

544  
NGX_ERROR
;

552 
	`ERR_˛ór_îr‹
();

554 
li°
 = 
	`SSL_lﬂd_˛õ¡_CA_fûe
((*Ë
˚π
->
d©a
);

556 i‡(
li°
 =
NULL
) {

557 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

558 "SSL_lﬂd_˛õ¡_CA_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

559  
NGX_ERROR
;

567 
	`ERR_˛ór_îr‹
();

569 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
s¶
->
˘x
, 
li°
);

571  
NGX_OK
;

572 
	}
}

575 
ngx_öt_t


576 
	$ngx_s¶_åu°ed_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

577 
ngx_öt_t
 
dïth
)

579 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

581 i‡(
˚π
->
Àn
 == 0) {

582  
NGX_OK
;

585 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

586  
NGX_ERROR
;

589 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

592 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

594 
˚π
->
d©a
);

595  
NGX_ERROR
;

603 
	`ERR_˛ór_îr‹
();

605  
NGX_OK
;

606 
	}
}

609 
ngx_öt_t


610 
	$ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
)

612 
X509_STORE
 *
°‹e
;

613 
X509_LOOKUP
 *
lookup
;

615 i‡(
¸l
->
Àn
 == 0) {

616  
NGX_OK
;

619 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
¸l
, 1Ë!
NGX_OK
) {

620  
NGX_ERROR
;

623 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

625 i‡(
°‹e
 =
NULL
) {

626 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

628  
NGX_ERROR
;

631 
lookup
 = 
	`X509_STORE_add_lookup
(
°‹e
, 
	`X509_LOOKUP_fûe
());

633 i‡(
lookup
 =
NULL
) {

634 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

636  
NGX_ERROR
;

639 i‡(
	`X509_LOOKUP_lﬂd_fûe
(
lookup
, (*Ë
¸l
->
d©a
, 
X509_FILETYPE_PEM
)

642 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

643 "X509_LOOKUP_lﬂd_fûe(\"%s\"ËÁûed", 
¸l
->
d©a
);

644  
NGX_ERROR
;

647 
	`X509_STORE_£t_Êags
(
°‹e
,

648 
X509_V_FLAG_CRL_CHECK
|
X509_V_FLAG_CRL_CHECK_ALL
);

650  
NGX_OK
;

651 
	}
}

655 
	$ngx_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
)

657 #i‡(
NGX_DEBUG
)

658 *
subje˘
, *
issuî
;

659 
îr
, 
dïth
;

660 
X509
 *
˚π
;

661 
X509_NAME
 *
¢ame
, *
öame
;

662 
ngx_c⁄√˘i⁄_t
 *
c
;

663 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
;

665 
s¶_c⁄n
 = 
	`X509_STORE_CTX_gë_ex_d©a
(
x509_°‹e
,

666 
	`SSL_gë_ex_d©a_X509_STORE_CTX_idx
());

668 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

670 
˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
x509_°‹e
);

671 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
x509_°‹e
);

672 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
x509_°‹e
);

674 
¢ame
 = 
	`X509_gë_subje˘_«me
(
˚π
);

675 
subje˘
 = 
¢ame
 ? 
	`X509_NAME_⁄ñöe
(¢ame, 
NULL
, 0) : "(none)";

677 
öame
 = 
	`X509_gë_issuî_«me
(
˚π
);

678 
issuî
 = 
öame
 ? 
	`X509_NAME_⁄ñöe
(öame, 
NULL
, 0) : "(none)";

680 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

683 
ok
, 
îr
, 
dïth
, 
subje˘
, 
issuî
);

685 i‡(
¢ame
) {

686 
	`OPENSSL_‰ì
(
subje˘
);

689 i‡(
öame
) {

690 
	`OPENSSL_‰ì
(
issuî
);

695 
	}
}

699 
	$ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
, 
ªt
)

701 
BIO
 *
rbio
, *
wbio
;

702 
ngx_c⁄√˘i⁄_t
 *
c
;

704 i‡(
whîe
 & 
SSL_CB_HANDSHAKE_START
) {

705 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

707 i‡(
c
->
s¶
->
h™dshaked
) {

708 
c
->
s¶
->
ª√gŸüti⁄
 = 1;

709 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÑenegotiation");

713 i‡((
whîe
 & 
SSL_CB_ACCEPT_LOOP
) == SSL_CB_ACCEPT_LOOP) {

714 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

716 i‡(!
c
->
s¶
->
h™dshake_buf„r_£t
) {

728 
rbio
 = 
	`SSL_gë_rbio
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

729 
wbio
 = 
	`SSL_gë_wbio
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

731 i‡(
rbio
 !
wbio
) {

732 (Ë
	`BIO_£t_wrôe_buf„r_size
(
wbio
, 
NGX_SSL_BUFSIZE
);

733 
c
->
s¶
->
h™dshake_buf„r_£t
 = 1;

737 
	}
}

740 
RSA
 *

741 
	$ngx_s¶_rß512_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
is_exp‹t
,

742 
key_Àngth
)

744 
RSA
 *
key
;

746 i‡(
key_Àngth
 != 512) {

747  
NULL
;

750 #i‚de‡
OPENSSL_NO_DEPRECATED


752 i‡(
key
 =
NULL
) {

753 
key
 = 
	`RSA_gíî©e_key
(512, 
RSA_F4
, 
NULL
, NULL);

758  
key
;

759 
	}
}

762 
ngx_¨øy_t
 *

763 
	$ngx_s¶_ªad_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûe
)

765 
u_ch¨
 *
p
, *
œ°
, *
íd
;

766 
size_t
 
Àn
;

767 
ssize_t
 
n
;

768 
ngx_fd_t
 
fd
;

769 
ngx_°r_t
 *
pwd
;

770 
ngx_¨øy_t
 *
∑ssw‹ds
;

771 
ngx_poﬁ_˛ónup_t
 *
˛n
;

772 
u_ch¨
 
buf
[
NGX_SSL_PASSWORD_BUFFER_SIZE
];

774 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

775  
NULL
;

778 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
ãmp_poﬁ
, 0);

779 
∑ssw‹ds
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 4, (
ngx_°r_t
));

781 i‡(
˛n
 =
NULL
 || 
∑ssw‹ds
 == NULL) {

782  
NULL
;

785 
˛n
->
h™dÀr
 = 
ngx_s¶_∑ssw‹ds_˛ónup
;

786 
˛n
->
d©a
 = 
∑ssw‹ds
;

788 
fd
 = 
	`ngx_›í_fûe
(
fûe
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

789 i‡(
fd
 =
NGX_INVALID_FILE
) {

790 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

791 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
->
d©a
);

792  
NULL
;

795 
Àn
 = 0;

796 
œ°
 = 
buf
;

799 
n
 = 
	`ngx_ªad_fd
(
fd
, 
œ°
, 
NGX_SSL_PASSWORD_BUFFER_SIZE
 - 
Àn
);

801 i‡(
n
 == -1) {

802 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

803 
ngx_ªad_fd_n
 " \"%s\" faûed", 
fûe
->
d©a
);

804 
∑ssw‹ds
 = 
NULL
;

805 
˛ónup
;

808 
íd
 = 
œ°
 + 
n
;

810 i‡(
Àn
 && 
n
 == 0) {

811 *
íd
++ = 
LF
;

814 
p
 = 
buf
;

817 
œ°
 = 
	`ngx_°æchr
÷a°, 
íd
, 
LF
);

819 i‡(
œ°
 =
NULL
) {

823 
Àn
 = 
œ°
++ - 
p
;

825 i‡(
Àn
 && 
p
[À¿- 1] =
CR
) {

826 
Àn
--;

829 i‡(
Àn
) {

830 
pwd
 = 
	`ngx_¨øy_push
(
∑ssw‹ds
);

831 i‡(
pwd
 =
NULL
) {

832 
∑ssw‹ds
 = 
NULL
;

833 
˛ónup
;

836 
pwd
->
Àn
 =Üen;

837 
pwd
->
d©a
 = 
	`ngx_≤Æloc
(
cf
->
ãmp_poﬁ
, 
Àn
);

839 i‡(
pwd
->
d©a
 =
NULL
) {

840 
∑ssw‹ds
->
√…s
--;

841 
∑ssw‹ds
 = 
NULL
;

842 
˛ónup
;

845 
	`ngx_mem˝y
(
pwd
->
d©a
, 
p
, 
Àn
);

848 
p
 = 
œ°
;

851 
Àn
 = 
íd
 - 
p
;

853 i‡(
Àn
 =
NGX_SSL_PASSWORD_BUFFER_SIZE
) {

854 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

855 "toÿl⁄gÜöêö \"%s\"", 
fûe
->
d©a
);

856 
∑ssw‹ds
 = 
NULL
;

857 
˛ónup
;

860 
	`ngx_memmove
(
buf
, 
p
, 
Àn
);

861 
œ°
 = 
buf
 + 
Àn
;

863 } 
n
 != 0);

865 i‡(
∑ssw‹ds
->
√…s
 == 0) {

866 
pwd
 = 
	`ngx_¨øy_push
(
∑ssw‹ds
);

867 i‡(
pwd
 =
NULL
) {

868 
∑ssw‹ds
 = 
NULL
;

869 
˛ónup
;

872 
	`ngx_memzîo
(
pwd
, (
ngx_°r_t
));

875 
˛ónup
:

877 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

878 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ALERT
, 
cf
, 
ngx_î∫o
,

879 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
d©a
);

882 
	`ngx_memzîo
(
buf
, 
NGX_SSL_PASSWORD_BUFFER_SIZE
);

884  
∑ssw‹ds
;

885 
	}
}

889 
	$ngx_s¶_∑ssw‹ds_˛ónup
(*
d©a
)

891 
ngx_¨øy_t
 *
∑ssw‹ds
 = 
d©a
;

893 
ngx_°r_t
 *
pwd
;

894 
ngx_uöt_t
 
i
;

896 
pwd
 = 
∑ssw‹ds
->
ñts
;

898 
i
 = 0; i < 
∑ssw‹ds
->
√…s
; i++) {

899 
	`ngx_memzîo
(
pwd
[
i
].
d©a
,Öwd[i].
Àn
);

901 
	}
}

904 
ngx_öt_t


905 
	$ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
)

907 
DH
 *
dh
;

908 
BIO
 *
bio
;

918 
dh1024_p
[] = {

932 
dh1024_g
[] = { 0x02 };

935 i‡(
fûe
->
Àn
 == 0) {

937 
dh
 = 
	`DH_√w
();

938 i‡(
dh
 =
NULL
) {

939 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "DH_new() failed");

940  
NGX_ERROR
;

943 
dh
->
p
 = 
	`BN_bö2bn
(
dh1024_p
, (dh1024_p), 
NULL
);

944 
dh
->
g
 = 
	`BN_bö2bn
(
dh1024_g
, (dh1024_g), 
NULL
);

946 i‡(
dh
->
p
 =
NULL
 || dh->
g
 == NULL) {

947 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "BN_bin2bn() failed");

948 
	`DH_‰ì
(
dh
);

949  
NGX_ERROR
;

952 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

954 
	`DH_‰ì
(
dh
);

956  
NGX_OK
;

959 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

960  
NGX_ERROR
;

963 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

964 i‡(
bio
 =
NULL
) {

965 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

966 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

967  
NGX_ERROR
;

970 
dh
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

971 i‡(
dh
 =
NULL
) {

972 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

973 "PEM_ªad_bio_DH∑øms(\"%s\"ËÁûed", 
fûe
->
d©a
);

974 
	`BIO_‰ì
(
bio
);

975  
NGX_ERROR
;

978 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

980 
	`DH_‰ì
(
dh
);

981 
	`BIO_‰ì
(
bio
);

983  
NGX_OK
;

984 
	}
}

987 
ngx_öt_t


988 
	$ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
)

990 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

991 #i‚de‡
OPENSSL_NO_ECDH


992 
nid
;

993 
EC_KEY
 *
ecdh
;

1002 
nid
 = 
	`OBJ_¢2nid
((c⁄° *Ë
«me
->
d©a
);

1003 i‡(
nid
 == 0) {

1004 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1005 "Unknow¿curvê«mê\"%s\"", 
«me
->
d©a
);

1006  
NGX_ERROR
;

1009 
ecdh
 = 
	`EC_KEY_√w_by_curve_«me
(
nid
);

1010 i‡(
ecdh
 =
NULL
) {

1011 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1012 "U«bÀÅÿ¸óã curvê\"%s\"", 
«me
->
d©a
);

1013  
NGX_ERROR
;

1016 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_ECDH_USE
);

1018 
	`SSL_CTX_£t_tmp_ecdh
(
s¶
->
˘x
, 
ecdh
);

1020 
	`EC_KEY_‰ì
(
ecdh
);

1024  
NGX_OK
;

1025 
	}
}

1028 
ngx_öt_t


1029 
	$ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

1031 
ngx_s¶_c⁄√˘i⁄_t
 *
sc
;

1033 
sc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_s¶_c⁄√˘i⁄_t
));

1034 i‡(
sc
 =
NULL
) {

1035  
NGX_ERROR
;

1038 
sc
->
buf„r
 = ((
Êags
 & 
NGX_SSL_BUFFER
) != 0);

1039 
sc
->
buf„r_size
 = 
s¶
->buffer_size;

1041 
sc
->
c⁄√˘i⁄
 = 
	`SSL_√w
(
s¶
->
˘x
);

1043 i‡(
sc
->
c⁄√˘i⁄
 =
NULL
) {

1044 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_new() failed");

1045  
NGX_ERROR
;

1048 i‡(
	`SSL_£t_fd
(
sc
->
c⁄√˘i⁄
, 
c
->
fd
) == 0) {

1049 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_fd() failed");

1050  
NGX_ERROR
;

1053 i‡(
Êags
 & 
NGX_SSL_CLIENT
) {

1054 
	`SSL_£t_c⁄√˘_°©e
(
sc
->
c⁄√˘i⁄
);

1057 
	`SSL_£t_ac˚±_°©e
(
sc
->
c⁄√˘i⁄
);

1060 i‡(
	`SSL_£t_ex_d©a
(
sc
->
c⁄√˘i⁄
, 
ngx_s¶_c⁄√˘i⁄_ödex
, 
c
) == 0) {

1061 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_ex_data() failed");

1062  
NGX_ERROR
;

1065 
c
->
s¶
 = 
sc
;

1067  
NGX_OK
;

1068 
	}
}

1071 
ngx_öt_t


1072 
	$ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
)

1074 i‡(
£ssi⁄
) {

1075 i‡(
	`SSL_£t_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
, 
£ssi⁄
) == 0) {

1076 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_session() failed");

1077  
NGX_ERROR
;

1081  
NGX_OK
;

1082 
	}
}

1085 
ngx_öt_t


1086 
	$ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

1088 
n
, 
s¶îr
;

1089 
ngx_îr_t
 
îr
;

1091 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1093 
n
 = 
	`SSL_do_h™dshake
(
c
->
s¶
->
c⁄√˘i⁄
);

1095 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_do_h™dshake: %d", 
n
);

1097 i‡(
n
 == 1) {

1099 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1100  
NGX_ERROR
;

1103 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1104  
NGX_ERROR
;

1107 #i‡(
NGX_DEBUG
)

1109 
buf
[129], *
s
, *
d
;

1110 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

1113 
SSL_CIPHER
 *
cùhî
;

1115 
cùhî
 = 
	`SSL_gë_cuºít_cùhî
(
c
->
s¶
->
c⁄√˘i⁄
);

1117 i‡(
cùhî
) {

1118 
	`SSL_CIPHER_des¸ùti⁄
(
cùhî
, &
buf
[1], 128);

1120 
s
 = &
buf
[1], 
d
 = buf; *s; s++) {

1121 i‡(*
s
 =' ' && *
d
 == ' ') {

1125 i‡(*
s
 =
LF
 || *†=
CR
) {

1129 *++
d
 = *
s
;

1132 i‡(*
d
 != ' ') {

1133 
d
++;

1136 *
d
 = '\0';

1138 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1140 
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
), &
buf
[1]);

1142 i‡(
	`SSL_£ssi⁄_ªu£d
(
c
->
s¶
->
c⁄√˘i⁄
)) {

1143 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1148 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1154 
c
->
s¶
->
h™dshaked
 = 1;

1156 
c
->
ªcv
 = 
ngx_s¶_ªcv
;

1157 
c
->
£nd
 = 
ngx_s¶_wrôe
;

1158 
c
->
ªcv_chaö
 = 
ngx_s¶_ªcv_chaö
;

1159 
c
->
£nd_chaö
 = 
ngx_s¶_£nd_chaö
;

1161 #ifde‡
SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS


1164 i‡(
c
->
s¶
->
c⁄√˘i⁄
->
s3
) {

1165 
c
->
s¶
->
c⁄√˘i⁄
->
s3
->
Êags
 |
SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
;

1170  
NGX_OK
;

1173 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1175 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1177 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1178 
c
->
ªad
->
ªady
 = 0;

1179 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

1180 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

1182 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1183  
NGX_ERROR
;

1186 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1187  
NGX_ERROR
;

1190  
NGX_AGAIN
;

1193 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1194 
c
->
wrôe
->
ªady
 = 0;

1195 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

1196 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

1198 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1199  
NGX_ERROR
;

1202 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1203  
NGX_ERROR
;

1206  
NGX_AGAIN
;

1209 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1211 
c
->
s¶
->
no_waô_shutdown
 = 1;

1212 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1213 
c
->
ªad
->
eof
 = 1;

1215 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

1216 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

1219  
NGX_ERROR
;

1222 
c
->
ªad
->
îr‹
 = 1;

1224 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_do_handshake() failed");

1226  
NGX_ERROR
;

1227 
	}
}

1231 
	$ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
)

1233 
ngx_c⁄√˘i⁄_t
 *
c
;

1235 
c
 = 
ev
->
d©a
;

1237 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1238 "SSL h™dshakêh™dÀr: %d", 
ev
->
wrôe
);

1240 i‡(
ev
->
timedout
) {

1241 
c
->
s¶
->
	`h™dÀr
(c);

1245 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

1249 
c
->
s¶
->
	`h™dÀr
(c);

1250 
	}
}

1253 
ssize_t


1254 
	$ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
, 
off_t
 
limô
)

1256 
u_ch¨
 *
œ°
;

1257 
ssize_t
 
n
, 
byãs
, 
size
;

1258 
ngx_buf_t
 *
b
;

1260 
byãs
 = 0;

1262 
b
 = 
˛
->
buf
;

1263 
œ°
 = 
b
->last;

1266 
size
 = 
b
->
íd
 - 
œ°
;

1268 i‡(
limô
) {

1269 i‡(
byãs
 >
limô
) {

1270  
byãs
;

1273 i‡(
byãs
 + 
size
 > 
limô
) {

1274 
size
 = (
ssize_t
Ë(
limô
 - 
byãs
);

1278 
n
 = 
	`ngx_s¶_ªcv
(
c
, 
œ°
, 
size
);

1280 i‡(
n
 > 0) {

1281 
œ°
 +
n
;

1282 
byãs
 +
n
;

1284 i‡(
œ°
 =
b
->
íd
) {

1285 
˛
 = cl->
√xt
;

1287 i‡(
˛
 =
NULL
) {

1288  
byãs
;

1291 
b
 = 
˛
->
buf
;

1292 
œ°
 = 
b
->last;

1298 i‡(
byãs
) {

1300 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

1301 
c
->
ªad
->
ªady
 = 1;

1304  
byãs
;

1307  
n
;

1309 
	}
}

1312 
ssize_t


1313 
	$ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

1315 
n
, 
byãs
;

1317 i‡(
c
->
s¶
->
œ°
 =
NGX_ERROR
) {

1318 
c
->
ªad
->
îr‹
 = 1;

1319  
NGX_ERROR
;

1322 i‡(
c
->
s¶
->
œ°
 =
NGX_DONE
) {

1323 
c
->
ªad
->
ªady
 = 0;

1324 
c
->
ªad
->
eof
 = 1;

1328 
byãs
 = 0;

1330 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1339 
n
 = 
	`SSL_ªad
(
c
->
s¶
->
c⁄√˘i⁄
, 
buf
, 
size
);

1341 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_ªad: %d", 
n
);

1343 i‡(
n
 > 0) {

1344 
byãs
 +
n
;

1347 
c
->
s¶
->
œ°
 = 
	`ngx_s¶_h™dÀ_ªcv
(c, 
n
);

1349 i‡(
c
->
s¶
->
œ°
 =
NGX_OK
) {

1351 
size
 -
n
;

1353 i‡(
size
 == 0) {

1354 
c
->
ªad
->
ªady
 = 1;

1355  
byãs
;

1358 
buf
 +
n
;

1363 i‡(
byãs
) {

1364 i‡(
c
->
s¶
->
œ°
 !
NGX_AGAIN
) {

1365 
c
->
ªad
->
ªady
 = 1;

1368  
byãs
;

1371 
c
->
s¶
->
œ°
) {

1373 
NGX_DONE
:

1374 
c
->
ªad
->
ªady
 = 0;

1375 
c
->
ªad
->
eof
 = 1;

1378 
NGX_ERROR
:

1379 
c
->
ªad
->
îr‹
 = 1;

1383 
NGX_AGAIN
:

1384  
c
->
s¶
->
œ°
;

1387 
	}
}

1390 
ngx_öt_t


1391 
	$ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
)

1393 
s¶îr
;

1394 
ngx_îr_t
 
îr
;

1396 i‡(
c
->
s¶
->
ª√gŸüti⁄
) {

1403 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
c
->
log
, 0, "SSLÑenegotiation disabled");

1405 
	`ERR_≥ek_îr‹
()) {

1406 
	`ngx_s¶_îr‹
(
NGX_LOG_DEBUG
, 
c
->
log
, 0,

1410 
	`ERR_˛ór_îr‹
();

1412 
c
->
s¶
->
no_waô_shutdown
 = 1;

1413 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1415  
NGX_ERROR
;

1418 i‡(
n
 > 0) {

1420 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
) {

1422 
c
->
wrôe
->
h™dÀr
 = c->
s¶
->
ßved_wrôe_h™dÀr
;

1423 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = 
NULL
;

1424 
c
->
wrôe
->
ªady
 = 1;

1426 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1427  
NGX_ERROR
;

1430 
	`ngx_po°_evít
(
c
->
wrôe
, &
ngx_po°ed_evíts
);

1433  
NGX_OK
;

1436 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1438 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1440 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1442 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1443 
c
->
ªad
->
ªady
 = 0;

1444  
NGX_AGAIN
;

1447 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1449 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1452 
c
->
wrôe
->
ªady
 = 0;

1454 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1455  
NGX_ERROR
;

1462 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
 =
NULL
) {

1463 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = c->
wrôe
->
h™dÀr
;

1464 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_wrôe_h™dÀr
;

1467  
NGX_AGAIN
;

1470 
c
->
s¶
->
no_waô_shutdown
 = 1;

1471 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1473 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

1474 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1476  
NGX_DONE
;

1479 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_read() failed");

1481  
NGX_ERROR
;

1482 
	}
}

1486 
	$ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

1488 
ngx_c⁄√˘i⁄_t
 *
c
;

1490 
c
 = 
wev
->
d©a
;

1492 
c
->
ªad
->
	`h™dÀr
(c->read);

1493 
	}
}

1504 
ngx_chaö_t
 *

1505 
	$ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

1507 
n
;

1508 
ngx_uöt_t
 
Êush
;

1509 
ssize_t
 
£nd
, 
size
;

1510 
ngx_buf_t
 *
buf
;

1512 i‡(!
c
->
s¶
->
buf„r
) {

1514 
ö
) {

1515 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1516 
ö
 = in->
√xt
;

1520 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
ö
->
buf
->
pos
, in->buf->
œ°
 - in->buf->pos);

1522 i‡(
n
 =
NGX_ERROR
) {

1523  
NGX_CHAIN_ERROR
;

1526 i‡(
n
 =
NGX_AGAIN
) {

1527  
ö
;

1530 
ö
->
buf
->
pos
 +
n
;

1532 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1533 
ö
 = in->
√xt
;

1537  
ö
;

1543 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
)) {

1544 
limô
 = 
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
;

1547 
buf
 = 
c
->
s¶
->buf;

1549 i‡(
buf
 =
NULL
) {

1550 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, c->
s¶
->
buf„r_size
);

1551 i‡(
buf
 =
NULL
) {

1552  
NGX_CHAIN_ERROR
;

1555 
c
->
s¶
->
buf
 = buf;

1558 i‡(
buf
->
°¨t
 =
NULL
) {

1559 
buf
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, c->
s¶
->
buf„r_size
);

1560 i‡(
buf
->
°¨t
 =
NULL
) {

1561  
NGX_CHAIN_ERROR
;

1564 
buf
->
pos
 = buf->
°¨t
;

1565 
buf
->
œ°
 = buf->
°¨t
;

1566 
buf
->
íd
 = buf->
°¨t
 + 
c
->
s¶
->
buf„r_size
;

1569 
£nd
 = 
buf
->
œ°
 - buf->
pos
;

1570 
Êush
 = (
ö
 =
NULL
Ë? 1 : 
buf
->flush;

1574 
ö
 && 
buf
->
œ°
 < buf->
íd
 && 
£nd
 < 
limô
) {

1575 i‡(
ö
->
buf
->
œ°_buf
 || in->buf->
Êush
) {

1576 
Êush
 = 1;

1579 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1580 
ö
 = in->
√xt
;

1584 
size
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

1586 i‡(
size
 > 
buf
->
íd
 - buf->
œ°
) {

1587 
size
 = 
buf
->
íd
 - buf->
œ°
;

1590 i‡(
£nd
 + 
size
 > 
limô
) {

1591 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

1594 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1595 "SSL bu‡c›y: %d", 
size
);

1597 
	`ngx_mem˝y
(
buf
->
œ°
, 
ö
->buf->
pos
, 
size
);

1599 
buf
->
œ°
 +
size
;

1600 
ö
->
buf
->
pos
 +
size
;

1601 
£nd
 +
size
;

1603 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1604 
ö
 = in->
√xt
;

1608 i‡(!
Êush
 && 
£nd
 < 
limô
 && 
buf
->
œ°
 < buf->
íd
) {

1612 
size
 = 
buf
->
œ°
 - buf->
pos
;

1614 i‡(
size
 == 0) {

1615 
buf
->
Êush
 = 0;

1616 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1617  
ö
;

1620 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
buf
->
pos
, 
size
);

1622 i‡(
n
 =
NGX_ERROR
) {

1623  
NGX_CHAIN_ERROR
;

1626 i‡(
n
 =
NGX_AGAIN
) {

1630 
buf
->
pos
 +
n
;

1632 i‡(
n
 < 
size
) {

1636 
Êush
 = 0;

1638 
buf
->
pos
 = buf->
°¨t
;

1639 
buf
->
œ°
 = buf->
°¨t
;

1641 i‡(
ö
 =
NULL
 || 
£nd
 =
limô
) {

1646 
buf
->
Êush
 = flush;

1648 i‡(
buf
->
pos
 < buf->
œ°
) {

1649 
c
->
buf„ªd
 |
NGX_SSL_BUFFERED
;

1652 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1655  
ö
;

1656 
	}
}

1659 
ssize_t


1660 
	$ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
)

1662 
n
, 
s¶îr
;

1663 
ngx_îr_t
 
îr
;

1665 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1667 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÅÿwrôe: %d", 
size
);

1669 
n
 = 
	`SSL_wrôe
(
c
->
s¶
->
c⁄√˘i⁄
, 
d©a
, 
size
);

1671 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_wrôe: %d", 
n
);

1673 i‡(
n
 > 0) {

1675 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
) {

1677 
c
->
ªad
->
h™dÀr
 = c->
s¶
->
ßved_ªad_h™dÀr
;

1678 
c
->
s¶
->
ßved_ªad_h™dÀr
 = 
NULL
;

1679 
c
->
ªad
->
ªady
 = 1;

1681 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1682  
NGX_ERROR
;

1685 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

1688 
c
->
£¡
 +
n
;

1690  
n
;

1693 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1695 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1697 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1699 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1700 
c
->
wrôe
->
ªady
 = 0;

1701  
NGX_AGAIN
;

1704 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1706 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1709 
c
->
ªad
->
ªady
 = 0;

1711 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1712  
NGX_ERROR
;

1720 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
 =
NULL
) {

1721 
c
->
s¶
->
ßved_ªad_h™dÀr
 = c->
ªad
->
h™dÀr
;

1722 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_ªad_h™dÀr
;

1725  
NGX_AGAIN
;

1728 
c
->
s¶
->
no_waô_shutdown
 = 1;

1729 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1730 
c
->
wrôe
->
îr‹
 = 1;

1732 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_write() failed");

1734  
NGX_ERROR
;

1735 
	}
}

1739 
	$ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1741 
ngx_c⁄√˘i⁄_t
 *
c
;

1743 
c
 = 
ªv
->
d©a
;

1745 
c
->
wrôe
->
	`h™dÀr
(c->write);

1746 
	}
}

1750 
	$ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
)

1752 i‡(
c
->
s¶
->
buf
 && c->s¶->buf->
°¨t
) {

1753 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, c->
s¶
->
buf
->
°¨t
Ë=
NGX_OK
) {

1754 
c
->
s¶
->
buf
->
°¨t
 = 
NULL
;

1757 
	}
}

1760 
ngx_öt_t


1761 
	$ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
)

1763 
n
, 
s¶îr
, 
mode
;

1764 
ngx_îr_t
 
îr
;

1766 i‡(
c
->
timedout
) {

1767 
mode
 = 
SSL_RECEIVED_SHUTDOWN
|
SSL_SENT_SHUTDOWN
;

1768 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1771 
mode
 = 
	`SSL_gë_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1773 i‡(
c
->
s¶
->
no_waô_shutdown
) {

1774 
mode
 |
SSL_RECEIVED_SHUTDOWN
;

1777 i‡(
c
->
s¶
->
no_£nd_shutdown
) {

1778 
mode
 |
SSL_SENT_SHUTDOWN
;

1781 i‡(
c
->
s¶
->
no_waô_shutdown
 && c->s¶->
no_£nd_shutdown
) {

1782 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1786 
	`SSL_£t_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 
mode
);

1788 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1790 
n
 = 
	`SSL_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1792 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_shutdown: %d", 
n
);

1794 
s¶îr
 = 0;

1798 i‡(
n
 !1 && 
	`ERR_≥ek_îr‹
()) {

1799 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1801 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1802 "SSL_gë_îr‹: %d", 
s¶îr
);

1805 i‡(
n
 =1 || 
s¶îr
 =0 || s¶î∏=
SSL_ERROR_ZERO_RETURN
) {

1806 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1807 
c
->
s¶
 = 
NULL
;

1809  
NGX_OK
;

1812 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
 || s¶î∏=
SSL_ERROR_WANT_WRITE
) {

1813 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1814 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1816 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1817  
NGX_ERROR
;

1820 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1821  
NGX_ERROR
;

1824 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1825 
	`ngx_add_timî
(
c
->
ªad
, 30000);

1828  
NGX_AGAIN
;

1831 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1833 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_shutdown() failed");

1835 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1836 
c
->
s¶
 = 
NULL
;

1838  
NGX_ERROR
;

1839 
	}
}

1843 
	$ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
)

1845 
ngx_c⁄√˘i⁄_t
 *
c
;

1846 
ngx_c⁄√˘i⁄_h™dÀr_±
 
h™dÀr
;

1848 
c
 = 
ev
->
d©a
;

1849 
h™dÀr
 = 
c
->
s¶
->handler;

1851 i‡(
ev
->
timedout
) {

1852 
c
->
timedout
 = 1;

1855 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "SSL shutdown handler");

1857 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

1861 
	`h™dÀr
(
c
);

1862 
	}
}

1866 
	$ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
, 
ngx_îr_t
 
îr
,

1867 *
ãxt
)

1869 
n
;

1870 
ngx_uöt_t
 
Àvñ
;

1872 
Àvñ
 = 
NGX_LOG_CRIT
;

1874 i‡(
s¶îr
 =
SSL_ERROR_SYSCALL
) {

1876 i‡(
îr
 =
NGX_ECONNRESET


1877 || 
îr
 =
NGX_EPIPE


1878 || 
îr
 =
NGX_ENOTCONN


1879 || 
îr
 =
NGX_ETIMEDOUT


1880 || 
îr
 =
NGX_ECONNREFUSED


1881 || 
îr
 =
NGX_ENETDOWN


1882 || 
îr
 =
NGX_ENETUNREACH


1883 || 
îr
 =
NGX_EHOSTDOWN


1884 || 
îr
 =
NGX_EHOSTUNREACH
)

1886 
c
->
log_îr‹
) {

1888 
NGX_ERROR_IGNORE_ECONNRESET
:

1889 
NGX_ERROR_INFO
:

1890 
Àvñ
 = 
NGX_LOG_INFO
;

1893 
NGX_ERROR_ERR
:

1894 
Àvñ
 = 
NGX_LOG_ERR
;

1902 } i‡(
s¶îr
 =
SSL_ERROR_SSL
) {

1904 
n
 = 
	`ERR_GET_REASON
(
	`ERR_≥ek_îr‹
());

1907 i‡(
n
 =
SSL_R_BAD_CHANGE_CIPHER_SPEC


1908 || 
n
 =
SSL_R_BLOCK_CIPHER_PAD_IS_WRONG


1909 || 
n
 =
SSL_R_DIGEST_CHECK_FAILED


1910 || 
n
 =
SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST


1911 || 
n
 =
SSL_R_EXCESSIVE_MESSAGE_SIZE


1912 || 
n
 =
SSL_R_LENGTH_MISMATCH


1913 || 
n
 =
SSL_R_NO_CIPHERS_PASSED


1914 || 
n
 =
SSL_R_NO_CIPHERS_SPECIFIED


1915 || 
n
 =
SSL_R_NO_COMPRESSION_SPECIFIED


1916 || 
n
 =
SSL_R_NO_SHARED_CIPHER


1917 || 
n
 =
SSL_R_RECORD_LENGTH_MISMATCH


1918 #ifde‡
SSL_R_PARSE_TLSEXT


1919 || 
n
 =
SSL_R_PARSE_TLSEXT


1921 || 
n
 =
SSL_R_UNEXPECTED_MESSAGE


1922 || 
n
 =
SSL_R_UNEXPECTED_RECORD


1923 || 
n
 =
SSL_R_UNKNOWN_ALERT_TYPE


1924 || 
n
 =
SSL_R_UNKNOWN_PROTOCOL


1925 || 
n
 =
SSL_R_WRONG_VERSION_NUMBER


1926 || 
n
 =
SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC


1927 #ifde‡
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1928 || 
n
 =
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1929 || 
n
 =
SSL_R_RENEGOTIATION_ENCODING_ERR


1930 || 
n
 =
SSL_R_RENEGOTIATION_MISMATCH


1932 #ifde‡
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1933 || 
n
 =
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1935 #ifde‡
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1936 || 
n
 =
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1938 #ifde‡
SSL_R_INAPPROPRIATE_FALLBACK


1939 || 
n
 =
SSL_R_INAPPROPRIATE_FALLBACK


1941 || 
n
 == 1000

1942 || 
n
 =
SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE


1943 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_RECORD_MAC


1944 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPTION_FAILED


1945 || 
n
 =
SSL_R_TLSV1_ALERT_RECORD_OVERFLOW


1946 || 
n
 =
SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE


1947 || 
n
 =
SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE


1948 || 
n
 =
SSL_R_SSLV3_ALERT_NO_CERTIFICATE


1949 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_CERTIFICATE


1950 || 
n
 =
SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE


1951 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED


1952 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED


1953 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN


1954 || 
n
 =
SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER


1955 || 
n
 =
SSL_R_TLSV1_ALERT_UNKNOWN_CA


1956 || 
n
 =
SSL_R_TLSV1_ALERT_ACCESS_DENIED


1957 || 
n
 =
SSL_R_TLSV1_ALERT_DECODE_ERROR


1958 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPT_ERROR


1959 || 
n
 =
SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION


1960 || 
n
 =
SSL_R_TLSV1_ALERT_PROTOCOL_VERSION


1961 || 
n
 =
SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY


1962 || 
n
 =
SSL_R_TLSV1_ALERT_INTERNAL_ERROR


1963 || 
n
 =
SSL_R_TLSV1_ALERT_USER_CANCELLED


1964 || 
n
 =
SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
)

1966 
c
->
log_îr‹
) {

1968 
NGX_ERROR_IGNORE_ECONNRESET
:

1969 
NGX_ERROR_INFO
:

1970 
Àvñ
 = 
NGX_LOG_INFO
;

1973 
NGX_ERROR_ERR
:

1974 
Àvñ
 = 
NGX_LOG_ERR
;

1983 
	`ngx_s¶_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1984 
	}
}

1988 
	$ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
)

1990 
	`ERR_≥ek_îr‹
()) {

1991 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "ignoring stale global SSLÉrror");

1994 
	`ERR_˛ór_îr‹
();

1995 
	}
}

1998 
ngx_cde˛


1999 
	$ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, *
fmt
, ...)

2001 
Êags
;

2002 
u_l⁄g
 
n
;

2003 
va_li°
 
¨gs
;

2004 
u_ch¨
 *
p
, *
œ°
;

2005 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

2006 c⁄° *
d©a
;

2008 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

2010 
	`va_°¨t
(
¨gs
, 
fmt
);

2011 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
 - 1, 
fmt
, 
¨gs
);

2012 
	`va_íd
(
¨gs
);

2014 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (SSL:", 
œ°
 -Ö);

2018 
n
 = 
	`ERR_≥ek_îr‹_löe_d©a
(
NULL
, NULL, &
d©a
, &
Êags
);

2020 i‡(
n
 == 0) {

2024 i‡(
p
 >
œ°
) {

2025 
√xt
;

2028 *
p
++ = ' ';

2030 
	`ERR_îr‹_°rög_n
(
n
, (*Ë
p
, 
œ°
 -Ö);

2032 
p
 < 
œ°
 && *p) {

2033 
p
++;

2036 i‡(
p
 < 
œ°
 && *
d©a
 && (
Êags
 & 
ERR_TXT_STRING
)) {

2037 *
p
++ = ':';

2038 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
d©a
, 
œ°
 -Ö);

2041 
√xt
:

2043 (Ë
	`ERR_gë_îr‹
();

2046 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%s)", 
îr°r
);

2047 
	}
}

2050 
ngx_öt_t


2051 
	$ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

2052 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
)

2054 
ˇche_mode
;

2056 
	`SSL_CTX_£t_timeout
(
s¶
->
˘x
, (Ë
timeout
);

2058 i‡(
	`ngx_s¶_£ssi⁄_id_c⁄ãxt
(
s¶
, 
£ss_˘x
Ë!
NGX_OK
) {

2059  
NGX_ERROR
;

2062 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_SCACHE
) {

2063 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
SSL_SESS_CACHE_OFF
);

2064  
NGX_OK
;

2067 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NONE_SCACHE
) {

2080 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
,

2081 
SSL_SESS_CACHE_SERVER


2082 |
SSL_SESS_CACHE_NO_AUTO_CLEAR


2083 |
SSL_SESS_CACHE_NO_INTERNAL_STORE
);

2085 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 1);

2087  
NGX_OK
;

2090 
ˇche_mode
 = 
SSL_SESS_CACHE_SERVER
;

2092 i‡(
shm_z⁄e
 && 
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_BUILTIN_SCACHE
) {

2093 
ˇche_mode
 |
SSL_SESS_CACHE_NO_INTERNAL
;

2096 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
ˇche_mode
);

2098 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_NO_BUILTIN_SCACHE
) {

2100 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_DFLT_BUILTIN_SCACHE
) {

2101 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 
buûtö_£ssi⁄_ˇche
);

2105 i‡(
shm_z⁄e
) {

2106 
	`SSL_CTX_£ss_£t_√w_cb
(
s¶
->
˘x
, 
ngx_s¶_√w_£ssi⁄
);

2107 
	`SSL_CTX_£ss_£t_gë_cb
(
s¶
->
˘x
, 
ngx_s¶_gë_ˇched_£ssi⁄
);

2108 
	`SSL_CTX_£ss_£t_ªmove_cb
(
s¶
->
˘x
, 
ngx_s¶_ªmove_£ssi⁄
);

2110 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
, 
shm_z⁄e
)

2113 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2115  
NGX_ERROR
;

2119  
NGX_OK
;

2120 
	}
}

2123 
ngx_öt_t


2124 
	$ngx_s¶_£ssi⁄_id_c⁄ãxt
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
)

2126 
n
, 
i
;

2127 
X509
 *
˚π
;

2128 
X509_NAME
 *
«me
;

2129 
EVP_MD_CTX
 
md
;

2130 
Àn
;

2131 
	`STACK_OF
(
X509_NAME
Ë*
li°
;

2132 
u_ch¨
 
buf
[
EVP_MAX_MD_SIZE
];

2139 
	`EVP_MD_CTX_öô
(&
md
);

2141 i‡(
	`EVP_Dige°Inô_ex
(&
md
, 
	`EVP_sha1
(), 
NULL
) == 0) {

2142 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2144 
Áûed
;

2147 i‡(
	`EVP_Dige°Upd©e
(&
md
, 
£ss_˘x
->
d©a
, sess_˘x->
Àn
) == 0) {

2148 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2150 
Áûed
;

2153 
˚π
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
);

2155 i‡(
	`X509_dige°
(
˚π
, 
	`EVP_sha1
(), 
buf
, &
Àn
) == 0) {

2156 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2158 
Áûed
;

2161 i‡(
	`EVP_Dige°Upd©e
(&
md
, 
buf
, 
Àn
) == 0) {

2162 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2164 
Áûed
;

2167 
li°
 = 
	`SSL_CTX_gë_˛õ¡_CA_li°
(
s¶
->
˘x
);

2169 i‡(
li°
 !
NULL
) {

2170 
n
 = 
	`sk_X509_NAME_num
(
li°
);

2172 
i
 = 0; i < 
n
; i++) {

2173 
«me
 = 
	`sk_X509_NAME_vÆue
(
li°
, 
i
);

2175 i‡(
	`X509_NAME_dige°
(
«me
, 
	`EVP_sha1
(), 
buf
, &
Àn
) == 0) {

2176 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2178 
Áûed
;

2181 i‡(
	`EVP_Dige°Upd©e
(&
md
, 
buf
, 
Àn
) == 0) {

2182 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2184 
Áûed
;

2189 i‡(
	`EVP_Dige°FöÆ_ex
(&
md
, 
buf
, &
Àn
) == 0) {

2190 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2192 
Áûed
;

2195 
	`EVP_MD_CTX_˛ónup
(&
md
);

2197 i‡(
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
s¶
->
˘x
, 
buf
, 
Àn
) == 0) {

2198 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2200  
NGX_ERROR
;

2203  
NGX_OK
;

2205 
Áûed
:

2207 
	`EVP_MD_CTX_˛ónup
(&
md
);

2209  
NGX_ERROR
;

2210 
	}
}

2213 
ngx_öt_t


2214 
	$ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

2216 
size_t
 
Àn
;

2217 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2218 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2220 i‡(
d©a
) {

2221 
shm_z⁄e
->
d©a
 = data;

2222  
NGX_OK
;

2225 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2227 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

2228 
shm_z⁄e
->
d©a
 = 
shpoﬁ
->data;

2229  
NGX_OK
;

2232 
ˇche
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_s¶_£ssi⁄_ˇche_t
));

2233 i‡(
ˇche
 =
NULL
) {

2234  
NGX_ERROR
;

2237 
shpoﬁ
->
d©a
 = 
ˇche
;

2238 
shm_z⁄e
->
d©a
 = 
ˇche
;

2240 
	`ngx_rbåì_öô
(&
ˇche
->
£ssi⁄_rbåì
, &ˇche->
£¡öñ
,

2241 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
);

2243 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

2245 
Àn
 = (" i¿SSL sessi⁄ sh¨ed cachê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

2247 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

2248 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

2249  
NGX_ERROR
;

2252 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " in SSL session shared cache \"%V\"%Z",

2253 &
shm_z⁄e
->
shm
.
«me
);

2255 
shpoﬁ
->
log_nomem
 = 0;

2257  
NGX_OK
;

2258 
	}
}

2279 
	$ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2281 
Àn
;

2282 
u_ch¨
 *
p
, *
id
, *
ˇched_£ss
, *
£ssi⁄_id
;

2283 
uöt32_t
 
hash
;

2284 
SSL_CTX
 *
s¶_˘x
;

2285 
£ssi⁄_id_Àngth
;

2286 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2287 
ngx_c⁄√˘i⁄_t
 *
c
;

2288 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2289 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2290 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2291 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

2293 
Àn
 = 
	`i2d_SSL_SESSION
(
£ss
, 
NULL
);

2297 i‡(
Àn
 > (Ë
NGX_SSL_MAX_SESSION_SIZE
) {

2301 
p
 = 
buf
;

2302 
	`i2d_SSL_SESSION
(
£ss
, &
p
);

2304 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

2306 
s¶_˘x
 = 
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
);

2307 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

2309 
ˇche
 = 
shm_z⁄e
->
d©a
;

2310 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2312 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

2315 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 1);

2317 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

2319 i‡(
ˇched_£ss
 =
NULL
) {

2323 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

2325 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

2327 i‡(
ˇched_£ss
 =
NULL
) {

2328 
£ss_id
 = 
NULL
;

2329 
Áûed
;

2333 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

2335 i‡(
£ss_id
 =
NULL
) {

2339 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

2341 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

2343 i‡(
£ss_id
 =
NULL
) {

2344 
Áûed
;

2348 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

2350 
£ssi⁄_id
 = (
u_ch¨
 *Ë
	`SSL_SESSION_gë_id
(
£ss
, &
£ssi⁄_id_Àngth
);

2354 
£ssi⁄_id
 = 
£ss
->session_id;

2355 
£ssi⁄_id_Àngth
 = 
£ss
->session_id_length;

2359 #i‡(
NGX_PTR_SIZE
 == 8)

2361 
id
 = 
£ss_id
->sess_id;

2365 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ssi⁄_id_Àngth
);

2367 i‡(
id
 =
NULL
) {

2371 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

2373 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ssi⁄_id_Àngth
);

2375 i‡(
id
 =
NULL
) {

2376 
Áûed
;

2382 
	`ngx_mem˝y
(
ˇched_£ss
, 
buf
, 
Àn
);

2384 
	`ngx_mem˝y
(
id
, 
£ssi⁄_id
, 
£ssi⁄_id_Àngth
);

2386 
hash
 = 
	`ngx_¸c32_sh‹t
(
£ssi⁄_id
, 
£ssi⁄_id_Àngth
);

2388 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2390 
hash
, 
£ssi⁄_id_Àngth
, 
Àn
);

2392 
£ss_id
->
node
.
key
 = 
hash
;

2393 
£ss_id
->
node
.
d©a
 = (
u_ch¨
Ë
£ssi⁄_id_Àngth
;

2394 
£ss_id
->
id
 = id;

2395 
£ss_id
->
Àn
 =Üen;

2396 
£ss_id
->
£ssi⁄
 = 
ˇched_£ss
;

2398 
£ss_id
->
expúe
 = 
	`ngx_time
(Ë+ 
	`SSL_CTX_gë_timeout
(
s¶_˘x
);

2400 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
£ss_id
->
queue
);

2402 
	`ngx_rbåì_ö£π
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

2404 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2408 
Áûed
:

2410 i‡(
ˇched_£ss
) {

2411 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
ˇched_£ss
);

2414 i‡(
£ss_id
) {

2415 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2418 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2420 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2421 "couldÇŸáŒoˇãÇew sessi⁄%s", 
shpoﬁ
->
log_˘x
);

2424 
	}
}

2427 
ngx_s¶_£ssi⁄_t
 *

2428 
	$ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
u_ch¨
 *
id
, 
Àn
,

2429 *
c›y
)

2431 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

2434 
u_ch¨
 *
p
;

2435 
uöt32_t
 
hash
;

2436 
ngx_öt_t
 
rc
;

2437 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2438 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2439 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2440 
ngx_s¶_£ssi⁄_t
 *
£ss
;

2441 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2442 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2443 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

2444 #i‡(
NGX_DEBUG
)

2445 
ngx_c⁄√˘i⁄_t
 *
c
;

2448 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, (
size_t
Ë
Àn
);

2449 *
c›y
 = 0;

2451 #i‡(
NGX_DEBUG
)

2452 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

2454 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2455 "s¶ gë sessi⁄: %08XD:%d", 
hash
, 
Àn
);

2458 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
),

2459 
ngx_s¶_£ssi⁄_ˇche_ödex
);

2461 
ˇche
 = 
shm_z⁄e
->
d©a
;

2463 
£ss
 = 
NULL
;

2465 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2467 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

2469 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

2470 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

2472 
node
 !
£¡öñ
) {

2474 i‡(
hash
 < 
node
->
key
) {

2475 
node
 =Çode->
À·
;

2479 i‡(
hash
 > 
node
->
key
) {

2480 
node
 =Çode->
right
;

2486 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2488 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, (
size_t
Ë
Àn
, (size_tË
node
->
d©a
);

2490 i‡(
rc
 == 0) {

2492 i‡(
£ss_id
->
expúe
 > 
	`ngx_time
()) {

2493 
	`ngx_mem˝y
(
buf
, 
£ss_id
->
£ssi⁄
, sess_id->
Àn
);

2495 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2497 
p
 = 
buf
;

2498 
£ss
 = 
	`d2i_SSL_SESSION
(
NULL
, &
p
, 
£ss_id
->
Àn
);

2500  
£ss
;

2503 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

2505 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

2507 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2508 #i‡(
NGX_PTR_SIZE
 == 4)

2509 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2511 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2513 
£ss
 = 
NULL
;

2515 
d⁄e
;

2518 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2521 
d⁄e
:

2523 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2525  
£ss
;

2526 
	}
}

2530 
	$ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2532 
	`SSL_CTX_ªmove_£ssi⁄
(
s¶
, 
£ss
);

2534 
	`ngx_s¶_ªmove_£ssi⁄
(
s¶
, 
£ss
);

2535 
	}
}

2539 
	$ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2541 
u_ch¨
 *
id
;

2542 
uöt32_t
 
hash
;

2543 
ngx_öt_t
 
rc
;

2544 
Àn
;

2545 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2546 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2547 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2548 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2549 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2551 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

2553 i‡(
shm_z⁄e
 =
NULL
) {

2557 
ˇche
 = 
shm_z⁄e
->
d©a
;

2559 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

2561 
id
 = (
u_ch¨
 *Ë
	`SSL_SESSION_gë_id
(
£ss
, &
Àn
);

2565 
id
 = 
£ss
->
£ssi⁄_id
;

2566 
Àn
 = 
£ss
->
£ssi⁄_id_Àngth
;

2570 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, 
Àn
);

2572 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

2573 "s¶Ñemovê£ssi⁄: %08XD:%ud", 
hash
, 
Àn
);

2575 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2577 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

2579 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

2580 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

2582 
node
 !
£¡öñ
) {

2584 i‡(
hash
 < 
node
->
key
) {

2585 
node
 =Çode->
À·
;

2589 i‡(
hash
 > 
node
->
key
) {

2590 
node
 =Çode->
right
;

2596 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2598 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, 
Àn
, (
size_t
Ë
node
->
d©a
);

2600 i‡(
rc
 == 0) {

2602 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

2604 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

2606 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2607 #i‡(
NGX_PTR_SIZE
 == 4)

2608 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2610 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2612 
d⁄e
;

2615 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2618 
d⁄e
:

2620 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2621 
	}
}

2625 
	$ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

2626 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
)

2628 
time_t
 
now
;

2629 
ngx_queue_t
 *
q
;

2630 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2632 
now
 = 
	`ngx_time
();

2634 
n
 < 3) {

2636 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

2640 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

2642 
£ss_id
 = 
	`ngx_queue_d©a
(
q
, 
ngx_s¶_£ss_id_t
, 
queue
);

2644 i‡(
n
++ !0 && 
£ss_id
->
expúe
 > 
now
) {

2648 
	`ngx_queue_ªmove
(
q
);

2650 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

2651 "expúê£ssi⁄: %08Xi", 
£ss_id
->
node
.
key
);

2653 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

2655 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2656 #i‡(
NGX_PTR_SIZE
 == 4)

2657 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2659 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2661 
	}
}

2665 
	$ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

2666 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

2668 
ngx_rbåì_node_t
 **
p
;

2669 
ngx_s¶_£ss_id_t
 *
£ss_id
, *
£ss_id_ãmp
;

2673 i‡(
node
->
key
 < 
ãmp
->key) {

2675 
p
 = &
ãmp
->
À·
;

2677 } i‡(
node
->
key
 > 
ãmp
->key) {

2679 
p
 = &
ãmp
->
right
;

2683 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2684 
£ss_id_ãmp
 = (
ngx_s¶_£ss_id_t
 *Ë
ãmp
;

2686 
p
 = (
	`ngx_memn2cmp
(
£ss_id
->
id
, 
£ss_id_ãmp
->id,

2687 (
size_t
Ë
node
->
d©a
, (size_tË
ãmp
->data)

2688 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2691 i‡(*
p
 =
£¡öñ
) {

2695 
ãmp
 = *
p
;

2698 *
p
 = 
node
;

2699 
node
->
∑ª¡
 = 
ãmp
;

2700 
node
->
À·
 = 
£¡öñ
;

2701 
node
->
right
 = 
£¡öñ
;

2702 
	`ngx_rbt_ªd
(
node
);

2703 
	}
}

2706 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


2708 
ngx_öt_t


2709 
	$ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_¨øy_t
 *
∑ths
)

2711 
u_ch¨
 
buf
[48];

2712 
ssize_t
 
n
;

2713 
ngx_°r_t
 *
∑th
;

2714 
ngx_fûe_t
 
fûe
;

2715 
ngx_uöt_t
 
i
;

2716 
ngx_¨øy_t
 *
keys
;

2717 
ngx_fûe_öfo_t
 
fi
;

2718 
ngx_s¶_£ssi⁄_tickë_key_t
 *
key
;

2720 i‡(
∑ths
 =
NULL
) {

2721  
NGX_OK
;

2724 
keys
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 
∑ths
->
√…s
,

2725 (
ngx_s¶_£ssi⁄_tickë_key_t
));

2726 i‡(
keys
 =
NULL
) {

2727  
NGX_ERROR
;

2730 
∑th
 = 
∑ths
->
ñts
;

2731 
i
 = 0; i < 
∑ths
->
√…s
; i++) {

2733 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
∑th
[
i
], 1Ë!
NGX_OK
) {

2734  
NGX_ERROR
;

2737 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

2738 
fûe
.
«me
 = 
∑th
[
i
];

2739 
fûe
.
log
 = 
cf
->log;

2741 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDONLY
, 0, 0);

2742 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

2743 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

2744 
ngx_›í_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

2745  
NGX_ERROR
;

2748 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

2749 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

2750 
ngx_fd_öfo_n
 " \"%V\" faûed", &
fûe
.
«me
);

2751 
Áûed
;

2754 i‡(
	`ngx_fûe_size
(&
fi
) != 48) {

2755 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2756 "\"%V\" mu° bê48 byãs", &
fûe
.
«me
);

2757 
Áûed
;

2760 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
, 48, 0);

2762 i‡(
n
 =
NGX_ERROR
) {

2763 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

2764 
ngx_ªad_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

2765 
Áûed
;

2768 i‡(
n
 != 48) {

2769 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

2770 
ngx_ªad_fûe_n
 " \"%V\"Ñeturned only "

2771 "%z byã†ö°ód o‡48", &
fûe
.
«me
, 
n
);

2772 
Áûed
;

2775 
key
 = 
	`ngx_¨øy_push
(
keys
);

2776 i‡(
key
 =
NULL
) {

2777 
Áûed
;

2780 
	`ngx_mem˝y
(
key
->
«me
, 
buf
, 16);

2781 
	`ngx_mem˝y
(
key
->
´s_key
, 
buf
 + 16, 16);

2782 
	`ngx_mem˝y
(
key
->
hmac_key
, 
buf
 + 32, 16);

2784 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

2785 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

2786 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

2790 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£ssi⁄_tickë_keys_ödex
, 
keys
)

2793 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

2795  
NGX_ERROR
;

2798 i‡(
	`SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
->
˘x
,

2799 
ngx_s¶_£ssi⁄_tickë_key_ˇŒback
)

2802 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2809  
NGX_OK
;

2811 
Áûed
:

2813 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

2814 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

2815 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
fûe
.
«me
);

2818  
NGX_ERROR
;

2819 
	}
}

2822 #ifde‡
OPENSSL_NO_SHA256


2823 
	#ngx_s¶_£ssi⁄_tickë_md
 
EVP_sha1


	)

2825 
	#ngx_s¶_£ssi⁄_tickë_md
 
EVP_sha256


	)

2830 
	$ngx_s¶_£ssi⁄_tickë_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

2831 *
«me
, *
iv
, 
EVP_CIPHER_CTX
 *
e˘x
,

2832 
HMAC_CTX
 *
h˘x
, 
íc
)

2834 
SSL_CTX
 *
s¶_˘x
;

2835 
ngx_uöt_t
 
i
;

2836 
ngx_¨øy_t
 *
keys
;

2837 
ngx_s¶_£ssi⁄_tickë_key_t
 *
key
;

2838 #i‡(
NGX_DEBUG
)

2839 
u_ch¨
 
buf
[32];

2840 
ngx_c⁄√˘i⁄_t
 *
c
;

2843 
s¶_˘x
 = 
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
);

2845 
keys
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£ssi⁄_tickë_keys_ödex
);

2846 i‡(
keys
 =
NULL
) {

2850 
key
 = 
keys
->
ñts
;

2852 #i‡(
NGX_DEBUG
)

2853 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

2856 i‡(
íc
 == 1) {

2859 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2861 
	`ngx_hex_dump
(
buf
, 
key
[0].
«me
, 16) - buf, buf,

2862 
	`SSL_£ssi⁄_ªu£d
(
s¶_c⁄n
) ? "reused" : "new");

2864 
	`RAND_p£udo_byãs
(
iv
, 16);

2865 
	`EVP_En¸y±Inô_ex
(
e˘x
, 
	`EVP_´s_128_cbc
(), 
NULL
, 
key
[0].
´s_key
, 
iv
);

2866 
	`HMAC_Inô_ex
(
h˘x
, 
key
[0].
hmac_key
, 16,

2867 
	`ngx_s¶_£ssi⁄_tickë_md
(), 
NULL
);

2868 
	`ngx_mem˝y
(
«me
, 
key
[0].name, 16);

2875 
i
 = 0; i < 
keys
->
√…s
; i++) {

2876 i‡(
	`ngx_memcmp
(
«me
, 
key
[
i
].name, 16) == 0) {

2877 
found
;

2881 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2883 
	`ngx_hex_dump
(
buf
, 
«me
, 16) - buf, buf);

2887 
found
:

2889 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2891 
	`ngx_hex_dump
(
buf
, 
key
[
i
].
«me
, 16) - buf, buf,

2892 (
i
 == 0) ? " (default)" : "");

2894 
	`HMAC_Inô_ex
(
h˘x
, 
key
[
i
].
hmac_key
, 16,

2895 
	`ngx_s¶_£ssi⁄_tickë_md
(), 
NULL
);

2896 
	`EVP_De¸y±Inô_ex
(
e˘x
, 
	`EVP_´s_128_cbc
(), 
NULL
, 
key
[
i
].
´s_key
, 
iv
);

2898  (
i
 == 0) ? 1 : 2 ;

2900 
	}
}

2904 
ngx_öt_t


2905 
	$ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_¨øy_t
 *
∑ths
)

2907 i‡(
∑ths
) {

2908 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

2912  
NGX_OK
;

2913 
	}
}

2919 
	$ngx_s¶_˛ónup_˘x
(*
d©a
)

2921 
ngx_s¶_t
 *
s¶
 = 
d©a
;

2923 
	`SSL_CTX_‰ì
(
s¶
->
˘x
);

2924 
	}
}

2927 
ngx_öt_t


2928 
	$ngx_s¶_check_ho°
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
«me
)

2930 
X509
 *
˚π
;

2932 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2933 i‡(
˚π
 =
NULL
) {

2934  
NGX_ERROR
;

2937 #i‡(
OPENSSL_VERSION_NUMBER
 >0x10002002L && !
deföed
 
LIBRESSL_VERSION_NUMBER
)

2941 i‡(
«me
->
Àn
 == 0) {

2942 
Áûed
;

2945 i‡(
	`X509_check_ho°
(
˚π
, (*Ë
«me
->
d©a
,Çame->
Àn
, 0, 
NULL
) != 1) {

2946 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2948 
Áûed
;

2951 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2954 
found
;

2958 
n
, 
i
;

2959 
X509_NAME
 *
¢ame
;

2960 
ASN1_STRING
 *
°r
;

2961 
X509_NAME_ENTRY
 *
íåy
;

2962 
GENERAL_NAME
 *
Æäame
;

2963 
	`STACK_OF
(
GENERAL_NAME
Ë*
Æäames
;

2970 
Æäames
 = 
	`X509_gë_ext_d2i
(
˚π
, 
NID_subje˘_Æt_«me
, 
NULL
, NULL);

2972 i‡(
Æäames
) {

2973 
n
 = 
	`sk_GENERAL_NAME_num
(
Æäames
);

2975 
i
 = 0; i < 
n
; i++) {

2976 
Æäame
 = 
	`sk_GENERAL_NAME_vÆue
(
Æäames
, 
i
);

2978 i‡(
Æäame
->
ty≥
 !
GEN_DNS
) {

2982 
°r
 = 
Æäame
->
d
.
dNSName
;

2984 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2986 
	`ASN1_STRING_Àngth
(
°r
), 
	`ASN1_STRING_d©a
(str));

2988 i‡(
	`ngx_s¶_check_«me
(
«me
, 
°r
Ë=
NGX_OK
) {

2989 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2991 
	`GENERAL_NAMES_‰ì
(
Æäames
);

2992 
found
;

2996 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

2999 
	`GENERAL_NAMES_‰ì
(
Æäames
);

3000 
Áûed
;

3009 
¢ame
 = 
	`X509_gë_subje˘_«me
(
˚π
);

3011 i‡(
¢ame
 =
NULL
) {

3012 
Áûed
;

3015 
i
 = -1;

3017 
i
 = 
	`X509_NAME_gë_ödex_by_NID
(
¢ame
, 
NID_comm⁄Name
, i);

3019 i‡(
i
 < 0) {

3023 
íåy
 = 
	`X509_NAME_gë_íåy
(
¢ame
, 
i
);

3024 
°r
 = 
	`X509_NAME_ENTRY_gë_d©a
(
íåy
);

3026 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3028 
	`ASN1_STRING_Àngth
(
°r
), 
	`ASN1_STRING_d©a
(str));

3030 i‡(
	`ngx_s¶_check_«me
(
«me
, 
°r
Ë=
NGX_OK
) {

3031 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3033 
found
;

3037 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

3042 
Áûed
:

3044 
	`X509_‰ì
(
˚π
);

3045  
NGX_ERROR
;

3047 
found
:

3049 
	`X509_‰ì
(
˚π
);

3050  
NGX_OK
;

3051 
	}
}

3054 #i‡(
OPENSSL_VERSION_NUMBER
 < 0x10002002L || 
deföed
 
LIBRESSL_VERSION_NUMBER
)

3056 
ngx_öt_t


3057 
	$ngx_s¶_check_«me
(
ngx_°r_t
 *
«me
, 
ASN1_STRING
 *
∑âîn
)

3059 
u_ch¨
 *
s
, *
p
, *
íd
;

3060 
size_t
 
¶í
, 
∂í
;

3062 
s
 = 
«me
->
d©a
;

3063 
¶í
 = 
«me
->
Àn
;

3065 
p
 = 
	`ASN1_STRING_d©a
(
∑âîn
);

3066 
∂í
 = 
	`ASN1_STRING_Àngth
(
∑âîn
);

3068 i‡(
¶í
 =
∂í
 && 
	`ngx_°∫ˇ£cmp
(
s
, 
p
,Ölen) == 0) {

3069  
NGX_OK
;

3072 i‡(
∂í
 > 2 && 
p
[0] == '*' &&Ö[1] == '.') {

3073 
∂í
 -= 1;

3074 
p
 += 1;

3076 
íd
 = 
s
 + 
¶í
;

3077 
s
 = 
	`ngx_°æchr
(s, 
íd
, '.');

3079 i‡(
s
 =
NULL
) {

3080  
NGX_ERROR
;

3083 
¶í
 = 
íd
 - 
s
;

3085 i‡(
∂í
 =
¶í
 && 
	`ngx_°∫ˇ£cmp
(
s
, 
p
,Ölen) == 0) {

3086  
NGX_OK
;

3090  
NGX_ERROR
;

3091 
	}
}

3096 
ngx_öt_t


3097 
	$ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3099 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

3100  
NGX_OK
;

3101 
	}
}

3104 
ngx_öt_t


3105 
	$ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3107 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_cùhî_«me
(
c
->
s¶
->
c⁄√˘i⁄
);

3108  
NGX_OK
;

3109 
	}
}

3112 
ngx_öt_t


3113 
	$ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3115 
u_ch¨
 *
buf
;

3116 
SSL_SESSION
 *
£ss
;

3117 
Àn
;

3119 
£ss
 = 
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

3120 i‡(
£ss
 =
NULL
) {

3121 
s
->
Àn
 = 0;

3122  
NGX_OK
;

3125 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

3127 
buf
 = (
u_ch¨
 *Ë
	`SSL_SESSION_gë_id
(
£ss
, &
Àn
);

3131 
buf
 = 
£ss
->
£ssi⁄_id
;

3132 
Àn
 = 
£ss
->
£ssi⁄_id_Àngth
;

3136 
s
->
Àn
 = 2 *Üen;

3137 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 2 * 
Àn
);

3138 i‡(
s
->
d©a
 =
NULL
) {

3139  
NGX_ERROR
;

3142 
	`ngx_hex_dump
(
s
->
d©a
, 
buf
, 
Àn
);

3144  
NGX_OK
;

3145 
	}
}

3148 
ngx_öt_t


3149 
	$ngx_s¶_gë_£ssi⁄_ªu£d
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3151 i‡(
	`SSL_£ssi⁄_ªu£d
(
c
->
s¶
->
c⁄√˘i⁄
)) {

3152 
	`ngx_°r_£t
(
s
, "r");

3155 
	`ngx_°r_£t
(
s
, ".");

3158  
NGX_OK
;

3159 
	}
}

3162 
ngx_öt_t


3163 
	$ngx_s¶_gë_£rvî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3165 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


3167 c⁄° *
£rvî«me
;

3169 
£rvî«me
 = 
	`SSL_gë_£rvî«me
(
c
->
s¶
->
c⁄√˘i⁄
,

3170 
TLSEXT_NAMETYPE_ho°_«me
);

3171 i‡(
£rvî«me
) {

3172 
s
->
d©a
 = (
u_ch¨
 *Ë
£rvî«me
;

3173 
s
->
Àn
 = 
	`ngx_°æí
(
£rvî«me
);

3174  
NGX_OK
;

3179 
s
->
Àn
 = 0;

3180  
NGX_OK
;

3181 
	}
}

3184 
ngx_öt_t


3185 
	$ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3187 
size_t
 
Àn
;

3188 
BIO
 *
bio
;

3189 
X509
 *
˚π
;

3191 
s
->
Àn
 = 0;

3193 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3194 i‡(
˚π
 =
NULL
) {

3195  
NGX_OK
;

3198 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

3199 i‡(
bio
 =
NULL
) {

3200 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "BIO_new() failed");

3201 
	`X509_‰ì
(
˚π
);

3202  
NGX_ERROR
;

3205 i‡(
	`PEM_wrôe_bio_X509
(
bio
, 
˚π
) == 0) {

3206 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "PEM_write_bio_X509() failed");

3207 
Áûed
;

3210 
Àn
 = 
	`BIO_≥ndög
(
bio
);

3211 
s
->
Àn
 =Üen;

3213 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3214 i‡(
s
->
d©a
 =
NULL
) {

3215 
Áûed
;

3218 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

3220 
	`BIO_‰ì
(
bio
);

3221 
	`X509_‰ì
(
˚π
);

3223  
NGX_OK
;

3225 
Áûed
:

3227 
	`BIO_‰ì
(
bio
);

3228 
	`X509_‰ì
(
˚π
);

3230  
NGX_ERROR
;

3231 
	}
}

3234 
ngx_öt_t


3235 
	$ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3237 
u_ch¨
 *
p
;

3238 
size_t
 
Àn
;

3239 
ngx_uöt_t
 
i
;

3240 
ngx_°r_t
 
˚π
;

3242 i‡(
	`ngx_s¶_gë_øw_˚πifiˇã
(
c
, 
poﬁ
, &
˚π
Ë!
NGX_OK
) {

3243  
NGX_ERROR
;

3246 i‡(
˚π
.
Àn
 == 0) {

3247 
s
->
Àn
 = 0;

3248  
NGX_OK
;

3251 
Àn
 = 
˚π
.len - 1;

3253 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

3254 i‡(
˚π
.
d©a
[
i
] =
LF
) {

3255 
Àn
++;

3259 
s
->
Àn
 =Üen;

3260 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3261 i‡(
s
->
d©a
 =
NULL
) {

3262  
NGX_ERROR
;

3265 
p
 = 
s
->
d©a
;

3267 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

3268 *
p
++ = 
˚π
.
d©a
[
i
];

3269 i‡(
˚π
.
d©a
[
i
] =
LF
) {

3270 *
p
++ = '\t';

3274  
NGX_OK
;

3275 
	}
}

3278 
ngx_öt_t


3279 
	$ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3281 *
p
;

3282 
size_t
 
Àn
;

3283 
X509
 *
˚π
;

3284 
X509_NAME
 *
«me
;

3286 
s
->
Àn
 = 0;

3288 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3289 i‡(
˚π
 =
NULL
) {

3290  
NGX_OK
;

3293 
«me
 = 
	`X509_gë_subje˘_«me
(
˚π
);

3294 i‡(
«me
 =
NULL
) {

3295 
	`X509_‰ì
(
˚π
);

3296  
NGX_ERROR
;

3299 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

3301 
Àn
 = 0; 
p
[len];Üen++) { }

3303 
s
->
Àn
 =Üen;

3304 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3305 i‡(
s
->
d©a
 =
NULL
) {

3306 
	`OPENSSL_‰ì
(
p
);

3307 
	`X509_‰ì
(
˚π
);

3308  
NGX_ERROR
;

3311 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

3313 
	`OPENSSL_‰ì
(
p
);

3314 
	`X509_‰ì
(
˚π
);

3316  
NGX_OK
;

3317 
	}
}

3320 
ngx_öt_t


3321 
	$ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3323 *
p
;

3324 
size_t
 
Àn
;

3325 
X509
 *
˚π
;

3326 
X509_NAME
 *
«me
;

3328 
s
->
Àn
 = 0;

3330 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3331 i‡(
˚π
 =
NULL
) {

3332  
NGX_OK
;

3335 
«me
 = 
	`X509_gë_issuî_«me
(
˚π
);

3336 i‡(
«me
 =
NULL
) {

3337 
	`X509_‰ì
(
˚π
);

3338  
NGX_ERROR
;

3341 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

3343 
Àn
 = 0; 
p
[len];Üen++) { }

3345 
s
->
Àn
 =Üen;

3346 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3347 i‡(
s
->
d©a
 =
NULL
) {

3348 
	`OPENSSL_‰ì
(
p
);

3349 
	`X509_‰ì
(
˚π
);

3350  
NGX_ERROR
;

3353 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

3355 
	`OPENSSL_‰ì
(
p
);

3356 
	`X509_‰ì
(
˚π
);

3358  
NGX_OK
;

3359 
	}
}

3362 
ngx_öt_t


3363 
	$ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3365 
size_t
 
Àn
;

3366 
X509
 *
˚π
;

3367 
BIO
 *
bio
;

3369 
s
->
Àn
 = 0;

3371 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3372 i‡(
˚π
 =
NULL
) {

3373  
NGX_OK
;

3376 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

3377 i‡(
bio
 =
NULL
) {

3378 
	`X509_‰ì
(
˚π
);

3379  
NGX_ERROR
;

3382 
	`i2a_ASN1_INTEGER
(
bio
, 
	`X509_gë_£rülNumbî
(
˚π
));

3383 
Àn
 = 
	`BIO_≥ndög
(
bio
);

3385 
s
->
Àn
 =Üen;

3386 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

3387 i‡(
s
->
d©a
 =
NULL
) {

3388 
	`BIO_‰ì
(
bio
);

3389 
	`X509_‰ì
(
˚π
);

3390  
NGX_ERROR
;

3393 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

3394 
	`BIO_‰ì
(
bio
);

3395 
	`X509_‰ì
(
˚π
);

3397  
NGX_OK
;

3398 
	}
}

3401 
ngx_öt_t


3402 
	$ngx_s¶_gë_fögî¥öt
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3404 
X509
 *
˚π
;

3405 
Àn
;

3406 
u_ch¨
 
buf
[
EVP_MAX_MD_SIZE
];

3408 
s
->
Àn
 = 0;

3410 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3411 i‡(
˚π
 =
NULL
) {

3412  
NGX_OK
;

3415 i‡(!
	`X509_dige°
(
˚π
, 
	`EVP_sha1
(), 
buf
, &
Àn
)) {

3416 
	`X509_‰ì
(
˚π
);

3417  
NGX_ERROR
;

3420 
s
->
Àn
 = 2 *Üen;

3421 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 2 * 
Àn
);

3422 i‡(
s
->
d©a
 =
NULL
) {

3423 
	`X509_‰ì
(
˚π
);

3424  
NGX_ERROR
;

3427 
	`ngx_hex_dump
(
s
->
d©a
, 
buf
, 
Àn
);

3429 
	`X509_‰ì
(
˚π
);

3431  
NGX_OK
;

3432 
	}
}

3435 
ngx_öt_t


3436 
	$ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

3438 
X509
 *
˚π
;

3440 i‡(
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
Ë!
X509_V_OK
) {

3441 
	`ngx_°r_£t
(
s
, "FAILED");

3442  
NGX_OK
;

3445 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

3447 i‡(
˚π
) {

3448 
	`ngx_°r_£t
(
s
, "SUCCESS");

3451 
	`ngx_°r_£t
(
s
, "NONE");

3454 
	`X509_‰ì
(
˚π
);

3456  
NGX_OK
;

3457 
	}
}

3461 
	$ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

3463 
ngx_›ís¶_c⁄f_t
 *
oscf
;

3465 
oscf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_›ís¶_c⁄f_t
));

3466 i‡(
oscf
 =
NULL
) {

3467  
NULL
;

3476  
oscf
;

3477 
	}
}

3481 
	$ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3483 #i‚de‡
OPENSSL_NO_ENGINE


3485 
ngx_›ís¶_c⁄f_t
 *
oscf
 = 
c⁄f
;

3487 
ENGINE
 *
ígöe
;

3488 
ngx_°r_t
 *
vÆue
;

3490 i‡(
oscf
->
ígöe
) {

3494 
oscf
->
ígöe
 = 1;

3496 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3498 
ígöe
 = 
	`ENGINE_by_id
((c⁄° *Ë
vÆue
[1].
d©a
);

3500 i‡(
ígöe
 =
NULL
) {

3501 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

3502 "ENGINE_by_id(\"%V\"ËÁûed", &
vÆue
[1]);

3503  
NGX_CONF_ERROR
;

3506 i‡(
	`ENGINE_£t_deÁu…
(
ígöe
, 
ENGINE_METHOD_ALL
) == 0) {

3507 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

3509 &
vÆue
[1]);

3511 
	`ENGINE_‰ì
(
ígöe
);

3513  
NGX_CONF_ERROR
;

3516 
	`ENGINE_‰ì
(
ígöe
);

3518  
NGX_CONF_OK
;

3525 
	}
}

3529 
	$ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
)

3531 
	`EVP_˛ónup
();

3532 #i‚de‡
OPENSSL_NO_ENGINE


3533 
	`ENGINE_˛ónup
();

3535 
	}
}

	@src/event/ngx_event_openssl.h

8 #i‚de‡
_NGX_EVENT_OPENSSL_H_INCLUDED_


9 
	#_NGX_EVENT_OPENSSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<›ís¶/s¶.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<›ís¶/bn.h
>

18 
	~<›ís¶/c⁄f.h
>

19 
	~<›ís¶/¸y±o.h
>

20 
	~<›ís¶/dh.h
>

21 #i‚de‡
OPENSSL_NO_ENGINE


22 
	~<›ís¶/ígöe.h
>

24 
	~<›ís¶/evp.h
>

25 #i‚de‡
OPENSSL_NO_OCSP


26 
	~<›ís¶/oc•.h
>

28 
	~<›ís¶/ønd.h
>

29 
	~<›ís¶/rß.h
>

30 
	~<›ís¶/x509.h
>

31 
	~<›ís¶/x509v3.h
>

33 
	#NGX_SSL_NAME
 "O≥nSSL"

	)

36 
	#ngx_s¶_£ssi⁄_t
 
SSL_SESSION


	)

37 
	#ngx_s¶_c⁄n_t
 
SSL


	)

41 
SSL_CTX
 *
	m˘x
;

42 
ngx_log_t
 *
	mlog
;

43 
size_t
 
	mbuf„r_size
;

44 } 
	tngx_s¶_t
;

48 
ngx_s¶_c⁄n_t
 *
	mc⁄√˘i⁄
;

50 
ngx_öt_t
 
	mœ°
;

51 
ngx_buf_t
 *
	mbuf
;

52 
size_t
 
	mbuf„r_size
;

54 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

56 
ngx_evít_h™dÀr_±
 
	mßved_ªad_h™dÀr
;

57 
ngx_evít_h™dÀr_±
 
	mßved_wrôe_h™dÀr
;

59 
	mh™dshaked
:1;

60 
	mª√gŸüti⁄
:1;

61 
	mbuf„r
:1;

62 
	mno_waô_shutdown
:1;

63 
	mno_£nd_shutdown
:1;

64 
	mh™dshake_buf„r_£t
:1;

65 } 
	tngx_s¶_c⁄√˘i⁄_t
;

68 
	#NGX_SSL_NO_SCACHE
 -2

	)

69 
	#NGX_SSL_NONE_SCACHE
 -3

	)

70 
	#NGX_SSL_NO_BUILTIN_SCACHE
 -4

	)

71 
	#NGX_SSL_DFLT_BUILTIN_SCACHE
 -5

	)

74 
	#NGX_SSL_MAX_SESSION_SIZE
 4096

	)

76 
ngx_s¶_£ss_id_s
 
	tngx_s¶_£ss_id_t
;

78 
	sngx_s¶_£ss_id_s
 {

79 
ngx_rbåì_node_t
 
	mnode
;

80 
u_ch¨
 *
	mid
;

81 
size_t
 
	mÀn
;

82 
u_ch¨
 *
	m£ssi⁄
;

83 
ngx_queue_t
 
	mqueue
;

84 
time_t
 
	mexpúe
;

85 #i‡(
NGX_PTR_SIZE
 == 8)

86 *
	m°ub
;

87 
u_ch¨
 
	m£ss_id
[32];

93 
ngx_rbåì_t
 
	m£ssi⁄_rbåì
;

94 
ngx_rbåì_node_t
 
	m£¡öñ
;

95 
ngx_queue_t
 
	mexpúe_queue
;

96 } 
	tngx_s¶_£ssi⁄_ˇche_t
;

99 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


102 
u_ch¨
 
	m«me
[16];

103 
u_ch¨
 
	m´s_key
[16];

104 
u_ch¨
 
	mhmac_key
[16];

105 } 
	tngx_s¶_£ssi⁄_tickë_key_t
;

110 
	#NGX_SSL_SSLv2
 0x0002

	)

111 
	#NGX_SSL_SSLv3
 0x0004

	)

112 
	#NGX_SSL_TLSv1
 0x0008

	)

113 
	#NGX_SSL_TLSv1_1
 0x0010

	)

114 
	#NGX_SSL_TLSv1_2
 0x0020

	)

117 
	#NGX_SSL_BUFFER
 1

	)

118 
	#NGX_SSL_CLIENT
 2

	)

120 
	#NGX_SSL_BUFSIZE
 16384

	)

123 
ngx_öt_t
 
ngx_s¶_öô
(
ngx_log_t
 *
log
);

124 
ngx_öt_t
 
ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
);

125 
ngx_öt_t
 
ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

126 
ngx_°r_t
 *
˚π
,Çgx_°r_à*
key
, 
ngx_¨øy_t
 *
∑ssw‹ds
);

127 
ngx_öt_t
 
ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

128 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

129 
ngx_öt_t
 
ngx_s¶_åu°ed_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

130 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

131 
ngx_öt_t
 
ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
);

132 
ngx_öt_t
 
ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

133 
ngx_°r_t
 *
fûe
,Çgx_°r_à*
ª•⁄dî
, 
ngx_uöt_t
 
vîify
);

134 
ngx_öt_t
 
ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

135 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
);

136 
RSA
 *
ngx_s¶_rß512_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
is_exp‹t
,

137 
key_Àngth
);

138 
ngx_¨øy_t
 *
ngx_s¶_ªad_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûe
);

139 
ngx_öt_t
 
ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
);

140 
ngx_öt_t
 
ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
);

141 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

142 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
);

143 
ngx_öt_t
 
ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

144 
ngx_¨øy_t
 *
∑ths
);

145 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

146 
ngx_öt_t
 
ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
,

147 
ngx_uöt_t
 
Êags
);

149 
ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

150 
ngx_öt_t
 
ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
);

151 
	#ngx_s¶_gë_£ssi⁄
(
c
Ë
	`SSL_gë1_£ssi⁄
(c->
s¶
->
c⁄√˘i⁄
)

	)

152 
	#ngx_s¶_‰ì_£ssi⁄
 
SSL_SESSION_‰ì


	)

153 
	#ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
) \

154 
	`SSL_gë_ex_d©a
(
s¶_c⁄n
, 
ngx_s¶_c⁄√˘i⁄_ödex
)

	)

155 
	#ngx_s¶_gë_£rvî_c⁄f
(
s¶_˘x
) \

156 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
)

	)

158 
	#ngx_s¶_vîify_îr‹_›ti⁄Æ
(
n
) \

159 (
n
 =
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 \

160 || 
n
 =
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 \

161 || 
n
 =
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 \

162 || 
n
 =
X509_V_ERR_CERT_UNTRUSTED
 \

163 || 
n
 =
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
)

	)

165 
ngx_öt_t
 
ngx_s¶_check_ho°
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
«me
);

168 
ngx_öt_t
 
ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

169 
ngx_°r_t
 *
s
);

170 
ngx_öt_t
 
ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

171 
ngx_°r_t
 *
s
);

172 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

173 
ngx_°r_t
 *
s
);

174 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_ªu£d
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

175 
ngx_°r_t
 *
s
);

176 
ngx_öt_t
 
ngx_s¶_gë_£rvî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

177 
ngx_°r_t
 *
s
);

178 
ngx_öt_t
 
ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

179 
ngx_°r_t
 *
s
);

180 
ngx_öt_t
 
ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

181 
ngx_°r_t
 *
s
);

182 
ngx_öt_t
 
ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

183 
ngx_°r_t
 *
s
);

184 
ngx_öt_t
 
ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

185 
ngx_°r_t
 *
s
);

186 
ngx_öt_t
 
ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

187 
ngx_°r_t
 *
s
);

188 
ngx_öt_t
 
ngx_s¶_gë_fögî¥öt
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

189 
ngx_°r_t
 *
s
);

190 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

191 
ngx_°r_t
 *
s
);

194 
ngx_öt_t
 
ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

195 
ssize_t
 
ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

196 
ssize_t
 
ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
);

197 
ssize_t
 
ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
, 
off_t
 
limô
);

198 
ngx_chaö_t
 *
ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

199 
off_t
 
limô
);

200 
ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
);

201 
ngx_öt_t
 
ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
);

202 
ngx_cde˛
 
ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

203 *
fmt
, ...);

204 
ngx_s¶_˛ónup_˘x
(*
d©a
);

207 
ngx_s¶_c⁄√˘i⁄_ödex
;

208 
ngx_s¶_£rvî_c⁄f_ödex
;

209 
ngx_s¶_£ssi⁄_ˇche_ödex
;

210 
ngx_s¶_£ssi⁄_tickë_keys_ödex
;

211 
ngx_s¶_˚πifiˇã_ödex
;

212 
ngx_s¶_°≠lög_ödex
;

	@src/event/ngx_event_openssl_stapling.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 #i‡(!
deföed
 
OPENSSL_NO_OCSP
 && deföed 
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
)

18 
ngx_°r_t
 
	m°≠À
;

19 
ngx_m£c_t
 
	mtimeout
;

21 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

22 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

24 
ngx_addr_t
 *
	maddrs
;

25 
ngx_°r_t
 
	mho°
;

26 
ngx_°r_t
 
	muri
;

27 
ö_p‹t_t
 
	mp‹t
;

29 
SSL_CTX
 *
	ms¶_˘x
;

31 
X509
 *
	m˚π
;

32 
X509
 *
	missuî
;

34 
time_t
 
	mvÆid
;

36 
	mvîify
:1;

37 
	mlﬂdög
:1;

38 } 
	tngx_s¶_°≠lög_t
;

41 
ngx_s¶_oc•_˘x_s
 
	tngx_s¶_oc•_˘x_t
;

43 
	sngx_s¶_oc•_˘x_s
 {

44 
X509
 *
	m˚π
;

45 
X509
 *
	missuî
;

47 
ngx_uöt_t
 
	m«ddrs
;

49 
ngx_addr_t
 *
	maddrs
;

50 
ngx_°r_t
 
	mho°
;

51 
ngx_°r_t
 
	muri
;

52 
ö_p‹t_t
 
	mp‹t
;

54 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

55 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

57 
ngx_m£c_t
 
	mtimeout
;

59 (*
	mh™dÀr
)(
ngx_s¶_oc•_˘x_t
 *
	mr
);

60 *
	md©a
;

62 
ngx_buf_t
 *
	mªque°
;

63 
ngx_buf_t
 *
	mª•⁄£
;

64 
ngx_≥î_c⁄√˘i⁄_t
 
	m≥î
;

66 
ngx_öt_t
 (*
¥o˚ss
)(
ngx_s¶_oc•_˘x_t
 *
	mr
);

68 
ngx_uöt_t
 
	m°©e
;

70 
ngx_uöt_t
 
	mcode
;

71 
ngx_uöt_t
 
	mcou¡
;

73 
ngx_uöt_t
 
	md⁄e
;

75 
u_ch¨
 *
	mhódî_«me_°¨t
;

76 
u_ch¨
 *
	mhódî_«me_íd
;

77 
u_ch¨
 *
	mhódî_°¨t
;

78 
u_ch¨
 *
	mhódî_íd
;

80 
ngx_poﬁ_t
 *
	mpoﬁ
;

81 
ngx_log_t
 *
	mlog
;

85 
ngx_öt_t
 
ngx_s¶_°≠lög_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

86 
ngx_°r_t
 *
fûe
);

87 
ngx_öt_t
 
ngx_s¶_°≠lög_issuî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
);

88 
ngx_öt_t
 
ngx_s¶_°≠lög_ª•⁄dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

89 
ngx_°r_t
 *
ª•⁄dî
);

91 
ngx_s¶_˚πifiˇã_°©us_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

92 *
d©a
);

93 
ngx_s¶_°≠lög_upd©e
(
ngx_s¶_°≠lög_t
 *
°≠À
);

94 
ngx_s¶_°≠lög_oc•_h™dÀr
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

96 
ngx_s¶_°≠lög_˛ónup
(*
d©a
);

98 
ngx_s¶_oc•_˘x_t
 *
ngx_s¶_oc•_°¨t
();

99 
ngx_s¶_oc•_d⁄e
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

100 
ngx_s¶_oc•_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

101 
ngx_s¶_oc•_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
);

102 
ngx_s¶_oc•_c⁄√˘
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

103 
ngx_s¶_oc•_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

104 
ngx_s¶_oc•_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

105 
ngx_s¶_oc•_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

107 
ngx_öt_t
 
ngx_s¶_oc•_¸óã_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

108 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

109 
ngx_öt_t
 
ngx_s¶_oc•_∑r£_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

110 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_hódîs
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

111 
ngx_öt_t
 
ngx_s¶_oc•_∑r£_hódî_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

112 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_body
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

114 
u_ch¨
 *
ngx_s¶_oc•_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

117 
ngx_öt_t


118 
	$ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
,

119 
ngx_°r_t
 *
ª•⁄dî
, 
ngx_uöt_t
 
vîify
)

121 
ngx_öt_t
 
rc
;

122 
ngx_poﬁ_˛ónup_t
 *
˛n
;

123 
ngx_s¶_°≠lög_t
 *
°≠À
;

125 
°≠À
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_°≠lög_t
));

126 i‡(
°≠À
 =
NULL
) {

127  
NGX_ERROR
;

130 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

131 i‡(
˛n
 =
NULL
) {

132  
NGX_ERROR
;

135 
˛n
->
h™dÀr
 = 
ngx_s¶_°≠lög_˛ónup
;

136 
˛n
->
d©a
 = 
°≠À
;

138 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
, 
°≠À
)

141 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

143  
NGX_ERROR
;

146 
°≠À
->
s¶_˘x
 = 
s¶
->
˘x
;

147 
°≠À
->
timeout
 = 60000;

148 
°≠À
->
vîify
 = verify;

150 i‡(
fûe
->
Àn
) {

153 i‡(
	`ngx_s¶_°≠lög_fûe
(
cf
, 
s¶
, 
fûe
Ë!
NGX_OK
) {

154  
NGX_ERROR
;

157 
d⁄e
;

160 
rc
 = 
	`ngx_s¶_°≠lög_issuî
(
cf
, 
s¶
);

162 i‡(
rc
 =
NGX_DECLINED
) {

163  
NGX_OK
;

166 i‡(
rc
 !
NGX_OK
) {

167  
NGX_ERROR
;

170 
rc
 = 
	`ngx_s¶_°≠lög_ª•⁄dî
(
cf
, 
s¶
, 
ª•⁄dî
);

172 i‡(
rc
 =
NGX_DECLINED
) {

173  
NGX_OK
;

176 i‡(
rc
 !
NGX_OK
) {

177  
NGX_ERROR
;

180 
d⁄e
:

182 
	`SSL_CTX_£t_é£xt_°©us_cb
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_°©us_ˇŒback
);

183 
	`SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
->
˘x
, 
°≠À
);

185  
NGX_OK
;

186 
	}
}

189 
ngx_öt_t


190 
	$ngx_s¶_°≠lög_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
)

192 
BIO
 *
bio
;

193 
Àn
;

194 
u_ch¨
 *
p
, *
buf
;

195 
OCSP_RESPONSE
 *
ª•⁄£
;

196 
ngx_s¶_°≠lög_t
 *
°≠À
;

198 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

200 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

201  
NGX_ERROR
;

204 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

205 i‡(
bio
 =
NULL
) {

206 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

207 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

208  
NGX_ERROR
;

211 
ª•⁄£
 = 
	`d2i_OCSP_RESPONSE_bio
(
bio
, 
NULL
);

212 i‡(
ª•⁄£
 =
NULL
) {

213 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

214 "d2i_OCSP_RESPONSE_bio(\"%s\"ËÁûed", 
fûe
->
d©a
);

215 
	`BIO_‰ì
(
bio
);

216  
NGX_ERROR
;

219 
Àn
 = 
	`i2d_OCSP_RESPONSE
(
ª•⁄£
, 
NULL
);

220 i‡(
Àn
 <= 0) {

221 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

222 "i2d_OCSP_RESPONSE(\"%s\"ËÁûed", 
fûe
->
d©a
);

223 
Áûed
;

226 
buf
 = 
	`ngx_Æloc
(
Àn
, 
s¶
->
log
);

227 i‡(
buf
 =
NULL
) {

228 
Áûed
;

231 
p
 = 
buf
;

232 
Àn
 = 
	`i2d_OCSP_RESPONSE
(
ª•⁄£
, &
p
);

233 i‡(
Àn
 <= 0) {

234 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

235 "i2d_OCSP_RESPONSE(\"%s\"ËÁûed", 
fûe
->
d©a
);

236 
	`ngx_‰ì
(
buf
);

237 
Áûed
;

240 
	`OCSP_RESPONSE_‰ì
(
ª•⁄£
);

241 
	`BIO_‰ì
(
bio
);

243 
°≠À
->°≠À.
d©a
 = 
buf
;

244 
°≠À
->°≠À.
Àn
 =Üen;

246  
NGX_OK
;

248 
Áûed
:

250 
	`OCSP_RESPONSE_‰ì
(
ª•⁄£
);

251 
	`BIO_‰ì
(
bio
);

253  
NGX_ERROR
;

254 
	}
}

257 
ngx_öt_t


258 
	$ngx_s¶_°≠lög_issuî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
)

260 
i
, 
n
, 
rc
;

261 
X509
 *
˚π
, *
issuî
;

262 
X509_STORE
 *
°‹e
;

263 
X509_STORE_CTX
 *
°‹e_˘x
;

264 
	`STACK_OF
(
X509
Ë*
chaö
;

265 
ngx_s¶_°≠lög_t
 *
°≠À
;

267 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

268 
˚π
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
);

270 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10001000L

271 
	`SSL_CTX_gë_exåa_chaö_˚πs
(
s¶
->
˘x
, &
chaö
);

273 
chaö
 = 
s¶
->
˘x
->
exåa_˚πs
;

276 
n
 = 
	`sk_X509_num
(
chaö
);

278 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

279 "SSL gë issuî: %dÉxå®˚πs", 
n
);

281 
i
 = 0; i < 
n
; i++) {

282 
issuî
 = 
	`sk_X509_vÆue
(
chaö
, 
i
);

283 i‡(
	`X509_check_issued
(
issuî
, 
˚π
Ë=
X509_V_OK
) {

284 
	`CRYPTO_add
(&
issuî
->
ª„ªn˚s
, 1, 
CRYPTO_LOCK_X509
);

286 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

287 "SSL gë issuî: found %∞öÉxå®˚πs", 
issuî
);

289 
°≠À
->
˚π
 = cert;

290 
°≠À
->
issuî
 = issuer;

292  
NGX_OK
;

296 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

297 i‡(
°‹e
 =
NULL
) {

298 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

300  
NGX_ERROR
;

303 
°‹e_˘x
 = 
	`X509_STORE_CTX_√w
();

304 i‡(
°‹e_˘x
 =
NULL
) {

305 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

307  
NGX_ERROR
;

310 i‡(
	`X509_STORE_CTX_öô
(
°‹e_˘x
, 
°‹e
, 
NULL
, NULL) == 0) {

311 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

313 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

314  
NGX_ERROR
;

317 
rc
 = 
	`X509_STORE_CTX_gë1_issuî
(&
issuî
, 
°‹e_˘x
, 
˚π
);

319 i‡(
rc
 == -1) {

320 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

322 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

323  
NGX_ERROR
;

326 i‡(
rc
 == 0) {

327 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

329 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

330  
NGX_DECLINED
;

333 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

336 "SSL gë issuî: found %∞ö cîà°‹e", 
issuî
);

338 
°≠À
->
˚π
 = cert;

339 
°≠À
->
issuî
 = issuer;

341  
NGX_OK
;

342 
	}
}

345 
ngx_öt_t


346 
	$ngx_s¶_°≠lög_ª•⁄dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
ª•⁄dî
)

348 
ngx_uæ_t
 
u
;

349 *
s
;

350 
ngx_s¶_°≠lög_t
 *
°≠À
;

351 
	`STACK_OF
(
OPENSSL_STRING
Ë*
aü
;

353 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

355 i‡(
ª•⁄dî
->
Àn
 == 0) {

359 
aü
 = 
	`X509_gë1_oc•
(
°≠À
->
˚π
);

360 i‡(
aü
 =
NULL
) {

361 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

364  
NGX_DECLINED
;

367 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

368 
s
 = 
	`sk_OPENSSL_STRING_vÆue
(
aü
, 0);

370 
s
 = 
	`sk_vÆue
(
aü
, 0);

372 i‡(
s
 =
NULL
) {

373 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

376 
	`X509_emaû_‰ì
(
aü
);

377  
NGX_DECLINED
;

380 
ª•⁄dî
->
Àn
 = 
	`ngx_°æí
(
s
);

381 
ª•⁄dî
->
d©a
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñe•⁄dî->
Àn
);

382 i‡(
ª•⁄dî
->
d©a
 =
NULL
) {

383 
	`X509_emaû_‰ì
(
aü
);

384  
NGX_ERROR
;

387 
	`ngx_mem˝y
(
ª•⁄dî
->
d©a
, 
s
,Ñe•⁄dî->
Àn
);

388 
	`X509_emaû_‰ì
(
aü
);

391 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

393 
u
.
uæ
 = *
ª•⁄dî
;

394 
u
.
deÁu…_p‹t
 = 80;

395 
u
.
uri_∑π
 = 1;

397 i‡(
u
.
uæ
.
Àn
 > 7

398 && 
	`ngx_°∫ˇ£cmp
(
u
.
uæ
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

400 
u
.
uæ
.
Àn
 -= 7;

401 
u
.
uæ
.
d©a
 += 7;

404 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

406 "övÆid URLÖªfix i¿OCSPÑe•⁄dî \"%V\"", &
u
.
uæ
);

407  
NGX_DECLINED
;

410 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

411 i‡(
u
.
îr
) {

412 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

414 "%†ö OCSPÑe•⁄dî \"%V\"", 
u
.
îr
, &u.
uæ
);

415  
NGX_DECLINED
;

418  
NGX_ERROR
;

421 
°≠À
->
addrs
 = 
u
.addrs;

422 
°≠À
->
ho°
 = 
u
.host;

423 
°≠À
->
uri
 = 
u
.uri;

424 
°≠À
->
p‹t
 = 
u
.port;

426 i‡(
°≠À
->
uri
.
Àn
 == 0) {

427 
	`ngx_°r_£t
(&
°≠À
->
uri
, "/");

430  
NGX_OK
;

431 
	}
}

434 
ngx_öt_t


435 
	$ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

436 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
)

438 
ngx_s¶_°≠lög_t
 *
°≠À
;

440 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

442 
°≠À
->
ªsﬁvî
 =Ñesolver;

443 
°≠À
->
ªsﬁvî_timeout
 =Ñesolver_timeout;

445  
NGX_OK
;

446 
	}
}

450 
	$ngx_s¶_˚πifiˇã_°©us_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
d©a
)

452 
rc
;

453 
u_ch¨
 *
p
;

454 
ngx_c⁄√˘i⁄_t
 *
c
;

455 
ngx_s¶_°≠lög_t
 *
°≠À
;

457 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

459 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

462 
°≠À
 = 
d©a
;

463 
rc
 = 
SSL_TLSEXT_ERR_NOACK
;

465 i‡(
°≠À
->°≠À.
Àn
) {

468 
p
 = 
	`OPENSSL_mÆloc
(
°≠À
->°≠À.
Àn
);

469 i‡(
p
 =
NULL
) {

470 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "OPENSSL_malloc() failed");

471  
SSL_TLSEXT_ERR_NOACK
;

474 
	`ngx_mem˝y
(
p
, 
°≠À
->°≠À.
d©a
, sè∂e->°≠À.
Àn
);

476 
	`SSL_£t_é£xt_°©us_oc•_ª•
(
s¶_c⁄n
, 
p
, 
°≠À
->°≠À.
Àn
);

478 
rc
 = 
SSL_TLSEXT_ERR_OK
;

481 
	`ngx_s¶_°≠lög_upd©e
(
°≠À
);

483  
rc
;

484 
	}
}

488 
	$ngx_s¶_°≠lög_upd©e
(
ngx_s¶_°≠lög_t
 *
°≠À
)

490 
ngx_s¶_oc•_˘x_t
 *
˘x
;

492 i‡(
°≠À
->
ho°
.
Àn
 == 0

493 || 
°≠À
->
lﬂdög
 || sè∂e->
vÆid
 >
	`ngx_time
())

498 
°≠À
->
lﬂdög
 = 1;

500 
˘x
 = 
	`ngx_s¶_oc•_°¨t
();

501 i‡(
˘x
 =
NULL
) {

505 
˘x
->
˚π
 = 
°≠À
->cert;

506 
˘x
->
issuî
 = 
°≠À
->issuer;

508 
˘x
->
addrs
 = 
°≠À
->addrs;

509 
˘x
->
ho°
 = 
°≠À
->host;

510 
˘x
->
uri
 = 
°≠À
->uri;

511 
˘x
->
p‹t
 = 
°≠À
->port;

512 
˘x
->
timeout
 = 
°≠À
->timeout;

514 
˘x
->
ªsﬁvî
 = 
°≠À
->resolver;

515 
˘x
->
ªsﬁvî_timeout
 = 
°≠À
->resolver_timeout;

517 
˘x
->
h™dÀr
 = 
ngx_s¶_°≠lög_oc•_h™dÀr
;

518 
˘x
->
d©a
 = 
°≠À
;

520 
	`ngx_s¶_oc•_ªque°
(
˘x
);

523 
	}
}

527 
	$ngx_s¶_°≠lög_oc•_h™dÀr
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

529 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

532 
u_ch¨
 *
p
;

533 
n
;

534 
size_t
 
Àn
;

535 
ngx_°r_t
 
ª•⁄£
;

536 
X509_STORE
 *
°‹e
;

537 
	`STACK_OF
(
X509
Ë*
chaö
;

538 
OCSP_CERTID
 *
id
;

539 
OCSP_RESPONSE
 *
oc•
;

540 
OCSP_BASICRESP
 *
basic
;

541 
ngx_s¶_°≠lög_t
 *
°≠À
;

542 
ASN1_GENERALIZEDTIME
 *
thisupd©e
, *
√xtupd©e
;

544 
°≠À
 = 
˘x
->
d©a
;

545 
oc•
 = 
NULL
;

546 
basic
 = 
NULL
;

547 
id
 = 
NULL
;

549 i‡(
˘x
->
code
 != 200) {

550 
îr‹
;

555 
Àn
 = 
˘x
->
ª•⁄£
->
œ°
 - ctx->ª•⁄£->
pos
;

556 
p
 = 
˘x
->
ª•⁄£
->
pos
;

558 
oc•
 = 
	`d2i_OCSP_RESPONSE
(
NULL
, &
p
, 
Àn
);

559 i‡(
oc•
 =
NULL
) {

560 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

562 
îr‹
;

565 
n
 = 
	`OCSP_ª•⁄£_°©us
(
oc•
);

567 i‡(
n
 !
OCSP_RESPONSE_STATUS_SUCCESSFUL
) {

568 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

570 
n
, 
	`OCSP_ª•⁄£_°©us_°r
(n));

571 
îr‹
;

574 
basic
 = 
	`OCSP_ª•⁄£_gë1_basic
(
oc•
);

575 i‡(
basic
 =
NULL
) {

576 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

578 
îr‹
;

581 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
°≠À
->
s¶_˘x
);

582 i‡(
°‹e
 =
NULL
) {

583 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

585 
îr‹
;

588 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10001000L

589 
	`SSL_CTX_gë_exåa_chaö_˚πs
(
°≠À
->
s¶_˘x
, &
chaö
);

591 
chaö
 = 
°≠À
->
s¶_˘x
->
exåa_˚πs
;

594 i‡(
	`OCSP_basic_vîify
(
basic
, 
chaö
, 
°‹e
,

595 
°≠À
->
vîify
 ? 
OCSP_TRUSTOTHER
 : 
OCSP_NOVERIFY
)

598 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

600 
îr‹
;

603 
id
 = 
	`OCSP_˚π_to_id
(
NULL
, 
˘x
->
˚π
, ctx->
issuî
);

604 i‡(
id
 =
NULL
) {

605 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

607 
îr‹
;

610 i‡(
	`OCSP_ª•_föd_°©us
(
basic
, 
id
, &
n
, 
NULL
, NULL,

611 &
thisupd©e
, &
√xtupd©e
)

614 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

616 
îr‹
;

619 i‡(
n
 !
V_OCSP_CERTSTATUS_GOOD
) {

620 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

622 
	`OCSP_˚π_°©us_°r
(
n
));

623 
îr‹
;

626 i‡(
	`OCSP_check_vÆidôy
(
thisupd©e
, 
√xtupd©e
, 300, -1) != 1) {

627 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

629 
îr‹
;

632 
	`OCSP_CERTID_‰ì
(
id
);

633 
	`OCSP_BASICRESP_‰ì
(
basic
);

634 
	`OCSP_RESPONSE_‰ì
(
oc•
);

638 
ª•⁄£
.
Àn
 =Üen;

639 
ª•⁄£
.
d©a
 = 
	`ngx_Æloc
‘e•⁄£.
Àn
, 
˘x
->
log
);

641 i‡(
ª•⁄£
.
d©a
 =
NULL
) {

642 
d⁄e
;

645 
	`ngx_mem˝y
(
ª•⁄£
.
d©a
, 
˘x
->ª•⁄£->
pos
,Ñe•⁄£.
Àn
);

647 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

649 
	`OCSP_˚π_°©us_°r
(
n
), 
ª•⁄£
.
Àn
);

651 i‡(
°≠À
->°≠À.
d©a
) {

652 
	`ngx_‰ì
(
°≠À
->°≠À.
d©a
);

655 
°≠À
->°≠À = 
ª•⁄£
;

657 
d⁄e
:

659 
°≠À
->
lﬂdög
 = 0;

660 
°≠À
->
vÆid
 = 
	`ngx_time
() + 3600;

662 
	`ngx_s¶_oc•_d⁄e
(
˘x
);

665 
îr‹
:

667 
°≠À
->
lﬂdög
 = 0;

668 
°≠À
->
vÆid
 = 
	`ngx_time
() + 300;

670 i‡(
id
) {

671 
	`OCSP_CERTID_‰ì
(
id
);

674 i‡(
basic
) {

675 
	`OCSP_BASICRESP_‰ì
(
basic
);

678 i‡(
oc•
) {

679 
	`OCSP_RESPONSE_‰ì
(
oc•
);

682 
	`ngx_s¶_oc•_d⁄e
(
˘x
);

683 
	}
}

687 
	$ngx_s¶_°≠lög_˛ónup
(*
d©a
)

689 
ngx_s¶_°≠lög_t
 *
°≠À
 = 
d©a
;

691 i‡(
°≠À
->
issuî
) {

692 
	`X509_‰ì
(
°≠À
->
issuî
);

695 i‡(
°≠À
->°≠À.
d©a
) {

696 
	`ngx_‰ì
(
°≠À
->°≠À.
d©a
);

698 
	}
}

701 
ngx_s¶_oc•_˘x_t
 *

702 
	$ngx_s¶_oc•_°¨t
()

704 
ngx_log_t
 *
log
;

705 
ngx_poﬁ_t
 *
poﬁ
;

706 
ngx_s¶_oc•_˘x_t
 *
˘x
;

708 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
ngx_cy˛e
->
log
);

709 i‡(
poﬁ
 =
NULL
) {

710  
NULL
;

713 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_s¶_oc•_˘x_t
));

714 i‡(
˘x
 =
NULL
) {

715 
	`ngx_de°roy_poﬁ
(
poﬁ
);

716  
NULL
;

719 
log
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_log_t
));

720 i‡(
log
 =
NULL
) {

721 
	`ngx_de°roy_poﬁ
(
poﬁ
);

722  
NULL
;

725 
˘x
->
poﬁ
 =Öool;

727 *
log
 = *
˘x
->
poﬁ
->log;

729 
˘x
->
poﬁ
->
log
 =Üog;

730 
˘x
->
log
 =Üog;

732 
log
->
h™dÀr
 = 
ngx_s¶_oc•_log_îr‹
;

733 
log
->
d©a
 = 
˘x
;

734 
log
->
a˘i⁄
 = "requesting certificate status";

736  
˘x
;

737 
	}
}

741 
	$ngx_s¶_oc•_d⁄e
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

743 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

746 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

747 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

750 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

751 
	}
}

755 
	$ngx_s¶_oc•_îr‹
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

757 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

760 
˘x
->
code
 = 0;

761 
˘x
->
	`h™dÀr
(ctx);

762 
	}
}

766 
	$ngx_s¶_oc•_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

768 
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
, 
ãmp
;

770 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

773 i‡(
	`ngx_s¶_oc•_¸óã_ªque°
(
˘x
Ë!
NGX_OK
) {

774 
	`ngx_s¶_oc•_îr‹
(
˘x
);

778 i‡(
˘x
->
ªsﬁvî
) {

781 
ãmp
.
«me
 = 
˘x
->
ho°
;

783 
ªsﬁve
 = 
	`ngx_ªsﬁve_°¨t
(
˘x
->
ªsﬁvî
, &
ãmp
);

784 i‡(
ªsﬁve
 =
NULL
) {

785 
	`ngx_s¶_oc•_îr‹
(
˘x
);

789 i‡(
ªsﬁve
 =
NGX_NO_RESOLVER
) {

790 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
˘x
->
log
, 0,

791 "nÿªsﬁvî deföedÅÿªsﬁvê%V", &
˘x
->
ho°
);

792 
c⁄√˘
;

795 
ªsﬁve
->
«me
 = 
˘x
->
ho°
;

796 
ªsﬁve
->
h™dÀr
 = 
ngx_s¶_oc•_ªsﬁve_h™dÀr
;

797 
ªsﬁve
->
d©a
 = 
˘x
;

798 
ªsﬁve
->
timeout
 = 
˘x
->
ªsﬁvî_timeout
;

800 i‡(
	`ngx_ªsﬁve_«me
(
ªsﬁve
Ë!
NGX_OK
) {

801 
	`ngx_s¶_oc•_îr‹
(
˘x
);

808 
c⁄√˘
:

810 
	`ngx_s¶_oc•_c⁄√˘
(
˘x
);

811 
	}
}

815 
	$ngx_s¶_oc•_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
)

817 
ngx_s¶_oc•_˘x_t
 *
˘x
 = 
ªsﬁve
->
d©a
;

819 
u_ch¨
 *
p
;

820 
size_t
 
Àn
;

821 
ö_p‹t_t
 
p‹t
;

822 
sockÀn_t
 
sockÀn
;

823 
ngx_uöt_t
 
i
;

824 
sockaddr
 *sockaddr;

826 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

829 i‡(
ªsﬁve
->
°©e
) {

830 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

832 &
ªsﬁve
->
«me
,Ñesﬁve->
°©e
,

833 
	`ngx_ªsﬁvî_°ªº‹
(
ªsﬁve
->
°©e
));

834 
Áûed
;

837 #i‡(
NGX_DEBUG
)

839 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

840 
ngx_°r_t
 
addr
;

842 
addr
.
d©a
 = 
ãxt
;

844 
i
 = 0; i < 
ªsﬁve
->
«ddrs
; i++) {

845 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
ªsﬁve
->
addrs
[
i
].
sockaddr
,

846 
ªsﬁve
->
addrs
[
i
].
sockÀn
,

847 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

849 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

850 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

856 
˘x
->
«ddrs
 = 
ªsﬁve
->naddrs;

857 
˘x
->
addrs
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
, ctx->
«ddrs
 * (
ngx_addr_t
));

859 i‡(
˘x
->
addrs
 =
NULL
) {

860 
Áûed
;

863 
p‹t
 = 
	`ht⁄s
(
˘x
->port);

865 
i
 = 0; i < 
ªsﬁve
->
«ddrs
; i++) {

867 
sockÀn
 = 
ªsﬁve
->
addrs
[
i
].socklen;

869 
sockaddr
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
sockÀn
);

870 i‡(
sockaddr
 =
NULL
) {

871 
Áûed
;

874 
	`ngx_mem˝y
(
sockaddr
, 
ªsﬁve
->
addrs
[
i
].sockaddr, 
sockÀn
);

876 
sockaddr
->
ß_Ámûy
) {

877 #i‡(
NGX_HAVE_INET6
)

878 
AF_INET6
:

879 ((
sockaddr_ö6
 *Ë
sockaddr
)->
sö6_p‹t
 = 
p‹t
;

883 ((
sockaddr_ö
 *Ë
sockaddr
)->
sö_p‹t
 = 
p‹t
;

886 
˘x
->
addrs
[
i
].
sockaddr
 = sockaddr;

887 
˘x
->
addrs
[
i
].
sockÀn
 = socklen;

889 
p
 = 
	`ngx_≤Æloc
(
˘x
->
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

890 i‡(
p
 =
NULL
) {

891 
Áûed
;

894 
Àn
 = 
	`ngx_sock_¡›
(
sockaddr
, 
sockÀn
, 
p
, 
NGX_SOCKADDR_STRLEN
, 1);

896 
˘x
->
addrs
[
i
].
«me
.
Àn
 =Üen;

897 
˘x
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

900 
	`ngx_ªsﬁve_«me_d⁄e
(
ªsﬁve
);

902 
	`ngx_s¶_oc•_c⁄√˘
(
˘x
);

905 
Áûed
:

907 
	`ngx_ªsﬁve_«me_d⁄e
(
ªsﬁve
);

908 
	`ngx_s¶_oc•_îr‹
(
˘x
);

909 
	}
}

913 
	$ngx_s¶_oc•_c⁄√˘
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

915 
ngx_öt_t
 
rc
;

917 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

922 
˘x
->
≥î
.
sockaddr
 = ctx->
addrs
[0].sockaddr;

923 
˘x
->
≥î
.
sockÀn
 = ctx->
addrs
[0].socklen;

924 
˘x
->
≥î
.
«me
 = &˘x->
addrs
[0].name;

925 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

926 
˘x
->
≥î
.
log
 = ctx->log;

927 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

929 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

931 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

934 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

935 
	`ngx_s¶_oc•_îr‹
(
˘x
);

939 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = ctx;

940 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = ctx->pool;

942 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_s¶_oc•_ªad_h™dÀr
;

943 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_s¶_oc•_wrôe_h™dÀr
;

945 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_°©us_löe
;

947 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, ctx->
timeout
);

948 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, ctx->
timeout
);

950 i‡(
rc
 =
NGX_OK
) {

951 
	`ngx_s¶_oc•_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

954 
	}
}

958 
	$ngx_s¶_oc•_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

960 
ssize_t
 
n
, 
size
;

961 
ngx_c⁄√˘i⁄_t
 *
c
;

962 
ngx_s¶_oc•_˘x_t
 *
˘x
;

964 
c
 = 
wev
->
d©a
;

965 
˘x
 = 
c
->
d©a
;

967 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0,

970 i‡(
wev
->
timedout
) {

971 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

973 
	`ngx_s¶_oc•_îr‹
(
˘x
);

977 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

979 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

981 i‡(
n
 =
NGX_ERROR
) {

982 
	`ngx_s¶_oc•_îr‹
(
˘x
);

986 i‡(
n
 > 0) {

987 
˘x
->
ªque°
->
pos
 +
n
;

989 i‡(
n
 =
size
) {

990 
wev
->
h™dÀr
 = 
ngx_s¶_oc•_dummy_h™dÀr
;

992 i‡(
wev
->
timî_£t
) {

993 
	`ngx_dñ_timî
(
wev
);

996 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

997 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1004 i‡(!
wev
->
timî_£t
) {

1005 
	`ngx_add_timî
(
wev
, 
˘x
->
timeout
);

1007 
	}
}

1011 
	$ngx_s¶_oc•_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1013 
ssize_t
 
n
, 
size
;

1014 
ngx_öt_t
 
rc
;

1015 
ngx_s¶_oc•_˘x_t
 *
˘x
;

1016 
ngx_c⁄√˘i⁄_t
 *
c
;

1018 
c
 = 
ªv
->
d©a
;

1019 
˘x
 = 
c
->
d©a
;

1021 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ªv
->
log
, 0,

1024 i‡(
ªv
->
timedout
) {

1025 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

1027 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1031 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

1032 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 16384);

1033 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

1034 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1041 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

1043 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
œ°
, 
size
);

1045 i‡(
n
 > 0) {

1046 
˘x
->
ª•⁄£
->
œ°
 +
n
;

1048 
rc
 = 
˘x
->
	`¥o˚ss
(ctx);

1050 i‡(
rc
 =
NGX_ERROR
) {

1051 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1058 i‡(
n
 =
NGX_AGAIN
) {

1060 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1061 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1070 
˘x
->
d⁄e
 = 1;

1072 
rc
 = 
˘x
->
	`¥o˚ss
(ctx);

1074 i‡(
rc
 =
NGX_DONE
) {

1079 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1082 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1083 
	}
}

1087 
	$ngx_s¶_oc•_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1089 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

1091 
	}
}

1094 
ngx_öt_t


1095 
	$ngx_s¶_oc•_¸óã_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1097 
Àn
;

1098 
u_ch¨
 *
p
;

1099 
uöçå_t
 
esˇ≥
;

1100 
ngx_°r_t
 
bö¨y
, 
ba£64
;

1101 
ngx_buf_t
 *
b
;

1102 
OCSP_CERTID
 *
id
;

1103 
OCSP_REQUEST
 *
oc•
;

1105 
oc•
 = 
	`OCSP_REQUEST_√w
();

1106 i‡(
oc•
 =
NULL
) {

1107 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1109  
NGX_ERROR
;

1112 
id
 = 
	`OCSP_˚π_to_id
(
NULL
, 
˘x
->
˚π
, ctx->
issuî
);

1113 i‡(
id
 =
NULL
) {

1114 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1116 
Áûed
;

1119 i‡(
	`OCSP_ªque°_add0_id
(
oc•
, 
id
Ë=
NULL
) {

1120 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1122 
	`OCSP_CERTID_‰ì
(
id
);

1123 
Áûed
;

1126 
Àn
 = 
	`i2d_OCSP_REQUEST
(
oc•
, 
NULL
);

1127 i‡(
Àn
 <= 0) {

1128 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1130 
Áûed
;

1133 
bö¨y
.
Àn
 =Üen;

1134 
bö¨y
.
d©a
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
Àn
);

1135 i‡(
bö¨y
.
d©a
 =
NULL
) {

1136 
Áûed
;

1139 
p
 = 
bö¨y
.
d©a
;

1140 
Àn
 = 
	`i2d_OCSP_REQUEST
(
oc•
, &
p
);

1141 i‡(
Àn
 <= 0) {

1142 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
˘x
->
log
, 0,

1144 
Áûed
;

1147 
ba£64
.
Àn
 = 
	`ngx_ba£64_ícoded_Àngth
(
bö¨y
.len);

1148 
ba£64
.
d©a
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, ba£64.
Àn
);

1149 i‡(
ba£64
.
d©a
 =
NULL
) {

1150 
Áûed
;

1153 
	`ngx_ícode_ba£64
(&
ba£64
, &
bö¨y
);

1155 
esˇ≥
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ba£64
.
d©a
, ba£64.
Àn
,

1156 
NGX_ESCAPE_URI_COMPONENT
);

1158 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1160 
ba£64
.
Àn
, 
esˇ≥
);

1162 
Àn
 = ("GET "Ë- 1 + 
˘x
->
uri
.len + ("/") - 1

1163 + 
ba£64
.
Àn
 + 2 * 
esˇ≥
 + (" HTTP/1.0" 
CRLF
) - 1

1164 + ("Ho°: "Ë- 1 + 
˘x
->
ho°
.
Àn
 + (
CRLF
) - 1

1165 + (
CRLF
) - 1;

1167 
b
 = 
	`ngx_¸óã_ãmp_buf
(
˘x
->
poﬁ
, 
Àn
);

1168 i‡(
b
 =
NULL
) {

1169 
Áûed
;

1172 
p
 = 
b
->
œ°
;

1174 
p
 = 
	`ngx_˝ymem
(p, "GET ", ("GET ") - 1);

1175 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
uri
.
d©a
, ctx->uri.
Àn
);

1177 i‡(
˘x
->
uri
.
d©a
[˘x->uri.
Àn
 - 1] != '/') {

1178 *
p
++ = '/';

1181 i‡(
esˇ≥
 == 0) {

1182 
p
 = 
	`ngx_˝ymem
’, 
ba£64
.
d©a
, ba£64.
Àn
);

1185 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
ba£64
.
d©a
, ba£64.
Àn
,

1186 
NGX_ESCAPE_URI_COMPONENT
);

1189 
p
 = 
	`ngx_˝ymem
’, " HTTP/1.0" 
CRLF
, (" HTTP/1.0" CRLF) - 1);

1190 
p
 = 
	`ngx_˝ymem
(p, "Host: ", ("Host: ") - 1);

1191 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
ho°
.
d©a
, ctx->ho°.
Àn
);

1192 *
p
++ = 
CR
; *p++ = 
LF
;

1195 *
p
++ = 
CR
; *p++ = 
LF
;

1197 
b
->
œ°
 = 
p
;

1198 
˘x
->
ªque°
 = 
b
;

1200 
	`OCSP_REQUEST_‰ì
(
oc•
);

1202  
NGX_OK
;

1204 
Áûed
:

1206 
	`OCSP_REQUEST_‰ì
(
oc•
);

1208  
NGX_ERROR
;

1209 
	}
}

1212 
ngx_öt_t


1213 
	$ngx_s¶_oc•_¥o˚ss_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1215 
ngx_öt_t
 
rc
;

1217 
rc
 = 
	`ngx_s¶_oc•_∑r£_°©us_löe
(
˘x
);

1219 i‡(
rc
 =
NGX_OK
) {

1221 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1223 
˘x
->
ª•⁄£
->
pos
 - ctx->ª•⁄£->
°¨t
,

1224 
˘x
->
ª•⁄£
->
°¨t
);

1227 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_hódîs
;

1228  
˘x
->
	`¥o˚ss
(ctx);

1231 i‡(
rc
 =
NGX_AGAIN
) {

1232  
NGX_AGAIN
;

1237 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1240  
NGX_ERROR
;

1241 
	}
}

1244 
ngx_öt_t


1245 
	$ngx_s¶_oc•_∑r£_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1247 
u_ch¨
 
ch
;

1248 
u_ch¨
 *
p
;

1249 
ngx_buf_t
 *
b
;

1251 
sw_°¨t
 = 0,

1252 
sw_H
,

1253 
sw_HT
,

1254 
sw_HTT
,

1255 
sw_HTTP
,

1256 
sw_fú°_maj‹_digô
,

1257 
sw_maj‹_digô
,

1258 
sw_fú°_mö‹_digô
,

1259 
sw_mö‹_digô
,

1260 
sw_°©us
,

1261 
sw_•a˚_a·î_°©us
,

1262 
sw_°©us_ãxt
,

1263 
sw_Æmo°_d⁄e


1264 } 
°©e
;

1266 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1269 
°©e
 = 
˘x
->state;

1270 
b
 = 
˘x
->
ª•⁄£
;

1272 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1273 
ch
 = *
p
;

1275 
°©e
) {

1278 
sw_°¨t
:

1279 
ch
) {

1281 
°©e
 = 
sw_H
;

1284  
NGX_ERROR
;

1288 
sw_H
:

1289 
ch
) {

1291 
°©e
 = 
sw_HT
;

1294  
NGX_ERROR
;

1298 
sw_HT
:

1299 
ch
) {

1301 
°©e
 = 
sw_HTT
;

1304  
NGX_ERROR
;

1308 
sw_HTT
:

1309 
ch
) {

1311 
°©e
 = 
sw_HTTP
;

1314  
NGX_ERROR
;

1318 
sw_HTTP
:

1319 
ch
) {

1321 
°©e
 = 
sw_fú°_maj‹_digô
;

1324  
NGX_ERROR
;

1329 
sw_fú°_maj‹_digô
:

1330 i‡(
ch
 < '1' || ch > '9') {

1331  
NGX_ERROR
;

1334 
°©e
 = 
sw_maj‹_digô
;

1338 
sw_maj‹_digô
:

1339 i‡(
ch
 == '.') {

1340 
°©e
 = 
sw_fú°_mö‹_digô
;

1344 i‡(
ch
 < '0' || ch > '9') {

1345  
NGX_ERROR
;

1351 
sw_fú°_mö‹_digô
:

1352 i‡(
ch
 < '0' || ch > '9') {

1353  
NGX_ERROR
;

1356 
°©e
 = 
sw_mö‹_digô
;

1360 
sw_mö‹_digô
:

1361 i‡(
ch
 == ' ') {

1362 
°©e
 = 
sw_°©us
;

1366 i‡(
ch
 < '0' || ch > '9') {

1367  
NGX_ERROR
;

1373 
sw_°©us
:

1374 i‡(
ch
 == ' ') {

1378 i‡(
ch
 < '0' || ch > '9') {

1379  
NGX_ERROR
;

1382 
˘x
->
code
 = ctx->codê* 10 + 
ch
 - '0';

1384 i‡(++
˘x
->
cou¡
 == 3) {

1385 
°©e
 = 
sw_•a˚_a·î_°©us
;

1391 
sw_•a˚_a·î_°©us
:

1392 
ch
) {

1394 
°©e
 = 
sw_°©us_ãxt
;

1397 
°©e
 = 
sw_°©us_ãxt
;

1399 
CR
:

1400 
°©e
 = 
sw_Æmo°_d⁄e
;

1402 
LF
:

1403 
d⁄e
;

1405  
NGX_ERROR
;

1410 
sw_°©us_ãxt
:

1411 
ch
) {

1412 
CR
:

1413 
°©e
 = 
sw_Æmo°_d⁄e
;

1415 
LF
:

1416 
d⁄e
;

1421 
sw_Æmo°_d⁄e
:

1422 
ch
) {

1423 
LF
:

1424 
d⁄e
;

1426  
NGX_ERROR
;

1431 
b
->
pos
 = 
p
;

1432 
˘x
->
°©e
 = state;

1434  
NGX_AGAIN
;

1436 
d⁄e
:

1438 
b
->
pos
 = 
p
 + 1;

1439 
˘x
->
°©e
 = 
sw_°¨t
;

1441  
NGX_OK
;

1442 
	}
}

1445 
ngx_öt_t


1446 
	$ngx_s¶_oc•_¥o˚ss_hódîs
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1448 
size_t
 
Àn
;

1449 
ngx_öt_t
 
rc
;

1451 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1455 
rc
 = 
	`ngx_s¶_oc•_∑r£_hódî_löe
(
˘x
);

1457 i‡(
rc
 =
NGX_OK
) {

1459 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1461 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
,

1462 
˘x
->
hódî_«me_°¨t
,

1463 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
,

1464 
˘x
->
hódî_°¨t
);

1466 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

1468 i‡(
Àn
 == ("Content-Type") - 1

1469 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

1470 (
u_ch¨
 *) "Content-Type",

1474 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

1476 i‡(
Àn
 != ("application/ocsp-response") - 1

1477 || 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_°¨t
,

1478 (
u_ch¨
 *) "application/ocsp-response",

1482 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1485 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
,

1486 
˘x
->
hódî_°¨t
);

1487  
NGX_ERROR
;

1498 i‡(
rc
 =
NGX_DONE
) {

1502 i‡(
rc
 =
NGX_AGAIN
) {

1503  
NGX_AGAIN
;

1508 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1511  
NGX_ERROR
;

1514 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_body
;

1515  
˘x
->
	`¥o˚ss
(ctx);

1516 
	}
}

1518 
ngx_öt_t


1519 
	$ngx_s¶_oc•_∑r£_hódî_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1521 
u_ch¨
 
c
, 
ch
, *
p
;

1523 
sw_°¨t
 = 0,

1524 
sw_«me
,

1525 
sw_•a˚_bef‹e_vÆue
,

1526 
sw_vÆue
,

1527 
sw_•a˚_a·î_vÆue
,

1528 
sw_Æmo°_d⁄e
,

1529 
sw_hódî_Æmo°_d⁄e


1530 } 
°©e
;

1532 
°©e
 = 
˘x
->state;

1534 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

1535 
ch
 = *
p
;

1538 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1539 "s:%d in:'%02Xd:%c'", 
°©e
, 
ch
, ch);

1542 
°©e
) {

1545 
sw_°¨t
:

1547 
ch
) {

1548 
CR
:

1549 
˘x
->
hódî_íd
 = 
p
;

1550 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

1552 
LF
:

1553 
˘x
->
hódî_íd
 = 
p
;

1554 
hódî_d⁄e
;

1556 
°©e
 = 
sw_«me
;

1557 
˘x
->
hódî_«me_°¨t
 = 
p
;

1559 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1560 i‡(
c
 >= 'a' && c <= 'z') {

1564 i‡(
ch
 >= '0' && ch <= '9') {

1568  
NGX_ERROR
;

1573 
sw_«me
:

1574 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1575 i‡(
c
 >= 'a' && c <= 'z') {

1579 i‡(
ch
 == ':') {

1580 
˘x
->
hódî_«me_íd
 = 
p
;

1581 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

1585 i‡(
ch
 == '-') {

1589 i‡(
ch
 >= '0' && ch <= '9') {

1593 i‡(
ch
 =
CR
) {

1594 
˘x
->
hódî_«me_íd
 = 
p
;

1595 
˘x
->
hódî_°¨t
 = 
p
;

1596 
˘x
->
hódî_íd
 = 
p
;

1597 
°©e
 = 
sw_Æmo°_d⁄e
;

1601 i‡(
ch
 =
LF
) {

1602 
˘x
->
hódî_«me_íd
 = 
p
;

1603 
˘x
->
hódî_°¨t
 = 
p
;

1604 
˘x
->
hódî_íd
 = 
p
;

1605 
d⁄e
;

1608  
NGX_ERROR
;

1611 
sw_•a˚_bef‹e_vÆue
:

1612 
ch
) {

1615 
CR
:

1616 
˘x
->
hódî_°¨t
 = 
p
;

1617 
˘x
->
hódî_íd
 = 
p
;

1618 
°©e
 = 
sw_Æmo°_d⁄e
;

1620 
LF
:

1621 
˘x
->
hódî_°¨t
 = 
p
;

1622 
˘x
->
hódî_íd
 = 
p
;

1623 
d⁄e
;

1625 
˘x
->
hódî_°¨t
 = 
p
;

1626 
°©e
 = 
sw_vÆue
;

1632 
sw_vÆue
:

1633 
ch
) {

1635 
˘x
->
hódî_íd
 = 
p
;

1636 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1638 
CR
:

1639 
˘x
->
hódî_íd
 = 
p
;

1640 
°©e
 = 
sw_Æmo°_d⁄e
;

1642 
LF
:

1643 
˘x
->
hódî_íd
 = 
p
;

1644 
d⁄e
;

1649 
sw_•a˚_a·î_vÆue
:

1650 
ch
) {

1653 
CR
:

1654 
°©e
 = 
sw_Æmo°_d⁄e
;

1656 
LF
:

1657 
d⁄e
;

1659 
°©e
 = 
sw_vÆue
;

1665 
sw_Æmo°_d⁄e
:

1666 
ch
) {

1667 
LF
:

1668 
d⁄e
;

1670  
NGX_ERROR
;

1674 
sw_hódî_Æmo°_d⁄e
:

1675 
ch
) {

1676 
LF
:

1677 
hódî_d⁄e
;

1679  
NGX_ERROR
;

1684 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1685 
˘x
->
°©e
 = state;

1687  
NGX_AGAIN
;

1689 
d⁄e
:

1691 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1692 
˘x
->
°©e
 = 
sw_°¨t
;

1694  
NGX_OK
;

1696 
hódî_d⁄e
:

1698 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1699 
˘x
->
°©e
 = 
sw_°¨t
;

1701  
NGX_DONE
;

1702 
	}
}

1705 
ngx_öt_t


1706 
	$ngx_s¶_oc•_¥o˚ss_body
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1708 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1711 i‡(
˘x
->
d⁄e
) {

1712 
˘x
->
	`h™dÀr
(ctx);

1713  
NGX_DONE
;

1716  
NGX_AGAIN
;

1717 
	}
}

1720 
u_ch¨
 *

1721 
	$ngx_s¶_oc•_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

1723 
u_ch¨
 *
p
;

1724 
ngx_s¶_oc•_˘x_t
 *
˘x
;

1726 
p
 = 
buf
;

1728 i‡(
log
->
a˘i⁄
) {

1729 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

1730 
Àn
 -
p
 - 
buf
;

1733 
˘x
 = 
log
->
d©a
;

1735 i‡(
˘x
) {

1736 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ",Ñe•⁄dî: %V", &
˘x
->
ho°
);

1739  
p
;

1740 
	}
}

1746 
ngx_öt_t


1747 
	$ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
,

1748 
ngx_°r_t
 *
ª•⁄dî
, 
ngx_uöt_t
 
vîify
)

1750 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

1753  
NGX_OK
;

1754 
	}
}

1756 
ngx_öt_t


1757 
	$ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

1758 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
)

1760  
NGX_OK
;

1761 
	}
}

	@src/event/ngx_event_pipe.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_pùe.h
>

14 
ngx_öt_t
 
ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
);

15 
ngx_öt_t
 
ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
);

17 
ngx_öt_t
 
ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
);

18 
ngx_ölöe
 
ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
);

19 
ngx_öt_t
 
ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
);

22 
ngx_öt_t


23 
	$ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
, 
ngx_öt_t
 
do_wrôe
)

25 
u_öt
 
Êags
;

26 
ngx_öt_t
 
rc
;

27 
ngx_evít_t
 *
ªv
, *
wev
;

30 i‡(
do_wrôe
) {

31 
p
->
log
->
a˘i⁄
 = "sendingÅo client";

33 
rc
 = 
	`ngx_evít_pùe_wrôe_to_down°ªam
(
p
);

35 i‡(
rc
 =
NGX_ABORT
) {

36  
NGX_ABORT
;

39 i‡(
rc
 =
NGX_BUSY
) {

40  
NGX_OK
;

44 
p
->
ªad
 = 0;

45 
p
->
up°ªam_blocked
 = 0;

47 
p
->
log
->
a˘i⁄
 = "reading upstream";

49 i‡(
	`ngx_evít_pùe_ªad_up°ªam
(
p
Ë=
NGX_ABORT
) {

50  
NGX_ABORT
;

53 i‡(!
p
->
ªad
 && !p->
up°ªam_blocked
) {

57 
do_wrôe
 = 1;

60 i‡(
p
->
up°ªam
->
fd
 !(
ngx_sockë_t
) -1) {

61 
ªv
 = 
p
->
up°ªam
->
ªad
;

63 
Êags
 = (
ªv
->
eof
 ||Ñev->
îr‹
Ë? 
NGX_CLOSE_EVENT
 : 0;

65 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 
Êags
Ë!
NGX_OK
) {

66  
NGX_ABORT
;

69 i‡(!
ªv
->
dñayed
) {

70 i‡(
ªv
->
a˘ive
 && !ªv->
ªady
) {

71 
	`ngx_add_timî
(
ªv
, 
p
->
ªad_timeout
);

73 } i‡(
ªv
->
timî_£t
) {

74 
	`ngx_dñ_timî
(
ªv
);

79 i‡(
p
->
down°ªam
->
fd
 !(
ngx_sockë_t
) -1

80 && 
p
->
down°ªam
->
d©a
 =p->
ouçut_˘x
)

82 
wev
 = 
p
->
down°ªam
->
wrôe
;

83 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

84  
NGX_ABORT
;

87 i‡(!
wev
->
dñayed
) {

88 i‡(
wev
->
a˘ive
 && !wev->
ªady
) {

89 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

91 } i‡(
wev
->
timî_£t
) {

92 
	`ngx_dñ_timî
(
wev
);

97  
NGX_OK
;

98 
	}
}

101 
ngx_öt_t


102 
	$ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
)

104 
off_t
 
limô
;

105 
ssize_t
 
n
, 
size
;

106 
ngx_öt_t
 
rc
;

107 
ngx_buf_t
 *
b
;

108 
ngx_m£c_t
 
dñay
;

109 
ngx_chaö_t
 *
chaö
, *
˛
, *
 
;

111 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

112  
NGX_OK
;

115 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

116 "pùêªad up°ªam: %d", 
p
->
up°ªam
->
ªad
->
ªady
);

120 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

124 i‡(
p
->
¥îód_bufs
 =
NULL
 && !p->
up°ªam
->
ªad
->
ªady
) {

128 i‡(
p
->
¥îód_bufs
) {

132 
chaö
 = 
p
->
¥îód_bufs
;

133 
p
->
¥îód_bufs
 = 
NULL
;

134 
n
 = 
p
->
¥îód_size
;

136 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

137 "pùê¥îód: %z", 
n
);

139 i‡(
n
) {

140 
p
->
ªad
 = 1;

145 #i‡(
NGX_HAVE_KQUEUE
)

153 i‡(
p
->
up°ªam
->
ªad
->
avaûabÀ
 == 0

154 && 
p
->
up°ªam
->
ªad
->
≥ndög_eof
)

156 
p
->
up°ªam
->
ªad
->
ªady
 = 0;

157 
p
->
up°ªam
->
ªad
->
eof
 = 1;

158 
p
->
up°ªam_eof
 = 1;

159 
p
->
ªad
 = 1;

161 i‡(
p
->
up°ªam
->
ªad
->
kq_î∫o
) {

162 
p
->
up°ªam
->
ªad
->
îr‹
 = 1;

163 
p
->
up°ªam_îr‹
 = 1;

164 
p
->
up°ªam_eof
 = 0;

166 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
,

167 
p
->
up°ªam
->
ªad
->
kq_î∫o
,

176 i‡(
p
->
limô_øã
) {

177 i‡(
p
->
up°ªam
->
ªad
->
dñayed
) {

181 
limô
 = (
off_t
Ë
p
->
limô_øã
 * (
	`ngx_time
(Ë-Ö->
°¨t_£c
 + 1)

182 - 
p
->
ªad_Àngth
;

184 i‡(
limô
 <= 0) {

185 
p
->
up°ªam
->
ªad
->
dñayed
 = 1;

186 
dñay
 = (
ngx_m£c_t
Ë(- 
limô
 * 1000 / 
p
->
limô_øã
 + 1);

187 
	`ngx_add_timî
(
p
->
up°ªam
->
ªad
, 
dñay
);

192 
limô
 = 0;

195 i‡(
p
->
‰ì_øw_bufs
) {

199 
chaö
 = 
p
->
‰ì_øw_bufs
;

200 i‡(
p
->
sögÀ_buf
) {

201 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

202 
chaö
->
√xt
 = 
NULL
;

204 
p
->
‰ì_øw_bufs
 = 
NULL
;

207 } i‡(
p
->
Æloˇãd
 <Ö->
bufs
.
num
) {

211 
b
 = 
	`ngx_¸óã_ãmp_buf
(
p
->
poﬁ
,Ö->
bufs
.
size
);

212 i‡(
b
 =
NULL
) {

213  
NGX_ABORT
;

216 
p
->
Æloˇãd
++;

218 
chaö
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

219 i‡(
chaö
 =
NULL
) {

220  
NGX_ABORT
;

223 
chaö
->
buf
 = 
b
;

224 
chaö
->
√xt
 = 
NULL
;

226 } i‡(!
p
->
ˇchóbÀ


227 && 
p
->
down°ªam
->
d©a
 =p->
ouçut_˘x


228 && 
p
->
down°ªam
->
wrôe
->
ªady


229 && !
p
->
down°ªam
->
wrôe
->
dñayed
)

236 
p
->
up°ªam_blocked
 = 1;

238 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

243 } i‡(
p
->
ˇchóbÀ


244 || 
p
->
ãmp_fûe
->
off£t
 <Ö->
max_ãmp_fûe_size
)

252 
rc
 = 
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
);

254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

255 "pùêãm∞off£t: %O", 
p
->
ãmp_fûe
->
off£t
);

257 i‡(
rc
 =
NGX_BUSY
) {

261 i‡(
rc
 =
NGX_AGAIN
) {

262 i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT


263 && 
p
->
up°ªam
->
ªad
->
a˘ive


264 && 
p
->
up°ªam
->
ªad
->
ªady
)

266 i‡(
	`ngx_dñ_evít
(
p
->
up°ªam
->
ªad
, 
NGX_READ_EVENT
, 0)

267 =
NGX_ERROR
)

269  
NGX_ABORT
;

274 i‡(
rc
 !
NGX_OK
) {

275  
rc
;

278 
chaö
 = 
p
->
‰ì_øw_bufs
;

279 i‡(
p
->
sögÀ_buf
) {

280 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

281 
chaö
->
√xt
 = 
NULL
;

283 
p
->
‰ì_øw_bufs
 = 
NULL
;

290 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

296 
n
 = 
p
->
up°ªam
->
	`ªcv_chaö
’->up°ªam, 
chaö
, 
limô
);

298 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

299 "pùêªcv chaö: %z", 
n
);

301 i‡(
p
->
‰ì_øw_bufs
) {

302 
chaö
->
√xt
 = 
p
->
‰ì_øw_bufs
;

304 
p
->
‰ì_øw_bufs
 = 
chaö
;

306 i‡(
n
 =
NGX_ERROR
) {

307 
p
->
up°ªam_îr‹
 = 1;

308  
NGX_ERROR
;

311 i‡(
n
 =
NGX_AGAIN
) {

312 i‡(
p
->
sögÀ_buf
) {

313 
	`ngx_evít_pùe_ªmove_shadow_löks
(
chaö
->
buf
);

319 
p
->
ªad
 = 1;

321 i‡(
n
 == 0) {

322 
p
->
up°ªam_eof
 = 1;

327 
dñay
 = 
p
->
limô_øã
 ? (
ngx_m£c_t
Ë
n
 * 1000 /Ö->limit_rate : 0;

329 
p
->
ªad_Àngth
 +
n
;

330 
˛
 = 
chaö
;

331 
p
->
‰ì_øw_bufs
 = 
NULL
;

333 
˛
 && 
n
 > 0) {

335 
	`ngx_evít_pùe_ªmove_shadow_löks
(
˛
->
buf
);

337 
size
 = 
˛
->
buf
->
íd
 - cl->buf->
œ°
;

339 i‡(
n
 >
size
) {

340 
˛
->
buf
->
œ°
 = cl->buf->
íd
;

342  
˛
->
buf
->
num
 = 
p
->num++;

344 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

345  
NGX_ABORT
;

348 
n
 -
size
;

349 
 
 = 
˛
;

350 
˛
 = cl->
√xt
;

351 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
 
);

354 
˛
->
buf
->
œ°
 +
n
;

355 
n
 = 0;

359 i‡(
˛
) {

360 
 
 = 
˛
;Ün->
√xt
;Ün =Ün->next) { }

362 
 
->
√xt
 = 
p
->
‰ì_øw_bufs
;

363 
p
->
‰ì_øw_bufs
 = 
˛
;

366 i‡(
dñay
 > 0) {

367 
p
->
up°ªam
->
ªad
->
dñayed
 = 1;

368 
	`ngx_add_timî
(
p
->
up°ªam
->
ªad
, 
dñay
);

373 #i‡(
NGX_DEBUG
)

375 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

376 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

380 (
˛
->
buf
->
shadow
 ? 1 : 0),

381 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

382 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

383 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

384 
˛
->
buf
->
fûe_pos
,

385 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

388 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

389 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

393 (
˛
->
buf
->
shadow
 ? 1 : 0),

394 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

395 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

396 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

397 
˛
->
buf
->
fûe_pos
,

398 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

401 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

402 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

406 (
˛
->
buf
->
shadow
 ? 1 : 0),

407 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

408 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

409 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

410 
˛
->
buf
->
fûe_pos
,

411 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

414 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

415 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

419 (
˛
->
buf
->
shadow
 ? 1 : 0),

420 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

421 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

422 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

423 
˛
->
buf
->
fûe_pos
,

424 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

427 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

428 "pùêÀngth: %O", 
p
->
Àngth
);

432 i‡(
p
->
‰ì_øw_bufs
 &&Ö->
Àngth
 != -1) {

433 
˛
 = 
p
->
‰ì_øw_bufs
;

435 i‡(
˛
->
buf
->
œ°
 - cl->buf->
pos
 >
p
->
Àngth
) {

437 
p
->
‰ì_øw_bufs
 = 
˛
->
√xt
;

439  
˛
->
buf
->
num
 = 
p
->num++;

441 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

442  
NGX_ABORT
;

445 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

449 i‡(
p
->
Àngth
 == 0) {

450 
p
->
up°ªam_d⁄e
 = 1;

451 
p
->
ªad
 = 1;

454 i‡((
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
Ë&&Ö->
‰ì_øw_bufs
) {

456  
p
->
‰ì_øw_bufs
->
buf
->
num
 =Ö->num++;

458 i‡(
p
->
	`öput_fûãr
’,Ö->
‰ì_øw_bufs
->
buf
Ë=
NGX_ERROR
) {

459  
NGX_ABORT
;

462 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

464 i‡(
p
->
‰ì_bufs
 &&Ö->
buf_to_fûe
 =
NULL
) {

465 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

466 i‡(
˛
->
buf
->
shadow
 =
NULL
) {

467 
	`ngx_p‰ì
(
p
->
poﬁ
, 
˛
->
buf
->
°¨t
);

473 i‡(
p
->
ˇchóbÀ
 && (p->
ö
 ||Ö->
buf_to_fûe
)) {

475 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

478 i‡(
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
Ë=
NGX_ABORT
) {

479  
NGX_ABORT
;

483  
NGX_OK
;

484 
	}
}

487 
ngx_öt_t


488 
	$ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
)

490 
u_ch¨
 *
¥ev
;

491 
size_t
 
bsize
;

492 
ngx_öt_t
 
rc
;

493 
ngx_uöt_t
 
Êush
, 
Êushed
, 
¥ev_œ°_shadow
;

494 
ngx_chaö_t
 *
out
, **
Œ
, *
˛
;

495 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

497 
down°ªam
 = 
p
->downstream;

499 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

500 "pùêwrôêdown°ªam: %d", 
down°ªam
->
wrôe
->
ªady
);

502 
Êushed
 = 0;

505 i‡(
p
->
down°ªam_îr‹
) {

506  
	`ngx_evít_pùe_døö_chaös
(
p
);

509 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

513 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

514 
˛
->
buf
->
ªcy˛ed
 = 0;

517 i‡(
p
->
out
) {

518 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

521 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

522 
˛
->
buf
->
ªcy˛ed
 = 0;

525 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
out
);

527 i‡(
rc
 =
NGX_ERROR
) {

528 
p
->
down°ªam_îr‹
 = 1;

529  
	`ngx_evít_pùe_døö_chaös
(
p
);

532 
p
->
out
 = 
NULL
;

535 i‡(
p
->
ö
) {

536 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

539 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

540 
˛
->
buf
->
ªcy˛ed
 = 0;

543 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
ö
);

545 i‡(
rc
 =
NGX_ERROR
) {

546 
p
->
down°ªam_îr‹
 = 1;

547  
	`ngx_evít_pùe_døö_chaös
(
p
);

550 
p
->
ö
 = 
NULL
;

553 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

558 
p
->
down°ªam_d⁄e
 = 1;

562 i‡(
down°ªam
->
d©a
 !
p
->
ouçut_˘x


563 || !
down°ªam
->
wrôe
->
ªady


564 || 
down°ªam
->
wrôe
->
dñayed
)

571 
¥ev
 = 
NULL
;

572 
bsize
 = 0;

574 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

576 i‡(
˛
->
buf
->
ªcy˛ed
) {

577 i‡(
¥ev
 =
˛
->
buf
->
°¨t
) {

581 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

582 
¥ev
 = 
˛
->
buf
->
°¨t
;

586 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

587 "pùêwrôêbusy: %uz", 
bsize
);

589 
out
 = 
NULL
;

591 i‡(
bsize
 >(
size_t
Ë
p
->
busy_size
) {

592 
Êush
 = 1;

593 
Êush
;

596 
Êush
 = 0;

597 
Œ
 = 
NULL
;

598 
¥ev_œ°_shadow
 = 1;

601 i‡(
p
->
out
) {

602 
˛
 = 
p
->
out
;

604 i‡(
˛
->
buf
->
ªcy˛ed
) {

605 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
p
->
log
, 0,

609 
p
->
out
 =Ö->out->
√xt
;

611 } i‡(!
p
->
ˇchóbÀ
 &&Ö->
ö
) {

612 
˛
 = 
p
->
ö
;

614 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

616 
˛
->
buf
->
œ°_shadow
,

617 
˛
->
buf
->
pos
,

618 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

620 i‡(
˛
->
buf
->
ªcy˛ed
 && 
¥ev_œ°_shadow
) {

621 i‡(
bsize
 + 
˛
->
buf
->
íd
 - cl->buf->
°¨t
 > 
p
->
busy_size
) {

622 
Êush
 = 1;

626 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

629 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

631 
p
->
ö
 =Ö->ö->
√xt
;

637 
˛
->
√xt
 = 
NULL
;

639 i‡(
out
) {

640 *
Œ
 = 
˛
;

642 
out
 = 
˛
;

644 
Œ
 = &
˛
->
√xt
;

647 
Êush
:

649 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

650 "pùêwrôe: out:%p, f:%d", 
out
, 
Êush
);

652 i‡(
out
 =
NULL
) {

654 i‡(!
Êush
) {

659 i‡(
Êushed
++ > 10) {

660  
NGX_BUSY
;

664 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
, 
out
);

666 
	`ngx_chaö_upd©e_chaös
(
p
->
poﬁ
, &p->
‰ì
, &p->
busy
, &
out
,Ö->
èg
);

668 i‡(
rc
 =
NGX_ERROR
) {

669 
p
->
down°ªam_îr‹
 = 1;

670  
	`ngx_evít_pùe_døö_chaös
(
p
);

673 
˛
 = 
p
->
‰ì
; cl; c»˛->
√xt
) {

675 i‡(
˛
->
buf
->
ãmp_fûe
) {

676 i‡(
p
->
ˇchóbÀ
 || !p->
cy˛ic_ãmp_fûe
) {

682 i‡(
˛
->
buf
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

683 
p
->
ãmp_fûe
->
off£t
 = 0;

691 i‡(
˛
->
buf
->
œ°_shadow
) {

692 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

693  
NGX_ABORT
;

696 
˛
->
buf
->
œ°_shadow
 = 0;

699 
˛
->
buf
->
shadow
 = 
NULL
;

703  
NGX_OK
;

704 
	}
}

707 
ngx_öt_t


708 
	$ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
)

710 
ssize_t
 
size
, 
bsize
, 
n
;

711 
ngx_buf_t
 *
b
;

712 
ngx_uöt_t
 
¥ev_œ°_shadow
;

713 
ngx_chaö_t
 *
˛
, *
é
, *
√xt
, *
out
, **
Œ
, **
œ°_out
, **
œ°_‰ì
, 
Ê
;

715 i‡(
p
->
buf_to_fûe
) {

716 
Ê
.
buf
 = 
p
->
buf_to_fûe
;

717 
Ê
.
√xt
 = 
p
->
ö
;

718 
out
 = &
Ê
;

721 
out
 = 
p
->
ö
;

724 i‡(!
p
->
ˇchóbÀ
) {

726 
size
 = 0;

727 
˛
 = 
out
;

728 
Œ
 = 
NULL
;

729 
¥ev_œ°_shadow
 = 1;

731 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

732 "pùêoff£t: %O", 
p
->
ãmp_fûe
->
off£t
);

735 
bsize
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

737 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

739 
˛
->
buf
->
œ°_shadow
, cl->buf->
°¨t
,

740 
˛
->
buf
->
pos
, 
bsize
);

742 i‡(
¥ev_œ°_shadow


743 && ((
size
 + 
bsize
 > 
p
->
ãmp_fûe_wrôe_size
)

744 || (
p
->
ãmp_fûe
->
off£t
 + 
size
 + 
bsize


745 > 
p
->
max_ãmp_fûe_size
)))

750 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

752 
size
 +
bsize
;

753 
Œ
 = &
˛
->
√xt
;

754 
˛
 = cl->
√xt
;

756 } 
˛
);

758 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "size: %z", 
size
);

760 i‡(
Œ
 =
NULL
) {

761  
NGX_BUSY
;

764 i‡(
˛
) {

765 
p
->
ö
 = 
˛
;

766 *
Œ
 = 
NULL
;

769 
p
->
ö
 = 
NULL
;

770 
p
->
œ°_ö
 = &p->
ö
;

774 
p
->
ö
 = 
NULL
;

775 
p
->
œ°_ö
 = &p->
ö
;

778 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, 
out
);

780 i‡(
n
 =
NGX_ERROR
) {

781  
NGX_ABORT
;

784 i‡(
p
->
buf_to_fûe
) {

785 
p
->
ãmp_fûe
->
off£t
 =Ö->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

786 
n
 -
p
->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

787 
p
->
buf_to_fûe
 = 
NULL
;

788 
out
 = out->
√xt
;

791 i‡(
n
 > 0) {

794 i‡(
p
->
out
) {

795 
˛
 = 
p
->
out
; cl->
√xt
; cl = cl->next) { }

797 
b
 = 
˛
->
buf
;

799 i‡(
b
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

800 
p
->
ãmp_fûe
->
off£t
 +
n
;

801 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

802 
‰ì
;

805 
œ°_out
 = &
˛
->
√xt
;

808 
œ°_out
 = &
p
->
out
;

811 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

812 i‡(
˛
 =
NULL
) {

813  
NGX_ABORT
;

816 
b
 = 
˛
->
buf
;

818 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

820 
b
->
èg
 = 
p
->tag;

822 
b
->
fûe
 = &
p
->
ãmp_fûe
->file;

823 
b
->
fûe_pos
 = 
p
->
ãmp_fûe
->
off£t
;

824 
p
->
ãmp_fûe
->
off£t
 +
n
;

825 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

827 
b
->
ö_fûe
 = 1;

828 
b
->
ãmp_fûe
 = 1;

830 *
œ°_out
 = 
˛
;

833 
‰ì
:

835 
œ°_‰ì
 = &
p
->
‰ì_øw_bufs
;

836 *
œ°_‰ì
 !
NULL
;

837 
œ°_‰ì
 = &(*œ°_‰ì)->
√xt
)

842 
˛
 = 
out
; cl; c»
√xt
) {

843 
√xt
 = 
˛
->next;

845 
˛
->
√xt
 = 
p
->
‰ì
;

846 
p
->
‰ì
 = 
˛
;

848 
b
 = 
˛
->
buf
;

850 i‡(
b
->
œ°_shadow
) {

852 
é
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

853 i‡(
é
 =
NULL
) {

854  
NGX_ABORT
;

857 
é
->
buf
 = 
b
->
shadow
;

858 
é
->
√xt
 = 
NULL
;

860 *
œ°_‰ì
 = 
é
;

861 
œ°_‰ì
 = &
é
->
√xt
;

863 
b
->
shadow
->
pos
 = b->shadow->
°¨t
;

864 
b
->
shadow
->
œ°
 = b->shadow->
°¨t
;

866 
	`ngx_evít_pùe_ªmove_shadow_löks
(
b
->
shadow
);

870  
NGX_OK
;

871 
	}
}

876 
ngx_öt_t


877 
	$ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

879 
ngx_buf_t
 *
b
;

880 
ngx_chaö_t
 *
˛
;

882 i‡(
buf
->
pos
 =buf->
œ°
) {

883  
NGX_OK
;

886 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

887 i‡(
˛
 =
NULL
) {

888  
NGX_ERROR
;

891 
b
 = 
˛
->
buf
;

893 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

894 
b
->
shadow
 = 
buf
;

895 
b
->
èg
 = 
p
->tag;

896 
b
->
œ°_shadow
 = 1;

897 
b
->
ªcy˛ed
 = 1;

898 
buf
->
shadow
 = 
b
;

900 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

902 i‡(
p
->
ö
) {

903 *
p
->
œ°_ö
 = 
˛
;

905 
p
->
ö
 = 
˛
;

907 
p
->
œ°_ö
 = &
˛
->
√xt
;

909 i‡(
p
->
Àngth
 == -1) {

910  
NGX_OK
;

913 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

915  
NGX_OK
;

916 
	}
}

919 
ngx_ölöe
 

920 
	$ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
)

922 
ngx_buf_t
 *
b
, *
√xt
;

924 
b
 = 
buf
->
shadow
;

926 i‡(
b
 =
NULL
) {

930 !
b
->
œ°_shadow
) {

931 
√xt
 = 
b
->
shadow
;

933 
b
->
ãmp‹¨y
 = 0;

934 
b
->
ªcy˛ed
 = 0;

936 
b
->
shadow
 = 
NULL
;

937 
b
 = 
√xt
;

940 
b
->
ãmp‹¨y
 = 0;

941 
b
->
ªcy˛ed
 = 0;

942 
b
->
œ°_shadow
 = 0;

944 
b
->
shadow
 = 
NULL
;

946 
buf
->
shadow
 = 
NULL
;

947 
	}
}

950 
ngx_öt_t


951 
	$ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
)

953 
ngx_chaö_t
 *
˛
;

955 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

956 i‡(
˛
 =
NULL
) {

957  
NGX_ERROR
;

960 i‡(
p
->
buf_to_fûe
 && 
b
->
°¨t
 ==Ö->buf_to_file->start) {

961 
b
->
pos
 = 
p
->
buf_to_fûe
->
œ°
;

962 
b
->
œ°
 = 
p
->
buf_to_fûe
->last;

965 
b
->
pos
 = b->
°¨t
;

966 
b
->
œ°
 = b->
°¨t
;

969 
b
->
shadow
 = 
NULL
;

971 
˛
->
buf
 = 
b
;

973 i‡(
p
->
‰ì_øw_bufs
 =
NULL
) {

974 
p
->
‰ì_øw_bufs
 = 
˛
;

975 
˛
->
√xt
 = 
NULL
;

977  
NGX_OK
;

980 i‡(
p
->
‰ì_øw_bufs
->
buf
->
pos
 =p->‰ì_øw_bufs->buf->
œ°
) {

984 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
;

985 
p
->
‰ì_øw_bufs
 = 
˛
;

987  
NGX_OK
;

992 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
->next;

993 
p
->
‰ì_øw_bufs
->
√xt
 = 
˛
;

995  
NGX_OK
;

996 
	}
}

999 
ngx_öt_t


1000 
	$ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
)

1002 
ngx_chaö_t
 *
˛
, *
é
;

1005 i‡(
p
->
busy
) {

1006 
˛
 = 
p
->
busy
;

1007 
p
->
busy
 = 
NULL
;

1009 } i‡(
p
->
out
) {

1010 
˛
 = 
p
->
out
;

1011 
p
->
out
 = 
NULL
;

1013 } i‡(
p
->
ö
) {

1014 
˛
 = 
p
->
ö
;

1015 
p
->
ö
 = 
NULL
;

1018  
NGX_OK
;

1021 
˛
) {

1022 i‡(
˛
->
buf
->
œ°_shadow
) {

1023 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

1024  
NGX_ABORT
;

1027 
˛
->
buf
->
œ°_shadow
 = 0;

1030 
˛
->
buf
->
shadow
 = 
NULL
;

1031 
é
 = 
˛
->
√xt
;

1032 
˛
->
√xt
 = 
p
->
‰ì
;

1033 
p
->
‰ì
 = 
˛
;

1034 
˛
 = 
é
;

1037 
	}
}

	@src/event/ngx_event_pipe.h

8 #i‚de‡
_NGX_EVENT_PIPE_H_INCLUDED_


9 
	#_NGX_EVENT_PIPE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
ngx_evít_pùe_s
 
	tngx_evít_pùe_t
;

19 
	$ngx_öt_t
 (*
	tngx_evít_pùe_öput_fûãr_±
)(
	tngx_evít_pùe_t
 *
	tp
,

20 
	tngx_buf_t
 *
	tbuf
);

21 
	$ngx_öt_t
 (*
	tngx_evít_pùe_ouçut_fûãr_±
)(*
	td©a
,

22 
	tngx_chaö_t
 *
	tchaö
);

25 
	sngx_evít_pùe_s
 {

26 
ngx_c⁄√˘i⁄_t
 *
up°ªam
;

27 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

29 
ngx_chaö_t
 *
‰ì_øw_bufs
;

30 
ngx_chaö_t
 *
ö
;

31 
ngx_chaö_t
 **
œ°_ö
;

33 
ngx_chaö_t
 *
out
;

34 
ngx_chaö_t
 *
‰ì
;

35 
ngx_chaö_t
 *
busy
;

42 
ngx_evít_pùe_öput_fûãr_±
 
öput_fûãr
;

43 *
öput_˘x
;

45 
ngx_evít_pùe_ouçut_fûãr_±
 
ouçut_fûãr
;

46 *
ouçut_˘x
;

48 
ªad
:1;

49 
ˇchóbÀ
:1;

50 
sögÀ_buf
:1;

51 
‰ì_bufs
:1;

52 
up°ªam_d⁄e
:1;

53 
up°ªam_îr‹
:1;

54 
up°ªam_eof
:1;

55 
up°ªam_blocked
:1;

56 
down°ªam_d⁄e
:1;

57 
down°ªam_îr‹
:1;

58 
cy˛ic_ãmp_fûe
:1;

60 
ngx_öt_t
 
Æloˇãd
;

61 
ngx_bufs_t
 
bufs
;

62 
ngx_buf_èg_t
 
èg
;

64 
ssize_t
 
busy_size
;

66 
off_t
 
ªad_Àngth
;

67 
off_t
 
Àngth
;

69 
off_t
 
max_ãmp_fûe_size
;

70 
ssize_t
 
ãmp_fûe_wrôe_size
;

72 
ngx_m£c_t
 
ªad_timeout
;

73 
ngx_m£c_t
 
£nd_timeout
;

74 
ssize_t
 
£nd_low©
;

76 
ngx_poﬁ_t
 *
poﬁ
;

77 
ngx_log_t
 *
log
;

79 
ngx_chaö_t
 *
¥îód_bufs
;

80 
size_t
 
¥îód_size
;

81 
ngx_buf_t
 *
buf_to_fûe
;

83 
size_t
 
limô_øã
;

84 
time_t
 
°¨t_£c
;

86 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

88  
num
;

92 
ngx_öt_t
 
	`ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
,Çgx_öt_à
do_wrôe
);

93 
ngx_öt_t
 
	`ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
);

94 
ngx_öt_t
 
	`ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
);

	@src/event/ngx_event_posted.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_queue_t
 
	gngx_po°ed_ac˚±_evíts
;

14 
ngx_queue_t
 
	gngx_po°ed_evíts
;

18 
	$ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_queue_t
 *
po°ed
)

20 
ngx_queue_t
 *
q
;

21 
ngx_evít_t
 *
ev
;

23 !
	`ngx_queue_em±y
(
po°ed
)) {

25 
q
 = 
	`ngx_queue_hód
(
po°ed
);

26 
ev
 = 
	`ngx_queue_d©a
(
q
, 
ngx_evít_t
, 
queue
);

28 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

29 "po°edÉvíà%p", 
ev
);

31 
	`ngx_dñëe_po°ed_evít
(
ev
);

33 
ev
->
	`h™dÀr
(ev);

35 
	}
}

	@src/event/ngx_event_posted.h

8 #i‚de‡
_NGX_EVENT_POSTED_H_INCLUDED_


9 
	#_NGX_EVENT_POSTED_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#ngx_po°_evít
(
ev
, 
q
) \

19 i‡(!(
ev
)->
po°ed
) { \

20 (
ev
)->
po°ed
 = 1; \

21 
	`ngx_queue_ö£π_èû
(
q
, &(
ev
)->
queue
); \

23 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, (
ev
)->
log
, 0, "postÉvent %p",Év);\

26 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, (
ev
)->
log
, 0, \

27 "upd©êpo°edÉvíà%p", 
ev
); \

28 }

	)

31 
	#ngx_dñëe_po°ed_evít
(
ev
) \

33 (
ev
)->
po°ed
 = 0; \

34 
	`ngx_queue_ªmove
(&(
ev
)->
queue
); \

36 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, (
ev
)->
log
, 0, \

37 "dñëêpo°edÉvíà%p", 
ev
);

	)

41 
ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_queue_t
 *
po°ed
);

44 
ngx_queue_t
 
ngx_po°ed_ac˚±_evíts
;

45 
ngx_queue_t
 
ngx_po°ed_evíts
;

	@src/event/ngx_event_timer.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_rbåì_t
 
	gngx_evít_timî_rbåì
;

14 
ngx_rbåì_node_t
 
	gngx_evít_timî_£¡öñ
;

22 
ngx_öt_t


23 
	$ngx_evít_timî_öô
(
ngx_log_t
 *
log
)

25 
	`ngx_rbåì_öô
(&
ngx_evít_timî_rbåì
, &
ngx_evít_timî_£¡öñ
,

26 
ngx_rbåì_ö£π_timî_vÆue
);

28  
NGX_OK
;

29 
	}
}

32 
ngx_m£c_t


33 
	$ngx_evít_föd_timî
()

35 
ngx_m£c_öt_t
 
timî
;

36 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

38 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =&
ngx_evít_timî_£¡öñ
) {

39  
NGX_TIMER_INFINITE
;

42 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

43 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

45 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

47 
timî
 = (
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
);

49  (
ngx_m£c_t
Ë(
timî
 > 0 ?Åimer : 0);

50 
	}
}

54 
	$ngx_evít_expúe_timîs
()

56 
ngx_evít_t
 *
ev
;

57 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

59 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

62 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

64 i‡(
roŸ
 =
£¡öñ
) {

68 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

72 i‡((
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
) > 0) {

76 
ev
 = (
ngx_evít_t
 *Ë((*Ë
node
 - 
	`off£tof
“gx_evít_t, 
timî
));

78 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

80 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

82 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

84 #i‡(
NGX_DEBUG
)

85 
ev
->
timî
.
À·
 = 
NULL
;

86 
ev
->
timî
.
right
 = 
NULL
;

87 
ev
->
timî
.
∑ª¡
 = 
NULL
;

90 
ev
->
timî_£t
 = 0;

92 
ev
->
timedout
 = 1;

94 
ev
->
	`h™dÀr
(ev);

96 
	}
}

100 
	$ngx_evít_ˇn˚l_timîs
()

102 
ngx_evít_t
 *
ev
;

103 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

105 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

108 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

110 i‡(
roŸ
 =
£¡öñ
) {

114 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

116 
ev
 = (
ngx_evít_t
 *Ë((*Ë
node
 - 
	`off£tof
“gx_evít_t, 
timî
));

118 i‡(!
ev
->
ˇn˚œbÀ
) {

122 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

124 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

126 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

128 #i‡(
NGX_DEBUG
)

129 
ev
->
timî
.
À·
 = 
NULL
;

130 
ev
->
timî
.
right
 = 
NULL
;

131 
ev
->
timî
.
∑ª¡
 = 
NULL
;

134 
ev
->
timî_£t
 = 0;

136 
ev
->
	`h™dÀr
(ev);

138 
	}
}

	@src/event/ngx_event_timer.h

8 #i‚de‡
_NGX_EVENT_TIMER_H_INCLUDED_


9 
	#_NGX_EVENT_TIMER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_TIMER_INFINITE
 (
ngx_m£c_t
Ë-1

	)

19 
	#NGX_TIMER_LAZY_DELAY
 300

	)

22 
ngx_öt_t
 
ngx_evít_timî_öô
(
ngx_log_t
 *
log
);

23 
ngx_m£c_t
 
ngx_evít_föd_timî
();

24 
ngx_evít_expúe_timîs
();

25 
ngx_evít_ˇn˚l_timîs
();

28 
ngx_rbåì_t
 
ngx_evít_timî_rbåì
;

31 
ngx_ölöe
 

32 
	$ngx_evít_dñ_timî
(
ngx_evít_t
 *
ev
)

34 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

36 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

38 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

40 #i‡(
NGX_DEBUG
)

41 
ev
->
timî
.
À·
 = 
NULL
;

42 
ev
->
timî
.
right
 = 
NULL
;

43 
ev
->
timî
.
∑ª¡
 = 
NULL
;

46 
ev
->
timî_£t
 = 0;

47 
	}
}

50 
ngx_ölöe
 

51 
	$ngx_evít_add_timî
(
ngx_evít_t
 *
ev
, 
ngx_m£c_t
 
timî
)

53 
ngx_m£c_t
 
key
;

54 
ngx_m£c_öt_t
 
diff
;

56 
key
 = 
ngx_cuºít_m£c
 + 
timî
;

58 i‡(
ev
->
timî_£t
) {

66 
diff
 = (
ngx_m£c_öt_t
Ë(
key
 - 
ev
->
timî
.key);

68 i‡(
	`ngx_abs
(
diff
Ë< 
NGX_TIMER_LAZY_DELAY
) {

69 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

71 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
, key);

75 
	`ngx_dñ_timî
(
ev
);

78 
ev
->
timî
.
key
 = key;

80 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

82 
	`ngx_evít_idít
(
ev
->
d©a
), 
timî
,Év->timî.
key
);

84 
	`ngx_rbåì_ö£π
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

86 
ev
->
timî_£t
 = 1;

87 
	}
}

	@src/http/modules/ngx_http_access_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ö_addr_t
 
	mmask
;

15 
ö_addr_t
 
	maddr
;

16 
ngx_uöt_t
 
	mdíy
;

17 } 
	tngx_hâp_ac˚ss_ruÀ_t
;

19 #i‡(
NGX_HAVE_INET6
)

22 
ö6_addr
 
	maddr
;

23 
ö6_addr
 
	mmask
;

24 
ngx_uöt_t
 
	mdíy
;

25 } 
	tngx_hâp_ac˚ss_ruÀ6_t
;

29 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

32 
ngx_uöt_t
 
	mdíy
;

33 } 
	tngx_hâp_ac˚ss_ruÀ_un_t
;

38 
ngx_¨øy_t
 *
	mruÀs
;

39 #i‡(
NGX_HAVE_INET6
)

40 
ngx_¨øy_t
 *
	mruÀs6
;

42 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

43 
ngx_¨øy_t
 *
	mruÀs_un
;

45 } 
	tngx_hâp_ac˚ss_loc_c⁄f_t
;

48 
ngx_öt_t
 
ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
ö_addr_t
 
addr
);

51 #i‡(
NGX_HAVE_INET6
)

52 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
u_ch¨
 *
p
);

55 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

56 
ngx_öt_t
 
ngx_hâp_ac˚ss_unix
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
);

59 
ngx_öt_t
 
ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
);

60 *
ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

61 *
c⁄f
);

62 *
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

63 *
ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

64 *
∑ª¡
, *
chûd
);

65 
ngx_öt_t
 
ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
);

68 
ngx_comm™d_t
 
	gngx_hâp_ac˚ss_comm™ds
[] = {

70 { 
ngx_°rög
("allow"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


72 |
NGX_CONF_TAKE1
,

73 
ngx_hâp_ac˚ss_ruÀ
,

74 
NGX_HTTP_LOC_CONF_OFFSET
,

76 
NULL
 },

78 { 
ngx_°rög
("deny"),

79 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


80 |
NGX_CONF_TAKE1
,

81 
ngx_hâp_ac˚ss_ruÀ
,

82 
NGX_HTTP_LOC_CONF_OFFSET
,

84 
NULL
 },

86 
ngx_nuŒ_comm™d


91 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ_˘x
 = {

92 
NULL
,

93 
ngx_hâp_ac˚ss_öô
,

95 
NULL
,

96 
NULL
,

98 
NULL
,

99 
NULL
,

101 
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
,

102 
ngx_hâp_ac˚ss_mîge_loc_c⁄f


106 
ngx_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ
 = {

107 
NGX_MODULE_V1
,

108 &
ngx_hâp_ac˚ss_moduÀ_˘x
,

109 
ngx_hâp_ac˚ss_comm™ds
,

110 
NGX_HTTP_MODULE
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NGX_MODULE_V1_PADDING


122 
ngx_öt_t


123 
	$ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

125 
sockaddr_ö
 *
sö
;

126 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
;

127 #i‡(
NGX_HAVE_INET6
)

128 
u_ch¨
 *
p
;

129 
ö_addr_t
 
addr
;

130 
sockaddr_ö6
 *
sö6
;

133 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ac˚ss_moduÀ
);

135 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

137 
AF_INET
:

138 i‡(
Æcf
->
ruÀs
) {

139 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

140  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
sö
->
sö_addr
.
s_addr
);

144 #i‡(
NGX_HAVE_INET6
)

146 
AF_INET6
:

147 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

148 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

150 i‡(
Æcf
->
ruÀs
 && 
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

151 
addr
 = 
p
[12] << 24;

152 
addr
 +
p
[13] << 16;

153 
addr
 +
p
[14] << 8;

154 
addr
 +
p
[15];

155  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
	`ht⁄l
(
addr
));

158 i‡(
Æcf
->
ruÀs6
) {

159  
	`ngx_hâp_ac˚ss_öë6
(
r
, 
Æcf
, 
p
);

166 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

168 
AF_UNIX
:

169 i‡(
Æcf
->
ruÀs_un
) {

170  
	`ngx_hâp_ac˚ss_unix
(
r
, 
Æcf
);

178  
NGX_DECLINED
;

179 
	}
}

182 
ngx_öt_t


183 
	$ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

184 
ö_addr_t
 
addr
)

186 
ngx_uöt_t
 
i
;

187 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

189 
ruÀ
 = 
Æcf
->
ruÀs
->
ñts
;

190 
i
 = 0; i < 
Æcf
->
ruÀs
->
√…s
; i++) {

192 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

194 
addr
, 
ruÀ
[
i
].
mask
,Ñule[i].addr);

196 i‡((
addr
 & 
ruÀ
[
i
].
mask
) ==Ñule[i].addr) {

197  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ
[
i
].
díy
);

201  
NGX_DECLINED
;

202 
	}
}

205 #i‡(
NGX_HAVE_INET6
)

207 
ngx_öt_t


208 
	$ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

209 
u_ch¨
 *
p
)

211 
ngx_uöt_t
 
n
;

212 
ngx_uöt_t
 
i
;

213 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

215 
ruÀ6
 = 
Æcf
->
ruÀs6
->
ñts
;

216 
i
 = 0; i < 
Æcf
->
ruÀs6
->
√…s
; i++) {

218 #i‡(
NGX_DEBUG
)

220 
size_t
 
˛
, 
ml
, 
Æ
;

221 
u_ch¨
 
˘
[
NGX_INET6_ADDRSTRLEN
];

222 
u_ch¨
 
mt
[
NGX_INET6_ADDRSTRLEN
];

223 
u_ch¨
 
©
[
NGX_INET6_ADDRSTRLEN
];

225 
˛
 = 
	`ngx_öë6_¡›
(
p
, 
˘
, 
NGX_INET6_ADDRSTRLEN
);

226 
ml
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
mask
.
s6_addr
, 
mt
, 
NGX_INET6_ADDRSTRLEN
);

227 
Æ
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
addr
.
s6_addr
, 
©
, 
NGX_INET6_ADDRSTRLEN
);

229 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

230 "ac˚ss: %*†%*†%*s", 
˛
, 
˘
, 
ml
, 
mt
, 
Æ
, 
©
);

234 
n
 = 0;Ç < 16;Ç++) {

235 i‡((
p
[
n
] & 
ruÀ6
[
i
].
mask
.
s6_addr
[n]Ë!ruÀ6[i].
addr
.s6_addr[n]) {

236 
√xt
;

240  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ6
[
i
].
díy
);

242 
√xt
:

246  
NGX_DECLINED
;

247 
	}
}

252 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

254 
ngx_öt_t


255 
	$ngx_hâp_ac˚ss_unix
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
)

257 
ngx_uöt_t
 
i
;

258 
ngx_hâp_ac˚ss_ruÀ_un_t
 *
ruÀ_un
;

260 
ruÀ_un
 = 
Æcf
->
ruÀs_un
->
ñts
;

261 
i
 = 0; i < 
Æcf
->
ruÀs_un
->
√…s
; i++) {

265  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ_un
[
i
].
díy
);

269  
NGX_DECLINED
;

270 
	}
}

275 
ngx_öt_t


276 
	$ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
)

278 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

280 i‡(
díy
) {

281 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

283 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

284 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

288  
NGX_HTTP_FORBIDDEN
;

291  
NGX_OK
;

292 
	}
}

296 
	$ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

298 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

300 
ngx_öt_t
 
rc
;

301 
ngx_uöt_t
 
Æl
;

302 
ngx_°r_t
 *
vÆue
;

303 
ngx_cidr_t
 
cidr
;

304 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

305 #i‡(
NGX_HAVE_INET6
)

306 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

308 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

309 
ngx_hâp_ac˚ss_ruÀ_un_t
 *
ruÀ_un
;

312 
	`ngx_memzîo
(&
cidr
, (
ngx_cidr_t
));

314 
vÆue
 = 
cf
->
¨gs
->
ñts
;

316 
Æl
 = (
vÆue
[1].
Àn
 =3 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "all") == 0);

318 i‡(!
Æl
) {

320 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

322 i‡(
vÆue
[1].
Àn
 =5 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "unix:") == 0) {

323 
cidr
.
Ámûy
 = 
AF_UNIX
;

324 
rc
 = 
NGX_OK
;

327 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

331 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

334 i‡(
rc
 =
NGX_ERROR
) {

335 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

336 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

337  
NGX_CONF_ERROR
;

340 i‡(
rc
 =
NGX_DONE
) {

341 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

342 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

346 i‡(
cidr
.
Ámûy
 =
AF_INET
 || 
Æl
) {

348 i‡(
Æcf
->
ruÀs
 =
NULL
) {

349 
Æcf
->
ruÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

350 (
ngx_hâp_ac˚ss_ruÀ_t
));

351 i‡(
Æcf
->
ruÀs
 =
NULL
) {

352  
NGX_CONF_ERROR
;

356 
ruÀ
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs
);

357 i‡(
ruÀ
 =
NULL
) {

358  
NGX_CONF_ERROR
;

361 
ruÀ
->
mask
 = 
cidr
.
u
.
ö
.mask;

362 
ruÀ
->
addr
 = 
cidr
.
u
.
ö
.addr;

363 
ruÀ
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

366 #i‡(
NGX_HAVE_INET6
)

367 i‡(
cidr
.
Ámûy
 =
AF_INET6
 || 
Æl
) {

369 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

370 
Æcf
->
ruÀs6
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

371 (
ngx_hâp_ac˚ss_ruÀ6_t
));

372 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

373  
NGX_CONF_ERROR
;

377 
ruÀ6
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs6
);

378 i‡(
ruÀ6
 =
NULL
) {

379  
NGX_CONF_ERROR
;

382 
ruÀ6
->
mask
 = 
cidr
.
u
.
ö6
.mask;

383 
ruÀ6
->
addr
 = 
cidr
.
u
.
ö6
.addr;

384 
ruÀ6
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

388 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

389 i‡(
cidr
.
Ámûy
 =
AF_UNIX
 || 
Æl
) {

391 i‡(
Æcf
->
ruÀs_un
 =
NULL
) {

392 
Æcf
->
ruÀs_un
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

393 (
ngx_hâp_ac˚ss_ruÀ_un_t
));

394 i‡(
Æcf
->
ruÀs_un
 =
NULL
) {

395  
NGX_CONF_ERROR
;

399 
ruÀ_un
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs_un
);

400 i‡(
ruÀ_un
 =
NULL
) {

401  
NGX_CONF_ERROR
;

404 
ruÀ_un
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

408  
NGX_CONF_OK
;

409 
	}
}

413 
	$ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

415 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
;

417 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ac˚ss_loc_c⁄f_t
));

418 i‡(
c⁄f
 =
NULL
) {

419  
NULL
;

422  
c⁄f
;

423 
	}
}

427 
	$ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

429 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

430 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

432 i‡(
c⁄f
->
ruÀs
 =
NULL


433 #i‡(
NGX_HAVE_INET6
)

434 && 
c⁄f
->
ruÀs6
 =
NULL


436 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

437 && 
c⁄f
->
ruÀs_un
 =
NULL


440 
c⁄f
->
ruÀs
 = 
¥ev
->rules;

441 #i‡(
NGX_HAVE_INET6
)

442 
c⁄f
->
ruÀs6
 = 
¥ev
->rules6;

444 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

445 
c⁄f
->
ruÀs_un
 = 
¥ev
->rules_un;

449  
NGX_CONF_OK
;

450 
	}
}

453 
ngx_öt_t


454 
	$ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
)

456 
ngx_hâp_h™dÀr_±
 *
h
;

457 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

459 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

461 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

462 i‡(
h
 =
NULL
) {

463  
NGX_ERROR
;

466 *
h
 = 
ngx_hâp_ac˚ss_h™dÀr
;

468  
NGX_OK
;

469 
	}
}

	@src/http/modules/ngx_http_addition_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mbef‹e_body
;

15 
ngx_°r_t
 
	ma·î_body
;

17 
ngx_hash_t
 
	mty≥s
;

18 
ngx_¨øy_t
 *
	mty≥s_keys
;

19 } 
	tngx_hâp_addôi⁄_c⁄f_t
;

23 
ngx_uöt_t
 
	mbef‹e_body_£¡
;

24 } 
	tngx_hâp_addôi⁄_˘x_t
;

27 *
ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

29 *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_addôi⁄_comm™ds
[] = {

35 { 
ngx_°rög
("add_before_body"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

37 
ngx_c⁄f_£t_°r_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
bef‹e_body
),

40 
NULL
 },

42 { 
ngx_°rög
("add_after_body"),

43 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

44 
ngx_c⁄f_£t_°r_¶Ÿ
,

45 
NGX_HTTP_LOC_CONF_OFFSET
,

46 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
a·î_body
),

47 
NULL
 },

49 { 
ngx_°rög
("addition_types"),

50 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

51 
ngx_hâp_ty≥s_¶Ÿ
,

52 
NGX_HTTP_LOC_CONF_OFFSET
,

53 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
ty≥s_keys
),

54 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

56 
ngx_nuŒ_comm™d


60 
ngx_hâp_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ_˘x
 = {

61 
NULL
,

62 
ngx_hâp_addôi⁄_fûãr_öô
,

64 
NULL
,

65 
NULL
,

67 
NULL
,

68 
NULL
,

70 
ngx_hâp_addôi⁄_¸óã_c⁄f
,

71 
ngx_hâp_addôi⁄_mîge_c⁄f


75 
ngx_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ
 = {

76 
NGX_MODULE_V1
,

77 &
ngx_hâp_addôi⁄_fûãr_moduÀ_˘x
,

78 
ngx_hâp_addôi⁄_comm™ds
,

79 
NGX_HTTP_MODULE
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NGX_MODULE_V1_PADDING


91 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

92 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

95 
ngx_öt_t


96 
	$ngx_hâp_addôi⁄_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

98 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

99 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

101 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK
 ||Ñ !r->
maö
) {

102  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

105 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

107 i‡(
c⁄f
->
bef‹e_body
.
Àn
 =0 && c⁄f->
a·î_body
.len == 0) {

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

111 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
) {

112  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

115 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_addôi⁄_˘x_t
));

116 i‡(
˘x
 =
NULL
) {

117  
NGX_ERROR
;

120 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

122 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

123 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

124 
	`ngx_hâp_wók_ëag
(
r
);

126  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

127 
	}
}

130 
ngx_öt_t


131 
	$ngx_hâp_addôi⁄_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

133 
ngx_öt_t
 
rc
;

134 
ngx_uöt_t
 
œ°
;

135 
ngx_chaö_t
 *
˛
;

136 
ngx_hâp_ªque°_t
 *
§
;

137 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

138 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

140 i‡(
ö
 =
NULL
 || 
r
->
hódî_⁄ly
) {

141  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

144 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

146 i‡(
˘x
 =
NULL
) {

147  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

150 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

152 i‡(!
˘x
->
bef‹e_body_£¡
) {

153 
˘x
->
bef‹e_body_£¡
 = 1;

155 i‡(
c⁄f
->
bef‹e_body
.
Àn
) {

156 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
bef‹e_body
, 
NULL
, &
§
, NULL, 0)

157 !
NGX_OK
)

159  
NGX_ERROR
;

164 i‡(
c⁄f
->
a·î_body
.
Àn
 == 0) {

165 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

166  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

169 
œ°
 = 0;

171 
˛
 = 
ö
; cl; c»˛->
√xt
) {

172 i‡(
˛
->
buf
->
œ°_buf
) {

173 
˛
->
buf
->
œ°_buf
 = 0;

174 
˛
->
buf
->
sync
 = 1;

175 
œ°
 = 1;

179 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

181 i‡(
rc
 =
NGX_ERROR
 || !
œ°
 || 
c⁄f
->
a·î_body
.
Àn
 == 0) {

182  
rc
;

185 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
a·î_body
, 
NULL
, &
§
, NULL, 0)

186 !
NGX_OK
)

188  
NGX_ERROR
;

191 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

193  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

194 
	}
}

197 
ngx_öt_t


198 
	$ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

200 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

201 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_addôi⁄_hódî_fûãr
;

203 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

204 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_addôi⁄_body_fûãr
;

206  
NGX_OK
;

207 
	}
}

211 
	$ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

213 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

215 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_addôi⁄_c⁄f_t
));

216 i‡(
c⁄f
 =
NULL
) {

217  
NULL
;

229  
c⁄f
;

230 
	}
}

234 
	$ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

236 
ngx_hâp_addôi⁄_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

237 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
 = 
chûd
;

239 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
bef‹e_body
, 
¥ev
->before_body, "");

240 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
a·î_body
, 
¥ev
->after_body, "");

242 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

243 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

244 
ngx_hâp_html_deÁu…_ty≥s
)

245 !
NGX_OK
)

247  
NGX_CONF_ERROR
;

250  
NGX_CONF_OK
;

251 
	}
}

	@src/http/modules/ngx_http_auth_basic_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_¸y±.h
>

14 
	#NGX_HTTP_AUTH_BUF_SIZE
 2048

	)

18 
ngx_°r_t
 
	m∑sswd
;

19 } 
	tngx_hâp_auth_basic_˘x_t
;

23 
ngx_hâp_com∂ex_vÆue_t
 *
	mªÆm
;

24 
ngx_hâp_com∂ex_vÆue_t
 
	mu£r_fûe
;

25 } 
	tngx_hâp_auth_basic_loc_c⁄f_t
;

28 
ngx_öt_t
 
ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
);

31 
ngx_öt_t
 
ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_°r_t
 *
ªÆm
);

33 
ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
);

34 *
ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

36 *
∑ª¡
, *
chûd
);

37 
ngx_öt_t
 
ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
);

38 *
ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_auth_basic_comm™ds
[] = {

44 { 
ngx_°rög
("auth_basic"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


46 |
NGX_CONF_TAKE1
,

47 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

48 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
ªÆm
),

50 
NULL
 },

52 { 
ngx_°rög
("auth_basic_user_file"),

53 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


54 |
NGX_CONF_TAKE1
,

55 
ngx_hâp_auth_basic_u£r_fûe
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
u£r_fûe
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ_˘x
 = {

65 
NULL
,

66 
ngx_hâp_auth_basic_öô
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_auth_basic_¸óã_loc_c⁄f
,

75 
ngx_hâp_auth_basic_mîge_loc_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_auth_basic_moduÀ_˘x
,

82 
ngx_hâp_auth_basic_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_öt_t


96 
	$ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

98 
off_t
 
off£t
;

99 
ssize_t
 
n
;

100 
ngx_fd_t
 
fd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_îr_t
 
îr
;

103 
ngx_°r_t
 
pwd
, 
ªÆm
, 
u£r_fûe
;

104 
ngx_uöt_t
 
i
, 
Àvñ
, 
logö
, 
À·
, 
∑sswd
;

105 
ngx_fûe_t
 
fûe
;

106 
ngx_hâp_auth_basic_˘x_t
 *
˘x
;

107 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
;

108 
u_ch¨
 
buf
[
NGX_HTTP_AUTH_BUF_SIZE
];

110 
sw_logö
,

111 
sw_∑sswd
,

112 
sw_skù


113 } 
°©e
;

115 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

117 i‡(
Æcf
->
ªÆm
 =
NULL
 ||álcf->
u£r_fûe
.
vÆue
.
d©a
 == NULL) {

118  
NGX_DECLINED
;

121 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
Æcf
->
ªÆm
, &ªÆmË!
NGX_OK
) {

122  
NGX_ERROR
;

125 i‡(
ªÆm
.
Àn
 =3 && 
	`ngx_°∫cmp
‘ólm.
d©a
, "off", 3) == 0) {

126  
NGX_DECLINED
;

129 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

131 i‡(
˘x
) {

132  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
˘x
, &˘x->
∑sswd
,

133 &
ªÆm
);

136 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

138 i‡(
rc
 =
NGX_DECLINED
) {

140 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

146 i‡(
rc
 =
NGX_ERROR
) {

147  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Æcf
->
u£r_fûe
, &u£r_fûeË!
NGX_OK
) {

151  
NGX_ERROR
;

154 
fd
 = 
	`ngx_›í_fûe
(
u£r_fûe
.
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

156 i‡(
fd
 =
NGX_INVALID_FILE
) {

157 
îr
 = 
ngx_î∫o
;

159 i‡(
îr
 =
NGX_ENOENT
) {

160 
Àvñ
 = 
NGX_LOG_ERR
;

161 
rc
 = 
NGX_HTTP_FORBIDDEN
;

164 
Àvñ
 = 
NGX_LOG_CRIT
;

165 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

168 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

169 
ngx_›í_fûe_n
 " \"%s\" faûed", 
u£r_fûe
.
d©a
);

171  
rc
;

174 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

176 
fûe
.
fd
 = fd;

177 
fûe
.
«me
 = 
u£r_fûe
;

178 
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

180 
°©e
 = 
sw_logö
;

181 
∑sswd
 = 0;

182 
logö
 = 0;

183 
À·
 = 0;

184 
off£t
 = 0;

187 
i
 = 
À·
;

189 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
 + 
À·
, 
NGX_HTTP_AUTH_BUF_SIZE
 -Üeft,

190 
off£t
);

192 i‡(
n
 =
NGX_ERROR
) {

193 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

194  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

197 i‡(
n
 == 0) {

201 
i
 = 
À·
; i <Üe· + 
n
; i++) {

202 
°©e
) {

204 
sw_logö
:

205 i‡(
logö
 == 0) {

207 i‡(
buf
[
i
] ='#' || buf[i] =
CR
) {

208 
°©e
 = 
sw_skù
;

212 i‡(
buf
[
i
] =
LF
) {

217 i‡(
buf
[
i
] !
r
->
hódîs_ö
.
u£r
.
d©a
[
logö
]) {

218 
°©e
 = 
sw_skù
;

222 i‡(
logö
 =
r
->
hódîs_ö
.
u£r
.
Àn
) {

223 
°©e
 = 
sw_∑sswd
;

224 
∑sswd
 = 
i
 + 1;

227 
logö
++;

231 
sw_∑sswd
:

232 i‡(
buf
[
i
] =
LF
 || buf[i] =
CR
 || buf[i] == ':') {

233 
buf
[
i
] = '\0';

235 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

237 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

238 
pwd
.
d©a
 = &
buf
[
∑sswd
];

240  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
,

241 &
ªÆm
);

246 
sw_skù
:

247 i‡(
buf
[
i
] =
LF
) {

248 
°©e
 = 
sw_logö
;

249 
logö
 = 0;

256 i‡(
°©e
 =
sw_∑sswd
) {

257 
À·
 =Üe· + 
n
 - 
∑sswd
;

258 
	`ngx_memmove
(
buf
, &buf[
∑sswd
], 
À·
);

259 
∑sswd
 = 0;

262 
À·
 = 0;

265 
off£t
 +
n
;

268 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

270 i‡(
°©e
 =
sw_∑sswd
) {

271 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

272 
pwd
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Öwd.
Àn
 + 1);

273 i‡(
pwd
.
d©a
 =
NULL
) {

274  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

277 
	`ngx_˝y°∫
(
pwd
.
d©a
, &
buf
[
∑sswd
],Öwd.
Àn
 + 1);

279  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
, &
ªÆm
);

282 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

284 &
r
->
hódîs_ö
.
u£r
, &
u£r_fûe
);

286  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

287 
	}
}

290 
ngx_öt_t


291 
	$ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

292 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
)

294 
ngx_öt_t
 
rc
;

295 
u_ch¨
 *
í¸y±ed
;

297 
rc
 = 
	`ngx_¸y±
(
r
->
poﬁ
,Ñ->
hódîs_ö
.
∑sswd
.
d©a
,Öasswd->data,

298 &
í¸y±ed
);

300 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

302 
rc
, &
r
->
hódîs_ö
.
u£r
, 
∑sswd
->
d©a
);

304 i‡(
rc
 =
NGX_OK
) {

305 i‡(
	`ngx_°rcmp
(
í¸y±ed
, 
∑sswd
->
d©a
) == 0) {

306  
NGX_OK
;

309 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

310 "í¸y±ed: \"%s\"", 
í¸y±ed
);

312 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

314 &
r
->
hódîs_ö
.
u£r
);

316  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, 
ªÆm
);

319 i‡(
rc
 =
NGX_ERROR
) {

320  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

325 i‡(
˘x
 =
NULL
) {

326 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_auth_basic_˘x_t
));

327 i‡(
˘x
 =
NULL
) {

328  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

331 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_auth_basic_moduÀ
);

333 
˘x
->
∑sswd
.
Àn
 =Öasswd->len;

334 
∑sswd
->
Àn
++;

336 
˘x
->
∑sswd
.
d©a
 = 
	`ngx_p°rdup
(
r
->
poﬁ
,Öasswd);

337 i‡(
˘x
->
∑sswd
.
d©a
 =
NULL
) {

338  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

345  
rc
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ªÆm
)

352 
size_t
 
Àn
;

353 
u_ch¨
 *
basic
, *
p
;

355 
r
->
hódîs_out
.
www_authítiˇã
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

356 i‡(
r
->
hódîs_out
.
www_authítiˇã
 =
NULL
) {

357  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

360 
Àn
 = ("Basi¯ªÆm=\"\""Ë- 1 + 
ªÆm
->len;

362 
basic
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

363 i‡(
basic
 =
NULL
) {

364  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

367 
p
 = 
	`ngx_˝ymem
(
basic
, "BasicÑealm=\"", ("BasicÑealm=\"") - 1);

368 
p
 = 
	`ngx_˝ymem
’, 
ªÆm
->
d©a
,Ñólm->
Àn
);

369 *
p
 = '"';

371 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 1;

372 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
www_authítiˇã
->
key
, "WWW-Authenticate");

373 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
d©a
 = 
basic
;

374 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
Àn
 =Üen;

376  
NGX_HTTP_UNAUTHORIZED
;

377 
	}
}

380 
	$ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
)

382 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

383 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
ngx_î∫o
,

384 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
.
d©a
);

386 
	}
}

390 
	$ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

392 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
;

394 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_auth_basic_loc_c⁄f_t
));

395 i‡(
c⁄f
 =
NULL
) {

396  
NULL
;

399  
c⁄f
;

400 
	}
}

404 
	$ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

406 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

407 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

409 i‡(
c⁄f
->
ªÆm
 =
NULL
) {

410 
c⁄f
->
ªÆm
 = 
¥ev
->realm;

413 i‡(
c⁄f
->
u£r_fûe
.
vÆue
.
d©a
 =
NULL
) {

414 
c⁄f
->
u£r_fûe
 = 
¥ev
->user_file;

417  
NGX_CONF_OK
;

418 
	}
}

421 
ngx_öt_t


422 
	$ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
)

424 
ngx_hâp_h™dÀr_±
 *
h
;

425 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

427 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

429 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

430 i‡(
h
 =
NULL
) {

431  
NGX_ERROR
;

434 *
h
 = 
ngx_hâp_auth_basic_h™dÀr
;

436  
NGX_OK
;

437 
	}
}

441 
	$ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

443 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

445 
ngx_°r_t
 *
vÆue
;

446 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

448 i‡(
Æcf
->
u£r_fûe
.
vÆue
.
d©a
) {

452 
vÆue
 = 
cf
->
¨gs
->
ñts
;

454 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

456 
ccv
.
cf
 = cf;

457 
ccv
.
vÆue
 = &value[1];

458 
ccv
.
com∂ex_vÆue
 = &
Æcf
->
u£r_fûe
;

459 
ccv
.
zîo
 = 1;

460 
ccv
.
c⁄f_¥efix
 = 1;

462 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

463  
NGX_CONF_ERROR
;

466  
NGX_CONF_OK
;

467 
	}
}

	@src/http/modules/ngx_http_auth_request_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	muri
;

15 
ngx_¨øy_t
 *
	mv¨s
;

16 } 
	tngx_hâp_auth_ªque°_c⁄f_t
;

20 
ngx_uöt_t
 
	md⁄e
;

21 
ngx_uöt_t
 
	m°©us
;

22 
ngx_hâp_ªque°_t
 *
	msubªque°
;

23 } 
	tngx_hâp_auth_ªque°_˘x_t
;

27 
ngx_öt_t
 
	mödex
;

28 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

29 
ngx_hâp_£t_v¨übÀ_±
 
	m£t_h™dÀr
;

30 } 
	tngx_hâp_auth_ªque°_v¨übÀ_t
;

33 
ngx_öt_t
 
ngx_hâp_auth_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

34 
ngx_öt_t
 
ngx_hâp_auth_ªque°_d⁄e
(
ngx_hâp_ªque°_t
 *
r
,

35 *
d©a
, 
ngx_öt_t
 
rc
);

36 
ngx_öt_t
 
ngx_hâp_auth_ªque°_£t_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
, 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
);

38 
ngx_öt_t
 
ngx_hâp_auth_ªque°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

40 *
ngx_hâp_auth_ªque°_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

41 *
ngx_hâp_auth_ªque°_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

42 *
∑ª¡
, *
chûd
);

43 
ngx_öt_t
 
ngx_hâp_auth_ªque°_öô
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_auth_ªque°
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

45 *
c⁄f
);

46 *
ngx_hâp_auth_ªque°_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

47 *
c⁄f
);

50 
ngx_comm™d_t
 
	gngx_hâp_auth_ªque°_comm™ds
[] = {

52 { 
ngx_°rög
("auth_request"),

53 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

54 
ngx_hâp_auth_ªque°
,

55 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
NULL
 },

59 { 
ngx_°rög
("auth_request_set"),

60 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

61 
ngx_hâp_auth_ªque°_£t
,

62 
NGX_HTTP_LOC_CONF_OFFSET
,

64 
NULL
 },

66 
ngx_nuŒ_comm™d


70 
ngx_hâp_moduÀ_t
 
	gngx_hâp_auth_ªque°_moduÀ_˘x
 = {

71 
NULL
,

72 
ngx_hâp_auth_ªque°_öô
,

74 
NULL
,

75 
NULL
,

77 
NULL
,

78 
NULL
,

80 
ngx_hâp_auth_ªque°_¸óã_c⁄f
,

81 
ngx_hâp_auth_ªque°_mîge_c⁄f


85 
ngx_moduÀ_t
 
	gngx_hâp_auth_ªque°_moduÀ
 = {

86 
NGX_MODULE_V1
,

87 &
ngx_hâp_auth_ªque°_moduÀ_˘x
,

88 
ngx_hâp_auth_ªque°_comm™ds
,

89 
NGX_HTTP_MODULE
,

90 
NULL
,

91 
NULL
,

92 
NULL
,

93 
NULL
,

94 
NULL
,

95 
NULL
,

96 
NULL
,

97 
NGX_MODULE_V1_PADDING


101 
ngx_öt_t


102 
	$ngx_hâp_auth_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

104 
ngx_èbÀ_ñt_t
 *
h
, *
ho
;

105 
ngx_hâp_ªque°_t
 *
§
;

106 
ngx_hâp_po°_subªque°_t
 *
ps
;

107 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
;

108 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
;

110 
¨cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_auth_ªque°_moduÀ
);

112 i‡(
¨cf
->
uri
.
Àn
 == 0) {

113  
NGX_DECLINED
;

116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

119 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_auth_ªque°_moduÀ
);

121 i‡(
˘x
 !
NULL
) {

122 i‡(!
˘x
->
d⁄e
) {

123  
NGX_AGAIN
;

131 i‡(
	`ngx_hâp_auth_ªque°_£t_v¨übÀs
(
r
, 
¨cf
, 
˘x
Ë!
NGX_OK
) {

132  
NGX_ERROR
;

137 i‡(
˘x
->
°©us
 =
NGX_HTTP_FORBIDDEN
) {

138  
˘x
->
°©us
;

141 i‡(
˘x
->
°©us
 =
NGX_HTTP_UNAUTHORIZED
) {

142 
§
 = 
˘x
->
subªque°
;

144 
h
 = 
§
->
hódîs_out
.
www_authítiˇã
;

146 i‡(!
h
 && 
§
->
up°ªam
) {

147 
h
 = 
§
->
up°ªam
->
hódîs_ö
.
www_authítiˇã
;

150 i‡(
h
) {

151 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

152 i‡(
ho
 =
NULL
) {

153  
NGX_ERROR
;

156 *
ho
 = *
h
;

158 
r
->
hódîs_out
.
www_authítiˇã
 = 
ho
;

161  
˘x
->
°©us
;

164 i‡(
˘x
->
°©us
 >
NGX_HTTP_OK


165 && 
˘x
->
°©us
 < 
NGX_HTTP_SPECIAL_RESPONSE
)

167  
NGX_OK
;

170 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

171 "authÑeque° u√x≥˘ed sètus: %d", 
˘x
->
°©us
);

173  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

176 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_auth_ªque°_˘x_t
));

177 i‡(
˘x
 =
NULL
) {

178  
NGX_ERROR
;

181 
ps
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

182 i‡(
ps
 =
NULL
) {

183  
NGX_ERROR
;

186 
ps
->
h™dÀr
 = 
ngx_hâp_auth_ªque°_d⁄e
;

187 
ps
->
d©a
 = 
˘x
;

189 i‡(
	`ngx_hâp_subªque°
(
r
, &
¨cf
->
uri
, 
NULL
, &
§
, 
ps
,

190 
NGX_HTTP_SUBREQUEST_WAITED
)

191 !
NGX_OK
)

193  
NGX_ERROR
;

201 
§
->
ªque°_body
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

202 i‡(
§
->
ªque°_body
 =
NULL
) {

203  
NGX_ERROR
;

206 
§
->
hódî_⁄ly
 = 1;

208 
˘x
->
subªque°
 = 
§
;

210 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_auth_ªque°_moduÀ
);

212  
NGX_AGAIN
;

213 
	}
}

216 
ngx_öt_t


217 
	$ngx_hâp_auth_ªque°_d⁄e
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

219 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
 = 
d©a
;

221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

222 "authÑeque° d⁄ês:%d", 
r
->
hódîs_out
.
°©us
);

224 
˘x
->
d⁄e
 = 1;

225 
˘x
->
°©us
 = 
r
->
hódîs_out
.status;

227  
rc
;

228 
	}
}

231 
ngx_öt_t


232 
	$ngx_hâp_auth_ªque°_£t_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

233 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
, 
ngx_hâp_auth_ªque°_˘x_t
 *
˘x
)

235 
ngx_°r_t
 
vÆ
;

236 
ngx_hâp_v¨übÀ_t
 *
v
;

237 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

238 
ngx_hâp_auth_ªque°_v¨übÀ_t
 *
av
, *
œ°
;

239 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

241 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

244 i‡(
¨cf
->
v¨s
 =
NULL
) {

245  
NGX_OK
;

248 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

249 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

251 
av
 = 
¨cf
->
v¨s
->
ñts
;

252 
œ°
 = 
av
 + 
¨cf
->
v¨s
->
√…s
;

254 
av
 < 
œ°
) {

260 
vv
 = &
r
->
v¨übÀs
[
av
->
ödex
];

262 i‡(
	`ngx_hâp_com∂ex_vÆue
(
˘x
->
subªque°
, &
av
->
vÆue
, &
vÆ
)

263 !
NGX_OK
)

265  
NGX_ERROR
;

268 
vv
->
vÆid
 = 1;

269 
vv
->
nŸ_found
 = 0;

270 
vv
->
d©a
 = 
vÆ
.data;

271 
vv
->
Àn
 = 
vÆ
.len;

273 i‡(
av
->
£t_h™dÀr
) {

279 
av
->
	`£t_h™dÀr
(
r
, 
vv
, 
v
[av->
ödex
].
d©a
);

282 
av
++;

285  
NGX_OK
;

286 
	}
}

289 
ngx_öt_t


290 
	$ngx_hâp_auth_ªque°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

291 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

293 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

296 
v
->
nŸ_found
 = 1;

298  
NGX_OK
;

299 
	}
}

303 
	$ngx_hâp_auth_ªque°_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

305 
ngx_hâp_auth_ªque°_c⁄f_t
 *
c⁄f
;

307 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_auth_ªque°_c⁄f_t
));

308 i‡(
c⁄f
 =
NULL
) {

309  
NULL
;

318 
c⁄f
->
v¨s
 = 
NGX_CONF_UNSET_PTR
;

320  
c⁄f
;

321 
	}
}

325 
	$ngx_hâp_auth_ªque°_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

327 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

328 
ngx_hâp_auth_ªque°_c⁄f_t
 *
c⁄f
 = 
chûd
;

330 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
uri
, 
¥ev
->uri, "");

331 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
v¨s
, 
¥ev
->v¨s, 
NULL
);

333  
NGX_CONF_OK
;

334 
	}
}

337 
ngx_öt_t


338 
	$ngx_hâp_auth_ªque°_öô
(
ngx_c⁄f_t
 *
cf
)

340 
ngx_hâp_h™dÀr_±
 *
h
;

341 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

343 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

345 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

346 i‡(
h
 =
NULL
) {

347  
NGX_ERROR
;

350 *
h
 = 
ngx_hâp_auth_ªque°_h™dÀr
;

352  
NGX_OK
;

353 
	}
}

357 
	$ngx_hâp_auth_ªque°
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

359 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
 = 
c⁄f
;

361 
ngx_°r_t
 *
vÆue
;

363 i‡(
¨cf
->
uri
.
d©a
 !
NULL
) {

367 
vÆue
 = 
cf
->
¨gs
->
ñts
;

369 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

370 
¨cf
->
uri
.
Àn
 = 0;

371 
¨cf
->
uri
.
d©a
 = (
u_ch¨
 *) "";

373  
NGX_CONF_OK
;

376 
¨cf
->
uri
 = 
vÆue
[1];

378  
NGX_CONF_OK
;

379 
	}
}

383 
	$ngx_hâp_auth_ªque°_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

385 
ngx_hâp_auth_ªque°_c⁄f_t
 *
¨cf
 = 
c⁄f
;

387 
ngx_°r_t
 *
vÆue
;

388 
ngx_hâp_v¨übÀ_t
 *
v
;

389 
ngx_hâp_auth_ªque°_v¨übÀ_t
 *
av
;

390 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

392 
vÆue
 = 
cf
->
¨gs
->
ñts
;

394 i‡(
vÆue
[1].
d©a
[0] != '$') {

395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

396 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

397  
NGX_CONF_ERROR
;

400 
vÆue
[1].
Àn
--;

401 
vÆue
[1].
d©a
++;

403 i‡(
¨cf
->
v¨s
 =
NGX_CONF_UNSET_PTR
) {

404 
¨cf
->
v¨s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

405 (
ngx_hâp_auth_ªque°_v¨übÀ_t
));

406 i‡(
¨cf
->
v¨s
 =
NULL
) {

407  
NGX_CONF_ERROR
;

411 
av
 = 
	`ngx_¨øy_push
(
¨cf
->
v¨s
);

412 i‡(
av
 =
NULL
) {

413  
NGX_CONF_ERROR
;

416 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

417 i‡(
v
 =
NULL
) {

418  
NGX_CONF_ERROR
;

421 
av
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

422 i‡(
av
->
ödex
 =
NGX_ERROR
) {

423  
NGX_CONF_ERROR
;

426 i‡(
v
->
gë_h™dÀr
 =
NULL
) {

427 
v
->
gë_h™dÀr
 = 
ngx_hâp_auth_ªque°_v¨übÀ
;

428 
v
->
d©a
 = (
uöçå_t
Ë
av
;

431 
av
->
£t_h™dÀr
 = 
v
->set_handler;

433 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

435 
ccv
.
cf
 = cf;

436 
ccv
.
vÆue
 = &value[2];

437 
ccv
.
com∂ex_vÆue
 = &
av
->
vÆue
;

439 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

440  
NGX_CONF_ERROR
;

443  
NGX_CONF_OK
;

444 
	}
}

	@src/http/modules/ngx_http_autoindex_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

16 
ngx_buf_t
 *
	mbuf
;

17 
size_t
 
	msize
;

18 
ngx_poﬁ_t
 *
	mpoﬁ
;

19 
size_t
 
	mÆloc_size
;

20 
ngx_chaö_t
 **
	mœ°_out
;

21 } 
	tngx_hâp_autoödex_˘x_t
;

27 
ngx_°r_t
 
	m«me
;

28 
size_t
 
	mutf_Àn
;

29 
size_t
 
	mesˇ≥
;

30 
size_t
 
	mesˇ≥_html
;

32 
	mdú
:1;

33 
	mfûe
:1;

35 
time_t
 
	mmtime
;

36 
off_t
 
	msize
;

37 } 
	tngx_hâp_autoödex_íåy_t
;

41 
ngx_Êag_t
 
	míabÀ
;

42 
ngx_uöt_t
 
	mf‹m©
;

43 
ngx_Êag_t
 
	mloˇ…ime
;

44 
ngx_Êag_t
 
	mexa˘_size
;

45 } 
	tngx_hâp_autoödex_loc_c⁄f_t
;

48 
	#NGX_HTTP_AUTOINDEX_HTML
 0

	)

49 
	#NGX_HTTP_AUTOINDEX_JSON
 1

	)

50 
	#NGX_HTTP_AUTOINDEX_JSONP
 2

	)

51 
	#NGX_HTTP_AUTOINDEX_XML
 3

	)

53 
	#NGX_HTTP_AUTOINDEX_PREALLOCATE
 50

	)

55 
	#NGX_HTTP_AUTOINDEX_NAME_LEN
 50

	)

58 
ngx_buf_t
 *
ngx_hâp_autoödex_html
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_¨øy_t
 *
íåõs
);

60 
ngx_buf_t
 *
ngx_hâp_autoödex_js⁄
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_¨øy_t
 *
íåõs
, 
ngx_°r_t
 *
ˇŒback
);

62 
ngx_öt_t
 
ngx_hâp_autoödex_js⁄p_ˇŒback
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_°r_t
 *
ˇŒback
);

64 
ngx_buf_t
 *
ngx_hâp_autoödex_xml
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_¨øy_t
 *
íåõs
);

67 
ngx_libc_cde˛
 
ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
,

68 c⁄° *
two
);

69 
ngx_öt_t
 
ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

72 
ngx_öt_t
 
ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
);

73 *
ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

74 *
ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

75 *
∑ª¡
, *
chûd
);

78 
ngx_c⁄f_íum_t
 
	gngx_hâp_autoödex_f‹m©
[] = {

79 { 
ngx_°rög
("html"), 
NGX_HTTP_AUTOINDEX_HTML
 },

80 { 
ngx_°rög
("js⁄"), 
NGX_HTTP_AUTOINDEX_JSON
 },

81 { 
ngx_°rög
("js⁄p"), 
NGX_HTTP_AUTOINDEX_JSONP
 },

82 { 
ngx_°rög
("xml"), 
NGX_HTTP_AUTOINDEX_XML
 },

83 { 
ngx_nuŒ_°rög
, 0 }

87 
ngx_comm™d_t
 
	gngx_hâp_autoödex_comm™ds
[] = {

89 { 
ngx_°rög
("autoindex"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

91 
ngx_c⁄f_£t_Êag_¶Ÿ
,

92 
NGX_HTTP_LOC_CONF_OFFSET
,

93 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
íabÀ
),

94 
NULL
 },

96 { 
ngx_°rög
("autoindex_format"),

97 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_íum_¶Ÿ
,

99 
NGX_HTTP_LOC_CONF_OFFSET
,

100 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
f‹m©
),

101 &
ngx_hâp_autoödex_f‹m©
 },

103 { 
ngx_°rög
("autoindex_localtime"),

104 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

105 
ngx_c⁄f_£t_Êag_¶Ÿ
,

106 
NGX_HTTP_LOC_CONF_OFFSET
,

107 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
loˇ…ime
),

108 
NULL
 },

110 { 
ngx_°rög
("autoindex_exact_size"),

111 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

112 
ngx_c⁄f_£t_Êag_¶Ÿ
,

113 
NGX_HTTP_LOC_CONF_OFFSET
,

114 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
exa˘_size
),

115 
NULL
 },

117 
ngx_nuŒ_comm™d


121 
ngx_hâp_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ_˘x
 = {

122 
NULL
,

123 
ngx_hâp_autoödex_öô
,

125 
NULL
,

126 
NULL
,

128 
NULL
,

129 
NULL
,

131 
ngx_hâp_autoödex_¸óã_loc_c⁄f
,

132 
ngx_hâp_autoödex_mîge_loc_c⁄f


136 
ngx_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ
 = {

137 
NGX_MODULE_V1
,

138 &
ngx_hâp_autoödex_moduÀ_˘x
,

139 
ngx_hâp_autoödex_comm™ds
,

140 
NGX_HTTP_MODULE
,

141 
NULL
,

142 
NULL
,

143 
NULL
,

144 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NGX_MODULE_V1_PADDING


152 
ngx_öt_t


153 
	$ngx_hâp_autoödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

155 
u_ch¨
 *
œ°
, *
fûíame
;

156 
size_t
 
Àn
, 
Æloˇãd
, 
roŸ
;

157 
ngx_îr_t
 
îr
;

158 
ngx_buf_t
 *
b
;

159 
ngx_öt_t
 
rc
;

160 
ngx_°r_t
 
∑th
, 
ˇŒback
;

161 
ngx_dú_t
 
dú
;

162 
ngx_uöt_t
 
Àvñ
, 
f‹m©
;

163 
ngx_poﬁ_t
 *
poﬁ
;

164 
ngx_chaö_t
 
out
;

165 
ngx_¨øy_t
 
íåõs
;

166 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

167 
ngx_hâp_autoödex_loc_c⁄f_t
 *
Æcf
;

169 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

170  
NGX_DECLINED
;

173 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

174  
NGX_DECLINED
;

177 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_autoödex_moduÀ
);

179 i‡(!
Æcf
->
íabÀ
) {

180  
NGX_DECLINED
;

185 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
,

186 
NGX_HTTP_AUTOINDEX_PREALLOCATE
);

187 i‡(
œ°
 =
NULL
) {

188  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

191 
Æloˇãd
 = 
∑th
.
Àn
;

192 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

193 i‡(
∑th
.
Àn
 > 1) {

194 
∑th
.
Àn
--;

196 
∑th
.
d©a
[∑th.
Àn
] = '\0';

198 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

199 "hâ∞autoödex: \"%s\"", 
∑th
.
d©a
);

201 
f‹m©
 = 
Æcf
->format;

203 i‡(
f‹m©
 =
NGX_HTTP_AUTOINDEX_JSONP
) {

204 i‡(
	`ngx_hâp_autoödex_js⁄p_ˇŒback
(
r
, &
ˇŒback
Ë!
NGX_OK
) {

205  
NGX_HTTP_BAD_REQUEST
;

208 i‡(
ˇŒback
.
Àn
 == 0) {

209 
f‹m©
 = 
NGX_HTTP_AUTOINDEX_JSON
;

213 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

214 
îr
 = 
ngx_î∫o
;

216 i‡(
îr
 =
NGX_ENOENT


217 || 
îr
 =
NGX_ENOTDIR


218 || 
îr
 =
NGX_ENAMETOOLONG
)

220 
Àvñ
 = 
NGX_LOG_ERR
;

221 
rc
 = 
NGX_HTTP_NOT_FOUND
;

223 } i‡(
îr
 =
NGX_EACCES
) {

224 
Àvñ
 = 
NGX_LOG_ERR
;

225 
rc
 = 
NGX_HTTP_FORBIDDEN
;

228 
Àvñ
 = 
NGX_LOG_CRIT
;

229 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

232 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

233 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

235  
rc
;

238 #i‡(
NGX_SUPPRESS_WARN
)

241 
	`ngx_memzîo
(&
íåõs
, (
ngx_¨øy_t
));

246 
poﬁ
 = 
r
->pool;

248 i‡(
	`ngx_¨øy_öô
(&
íåõs
, 
poﬁ
, 40, (
ngx_hâp_autoödex_íåy_t
))

249 !
NGX_OK
)

251  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

254 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

256 
f‹m©
) {

258 
NGX_HTTP_AUTOINDEX_JSON
:

259 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "application/json");

262 
NGX_HTTP_AUTOINDEX_JSONP
:

263 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "application/javascript");

266 
NGX_HTTP_AUTOINDEX_XML
:

267 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/xml");

268 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ch¨£t
, "utf-8");

272 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

276 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥
.
Àn
;

277 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

279 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

281 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

282 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

283 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

284 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

287  
rc
;

290 
fûíame
 = 
∑th
.
d©a
;

291 
fûíame
[
∑th
.
Àn
] = '/';

294 
	`ngx_£t_î∫o
(0);

296 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

297 
îr
 = 
ngx_î∫o
;

299 i‡(
îr
 !
NGX_ENOMOREFILES
) {

300 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

301 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

302  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

308 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

309 "hâ∞autoödex fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

311 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

313 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

317 i‡(!
dú
.
vÆid_öfo
) {

321 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

322 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

323 + 
NGX_HTTP_AUTOINDEX_PREALLOCATE
;

325 
fûíame
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Æloˇãd
);

326 i‡(
fûíame
 =
NULL
) {

327  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

330 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

331 *
œ°
++ = '/';

334 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

336 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

337 
îr
 = 
ngx_î∫o
;

339 i‡(
îr
 !
NGX_ENOENT
 &&Éº !
NGX_ELOOP
) {

340 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

341 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

343 i‡(
îr
 =
NGX_EACCES
) {

347  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

350 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

351 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

352 
ngx_de_lök_öfo_n
 " \"%s\" failed",

353 
fûíame
);

354  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

359 
íåy
 = 
	`ngx_¨øy_push
(&
íåõs
);

360 i‡(
íåy
 =
NULL
) {

361  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

364 
íåy
->
«me
.
Àn
 =Üen;

366 
íåy
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
 + 1);

367 i‡(
íåy
->
«me
.
d©a
 =
NULL
) {

368  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

371 
	`ngx_˝y°∫
(
íåy
->
«me
.
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

373 
íåy
->
dú
 = 
	`ngx_de_is_dú
(&dir);

374 
íåy
->
fûe
 = 
	`ngx_de_is_fûe
(&
dú
);

375 
íåy
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

376 
íåy
->
size
 = 
	`ngx_de_size
(&
dú
);

379 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

380 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

381 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

384 i‡(
íåõs
.
√…s
 > 1) {

385 
	`ngx_qs‹t
(
íåõs
.
ñts
, (
size_t
Ëíåõs.
√…s
,

386 (
ngx_hâp_autoödex_íåy_t
),

387 
ngx_hâp_autoödex_cmp_íåõs
);

390 
f‹m©
) {

392 
NGX_HTTP_AUTOINDEX_JSON
:

393 
b
 = 
	`ngx_hâp_autoödex_js⁄
(
r
, &
íåõs
, 
NULL
);

396 
NGX_HTTP_AUTOINDEX_JSONP
:

397 
b
 = 
	`ngx_hâp_autoödex_js⁄
(
r
, &
íåõs
, &
ˇŒback
);

400 
NGX_HTTP_AUTOINDEX_XML
:

401 
b
 = 
	`ngx_hâp_autoödex_xml
(
r
, &
íåõs
);

405 
b
 = 
	`ngx_hâp_autoödex_html
(
r
, &
íåõs
);

409 i‡(
b
 =
NULL
) {

410  
NGX_ERROR
;

415 i‡(
r
 =r->
maö
) {

416 
b
->
œ°_buf
 = 1;

419 
b
->
œ°_ö_chaö
 = 1;

421 
out
.
buf
 = 
b
;

422 
out
.
√xt
 = 
NULL
;

424  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

425 
	}
}

428 
ngx_buf_t
 *

429 
	$ngx_hâp_autoödex_html
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
íåõs
)

431 
u_ch¨
 *
œ°
, 
sˇÀ
;

432 
off_t
 
Àngth
;

433 
size_t
 
Àn
, 
ch¨_Àn
, 
esˇ≥_html
;

434 
ngx_tm_t
 
tm
;

435 
ngx_buf_t
 *
b
;

436 
ngx_öt_t
 
size
;

437 
ngx_uöt_t
 
i
, 
utf8
;

438 
ngx_time_t
 *
ç
;

439 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

440 
ngx_hâp_autoödex_loc_c⁄f_t
 *
Æcf
;

442 
u_ch¨
 
tôÀ
[] =

443 "<html>" 
CRLF


447 
u_ch¨
 
hódî
[] =

448 "</tôÀ></hód>" 
CRLF


449 "<body bgcﬁ‹=\"whôe\">" 
CRLF


453 
u_ch¨
 
èû
[] =

454 "</body>" 
CRLF


455 "</html>" 
CRLF


458 *
m⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

461 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
 == 5

462 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
ch¨£t
.
d©a
, (
u_ch¨
 *) "utf-8", 5)

465 
utf8
 = 1;

468 
utf8
 = 0;

471 
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

473 
Àn
 = (
tôÀ
) - 1

474 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


475 + (
hódî
) - 1

476 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


478 + ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1

480 + (
èû
) - 1;

482 
íåy
 = 
íåõs
->
ñts
;

483 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

484 
íåy
[
i
].
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
,É¡ry[i].
«me
.
d©a
,

485 
íåy
[
i
].
«me
.
Àn
,

486 
NGX_ESCAPE_URI_COMPONENT
);

488 
íåy
[
i
].
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
,É¡ry[i].
«me
.
d©a
,

489 
íåy
[
i
].
«me
.
Àn
);

491 i‡(
utf8
) {

492 
íåy
[
i
].
utf_Àn
 = 
	`ngx_utf8_Àngth
”¡ry[i].
«me
.
d©a
,

493 
íåy
[
i
].
«me
.
Àn
);

495 
íåy
[
i
].
utf_Àn
 =É¡ry[i].
«me
.
Àn
;

498 
Àn
 += ("<a href=\"") - 1

499 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


502 + 
íåy
[
i
].
«me
.
Àn
 -É¡ry[i].
utf_Àn


503 + 
íåy
[
i
].
esˇ≥_html


504 + 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + ("&gt;") - 2

511 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

512 i‡(
b
 =
NULL
) {

513  
NULL
;

516 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
tôÀ
, (title) - 1);

518 i‡(
esˇ≥_html
) {

519 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

520 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

521 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

524 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

525 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

526 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

529 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</h1>", ("</h1>") - 1);

531 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
,

532 ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1);

534 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_autoödex_moduÀ
);

535 
ç
 = 
	`ngx_timeofday
();

537 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

538 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "<a href=\"", ("<a href=\"") - 1);

540 i‡(
íåy
[
i
].
esˇ≥
) {

541 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
íåy
[
i
].
«me
.
d©a
,É¡ry[i].«me.
Àn
,

542 
NGX_ESCAPE_URI_COMPONENT
);

544 
b
->
œ°
 +
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥
;

547 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

548 
íåy
[
i
].
«me
.
Àn
);

551 i‡(
íåy
[
i
].
dú
) {

552 *
b
->
œ°
++ = '/';

555 *
b
->
œ°
++ = '"';

556 *
b
->
œ°
++ = '>';

558 
Àn
 = 
íåy
[
i
].
utf_Àn
;

560 i‡(
íåy
[
i
].
«me
.
Àn
 !=Üen) {

561 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

562 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3 + 1;

565 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1;

568 
œ°
 = 
b
->last;

569 
b
->
œ°
 = 
	`ngx_utf8_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

570 
ch¨_Àn
, 
íåy
[
i
].
«me
.
Àn
 + 1);

572 i‡(
íåy
[
i
].
esˇ≥_html
) {

573 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
÷a°, 
íåy
[
i
].
«me
.
d©a
,

574 
b
->
œ°
 -Üast);

577 
œ°
 = 
b
->last;

580 i‡(
íåy
[
i
].
esˇ≥_html
) {

581 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

582 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3;

585 
ch¨_Àn
 = 
Àn
;

588 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->last,

589 
íåy
[
i
].
«me
.
d©a
, 
ch¨_Àn
);

590 
œ°
 = 
b
->last;

593 
b
->
œ°
 = 
	`ngx_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

594 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1);

595 
œ°
 = 
b
->last - 3;

599 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

600 
b
->
œ°
 = 
	`ngx_˝ymem
(last, "..&gt;</a>", ("..&gt;</a>") - 1);

603 i‡(
íåy
[
i
].
dú
 && 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

604 *
b
->
œ°
++ = '/';

605 
Àn
++;

608 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</a>", ("</a>") - 1);

610 i‡(
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

611 
	`ngx_mem£t
(
b
->
œ°
, ' ', 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
);

612 
b
->
œ°
 +
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
;

616 *
b
->
œ°
++ = ' ';

618 
	`ngx_gmtime
(
íåy
[
i
].
mtime
 + 
ç
->
gmtoff
 * 60 * 
Æcf
->
loˇ…ime
, &
tm
);

620 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%02d-%s-%d %02d:%02d ",

621 
tm
.
ngx_tm_mday
,

622 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

623 
tm
.
ngx_tm_yór
,

624 
tm
.
ngx_tm_hour
,

625 
tm
.
ngx_tm_mö
);

627 i‡(
Æcf
->
exa˘_size
) {

628 i‡(
íåy
[
i
].
dú
) {

629 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

632 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%19O", 
íåy
[
i
].
size
);

636 i‡(
íåy
[
i
].
dú
) {

637 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

641 
Àngth
 = 
íåy
[
i
].
size
;

643 i‡(
Àngth
 > 1024 * 1024 * 1024 - 1) {

644 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024 * 1024));

645 i‡((
Àngth
 % (1024 * 1024 * 1024))

648 
size
++;

650 
sˇÀ
 = 'G';

652 } i‡(
Àngth
 > 1024 * 1024 - 1) {

653 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024));

654 i‡((
Àngth
 % (1024 * 1024)) > (1024 * 1024 / 2 - 1)) {

655 
size
++;

657 
sˇÀ
 = 'M';

659 } i‡(
Àngth
 > 9999) {

660 
size
 = (
ngx_öt_t
Ë(
Àngth
 / 1024);

661 i‡(
Àngth
 % 1024 > 511) {

662 
size
++;

664 
sˇÀ
 = 'K';

667 
size
 = (
ngx_öt_t
Ë
Àngth
;

668 
sˇÀ
 = '\0';

671 i‡(
sˇÀ
) {

672 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%6i%c", 
size
, 
sˇÀ
);

675 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %6i", 
size
);

680 *
b
->
œ°
++ = 
CR
;

681 *
b
->
œ°
++ = 
LF
;

684 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</pre><hr>", ("</pre><hr>") - 1);

686 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
èû
, (tail) - 1);

688  
b
;

689 
	}
}

692 
ngx_buf_t
 *

693 
	$ngx_hâp_autoödex_js⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
íåõs
,

694 
ngx_°r_t
 *
ˇŒback
)

696 
size_t
 
Àn
;

697 
ngx_buf_t
 *
b
;

698 
ngx_uöt_t
 
i
;

699 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

701 
Àn
 = ("[" 
CRLF
 CRLF "]") - 1;

703 i‡(
ˇŒback
) {

704 
Àn
 +("/* cÆlback */" 
CRLF
 "();"Ë- 1 + 
ˇŒback
->len;

707 
íåy
 = 
íåõs
->
ñts
;

709 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

710 
íåy
[
i
].
esˇ≥
 = 
	`ngx_esˇ≥_js⁄
(
NULL
,É¡ry[i].
«me
.
d©a
,

711 
íåy
[
i
].
«me
.
Àn
);

713 
Àn
 +("{ }," 
CRLF
) - 1

715 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


719 i‡(
íåy
[
i
].
fûe
) {

720 
Àn
 +(", \"size\":"Ë- 1 + 
NGX_OFF_T_LEN
;

724 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

725 i‡(
b
 =
NULL
) {

726  
NULL
;

729 i‡(
ˇŒback
) {

730 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "/* cÆlback */" 
CRLF
,

731 ("/* cÆlback */" 
CRLF
) - 1);

733 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ˇŒback
->
d©a
, cÆlback->
Àn
);

735 *
b
->
œ°
++ = '(';

738 *
b
->
œ°
++ = '[';

740 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

741 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
CRLF
 "{ \"name\":\"",

742 (
CRLF
 "{ \"name\":\"") - 1);

744 i‡(
íåy
[
i
].
esˇ≥
) {

745 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_js⁄
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

746 
íåy
[
i
].
«me
.
Àn
);

748 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

749 
íåy
[
i
].
«me
.
Àn
);

752 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "\", \"type\":\"",

755 i‡(
íåy
[
i
].
dú
) {

756 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "directory", ("directory") - 1);

758 } i‡(
íåy
[
i
].
fûe
) {

759 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "file", ("file") - 1);

762 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "other", ("other") - 1);

765 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "\", \"mtime\":\"",

768 
b
->
œ°
 = 
	`ngx_hâp_time
(b->œ°, 
íåy
[
i
].
mtime
);

770 i‡(
íåy
[
i
].
fûe
) {

771 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "\", \"size\":",

773 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%O", 
íåy
[
i
].
size
);

776 *
b
->
œ°
++ = '"';

779 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " },", (" },") - 1);

782 i‡(
i
 > 0) {

783 
b
->
œ°
--;

786 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
CRLF
 "]", (CRLF "]") - 1);

788 i‡(
ˇŒback
) {

789 *
b
->
œ°
++ = ')'; *b->last++ = ';';

792  
b
;

793 
	}
}

796 
ngx_öt_t


797 
	$ngx_hâp_autoödex_js⁄p_ˇŒback
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ˇŒback
)

799 
u_ch¨
 *
p
, 
c
, 
ch
;

800 
ngx_uöt_t
 
i
;

802 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"ˇŒback", 8, 
ˇŒback
Ë!
NGX_OK
) {

803 
ˇŒback
->
Àn
 = 0;

804  
NGX_OK
;

807 i‡(
ˇŒback
->
Àn
 > 128) {

808 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

809 "˛õ¡ síàtoÿl⁄g cÆlbackÇame: \"%V\"", 
ˇŒback
);

810  
NGX_DECLINED
;

813 
p
 = 
ˇŒback
->
d©a
;

815 
i
 = 0; i < 
ˇŒback
->
Àn
; i++) {

816 
ch
 = 
p
[
i
];

818 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

819 i‡(
c
 >= 'a' && c <= 'z') {

823 i‡((
ch
 >= '0' && ch <= '9') || ch == '_' || ch == '.') {

827 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

828 "˛õ¡ síàövÆid cÆlbackÇame: \"%V\"", 
ˇŒback
);

830  
NGX_DECLINED
;

833  
NGX_OK
;

834 
	}
}

837 
ngx_buf_t
 *

838 
	$ngx_hâp_autoödex_xml
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
íåõs
)

840 
size_t
 
Àn
;

841 
ngx_tm_t
 
tm
;

842 
ngx_buf_t
 *
b
;

843 
ngx_°r_t
 
ty≥
;

844 
ngx_uöt_t
 
i
;

845 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

847 
u_ch¨
 
hód
[] = "<?xm»vîsi⁄=\"1.0\"?>" 
CRLF
 "<list>" CRLF;

848 
u_ch¨
 
èû
[] = "</li°>" 
CRLF
;

850 
Àn
 = (
hód
Ë- 1 + (
èû
) - 1;

852 
íåy
 = 
íåõs
->
ñts
;

854 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

855 
íåy
[
i
].
esˇ≥
 = 
	`ngx_esˇ≥_html
(
NULL
,É¡ry[i].
«me
.
d©a
,

856 
íåy
[
i
].
«me
.
Àn
);

858 
Àn
 +("<dúe˘‹y></dúe˘‹y>" 
CRLF
) - 1

859 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


862 i‡(
íåy
[
i
].
fûe
) {

863 
Àn
 +(" size=\"\""Ë- 1 + 
NGX_OFF_T_LEN
;

867 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

868 i‡(
b
 =
NULL
) {

869  
NULL
;

872 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hód
, (head) - 1);

874 
i
 = 0; i < 
íåõs
->
√…s
; i++) {

875 *
b
->
œ°
++ = '<';

877 i‡(
íåy
[
i
].
dú
) {

878 
	`ngx_°r_£t
(&
ty≥
, "directory");

880 } i‡(
íåy
[
i
].
fûe
) {

881 
	`ngx_°r_£t
(&
ty≥
, "file");

884 
	`ngx_°r_£t
(&
ty≥
, "other");

887 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ty≥
.
d©a
,Åy≥.
Àn
);

889 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " mtime=\"", (" mtime=\"") - 1);

891 
	`ngx_gmtime
(
íåy
[
i
].
mtime
, &
tm
);

893 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%4d-%02d-%02dT%02d:%02d:%02dZ",

894 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

895 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

896 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

898 i‡(
íåy
[
i
].
fûe
) {

899 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "\" size=\"",

901 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%O", 
íåy
[
i
].
size
);

904 *
b
->
œ°
++ = '"'; *b->last++ = '>';

906 i‡(
íåy
[
i
].
esˇ≥
) {

907 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

908 
íåy
[
i
].
«me
.
Àn
);

910 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

911 
íåy
[
i
].
«me
.
Àn
);

914 *
b
->
œ°
++ = '<'; *b->last++ = '/';

916 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ty≥
.
d©a
,Åy≥.
Àn
);

918 *
b
->
œ°
++ = '>';

920 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

923 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
èû
, (tail) - 1);

925  
b
;

926 
	}
}

929 
ngx_libc_cde˛


930 
	$ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
, c⁄° *
two
)

932 
ngx_hâp_autoödex_íåy_t
 *
fú°
 = (ngx_hâp_autoödex_íåy_à*Ë
⁄e
;

933 
ngx_hâp_autoödex_íåy_t
 *
£c⁄d
 = (ngx_hâp_autoödex_íåy_à*Ë
two
;

935 i‡(
fú°
->
dú
 && !
£c⁄d
->dir) {

940 i‡(!
fú°
->
dú
 && 
£c⁄d
->dir) {

945  (Ë
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

946 
	}
}

951 
ngx_buf_t
 *

952 
	$ngx_hâp_autoödex_Æloc
(
ngx_hâp_autoödex_˘x_t
 *
˘x
, 
size_t
 
size
)

954 
ngx_chaö_t
 *
˛
;

956 i‡(
˘x
->
buf
) {

958 i‡((
size_t
Ë(
˘x
->
buf
->
íd
 - ctx->buf->
œ°
Ë>
size
) {

959  
˘x
->
buf
;

962 
˘x
->
size
 +˘x->
buf
->
œ°
 - ctx->buf->
pos
;

965 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, ctx->
Æloc_size
);

966 i‡(
˘x
->
buf
 =
NULL
) {

967  
NULL
;

970 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

971 i‡(
˛
 =
NULL
) {

972  
NULL
;

975 
˛
->
buf
 = 
˘x
->buf;

976 
˛
->
√xt
 = 
NULL
;

978 *
˘x
->
œ°_out
 = 
˛
;

979 
˘x
->
œ°_out
 = &
˛
->
√xt
;

981  
˘x
->
buf
;

982 
	}
}

987 
ngx_öt_t


988 
	$ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
)

990 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

991 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

992 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

995  
r
->
hódî_£¡
 ? 
NGX_ERROR
 : 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

996 
	}
}

1000 
	$ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1002 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
;

1004 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_autoödex_loc_c⁄f_t
));

1005 i‡(
c⁄f
 =
NULL
) {

1006  
NULL
;

1009 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

1010 
c⁄f
->
f‹m©
 = 
NGX_CONF_UNSET_UINT
;

1011 
c⁄f
->
loˇ…ime
 = 
NGX_CONF_UNSET
;

1012 
c⁄f
->
exa˘_size
 = 
NGX_CONF_UNSET
;

1014  
c⁄f
;

1015 
	}
}

1019 
	$ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1021 
ngx_hâp_autoödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1022 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1024 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1025 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
f‹m©
, 
¥ev
->format,

1026 
NGX_HTTP_AUTOINDEX_HTML
);

1027 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
loˇ…ime
, 
¥ev
->localtime, 0);

1028 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
exa˘_size
, 
¥ev
->exact_size, 1);

1030  
NGX_CONF_OK
;

1031 
	}
}

1034 
ngx_öt_t


1035 
	$ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
)

1037 
ngx_hâp_h™dÀr_±
 *
h
;

1038 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1040 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1042 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

1043 i‡(
h
 =
NULL
) {

1044  
NGX_ERROR
;

1047 *
h
 = 
ngx_hâp_autoödex_h™dÀr
;

1049  
NGX_OK
;

1050 
	}
}

	@src/http/modules/ngx_http_browser_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_MODERN_BROWSER
 0

	)

21 
	#NGX_HTTP_ANCIENT_BROWSER
 1

	)

25 
u_ch¨
 
	mbrow£r
[12];

26 
size_t
 
	mskù
;

27 
size_t
 
	madd
;

28 
u_ch¨
 
	m«me
[12];

29 } 
	tngx_hâp_modîn_brow£r_mask_t
;

33 
ngx_uöt_t
 
	mvîsi⁄
;

34 
size_t
 
	mskù
;

35 
size_t
 
	madd
;

36 
u_ch¨
 
	m«me
[12];

37 } 
	tngx_hâp_modîn_brow£r_t
;

41 
ngx_°r_t
 
	m«me
;

42 
ngx_hâp_gë_v¨übÀ_±
 
	mh™dÀr
;

43 
uöçå_t
 
	md©a
;

44 } 
	tngx_hâp_brow£r_v¨übÀ_t
;

48 
ngx_¨øy_t
 *
	mmodîn_brow£rs
;

49 
ngx_¨øy_t
 *
	m™cõ¡_brow£rs
;

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mmodîn_brow£r_vÆue
;

51 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m™cõ¡_brow£r_vÆue
;

53 
	mmodîn_u∆i°ed_brow£rs
:1;

54 
	m√tsˇ≥4
:1;

55 } 
	tngx_hâp_brow£r_c⁄f_t
;

58 
ngx_öt_t
 
ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

60 
ngx_öt_t
 
ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

63 
ngx_uöt_t
 
ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
,

64 
ngx_hâp_brow£r_c⁄f_t
 *
cf
);

66 
ngx_öt_t
 
ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
);

67 *
ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

68 *
ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

69 *
chûd
);

70 
ngx_libc_cde˛
 
ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
,

71 c⁄° *
two
);

72 *
ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 *
ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

76 *
ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

77 *
c⁄f
);

78 *
ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

79 *
c⁄f
);

82 
ngx_comm™d_t
 
	gngx_hâp_brow£r_comm™ds
[] = {

84 { 
ngx_°rög
("modern_browser"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

86 
ngx_hâp_modîn_brow£r
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
NULL
 },

91 { 
ngx_°rög
("ancient_browser"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

93 
ngx_hâp_™cõ¡_brow£r
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

96 
NULL
 },

98 { 
ngx_°rög
("modern_browser_value"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_hâp_modîn_brow£r_vÆue
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
NULL
 },

105 { 
ngx_°rög
("ancient_browser_value"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_hâp_™cõ¡_brow£r_vÆue
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
NULL
 },

112 
ngx_nuŒ_comm™d


116 
ngx_hâp_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ_˘x
 = {

117 
ngx_hâp_brow£r_add_v¨übÀ
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
NULL
,

124 
NULL
,

126 
ngx_hâp_brow£r_¸óã_c⁄f
,

127 
ngx_hâp_brow£r_mîge_c⁄f


131 
ngx_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_hâp_brow£r_moduÀ_˘x
,

134 
ngx_hâp_brow£r_comm™ds
,

135 
NGX_HTTP_MODULE
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_hâp_modîn_brow£r_mask_t
 
	gngx_hâp_modîn_brow£r_masks
[] = {

221 
ngx_hâp_brow£r_v¨übÀ_t
 
	gngx_hâp_brow£rs
[] = {

222 { 
ngx_°rög
("msõ"), 
ngx_hâp_msõ_v¨übÀ
, 0 },

223 { 
ngx_°rög
("modîn_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

224 
NGX_HTTP_MODERN_BROWSER
 },

225 { 
ngx_°rög
("™cõ¡_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

226 
NGX_HTTP_ANCIENT_BROWSER
 },

227 { 
ngx_nuŒ_°rög
, 
NULL
, 0 }

231 
ngx_öt_t


232 
	$ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

233 
uöçå_t
 
d©a
)

235 
ngx_uöt_t
 
rc
;

236 
ngx_hâp_brow£r_c⁄f_t
 *
cf
;

238 
cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_brow£r_moduÀ
);

240 
rc
 = 
	`ngx_hâp_brow£r
(
r
, 
cf
);

242 i‡(
d©a
 =
NGX_HTTP_MODERN_BROWSER
 && 
rc
 == NGX_HTTP_MODERN_BROWSER) {

243 *
v
 = *
cf
->
modîn_brow£r_vÆue
;

244  
NGX_OK
;

247 i‡(
d©a
 =
NGX_HTTP_ANCIENT_BROWSER
 && 
rc
 == NGX_HTTP_ANCIENT_BROWSER) {

248 *
v
 = *
cf
->
™cõ¡_brow£r_vÆue
;

249  
NGX_OK
;

252 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

253  
NGX_OK
;

254 
	}
}

257 
ngx_uöt_t


258 
	$ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_brow£r_c⁄f_t
 *
cf
)

260 
size_t
 
Àn
;

261 
u_ch¨
 *
«me
, *
ua
, *
œ°
, 
c
;

262 
ngx_°r_t
 *
™cõ¡
;

263 
ngx_uöt_t
 
i
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

264 
ngx_hâp_modîn_brow£r_t
 *
modîn
;

266 i‡(
r
->
hódîs_ö
.
u£r_agít
 =
NULL
) {

267 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

268  
NGX_HTTP_MODERN_BROWSER
;

271  
NGX_HTTP_ANCIENT_BROWSER
;

274 
ua
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.
d©a
;

275 
Àn
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.len;

276 
œ°
 = 
ua
 + 
Àn
;

278 i‡(
cf
->
modîn_brow£rs
) {

279 
modîn
 = 
cf
->
modîn_brow£rs
->
ñts
;

281 
i
 = 0; i < 
cf
->
modîn_brow£rs
->
√…s
; i++) {

282 
«me
 = 
ua
 + 
modîn
[
i
].
skù
;

284 i‡(
«me
 >
œ°
) {

288 
«me
 = (
u_ch¨
 *Ë
	`ngx_°r°r
“ame, 
modîn
[
i
].name);

290 i‡(
«me
 =
NULL
) {

294 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

295 "brow£r: \"%s\"", 
«me
);

297 
«me
 +
modîn
[
i
].
add
;

299 i‡(
«me
 >
œ°
) {

303 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

304 "vîsi⁄: \"%ui\" \"%s\"", 
modîn
[
i
].
vîsi⁄
, 
«me
);

306 
vîsi⁄
 = 0;

307 
vî
 = 0;

308 
sˇÀ
 = 1000000;

310 
«me
 < 
œ°
) {

312 
c
 = *
«me
++;

314 i‡(
c
 >= '0' && c <= '9') {

315 
vî
 = vî * 10 + (
c
 - '0');

319 i‡(
c
 == '.') {

320 
vîsi⁄
 +
vî
 * 
sˇÀ
;

322 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

324 
modîn
[
i
].
vîsi⁄
, version);

326 i‡(
vîsi⁄
 > 
modîn
[
i
].version) {

327  
NGX_HTTP_MODERN_BROWSER
;

330 
vî
 = 0;

331 
sˇÀ
 /= 100;

338 
vîsi⁄
 +
vî
 * 
sˇÀ
;

340 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

342 
modîn
[
i
].
vîsi⁄
, version);

344 i‡(
vîsi⁄
 >
modîn
[
i
].version) {

345  
NGX_HTTP_MODERN_BROWSER
;

348  
NGX_HTTP_ANCIENT_BROWSER
;

351 i‡(!
cf
->
modîn_u∆i°ed_brow£rs
) {

352  
NGX_HTTP_ANCIENT_BROWSER
;

356 i‡(
cf
->
√tsˇ≥4
) {

357 i‡(
Àn
 > ("Mozilla/4.72 ") - 1

358 && 
	`ngx_°∫cmp
(
ua
, "Mozilla/", ("Mozilla/") - 1) == 0

359 && 
ua
[8] > '0' && ua[8] < '5')

361  
NGX_HTTP_ANCIENT_BROWSER
;

365 i‡(
cf
->
™cõ¡_brow£rs
) {

366 
™cõ¡
 = 
cf
->
™cõ¡_brow£rs
->
ñts
;

368 
i
 = 0; i < 
cf
->
™cõ¡_brow£rs
->
√…s
; i++) {

369 i‡(
Àn
 >
™cõ¡
[
i
].len

370 && 
	`ngx_°r°r
(
ua
, 
™cõ¡
[
i
].
d©a
Ë!
NULL
)

372  
NGX_HTTP_ANCIENT_BROWSER
;

377 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

378  
NGX_HTTP_MODERN_BROWSER
;

381  
NGX_HTTP_ANCIENT_BROWSER
;

382 
	}
}

385 
ngx_öt_t


386 
	$ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

387 
uöçå_t
 
d©a
)

389 i‡(
r
->
hódîs_ö
.
msõ
) {

390 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

391  
NGX_OK
;

394 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

395  
NGX_OK
;

396 
	}
}

399 
ngx_öt_t


400 
	$ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
)

402 
ngx_hâp_brow£r_v¨übÀ_t
 *
v¨
;

403 
ngx_hâp_v¨übÀ_t
 *
v
;

405 
v¨
 = 
ngx_hâp_brow£rs
; v¨->
«me
.
Àn
; var++) {

407 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v¨
->
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

408 i‡(
v
 =
NULL
) {

409  
NGX_ERROR
;

412 
v
->
gë_h™dÀr
 = 
v¨
->
h™dÀr
;

413 
v
->
d©a
 = 
v¨
->data;

416  
NGX_OK
;

417 
	}
}

421 
	$ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

423 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
;

425 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_brow£r_c⁄f_t
));

426 i‡(
c⁄f
 =
NULL
) {

427  
NULL
;

442  
c⁄f
;

443 
	}
}

447 
	$ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

449 
ngx_hâp_brow£r_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

450 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
 = 
chûd
;

452 
ngx_uöt_t
 
i
, 
n
;

453 
ngx_hâp_modîn_brow£r_t
 *
brow£rs
, *
›îa
;

461 i‡(
c⁄f
->
modîn_brow£rs
 =
NULL
 && c⁄f->
modîn_u∆i°ed_brow£rs
 == 0) {

462 
c⁄f
->
modîn_brow£rs
 = 
¥ev
->modern_browsers;

463 
c⁄f
->
modîn_u∆i°ed_brow£rs
 = 
¥ev
->modern_unlisted_browsers;

465 } i‡(
c⁄f
->
modîn_brow£rs
 !
NULL
) {

466 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

468 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

469 i‡(
brow£rs
[
i
].
skù
 == 0) {

470 
found
;

479 
›îa
 = 
	`ngx_¨øy_push
(
c⁄f
->
modîn_brow£rs
);

480 i‡(
›îa
 =
NULL
) {

481  
NGX_CONF_ERROR
;

484 
›îa
->
skù
 = 0;

485 
›îa
->
vîsi⁄
 = 4001000000U;

487 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

489 
found
:

491 
	`ngx_qs‹t
(
brow£rs
, (
size_t
Ë
c⁄f
->
modîn_brow£rs
->
√…s
,

492 (
ngx_hâp_modîn_brow£r_t
),

493 
ngx_hâp_modîn_brow£r_s‹t
);

495 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

496 
n
 = 
brow£rs
[
i
].
skù
;

498 
brow£rs
[
i
].
skù
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].skip;

499 
brow£rs
[
i
].
add
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].add;

500 (Ë
	`ngx_˝y°∫
(
brow£rs
[
i
].
«me
,

501 
ngx_hâp_modîn_brow£r_masks
[
n
].
«me
, 12);

505 i‡(
c⁄f
->
™cõ¡_brow£rs
 =
NULL
 && c⁄f->
√tsˇ≥4
 == 0) {

506 
c⁄f
->
™cõ¡_brow£rs
 = 
¥ev
->ancient_browsers;

507 
c⁄f
->
√tsˇ≥4
 = 
¥ev
->netscape4;

510 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

511 
c⁄f
->
modîn_brow£r_vÆue
 = 
¥ev
->modern_browser_value;

514 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

515 
c⁄f
->
modîn_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

518 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

519 
c⁄f
->
™cõ¡_brow£r_vÆue
 = 
¥ev
->ancient_browser_value;

522 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

523 
c⁄f
->
™cõ¡_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

526  
NGX_CONF_OK
;

527 
	}
}

530 
ngx_libc_cde˛


531 
	$ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
, c⁄° *
two
)

533 
ngx_hâp_modîn_brow£r_t
 *
fú°
 = (ngx_hâp_modîn_brow£r_à*Ë
⁄e
;

534 
ngx_hâp_modîn_brow£r_t
 *
£c⁄d
 = (ngx_hâp_modîn_brow£r_à*Ë
two
;

536  (
fú°
->
skù
 - 
£c⁄d
->skip);

537 
	}
}

541 
	$ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

543 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

545 
u_ch¨
 
c
;

546 
ngx_°r_t
 *
vÆue
;

547 
ngx_uöt_t
 
i
, 
n
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

548 
ngx_hâp_modîn_brow£r_t
 *
brow£r
;

549 
ngx_hâp_modîn_brow£r_mask_t
 *
mask
;

551 
vÆue
 = 
cf
->
¨gs
->
ñts
;

553 i‡(
cf
->
¨gs
->
√…s
 == 2) {

554 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unlisted") == 0) {

555 
bcf
->
modîn_u∆i°ed_brow£rs
 = 1;

556  
NGX_CONF_OK
;

559  
NGX_CONF_ERROR
;

562 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

563 
bcf
->
modîn_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 5,

564 (
ngx_hâp_modîn_brow£r_t
));

565 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

566  
NGX_CONF_ERROR
;

570 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
modîn_brow£rs
);

571 i‡(
brow£r
 =
NULL
) {

572  
NGX_CONF_ERROR
;

575 
mask
 = 
ngx_hâp_modîn_brow£r_masks
;

577 
n
 = 0; 
mask
[n].
brow£r
[0] != '\0';Ç++) {

578 i‡(
	`ngx_°rˇ£cmp
(
mask
[
n
].
brow£r
, 
vÆue
[1].
d©a
) == 0) {

579 
found
;

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

584 "unknow¿brow£∏«mê\"%V\"", &
vÆue
[1]);

586  
NGX_CONF_ERROR
;

588 
found
:

596 
brow£r
->
skù
 = 
n
;

598 
vîsi⁄
 = 0;

599 
vî
 = 0;

600 
sˇÀ
 = 1000000;

602 
i
 = 0; i < 
vÆue
[2].
Àn
; i++) {

604 
c
 = 
vÆue
[2].
d©a
[
i
];

606 i‡(
c
 >= '0' && c <= '9') {

607 
vî
 = vî * 10 + (
c
 - '0');

611 i‡(
c
 == '.') {

612 
vîsi⁄
 +
vî
 * 
sˇÀ
;

613 
vî
 = 0;

614 
sˇÀ
 /= 100;

618 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

619 "övÆid brow£∏vîsi⁄ \"%V\"", &
vÆue
[2]);

621  
NGX_CONF_ERROR
;

624 
vîsi⁄
 +
vî
 * 
sˇÀ
;

626 
brow£r
->
vîsi⁄
 = version;

628  
NGX_CONF_OK
;

629 
	}
}

633 
	$ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

635 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

637 
ngx_°r_t
 *
vÆue
, *
brow£r
;

638 
ngx_uöt_t
 
i
;

640 
vÆue
 = 
cf
->
¨gs
->
ñts
;

642 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

643 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "netscape4") == 0) {

644 
bcf
->
√tsˇ≥4
 = 1;

648 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

649 
bcf
->
™cõ¡_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

650 (
ngx_°r_t
));

651 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

652  
NGX_CONF_ERROR
;

656 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
™cõ¡_brow£rs
);

657 i‡(
brow£r
 =
NULL
) {

658  
NGX_CONF_ERROR
;

661 *
brow£r
 = 
vÆue
[
i
];

664  
NGX_CONF_OK
;

665 
	}
}

669 
	$ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

671 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

673 
ngx_°r_t
 *
vÆue
;

675 
bcf
->
modîn_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

676 (
ngx_hâp_v¨übÀ_vÆue_t
));

677 i‡(
bcf
->
modîn_brow£r_vÆue
 =
NULL
) {

678  
NGX_CONF_ERROR
;

681 
vÆue
 = 
cf
->
¨gs
->
ñts
;

683 
bcf
->
modîn_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

684 
bcf
->
modîn_brow£r_vÆue
->
vÆid
 = 1;

685 
bcf
->
modîn_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

686 
bcf
->
modîn_brow£r_vÆue
->
nŸ_found
 = 0;

687 
bcf
->
modîn_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

689  
NGX_CONF_OK
;

690 
	}
}

694 
	$ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

696 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

698 
ngx_°r_t
 *
vÆue
;

700 
bcf
->
™cõ¡_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

701 (
ngx_hâp_v¨übÀ_vÆue_t
));

702 i‡(
bcf
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

703  
NGX_CONF_ERROR
;

706 
vÆue
 = 
cf
->
¨gs
->
ñts
;

708 
bcf
->
™cõ¡_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

709 
bcf
->
™cõ¡_brow£r_vÆue
->
vÆid
 = 1;

710 
bcf
->
™cõ¡_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

711 
bcf
->
™cõ¡_brow£r_vÆue
->
nŸ_found
 = 0;

712 
bcf
->
™cõ¡_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

714  
NGX_CONF_OK
;

715 
	}
}

	@src/http/modules/ngx_http_charset_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_CHARSET_OFF
 -2

	)

14 
	#NGX_HTTP_NO_CHARSET
 -3

	)

15 
	#NGX_HTTP_CHARSET_VAR
 0x10000

	)

18 
	#NGX_UTF_LEN
 4

	)

20 
	#NGX_HTML_ENTITY_LEN
 (("&#1114111;"Ë- 1)

	)

24 
u_ch¨
 **
	mèbÀs
;

25 
ngx_°r_t
 
	m«me
;

27 
	mÀngth
:16;

28 
	mutf8
:1;

29 } 
	tngx_hâp_ch¨£t_t
;

33 
ngx_öt_t
 
	m§c
;

34 
ngx_öt_t
 
	md°
;

35 } 
	tngx_hâp_ch¨£t_ªcode_t
;

39 
ngx_öt_t
 
	m§c
;

40 
ngx_öt_t
 
	md°
;

41 
u_ch¨
 *
	m§c2d°
;

42 
u_ch¨
 *
	md°2§c
;

43 } 
	tngx_hâp_ch¨£t_èbÀs_t
;

47 
ngx_¨øy_t
 
	mch¨£ts
;

48 
ngx_¨øy_t
 
	mèbÀs
;

49 
ngx_¨øy_t
 
	mªcodes
;

50 } 
	tngx_hâp_ch¨£t_maö_c⁄f_t
;

54 
ngx_öt_t
 
	mch¨£t
;

55 
ngx_öt_t
 
	msour˚_ch¨£t
;

56 
ngx_Êag_t
 
	movîride_ch¨£t
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 } 
	tngx_hâp_ch¨£t_loc_c⁄f_t
;

64 
u_ch¨
 *
	mèbÀ
;

65 
ngx_öt_t
 
	mch¨£t
;

66 
ngx_°r_t
 
	mch¨£t_«me
;

68 
ngx_chaö_t
 *
	mbusy
;

69 
ngx_chaö_t
 *
	m‰ì_bufs
;

70 
ngx_chaö_t
 *
	m‰ì_buf„rs
;

72 
size_t
 
	mßved_Àn
;

73 
u_ch¨
 
	mßved
[
NGX_UTF_LEN
];

75 
	mÀngth
:16;

76 
	m‰om_utf8
:1;

77 
	mto_utf8
:1;

78 } 
	tngx_hâp_ch¨£t_˘x_t
;

82 
ngx_hâp_ch¨£t_èbÀs_t
 *
	mèbÀ
;

83 
ngx_hâp_ch¨£t_t
 *
	mch¨£t
;

84 
ngx_uöt_t
 
	mch¨a˘îs
;

85 } 
	tngx_hâp_ch¨£t_c⁄f_˘x_t
;

88 
ngx_öt_t
 
ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_°r_t
 *
«me
);

90 
ngx_öt_t
 
ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_°r_t
 *
«me
);

92 
ngx_öt_t
 
ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_°r_t
 *
«me
);

94 
ngx_öt_t
 
ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

95 
ngx_ölöe
 
ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_°r_t
 *
ch¨£t
);

97 
ngx_öt_t
 
ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
, 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
);

99 
ngx_uöt_t
 
ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
);

100 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

101 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

102 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

103 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

105 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
,

106 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

107 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
,

108 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
, 
size_t
 
size
);

110 *
ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

111 *
c⁄f
);

112 *
ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

113 *
c⁄f
);

115 *
ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

116 *
c⁄f
);

117 
ngx_öt_t
 
ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
);

119 *
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

120 *
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

121 *
ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

122 *
∑ª¡
, *
chûd
);

123 
ngx_öt_t
 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

126 
ngx_°r_t
 
	gngx_hâp_ch¨£t_deÁu…_ty≥s
[] = {

127 
ngx_°rög
("text/html"),

128 
ngx_°rög
("text/xml"),

129 
ngx_°rög
("text/plain"),

130 
ngx_°rög
("text/vnd.wap.wml"),

131 
ngx_°rög
("application/javascript"),

132 
ngx_°rög
("application/rss+xml"),

133 
ngx_nuŒ_°rög


137 
ngx_comm™d_t
 
	gngx_hâp_ch¨£t_fûãr_comm™ds
[] = {

139 { 
ngx_°rög
("charset"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


141 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

142 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
),

145 
NULL
 },

147 { 
ngx_°rög
("source_charset"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


149 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
sour˚_ch¨£t
),

153 
NULL
 },

155 { 
ngx_°rög
("override_charset"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


157 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

158 
ngx_c⁄f_£t_Êag_¶Ÿ
,

159 
NGX_HTTP_LOC_CONF_OFFSET
,

160 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ovîride_ch¨£t
),

161 
NULL
 },

163 { 
ngx_°rög
("charset_types"),

164 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

165 
ngx_hâp_ty≥s_¶Ÿ
,

166 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ty≥s_keys
),

168 &
ngx_hâp_ch¨£t_deÁu…_ty≥s
[0] },

170 { 
ngx_°rög
("charset_map"),

171 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

172 
ngx_hâp_ch¨£t_m≠_block
,

173 
NGX_HTTP_MAIN_CONF_OFFSET
,

175 
NULL
 },

177 
ngx_nuŒ_comm™d


181 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ_˘x
 = {

182 
NULL
,

183 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
,

185 
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
,

186 
NULL
,

188 
NULL
,

189 
NULL
,

191 
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
,

192 
ngx_hâp_ch¨£t_mîge_loc_c⁄f


196 
ngx_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ
 = {

197 
NGX_MODULE_V1
,

198 &
ngx_hâp_ch¨£t_fûãr_moduÀ_˘x
,

199 
ngx_hâp_ch¨£t_fûãr_comm™ds
,

200 
NGX_HTTP_MODULE
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NGX_MODULE_V1_PADDING


212 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

213 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

216 
ngx_öt_t


217 
	$ngx_hâp_ch¨£t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

219 
ngx_öt_t
 
ch¨£t
, 
sour˚_ch¨£t
;

220 
ngx_°r_t
 
d°
, 
§c
;

221 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

222 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

224 i‡(
r
 =r->
maö
) {

225 
ch¨£t
 = 
	`ngx_hâp_de°ö©i⁄_ch¨£t
(
r
, &
d°
);

228 
ch¨£t
 = 
	`ngx_hâp_maö_ªque°_ch¨£t
(
r
, &
d°
);

231 i‡(
ch¨£t
 =
NGX_ERROR
) {

232  
NGX_ERROR
;

235 i‡(
ch¨£t
 =
NGX_DECLINED
) {

236  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

241 
sour˚_ch¨£t
 = 
	`ngx_hâp_sour˚_ch¨£t
(
r
, &
§c
);

243 i‡(
sour˚_ch¨£t
 =
NGX_ERROR
) {

244  
NGX_ERROR
;

252 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

253 "ch¨£t: \"%V\" > \"%V\"", &
§c
, &
d°
);

255 i‡(
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

256 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

258  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

261 i‡(
ch¨£t
 =
NGX_HTTP_NO_CHARSET


262 || 
sour˚_ch¨£t
 =
NGX_HTTP_NO_CHARSET
)

264 i‡(
sour˚_ch¨£t
 !
ch¨£t


265 || 
	`ngx_°∫ˇ£cmp
(
d°
.
d©a
, 
§c
.d©a, d°.
Àn
) != 0)

267 
no_ch¨£t_m≠
;

270 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

272  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

275 i‡(
sour˚_ch¨£t
 =
ch¨£t
) {

276 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥_Àn
;

278 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

280  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

285 i‡(
r
->
hódîs_out
.
c⁄ã¡_ícodög


286 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

288  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

291 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

292 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

294 i‡(
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
 =
NULL


295 || 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
] =
NULL
)

297 
no_ch¨£t_m≠
;

300 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥_Àn
;

302 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

304  
	`ngx_hâp_ch¨£t_˘x
(
r
, 
ch¨£ts
, 
ch¨£t
, 
sour˚_ch¨£t
);

306 
no_ch¨£t_m≠
:

308 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

310 &
§c
, &
d°
);

312  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

313 
	}
}

316 
ngx_öt_t


317 
	$ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

319 
ngx_öt_t
 
ch¨£t
;

320 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

321 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

322 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
mlcf
;

323 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

325 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

326  
NGX_DECLINED
;

329 i‡(
r
->
hódîs_out
.
ovîride_ch¨£t


330 && 
r
->
hódîs_out
.
ovîride_ch¨£t
->
Àn
)

332 *
«me
 = *
r
->
hódîs_out
.
ovîride_ch¨£t
;

334 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

336 i‡(
ch¨£t
 !
NGX_HTTP_NO_CHARSET
) {

337  
ch¨£t
;

340 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

341 "unknow¿ch¨£à\"%V\"Åÿovîride", 
«me
);

343  
NGX_DECLINED
;

346 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

347 
ch¨£t
 = 
mlcf
->charset;

349 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

350  
NGX_DECLINED
;

353 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

354 i‡(
mlcf
->
ovîride_ch¨£t
 == 0) {

355  
NGX_DECLINED
;

359 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
mlcf
->
ty≥s
Ë=
NULL
) {

360  
NGX_DECLINED
;

364 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

365 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

366 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

367 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

368  
ch¨£t
;

371 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

373 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

374  
NGX_ERROR
;

377 
«me
->
Àn
 = 
vv
->len;

378 
«me
->
d©a
 = 
vv
->data;

380  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

381 
	}
}

384 
ngx_öt_t


385 
	$ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
§c
)

387 
ngx_öt_t
 
ch¨£t
;

388 
ngx_°r_t
 *
maö_ch¨£t
;

389 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

391 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

393 i‡(
˘x
) {

394 *
§c
 = 
˘x
->
ch¨£t_«me
;

395  
˘x
->
ch¨£t
;

398 
maö_ch¨£t
 = &
r
->
maö
->
hódîs_out
.
ch¨£t
;

400 i‡(
maö_ch¨£t
->
Àn
 == 0) {

401  
NGX_DECLINED
;

404 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

405 i‡(
˘x
 =
NULL
) {

406  
NGX_ERROR
;

409 
	`ngx_hâp_£t_˘x
(
r
->
maö
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

411 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
maö_ch¨£t
);

413 
˘x
->
ch¨£t
 = charset;

414 
˘x
->
ch¨£t_«me
 = *
maö_ch¨£t
;

415 *
§c
 = *
maö_ch¨£t
;

417  
ch¨£t
;

418 
	}
}

421 
ngx_öt_t


422 
	$ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

424 
ngx_öt_t
 
ch¨£t
;

425 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

426 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

427 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

428 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

430 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

431 *
«me
 = 
r
->
hódîs_out
.
ch¨£t
;

432  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

435 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

437 
ch¨£t
 = 
lcf
->
sour˚_ch¨£t
;

439 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

440 
«me
->
Àn
 = 0;

441  
ch¨£t
;

444 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

445 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

446 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

447 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

448  
ch¨£t
;

451 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

453 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

454  
NGX_ERROR
;

457 
«me
->
Àn
 = 
vv
->len;

458 
«me
->
d©a
 = 
vv
->data;

460  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

461 
	}
}

464 
ngx_öt_t


465 
	$ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

467 
ngx_uöt_t
 
i
, 
n
;

468 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

469 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

471 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

473 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

474 
n
 = 
mcf
->
ch¨£ts
.
√…s
;

476 
i
 = 0; i < 
n
; i++) {

477 i‡(
ch¨£t
[
i
].
«me
.
Àn
 !=Çame->len) {

481 i‡(
	`ngx_°∫ˇ£cmp
(
ch¨£t
[
i
].
«me
.
d©a
,Çame->d©a,Çame->
Àn
) == 0) {

482  
i
;

486  
NGX_HTTP_NO_CHARSET
;

487 
	}
}

490 
ngx_ölöe
 

491 
	$ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ch¨£t
)

493 i‡(
r
 !r->
maö
) {

497 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


498 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY
)

505 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

509 
r
->
hódîs_out
.
ch¨£t
 = *charset;

510 
	}
}

513 
ngx_öt_t


514 
	$ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
,

515 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
)

517 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

519 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

520 i‡(
˘x
 =
NULL
) {

521  
NGX_ERROR
;

524 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

526 
˘x
->
èbÀ
 = 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
];

527 
˘x
->
ch¨£t
 = charset;

528 
˘x
->
ch¨£t_«me
 = 
ch¨£ts
[
ch¨£t
].
«me
;

529 
˘x
->
Àngth
 = 
ch¨£ts
[
ch¨£t
].length;

530 
˘x
->
‰om_utf8
 = 
ch¨£ts
[
sour˚_ch¨£t
].
utf8
;

531 
˘x
->
to_utf8
 = 
ch¨£ts
[
ch¨£t
].
utf8
;

533 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

535 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë&& 
r
 =r->
maö
) {

536 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

539 
r
->
fûãr_√ed_ãmp‹¨y
 = 1;

542  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

543 
	}
}

546 
ngx_öt_t


547 
	$ngx_hâp_ch¨£t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

549 
ngx_öt_t
 
rc
;

550 
ngx_buf_t
 *
b
;

551 
ngx_chaö_t
 *
˛
, *
out
, **
Œ
;

552 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

554 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

556 i‡(
˘x
 =
NULL
 || ctx->
èbÀ
 == NULL) {

557  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

560 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë|| ctx->
busy
) {

562 
out
 = 
NULL
;

563 
Œ
 = &
out
;

565 
˛
 = 
ö
; cl; c»˛->
√xt
) {

566 
b
 = 
˛
->
buf
;

568 i‡(
	`ngx_buf_size
(
b
) == 0) {

570 *
Œ
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

571 i‡(*
Œ
 =
NULL
) {

572  
NGX_ERROR
;

575 (*
Œ
)->
buf
 = 
b
;

576 (*
Œ
)->
√xt
 = 
NULL
;

578 
Œ
 = &(*Œ)->
√xt
;

583 i‡(
˘x
->
to_utf8
) {

584 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_to_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

587 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

590 i‡(*
Œ
 =
NULL
) {

591  
NGX_ERROR
;

594 *
Œ
) {

595 
Œ
 = &(*Œ)->
√xt
;

599 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

601 i‡(
out
) {

602 i‡(
˘x
->
busy
 =
NULL
) {

603 
˘x
->
busy
 = 
out
;

606 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

607 
˛
->
√xt
 = 
out
;

611 
˘x
->
busy
) {

613 
˛
 = 
˘x
->
busy
;

614 
b
 = 
˛
->
buf
;

616 i‡(
	`ngx_buf_size
(
b
) != 0) {

620 
˘x
->
busy
 = 
˛
->
√xt
;

622 i‡(
b
->
èg
 !(
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
) {

626 i‡(
b
->
shadow
) {

627 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

630 i‡(
b
->
pos
) {

631 
˛
->
√xt
 = 
˘x
->
‰ì_buf„rs
;

632 
˘x
->
‰ì_buf„rs
 = 
˛
;

636 
˛
->
√xt
 = 
˘x
->
‰ì_bufs
;

637 
˘x
->
‰ì_bufs
 = 
˛
;

640  
rc
;

643 
˛
 = 
ö
; cl; c»˛->
√xt
) {

644 (Ë
	`ngx_hâp_ch¨£t_ªcode
(
˛
->
buf
, 
˘x
->
èbÀ
);

647  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

648 
	}
}

651 
ngx_uöt_t


652 
	$ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
)

654 
u_ch¨
 *
p
, *
œ°
;

656 
œ°
 = 
b
->last;

658 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

660 i‡(*
p
 !
èbÀ
[*p]) {

661 
ªcode
;

667 
ªcode
:

670 i‡(*
p
 !
èbÀ
[*p]) {

671 *
p
 = 
èbÀ
[*p];

674 
p
++;

676 } 
p
 < 
œ°
);

678 
b
->
ö_fûe
 = 0;

681 
	}
}

684 
ngx_chaö_t
 *

685 
	$ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

686 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

688 
size_t
 
Àn
, 
size
;

689 
u_ch¨
 
c
, *
p
, *
§c
, *
d°
, *
ßved
, **
èbÀ
;

690 
uöt32_t
 
n
;

691 
ngx_buf_t
 *
b
;

692 
ngx_uöt_t
 
i
;

693 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

695 
§c
 = 
buf
->
pos
;

697 i‡(
˘x
->
ßved_Àn
 == 0) {

699  ; 
§c
 < 
buf
->
œ°
; src++) {

701 i‡(*
§c
 < 0x80) {

705 
Àn
 = 
§c
 - 
buf
->
pos
;

707 i‡(
Àn
 > 512) {

708 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

709 i‡(
out
 =
NULL
) {

710  
NULL
;

713 
b
 = 
out
->
buf
;

715 
b
->
ãmp‹¨y
 = 
buf
->temporary;

716 
b
->
mem‹y
 = 
buf
->memory;

717 
b
->
mm≠
 = 
buf
->mmap;

718 
b
->
Êush
 = 
buf
->flush;

720 
b
->
pos
 = 
buf
->pos;

721 
b
->
œ°
 = 
§c
;

723 
out
->
buf
 = 
b
;

724 
out
->
√xt
 = 
NULL
;

726 
size
 = 
buf
->
œ°
 - 
§c
;

728 
ßved
 = 
§c
;

729 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
size
);

731 i‡(
n
 == 0xfffffffe) {

734 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
size
);

735 
˘x
->
ßved_Àn
 = 
size
;

737 
b
->
shadow
 = 
buf
;

739  
out
;

743 
out
 = 
NULL
;

744 
size
 = 
Àn
 + 
buf
->
œ°
 - 
§c
;

745 
§c
 = 
buf
->
pos
;

748 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

749 
size
 +
NGX_HTML_ENTITY_LEN
;

752 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

753 i‡(
˛
 =
NULL
) {

754  
NULL
;

757 i‡(
out
) {

758 
out
->
√xt
 = 
˛
;

761 
out
 = 
˛
;

764 
b
 = 
˛
->
buf
;

765 
d°
 = 
b
->
pos
;

767 
ªcode
;

770 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

771 i‡(
out
 =
NULL
) {

772  
NULL
;

775 
out
->
buf
 = buf;

776 
out
->
√xt
 = 
NULL
;

778  
out
;

783 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

784 "hâ∞ch¨£àut‡ßved: %z", 
˘x
->
ßved_Àn
);

786 
p
 = 
§c
;

788 
i
 = 
˘x
->
ßved_Àn
; i < 
NGX_UTF_LEN
; i++) {

789 
˘x
->
ßved
[
i
] = *
p
++;

791 i‡(
p
 =
buf
->
œ°
) {

796 
ßved
 = 
˘x
->saved;

797 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
i
);

799 
c
 = '\0';

801 i‡(
n
 < 0x10000) {

802 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

803 
p
 = 
èbÀ
[
n
 >> 8];

805 i‡(
p
) {

806 
c
 = 
p
[
n
 & 0xff];

809 } i‡(
n
 == 0xfffffffe) {

813 i‡(
i
 < 
NGX_UTF_LEN
) {

814 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

815 i‡(
out
 =
NULL
) {

816  
NULL
;

819 
b
 = 
out
->
buf
;

821 
b
->
pos
 = 
buf
->pos;

822 
b
->
œ°
 = 
buf
->last;

823 
b
->
sync
 = 1;

824 
b
->
shadow
 = 
buf
;

826 
	`ngx_mem˝y
(&
˘x
->
ßved
[˘x->
ßved_Àn
], 
§c
, 
i
);

827 
˘x
->
ßved_Àn
 +
i
;

829  
out
;

833 
size
 = 
buf
->
œ°
 - buf->
pos
;

835 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

836 
size
 +
NGX_HTML_ENTITY_LEN
;

839 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

840 i‡(
˛
 =
NULL
) {

841  
NULL
;

844 
out
 = 
˛
;

846 
b
 = 
˛
->
buf
;

847 
d°
 = 
b
->
pos
;

849 i‡(
c
) {

850 *
d°
++ = 
c
;

852 } i‡(
n
 == 0xfffffffe) {

853 *
d°
++ = '?';

855 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

858 
ßved
 = &
˘x
->ßved[
NGX_UTF_LEN
];

860 } i‡(
n
 > 0x10ffff) {

861 *
d°
++ = '?';

863 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

867 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

870 
§c
 +(
ßved
 - 
˘x
->ßvedË- ctx->
ßved_Àn
;

871 
˘x
->
ßved_Àn
 = 0;

873 
ªcode
:

875 
Œ
 = &
˛
->
√xt
;

877 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

879 
§c
 < 
buf
->
œ°
) {

881 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
NGX_HTML_ENTITY_LEN
) {

882 
b
->
œ°
 = 
d°
;

884 
size
 = 
buf
->
œ°
 - 
§c
 + 
NGX_HTML_ENTITY_LEN
;

886 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

887 i‡(
˛
 =
NULL
) {

888  
NULL
;

891 *
Œ
 = 
˛
;

892 
Œ
 = &
˛
->
√xt
;

894 
b
 = 
˛
->
buf
;

895 
d°
 = 
b
->
pos
;

898 i‡(*
§c
 < 0x80) {

899 *
d°
++ = *
§c
++;

903 
Àn
 = 
buf
->
œ°
 - 
§c
;

905 
n
 = 
	`ngx_utf8_decode
(&
§c
, 
Àn
);

907 i‡(
n
 < 0x10000) {

909 
p
 = 
èbÀ
[
n
 >> 8];

911 i‡(
p
) {

912 
c
 = 
p
[
n
 & 0xff];

914 i‡(
c
) {

915 *
d°
++ = 
c
;

920 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

925 i‡(
n
 == 0xfffffffe) {

928 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
Àn
);

929 
˘x
->
ßved_Àn
 = 
Àn
;

931 i‡(
b
->
pos
 =
d°
) {

932 
b
->
sync
 = 1;

933 
b
->
ãmp‹¨y
 = 0;

939 i‡(
n
 > 0x10ffff) {

940 *
d°
++ = '?';

942 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

950 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

953 
b
->
œ°
 = 
d°
;

955 
b
->
œ°_buf
 = 
buf
->last_buf;

956 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

957 
b
->
Êush
 = 
buf
->flush;

959 
b
->
shadow
 = 
buf
;

961  
out
;

962 
	}
}

965 
ngx_chaö_t
 *

966 
	$ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

967 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

969 
size_t
 
Àn
, 
size
;

970 
u_ch¨
 *
p
, *
§c
, *
d°
, *
èbÀ
;

971 
ngx_buf_t
 *
b
;

972 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

974 
èbÀ
 = 
˘x
->table;

976 
§c
 = 
buf
->
pos
; sr¯< buf->
œ°
; src++) {

977 i‡(
èbÀ
[*
§c
 * 
NGX_UTF_LEN
] == '\1') {

981 
ªcode
;

984 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

985 i‡(
out
 =
NULL
) {

986  
NULL
;

989 
out
->
buf
 = buf;

990 
out
->
√xt
 = 
NULL
;

992  
out
;

994 
ªcode
:

1001 
Àn
 = 
§c
 - 
buf
->
pos
;

1003 i‡(
Àn
 > 512) {

1004 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

1005 i‡(
out
 =
NULL
) {

1006  
NULL
;

1009 
b
 = 
out
->
buf
;

1011 
b
->
ãmp‹¨y
 = 
buf
->temporary;

1012 
b
->
mem‹y
 = 
buf
->memory;

1013 
b
->
mm≠
 = 
buf
->mmap;

1014 
b
->
Êush
 = 
buf
->flush;

1016 
b
->
pos
 = 
buf
->pos;

1017 
b
->
œ°
 = 
§c
;

1019 
out
->
buf
 = 
b
;

1020 
out
->
√xt
 = 
NULL
;

1022 
size
 = 
buf
->
œ°
 - 
§c
;

1023 
size
 = sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1026 
out
 = 
NULL
;

1028 
size
 = 
buf
->
œ°
 - 
§c
;

1029 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1031 
§c
 = 
buf
->
pos
;

1034 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1035 i‡(
˛
 =
NULL
) {

1036  
NULL
;

1039 i‡(
out
) {

1040 
out
->
√xt
 = 
˛
;

1043 
out
 = 
˛
;

1046 
Œ
 = &
˛
->
√xt
;

1048 
b
 = 
˛
->
buf
;

1049 
d°
 = 
b
->
pos
;

1051 
§c
 < 
buf
->
œ°
) {

1053 
p
 = &
èbÀ
[*
§c
++ * 
NGX_UTF_LEN
];

1054 
Àn
 = *
p
++;

1056 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
Àn
) {

1057 
b
->
œ°
 = 
d°
;

1059 
size
 = 
buf
->
œ°
 - 
§c
;

1060 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1062 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1063 i‡(
˛
 =
NULL
) {

1064  
NULL
;

1067 *
Œ
 = 
˛
;

1068 
Œ
 = &
˛
->
√xt
;

1070 
b
 = 
˛
->
buf
;

1071 
d°
 = 
b
->
pos
;

1074 
Àn
) {

1075 *
d°
++ = *
p
++;

1076 
Àn
--;

1080 
b
->
œ°
 = 
d°
;

1082 
b
->
œ°_buf
 = 
buf
->last_buf;

1083 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

1084 
b
->
Êush
 = 
buf
->flush;

1086 
b
->
shadow
 = 
buf
;

1088  
out
;

1089 
	}
}

1092 
ngx_chaö_t
 *

1093 
	$ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

1095 
ngx_chaö_t
 *
˛
;

1097 
˛
 = 
˘x
->
‰ì_bufs
;

1099 i‡(
˛
) {

1100 
˘x
->
‰ì_bufs
 = 
˛
->
√xt
;

1102 
˛
->
buf
->
shadow
 = 
NULL
;

1103 
˛
->
√xt
 = 
NULL
;

1105  
˛
;

1108 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1109 i‡(
˛
 =
NULL
) {

1110  
NULL
;

1113 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

1114 i‡(
˛
->
buf
 =
NULL
) {

1115  
NULL
;

1118 
˛
->
√xt
 = 
NULL
;

1120 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1122  
˛
;

1123 
	}
}

1126 
ngx_chaö_t
 *

1127 
	$ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
,

1128 
size_t
 
size
)

1130 
ngx_buf_t
 *
b
;

1131 
ngx_chaö_t
 *
˛
, **
Œ
;

1133 
Œ
 = &
˘x
->
‰ì_buf„rs
, 
˛
 = ctx->free_buffers;

1134 
˛
;

1135 
Œ
 = &
˛
->
√xt
, cl = cl->next)

1137 
b
 = 
˛
->
buf
;

1139 i‡((
size_t
Ë(
b
->
íd
 - b->
°¨t
Ë>
size
) {

1140 *
Œ
 = 
˛
->
√xt
;

1141 
˛
->
√xt
 = 
NULL
;

1143 
b
->
pos
 = b->
°¨t
;

1144 
b
->
ãmp‹¨y
 = 1;

1145 
b
->
shadow
 = 
NULL
;

1147  
˛
;

1151 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1152 i‡(
˛
 =
NULL
) {

1153  
NULL
;

1156 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
size
);

1157 i‡(
˛
->
buf
 =
NULL
) {

1158  
NULL
;

1161 
˛
->
√xt
 = 
NULL
;

1163 
˛
->
buf
->
ãmp‹¨y
 = 1;

1164 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1166  
˛
;

1167 
	}
}

1171 
	$ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1173 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
 = 
c⁄f
;

1175 *
rv
;

1176 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1177 
ngx_öt_t
 
§c
, 
d°
;

1178 
ngx_uöt_t
 
i
, 
n
;

1179 
ngx_°r_t
 *
vÆue
;

1180 
ngx_c⁄f_t
 
pvcf
;

1181 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1182 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1183 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 
˘x
;

1185 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1187 
§c
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1188 i‡(
§c
 =
NGX_ERROR
) {

1189  
NGX_CONF_ERROR
;

1192 
d°
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[2]);

1193 i‡(
d°
 =
NGX_ERROR
) {

1194  
NGX_CONF_ERROR
;

1197 i‡(
§c
 =
d°
) {

1198 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1200 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1201  
NGX_CONF_ERROR
;

1204 
èbÀ
 = 
mcf
->
èbÀs
.
ñts
;

1205 
i
 = 0; i < 
mcf
->
èbÀs
.
√…s
; i++) {

1206 i‡((
§c
 =
èbÀ
->§¯&& 
d°
 ==Åable->dst)

1207 || (
§c
 =
èbÀ
->
d°
 && dst ==Åable->src))

1209 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1211 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1212  
NGX_CONF_ERROR
;

1216 
èbÀ
 = 
	`ngx_¨øy_push
(&
mcf
->
èbÀs
);

1217 i‡(
èbÀ
 =
NULL
) {

1218  
NGX_CONF_ERROR
;

1221 
èbÀ
->
§c
 = src;

1222 
èbÀ
->
d°
 = dst;

1224 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[2].
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1225 
èbÀ
->
§c2d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * 
NGX_UTF_LEN
);

1226 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1227  
NGX_CONF_ERROR
;

1230 
èbÀ
->
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * (*));

1231 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1232  
NGX_CONF_ERROR
;

1235 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1236 i‡(
d°2§c
 =
NULL
) {

1237  
NGX_CONF_ERROR
;

1240 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1241 
µ
[0] = 
d°2§c
;

1243 
i
 = 0; i < 128; i++) {

1244 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1245 
p
[0] = '\1';

1246 
p
[1] = (
u_ch¨
Ë
i
;

1247 
d°2§c
[
i
] = (
u_ch¨
) i;

1250  ; 
i
 < 256; i++) {

1251 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1252 
p
[0] = '\1';

1253 
p
[1] = '?';

1257 
èbÀ
->
§c2d°
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1258 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1259  
NGX_CONF_ERROR
;

1262 
èbÀ
->
d°2§c
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1263 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1264  
NGX_CONF_ERROR
;

1267 
i
 = 0; i < 128; i++) {

1268 
èbÀ
->
§c2d°
[
i
] = (
u_ch¨
) i;

1269 
èbÀ
->
d°2§c
[
i
] = (
u_ch¨
) i;

1272  ; 
i
 < 256; i++) {

1273 
èbÀ
->
§c2d°
[
i
] = '?';

1274 
èbÀ
->
d°2§c
[
i
] = '?';

1278 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1280 
˘x
.
èbÀ
 =Åable;

1281 
˘x
.
ch¨£t
 = &ch¨£t[
d°
];

1282 
˘x
.
ch¨a˘îs
 = 0;

1284 
pvcf
 = *
cf
;

1285 
cf
->
˘x
 = &ctx;

1286 
cf
->
h™dÀr
 = 
ngx_hâp_ch¨£t_m≠
;

1287 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

1289 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

1291 *
cf
 = 
pvcf
;

1293 i‡(
˘x
.
ch¨a˘îs
) {

1294 
n
 = 
˘x
.
ch¨£t
->
Àngth
;

1295 
˘x
.
ch¨£t
->
Àngth
 /˘x.
ch¨a˘îs
;

1297 i‡(((
n
 * 10Ë/ 
˘x
.
ch¨a˘îs
) % 10 > 4) {

1298 
˘x
.
ch¨£t
->
Àngth
++;

1302  
rv
;

1303 
	}
}

1307 
	$ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

1309 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1310 
uöt32_t
 
n
;

1311 
ngx_öt_t
 
§c
, 
d°
;

1312 
ngx_°r_t
 *
vÆue
;

1313 
ngx_uöt_t
 
i
;

1314 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1315 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 *
˘x
;

1317 i‡(
cf
->
¨gs
->
√…s
 != 2) {

1318 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarametersÇumber");

1319  
NGX_CONF_ERROR
;

1322 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1324 
§c
 = 
	`ngx_hextoi
(
vÆue
[0].
d©a
, vÆue[0].
Àn
);

1325 i‡(
§c
 =
NGX_ERROR
 || src > 255) {

1326 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1327 "övÆid vÆuê\"%V\"", &
vÆue
[0]);

1328  
NGX_CONF_ERROR
;

1331 
˘x
 = 
cf
->ctx;

1332 
èbÀ
 = 
˘x
->table;

1334 i‡(
˘x
->
ch¨£t
->
utf8
) {

1335 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
];

1337 *
p
++ = (
u_ch¨
Ë(
vÆue
[1].
Àn
 / 2);

1339 
i
 = 0; i < 
vÆue
[1].
Àn
; i += 2) {

1340 
d°
 = 
	`ngx_hextoi
(&
vÆue
[1].
d©a
[
i
], 2);

1341 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1342 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1343 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1344  
NGX_CONF_ERROR
;

1347 *
p
++ = (
u_ch¨
Ë
d°
;

1350 
i
 /= 2;

1352 
˘x
->
ch¨£t
->
Àngth
 +
i
;

1353 
˘x
->
ch¨a˘îs
++;

1355 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
] + 1;

1357 
n
 = 
	`ngx_utf8_decode
(&
p
, 
i
);

1359 i‡(
n
 > 0xffff) {

1360 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1361 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1362  
NGX_CONF_ERROR
;

1365 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1367 
d°2§c
 = 
µ
[
n
 >> 8];

1369 i‡(
d°2§c
 =
NULL
) {

1370 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1371 i‡(
d°2§c
 =
NULL
) {

1372  
NGX_CONF_ERROR
;

1375 
µ
[
n
 >> 8] = 
d°2§c
;

1378 
d°2§c
[
n
 & 0xff] = (
u_ch¨
Ë
§c
;

1381 
d°
 = 
	`ngx_hextoi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1382 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1383 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1384 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1385  
NGX_CONF_ERROR
;

1388 
èbÀ
->
§c2d°
[
§c
] = (
u_ch¨
Ë
d°
;

1389 
èbÀ
->
d°2§c
[
d°
] = (
u_ch¨
Ë
§c
;

1392  
NGX_CONF_OK
;

1393 
	}
}

1397 
	$ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1399 *
p
 = 
c⁄f
;

1401 
ngx_öt_t
 *
˝
;

1402 
ngx_°r_t
 *
vÆue
, 
v¨
;

1403 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1405 
˝
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1407 i‡(*
˝
 !
NGX_CONF_UNSET
) {

1411 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1413 i‡(
cmd
->
off£t
 =
	`off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
)

1414 && 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0)

1416 *
˝
 = 
NGX_HTTP_CHARSET_OFF
;

1417  
NGX_CONF_OK
;

1421 i‡(
vÆue
[1].
d©a
[0] == '$') {

1422 
v¨
.
Àn
 = 
vÆue
[1].len - 1;

1423 
v¨
.
d©a
 = 
vÆue
[1].data + 1;

1425 *
˝
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
v¨
);

1427 i‡(*
˝
 =
NGX_ERROR
) {

1428  
NGX_CONF_ERROR
;

1431 *
˝
 +
NGX_HTTP_CHARSET_VAR
;

1433  
NGX_CONF_OK
;

1436 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1437 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1439 *
˝
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1440 i‡(*
˝
 =
NGX_ERROR
) {

1441  
NGX_CONF_ERROR
;

1444  
NGX_CONF_OK
;

1445 
	}
}

1448 
ngx_öt_t


1449 
	$ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
)

1451 
ngx_uöt_t
 
i
;

1452 
ngx_hâp_ch¨£t_t
 *
c
;

1454 
c
 = 
ch¨£ts
->
ñts
;

1455 
i
 = 0; i < 
ch¨£ts
->
√…s
; i++) {

1456 i‡(
«me
->
Àn
 !
c
[
i
].name.len) {

1460 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, 
c
[
i
].name.data) == 0) {

1465 i‡(
i
 < 
ch¨£ts
->
√…s
) {

1466  
i
;

1469 
c
 = 
	`ngx_¨øy_push
(
ch¨£ts
);

1470 i‡(
c
 =
NULL
) {

1471  
NGX_ERROR
;

1474 
c
->
èbÀs
 = 
NULL
;

1475 
c
->
«me
 = *name;

1476 
c
->
Àngth
 = 0;

1478 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1479 
c
->
utf8
 = 1;

1482 
c
->
utf8
 = 0;

1485  
i
;

1486 
	}
}

1490 
	$ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1492 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1494 
mcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_maö_c⁄f_t
));

1495 i‡(
mcf
 =
NULL
) {

1496  
NULL
;

1499 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ch¨£ts
, 
cf
->
poﬁ
, 2, (
ngx_hâp_ch¨£t_t
))

1500 !
NGX_OK
)

1502  
NULL
;

1505 i‡(
	`ngx_¨øy_öô
(&
mcf
->
èbÀs
, 
cf
->
poﬁ
, 1,

1506 (
ngx_hâp_ch¨£t_èbÀs_t
))

1507 !
NGX_OK
)

1509  
NULL
;

1512 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ªcodes
, 
cf
->
poﬁ
, 2,

1513 (
ngx_hâp_ch¨£t_ªcode_t
))

1514 !
NGX_OK
)

1516  
NULL
;

1519  
mcf
;

1520 
	}
}

1524 
	$ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1526 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

1528 
lcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_loc_c⁄f_t
));

1529 i‡(
lcf
 =
NULL
) {

1530  
NULL
;

1540 
lcf
->
ch¨£t
 = 
NGX_CONF_UNSET
;

1541 
lcf
->
sour˚_ch¨£t
 = 
NGX_CONF_UNSET
;

1542 
lcf
->
ovîride_ch¨£t
 = 
NGX_CONF_UNSET
;

1544  
lcf
;

1545 
	}
}

1549 
	$ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1551 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1552 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1554 
ngx_uöt_t
 
i
;

1555 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1556 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1558 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1559 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1560 
ngx_hâp_ch¨£t_deÁu…_ty≥s
)

1561 !
NGX_OK
)

1563  
NGX_CONF_ERROR
;

1566 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ovîride_ch¨£t
, 
¥ev
->override_charset, 0);

1567 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ch¨£t
, 
¥ev
->ch¨£t, 
NGX_HTTP_CHARSET_OFF
);

1568 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sour˚_ch¨£t
, 
¥ev
->source_charset,

1569 
NGX_HTTP_CHARSET_OFF
);

1571 i‡(
c⁄f
->
ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1572 || 
c⁄f
->
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1573 || 
c⁄f
->
ch¨£t
 =c⁄f->
sour˚_ch¨£t
)

1575  
NGX_CONF_OK
;

1578 i‡(
c⁄f
->
sour˚_ch¨£t
 >
NGX_HTTP_CHARSET_VAR


1579 || 
c⁄f
->
ch¨£t
 >
NGX_HTTP_CHARSET_VAR
)

1581  
NGX_CONF_OK
;

1584 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1585 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1586 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1587 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1588 i‡(
c⁄f
->
sour˚_ch¨£t
 =
ªcode
[
i
].
§c


1589 && 
c⁄f
->
ch¨£t
 =
ªcode
[
i
].
d°
)

1591  
NGX_CONF_OK
;

1595 
ªcode
 = 
	`ngx_¨øy_push
(&
mcf
->
ªcodes
);

1596 i‡(
ªcode
 =
NULL
) {

1597  
NGX_CONF_ERROR
;

1600 
ªcode
->
§c
 = 
c⁄f
->
sour˚_ch¨£t
;

1601 
ªcode
->
d°
 = 
c⁄f
->
ch¨£t
;

1603  
NGX_CONF_OK
;

1604 
	}
}

1607 
ngx_öt_t


1608 
	$ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1610 
u_ch¨
 **
§c
, **
d°
;

1611 
ngx_öt_t
 
c
;

1612 
ngx_uöt_t
 
i
, 
t
;

1613 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1614 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1615 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀs
;

1616 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1618 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1619 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1621 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1622 
èbÀs
 = 
mcf
->èbÀs.
ñts
;

1623 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1625 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1627 
c
 = 
ªcode
[
i
].
§c
;

1629 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1631 i‡(
c
 =
èbÀs
[
t
].
§c
 && 
ªcode
[
i
].
d°
 ==Åables[t].dst) {

1632 
√xt
;

1635 i‡(
c
 =
èbÀs
[
t
].
d°
 && 
ªcode
[
i
].d° =èbÀs[t].
§c
) {

1636 
√xt
;

1640 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1642 &
ch¨£t
[
c
].
«me
, &ch¨£t[
ªcode
[
i
].
d°
].name);

1643  
NGX_ERROR
;

1645 
√xt
:

1650 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1652 
§c
 = 
ch¨£t
[
èbÀs
[
t
].src].tables;

1654 i‡(
§c
 =
NULL
) {

1655 
§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1656 i‡(
§c
 =
NULL
) {

1657  
NGX_ERROR
;

1660 
ch¨£t
[
èbÀs
[
t
].
§c
].tables = src;

1663 
d°
 = 
ch¨£t
[
èbÀs
[
t
].dst].tables;

1665 i‡(
d°
 =
NULL
) {

1666 
d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1667 i‡(
d°
 =
NULL
) {

1668  
NGX_ERROR
;

1671 
ch¨£t
[
èbÀs
[
t
].
d°
].tables = dst;

1674 
§c
[
èbÀs
[
t
].
d°
] =ÅabÀs[t].
§c2d°
;

1675 
d°
[
èbÀs
[
t
].
§c
] =ÅabÀs[t].
d°2§c
;

1678 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1679 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ch¨£t_hódî_fûãr
;

1681 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1682 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ch¨£t_body_fûãr
;

1684  
NGX_OK
;

1685 
	}
}

	@src/http/modules/ngx_http_chunked_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_chaö_t
 *
	m‰ì
;

15 
ngx_chaö_t
 *
	mbusy
;

16 } 
	tngx_hâp_chunked_fûãr_˘x_t
;

19 
ngx_öt_t
 
ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

22 
ngx_hâp_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ_˘x
 = {

23 
NULL
,

24 
ngx_hâp_chunked_fûãr_öô
,

26 
NULL
,

27 
NULL
,

29 
NULL
,

30 
NULL
,

32 
NULL
,

33 
NULL


37 
ngx_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ
 = {

38 
NGX_MODULE_V1
,

39 &
ngx_hâp_chunked_fûãr_moduÀ_˘x
,

40 
NULL
,

41 
NGX_HTTP_MODULE
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NULL
,

48 
NULL
,

49 
NGX_MODULE_V1_PADDING


53 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

54 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

57 
ngx_öt_t


58 
	$ngx_hâp_chunked_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

61 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

63 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED


64 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NO_CONTENT


65 || 
r
->
hódîs_out
.
°©us
 < 
NGX_HTTP_OK


66 || 
r
 !r->
maö


67 || (
r
->
mëhod
 & 
NGX_HTTP_HEAD
))

69  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

72 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1) {

73 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

74 
r
->
kì∑live
 = 0;

77 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

79 i‡(
˛cf
->
chunked_å™s„r_ícodög
) {

80 
r
->
chunked
 = 1;

82 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

83 (
ngx_hâp_chunked_fûãr_˘x_t
));

84 i‡(
˘x
 =
NULL
) {

85  
NGX_ERROR
;

88 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_chunked_fûãr_moduÀ
);

91 
r
->
kì∑live
 = 0;

96  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

97 
	}
}

100 
ngx_öt_t


101 
	$ngx_hâp_chunked_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

103 
u_ch¨
 *
chunk
;

104 
off_t
 
size
;

105 
ngx_öt_t
 
rc
;

106 
ngx_buf_t
 *
b
;

107 
ngx_chaö_t
 *
out
, *
˛
, *
é
, **
Œ
;

108 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

110 i‡(
ö
 =
NULL
 || !
r
->
chunked
 ||Ñ->
hódî_⁄ly
) {

111  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

114 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_chunked_fûãr_moduÀ
);

116 
out
 = 
NULL
;

117 
Œ
 = &
out
;

119 
size
 = 0;

120 
˛
 = 
ö
;

123 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

124 "hâ∞chunk: %d", 
	`ngx_buf_size
(
˛
->
buf
));

126 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

128 i‡(
˛
->
buf
->
Êush


129 || 
˛
->
buf
->
sync


130 || 
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)

131 || 
˛
->
buf
->
ö_fûe
)

133 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

134 i‡(
é
 =
NULL
) {

135  
NGX_ERROR
;

138 
é
->
buf
 = 
˛
->buf;

139 *
Œ
 = 
é
;

140 
Œ
 = &
é
->
√xt
;

143 i‡(
˛
->
√xt
 =
NULL
) {

147 
˛
 = cl->
√xt
;

150 i‡(
size
) {

151 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

152 i‡(
é
 =
NULL
) {

153  
NGX_ERROR
;

156 
b
 = 
é
->
buf
;

157 
chunk
 = 
b
->
°¨t
;

159 i‡(
chunk
 =
NULL
) {

162 
chunk
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ("0000000000000000" 
CRLF
) - 1);

163 i‡(
chunk
 =
NULL
) {

164  
NGX_ERROR
;

167 
b
->
°¨t
 = 
chunk
;

168 
b
->
íd
 = 
chunk
 + ("0000000000000000" 
CRLF
) - 1;

171 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

172 
b
->
mem‹y
 = 0;

173 
b
->
ãmp‹¨y
 = 1;

174 
b
->
pos
 = 
chunk
;

175 
b
->
œ°
 = 
	`ngx_•rötf
(
chunk
, "%xO" 
CRLF
, 
size
);

177 
é
->
√xt
 = 
out
;

178 
out
 = 
é
;

181 i‡(
˛
->
buf
->
œ°_buf
) {

182 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

183 i‡(
é
 =
NULL
) {

184  
NGX_ERROR
;

187 
b
 = 
é
->
buf
;

189 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

190 
b
->
ãmp‹¨y
 = 0;

191 
b
->
mem‹y
 = 1;

192 
b
->
œ°_buf
 = 1;

193 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
 "0" CRLF CRLF;

194 
b
->
œ°
 = b->
pos
 + 7;

196 
˛
->
buf
->
œ°_buf
 = 0;

198 *
Œ
 = 
é
;

200 i‡(
size
 == 0) {

201 
b
->
pos
 += 2;

204 } i‡(
size
 > 0) {

205 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

206 i‡(
é
 =
NULL
) {

207  
NGX_ERROR
;

210 
b
 = 
é
->
buf
;

212 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

213 
b
->
ãmp‹¨y
 = 0;

214 
b
->
mem‹y
 = 1;

215 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
;

216 
b
->
œ°
 = b->
pos
 + 2;

218 *
Œ
 = 
é
;

221 *
Œ
 = 
NULL
;

224 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

226 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
out
,

227 (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
);

229  
rc
;

230 
	}
}

233 
ngx_öt_t


234 
	$ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

236 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

237 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_chunked_hódî_fûãr
;

239 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

240 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_chunked_body_fûãr
;

242  
NGX_OK
;

243 
	}
}

	@src/http/modules/ngx_http_dav_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_DAV_OFF
 2

	)

16 
	#NGX_HTTP_DAV_NO_DEPTH
 -3

	)

17 
	#NGX_HTTP_DAV_INVALID_DEPTH
 -2

	)

18 
	#NGX_HTTP_DAV_INFINITY_DEPTH
 -1

	)

22 
ngx_uöt_t
 
	mmëhods
;

23 
ngx_uöt_t
 
	mac˚ss
;

24 
ngx_uöt_t
 
	mmö_dñëe_dïth
;

25 
ngx_Êag_t
 
	m¸óã_fuŒ_put_∑th
;

26 } 
	tngx_hâp_dav_loc_c⁄f_t
;

30 
ngx_°r_t
 
	m∑th
;

31 
size_t
 
	mÀn
;

32 } 
	tngx_hâp_dav_c›y_˘x_t
;

35 
ngx_öt_t
 
ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_öt_t
 
ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

40 
ngx_öt_t
 
ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
);

42 
ngx_öt_t
 
ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

43 
ngx_öt_t
 
ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

44 
ngx_öt_t
 
ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

46 
ngx_öt_t
 
ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
);

49 
ngx_öt_t
 
ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

51 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
,

52 
ngx_°r_t
 *
∑th
);

53 
ngx_öt_t
 
ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
,

54 
ngx_°r_t
 *
∑th
);

56 
ngx_öt_t
 
ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
,Çgx_öt_à
dÊt
);

57 
ngx_öt_t
 
ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

58 
ngx_öt_t
 
nŸ_found
, *
Áûed
, 
u_ch¨
 *
∑th
);

59 
ngx_öt_t
 
ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
);

60 *
ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

61 *
ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

62 *
∑ª¡
, *
chûd
);

63 
ngx_öt_t
 
ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
);

66 
ngx_c⁄f_bômask_t
 
	gngx_hâp_dav_mëhods_mask
[] = {

67 { 
ngx_°rög
("off"), 
NGX_HTTP_DAV_OFF
 },

68 { 
ngx_°rög
("put"), 
NGX_HTTP_PUT
 },

69 { 
ngx_°rög
("dñëe"), 
NGX_HTTP_DELETE
 },

70 { 
ngx_°rög
("mkcﬁ"), 
NGX_HTTP_MKCOL
 },

71 { 
ngx_°rög
("c›y"), 
NGX_HTTP_COPY
 },

72 { 
ngx_°rög
("move"), 
NGX_HTTP_MOVE
 },

73 { 
ngx_nuŒ_°rög
, 0 }

77 
ngx_comm™d_t
 
	gngx_hâp_dav_comm™ds
[] = {

79 { 
ngx_°rög
("dav_methods"),

80 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

81 
ngx_c⁄f_£t_bômask_¶Ÿ
,

82 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mëhods
),

84 &
ngx_hâp_dav_mëhods_mask
 },

86 { 
ngx_°rög
("create_full_put_path"),

87 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
¸óã_fuŒ_put_∑th
),

91 
NULL
 },

93 { 
ngx_°rög
("min_delete_depth"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_c⁄f_£t_num_¶Ÿ
,

96 
NGX_HTTP_LOC_CONF_OFFSET
,

97 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mö_dñëe_dïth
),

98 
NULL
 },

100 { 
ngx_°rög
("dav_access"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

102 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

104 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
ac˚ss
),

105 
NULL
 },

107 
ngx_nuŒ_comm™d


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_dav_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_dav_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
ngx_hâp_dav_¸óã_loc_c⁄f
,

122 
ngx_hâp_dav_mîge_loc_c⁄f


126 
ngx_moduÀ_t
 
	gngx_hâp_dav_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_dav_moduÀ_˘x
,

129 
ngx_hâp_dav_comm™ds
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_öt_t


143 
	$ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

145 
ngx_öt_t
 
rc
;

146 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

148 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

150 i‡(!(
r
->
mëhod
 & 
dlcf
->
mëhods
)) {

151  
NGX_DECLINED
;

154 
r
->
mëhod
) {

156 
NGX_HTTP_PUT
:

158 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

159 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

161  
NGX_HTTP_CONFLICT
;

164 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

165 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

166 
r
->
ªque°_body_ö_˛ón_fûe
 = 1;

167 
r
->
ªque°_body_fûe_group_ac˚ss
 = 1;

168 
r
->
ªque°_body_fûe_log_Àvñ
 = 0;

170 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_dav_put_h™dÀr
);

172 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

173  
rc
;

176  
NGX_DONE
;

178 
NGX_HTTP_DELETE
:

180  
	`ngx_hâp_dav_dñëe_h™dÀr
(
r
);

182 
NGX_HTTP_MKCOL
:

184  
	`ngx_hâp_dav_mkcﬁ_h™dÀr
(
r
, 
dlcf
);

186 
NGX_HTTP_COPY
:

188  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

190 
NGX_HTTP_MOVE
:

192  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

195  
NGX_DECLINED
;

196 
	}
}

200 
	$ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

202 
size_t
 
roŸ
;

203 
time_t
 
d©e
;

204 
ngx_°r_t
 *
ãmp
, 
∑th
;

205 
ngx_uöt_t
 
°©us
;

206 
ngx_fûe_öfo_t
 
fi
;

207 
ngx_ext_ª«me_fûe_t
 
ext
;

208 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

210 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

211 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

215 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

216 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

220 
∑th
.
Àn
--;

222 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

223 "hâ∞puàfûíame: \"%s\"", 
∑th
.
d©a
);

225 
ãmp
 = &
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
;

227 i‡(
	`ngx_fûe_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

228 
°©us
 = 
NGX_HTTP_CREATED
;

231 
°©us
 = 
NGX_HTTP_NO_CONTENT
;

233 i‡(
	`ngx_is_dú
(&
fi
)) {

234 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

235 "\"%s\" couldÇŸ bê¸óãd", 
∑th
.
d©a
);

237 i‡(
	`ngx_dñëe_fûe
(
ãmp
->
d©a
Ë=
NGX_FILE_ERROR
) {

238 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

239 
ngx_dñëe_fûe_n
 " \"%s\" failed",

240 
ãmp
->
d©a
);

243 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CONFLICT
);

248 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

250 
ext
.
ac˚ss
 = 
dlcf
->access;

251 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

252 
ext
.
time
 = -1;

253 
ext
.
¸óã_∑th
 = 
dlcf
->
¸óã_fuŒ_put_∑th
;

254 
ext
.
dñëe_fûe
 = 1;

255 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

257 i‡(
r
->
hódîs_ö
.
d©e
) {

258 
d©e
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.d©e->
vÆue
.
d©a
,

259 
r
->
hódîs_ö
.
d©e
->
vÆue
.
Àn
);

261 i‡(
d©e
 !
NGX_ERROR
) {

262 
ext
.
time
 = 
d©e
;

263 
ext
.
fd
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.fd;

267 i‡(
	`ngx_ext_ª«me_fûe
(
ãmp
, &
∑th
, &
ext
Ë!
NGX_OK
) {

268 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

272 i‡(
°©us
 =
NGX_HTTP_CREATED
) {

273 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

274 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

278 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

281 
r
->
hódîs_out
.
°©us
 = status;

282 
r
->
hódî_⁄ly
 = 1;

284 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_£nd_hódî
(r));

286 
	}
}

289 
ngx_öt_t


290 
	$ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

292 
size_t
 
roŸ
;

293 
ngx_îr_t
 
îr
;

294 
ngx_öt_t
 
rc
, 
dïth
;

295 
ngx_uöt_t
 
i
, 
d
, 
dú
;

296 
ngx_°r_t
 
∑th
;

297 
ngx_fûe_öfo_t
 
fi
;

298 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

300 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

301 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

303  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

306 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

308 i‡(
dlcf
->
mö_dñëe_dïth
) {

309 
d
 = 0;

311 
i
 = 0; i < 
r
->
uri
.
Àn
; ) {

312 i‡(
r
->
uri
.
d©a
[
i
++] == '/') {

313 i‡(++
d
 >
dlcf
->
mö_dñëe_dïth
 && 
i
 < 
r
->
uri
.
Àn
) {

314 
ok
;

319 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

320 "ösufficõ¡ URI dïth:%òtÿDELETE", 
d
);

321  
NGX_HTTP_CONFLICT
;

324 
ok
:

326 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

327  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

330 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

331 "hâ∞dñëêfûíame: \"%s\"", 
∑th
.
d©a
);

333 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

334 
îr
 = 
ngx_î∫o
;

336 
rc
 = (
îr
 =
NGX_ENOTDIR
Ë? 
NGX_HTTP_CONFLICT
 : 
NGX_HTTP_NOT_FOUND
;

338  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

339 
rc
, 
ngx_lök_öfo_n
, 
∑th
.
d©a
);

342 i‡(
	`ngx_is_dú
(&
fi
)) {

344 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

345 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

346 "DELETE \"%s\" faûed", 
∑th
.
d©a
);

347  
NGX_HTTP_CONFLICT
;

350 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

352 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

353 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

355  
NGX_HTTP_BAD_REQUEST
;

358 
∑th
.
Àn
 -= 2;

360 
dú
 = 1;

369 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 0);

371 i‡(
dïth
 !0 && dïth !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

374  
NGX_HTTP_BAD_REQUEST
;

377 
dú
 = 0;

380 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 
dú
);

382 i‡(
rc
 =
NGX_OK
) {

383  
NGX_HTTP_NO_CONTENT
;

386  
rc
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
)

393 *
Áûed
;

394 
ngx_åì_˘x_t
 
åì
;

396 i‡(
dú
) {

398 
åì
.
öô_h™dÀr
 = 
NULL
;

399 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

400 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_no›
;

401 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_dñëe_dú
;

402 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

403 
åì
.
d©a
 = 
NULL
;

404 
åì
.
Æloc
 = 0;

405 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

409 i‡(
	`ngx_wÆk_åì
(&
åì
, 
∑th
Ë!
NGX_OK
) {

410  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

413 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

414  
NGX_OK
;

417 
Áûed
 = 
ngx_dñëe_dú_n
;

421 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

422  
NGX_OK
;

425 
Áûed
 = 
ngx_dñëe_fûe_n
;

428  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

429 
NGX_HTTP_NOT_FOUND
, 
Áûed
, 
∑th
->
d©a
);

430 
	}
}

433 
ngx_öt_t


434 
	$ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

436 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

437 "hâ∞dñëêdú: \"%s\"", 
∑th
->
d©a
);

439 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

443 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_dú_n
,

444 
∑th
->
d©a
);

447  
NGX_OK
;

448 
	}
}

451 
ngx_öt_t


452 
	$ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

454 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

455 "hâ∞dñëêfûe: \"%s\"", 
∑th
->
d©a
);

457 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

461 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_fûe_n
,

462 
∑th
->
d©a
);

465  
NGX_OK
;

466 
	}
}

469 
ngx_öt_t


470 
	$ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

472  
NGX_OK
;

473 
	}
}

476 
ngx_öt_t


477 
	$ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
)

479 
u_ch¨
 *
p
;

480 
size_t
 
roŸ
;

481 
ngx_°r_t
 
∑th
;

483 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

484 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

486  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

489 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

490 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

492  
NGX_HTTP_CONFLICT
;

495 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

496 i‡(
p
 =
NULL
) {

497  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

500 *(
p
 - 1) = '\0';

501 
r
->
uri
.
Àn
--;

503 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

504 "hâ∞mkcﬁÖ©h: \"%s\"", 
∑th
.
d©a
);

506 i‡(
	`ngx_¸óã_dú
(
∑th
.
d©a
, 
	`ngx_dú_ac˚ss
(
dlcf
->
ac˚ss
))

507 !
NGX_FILE_ERROR
)

509 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

510  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

513  
NGX_HTTP_CREATED
;

516  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

517 
NGX_HTTP_CONFLICT
, 
ngx_¸óã_dú_n
, 
∑th
.
d©a
);

518 
	}
}

521 
ngx_öt_t


522 
	$ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

524 
u_ch¨
 *
p
, *
ho°
, *
œ°
, 
ch
;

525 
size_t
 
Àn
, 
roŸ
;

526 
ngx_îr_t
 
îr
;

527 
ngx_öt_t
 
rc
, 
dïth
;

528 
ngx_uöt_t
 
ovîwrôe
, 
¶ash
, 
dú
, 
Êags
;

529 
ngx_°r_t
 
∑th
, 
uri
, 
duri
, 
¨gs
;

530 
ngx_åì_˘x_t
 
åì
;

531 
ngx_c›y_fûe_t
 
cf
;

532 
ngx_fûe_öfo_t
 
fi
;

533 
ngx_èbÀ_ñt_t
 *
de°
, *
ovî
;

534 
ngx_ext_ª«me_fûe_t
 
ext
;

535 
ngx_hâp_dav_c›y_˘x_t
 
c›y
;

536 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

538 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

539  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

542 
de°
 = 
r
->
hódîs_ö
.
de°ö©i⁄
;

544 i‡(
de°
 =
NULL
) {

545 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

547  
NGX_HTTP_BAD_REQUEST
;

550 
p
 = 
de°
->
vÆue
.
d©a
;

552 i‡(
p
[0] == '/') {

553 
œ°
 = 
p
 + 
de°
->
vÆue
.
Àn
;

554 
de°ö©i⁄_d⁄e
;

557 
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

559 i‡(
Àn
 == 0) {

560 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

562  
NGX_HTTP_BAD_REQUEST
;

565 #i‡(
NGX_HTTP_SSL
)

567 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

568 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "https://", ("https://") - 1)

571 
övÆid_de°ö©i⁄
;

574 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("https://") - 1;

579 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "http://", ("http://") - 1)

582 
övÆid_de°ö©i⁄
;

585 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("http://") - 1;

588 i‡(
	`ngx_°∫cmp
(
ho°
, 
r
->
hódîs_ö
.
£rvî
.
d©a
, 
Àn
) != 0) {

589 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

592 &
de°
->
vÆue
);

593  
NGX_HTTP_BAD_REQUEST
;

596 
œ°
 = 
de°
->
vÆue
.
d©a
 + de°->vÆue.
Àn
;

598 
p
 = 
ho°
 + 
Àn
;Ö < 
œ°
;Ö++) {

599 i‡(*
p
 == '/') {

600 
de°ö©i⁄_d⁄e
;

604 
övÆid_de°ö©i⁄
:

606 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

608 &
de°
->
vÆue
);

609  
NGX_HTTP_BAD_REQUEST
;

611 
de°ö©i⁄_d⁄e
:

613 
duri
.
Àn
 = 
œ°
 - 
p
;

614 
duri
.
d©a
 = 
p
;

615 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

617 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, &
duri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

618 
övÆid_de°ö©i⁄
;

621 i‡((
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] ='/' && *(
œ°
 - 1) != '/')

622 || (
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] !'/' && *(
œ°
 - 1) == '/'))

624 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

627 &
r
->
uri
, &
de°
->
vÆue
);

628  
NGX_HTTP_CONFLICT
;

631 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

633 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

635 i‡(
r
->
mëhod
 =
NGX_HTTP_COPY
) {

636 i‡(
dïth
 != 0) {

637 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

639  
NGX_HTTP_BAD_REQUEST
;

643 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

645  
NGX_HTTP_BAD_REQUEST
;

649 
ovî
 = 
r
->
hódîs_ö
.
ovîwrôe
;

651 i‡(
ovî
) {

652 i‡(
ovî
->
vÆue
.
Àn
 == 1) {

653 
ch
 = 
ovî
->
vÆue
.
d©a
[0];

655 i‡(
ch
 == 'T' || ch == 't') {

656 
ovîwrôe
 = 1;

657 
ovîwrôe_d⁄e
;

660 i‡(
ch
 == 'F' || ch == 'f') {

661 
ovîwrôe
 = 0;

662 
ovîwrôe_d⁄e
;

667 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

669 &
ovî
->
vÆue
);

670  
NGX_HTTP_BAD_REQUEST
;

673 
ovîwrôe
 = 1;

675 
ovîwrôe_d⁄e
:

677 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

678  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

681 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

682 "hâ∞c›y from: \"%s\"", 
∑th
.
d©a
);

684 
uri
 = 
r
->uri;

685 
r
->
uri
 = 
duri
;

687 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
c›y
.
∑th
, &
roŸ
, 0Ë=
NULL
) {

688  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

691 
r
->
uri
 = uri;

693 
c›y
.
∑th
.
Àn
--;

695 i‡(
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
 - 1] == '/') {

696 
¶ash
 = 1;

697 
c›y
.
∑th
.
Àn
--;

698 
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
] = '\0';

701 
¶ash
 = 0;

704 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

705 "hâ∞c›yÅo: \"%s\"", 
c›y
.
∑th
.
d©a
);

707 i‡(
	`ngx_lök_öfo
(
c›y
.
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

708 
îr
 = 
ngx_î∫o
;

710 i‡(
îr
 !
NGX_ENOENT
) {

711  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

712 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

713 
c›y
.
∑th
.
d©a
);

718 
ovîwrôe
 = 0;

719 
dú
 = 0;

725 i‡(
	`ngx_is_dú
(&
fi
Ë&& !
¶ash
) {

726 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

728 &
r
->
uri
, &r->
mëhod_«me
, &
de°
->
vÆue
);

729  
NGX_HTTP_CONFLICT
;

732 i‡(!
ovîwrôe
) {

733 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EEXIST
,

734 "\"%s\" couldÇŸ bê¸óãd", 
c›y
.
∑th
.
d©a
);

735  
NGX_HTTP_PRECONDITION_FAILED
;

738 
dú
 = 
	`ngx_is_dú
(&
fi
);

741 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

742  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

743 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

744 
∑th
.
d©a
);

747 i‡(
	`ngx_is_dú
(&
fi
)) {

749 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

750 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

751 "\"%V\" i†cﬁÀ˘i⁄", &
r
->
uri
);

752  
NGX_HTTP_BAD_REQUEST
;

755 i‡(
ovîwrôe
) {

756 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

757 "hâ∞dñëe: \"%s\"", 
c›y
.
∑th
.
d©a
);

759 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
c›y
.
∑th
, 
dú
);

761 i‡(
rc
 !
NGX_OK
) {

762  
rc
;

767 i‡(
	`ngx_is_dú
(&
fi
)) {

769 
∑th
.
Àn
 -= 2;

771 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

772 i‡(
	`ngx_ª«me_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©aË!
NGX_FILE_ERROR
) {

773  
NGX_HTTP_CREATED
;

777 i‡(
	`ngx_¸óã_dú
(
c›y
.
∑th
.
d©a
, 
	`ngx_fûe_ac˚ss
(&
fi
))

778 =
NGX_FILE_ERROR
)

780  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

781 
NGX_HTTP_NOT_FOUND
,

782 
ngx_¸óã_dú_n
, 
c›y
.
∑th
.
d©a
);

785 
c›y
.
Àn
 = 
∑th
.len;

787 
åì
.
öô_h™dÀr
 = 
NULL
;

788 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_c›y_åì_fûe
;

789 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú
;

790 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú_time
;

791 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_no›
;

792 
åì
.
d©a
 = &
c›y
;

793 
åì
.
Æloc
 = 0;

794 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

796 i‡(
	`ngx_wÆk_åì
(&
åì
, &
∑th
Ë=
NGX_OK
) {

798 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

799 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 1);

801 i‡(
rc
 !
NGX_OK
) {

802  
rc
;

806  
NGX_HTTP_CREATED
;

811 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

813 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

815 
ext
.
ac˚ss
 = 0;

816 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

817 
ext
.
time
 = -1;

818 
ext
.
¸óã_∑th
 = 1;

819 
ext
.
dñëe_fûe
 = 0;

820 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

822 i‡(
	`ngx_ext_ª«me_fûe
(&
∑th
, &
c›y
.∑th, &
ext
Ë=
NGX_OK
) {

823  
NGX_HTTP_NO_CONTENT
;

826  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

829 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

831 
cf
.
size
 = 
	`ngx_fûe_size
(&
fi
);

832 
cf
.
buf_size
 = 0;

833 
cf
.
ac˚ss
 = 
dlcf
->access;

834 
cf
.
time
 = 
	`ngx_fûe_mtime
(&
fi
);

835 
cf
.
log
 = 
r
->
c⁄√˘i⁄
->log;

837 i‡(
	`ngx_c›y_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©a, &
cf
Ë=
NGX_OK
) {

838  
NGX_HTTP_NO_CONTENT
;

842  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

843 
	}
}

846 
ngx_öt_t


847 
	$ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

849 
u_ch¨
 *
p
, *
dú
;

850 
size_t
 
Àn
;

851 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

853 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

854 "hâ∞c›y dú: \"%s\"", 
∑th
->
d©a
);

856 
c›y
 = 
˘x
->
d©a
;

858 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

860 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

861 i‡(
dú
 =
NULL
) {

862  
NGX_ABORT
;

865 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

866 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

868 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

869 "hâ∞c›y dúÅo: \"%s\"", 
dú
);

871 i‡(
	`ngx_¸óã_dú
(
dú
, 
	`ngx_dú_ac˚ss
(
˘x
->
ac˚ss
)Ë=
NGX_FILE_ERROR
) {

872 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_¸óã_dú_n
,

873 
dú
);

876 
	`ngx_‰ì
(
dú
);

878  
NGX_OK
;

879 
	}
}

882 
ngx_öt_t


883 
	$ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

885 
u_ch¨
 *
p
, *
dú
;

886 
size_t
 
Àn
;

887 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

889 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

890 "hâ∞c›y dúÅime: \"%s\"", 
∑th
->
d©a
);

892 
c›y
 = 
˘x
->
d©a
;

894 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

896 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

897 i‡(
dú
 =
NULL
) {

898  
NGX_ABORT
;

901 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

902 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

904 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

905 "hâ∞c›y dúÅimêto: \"%s\"", 
dú
);

907 #i‡(
NGX_WIN32
)

909 
ngx_fd_t
 
fd
;

911 
fd
 = 
	`ngx_›í_fûe
(
dú
, 
NGX_FILE_RDWR
, 
NGX_FILE_OPEN
, 0);

913 i‡(
fd
 =
NGX_INVALID_FILE
) {

914 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_›í_fûe_n
, 
dú
);

915 
Áûed
;

918 i‡(
	`ngx_£t_fûe_time
(
NULL
, 
fd
, 
˘x
->
mtime
Ë!
NGX_OK
) {

919 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

920 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

923 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

924 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

925 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
dú
);

929 
Áûed
:

933 i‡(
	`ngx_£t_fûe_time
(
dú
, 0, 
˘x
->
mtime
Ë!
NGX_OK
) {

934 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

935 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

940 
	`ngx_‰ì
(
dú
);

942  
NGX_OK
;

943 
	}
}

946 
ngx_öt_t


947 
	$ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

949 
u_ch¨
 *
p
, *
fûe
;

950 
size_t
 
Àn
;

951 
ngx_c›y_fûe_t
 
cf
;

952 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

954 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

955 "hâ∞c›y fûe: \"%s\"", 
∑th
->
d©a
);

957 
c›y
 = 
˘x
->
d©a
;

959 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

961 
fûe
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

962 i‡(
fûe
 =
NULL
) {

963  
NGX_ABORT
;

966 
p
 = 
	`ngx_˝ymem
(
fûe
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

967 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

969 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

970 "hâ∞c›y fûêto: \"%s\"", 
fûe
);

972 
cf
.
size
 = 
˘x
->size;

973 
cf
.
buf_size
 = 0;

974 
cf
.
ac˚ss
 = 
˘x
->access;

975 
cf
.
time
 = 
˘x
->
mtime
;

976 
cf
.
log
 = 
˘x
->log;

978 (Ë
	`ngx_c›y_fûe
(
∑th
->
d©a
, 
fûe
, &
cf
);

980 
	`ngx_‰ì
(
fûe
);

982  
NGX_OK
;

983 
	}
}

986 
ngx_öt_t


987 
	$ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
dÊt
)

989 
ngx_èbÀ_ñt_t
 *
dïth
;

991 
dïth
 = 
r
->
hódîs_ö
.depth;

993 i‡(
dïth
 =
NULL
) {

994  
dÊt
;

997 i‡(
dïth
->
vÆue
.
Àn
 == 1) {

999 i‡(
dïth
->
vÆue
.
d©a
[0] == '0') {

1003 i‡(
dïth
->
vÆue
.
d©a
[0] == '1') {

1009 i‡(
dïth
->
vÆue
.
Àn
 == ("infinity") - 1

1010 && 
	`ngx_°rcmp
(
dïth
->
vÆue
.
d©a
, "infinity") == 0)

1012  
NGX_HTTP_DAV_INFINITY_DEPTH
;

1016 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1018 &
dïth
->
vÆue
);

1020  
NGX_HTTP_DAV_INVALID_DEPTH
;

1021 
	}
}

1024 
ngx_öt_t


1025 
	$ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, 
ngx_öt_t
 
nŸ_found
,

1026 *
Áûed
, 
u_ch¨
 *
∑th
)

1028 
ngx_öt_t
 
rc
;

1029 
ngx_uöt_t
 
Àvñ
;

1031 i‡(
îr
 =
NGX_ENOENT
 ||Éº =
NGX_ENOTDIR
 ||Éº =
NGX_ENAMETOOLONG
) {

1032 
Àvñ
 = 
NGX_LOG_ERR
;

1033 
rc
 = 
nŸ_found
;

1035 } i‡(
îr
 =
NGX_EACCES
 ||Éº =
NGX_EPERM
) {

1036 
Àvñ
 = 
NGX_LOG_ERR
;

1037 
rc
 = 
NGX_HTTP_FORBIDDEN
;

1039 } i‡(
îr
 =
NGX_EEXIST
) {

1040 
Àvñ
 = 
NGX_LOG_ERR
;

1041 
rc
 = 
NGX_HTTP_NOT_ALLOWED
;

1043 } i‡(
îr
 =
NGX_ENOSPC
) {

1044 
Àvñ
 = 
NGX_LOG_CRIT
;

1045 
rc
 = 
NGX_HTTP_INSUFFICIENT_STORAGE
;

1048 
Àvñ
 = 
NGX_LOG_CRIT
;

1049 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1052 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%†\"%s\" faûed", 
Áûed
, 
∑th
);

1054  
rc
;

1055 
	}
}

1058 
ngx_öt_t


1059 
	$ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
)

1061 
u_ch¨
 *
loˇti⁄
;

1062 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1064 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

1065 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1066  
NGX_ERROR
;

1069 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1071 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
) {

1072 
loˇti⁄
 = 
∑th
 + 
˛cf
->
roŸ
.
Àn
;

1075 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
uri
.
Àn
);

1076 i‡(
loˇti⁄
 =
NULL
) {

1077  
NGX_ERROR
;

1080 
	`ngx_mem˝y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

1088 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Ñ->
uri
.len;

1089 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

1091  
NGX_OK
;

1092 
	}
}

1096 
	$ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1098 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
;

1100 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_dav_loc_c⁄f_t
));

1101 i‡(
c⁄f
 =
NULL
) {

1102  
NULL
;

1111 
c⁄f
->
mö_dñëe_dïth
 = 
NGX_CONF_UNSET_UINT
;

1112 
c⁄f
->
ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1113 
c⁄f
->
¸óã_fuŒ_put_∑th
 = 
NGX_CONF_UNSET
;

1115  
c⁄f
;

1116 
	}
}

1120 
	$ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1122 
ngx_hâp_dav_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1123 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1125 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
mëhods
, 
¥ev
->methods,

1126 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_DAV_OFF
));

1128 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
mö_dñëe_dïth
,

1129 
¥ev
->
mö_dñëe_dïth
, 0);

1131 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ac˚ss
, 
¥ev
->access, 0600);

1133 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¸óã_fuŒ_put_∑th
,

1134 
¥ev
->
¸óã_fuŒ_put_∑th
, 0);

1136  
NGX_CONF_OK
;

1137 
	}
}

1140 
ngx_öt_t


1141 
	$ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
)

1143 
ngx_hâp_h™dÀr_±
 *
h
;

1144 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1146 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1148 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

1149 i‡(
h
 =
NULL
) {

1150  
NGX_ERROR
;

1153 *
h
 = 
ngx_hâp_dav_h™dÀr
;

1155  
NGX_OK
;

1156 
	}
}

	@src/http/modules/ngx_http_degradation_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
size_t
 
	msbrk_size
;

15 } 
	tngx_hâp_degød©i⁄_maö_c⁄f_t
;

19 
ngx_uöt_t
 
	mdegøde
;

20 } 
	tngx_hâp_degød©i⁄_loc_c⁄f_t
;

23 
ngx_c⁄f_íum_t
 
	gngx_hâp_degøde
[] = {

24 { 
ngx_°rög
("204"), 204 },

25 { 
ngx_°rög
("444"), 444 },

26 { 
ngx_nuŒ_°rög
, 0 }

30 *
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 *
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 *
ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

35 *
c⁄f
);

36 
ngx_öt_t
 
ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
);

39 
ngx_comm™d_t
 
	gngx_hâp_degød©i⁄_comm™ds
[] = {

41 { 
ngx_°rög
("degradation"),

42 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

43 
ngx_hâp_degød©i⁄
,

44 
NGX_HTTP_MAIN_CONF_OFFSET
,

46 
NULL
 },

48 { 
ngx_°rög
("degrade"),

49 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_c⁄f_£t_íum_¶Ÿ
,

51 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
off£tof
(
ngx_hâp_degød©i⁄_loc_c⁄f_t
, 
degøde
),

53 &
ngx_hâp_degøde
 },

55 
ngx_nuŒ_comm™d


59 
ngx_hâp_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ_˘x
 = {

60 
NULL
,

61 
ngx_hâp_degød©i⁄_öô
,

63 
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
,

64 
NULL
,

66 
NULL
,

67 
NULL
,

69 
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
,

70 
ngx_hâp_degød©i⁄_mîge_loc_c⁄f


74 
ngx_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ
 = {

75 
NGX_MODULE_V1
,

76 &
ngx_hâp_degød©i⁄_moduÀ_˘x
,

77 
ngx_hâp_degød©i⁄_comm™ds
,

78 
NGX_HTTP_MODULE
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NGX_MODULE_V1_PADDING


90 
ngx_öt_t


91 
	$ngx_hâp_degød©i⁄_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

93 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
dlcf
;

95 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

97 i‡(
dlcf
->
degøde
 && 
	`ngx_hâp_degøded
(
r
)) {

98  
dlcf
->
degøde
;

101  
NGX_DECLINED
;

102 
	}
}

105 
ngx_uöt_t


106 
	$ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *
r
)

108 
time_t
 
now
;

109 
ngx_uöt_t
 
log
;

110 
size_t
 
sbrk_size
;

111 
time_t
 
sbrk_time
;

112 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

114 
dmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

116 i‡(
dmcf
->
sbrk_size
) {

118 
log
 = 0;

119 
now
 = 
	`ngx_time
();

123 i‡(
now
 !
sbrk_time
) {

132 
sbrk_size
 = (
size_t
Ë
	`sbrk
(0Ë- ((
uöçå_t
Ë
ngx_∑Œoc
 & ~0x3FFFFF);

133 
sbrk_time
 = 
now
;

134 
log
 = 1;

139 i‡(
sbrk_size
 >
dmcf
->sbrk_size) {

140 i‡(
log
) {

141 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143 
sbrk_size
 / (1024 * 1024));

151 
	}
}

155 
	$ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

157 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

159 
dmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_maö_c⁄f_t
));

160 i‡(
dmcf
 =
NULL
) {

161  
NULL
;

164  
dmcf
;

165 
	}
}

169 
	$ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

171 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
;

173 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_loc_c⁄f_t
));

174 i‡(
c⁄f
 =
NULL
) {

175  
NULL
;

178 
c⁄f
->
degøde
 = 
NGX_CONF_UNSET_UINT
;

180  
c⁄f
;

181 
	}
}

185 
	$ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

187 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

188 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

190 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
degøde
, 
¥ev
->degrade, 0);

192  
NGX_CONF_OK
;

193 
	}
}

197 
	$ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

199 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
 = 
c⁄f
;

201 
ngx_°r_t
 *
vÆue
, 
s
;

203 
vÆue
 = 
cf
->
¨gs
->
ñts
;

205 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "sbrk=", 5) == 0) {

207 
s
.
Àn
 = 
vÆue
[1].len - 5;

208 
s
.
d©a
 = 
vÆue
[1].data + 5;

210 
dmcf
->
sbrk_size
 = 
	`ngx_∑r£_size
(&
s
);

211 i‡(
dmcf
->
sbrk_size
 =(
size_t
Ë
NGX_ERROR
) {

212 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

213 "övÆid sbrk sizê\"%V\"", &
vÆue
[1]);

214  
NGX_CONF_ERROR
;

217  
NGX_CONF_OK
;

220 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

221 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

223  
NGX_CONF_ERROR
;

224 
	}
}

227 
ngx_öt_t


228 
	$ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
)

230 
ngx_hâp_h™dÀr_±
 *
h
;

231 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

233 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

235 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

236 i‡(
h
 =
NULL
) {

237  
NGX_ERROR
;

240 *
h
 = 
ngx_hâp_degød©i⁄_h™dÀr
;

242  
NGX_OK
;

243 
	}
}

	@src/http/modules/ngx_http_empty_gif_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

13 *
c⁄f
);

15 
ngx_comm™d_t
 
	gngx_hâp_em±y_gif_comm™ds
[] = {

17 { 
ngx_°rög
("empty_gif"),

18 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

19 
ngx_hâp_em±y_gif
,

22 
NULL
 },

24 
ngx_nuŒ_comm™d


30 
u_ch¨
 
	gngx_em±y_gif
[] = {

78 
ngx_hâp_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ_˘x
 = {

79 
NULL
,

80 
NULL
,

82 
NULL
,

83 
NULL
,

85 
NULL
,

86 
NULL
,

88 
NULL
,

89 
NULL


93 
ngx_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ
 = {

94 
NGX_MODULE_V1
,

95 &
ngx_hâp_em±y_gif_moduÀ_˘x
,

96 
ngx_hâp_em±y_gif_comm™ds
,

97 
NGX_HTTP_MODULE
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NGX_MODULE_V1_PADDING


109 
ngx_°r_t
 
	gngx_hâp_gif_ty≥
 = 
ngx_°rög
("image/gif");

112 
ngx_öt_t


113 
	$ngx_hâp_em±y_gif_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

115 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

117 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

118  
NGX_HTTP_NOT_ALLOWED
;

121 
	`ngx_memzîo
(&
cv
, (
ngx_hâp_com∂ex_vÆue_t
));

123 
cv
.
vÆue
.
Àn
 = (
ngx_em±y_gif
);

124 
cv
.
vÆue
.
d©a
 = 
ngx_em±y_gif
;

125 
r
->
hódîs_out
.
œ°_modifõd_time
 = 23349600;

127  
	`ngx_hâp_£nd_ª•⁄£
(
r
, 
NGX_HTTP_OK
, &
ngx_hâp_gif_ty≥
, &
cv
);

128 
	}
}

132 
	$ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

134 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

136 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

137 
˛cf
->
h™dÀr
 = 
ngx_hâp_em±y_gif_h™dÀr
;

139  
NGX_CONF_OK
;

140 
	}
}

	@src/http/modules/ngx_http_fastcgi_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 
	mˇches
;

15 } 
	tngx_hâp_Á°cgi_maö_c⁄f_t
;

19 
ngx_¨øy_t
 *
	mÊushes
;

20 
ngx_¨øy_t
 *
	mÀngths
;

21 
ngx_¨øy_t
 *
	mvÆues
;

22 
ngx_uöt_t
 
	mnumbî
;

23 
ngx_hash_t
 
	mhash
;

24 } 
	tngx_hâp_Á°cgi_∑øms_t
;

28 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

30 
ngx_°r_t
 
	mödex
;

32 
ngx_hâp_Á°cgi_∑øms_t
 
	m∑øms
;

33 #i‡(
NGX_HTTP_CACHE
)

34 
ngx_hâp_Á°cgi_∑øms_t
 
	m∑øms_ˇche
;

37 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

38 
ngx_¨øy_t
 *
	mˇtch_°dîr
;

40 
ngx_¨øy_t
 *
	mÁ°cgi_Àngths
;

41 
ngx_¨øy_t
 *
	mÁ°cgi_vÆues
;

43 
ngx_Êag_t
 
	mkìp_c⁄n
;

45 #i‡(
NGX_HTTP_CACHE
)

46 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

49 #i‡(
NGX_PCRE
)

50 
ngx_ªgex_t
 *
	m•lô_ªgex
;

51 
ngx_°r_t
 
	m•lô_«me
;

53 } 
	tngx_hâp_Á°cgi_loc_c⁄f_t
;

57 
	mngx_hâp_Á°cgi_°_vîsi⁄
 = 0,

58 
	mngx_hâp_Á°cgi_°_ty≥
,

59 
	mngx_hâp_Á°cgi_°_ªque°_id_hi
,

60 
	mngx_hâp_Á°cgi_°_ªque°_id_lo
,

61 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
,

62 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
,

63 
	mngx_hâp_Á°cgi_°_∑ddög_Àngth
,

64 
	mngx_hâp_Á°cgi_°_ª£rved
,

65 
	mngx_hâp_Á°cgi_°_d©a
,

66 
	mngx_hâp_Á°cgi_°_∑ddög


67 } 
	tngx_hâp_Á°cgi_°©e_e
;

71 
u_ch¨
 *
	m°¨t
;

72 
u_ch¨
 *
	míd
;

73 } 
	tngx_hâp_Á°cgi_•lô_∑π_t
;

77 
ngx_hâp_Á°cgi_°©e_e
 
	m°©e
;

78 
u_ch¨
 *
	mpos
;

79 
u_ch¨
 *
	mœ°
;

80 
ngx_uöt_t
 
	mty≥
;

81 
size_t
 
	mÀngth
;

82 
size_t
 
	m∑ddög
;

84 
ngx_chaö_t
 *
	m‰ì
;

85 
ngx_chaö_t
 *
	mbusy
;

87 
	mÁ°cgi_°dout
:1;

88 
	mœrge_°dîr
:1;

89 
	mhódî_£¡
:1;

91 
ngx_¨øy_t
 *
	m•lô_∑πs
;

93 
ngx_°r_t
 
	ms¸ùt_«me
;

94 
ngx_°r_t
 
	m∑th_öfo
;

95 } 
	tngx_hâp_Á°cgi_˘x_t
;

98 
	#NGX_HTTP_FASTCGI_RESPONDER
 1

	)

100 
	#NGX_HTTP_FASTCGI_KEEP_CONN
 1

	)

102 
	#NGX_HTTP_FASTCGI_BEGIN_REQUEST
 1

	)

103 
	#NGX_HTTP_FASTCGI_ABORT_REQUEST
 2

	)

104 
	#NGX_HTTP_FASTCGI_END_REQUEST
 3

	)

105 
	#NGX_HTTP_FASTCGI_PARAMS
 4

	)

106 
	#NGX_HTTP_FASTCGI_STDIN
 5

	)

107 
	#NGX_HTTP_FASTCGI_STDOUT
 6

	)

108 
	#NGX_HTTP_FASTCGI_STDERR
 7

	)

109 
	#NGX_HTTP_FASTCGI_DATA
 8

	)

113 
u_ch¨
 
	mvîsi⁄
;

114 
u_ch¨
 
	mty≥
;

115 
u_ch¨
 
	mªque°_id_hi
;

116 
u_ch¨
 
	mªque°_id_lo
;

117 
u_ch¨
 
	mc⁄ã¡_Àngth_hi
;

118 
u_ch¨
 
	mc⁄ã¡_Àngth_lo
;

119 
u_ch¨
 
	m∑ddög_Àngth
;

120 
u_ch¨
 
	mª£rved
;

121 } 
	tngx_hâp_Á°cgi_hódî_t
;

125 
u_ch¨
 
	mrﬁe_hi
;

126 
u_ch¨
 
	mrﬁe_lo
;

127 
u_ch¨
 
	mÊags
;

128 
u_ch¨
 
	mª£rved
[5];

129 } 
	tngx_hâp_Á°cgi_begö_ªque°_t
;

133 
u_ch¨
 
	mvîsi⁄
;

134 
u_ch¨
 
	mty≥
;

135 
u_ch¨
 
	mªque°_id_hi
;

136 
u_ch¨
 
	mªque°_id_lo
;

137 } 
	tngx_hâp_Á°cgi_hódî_smÆl_t
;

141 
ngx_hâp_Á°cgi_hódî_t
 
	mh0
;

142 
ngx_hâp_Á°cgi_begö_ªque°_t
 
	mbr
;

143 
ngx_hâp_Á°cgi_hódî_smÆl_t
 
	mh1
;

144 } 
	tngx_hâp_Á°cgi_ªque°_°¨t_t
;

147 
ngx_öt_t
 
ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

148 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

149 #i‡(
NGX_HTTP_CACHE
)

150 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

152 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

153 
ngx_öt_t
 
ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

154 
ngx_öt_t
 
ngx_hâp_Á°cgi_body_ouçut_fûãr
(*
d©a
,

155 
ngx_chaö_t
 *
ö
);

156 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

157 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
);

158 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
,

159 
ngx_buf_t
 *
buf
);

160 
ngx_öt_t
 
ngx_hâp_Á°cgi_n⁄_buf„ªd_fûãr
(*
d©a
,

161 
ssize_t
 
byãs
);

162 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

163 
ngx_hâp_Á°cgi_˘x_t
 *
f
);

164 
ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

165 
ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

166 
ngx_öt_t
 
rc
);

168 
ngx_öt_t
 
ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

169 *
ngx_hâp_Á°cgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

170 *
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

171 *
ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

172 *
∑ª¡
, *
chûd
);

173 
ngx_öt_t
 
ngx_hâp_Á°cgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
,

174 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
, 
ngx_hâp_Á°cgi_∑øms_t
 *
∑øms
,

175 
ngx_keyvÆ_t
 *
deÁu…_∑øms
);

177 
ngx_öt_t
 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

178 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

179 
ngx_öt_t
 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

180 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

181 
ngx_hâp_Á°cgi_˘x_t
 *
ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
,

182 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

184 *
ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

185 *
c⁄f
);

186 *
ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
,

187 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

188 *
ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

189 *
c⁄f
);

190 #i‡(
NGX_HTTP_CACHE
)

191 *
ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

192 *
c⁄f
);

193 *
ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

194 *
c⁄f
);

197 *
ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
,

198 *
d©a
);

201 
ngx_c⁄f_po°_t
 
	gngx_hâp_Á°cgi_low©_po°
 =

202 { 
ngx_hâp_Á°cgi_low©_check
 };

205 
ngx_c⁄f_bômask_t
 
	gngx_hâp_Á°cgi_√xt_up°ªam_masks
[] = {

206 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

207 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

208 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

209 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

210 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

211 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

212 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

213 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

214 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

215 { 
ngx_nuŒ_°rög
, 0 }

219 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
;

222 
ngx_comm™d_t
 
	gngx_hâp_Á°cgi_comm™ds
[] = {

224 { 
ngx_°rög
("fastcgi_pass"),

225 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

226 
ngx_hâp_Á°cgi_∑ss
,

227 
NGX_HTTP_LOC_CONF_OFFSET
,

229 
NULL
 },

231 { 
ngx_°rög
("fastcgi_index"),

232 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

233 
ngx_c⁄f_£t_°r_¶Ÿ
,

234 
NGX_HTTP_LOC_CONF_OFFSET
,

235 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ödex
),

236 
NULL
 },

238 { 
ngx_°rög
("fastcgi_split_path_info"),

239 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

240 
ngx_hâp_Á°cgi_•lô_∑th_öfo
,

241 
NGX_HTTP_LOC_CONF_OFFSET
,

243 
NULL
 },

245 { 
ngx_°rög
("fastcgi_store"),

246 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

247 
ngx_hâp_Á°cgi_°‹e
,

248 
NGX_HTTP_LOC_CONF_OFFSET
,

250 
NULL
 },

252 { 
ngx_°rög
("fastcgi_store_access"),

253 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

254 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

255 
NGX_HTTP_LOC_CONF_OFFSET
,

256 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

257 
NULL
 },

259 { 
ngx_°rög
("fastcgi_buffering"),

260 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

261 
ngx_c⁄f_£t_Êag_¶Ÿ
,

262 
NGX_HTTP_LOC_CONF_OFFSET
,

263 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

264 
NULL
 },

266 { 
ngx_°rög
("fastcgi_request_buffering"),

267 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

268 
ngx_c⁄f_£t_Êag_¶Ÿ
,

269 
NGX_HTTP_LOC_CONF_OFFSET
,

270 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ªque°_buf„rög
),

271 
NULL
 },

273 { 
ngx_°rög
("fastcgi_ignore_client_abort"),

274 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

275 
ngx_c⁄f_£t_Êag_¶Ÿ
,

276 
NGX_HTTP_LOC_CONF_OFFSET
,

277 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

278 
NULL
 },

280 { 
ngx_°rög
("fastcgi_bind"),

281 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

282 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

283 
NGX_HTTP_LOC_CONF_OFFSET
,

284 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

285 
NULL
 },

287 { 
ngx_°rög
("fastcgi_connect_timeout"),

288 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

289 
ngx_c⁄f_£t_m£c_¶Ÿ
,

290 
NGX_HTTP_LOC_CONF_OFFSET
,

291 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

292 
NULL
 },

294 { 
ngx_°rög
("fastcgi_send_timeout"),

295 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

296 
ngx_c⁄f_£t_m£c_¶Ÿ
,

297 
NGX_HTTP_LOC_CONF_OFFSET
,

298 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

299 
NULL
 },

301 { 
ngx_°rög
("fastcgi_send_lowat"),

302 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

303 
ngx_c⁄f_£t_size_¶Ÿ
,

304 
NGX_HTTP_LOC_CONF_OFFSET
,

305 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

306 &
ngx_hâp_Á°cgi_low©_po°
 },

308 { 
ngx_°rög
("fastcgi_buffer_size"),

309 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

310 
ngx_c⁄f_£t_size_¶Ÿ
,

311 
NGX_HTTP_LOC_CONF_OFFSET
,

312 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

313 
NULL
 },

315 { 
ngx_°rög
("fastcgi_pass_request_headers"),

316 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

317 
ngx_c⁄f_£t_Êag_¶Ÿ
,

318 
NGX_HTTP_LOC_CONF_OFFSET
,

319 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

320 
NULL
 },

322 { 
ngx_°rög
("fastcgi_pass_request_body"),

323 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

324 
ngx_c⁄f_£t_Êag_¶Ÿ
,

325 
NGX_HTTP_LOC_CONF_OFFSET
,

326 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

327 
NULL
 },

329 { 
ngx_°rög
("fastcgi_intercept_errors"),

330 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

331 
ngx_c⁄f_£t_Êag_¶Ÿ
,

332 
NGX_HTTP_LOC_CONF_OFFSET
,

333 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

334 
NULL
 },

336 { 
ngx_°rög
("fastcgi_read_timeout"),

337 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

338 
ngx_c⁄f_£t_m£c_¶Ÿ
,

339 
NGX_HTTP_LOC_CONF_OFFSET
,

340 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

341 
NULL
 },

343 { 
ngx_°rög
("fastcgi_buffers"),

344 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

345 
ngx_c⁄f_£t_bufs_¶Ÿ
,

346 
NGX_HTTP_LOC_CONF_OFFSET
,

347 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

348 
NULL
 },

350 { 
ngx_°rög
("fastcgi_busy_buffers_size"),

351 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

352 
ngx_c⁄f_£t_size_¶Ÿ
,

353 
NGX_HTTP_LOC_CONF_OFFSET
,

354 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

355 
NULL
 },

357 { 
ngx_°rög
("fastcgi_force_ranges"),

358 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

359 
ngx_c⁄f_£t_Êag_¶Ÿ
,

360 
NGX_HTTP_LOC_CONF_OFFSET
,

361 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
f‹˚_ønges
),

362 
NULL
 },

364 { 
ngx_°rög
("fastcgi_limit_rate"),

365 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

366 
ngx_c⁄f_£t_size_¶Ÿ
,

367 
NGX_HTTP_LOC_CONF_OFFSET
,

368 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
limô_øã
),

369 
NULL
 },

371 #i‡(
NGX_HTTP_CACHE
)

373 { 
ngx_°rög
("fastcgi_cache"),

374 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

375 
ngx_hâp_Á°cgi_ˇche
,

376 
NGX_HTTP_LOC_CONF_OFFSET
,

378 
NULL
 },

380 { 
ngx_°rög
("fastcgi_cache_key"),

381 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

382 
ngx_hâp_Á°cgi_ˇche_key
,

383 
NGX_HTTP_LOC_CONF_OFFSET
,

385 
NULL
 },

387 { 
ngx_°rög
("fastcgi_cache_path"),

388 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

389 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

390 
NGX_HTTP_MAIN_CONF_OFFSET
,

391 
off£tof
(
ngx_hâp_Á°cgi_maö_c⁄f_t
, 
ˇches
),

392 &
ngx_hâp_Á°cgi_moduÀ
 },

394 { 
ngx_°rög
("fastcgi_cache_bypass"),

395 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

396 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

397 
NGX_HTTP_LOC_CONF_OFFSET
,

398 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

399 
NULL
 },

401 { 
ngx_°rög
("fastcgi_no_cache"),

402 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

403 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

404 
NGX_HTTP_LOC_CONF_OFFSET
,

405 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

406 
NULL
 },

408 { 
ngx_°rög
("fastcgi_cache_valid"),

409 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

410 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

411 
NGX_HTTP_LOC_CONF_OFFSET
,

412 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

413 
NULL
 },

415 { 
ngx_°rög
("fastcgi_cache_min_uses"),

416 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

417 
ngx_c⁄f_£t_num_¶Ÿ
,

418 
NGX_HTTP_LOC_CONF_OFFSET
,

419 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

420 
NULL
 },

422 { 
ngx_°rög
("fastcgi_cache_use_stale"),

423 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

424 
ngx_c⁄f_£t_bômask_¶Ÿ
,

425 
NGX_HTTP_LOC_CONF_OFFSET
,

426 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

427 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

429 { 
ngx_°rög
("fastcgi_cache_methods"),

430 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

431 
ngx_c⁄f_£t_bômask_¶Ÿ
,

432 
NGX_HTTP_LOC_CONF_OFFSET
,

433 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

434 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

436 { 
ngx_°rög
("fastcgi_cache_lock"),

437 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

438 
ngx_c⁄f_£t_Êag_¶Ÿ
,

439 
NGX_HTTP_LOC_CONF_OFFSET
,

440 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

441 
NULL
 },

443 { 
ngx_°rög
("fastcgi_cache_lock_timeout"),

444 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

445 
ngx_c⁄f_£t_m£c_¶Ÿ
,

446 
NGX_HTTP_LOC_CONF_OFFSET
,

447 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

448 
NULL
 },

450 { 
ngx_°rög
("fastcgi_cache_lock_age"),

451 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

452 
ngx_c⁄f_£t_m£c_¶Ÿ
,

453 
NGX_HTTP_LOC_CONF_OFFSET
,

454 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_age
),

455 
NULL
 },

457 { 
ngx_°rög
("fastcgi_cache_revalidate"),

458 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

459 
ngx_c⁄f_£t_Êag_¶Ÿ
,

460 
NGX_HTTP_LOC_CONF_OFFSET
,

461 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

462 
NULL
 },

466 { 
ngx_°rög
("fastcgi_temp_path"),

467 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

468 
ngx_c⁄f_£t_∑th_¶Ÿ
,

469 
NGX_HTTP_LOC_CONF_OFFSET
,

470 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

471 
NULL
 },

473 { 
ngx_°rög
("fastcgi_max_temp_file_size"),

474 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

475 
ngx_c⁄f_£t_size_¶Ÿ
,

476 
NGX_HTTP_LOC_CONF_OFFSET
,

477 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

478 
NULL
 },

480 { 
ngx_°rög
("fastcgi_temp_file_write_size"),

481 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

482 
ngx_c⁄f_£t_size_¶Ÿ
,

483 
NGX_HTTP_LOC_CONF_OFFSET
,

484 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

485 
NULL
 },

487 { 
ngx_°rög
("fastcgi_next_upstream"),

488 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

489 
ngx_c⁄f_£t_bômask_¶Ÿ
,

490 
NGX_HTTP_LOC_CONF_OFFSET
,

491 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

492 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

494 { 
ngx_°rög
("fastcgi_next_upstream_tries"),

495 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

496 
ngx_c⁄f_£t_num_¶Ÿ
,

497 
NGX_HTTP_LOC_CONF_OFFSET
,

498 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

499 
NULL
 },

501 { 
ngx_°rög
("fastcgi_next_upstream_timeout"),

502 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

503 
ngx_c⁄f_£t_m£c_¶Ÿ
,

504 
NGX_HTTP_LOC_CONF_OFFSET
,

505 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

506 
NULL
 },

508 { 
ngx_°rög
("fastcgi_param"),

509 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

510 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

511 
NGX_HTTP_LOC_CONF_OFFSET
,

512 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
∑øms_sour˚
),

513 
NULL
 },

515 { 
ngx_°rög
("fastcgi_pass_header"),

516 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

517 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

518 
NGX_HTTP_LOC_CONF_OFFSET
,

519 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

520 
NULL
 },

522 { 
ngx_°rög
("fastcgi_hide_header"),

523 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

524 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

525 
NGX_HTTP_LOC_CONF_OFFSET
,

526 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

527 
NULL
 },

529 { 
ngx_°rög
("fastcgi_ignore_headers"),

530 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

531 
ngx_c⁄f_£t_bômask_¶Ÿ
,

532 
NGX_HTTP_LOC_CONF_OFFSET
,

533 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

534 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

536 { 
ngx_°rög
("fastcgi_catch_stderr"),

537 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

538 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

539 
NGX_HTTP_LOC_CONF_OFFSET
,

540 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ˇtch_°dîr
),

541 
NULL
 },

543 { 
ngx_°rög
("fastcgi_keep_conn"),

544 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

545 
ngx_c⁄f_£t_Êag_¶Ÿ
,

546 
NGX_HTTP_LOC_CONF_OFFSET
,

547 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
kìp_c⁄n
),

548 
NULL
 },

550 
ngx_nuŒ_comm™d


554 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ_˘x
 = {

555 
ngx_hâp_Á°cgi_add_v¨übÀs
,

556 
NULL
,

558 
ngx_hâp_Á°cgi_¸óã_maö_c⁄f
,

559 
NULL
,

561 
NULL
,

562 
NULL
,

564 
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
,

565 
ngx_hâp_Á°cgi_mîge_loc_c⁄f


569 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
 = {

570 
NGX_MODULE_V1
,

571 &
ngx_hâp_Á°cgi_moduÀ_˘x
,

572 
ngx_hâp_Á°cgi_comm™ds
,

573 
NGX_HTTP_MODULE
,

574 
NULL
,

575 
NULL
,

576 
NULL
,

577 
NULL
,

578 
NULL
,

579 
NULL
,

580 
NULL
,

581 
NGX_MODULE_V1_PADDING


585 
ngx_hâp_Á°cgi_ªque°_°¨t_t
 
	gngx_hâp_Á°cgi_ªque°_°¨t
 = {

587 
NGX_HTTP_FASTCGI_BEGIN_REQUEST
,

591 (
ngx_hâp_Á°cgi_begö_ªque°_t
),

596 
NGX_HTTP_FASTCGI_RESPONDER
,

601 
NGX_HTTP_FASTCGI_PARAMS
,

608 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_Á°cgi_v¨s
[] = {

610 { 
ngx_°rög
("Á°cgi_s¸ùt_«me"), 
NULL
,

611 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
, 0,

612 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

614 { 
ngx_°rög
("Á°cgi_∑th_öfo"), 
NULL
,

615 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
, 0,

616 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

618 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

622 
ngx_°r_t
 
	gngx_hâp_Á°cgi_hide_hódîs
[] = {

623 
ngx_°rög
("Status"),

624 
ngx_°rög
("X-Accel-Expires"),

625 
ngx_°rög
("X-Accel-Redirect"),

626 
ngx_°rög
("X-Accel-Limit-Rate"),

627 
ngx_°rög
("X-Accel-Buffering"),

628 
ngx_°rög
("X-Accel-Charset"),

629 
ngx_nuŒ_°rög


633 #i‡(
NGX_HTTP_CACHE
)

635 
ngx_keyvÆ_t
 
	gngx_hâp_Á°cgi_ˇche_hódîs
[] = {

636 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),

637 
ngx_°rög
("$upstream_cache_last_modified") },

638 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

639 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("$upstream_cache_etag") },

640 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

641 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

642 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

643 { 
ngx_nuŒ_°rög
,Çgx_null_string }

649 
ngx_∑th_öô_t
 
	gngx_hâp_Á°cgi_ãmp_∑th
 = {

650 
ngx_°rög
(
NGX_HTTP_FASTCGI_TEMP_PATH
), { 1, 2, 0 }

654 
ngx_öt_t


655 
	$ngx_hâp_Á°cgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

657 
ngx_öt_t
 
rc
;

658 
ngx_hâp_up°ªam_t
 *
u
;

659 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

660 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

661 #i‡(
NGX_HTTP_CACHE
)

662 
ngx_hâp_Á°cgi_maö_c⁄f_t
 *
fmcf
;

665 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

666  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

669 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

670 i‡(
f
 =
NULL
) {

671  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

674 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

676 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

678 i‡(
Êcf
->
Á°cgi_Àngths
) {

679 i‡(
	`ngx_hâp_Á°cgi_evÆ
(
r
, 
Êcf
Ë!
NGX_OK
) {

680  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

684 
u
 = 
r
->
up°ªam
;

686 
	`ngx_°r_£t
(&
u
->
schema
, "fastcgi://");

687 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_moduÀ
;

689 
u
->
c⁄f
 = &
Êcf
->
up°ªam
;

691 #i‡(
NGX_HTTP_CACHE
)

692 
fmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

694 
u
->
ˇches
 = &
fmcf
->caches;

695 
u
->
¸óã_key
 = 
ngx_hâp_Á°cgi_¸óã_key
;

698 
u
->
¸óã_ªque°
 = 
ngx_hâp_Á°cgi_¸óã_ªque°
;

699 
u
->
ªöô_ªque°
 = 
ngx_hâp_Á°cgi_ªöô_ªque°
;

700 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_Á°cgi_¥o˚ss_hódî
;

701 
u
->
ab‹t_ªque°
 = 
ngx_hâp_Á°cgi_ab‹t_ªque°
;

702 
u
->
föÆize_ªque°
 = 
ngx_hâp_Á°cgi_föÆize_ªque°
;

703 
r
->
°©e
 = 0;

705 
u
->
buf„rög
 = 
Êcf
->
up°ªam
.buffering;

707 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

708 i‡(
u
->
pùe
 =
NULL
) {

709  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

712 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_Á°cgi_öput_fûãr
;

713 
u
->
pùe
->
öput_˘x
 = 
r
;

715 
u
->
öput_fûãr_öô
 = 
ngx_hâp_Á°cgi_öput_fûãr_öô
;

716 
u
->
öput_fûãr
 = 
ngx_hâp_Á°cgi_n⁄_buf„ªd_fûãr
;

717 
u
->
öput_fûãr_˘x
 = 
r
;

719 i‡(!
Êcf
->
up°ªam
.
ªque°_buf„rög


720 && 
Êcf
->
up°ªam
.
∑ss_ªque°_body
)

722 
r
->
ªque°_body_no_buf„rög
 = 1;

725 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

727 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

728  
rc
;

731  
NGX_DONE
;

732 
	}
}

735 
ngx_öt_t


736 
	$ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

738 
ngx_uæ_t
 
uæ
;

739 
ngx_hâp_up°ªam_t
 *
u
;

741 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

743 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
Êcf
->
Á°cgi_Àngths
->
ñts
, 0,

744 
Êcf
->
Á°cgi_vÆues
->
ñts
)

745 =
NULL
)

747  
NGX_ERROR
;

750 
uæ
.
no_ªsﬁve
 = 1;

752 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

753 i‡(
uæ
.
îr
) {

754 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

755 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

758  
NGX_ERROR
;

761 
u
 = 
r
->
up°ªam
;

763 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

764 i‡(
u
->
ªsﬁved
 =
NULL
) {

765  
NGX_ERROR
;

768 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

769 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

770 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

771 
u
->
ªsﬁved
->
«ddrs
 = 1;

772 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

775 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

776 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

777 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

780  
NGX_OK
;

781 
	}
}

784 #i‡(
NGX_HTTP_CACHE
)

786 
ngx_öt_t


787 
	$ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

789 
ngx_°r_t
 *
key
;

790 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

792 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

793 i‡(
key
 =
NULL
) {

794  
NGX_ERROR
;

797 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

799 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Êcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

800  
NGX_ERROR
;

803  
NGX_OK
;

804 
	}
}

809 
ngx_öt_t


810 
	$ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

812 
off_t
 
fûe_pos
;

813 
u_ch¨
 
ch
, *
pos
, *
lowˇ£_key
;

814 
size_t
 
size
, 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
∑ddög
,

815 
Æloˇãd
;

816 
ngx_uöt_t
 
i
, 
n
, 
√xt
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

817 
ngx_buf_t
 *
b
;

818 
ngx_chaö_t
 *
˛
, *
body
;

819 
ngx_li°_∑π_t
 *
∑π
;

820 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

821 
ngx_hâp_up°ªam_t
 *
u
;

822 
ngx_hâp_s¸ùt_code_±
 
code
;

823 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

824 
ngx_hâp_Á°cgi_hódî_t
 *
h
;

825 
ngx_hâp_Á°cgi_∑øms_t
 *
∑øms
;

826 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

827 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

829 
Àn
 = 0;

830 
hódî_∑øms
 = 0;

831 
ign‹ed
 = 
NULL
;

833 
u
 = 
r
->
up°ªam
;

835 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

837 #i‡(
NGX_HTTP_CACHE
)

838 
∑øms
 = 
u
->
ˇchóbÀ
 ? &
Êcf
->
∑øms_ˇche
 : &flcf->params;

840 
∑øms
 = &
Êcf
->params;

843 i‡(
∑øms
->
Àngths
) {

844 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

846 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∑øms
->
Êushes
);

847 
À
.
Êushed
 = 1;

849 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

850 
À
.
ªque°
 = 
r
;

852 *(
uöçå_t
 *Ë
À
.
ù
) {

854 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

855 
key_Àn
 = 
	`lcode
(&
À
);

857 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

858 
skù_em±y
 = 
	`lcode
(&
À
);

860 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

861 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

863 
À
.
ù
 +(
uöçå_t
);

865 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

869 
Àn
 +1 + 
key_Àn
 + ((
vÆ_Àn
 > 127) ? 4 : 1) + val_len;

873 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

875 
Æloˇãd
 = 0;

876 
lowˇ£_key
 = 
NULL
;

878 i‡(
∑øms
->
numbî
) {

879 
n
 = 0;

880 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

882 
∑π
) {

883 
n
 +
∑π
->
√…s
;

884 
∑π
 =Ö¨t->
√xt
;

887 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

888 i‡(
ign‹ed
 =
NULL
) {

889  
NGX_ERROR
;

893 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

894 
hódî
 = 
∑π
->
ñts
;

896 
i
 = 0; ; i++) {

898 i‡(
i
 >
∑π
->
√…s
) {

899 i‡(
∑π
->
√xt
 =
NULL
) {

903 
∑π
 =Ö¨t->
√xt
;

904 
hódî
 = 
∑π
->
ñts
;

905 
i
 = 0;

908 i‡(
∑øms
->
numbî
) {

909 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

910 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

911 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

912 i‡(
lowˇ£_key
 =
NULL
) {

913  
NGX_ERROR
;

917 
hash
 = 0;

919 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

920 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

922 i‡(
ch
 >= 'A' && ch <= 'Z') {

923 
ch
 |= 0x20;

925 } i‡(
ch
 == '-') {

926 
ch
 = '_';

929 
hash
 = 
	`ngx_hash
(hash, 
ch
);

930 
lowˇ£_key
[
n
] = 
ch
;

933 i‡(
	`ngx_hash_föd
(&
∑øms
->
hash
, hash, 
lowˇ£_key
, 
n
)) {

934 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

938 
n
 += ("HTTP_") - 1;

941 
n
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

944 
Àn
 +((
n
 > 127Ë? 4 : 1Ë+ ((
hódî
[
i
].
vÆue
.len > 127) ? 4 : 1)

945 + 
n
 + 
hódî
[
i
].
vÆue
.
Àn
;

950 i‡(
Àn
 > 65535) {

951 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

952 "Á°cgòªque°Ñec‹d i†toÿbig: %uz", 
Àn
);

953  
NGX_ERROR
;

957 
∑ddög
 = 8 - 
Àn
 % 8;

958 
∑ddög
 = (padding == 8) ? 0 :Öadding;

961 
size
 = (
ngx_hâp_Á°cgi_hódî_t
)

962 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

964 + (
ngx_hâp_Á°cgi_hódî_t
)

965 + 
Àn
 + 
∑ddög


966 + (
ngx_hâp_Á°cgi_hódî_t
)

968 + (
ngx_hâp_Á°cgi_hódî_t
);

971 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

972 i‡(
b
 =
NULL
) {

973  
NGX_ERROR
;

976 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

977 i‡(
˛
 =
NULL
) {

978  
NGX_ERROR
;

981 
˛
->
buf
 = 
b
;

983 
ngx_hâp_Á°cgi_ªque°_°¨t
.
br
.
Êags
 =

984 
Êcf
->
kìp_c⁄n
 ? 
NGX_HTTP_FASTCGI_KEEP_CONN
 : 0;

986 
	`ngx_mem˝y
(
b
->
pos
, &
ngx_hâp_Á°cgi_ªque°_°¨t
,

987 (
ngx_hâp_Á°cgi_ªque°_°¨t_t
));

989 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *)

990 (
b
->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

991 + (
ngx_hâp_Á°cgi_begö_ªque°_t
));

993 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

994 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

995 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

996 
h
->
ª£rved
 = 0;

998 
b
->
œ°
 = b->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

999 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

1000 + (
ngx_hâp_Á°cgi_hódî_t
);

1003 i‡(
∑øms
->
Àngths
) {

1004 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1006 
e
.
ù
 = 
∑øms
->
vÆues
->
ñts
;

1007 
e
.
pos
 = 
b
->
œ°
;

1008 
e
.
ªque°
 = 
r
;

1009 
e
.
Êushed
 = 1;

1011 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

1013 *(
uöçå_t
 *Ë
À
.
ù
) {

1015 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1016 
key_Àn
 = (
u_ch¨
Ë
	`lcode
(&
À
);

1018 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1019 
skù_em±y
 = 
	`lcode
(&
À
);

1021 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

1022 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1024 
À
.
ù
 +(
uöçå_t
);

1026 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

1027 
e
.
skù
 = 1;

1029 *(
uöçå_t
 *Ë
e
.
ù
) {

1030 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1031 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1033 
e
.
ù
 +(
uöçå_t
);

1035 
e
.
skù
 = 0;

1040 *
e
.
pos
++ = (
u_ch¨
Ë
key_Àn
;

1042 i‡(
vÆ_Àn
 > 127) {

1043 *
e
.
pos
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

1044 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

1045 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1046 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1049 *
e
.
pos
++ = (
u_ch¨
Ë
vÆ_Àn
;

1052 *(
uöçå_t
 *Ë
e
.
ù
) {

1053 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1054 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1056 
e
.
ù
 +(
uöçå_t
);

1058 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1060 
key_Àn
, 
e
.
pos
 - (key_À¿+ 
vÆ_Àn
),

1061 
vÆ_Àn
, 
e
.
pos
 - val_len);

1064 
b
->
œ°
 = 
e
.
pos
;

1068 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1070 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1071 
hódî
 = 
∑π
->
ñts
;

1073 
i
 = 0; ; i++) {

1075 i‡(
i
 >
∑π
->
√…s
) {

1076 i‡(
∑π
->
√xt
 =
NULL
) {

1080 
∑π
 =Ö¨t->
√xt
;

1081 
hódî
 = 
∑π
->
ñts
;

1082 
i
 = 0;

1085 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

1086 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

1087 
√xt
;

1091 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

1092 i‡(
key_Àn
 > 127) {

1093 *
b
->
œ°
++ = (
u_ch¨
Ë(((
key_Àn
 >> 24) & 0x7f) | 0x80);

1094 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 16) & 0xff);

1095 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

1096 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

1099 *
b
->
œ°
++ = (
u_ch¨
Ë
key_Àn
;

1102 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

1103 i‡(
vÆ_Àn
 > 127) {

1104 *
b
->
œ°
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

1105 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

1106 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1107 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1110 *
b
->
œ°
++ = (
u_ch¨
Ë
vÆ_Àn
;

1113 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

1115 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

1116 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

1118 i‡(
ch
 >= 'a' && ch <= 'z') {

1119 
ch
 &= ~0x20;

1121 } i‡(
ch
 == '-') {

1122 
ch
 = '_';

1125 *
b
->
œ°
++ = 
ch
;

1128 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

1130 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1132 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 
vÆ_Àn
),

1133 
vÆ_Àn
, 
b
->
œ°
 - val_len);

1134 
√xt
:

1141 i‡(
∑ddög
) {

1142 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1143 
b
->
œ°
 +
∑ddög
;

1147 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1148 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1150 
h
->
vîsi⁄
 = 1;

1151 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_PARAMS
;

1152 
h
->
ªque°_id_hi
 = 0;

1153 
h
->
ªque°_id_lo
 = 1;

1154 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1155 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1156 
h
->
∑ddög_Àngth
 = 0;

1157 
h
->
ª£rved
 = 0;

1159 i‡(
r
->
ªque°_body_no_buf„rög
) {

1161 
u
->
ªque°_bufs
 = 
˛
;

1163 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_hâp_Á°cgi_body_ouçut_fûãr
;

1164 
u
->
ouçut
.
fûãr_˘x
 = 
r
;

1166 } i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_body
) {

1168 
body
 = 
u
->
ªque°_bufs
;

1169 
u
->
ªque°_bufs
 = 
˛
;

1171 #i‡(
NGX_SUPPRESS_WARN
)

1172 
fûe_pos
 = 0;

1173 
pos
 = 
NULL
;

1176 
body
) {

1178 i‡(
body
->
buf
->
ö_fûe
) {

1179 
fûe_pos
 = 
body
->
buf
->file_pos;

1182 
pos
 = 
body
->
buf
->pos;

1185 
√xt
 = 0;

1188 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1189 i‡(
b
 =
NULL
) {

1190  
NGX_ERROR
;

1193 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1195 i‡(
body
->
buf
->
ö_fûe
) {

1196 
b
->
fûe_pos
 = file_pos;

1197 
fûe_pos
 += 32 * 1024;

1199 i‡(
fûe_pos
 >
body
->
buf
->
fûe_œ°
) {

1200 
fûe_pos
 = 
body
->
buf
->
fûe_œ°
;

1201 
√xt
 = 1;

1204 
b
->
fûe_œ°
 = 
fûe_pos
;

1205 
Àn
 = (
ngx_uöt_t
Ë(
fûe_pos
 - 
b
->file_pos);

1208 
b
->
pos
 =Öos;

1209 
b
->
°¨t
 = 
pos
;

1210 
pos
 += 32 * 1024;

1212 i‡(
pos
 >
body
->
buf
->
œ°
) {

1213 
pos
 = 
body
->
buf
->
œ°
;

1214 
√xt
 = 1;

1217 
b
->
œ°
 = 
pos
;

1218 
Àn
 = (
ngx_uöt_t
Ë(
pos
 - 
b
->pos);

1221 
∑ddög
 = 8 - 
Àn
 % 8;

1222 
∑ddög
 = (padding == 8) ? 0 :Öadding;

1224 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
˛
->
buf
->
œ°
;

1225 
˛
->
buf
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1227 
h
->
vîsi⁄
 = 1;

1228 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1229 
h
->
ªque°_id_hi
 = 0;

1230 
h
->
ªque°_id_lo
 = 1;

1231 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1232 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1233 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

1234 
h
->
ª£rved
 = 0;

1236 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1237 i‡(
˛
->
√xt
 =
NULL
) {

1238  
NGX_ERROR
;

1241 
˛
 = cl->
√xt
;

1242 
˛
->
buf
 = 
b
;

1244 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

1245 (
ngx_hâp_Á°cgi_hódî_t
)

1246 + 
∑ddög
);

1247 i‡(
b
 =
NULL
) {

1248  
NGX_ERROR
;

1251 i‡(
∑ddög
) {

1252 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1253 
b
->
œ°
 +
∑ddög
;

1256 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1257 i‡(
˛
->
√xt
 =
NULL
) {

1258  
NGX_ERROR
;

1261 
˛
 = cl->
√xt
;

1262 
˛
->
buf
 = 
b
;

1264 } !
√xt
);

1266 
body
 = body->
√xt
;

1270 
u
->
ªque°_bufs
 = 
˛
;

1273 i‡(!
r
->
ªque°_body_no_buf„rög
) {

1274 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
˛
->
buf
->
œ°
;

1275 
˛
->
buf
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1277 
h
->
vîsi⁄
 = 1;

1278 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1279 
h
->
ªque°_id_hi
 = 0;

1280 
h
->
ªque°_id_lo
 = 1;

1281 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1282 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1283 
h
->
∑ddög_Àngth
 = 0;

1284 
h
->
ª£rved
 = 0;

1287 
˛
->
√xt
 = 
NULL
;

1289  
NGX_OK
;

1290 
	}
}

1293 
ngx_öt_t


1294 
	$ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1296 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1298 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1300 i‡(
f
 =
NULL
) {

1301  
NGX_OK
;

1304 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1305 
f
->
Á°cgi_°dout
 = 0;

1306 
f
->
œrge_°dîr
 = 0;

1308 i‡(
f
->
•lô_∑πs
) {

1309 
f
->
•lô_∑πs
->
√…s
 = 0;

1312 
r
->
°©e
 = 0;

1314  
NGX_OK
;

1315 
	}
}

1318 
ngx_öt_t


1319 
	$ngx_hâp_Á°cgi_body_ouçut_fûãr
(*
d©a
, 
ngx_chaö_t
 *
ö
)

1321 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1323 
off_t
 
fûe_pos
;

1324 
u_ch¨
 *
pos
, *
°¨t
;

1325 
size_t
 
Àn
, 
∑ddög
;

1326 
ngx_buf_t
 *
b
;

1327 
ngx_öt_t
 
rc
;

1328 
ngx_uöt_t
 
√xt
, 
œ°
;

1329 
ngx_chaö_t
 *
˛
, *
é
, *
out
, **
Œ
;

1330 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1331 
ngx_hâp_Á°cgi_hódî_t
 *
h
;

1333 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1336 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1338 i‡(
ö
 =
NULL
) {

1339 
out
 = 
ö
;

1340 
out
;

1343 
out
 = 
NULL
;

1344 
Œ
 = &
out
;

1346 i‡(!
f
->
hódî_£¡
) {

1349 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1352 
f
->
hódî_£¡
 = 1;

1354 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1355 i‡(
é
 =
NULL
) {

1356  
NGX_ERROR
;

1359 
é
->
buf
 = 
ö
->buf;

1360 *
Œ
 = 
é
;

1361 
Œ
 = &
é
->
√xt
;

1363 
ö
 = in->
√xt
;

1365 i‡(
ö
 =
NULL
) {

1366 
é
->
√xt
 = 
NULL
;

1367 
out
;

1371 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
f
->
‰ì
);

1372 i‡(
˛
 =
NULL
) {

1373  
NGX_ERROR
;

1376 
b
 = 
˛
->
buf
;

1378 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_body_ouçut_fûãr
;

1379 
b
->
ãmp‹¨y
 = 1;

1381 i‡(
b
->
°¨t
 =
NULL
) {

1384 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
,

1385 (
ngx_hâp_Á°cgi_hódî_t
) + 7);

1386 i‡(
b
->
°¨t
 =
NULL
) {

1387  
NGX_ERROR
;

1390 
b
->
pos
 = b->
°¨t
;

1391 
b
->
œ°
 = b->
°¨t
;

1393 
b
->
íd
 = b->
°¨t
 + (
ngx_hâp_Á°cgi_hódî_t
) + 7;

1396 *
Œ
 = 
˛
;

1398 
œ°
 = 0;

1399 
∑ddög
 = 0;

1401 #i‡(
NGX_SUPPRESS_WARN
)

1402 
fûe_pos
 = 0;

1403 
pos
 = 
NULL
;

1406 
ö
) {

1408 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1411 
ö
->
buf
->
œ°_buf
,

1412 
ö
->
buf
->
ö_fûe
,

1413 
ö
->
buf
->
°¨t
, in->buf->
pos
,

1414 
ö
->
buf
->
œ°
 - in->buf->
pos
,

1415 
ö
->
buf
->
fûe_pos
,

1416 
ö
->
buf
->
fûe_œ°
 - in->buf->
fûe_pos
);

1418 i‡(
ö
->
buf
->
œ°_buf
) {

1419 
œ°
 = 1;

1422 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1423 
ö
 = in->
√xt
;

1427 i‡(
ö
->
buf
->
ö_fûe
) {

1428 
fûe_pos
 = 
ö
->
buf
->file_pos;

1431 
pos
 = 
ö
->
buf
->pos;

1434 
√xt
 = 0;

1437 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
f
->
‰ì
);

1438 i‡(
é
 =
NULL
) {

1439  
NGX_ERROR
;

1442 
b
 = 
é
->
buf
;

1443 
°¨t
 = 
b
->start;

1445 
	`ngx_mem˝y
(
b
, 
ö
->
buf
, (
ngx_buf_t
));

1452 
b
->
°¨t
 = start;

1454 i‡(
ö
->
buf
->
ö_fûe
) {

1455 
b
->
fûe_pos
 = file_pos;

1456 
fûe_pos
 += 32 * 1024;

1458 i‡(
fûe_pos
 >
ö
->
buf
->
fûe_œ°
) {

1459 
fûe_pos
 = 
ö
->
buf
->
fûe_œ°
;

1460 
√xt
 = 1;

1463 
b
->
fûe_œ°
 = 
fûe_pos
;

1464 
Àn
 = (
ngx_uöt_t
Ë(
fûe_pos
 - 
b
->file_pos);

1467 
b
->
pos
 =Öos;

1468 
pos
 += 32 * 1024;

1470 i‡(
pos
 >
ö
->
buf
->
œ°
) {

1471 
pos
 = 
ö
->
buf
->
œ°
;

1472 
√xt
 = 1;

1475 
b
->
œ°
 = 
pos
;

1476 
Àn
 = (
ngx_uöt_t
Ë(
pos
 - 
b
->pos);

1479 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_body_ouçut_fûãr
;

1480 
b
->
shadow
 = 
ö
->
buf
;

1481 
b
->
œ°_shadow
 = 
√xt
;

1483 
b
->
œ°_buf
 = 0;

1484 
b
->
œ°_ö_chaö
 = 0;

1486 
∑ddög
 = 8 - 
Àn
 % 8;

1487 
∑ddög
 = (padding == 8) ? 0 :Öadding;

1489 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
˛
->
buf
->
œ°
;

1490 
˛
->
buf
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1492 
h
->
vîsi⁄
 = 1;

1493 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1494 
h
->
ªque°_id_hi
 = 0;

1495 
h
->
ªque°_id_lo
 = 1;

1496 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1497 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1498 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

1499 
h
->
ª£rved
 = 0;

1501 
˛
->
√xt
 = 
é
;

1502 
˛
 = 
é
;

1504 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
f
->
‰ì
);

1505 i‡(
é
 =
NULL
) {

1506  
NGX_ERROR
;

1509 
b
 = 
é
->
buf
;

1511 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_body_ouçut_fûãr
;

1512 
b
->
ãmp‹¨y
 = 1;

1514 i‡(
b
->
°¨t
 =
NULL
) {

1517 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
,

1518 (
ngx_hâp_Á°cgi_hódî_t
) + 7);

1519 i‡(
b
->
°¨t
 =
NULL
) {

1520  
NGX_ERROR
;

1523 
b
->
pos
 = b->
°¨t
;

1524 
b
->
œ°
 = b->
°¨t
;

1526 
b
->
íd
 = b->
°¨t
 + (
ngx_hâp_Á°cgi_hódî_t
) + 7;

1529 i‡(
∑ddög
) {

1530 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1531 
b
->
œ°
 +
∑ddög
;

1534 
˛
->
√xt
 = 
é
;

1535 
˛
 = 
é
;

1537 } !
√xt
);

1539 
ö
 = in->
√xt
;

1542 i‡(
œ°
) {

1543 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
˛
->
buf
->
œ°
;

1544 
˛
->
buf
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1546 
h
->
vîsi⁄
 = 1;

1547 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1548 
h
->
ªque°_id_hi
 = 0;

1549 
h
->
ªque°_id_lo
 = 1;

1550 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1551 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1552 
h
->
∑ddög_Àngth
 = 0;

1553 
h
->
ª£rved
 = 0;

1555 
˛
->
buf
->
œ°_buf
 = 1;

1557 } i‡(
∑ddög
 == 0) {

1559 
˛
->
buf
->
ãmp‹¨y
 = 0;

1560 
˛
->
buf
->
sync
 = 1;

1563 
˛
->
√xt
 = 
NULL
;

1565 
out
:

1567 #i‡(
NGX_DEBUG
)

1569 
˛
 = 
out
; cl; c»˛->
√xt
) {

1570 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1573 
˛
->
buf
->
œ°_buf
,

1574 
˛
->
buf
->
ö_fûe
,

1575 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1576 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1577 
˛
->
buf
->
fûe_pos
,

1578 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1583 
rc
 = 
	`ngx_chaö_wrôî
(&
r
->
up°ªam
->
wrôî
, 
out
);

1585 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
f
->
‰ì
, &f->
busy
, &
out
,

1586 (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_body_ouçut_fûãr
);

1588 
˛
 = 
f
->
‰ì
; cl; c»˛->
√xt
) {

1592 i‡(
˛
->
buf
->
shadow
) {

1593 i‡(
˛
->
buf
->
œ°_shadow
) {

1594 
b
 = 
˛
->
buf
->
shadow
;

1595 
b
->
pos
 = b->
œ°
;

1598 
˛
->
buf
->
shadow
 = 
NULL
;

1602  
rc
;

1603 
	}
}

1606 
ngx_öt_t


1607 
	$ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1609 
u_ch¨
 *
p
, *
msg
, *
°¨t
, *
œ°
,

1610 *
∑π_°¨t
, *
∑π_íd
;

1611 
size_t
 
size
;

1612 
ngx_°r_t
 *
°©us_löe
, *
∑âîn
;

1613 
ngx_öt_t
 
rc
, 
°©us
;

1614 
ngx_buf_t
 
buf
;

1615 
ngx_uöt_t
 
i
;

1616 
ngx_èbÀ_ñt_t
 *
h
;

1617 
ngx_hâp_up°ªam_t
 *
u
;

1618 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1619 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1620 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1621 
ngx_hâp_Á°cgi_•lô_∑π_t
 *
∑π
;

1622 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1624 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1626 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1628 
u
 = 
r
->
up°ªam
;

1632 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1634 
f
->
pos
 = 
u
->
buf„r
.pos;

1635 
f
->
œ°
 = 
u
->
buf„r
.last;

1637 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1639 
u
->
buf„r
.
pos
 = 
f
->pos;

1640 
u
->
buf„r
.
œ°
 = 
f
->last;

1642 i‡(
rc
 =
NGX_AGAIN
) {

1643  
NGX_AGAIN
;

1646 i‡(
rc
 =
NGX_ERROR
) {

1647  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1650 i‡(
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDOUT


1651 && 
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDERR
)

1653 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1655 
f
->
ty≥
);

1657  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1660 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1661 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1664  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1668 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1670 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 < u->buf„r.
œ°
) {

1671 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1672 
u
->
buf„r
.
pos
 +
f
->
∑ddög
;

1677 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 =u->buf„r.
œ°
) {

1678 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1679 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1681  
NGX_AGAIN
;

1684 
f
->
∑ddög
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1685 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1687  
NGX_AGAIN
;

1693 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1695 i‡(
f
->
Àngth
) {

1696 
msg
 = 
u
->
buf„r
.
pos
;

1698 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 <u->buf„r.
œ°
) {

1699 
u
->
buf„r
.
pos
 +
f
->
Àngth
;

1700 
f
->
Àngth
 = 0;

1701 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1704 
f
->
Àngth
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1705 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1708 
p
 = 
u
->
buf„r
.
pos
 - 1; 
msg
 <Ö;Ö--) {

1709 i‡(*
p
 !
LF
 && *∞!
CR
 && *p != '.' && *p != ' ') {

1714 
p
++;

1716 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1717 "Fa°CGI síàö stdîr: \"%*s\"", 
p
 - 
msg
, msg);

1719 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1721 i‡(
Êcf
->
ˇtch_°dîr
) {

1722 
∑âîn
 = 
Êcf
->
ˇtch_°dîr
->
ñts
;

1724 
i
 = 0; i < 
Êcf
->
ˇtch_°dîr
->
√…s
; i++) {

1725 i‡(
	`ngx_°∫°r
(
msg
, (*Ë
∑âîn
[
i
].
d©a
,

1726 
p
 - 
msg
)

1727 !
NULL
)

1729  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1734 i‡(
u
->
buf„r
.
pos
 =u->buf„r.
œ°
) {

1736 i‡(!
f
->
Á°cgi_°dout
) {

1743 #i‡(
NGX_HTTP_CACHE
)

1744 i‡(
r
->
ˇche
) {

1745 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t


1746 + 
r
->
ˇche
->
hódî_°¨t
;

1748 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1751 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1753 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1754 
f
->
œrge_°dîr
 = 1;

1757  
NGX_AGAIN
;

1761 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1770 #i‡(
NGX_HTTP_CACHE
)

1772 i‡(
f
->
œrge_°dîr
 && 
r
->
ˇche
) {

1773 
u_ch¨
 *
°¨t
;

1774 
ssize_t
 
Àn
;

1775 
ngx_hâp_Á°cgi_hódî_t
 *
fh
;

1777 
°¨t
 = 
u
->
buf„r
.°¨à+ 
r
->
ˇche
->
hódî_°¨t
;

1779 
Àn
 = 
u
->
buf„r
.
pos
 - 
°¨t
 - 2 * (
ngx_hâp_Á°cgi_hódî_t
);

1789 i‡(
Àn
 >= 0) {

1790 
fh
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
°¨t
;

1791 
fh
->
vîsi⁄
 = 1;

1792 
fh
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDERR
;

1793 
fh
->
ªque°_id_hi
 = 0;

1794 
fh
->
ªque°_id_lo
 = 1;

1795 
fh
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1796 
fh
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1797 
fh
->
∑ddög_Àngth
 = 0;

1798 
fh
->
ª£rved
 = 0;

1801 
r
->
ˇche
->
hódî_°¨t
 +
u
->
buf„r
.
pos
 - 
°¨t


1802 - (
ngx_hâp_Á°cgi_hódî_t
);

1805 
f
->
œrge_°dîr
 = 0;

1810 
f
->
Á°cgi_°dout
 = 1;

1812 
°¨t
 = 
u
->
buf„r
.
pos
;

1814 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 < u->buf„r.
œ°
) {

1821 
œ°
 = 
u
->
buf„r
.last;

1822 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
 + 
f
->
Àngth
;

1825 
œ°
 = 
NULL
;

1830 
∑π_°¨t
 = 
u
->
buf„r
.
pos
;

1831 
∑π_íd
 = 
u
->
buf„r
.
œ°
;

1833 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
u
->
buf„r
, 1);

1835 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1836 "hâ∞Á°cgò∑r£r: %d", 
rc
);

1838 i‡(
rc
 =
NGX_AGAIN
) {

1842 i‡(
rc
 =
NGX_OK
) {

1846 
h
 = 
	`ngx_li°_push
(&
u
->
hódîs_ö
.
hódîs
);

1847 i‡(
h
 =
NULL
) {

1848  
NGX_ERROR
;

1851 i‡(
f
->
•lô_∑πs
 && f->•lô_∑πs->
√…s
) {

1853 
∑π
 = 
f
->
•lô_∑πs
->
ñts
;

1854 
size
 = 
u
->
buf„r
.
pos
 - 
∑π_°¨t
;

1856 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1857 
size
 +
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
;

1860 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
size
);

1861 i‡(
p
 =
NULL
) {

1862  
NGX_ERROR
;

1865 
buf
.
pos
 = 
p
;

1867 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1868 
p
 = 
	`ngx_˝ymem
’, 
∑π
[
i
].
°¨t
,

1869 
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
);

1872 
p
 = 
	`ngx_˝ymem
’, 
∑π_°¨t
, 
u
->
buf„r
.
pos
 -Öart_start);

1874 
buf
.
œ°
 = 
p
;

1876 
f
->
•lô_∑πs
->
√…s
 = 0;

1878 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
buf
, 1);

1880 i‡(
rc
 !
NGX_OK
) {

1881 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1884  
NGX_ERROR
;

1887 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1888 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1889 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1891 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1892 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1893 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1895 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1896 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1897  
NGX_ERROR
;

1902 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1903 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1905 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1906 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1907 + 
h
->
key
.
Àn
);

1908 i‡(
h
->
key
.
d©a
 =
NULL
) {

1909  
NGX_ERROR
;

1912 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1913 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1

1914 + 
h
->
vÆue
.
Àn
 + 1;

1916 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1917 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1918 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1919 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1922 
h
->
hash
 = 
r
->
hódî_hash
;

1924 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1925 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1928 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1931 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1932 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1934 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1935  
NGX_ERROR
;

1938 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1940 &
h
->
key
, &h->
vÆue
);

1942 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1951 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1955 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1958 i‡(
u
->
hódîs_ö
.
°©us
) {

1959 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1961 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1963 i‡(
°©us
 =
NGX_ERROR
) {

1964 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1966 
°©us_löe
);

1967  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1970 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1971 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1973 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1974 
u
->
hódîs_ö
.
°©us_n
 = 302;

1975 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1979 
u
->
hódîs_ö
.
°©us_n
 = 200;

1980 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1983 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1984 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1992 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1995  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1998 i‡(
œ°
) {

1999 
u
->
buf„r
.
œ°
 =Üast;

2002 
f
->
Àngth
 -
u
->
buf„r
.
pos
 - 
°¨t
;

2004 i‡(
f
->
Àngth
 == 0) {

2005 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2008 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

2009  
NGX_OK
;

2012 i‡(
rc
 =
NGX_OK
) {

2018 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2021 i‡(
f
->
•lô_∑πs
 =
NULL
) {

2022 
f
->
•lô_∑πs
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 1,

2023 (
ngx_hâp_Á°cgi_•lô_∑π_t
));

2024 i‡(
f
->
•lô_∑πs
 =
NULL
) {

2025  
NGX_ERROR
;

2029 
∑π
 = 
	`ngx_¨øy_push
(
f
->
•lô_∑πs
);

2030 i‡(
∑π
 =
NULL
) {

2031  
NGX_ERROR
;

2034 
∑π
->
°¨t
 = 
∑π_°¨t
;

2035 
∑π
->
íd
 = 
∑π_íd
;

2037 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

2041  
NGX_AGAIN
;

2043 
	}
}

2046 
ngx_öt_t


2047 
	$ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
)

2049 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2050 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2052 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2054 
r
->
up°ªam
->
pùe
->
Àngth
 = 
Êcf
->
kìp_c⁄n
 ?

2055 (
off_t
Ë(
ngx_hâp_Á°cgi_hódî_t
) : -1;

2057  
NGX_OK
;

2058 
	}
}

2061 
ngx_öt_t


2062 
	$ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

2064 
u_ch¨
 *
m
, *
msg
;

2065 
ngx_öt_t
 
rc
;

2066 
ngx_buf_t
 *
b
, **
¥ev
;

2067 
ngx_chaö_t
 *
˛
;

2068 
ngx_hâp_ªque°_t
 *
r
;

2069 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2070 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2072 i‡(
buf
->
pos
 =buf->
œ°
) {

2073  
NGX_OK
;

2076 
r
 = 
p
->
öput_˘x
;

2077 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2078 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2080 
b
 = 
NULL
;

2081 
¥ev
 = &
buf
->
shadow
;

2083 
f
->
pos
 = 
buf
->pos;

2084 
f
->
œ°
 = 
buf
->last;

2087 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

2089 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

2091 i‡(
rc
 =
NGX_AGAIN
) {

2095 i‡(
rc
 =
NGX_ERROR
) {

2096  
NGX_ERROR
;

2099 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

2100 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2102 i‡(!
Êcf
->
kìp_c⁄n
) {

2103 
p
->
up°ªam_d⁄e
 = 1;

2106 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

2112 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2114 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

2117 i‡(!
Êcf
->
kìp_c⁄n
) {

2118 
p
->
up°ªam_d⁄e
 = 1;

2127 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

2129 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2131 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

2132 
p
->
up°ªam_d⁄e
 = 1;

2136 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

2137 
p
->
up°ªam_d⁄e
 = 1;

2138 
r
->
up°ªam
->
kì∑live
 = 1;

2142 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

2147 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

2148 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

2149 
f
->
pos
 +f->
∑ddög
;

2154 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

2155 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

2160 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

2168 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

2170 i‡(
f
->
Àngth
) {

2172 i‡(
f
->
pos
 =f->
œ°
) {

2176 
msg
 = 
f
->
pos
;

2178 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2179 
f
->
pos
 +f->
Àngth
;

2180 
f
->
Àngth
 = 0;

2181 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2184 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2185 
f
->
pos
 = f->
œ°
;

2188 
m
 = 
f
->
pos
 - 1; 
msg
 < m; m--) {

2189 i‡(*
m
 !
LF
 && *m !
CR
 && *m != '.' && *m != ' ') {

2194 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
, 0,

2196 
m
 + 1 - 
msg
, msg);

2199 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2205 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2207 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2208 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2209 
f
->
pos
 +f->
Àngth
;

2214 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2222 i‡(
f
->
pos
 =f->
œ°
) {

2226 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

2227 i‡(
˛
 =
NULL
) {

2228  
NGX_ERROR
;

2231 
b
 = 
˛
->
buf
;

2233 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

2235 
b
->
pos
 = 
f
->pos;

2236 
b
->
°¨t
 = 
buf
->start;

2237 
b
->
íd
 = 
buf
->end;

2238 
b
->
èg
 = 
p
->tag;

2239 
b
->
ãmp‹¨y
 = 1;

2240 
b
->
ªcy˛ed
 = 1;

2242 *
¥ev
 = 
b
;

2243 
¥ev
 = &
b
->
shadow
;

2245 i‡(
p
->
ö
) {

2246 *
p
->
œ°_ö
 = 
˛
;

2248 
p
->
ö
 = 
˛
;

2250 
p
->
œ°_ö
 = &
˛
->
√xt
;

2253  
b
->
num
 = 
buf
->num;

2255 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

2256 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

2258 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2259 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2260 
f
->
pos
 +f->
Àngth
;

2261 
b
->
œ°
 = 
f
->
pos
;

2266 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2268 
b
->
œ°
 = 
f
->last;

2274 i‡(
Êcf
->
kìp_c⁄n
) {

2278 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

2279 
p
->
Àngth
 = 1;

2281 } i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

2282 
p
->
Àngth
 = 
f
->
∑ddög
;

2287 
p
->
Àngth
 = 
f
->length;

2291 i‡(
b
) {

2292 
b
->
shadow
 = 
buf
;

2293 
b
->
œ°_shadow
 = 1;

2295 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

2296 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

2298  
NGX_OK
;

2303 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

2304  
NGX_ERROR
;

2307  
NGX_OK
;

2308 
	}
}

2311 
ngx_öt_t


2312 
	$ngx_hâp_Á°cgi_n⁄_buf„ªd_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2314 
u_ch¨
 *
m
, *
msg
;

2315 
ngx_öt_t
 
rc
;

2316 
ngx_buf_t
 *
b
, *
buf
;

2317 
ngx_chaö_t
 *
˛
, **
Œ
;

2318 
ngx_hâp_ªque°_t
 *
r
;

2319 
ngx_hâp_up°ªam_t
 *
u
;

2320 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2322 
r
 = 
d©a
;

2323 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2325 
u
 = 
r
->
up°ªam
;

2326 
buf
 = &
u
->
buf„r
;

2328 
buf
->
pos
 = buf->
œ°
;

2329 
buf
->
œ°
 +
byãs
;

2331 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2332 
Œ
 = &
˛
->
√xt
;

2335 
f
->
pos
 = 
buf
->pos;

2336 
f
->
œ°
 = 
buf
->last;

2339 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

2341 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

2343 i‡(
rc
 =
NGX_AGAIN
) {

2347 i‡(
rc
 =
NGX_ERROR
) {

2348  
NGX_ERROR
;

2351 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

2352 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2354 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2361 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

2363 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2365 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

2366 
u
->
Àngth
 = 0;

2370 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

2371 
u
->
Àngth
 = 0;

2372 
u
->
kì∑live
 = 1;

2376 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

2381 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

2382 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

2383 
f
->
pos
 +f->
∑ddög
;

2388 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

2389 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

2394 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

2402 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

2404 i‡(
f
->
Àngth
) {

2406 i‡(
f
->
pos
 =f->
œ°
) {

2410 
msg
 = 
f
->
pos
;

2412 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2413 
f
->
pos
 +f->
Àngth
;

2414 
f
->
Àngth
 = 0;

2415 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2418 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2419 
f
->
pos
 = f->
œ°
;

2422 
m
 = 
f
->
pos
 - 1; 
msg
 < m; m--) {

2423 i‡(*
m
 !
LF
 && *m !
CR
 && *m != '.' && *m != ' ') {

2428 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2430 
m
 + 1 - 
msg
, msg);

2433 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2439 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

2441 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2442 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2443 
f
->
pos
 +f->
Àngth
;

2448 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2456 i‡(
f
->
pos
 =f->
œ°
) {

2460 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2461 i‡(
˛
 =
NULL
) {

2462  
NGX_ERROR
;

2465 *
Œ
 = 
˛
;

2466 
Œ
 = &
˛
->
√xt
;

2468 
b
 = 
˛
->
buf
;

2470 
b
->
Êush
 = 1;

2471 
b
->
mem‹y
 = 1;

2473 
b
->
pos
 = 
f
->pos;

2474 
b
->
èg
 = 
u
->
ouçut
.tag;

2476 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2477 "hâ∞Á°cgòouçuàbu‡%p", 
b
->
pos
);

2479 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

2480 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

2481 
f
->
pos
 +f->
Àngth
;

2482 
b
->
œ°
 = 
f
->
pos
;

2487 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

2488 
b
->
œ°
 = 
f
->last;

2495 i‡(
r
->
subªque°_ö_mem‹y
) {

2497 
˛
 = 
u
->
out_bufs
;

2499 i‡(
˛
) {

2500 
buf
->
pos
 = 
˛
->buf->pos;

2503 
buf
->
œ°
 = buf->
pos
;

2505 
˛
 = 
u
->
out_bufs
; cl; c»˛->
√xt
) {

2506 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2508 
˛
->
buf
->
pos
, cl->buf->
œ°
, 
	`ngx_buf_size
(cl->buf));

2510 i‡(
buf
->
œ°
 =
˛
->buf->
pos
) {

2511 
buf
->
œ°
 = 
˛
->buf->last;

2515 
buf
->
œ°
 = 
	`ngx_movemem
(buf->œ°, 
˛
->buf->
pos
,

2516 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

2518 
˛
->
buf
->
pos
 = buf->
œ°
 - (cl->buf->last - cl->buf->pos);

2519 
˛
->
buf
->
œ°
 = buf->last;

2523  
NGX_OK
;

2524 
	}
}

2527 
ngx_öt_t


2528 
	$ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

2529 
ngx_hâp_Á°cgi_˘x_t
 *
f
)

2531 
u_ch¨
 
ch
, *
p
;

2532 
ngx_hâp_Á°cgi_°©e_e
 
°©e
;

2534 
°©e
 = 
f
->state;

2536 
p
 = 
f
->
pos
;Ö < f->
œ°
;Ö++) {

2538 
ch
 = *
p
;

2540 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2541 "hâ∞Á°cgòªc‹d byã: %02Xd", 
ch
);

2543 
°©e
) {

2545 
ngx_hâp_Á°cgi_°_vîsi⁄
:

2546 i‡(
ch
 != 1) {

2547 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2549 "¥Ÿocﬁ vîsi⁄: %d", 
ch
);

2550  
NGX_ERROR
;

2552 
°©e
 = 
ngx_hâp_Á°cgi_°_ty≥
;

2555 
ngx_hâp_Á°cgi_°_ty≥
:

2556 
ch
) {

2557 
NGX_HTTP_FASTCGI_STDOUT
:

2558 
NGX_HTTP_FASTCGI_STDERR
:

2559 
NGX_HTTP_FASTCGI_END_REQUEST
:

2560 
f
->
ty≥
 = (
ngx_uöt_t
Ë
ch
;

2563 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2565 "ªc‹dÅy≥: %d", 
ch
);

2566  
NGX_ERROR
;

2569 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_hi
;

2574 
ngx_hâp_Á°cgi_°_ªque°_id_hi
:

2575 i‡(
ch
 != 0) {

2576 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2578 "ªque° id high byã: %d", 
ch
);

2579  
NGX_ERROR
;

2581 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_lo
;

2584 
ngx_hâp_Á°cgi_°_ªque°_id_lo
:

2585 i‡(
ch
 != 1) {

2586 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2588 "ªque° idÜow byã: %d", 
ch
);

2589  
NGX_ERROR
;

2591 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
;

2594 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
:

2595 
f
->
Àngth
 = 
ch
 << 8;

2596 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
;

2599 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
:

2600 
f
->
Àngth
 |(
size_t
Ë
ch
;

2601 
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
;

2604 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
:

2605 
f
->
∑ddög
 = (
size_t
Ë
ch
;

2606 
°©e
 = 
ngx_hâp_Á°cgi_°_ª£rved
;

2609 
ngx_hâp_Á°cgi_°_ª£rved
:

2610 
°©e
 = 
ngx_hâp_Á°cgi_°_d©a
;

2612 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2613 "hâ∞Á°cgòªc‹dÜígth: %z", 
f
->
Àngth
);

2615 
f
->
pos
 = 
p
 + 1;

2616 
f
->
°©e
 = state;

2618  
NGX_OK
;

2621 
ngx_hâp_Á°cgi_°_d©a
:

2622 
ngx_hâp_Á°cgi_°_∑ddög
:

2627 
f
->
°©e
 = state;

2629  
NGX_AGAIN
;

2630 
	}
}

2634 
	$ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2636 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2640 
	}
}

2644 
	$ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2646 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2650 
	}
}

2653 
ngx_öt_t


2654 
	$ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2656 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2658 
v
 = 
ngx_hâp_Á°cgi_v¨s
; v->
«me
.
Àn
; v++) {

2659 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2660 i‡(
v¨
 =
NULL
) {

2661  
NGX_ERROR
;

2664 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2665 
v¨
->
d©a
 = 
v
->data;

2668  
NGX_OK
;

2669 
	}
}

2673 
	$ngx_hâp_Á°cgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2675 
ngx_hâp_Á°cgi_maö_c⁄f_t
 *
c⁄f
;

2677 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_Á°cgi_maö_c⁄f_t
));

2678 i‡(
c⁄f
 =
NULL
) {

2679  
NULL
;

2682 #i‡(
NGX_HTTP_CACHE
)

2683 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
ˇches
, 
cf
->
poﬁ
, 4,

2684 (
ngx_hâp_fûe_ˇche_t
 *))

2685 !
NGX_OK
)

2687  
NULL
;

2691  
c⁄f
;

2692 
	}
}

2696 
	$ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2698 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
;

2700 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_Á°cgi_loc_c⁄f_t
));

2701 i‡(
c⁄f
 =
NULL
) {

2702  
NULL
;

2724 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2725 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2726 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

2727 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2728 
c⁄f
->
up°ªam
.
ªque°_buf„rög
 = 
NGX_CONF_UNSET
;

2729 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2730 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 
NGX_CONF_UNSET
;

2732 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

2734 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2735 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2736 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2737 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2739 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2740 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2741 
c⁄f
->
up°ªam
.
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

2743 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2744 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2745 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2747 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2748 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2750 #i‡(
NGX_HTTP_CACHE
)

2751 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET
;

2752 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2753 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2754 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2755 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2756 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2757 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2758 
c⁄f
->
up°ªam
.
ˇche_lock_age
 = 
NGX_CONF_UNSET_MSEC
;

2759 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

2762 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2763 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2765 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2768 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2770 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

2772 
c⁄f
->
ˇtch_°dîr
 = 
NGX_CONF_UNSET_PTR
;

2774 
c⁄f
->
kìp_c⁄n
 = 
NGX_CONF_UNSET
;

2776 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "fastcgi");

2778  
c⁄f
;

2779 
	}
}

2783 
	$ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2785 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2786 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2788 
size_t
 
size
;

2789 
ngx_öt_t
 
rc
;

2790 
ngx_hash_öô_t
 
hash
;

2791 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2793 #i‡(
NGX_HTTP_CACHE
)

2795 i‡(
c⁄f
->
up°ªam
.
°‹e
 > 0) {

2796 
c⁄f
->
up°ªam
.
ˇche
 = 0;

2799 i‡(
c⁄f
->
up°ªam
.
ˇche
 > 0) {

2800 
c⁄f
->
up°ªam
.
°‹e
 = 0;

2805 i‡(
c⁄f
->
up°ªam
.
°‹e
 =
NGX_CONF_UNSET
) {

2806 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2807 
¥ev
->
up°ªam
.
°‹e
, 0);

2809 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2810 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2813 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2814 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2816 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

2817 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

2819 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2820 
¥ev
->
up°ªam
.
buf„rög
, 1);

2822 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ªque°_buf„rög
,

2823 
¥ev
->
up°ªam
.
ªque°_buf„rög
, 1);

2825 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2826 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2828 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
f‹˚_ønges
,

2829 
¥ev
->
up°ªam
.
f‹˚_ønges
, 0);

2831 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

2832 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

2834 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2835 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2837 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2838 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2840 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2841 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2843 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

2844 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

2846 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2847 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2849 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2850 
¥ev
->
up°ªam
.
buf„r_size
,

2851 (
size_t
Ë
ngx_∑gesize
);

2853 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
limô_øã
,

2854 
¥ev
->
up°ªam
.
limô_øã
, 0);

2857 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2858 8, 
ngx_∑gesize
);

2860 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2861 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2863  
NGX_CONF_ERROR
;

2867 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2868 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2869 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2873 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2874 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2875 
NGX_CONF_UNSET_SIZE
);

2877 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2878 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2880 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2881 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2884 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2885 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2890  
NGX_CONF_ERROR
;

2893 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2894 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2896 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2900  
NGX_CONF_ERROR
;

2904 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2905 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2906 
NGX_CONF_UNSET_SIZE
);

2908 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2909 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

2911 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

2912 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

2915 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

2916 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2921  
NGX_CONF_ERROR
;

2925 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2926 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2927 
NGX_CONF_UNSET_SIZE
);

2929 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2930 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

2932 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

2933 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

2936 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

2937 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

2939 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2945  
NGX_CONF_ERROR
;

2949 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

2950 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

2951 
NGX_CONF_BITMASK_SET
);

2954 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

2955 
¥ev
->
up°ªam
.
√xt_up°ªam
,

2956 (
NGX_CONF_BITMASK_SET


2957 |
NGX_HTTP_UPSTREAM_FT_ERROR


2958 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

2960 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2961 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


2962 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2965 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

2966 
¥ev
->
up°ªam
.
ãmp_∑th
,

2967 &
ngx_hâp_Á°cgi_ãmp_∑th
)

2968 !
NGX_OK
)

2970  
NGX_CONF_ERROR
;

2973 #i‡(
NGX_HTTP_CACHE
)

2975 i‡(
c⁄f
->
up°ªam
.
ˇche
 =
NGX_CONF_UNSET
) {

2976 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

2977 
¥ev
->
up°ªam
.
ˇche
, 0);

2979 
c⁄f
->
up°ªam
.
ˇche_z⁄e
 = 
¥ev
->upstream.cache_zone;

2980 
c⁄f
->
up°ªam
.
ˇche_vÆue
 = 
¥ev
->upstream.cache_value;

2983 i‡(
c⁄f
->
up°ªam
.
ˇche_z⁄e
 && c⁄f->up°ªam.ˇche_z⁄e->
d©a
 =
NULL
) {

2984 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2986 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche_z⁄e
;

2988 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2990 &
shm_z⁄e
->
shm
.
«me
);

2992  
NGX_CONF_ERROR
;

2995 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

2996 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

2998 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

2999 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

3000 (
NGX_CONF_BITMASK_SET


3001 |
NGX_HTTP_UPSTREAM_FT_OFF
));

3003 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

3004 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


3005 |
NGX_HTTP_UPSTREAM_FT_OFF
;

3008 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

3009 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

3012 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

3013 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

3016 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

3018 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

3019 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

3021 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

3022 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

3024 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

3025 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

3027 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

3028 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

3031 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

3032 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3036 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

3037 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

3039 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

3040 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

3042 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_age
,

3043 
¥ev
->
up°ªam
.
ˇche_lock_age
, 5000);

3045 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

3046 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

3050 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

3051 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

3052 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

3053 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

3055 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

3056 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

3058 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ˇtch_°dîr
, 
¥ev
->ˇtch_°dîr, 
NULL
);

3060 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
kìp_c⁄n
, 
¥ev
->keep_conn, 0);

3063 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ödex
, 
¥ev
->index, "");

3065 
hash
.
max_size
 = 512;

3066 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

3067 
hash
.
«me
 = "fastcgi_hide_headers_hash";

3069 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

3070 &
¥ev
->
up°ªam
, 
ngx_hâp_Á°cgi_hide_hódîs
, &
hash
)

3071 !
NGX_OK
)

3073  
NGX_CONF_ERROR
;

3076 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3078 i‡(
˛cf
->
n⁄ame


3079 && 
c⁄f
->
up°ªam
.up°ªam =
NULL
 && c⁄f->
Á°cgi_Àngths
 == NULL)

3081 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

3082 
c⁄f
->
Á°cgi_Àngths
 = 
¥ev
->fastcgi_lengths;

3083 
c⁄f
->
Á°cgi_vÆues
 = 
¥ev
->fastcgi_values;

3086 i‡(
˛cf
->
lmt_ex˝t
 && clcf->
h™dÀr
 =
NULL


3087 && (
c⁄f
->
up°ªam
.up°ªam || c⁄f->
Á°cgi_Àngths
))

3089 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

3092 #i‡(
NGX_PCRE
)

3093 i‡(
c⁄f
->
•lô_ªgex
 =
NULL
) {

3094 
c⁄f
->
•lô_ªgex
 = 
¥ev
->split_regex;

3095 
c⁄f
->
•lô_«me
 = 
¥ev
->split_name;

3099 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

3100 
c⁄f
->
∑øms
 = 
¥ev
->params;

3101 #i‡(
NGX_HTTP_CACHE
)

3102 
c⁄f
->
∑øms_ˇche
 = 
¥ev
->params_cache;

3104 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

3107 
rc
 = 
	`ngx_hâp_Á°cgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms
, 
NULL
);

3108 i‡(
rc
 !
NGX_OK
) {

3109  
NGX_CONF_ERROR
;

3112 #i‡(
NGX_HTTP_CACHE
)

3114 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

3115 
rc
 = 
	`ngx_hâp_Á°cgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms_ˇche
,

3116 
ngx_hâp_Á°cgi_ˇche_hódîs
);

3117 i‡(
rc
 !
NGX_OK
) {

3118  
NGX_CONF_ERROR
;

3124  
NGX_CONF_OK
;

3125 
	}
}

3128 
ngx_öt_t


3129 
	$ngx_hâp_Á°cgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,

3130 
ngx_hâp_Á°cgi_∑øms_t
 *
∑øms
, 
ngx_keyvÆ_t
 *
deÁu…_∑øms
)

3132 
u_ch¨
 *
p
;

3133 
size_t
 
size
;

3134 
uöçå_t
 *
code
;

3135 
ngx_uöt_t
 
i
, 
n§c
;

3136 
ngx_¨øy_t
 
hódîs_«mes
, 
∑øms_mîged
;

3137 
ngx_keyvÆ_t
 *
h
;

3138 
ngx_hash_key_t
 *
hk
;

3139 
ngx_hash_öô_t
 
hash
;

3140 
ngx_hâp_up°ªam_∑øm_t
 *
§c
, *
s
;

3141 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3142 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

3144 i‡(
∑øms
->
hash
.
buckës
) {

3145  
NGX_OK
;

3148 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
 && 
deÁu…_∑øms
 == NULL) {

3149 
∑øms
->
hash
.
buckës
 = (*) 1;

3150  
NGX_OK
;

3153 
∑øms
->
Àngths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

3154 i‡(
∑øms
->
Àngths
 =
NULL
) {

3155  
NGX_ERROR
;

3158 
∑øms
->
vÆues
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

3159 i‡(
∑øms
->
vÆues
 =
NULL
) {

3160  
NGX_ERROR
;

3163 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

3164 !
NGX_OK
)

3166  
NGX_ERROR
;

3169 i‡(
c⁄f
->
∑øms_sour˚
) {

3170 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

3171 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

3174 
§c
 = 
NULL
;

3175 
n§c
 = 0;

3178 i‡(
deÁu…_∑øms
) {

3179 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

3180 (
ngx_hâp_up°ªam_∑øm_t
))

3181 !
NGX_OK
)

3183  
NGX_ERROR
;

3186 
i
 = 0; i < 
n§c
; i++) {

3188 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

3189 i‡(
s
 =
NULL
) {

3190  
NGX_ERROR
;

3193 *
s
 = 
§c
[
i
];

3196 
h
 = 
deÁu…_∑øms
;

3198 
h
->
key
.
Àn
) {

3200 
§c
 = 
∑øms_mîged
.
ñts
;

3201 
n§c
 = 
∑øms_mîged
.
√…s
;

3203 
i
 = 0; i < 
n§c
; i++) {

3204 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

3205 
√xt
;

3209 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

3210 i‡(
s
 =
NULL
) {

3211  
NGX_ERROR
;

3214 
s
->
key
 = 
h
->key;

3215 
s
->
vÆue
 = 
h
->value;

3216 
s
->
skù_em±y
 = 1;

3218 
√xt
:

3220 
h
++;

3223 
§c
 = 
∑øms_mîged
.
ñts
;

3224 
n§c
 = 
∑øms_mîged
.
√…s
;

3227 
i
 = 0; i < 
n§c
; i++) {

3229 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

3230 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

3232 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

3233 i‡(
hk
 =
NULL
) {

3234  
NGX_ERROR
;

3237 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

3238 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

3239 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

3240 
hk
->
vÆue
 = (*) 1;

3242 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

3247 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

3248 (
ngx_hâp_s¸ùt_c›y_code_t
));

3249 i‡(
c›y
 =
NULL
) {

3250  
NGX_ERROR
;

3253 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

3254 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

3256 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

3257 (
ngx_hâp_s¸ùt_c›y_code_t
));

3258 i‡(
c›y
 =
NULL
) {

3259  
NGX_ERROR
;

3262 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

3263 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

3266 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3267 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

3268 & ~((
uöçå_t
) - 1);

3270 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, 
size
);

3271 i‡(
c›y
 =
NULL
) {

3272  
NGX_ERROR
;

3275 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3276 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

3278 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3279 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3282 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3284 
sc
.
cf
 = cf;

3285 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

3286 
sc
.
Êushes
 = &
∑øms
->flushes;

3287 
sc
.
Àngths
 = &
∑øms
->lengths;

3288 
sc
.
vÆues
 = &
∑øms
->values;

3290 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3291  
NGX_ERROR
;

3294 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

3295 i‡(
code
 =
NULL
) {

3296  
NGX_ERROR
;

3299 *
code
 = (
uöçå_t
Ë
NULL
;

3302 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, (
uöçå_t
));

3303 i‡(
code
 =
NULL
) {

3304  
NGX_ERROR
;

3307 *
code
 = (
uöçå_t
Ë
NULL
;

3310 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

3311 i‡(
code
 =
NULL
) {

3312  
NGX_ERROR
;

3315 *
code
 = (
uöçå_t
Ë
NULL
;

3317 
∑øms
->
numbî
 = 
hódîs_«mes
.
√…s
;

3319 
hash
.hash = &
∑øms
->hash;

3320 
hash
.
key
 = 
ngx_hash_key_lc
;

3321 
hash
.
max_size
 = 512;

3322 
hash
.
buckë_size
 = 64;

3323 
hash
.
«me
 = "fastcgi_params_hash";

3324 
hash
.
poﬁ
 = 
cf
->pool;

3325 
hash
.
ãmp_poﬁ
 = 
NULL
;

3327  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

3328 
	}
}

3331 
ngx_öt_t


3332 
	$ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3333 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3335 
u_ch¨
 *
p
;

3336 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

3337 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

3339 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

3341 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

3343 i‡(
f
 =
NULL
) {

3344  
NGX_ERROR
;

3347 i‡(
f
->
s¸ùt_«me
.
Àn
 == 0

3348 || 
f
->
s¸ùt_«me
.
d©a
[f->s¸ùt_«me.
Àn
 - 1] != '/')

3350 
v
->
Àn
 = 
f
->
s¸ùt_«me
.len;

3351 
v
->
vÆid
 = 1;

3352 
v
->
no_ˇchóbÀ
 = 0;

3353 
v
->
nŸ_found
 = 0;

3354 
v
->
d©a
 = 
f
->
s¸ùt_«me
.data;

3356  
NGX_OK
;

3359 
v
->
Àn
 = 
f
->
s¸ùt_«me
.À¿+ 
Êcf
->
ödex
.len;

3361 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

3362 i‡(
v
->
d©a
 =
NULL
) {

3363  
NGX_ERROR
;

3366 
p
 = 
	`ngx_c›y
(
v
->
d©a
, 
f
->
s¸ùt_«me
.d©a, f->s¸ùt_«me.
Àn
);

3367 
	`ngx_mem˝y
(
p
, 
Êcf
->
ödex
.
d©a
, flcf->ödex.
Àn
);

3369  
NGX_OK
;

3370 
	}
}

3373 
ngx_öt_t


3374 
	$ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

3375 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

3377 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

3378 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

3380 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

3382 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

3384 i‡(
f
 =
NULL
) {

3385  
NGX_ERROR
;

3388 
v
->
Àn
 = 
f
->
∑th_öfo
.len;

3389 
v
->
vÆid
 = 1;

3390 
v
->
no_ˇchóbÀ
 = 0;

3391 
v
->
nŸ_found
 = 0;

3392 
v
->
d©a
 = 
f
->
∑th_öfo
.data;

3394  
NGX_OK
;

3395 
	}
}

3398 
ngx_hâp_Á°cgi_˘x_t
 *

3399 
	$ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

3401 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

3402 #i‡(
NGX_PCRE
)

3403 
ngx_öt_t
 
n
;

3404 
ˇ±uªs
[(1 + 2) * 3];

3406 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

3408 i‡(
f
 =
NULL
) {

3409 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

3410 i‡(
f
 =
NULL
) {

3411  
NULL
;

3414 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

3417 i‡(
f
->
s¸ùt_«me
.
Àn
) {

3418  
f
;

3421 i‡(
Êcf
->
•lô_ªgex
 =
NULL
) {

3422 
f
->
s¸ùt_«me
 = 
r
->
uri
;

3423  
f
;

3426 
n
 = 
	`ngx_ªgex_exec
(
Êcf
->
•lô_ªgex
, &
r
->
uri
, 
ˇ±uªs
, (1 + 2) * 3);

3428 i‡(
n
 >= 0) {

3429 
f
->
s¸ùt_«me
.
Àn
 = 
ˇ±uªs
[3] - captures[2];

3430 
f
->
s¸ùt_«me
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[2];

3432 
f
->
∑th_öfo
.
Àn
 = 
ˇ±uªs
[5] - captures[4];

3433 
f
->
∑th_öfo
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[4];

3435  
f
;

3438 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

3439 
f
->
s¸ùt_«me
 = 
r
->
uri
;

3440  
f
;

3443 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3444 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

3445 
n
, &
r
->
uri
, &
Êcf
->
•lô_«me
);

3446  
NULL
;

3450 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

3452 i‡(
f
 =
NULL
) {

3453 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

3454 i‡(
f
 =
NULL
) {

3455  
NULL
;

3458 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

3461 
f
->
s¸ùt_«me
 = 
r
->
uri
;

3463  
f
;

3466 
	}
}

3470 
	$ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3472 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3474 
ngx_uæ_t
 
u
;

3475 
ngx_°r_t
 *
vÆue
, *
uæ
;

3476 
ngx_uöt_t
 
n
;

3477 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3478 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3480 i‡(
Êcf
->
up°ªam
.up°ªam || flcf->
Á°cgi_Àngths
) {

3484 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3486 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

3488 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

3489 
˛cf
->
auto_ªdúe˘
 = 1;

3492 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3494 
uæ
 = &
vÆue
[1];

3496 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

3498 i‡(
n
) {

3500 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3502 
sc
.
cf
 = cf;

3503 
sc
.
sour˚
 = 
uæ
;

3504 
sc
.
Àngths
 = &
Êcf
->
Á°cgi_Àngths
;

3505 
sc
.
vÆues
 = &
Êcf
->
Á°cgi_vÆues
;

3506 
sc
.
v¨übÀs
 = 
n
;

3507 
sc
.
com∂ëe_Àngths
 = 1;

3508 
sc
.
com∂ëe_vÆues
 = 1;

3510 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3511  
NGX_CONF_ERROR
;

3514  
NGX_CONF_OK
;

3517 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3519 
u
.
uæ
 = 
vÆue
[1];

3520 
u
.
no_ªsﬁve
 = 1;

3522 
Êcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

3523 i‡(
Êcf
->
up°ªam
.up°ªam =
NULL
) {

3524  
NGX_CONF_ERROR
;

3527  
NGX_CONF_OK
;

3528 
	}
}

3532 
	$ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3534 #i‡(
NGX_PCRE
)

3535 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3537 
ngx_°r_t
 *
vÆue
;

3538 
ngx_ªgex_compûe_t
 
rc
;

3539 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3541 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3543 
Êcf
->
•lô_«me
 = 
vÆue
[1];

3545 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3547 
rc
.
∑âîn
 = 
vÆue
[1];

3548 
rc
.
poﬁ
 = 
cf
->pool;

3549 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3550 
rc
.
îr
.
d©a
 = 
îr°r
;

3552 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

3553 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

3554  
NGX_CONF_ERROR
;

3557 i‡(
rc
.
ˇ±uªs
 != 2) {

3558 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3559 "∑âî¿\"%V\" mu° havê2 c≠tuªs", &
vÆue
[1]);

3560  
NGX_CONF_ERROR
;

3563 
Êcf
->
•lô_ªgex
 = 
rc
.
ªgex
;

3565  
NGX_CONF_OK
;

3569 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3570 "\"%V\"Ñequúe†PCREÜibøry", &
cmd
->
«me
);

3571  
NGX_CONF_ERROR
;

3574 
	}
}

3578 
	$ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3580 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3582 
ngx_°r_t
 *
vÆue
;

3583 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3585 i‡(
Êcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
) {

3589 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3591 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3592 
Êcf
->
up°ªam
.
°‹e
 = 0;

3593  
NGX_CONF_OK
;

3596 #i‡(
NGX_HTTP_CACHE
)

3597 i‡(
Êcf
->
up°ªam
.
ˇche
 > 0) {

3602 
Êcf
->
up°ªam
.
°‹e
 = 1;

3604 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

3605  
NGX_CONF_OK
;

3609 
vÆue
[1].
Àn
++;

3611 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3613 
sc
.
cf
 = cf;

3614 
sc
.
sour˚
 = &
vÆue
[1];

3615 
sc
.
Àngths
 = &
Êcf
->
up°ªam
.
°‹e_Àngths
;

3616 
sc
.
vÆues
 = &
Êcf
->
up°ªam
.
°‹e_vÆues
;

3617 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

3618 
sc
.
com∂ëe_Àngths
 = 1;

3619 
sc
.
com∂ëe_vÆues
 = 1;

3621 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3622  
NGX_CONF_ERROR
;

3625  
NGX_CONF_OK
;

3626 
	}
}

3629 #i‡(
NGX_HTTP_CACHE
)

3632 
	$ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3634 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3636 
ngx_°r_t
 *
vÆue
;

3637 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

3638 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3640 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3642 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET
) {

3646 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3647 
Êcf
->
up°ªam
.
ˇche
 = 0;

3648  
NGX_CONF_OK
;

3651 i‡(
Êcf
->
up°ªam
.
°‹e
 > 0) {

3655 
Êcf
->
up°ªam
.
ˇche
 = 1;

3657 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3659 
ccv
.
cf
 = cf;

3660 
ccv
.
vÆue
 = &value[1];

3661 
ccv
.
com∂ex_vÆue
 = &
cv
;

3663 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3664  
NGX_CONF_ERROR
;

3667 i‡(
cv
.
Àngths
 !
NULL
) {

3669 
Êcf
->
up°ªam
.
ˇche_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

3670 (
ngx_hâp_com∂ex_vÆue_t
));

3671 i‡(
Êcf
->
up°ªam
.
ˇche_vÆue
 =
NULL
) {

3672  
NGX_CONF_ERROR
;

3675 *
Êcf
->
up°ªam
.
ˇche_vÆue
 = 
cv
;

3677  
NGX_CONF_OK
;

3680 
Êcf
->
up°ªam
.
ˇche_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

3681 &
ngx_hâp_Á°cgi_moduÀ
);

3682 i‡(
Êcf
->
up°ªam
.
ˇche_z⁄e
 =
NULL
) {

3683  
NGX_CONF_ERROR
;

3686  
NGX_CONF_OK
;

3687 
	}
}

3691 
	$ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3693 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3695 
ngx_°r_t
 *
vÆue
;

3696 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3698 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3700 i‡(
Êcf
->
ˇche_key
.
vÆue
.
d©a
) {

3704 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3706 
ccv
.
cf
 = cf;

3707 
ccv
.
vÆue
 = &value[1];

3708 
ccv
.
com∂ex_vÆue
 = &
Êcf
->
ˇche_key
;

3710 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3711  
NGX_CONF_ERROR
;

3714  
NGX_CONF_OK
;

3715 
	}
}

3721 
	$ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

3723 #i‡(
NGX_FREEBSD
)

3724 
ssize_t
 *
≈
 = 
d©a
;

3726 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

3727 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3730 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

3732  
NGX_CONF_ERROR
;

3735 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

3736 
ssize_t
 *
≈
 = 
d©a
;

3738 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3741 *
≈
 = 0;

3745  
NGX_CONF_OK
;

3746 
	}
}

	@src/http/modules/ngx_http_flv_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_comm™d_t
 
	gngx_hâp_Êv_comm™ds
[] = {

16 { 
ngx_°rög
("flv"),

17 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

18 
ngx_hâp_Êv
,

21 
NULL
 },

23 
ngx_nuŒ_comm™d


27 
u_ch¨
 
	gngx_Êv_hódî
[] = "FLV\x1\x5\0\0\0\x9\0\0\0\0";

30 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Êv_moduÀ_˘x
 = {

31 
NULL
,

32 
NULL
,

34 
NULL
,

35 
NULL
,

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL


45 
ngx_moduÀ_t
 
	gngx_hâp_Êv_moduÀ
 = {

46 
NGX_MODULE_V1
,

47 &
ngx_hâp_Êv_moduÀ_˘x
,

48 
ngx_hâp_Êv_comm™ds
,

49 
NGX_HTTP_MODULE
,

50 
NULL
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NGX_MODULE_V1_PADDING


61 
ngx_öt_t


62 
	$ngx_hâp_Êv_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

64 
u_ch¨
 *
œ°
;

65 
off_t
 
°¨t
, 
Àn
;

66 
size_t
 
roŸ
;

67 
ngx_öt_t
 
rc
;

68 
ngx_uöt_t
 
Àvñ
, 
i
;

69 
ngx_°r_t
 
∑th
, 
vÆue
;

70 
ngx_log_t
 *
log
;

71 
ngx_buf_t
 *
b
;

72 
ngx_chaö_t
 
out
[2];

73 
ngx_›í_fûe_öfo_t
 
of
;

74 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

76 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

77  
NGX_HTTP_NOT_ALLOWED
;

80 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

81  
NGX_DECLINED
;

84 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

86 i‡(
rc
 !
NGX_OK
) {

87  
rc
;

90 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

91 i‡(
œ°
 =
NULL
) {

92  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

95 
log
 = 
r
->
c⁄√˘i⁄
->log;

97 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

99 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

100 "hâ∞Êv fûíame: \"%V\"", &
∑th
);

102 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

104 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

106 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

107 
of
.
dúe˘io
 = 
˛cf
->directio;

108 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

109 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

110 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

111 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

113 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

114  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

117 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

118 !
NGX_OK
)

120 
of
.
îr
) {

123  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

125 
NGX_ENOENT
:

126 
NGX_ENOTDIR
:

127 
NGX_ENAMETOOLONG
:

129 
Àvñ
 = 
NGX_LOG_ERR
;

130 
rc
 = 
NGX_HTTP_NOT_FOUND
;

133 
NGX_EACCES
:

134 #i‡(
NGX_HAVE_OPENAT
)

135 
NGX_EMLINK
:

136 
NGX_ELOOP
:

139 
Àvñ
 = 
NGX_LOG_ERR
;

140 
rc
 = 
NGX_HTTP_FORBIDDEN
;

145 
Àvñ
 = 
NGX_LOG_CRIT
;

146 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

151 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

152 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

155  
rc
;

158 i‡(!
of
.
is_fûe
) {

160 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

162 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

165  
NGX_DECLINED
;

168 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

170 
°¨t
 = 0;

171 
Àn
 = 
of
.
size
;

172 
i
 = 1;

174 i‡(
r
->
¨gs
.
Àn
) {

176 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

178 
°¨t
 = 
	`ngx_©oof
(
vÆue
.
d©a
, vÆue.
Àn
);

180 i‡(
°¨t
 =
NGX_ERROR
 || sèπ >
Àn
) {

181 
°¨t
 = 0;

184 i‡(
°¨t
) {

185 
Àn
 = (
ngx_Êv_hódî
Ë- 1 +Üí - 
°¨t
;

186 
i
 = 0;

191 
log
->
a˘i⁄
 = "sending flvÅo client";

193 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

194 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

195 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

197 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

198  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

201 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

202  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

205 i‡(
i
 == 0) {

206 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

207 i‡(
b
 =
NULL
) {

208  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

211 
b
->
pos
 = 
ngx_Êv_hódî
;

212 
b
->
œ°
 = 
ngx_Êv_hódî
 + (ngx_flv_header) - 1;

213 
b
->
mem‹y
 = 1;

215 
out
[0].
buf
 = 
b
;

216 
out
[0].
√xt
 = &out[1];

220 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

221 i‡(
b
 =
NULL
) {

222  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

225 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

226 i‡(
b
->
fûe
 =
NULL
) {

227  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

230 
r
->
Ælow_ønges
 = 1;

232 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

234 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

235  
rc
;

238 
b
->
fûe_pos
 = 
°¨t
;

239 
b
->
fûe_œ°
 = 
of
.
size
;

241 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

242 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

243 
b
->
œ°_ö_chaö
 = 1;

245 
b
->
fûe
->
fd
 = 
of
.fd;

246 
b
->
fûe
->
«me
 = 
∑th
;

247 
b
->
fûe
->
log
 =Üog;

248 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

250 
out
[1].
buf
 = 
b
;

251 
out
[1].
√xt
 = 
NULL
;

253  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[
i
]);

254 
	}
}

258 
	$ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

260 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

262 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

263 
˛cf
->
h™dÀr
 = 
ngx_hâp_Êv_h™dÀr
;

265  
NGX_CONF_OK
;

266 
	}
}

	@src/http/modules/ngx_http_geo_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

15 
u_sh‹t
 
	m°¨t
;

16 
u_sh‹t
 
	míd
;

17 } 
	tngx_hâp_geo_ønge_t
;

21 
ngx_ødix_åì_t
 *
	måì
;

22 #i‡(
NGX_HAVE_INET6
)

23 
ngx_ødix_åì_t
 *
	måì6
;

25 } 
	tngx_hâp_geo_åìs_t
;

29 
ngx_hâp_geo_ønge_t
 **
	mlow
;

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

31 } 
	tngx_hâp_geo_high_ønges_t
;

35 
ngx_°r_node_t
 
	m¢
;

36 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

37 
size_t
 
	moff£t
;

38 } 
	tngx_hâp_geo_v¨übÀ_vÆue_node_t
;

42 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

43 
ngx_°r_t
 *
	m√t
;

44 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

45 
ngx_ødix_åì_t
 *
	måì
;

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_ødix_åì_t
 *
	måì6
;

49 
ngx_rbåì_t
 
	mrbåì
;

50 
ngx_rbåì_node_t
 
	m£¡öñ
;

51 
ngx_¨øy_t
 *
	m¥oxõs
;

52 
ngx_poﬁ_t
 *
	mpoﬁ
;

53 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

55 
size_t
 
	md©a_size
;

57 
ngx_°r_t
 
	mö˛ude_«me
;

58 
ngx_uöt_t
 
	mö˛udes
;

59 
ngx_uöt_t
 
	míåõs
;

61 
	mønges
:1;

62 
	moutside_íåõs
:1;

63 
	mÆlow_bö¨y_ö˛ude
:1;

64 
	mbö¨y_ö˛ude
:1;

65 
	m¥oxy_ªcursive
:1;

66 } 
	tngx_hâp_geo_c⁄f_˘x_t
;

71 
ngx_hâp_geo_åìs_t
 
	måìs
;

72 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

73 } 
	mu
;

75 
ngx_¨øy_t
 *
	m¥oxõs
;

76 
	m¥oxy_ªcursive
:1;

78 
ngx_öt_t
 
	mödex
;

79 } 
	tngx_hâp_geo_˘x_t
;

82 
ngx_öt_t
 
ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

84 
ngx_öt_t
 
ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

86 *
ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

87 *
ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

88 *
ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

89 
ngx_°r_t
 *
vÆue
);

90 *
ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
,

91 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

92 
ngx_uöt_t
 
ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
,

93 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

94 *
ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

95 
ngx_°r_t
 *
vÆue
);

96 *
ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

97 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
);

98 
ngx_hâp_v¨übÀ_vÆue_t
 *
ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
,

99 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
vÆue
);

100 *
ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
,

101 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_cidr_t
 *
cidr
);

102 
ngx_öt_t
 
ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

103 
ngx_cidr_t
 *
cidr
);

104 *
ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

105 
ngx_°r_t
 *
«me
);

106 
ngx_öt_t
 
ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
,

107 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
);

108 
ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
);

109 
u_ch¨
 *
ngx_hâp_geo_c›y_vÆues
(u_ch¨ *
ba£
, u_ch¨ *
p
,

110 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

113 
ngx_comm™d_t
 
	gngx_hâp_geo_comm™ds
[] = {

115 { 
ngx_°rög
("geo"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

117 
ngx_hâp_geo_block
,

118 
NGX_HTTP_MAIN_CONF_OFFSET
,

120 
NULL
 },

122 
ngx_nuŒ_comm™d


126 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geo_moduÀ_˘x
 = {

127 
NULL
,

128 
NULL
,

130 
NULL
,

131 
NULL
,

133 
NULL
,

134 
NULL
,

136 
NULL
,

137 
NULL


141 
ngx_moduÀ_t
 
	gngx_hâp_geo_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_hâp_geo_moduÀ_˘x
,

144 
ngx_hâp_geo_comm™ds
,

145 
NGX_HTTP_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


158 
u_ch¨
 
	mGEORNG
[6];

159 
u_ch¨
 
	mvîsi⁄
;

160 
u_ch¨
 
	m±r_size
;

161 
uöt32_t
 
	mídü¬ess
;

162 
uöt32_t
 
	m¸c32
;

163 } 
	tngx_hâp_geo_hódî_t
;

166 
ngx_hâp_geo_hódî_t
 
	gngx_hâp_geo_hódî
 = {

173 
ngx_öt_t


174 
	$ngx_hâp_geo_cidr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

175 
uöçå_t
 
d©a
)

177 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

179 
ö_addr_t
 
öaddr
;

180 
ngx_addr_t
 
addr
;

181 
sockaddr_ö
 *
sö
;

182 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

183 #i‡(
NGX_HAVE_INET6
)

184 
u_ch¨
 *
p
;

185 
ö6_addr
 *
öaddr6
;

188 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë!
NGX_OK
) {

189 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

190 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
INADDR_NONE
);

191 
d⁄e
;

194 
addr
.
sockaddr
->
ß_Ámûy
) {

196 #i‡(
NGX_HAVE_INET6
)

197 
AF_INET6
:

198 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

199 
p
 = 
öaddr6
->
s6_addr
;

201 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

202 
öaddr
 = 
p
[12] << 24;

203 
öaddr
 +
p
[13] << 16;

204 
öaddr
 +
p
[14] << 8;

205 
öaddr
 +
p
[15];

207 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

208 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

211 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

212 
	`ngx_ødix128åì_föd
(
˘x
->
u
.
åìs
.
åì6
, 
p
);

219 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

220 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

222 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

223 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

228 
d⁄e
:

230 *
v
 = *
vv
;

232 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

233 "hâ∞geo: %v", 
v
);

235  
NGX_OK
;

236 
	}
}

239 
ngx_öt_t


240 
	$ngx_hâp_geo_ønge_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

241 
uöçå_t
 
d©a
)

243 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

245 
ö_addr_t
 
öaddr
;

246 
ngx_addr_t
 
addr
;

247 
ngx_uöt_t
 
n
;

248 
sockaddr_ö
 *
sö
;

249 
ngx_hâp_geo_ønge_t
 *
ønge
;

250 #i‡(
NGX_HAVE_INET6
)

251 
u_ch¨
 *
p
;

252 
ö6_addr
 *
öaddr6
;

255 *
v
 = *
˘x
->
u
.
high
.
deÁu…_vÆue
;

257 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë=
NGX_OK
) {

259 
addr
.
sockaddr
->
ß_Ámûy
) {

261 #i‡(
NGX_HAVE_INET6
)

262 
AF_INET6
:

263 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

265 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

266 
p
 = 
öaddr6
->
s6_addr
;

268 
öaddr
 = 
p
[12] << 24;

269 
öaddr
 +
p
[13] << 16;

270 
öaddr
 +
p
[14] << 8;

271 
öaddr
 +
p
[15];

274 
öaddr
 = 
INADDR_NONE
;

281 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

282 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

287 
öaddr
 = 
INADDR_NONE
;

290 i‡(
˘x
->
u
.
high
.
low
) {

291 
ønge
 = 
˘x
->
u
.
high
.
low
[
öaddr
 >> 16];

293 i‡(
ønge
) {

294 
n
 = 
öaddr
 & 0xffff;

296 i‡(
n
 >(
ngx_uöt_t
Ë
ønge
->
°¨t


297 && 
n
 <(
ngx_uöt_t
Ë
ønge
->
íd
)

299 *
v
 = *
ønge
->
vÆue
;

302 } (++
ønge
)->
vÆue
);

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

307 "hâ∞geo: %v", 
v
);

309  
NGX_OK
;

310 
	}
}

313 
ngx_öt_t


314 
	$ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

315 
ngx_addr_t
 *
addr
)

317 
ngx_¨øy_t
 *
xfwd
;

319 i‡(
	`ngx_hâp_geo_ªÆ_addr
(
r
, 
˘x
, 
addr
Ë!
NGX_OK
) {

320  
NGX_ERROR
;

323 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

325 i‡(
xfwd
->
√…s
 > 0 && 
˘x
->
¥oxõs
 !
NULL
) {

326 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, 
addr
, 
xfwd
, 
NULL
,

327 
˘x
->
¥oxõs
, ctx->
¥oxy_ªcursive
);

330  
NGX_OK
;

331 
	}
}

334 
ngx_öt_t


335 
	$ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

336 
ngx_addr_t
 *
addr
)

338 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

340 i‡(
˘x
->
ödex
 == -1) {

341 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

342 "hâ∞geÿ°¨ãd: %V", &
r
->
c⁄√˘i⁄
->
addr_ãxt
);

344 
addr
->
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

345 
addr
->
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

348  
NGX_OK
;

351 
v
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
˘x
->
ödex
);

353 i‡(
v
 =
NULL
 || v->
nŸ_found
) {

354 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

357  
NGX_ERROR
;

360 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

361 "hâ∞geÿ°¨ãd: %v", 
v
);

363 i‡(
	`ngx_∑r£_addr
(
r
->
poﬁ
, 
addr
, 
v
->
d©a
, v->
Àn
Ë=
NGX_OK
) {

364  
NGX_OK
;

367  
NGX_ERROR
;

368 
	}
}

372 
	$ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

374 *
rv
;

375 
size_t
 
Àn
;

376 
ngx_°r_t
 *
vÆue
, 
«me
;

377 
ngx_uöt_t
 
i
;

378 
ngx_c⁄f_t
 
ßve
;

379 
ngx_poﬁ_t
 *
poﬁ
;

380 
ngx_¨øy_t
 *
a
;

381 
ngx_hâp_v¨übÀ_t
 *
v¨
;

382 
ngx_hâp_geo_˘x_t
 *
geo
;

383 
ngx_hâp_geo_c⁄f_˘x_t
 
˘x
;

384 #i‡(
NGX_HAVE_INET6
)

385 
ö6_addr
 
zîo
;

388 
vÆue
 = 
cf
->
¨gs
->
ñts
;

390 
geo
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_geo_˘x_t
));

391 i‡(
geo
 =
NULL
) {

392  
NGX_CONF_ERROR
;

395 
«me
 = 
vÆue
[1];

397 i‡(
«me
.
d©a
[0] != '$') {

398 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

399 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

400  
NGX_CONF_ERROR
;

403 
«me
.
Àn
--;

404 
«me
.
d©a
++;

406 i‡(
cf
->
¨gs
->
√…s
 == 3) {

408 
geo
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

409 i‡(
geo
->
ödex
 =
NGX_ERROR
) {

410  
NGX_CONF_ERROR
;

413 
«me
 = 
vÆue
[2];

415 i‡(
«me
.
d©a
[0] != '$') {

416 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

417 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

418  
NGX_CONF_ERROR
;

421 
«me
.
Àn
--;

422 
«me
.
d©a
++;

425 
geo
->
ödex
 = -1;

428 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

429 i‡(
v¨
 =
NULL
) {

430  
NGX_CONF_ERROR
;

433 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

434 i‡(
poﬁ
 =
NULL
) {

435  
NGX_CONF_ERROR
;

438 
	`ngx_memzîo
(&
˘x
, (
ngx_hâp_geo_c⁄f_˘x_t
));

440 
˘x
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

441 i‡(
˘x
.
ãmp_poﬁ
 =
NULL
) {

442  
NGX_CONF_ERROR
;

445 
	`ngx_rbåì_öô
(&
˘x
.
rbåì
, &˘x.
£¡öñ
, 
ngx_°r_rbåì_ö£π_vÆue
);

447 
˘x
.
poﬁ
 = 
cf
->pool;

448 
˘x
.
d©a_size
 = (
ngx_hâp_geo_hódî_t
)

449 + (
ngx_hâp_v¨übÀ_vÆue_t
)

450 + 0x10000 * (
ngx_hâp_geo_ønge_t
 *);

451 
˘x
.
Ælow_bö¨y_ö˛ude
 = 1;

453 
ßve
 = *
cf
;

454 
cf
->
poﬁ
 =Öool;

455 
cf
->
˘x
 = &ctx;

456 
cf
->
h™dÀr
 = 
ngx_hâp_geo
;

457 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

459 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

461 *
cf
 = 
ßve
;

463 
geo
->
¥oxõs
 = 
˘x
.proxies;

464 
geo
->
¥oxy_ªcursive
 = 
˘x
.proxy_recursive;

466 i‡(
˘x
.
ønges
) {

468 i‡(
˘x
.
high
.
low
 && !˘x.
bö¨y_ö˛ude
) {

469 
i
 = 0; i < 0x10000; i++) {

470 
a
 = (
ngx_¨øy_t
 *Ë
˘x
.
high
.
low
[
i
];

472 i‡(
a
 =
NULL
 ||á->
√…s
 == 0) {

476 
Àn
 = 
a
->
√…s
 * (
ngx_hâp_geo_ønge_t
);

478 
˘x
.
high
.
low
[
i
] = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
Àn
 + (*));

479 i‡(
˘x
.
high
.
low
[
i
] =
NULL
) {

480  
NGX_CONF_ERROR
;

483 
	`ngx_mem˝y
(
˘x
.
high
.
low
[
i
], 
a
->
ñts
, 
Àn
);

484 
˘x
.
high
.
low
[
i
][
a
->
√…s
].
vÆue
 = 
NULL
;

485 
˘x
.
d©a_size
 +
Àn
 + (*);

488 i‡(
˘x
.
Ælow_bö¨y_ö˛ude


489 && !
˘x
.
outside_íåõs


490 && 
˘x
.
íåõs
 > 100000

491 && 
˘x
.
ö˛udes
 == 1)

493 
	`ngx_hâp_geo_¸óã_bö¨y_ba£
(&
˘x
);

497 i‡(
˘x
.
high
.
deÁu…_vÆue
 =
NULL
) {

498 
˘x
.
high
.
deÁu…_vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

501 
geo
->
u
.
high
 = 
˘x
.high;

503 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_ønge_v¨übÀ
;

504 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

506 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

507 
	`ngx_de°roy_poﬁ
(
poﬁ
);

510 i‡(
˘x
.
åì
 =
NULL
) {

511 
˘x
.
åì
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

512 i‡(
˘x
.
åì
 =
NULL
) {

513  
NGX_CONF_ERROR
;

517 
geo
->
u
.
åìs
.
åì
 = 
˘x
.tree;

519 #i‡(
NGX_HAVE_INET6
)

520 i‡(
˘x
.
åì6
 =
NULL
) {

521 
˘x
.
åì6
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

522 i‡(
˘x
.
åì6
 =
NULL
) {

523  
NGX_CONF_ERROR
;

527 
geo
->
u
.
åìs
.
åì6
 = 
˘x
.tree6;

530 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_cidr_v¨übÀ
;

531 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

533 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

534 
	`ngx_de°roy_poﬁ
(
poﬁ
);

536 i‡(
	`ngx_ødix32åì_ö£π
(
˘x
.
åì
, 0, 0,

537 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

538 =
NGX_ERROR
)

540  
NGX_CONF_ERROR
;

545 #i‡(
NGX_HAVE_INET6
)

546 i‡(
	`ngx_ødix128åì_ö£π
(
˘x
.
åì6
, 
zîo
.
s6_addr
, zero.s6_addr,

547 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

548 =
NGX_ERROR
)

550  
NGX_CONF_ERROR
;

555  
rv
;

556 
	}
}

560 
	$ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

562 *
rv
;

563 
ngx_°r_t
 *
vÆue
;

564 
ngx_cidr_t
 
cidr
;

565 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
;

567 
˘x
 = 
cf
->ctx;

569 
vÆue
 = 
cf
->
¨gs
->
ñts
;

571 i‡(
cf
->
¨gs
->
√…s
 == 1) {

573 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "ranges") == 0) {

575 i‡(
˘x
->
åì


576 #i‡(
NGX_HAVE_INET6
)

577 || 
˘x
->
åì6


581 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

584 
Áûed
;

587 
˘x
->
ønges
 = 1;

589 
rv
 = 
NGX_CONF_OK
;

591 
d⁄e
;

594 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy_recursive") == 0) {

595 
˘x
->
¥oxy_ªcursive
 = 1;

596 
rv
 = 
NGX_CONF_OK
;

597 
d⁄e
;

601 i‡(
cf
->
¨gs
->
√…s
 != 2) {

602 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

604 
Áûed
;

607 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

609 
rv
 = 
	`ngx_hâp_geo_ö˛ude
(
cf
, 
˘x
, &
vÆue
[1]);

611 
d⁄e
;

613 } i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy") == 0) {

615 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

616 
Áûed
;

619 
rv
 = 
	`ngx_hâp_geo_add_¥oxy
(
cf
, 
˘x
, &
cidr
);

621 
d⁄e
;

624 i‡(
˘x
->
ønges
) {

625 
rv
 = 
	`ngx_hâp_geo_ønge
(
cf
, 
˘x
, 
vÆue
);

628 
rv
 = 
	`ngx_hâp_geo_cidr
(
cf
, 
˘x
, 
vÆue
);

631 
d⁄e
:

633 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

635  
rv
;

637 
Áûed
:

639 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

641  
NGX_CONF_ERROR
;

642 
	}
}

646 
	$ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

647 
ngx_°r_t
 *
vÆue
)

649 
u_ch¨
 *
p
, *
œ°
;

650 
ö_addr_t
 
°¨t
, 
íd
;

651 
ngx_°r_t
 *
√t
;

652 
ngx_uöt_t
 
dñ
;

654 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

656 i‡(
˘x
->
high
.
deÁu…_vÆue
) {

657 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

659 &
vÆue
[1], 
˘x
->
high
.
deÁu…_vÆue
);

662 
˘x
->
high
.
deÁu…_vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &
vÆue
[1]);

663 i‡(
˘x
->
high
.
deÁu…_vÆue
 =
NULL
) {

664  
NGX_CONF_ERROR
;

667  
NGX_CONF_OK
;

670 i‡(
˘x
->
bö¨y_ö˛ude
) {

671 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

673 
˘x
->
ö˛ude_«me
.
d©a
);

674  
NGX_CONF_ERROR
;

677 i‡(
˘x
->
high
.
low
 =
NULL
) {

678 
˘x
->
high
.
low
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
,

679 0x10000 * (
ngx_hâp_geo_ønge_t
 *));

680 i‡(
˘x
->
high
.
low
 =
NULL
) {

681  
NGX_CONF_ERROR
;

685 
˘x
->
íåõs
++;

686 
˘x
->
outside_íåõs
 = 1;

688 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

689 
√t
 = &
vÆue
[1];

690 
dñ
 = 1;

693 
√t
 = &
vÆue
[0];

694 
dñ
 = 0;

697 
œ°
 = 
√t
->
d©a
 +Çë->
Àn
;

699 
p
 = 
	`ngx_°æchr
(
√t
->
d©a
, 
œ°
, '-');

701 i‡(
p
 =
NULL
) {

702 
övÆid
;

705 
°¨t
 = 
	`ngx_öë_addr
(
√t
->
d©a
, 
p
 -Çet->data);

707 i‡(
°¨t
 =
INADDR_NONE
) {

708 
övÆid
;

711 
°¨t
 = 
	`¡ohl
(start);

713 
p
++;

715 
íd
 = 
	`ngx_öë_addr
(
p
, 
œ°
 -Ö);

717 i‡(
íd
 =
INADDR_NONE
) {

718 
övÆid
;

721 
íd
 = 
	`¡ohl
(end);

723 i‡(
°¨t
 > 
íd
) {

724 
övÆid
;

727 i‡(
dñ
) {

728 i‡(
	`ngx_hâp_geo_dñëe_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
)) {

729 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

730 "nÿaddªs†øngê\"%V\"Åÿdñëe", 
√t
);

733  
NGX_CONF_OK
;

736 
˘x
->
vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &value[1]);

738 i‡(
˘x
->
vÆue
 =
NULL
) {

739  
NGX_CONF_ERROR
;

742 
˘x
->
√t
 =Çet;

744  
	`ngx_hâp_geo_add_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
);

746 
övÆid
:

748 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÑ™gê\"%V\"", 
√t
);

750  
NGX_CONF_ERROR
;

751 
	}
}

757 
	$ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

758 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

760 
ö_addr_t
 
n
;

761 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
;

762 
ngx_¨øy_t
 *
a
;

763 
ngx_hâp_geo_ønge_t
 *
ønge
;

765 
n
 = 
°¨t
;Ç <
íd
;Ç = (n + 0x10000) & 0xffff0000) {

767 
h
 = 
n
 >> 16;

769 i‡(
n
 =
°¨t
) {

770 
s
 = 
n
 & 0xffff;

772 
s
 = 0;

775 i‡((
n
 | 0xffffË> 
íd
) {

776 
e
 = 
íd
 & 0xffff;

779 
e
 = 0xffff;

782 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

784 i‡(
a
 =
NULL
) {

785 
a
 = 
	`ngx_¨øy_¸óã
(
˘x
->
ãmp_poﬁ
, 64,

786 (
ngx_hâp_geo_ønge_t
));

787 i‡(
a
 =
NULL
) {

788  
NGX_CONF_ERROR
;

791 
˘x
->
high
.
low
[
h
] = (
ngx_hâp_geo_ønge_t
 *Ë
a
;

794 
i
 = 
a
->
√…s
;

795 
ønge
 = 
a
->
ñts
;

797 
i
) {

799 
i
--;

801 i‡(
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
) {

805 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
íd
) {

809 
ønge
 = 
	`ngx_¨øy_push
(
a
);

810 i‡(
ønge
 =
NULL
) {

811  
NGX_CONF_ERROR
;

814 
ønge
 = 
a
->
ñts
;

816 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

817 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

819 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

820 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

821 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

823 
√xt
;

826 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


827 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

829 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

831 
˘x
->
√t
, ctx->
vÆue
, 
ønge
[
i
].value);

833 
ønge
[
i
].
vÆue
 = 
˘x
->value;

835 
√xt
;

838 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


839 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

843 
ønge
 = 
	`ngx_¨øy_push
(
a
);

844 i‡(
ønge
 =
NULL
) {

845  
NGX_CONF_ERROR
;

848 
ønge
 = 
	`ngx_¨øy_push
(
a
);

849 i‡(
ønge
 =
NULL
) {

850  
NGX_CONF_ERROR
;

853 
ønge
 = 
a
->
ñts
;

855 
	`ngx_memmove
(&
ønge
[
i
 + 3], &range[i + 1],

856 (
a
->
√…s
 - 3 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

858 
ønge
[
i
 + 2].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

859 
ønge
[
i
 + 2].
íd
 =Ñange[i].end;

860 
ønge
[
i
 + 2].
vÆue
 =Ñange[i].value;

862 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

863 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

864 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

866 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

868 
√xt
;

871 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


872 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

876 
ønge
 = 
	`ngx_¨øy_push
(
a
);

877 i‡(
ønge
 =
NULL
) {

878  
NGX_CONF_ERROR
;

881 
ønge
 = 
a
->
ñts
;

883 
	`ngx_memmove
(&
ønge
[
i
 + 1], &range[i],

884 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

886 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

888 
ønge
[
i
].
°¨t
 = (
u_sh‹t
Ë
s
;

889 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë
e
;

890 
ønge
[
i
].
vÆue
 = 
˘x
->value;

892 
√xt
;

895 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


896 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

900 
ønge
 = 
	`ngx_¨øy_push
(
a
);

901 i‡(
ønge
 =
NULL
) {

902  
NGX_CONF_ERROR
;

905 
ønge
 = 
a
->
ñts
;

907 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

908 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

910 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

911 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

912 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

914 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

916 
√xt
;

919 
s
 = (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
;

920 
e
 = (
ngx_uöt_t
Ë
ønge
[
i
].
íd
;

922 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

924 
˘x
->
√t
,

925 
h
 >> 8, h & 0xff, 
s
 >> 8, s & 0xff,

926 
h
 >> 8, h & 0xff, 
e
 >> 8,É & 0xff);

928  
NGX_CONF_ERROR
;

933 
ønge
 = 
	`ngx_¨øy_push
(
a
);

934 i‡(
ønge
 =
NULL
) {

935  
NGX_CONF_ERROR
;

938 
ønge
->
°¨t
 = (
u_sh‹t
Ë
s
;

939 
ønge
->
íd
 = (
u_sh‹t
Ë
e
;

940 
ønge
->
vÆue
 = 
˘x
->value;

942 
√xt
:

947  
NGX_CONF_OK
;

948 
	}
}

951 
ngx_uöt_t


952 
	$ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

953 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

955 
ö_addr_t
 
n
;

956 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
, 
w¨n
;

957 
ngx_¨øy_t
 *
a
;

958 
ngx_hâp_geo_ønge_t
 *
ønge
;

960 
w¨n
 = 0;

962 
n
 = 
°¨t
;Ç <
íd
;Ç += 0x10000) {

964 
h
 = 
n
 >> 16;

966 i‡(
n
 =
°¨t
) {

967 
s
 = 
n
 & 0xffff;

969 
s
 = 0;

972 i‡((
n
 | 0xffffË> 
íd
) {

973 
e
 = 
íd
 & 0xffff;

976 
e
 = 0xffff;

979 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

981 i‡(
a
 =
NULL
) {

982 
w¨n
 = 1;

986 
ønge
 = 
a
->
ñts
;

987 
i
 = 0; i < 
a
->
√…s
; i++) {

989 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


990 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

992 
	`ngx_memmove
(&
ønge
[
i
], &range[i + 1],

993 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

995 
a
->
√…s
--;

1000 i‡(
s
 !(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


1001 && 
e
 !(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

1006 
w¨n
 = 1;

1010  
w¨n
;

1011 
	}
}

1015 
	$ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1016 
ngx_°r_t
 *
vÆue
)

1018 *
rv
;

1019 
ngx_öt_t
 
rc
, 
dñ
;

1020 
ngx_°r_t
 *
√t
;

1021 
ngx_cidr_t
 
cidr
;

1023 i‡(
˘x
->
åì
 =
NULL
) {

1024 
˘x
->
åì
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1025 i‡(
˘x
->
åì
 =
NULL
) {

1026  
NGX_CONF_ERROR
;

1030 #i‡(
NGX_HAVE_INET6
)

1031 i‡(
˘x
->
åì6
 =
NULL
) {

1032 
˘x
->
åì6
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1033 i‡(
˘x
->
åì6
 =
NULL
) {

1034  
NGX_CONF_ERROR
;

1039 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

1040 
cidr
.
Ámûy
 = 
AF_INET
;

1041 
cidr
.
u
.
ö
.
addr
 = 0;

1042 
cidr
.
u
.
ö
.
mask
 = 0;

1044 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1046 i‡(
rv
 !
NGX_CONF_OK
) {

1047  
rv
;

1050 #i‡(
NGX_HAVE_INET6
)

1051 
cidr
.
Ámûy
 = 
AF_INET6
;

1052 
	`ngx_memzîo
(&
cidr
.
u
.
ö6
, (
ngx_ö6_cidr_t
));

1054 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1056 i‡(
rv
 !
NGX_CONF_OK
) {

1057  
rv
;

1061  
NGX_CONF_OK
;

1064 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

1065 
√t
 = &
vÆue
[1];

1066 
dñ
 = 1;

1069 
√t
 = &
vÆue
[0];

1070 
dñ
 = 0;

1073 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, 
√t
, &
cidr
Ë!
NGX_OK
) {

1074  
NGX_CONF_ERROR
;

1077 i‡(
cidr
.
Ámûy
 =
AF_INET
) {

1078 
cidr
.
u
.
ö
.
addr
 = 
	`¡ohl
(cidr.u.in.addr);

1079 
cidr
.
u
.
ö
.
mask
 = 
	`¡ohl
(cidr.u.in.mask);

1082 i‡(
dñ
) {

1083 
cidr
.
Ámûy
) {

1085 #i‡(
NGX_HAVE_INET6
)

1086 
AF_INET6
:

1087 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1088 
cidr
.
u
.
ö6
.
addr
.
s6_addr
,

1089 
cidr
.
u
.
ö6
.
mask
.
s6_addr
);

1094 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
,

1095 
cidr
.
u
.
ö
.
mask
);

1099 i‡(
rc
 !
NGX_OK
) {

1100 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1101 "nÿ√tw‹k \"%V\"Åÿdñëe", 
√t
);

1104  
NGX_CONF_OK
;

1107  
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], 
√t
);

1108 
	}
}

1112 
	$ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1113 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
)

1115 
ngx_öt_t
 
rc
;

1116 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ﬁd
;

1118 
vÆ
 = 
	`ngx_hâp_geo_vÆue
(
cf
, 
˘x
, 
vÆue
);

1120 i‡(
vÆ
 =
NULL
) {

1121  
NGX_CONF_ERROR
;

1124 
cidr
->
Ámûy
) {

1126 #i‡(
NGX_HAVE_INET6
)

1127 
AF_INET6
:

1128 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1129 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1130 (
uöçå_t
Ë
vÆ
);

1132 i‡(
rc
 =
NGX_OK
) {

1133  
NGX_CONF_OK
;

1136 i‡(
rc
 =
NGX_ERROR
) {

1137  
NGX_CONF_ERROR
;

1142 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1143 
	`ngx_ødix128åì_föd
(
˘x
->
åì6
,

1144 
cidr
->
u
.
ö6
.
addr
.
s6_addr
);

1146 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1148 
√t
, 
vÆ
, 
ﬁd
);

1150 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1151 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1152 
cidr
->
u
.
ö6
.
mask
.
s6_addr
);

1154 i‡(
rc
 =
NGX_ERROR
) {

1155 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1156  
NGX_CONF_ERROR
;

1159 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1160 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1161 (
uöçå_t
Ë
vÆ
);

1167 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1168 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1170 i‡(
rc
 =
NGX_OK
) {

1171  
NGX_CONF_OK
;

1174 i‡(
rc
 =
NGX_ERROR
) {

1175  
NGX_CONF_ERROR
;

1180 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1181 
	`ngx_ødix32åì_föd
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
);

1183 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1185 
√t
, 
vÆ
, 
ﬁd
);

1187 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
,

1188 
cidr
->
u
.
ö
.
addr
, cidr->u.ö.
mask
);

1190 i‡(
rc
 =
NGX_ERROR
) {

1191 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1192  
NGX_CONF_ERROR
;

1195 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1196 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1201 i‡(
rc
 =
NGX_OK
) {

1202  
NGX_CONF_OK
;

1205  
NGX_CONF_ERROR
;

1206 
	}
}

1209 
ngx_hâp_v¨übÀ_vÆue_t
 *

1210 
	$ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1211 
ngx_°r_t
 *
vÆue
)

1213 
uöt32_t
 
hash
;

1214 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
;

1215 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1217 
hash
 = 
	`ngx_¸c32_l⁄g
(
vÆue
->
d©a
, vÆue->
Àn
);

1219 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1220 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, 
vÆue
, 
hash
);

1222 i‡(
gvvn
) {

1223  
gvvn
->
vÆue
;

1226 
vÆ
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1227 i‡(
vÆ
 =
NULL
) {

1228  
NULL
;

1231 
vÆ
->
Àn
 = 
vÆue
->len;

1232 
vÆ
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
poﬁ
, 
vÆue
);

1233 i‡(
vÆ
->
d©a
 =
NULL
) {

1234  
NULL
;

1237 
vÆ
->
vÆid
 = 1;

1238 
vÆ
->
no_ˇchóbÀ
 = 0;

1239 
vÆ
->
nŸ_found
 = 0;

1241 
gvvn
 = 
	`ngx_∑Œoc
(
˘x
->
ãmp_poﬁ
,

1242 (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
));

1243 i‡(
gvvn
 =
NULL
) {

1244  
NULL
;

1247 
gvvn
->
¢
.
node
.
key
 = 
hash
;

1248 
gvvn
->
¢
.
°r
.
Àn
 = 
vÆ
->len;

1249 
gvvn
->
¢
.
°r
.
d©a
 = 
vÆ
->data;

1250 
gvvn
->
vÆue
 = 
vÆ
;

1251 
gvvn
->
off£t
 = 0;

1253 
	`ngx_rbåì_ö£π
(&
˘x
->
rbåì
, &
gvvn
->
¢
.
node
);

1255 
˘x
->
d©a_size
 +
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vÆue
->
Àn
,

1258  
vÆ
;

1259 
	}
}

1263 
	$ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1264 
ngx_cidr_t
 *
cidr
)

1266 
ngx_cidr_t
 *
c
;

1268 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1269 
˘x
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(˘x->
poﬁ
, 4, (
ngx_cidr_t
));

1270 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1271  
NGX_CONF_ERROR
;

1275 
c
 = 
	`ngx_¨øy_push
(
˘x
->
¥oxõs
);

1276 i‡(
c
 =
NULL
) {

1277  
NGX_CONF_ERROR
;

1280 *
c
 = *
cidr
;

1282  
NGX_CONF_OK
;

1283 
	}
}

1286 
ngx_öt_t


1287 
	$ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

1289 
ngx_öt_t
 
rc
;

1291 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

1292 
cidr
->
Ámûy
 = 
AF_INET
;

1293 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

1294 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

1296  
NGX_OK
;

1299 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

1301 i‡(
rc
 =
NGX_ERROR
) {

1302 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

1303  
NGX_ERROR
;

1306 i‡(
rc
 =
NGX_DONE
) {

1307 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1308 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

1311  
NGX_OK
;

1312 
	}
}

1316 
	$ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1317 
ngx_°r_t
 *
«me
)

1319 *
rv
;

1320 
ngx_°r_t
 
fûe
;

1322 
fûe
.
Àn
 = 
«me
->len + 4;

1323 
fûe
.
d©a
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, 
«me
->
Àn
 + 5);

1324 i‡(
fûe
.
d©a
 =
NULL
) {

1325  
NGX_CONF_ERROR
;

1328 
	`ngx_•rötf
(
fûe
.
d©a
, "%V.bö%Z", 
«me
);

1330 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

1331  
NGX_CONF_ERROR
;

1334 i‡(
˘x
->
ønges
) {

1335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1337 
	`ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
cf
, 
˘x
, &
fûe
)) {

1338 
NGX_OK
:

1339  
NGX_CONF_OK
;

1340 
NGX_ERROR
:

1341  
NGX_CONF_ERROR
;

1347 
fûe
.
Àn
 -= 4;

1348 
fûe
.
d©a
[fûe.
Àn
] = '\0';

1350 
˘x
->
ö˛ude_«me
 = 
fûe
;

1352 i‡(
˘x
->
outside_íåõs
) {

1353 
˘x
->
Ælow_bö¨y_ö˛ude
 = 0;

1356 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1358 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

1360 
˘x
->
ö˛udes
++;

1361 
˘x
->
outside_íåõs
 = 0;

1363  
rv
;

1364 
	}
}

1367 
ngx_öt_t


1368 
	$ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1369 
ngx_°r_t
 *
«me
)

1371 
u_ch¨
 *
ba£
, 
ch
;

1372 
time_t
 
mtime
;

1373 
size_t
 
size
, 
Àn
;

1374 
ssize_t
 
n
;

1375 
uöt32_t
 
¸c32
;

1376 
ngx_îr_t
 
îr
;

1377 
ngx_öt_t
 
rc
;

1378 
ngx_uöt_t
 
i
;

1379 
ngx_fûe_t
 
fûe
;

1380 
ngx_fûe_öfo_t
 
fi
;

1381 
ngx_hâp_geo_ønge_t
 *
ønge
, **
ønges
;

1382 
ngx_hâp_geo_hódî_t
 *
hódî
;

1383 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1385 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1386 
fûe
.
«me
 = *name;

1387 
fûe
.
log
 = 
cf
->log;

1389 
fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
NGX_FILE_RDONLY
, 0, 0);

1390 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1391 
îr
 = 
ngx_î∫o
;

1392 i‡(
îr
 !
NGX_ENOENT
) {

1393 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
îr
,

1394 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1396  
NGX_DECLINED
;

1399 i‡(
˘x
->
outside_íåõs
) {

1400 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1402 
«me
->
d©a
);

1403 
rc
 = 
NGX_ERROR
;

1404 
d⁄e
;

1407 i‡(
˘x
->
bö¨y_ö˛ude
) {

1408 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1410 
«me
->
d©a
, 
˘x
->
ö˛ude_«me
.data);

1411 
rc
 = 
NGX_ERROR
;

1412 
d⁄e
;

1415 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1416 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1417 
ngx_fd_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1418 
Áûed
;

1421 
size
 = (
size_t
Ë
	`ngx_fûe_size
(&
fi
);

1422 
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

1424 
ch
 = 
«me
->
d©a
[«me->
Àn
 - 4];

1425 
«me
->
d©a
[«me->
Àn
 - 4] = '\0';

1427 i‡(
	`ngx_fûe_öfo
(
«me
->
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

1428 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1429 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1430 
Áûed
;

1433 
«me
->
d©a
[«me->
Àn
 - 4] = 
ch
;

1435 i‡(
mtime
 < 
	`ngx_fûe_mtime
(&
fi
)) {

1436 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1437 "°Æêbö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1438 
Áûed
;

1441 
ba£
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

1442 i‡(
ba£
 =
NULL
) {

1443 
Áûed
;

1446 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
ba£
, 
size
, 0);

1448 i‡(
n
 =
NGX_ERROR
) {

1449 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1450 
ngx_ªad_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1451 
Áûed
;

1454 i‡((
size_t
Ë
n
 !
size
) {

1455 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

1456 
ngx_ªad_fûe_n
 " \"%s\"Ñeturned only %z bytes instead of %z",

1457 
«me
->
d©a
, 
n
, 
size
);

1458 
Áûed
;

1461 
hódî
 = (
ngx_hâp_geo_hódî_t
 *Ë
ba£
;

1463 i‡(
size
 < 16 || 
	`ngx_memcmp
(&
ngx_hâp_geo_hódî
, 
hódî
, 12) != 0) {

1464 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1465 "öcom∑tibÀ bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1466 
Áûed
;

1469 
	`ngx_¸c32_öô
(
¸c32
);

1471 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë(
ba£
 + (
ngx_hâp_geo_hódî_t
));

1473 
vv
->
d©a
) {

1474 
Àn
 = 
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vv
->len,

1476 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, 
Àn
);

1477 
vv
->
d©a
 +(
size_t
Ë
ba£
;

1478 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë((
u_ch¨
 *Ëvv + 
Àn
);

1480 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1481 
vv
++;

1483 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
vv
;

1485 
i
 = 0; i < 0x10000; i++) {

1486 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë&
ønges
[
i
], (*));

1487 i‡(
ønges
[
i
]) {

1488 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *)

1489 ((
u_ch¨
 *Ë
ønges
[
i
] + (
size_t
Ë
ba£
);

1493 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë&
ønges
[0x10000];

1495 (
u_ch¨
 *Ë
ønge
 < 
ba£
 + 
size
) {

1496 
ønge
->
vÆue
) {

1497 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
,

1498 (
ngx_hâp_geo_ønge_t
));

1499 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1500 ((
u_ch¨
 *Ë
ønge
->
vÆue
 + (
size_t
Ë
ba£
);

1501 
ønge
++;

1503 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
, (*));

1504 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë((
u_ch¨
 *)Ñange + (*));

1507 
	`ngx_¸c32_föÆ
(
¸c32
);

1509 i‡(
¸c32
 !
hódî
->crc32) {

1510 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1511 "CRC32 mism©ch i¿bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1512 
Áûed
;

1515 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
, 0,

1516 "usög bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1518 
˘x
->
ö˛ude_«me
 = *
«me
;

1519 
˘x
->
bö¨y_ö˛ude
 = 1;

1520 
˘x
->
high
.
low
 = 
ønges
;

1521 
rc
 = 
NGX_OK
;

1523 
d⁄e
;

1525 
Áûed
:

1527 
rc
 = 
NGX_DECLINED
;

1529 
d⁄e
:

1531 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1532 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

1533 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1536  
rc
;

1537 
	}
}

1541 
	$ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
)

1543 
u_ch¨
 *
p
;

1544 
uöt32_t
 
hash
;

1545 
ngx_°r_t
 
s
;

1546 
ngx_uöt_t
 
i
;

1547 
ngx_fûe_m≠pög_t
 
fm
;

1548 
ngx_hâp_geo_ønge_t
 *
r
, *
ønge
, **
ønges
;

1549 
ngx_hâp_geo_hódî_t
 *
hódî
;

1550 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1552 
fm
.
«me
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, ctx->
ö˛ude_«me
.
Àn
 + 5);

1553 i‡(
fm
.
«me
 =
NULL
) {

1557 
	`ngx_•rötf
(
fm
.
«me
, "%V.bö%Z", &
˘x
->
ö˛ude_«me
);

1559 
fm
.
size
 = 
˘x
->
d©a_size
;

1560 
fm
.
log
 = 
˘x
->
poﬁ
->log;

1562 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
fm
.
log
, 0,

1563 "¸ótög bö¨y geÿøngêba£ \"%s\"", 
fm
.
«me
);

1565 i‡(
	`ngx_¸óã_fûe_m≠pög
(&
fm
Ë!
NGX_OK
) {

1569 
p
 = 
	`ngx_˝ymem
(
fm
.
addr
, &
ngx_hâp_geo_hódî
,

1570 (
ngx_hâp_geo_hódî_t
));

1572 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
fm
.
addr
,Ö, 
˘x
->
rbåì
.
roŸ
,

1573 
˘x
->
rbåì
.
£¡öñ
);

1575 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1577 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
p
;

1579 
p
 +0x10000 * (
ngx_hâp_geo_ønge_t
 *);

1581 
i
 = 0; i < 0x10000; i++) {

1582 
r
 = 
˘x
->
high
.
low
[
i
];

1583 i‡(
r
 =
NULL
) {

1587 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë
p
;

1588 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *Ë(
p
 - (
u_ch¨
 *Ë
fm
.
addr
);

1591 
s
.
Àn
 = 
r
->
vÆue
->len;

1592 
s
.
d©a
 = 
r
->
vÆue
->data;

1593 
hash
 = 
	`ngx_¸c32_l⁄g
(
s
.
d©a
, s.
Àn
);

1594 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1595 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, &
s
, 
hash
);

1597 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
gvvn
->
off£t
;

1598 
ønge
->
°¨t
 = 
r
->start;

1599 
ønge
->
íd
 = 
r
->end;

1600 
ønge
++;

1602 } (++
r
)->
vÆue
);

1604 
ønge
->
vÆue
 = 
NULL
;

1606 
p
 = (
u_ch¨
 *Ë
ønge
 + (*);

1609 
hódî
 = 
fm
.
addr
;

1610 
hódî
->
¸c32
 = 
	`ngx_¸c32_l⁄g
((
u_ch¨
 *Ë
fm
.
addr


1611 + (
ngx_hâp_geo_hódî_t
),

1612 
fm
.
size
 - (
ngx_hâp_geo_hódî_t
));

1614 
	`ngx_˛o£_fûe_m≠pög
(&
fm
);

1615 
	}
}

1618 
u_ch¨
 *

1619 
	$ngx_hâp_geo_c›y_vÆues
(
u_ch¨
 *
ba£
, u_ch¨ *
p
, 
ngx_rbåì_node_t
 *
node
,

1620 
ngx_rbåì_node_t
 *
£¡öñ
)

1622 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1623 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1625 i‡(
node
 =
£¡öñ
) {

1626  
p
;

1629 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *Ë
node
;

1630 
gvvn
->
off£t
 = 
p
 - 
ba£
;

1632 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
p
;

1633 *
vv
 = *
gvvn
->
vÆue
;

1634 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1635 
vv
->
d©a
 = (
u_ch¨
 *Ë(
p
 - 
ba£
);

1637 
p
 = 
	`ngx_˝ymem
’, 
gvvn
->
¢
.
°r
.
d©a
, gvvn->¢.°r.
Àn
);

1639 
p
 = 
	`ngx_Æign_±r
(p, (*));

1641 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
ba£
,Ö, 
node
->
À·
, 
£¡öñ
);

1643  
	`ngx_hâp_geo_c›y_vÆues
(
ba£
, 
p
, 
node
->
right
, 
£¡öñ
);

1644 
	}
}

	@src/http/modules/ngx_http_geoip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<GeoIP.h
>

13 
	~<GeoIPCôy.h
>

16 
	#NGX_GEOIP_COUNTRY_CODE
 0

	)

17 
	#NGX_GEOIP_COUNTRY_CODE3
 1

	)

18 
	#NGX_GEOIP_COUNTRY_NAME
 2

	)

22 
GeoIP
 *
	mcou¡ry
;

23 
GeoIP
 *
	m‹g
;

24 
GeoIP
 *
	mcôy
;

25 
ngx_¨øy_t
 *
	m¥oxõs
;

26 
ngx_Êag_t
 
	m¥oxy_ªcursive
;

27 #i‡(
NGX_HAVE_GEOIP_V6
)

28 
	mcou¡ry_v6
:1;

29 
	m‹g_v6
:1;

30 
	mcôy_v6
:1;

32 } 
	tngx_hâp_geoù_c⁄f_t
;

36 
ngx_°r_t
 *
	m«me
;

37 
uöçå_t
 
	md©a
;

38 } 
	tngx_hâp_geoù_v¨_t
;

41 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_±
)(
	tGeoIP
 *,

42 
	tu_l⁄g
 
	taddr
);

45 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
	gngx_hâp_geoù_cou¡ry_fun˘i⁄s
[] = {

46 
GeoIP_cou¡ry_code_by_ùnum
,

47 
GeoIP_cou¡ry_code3_by_ùnum
,

48 
GeoIP_cou¡ry_«me_by_ùnum
,

52 #i‡(
NGX_HAVE_GEOIP_V6
)

54 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
)(
	tGeoIP
 *,

55 
	tgeoùv6_t
 
	taddr
);

58 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
	gngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[] = {

59 
GeoIP_cou¡ry_code_by_ùnum_v6
,

60 
GeoIP_cou¡ry_code3_by_ùnum_v6
,

61 
GeoIP_cou¡ry_«me_by_ùnum_v6
,

67 
ngx_öt_t
 
ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

69 
ngx_öt_t
 
ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

71 
ngx_öt_t
 
ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

73 
ngx_öt_t
 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
GeoIPRec‹d
 *
ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
);

81 
ngx_öt_t
 
ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

82 *
ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

83 *
ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

84 *
ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

85 *
c⁄f
);

86 *
ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

87 *
c⁄f
);

88 *
ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

89 *
c⁄f
);

90 *
ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

91 *
c⁄f
);

92 
ngx_öt_t
 
ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

93 
ngx_cidr_t
 *
cidr
);

94 
ngx_hâp_geoù_˛ónup
(*
d©a
);

97 
ngx_comm™d_t
 
	gngx_hâp_geoù_comm™ds
[] = {

99 { 
ngx_°rög
("geoip_country"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

101 
ngx_hâp_geoù_cou¡ry
,

102 
NGX_HTTP_MAIN_CONF_OFFSET
,

104 
NULL
 },

106 { 
ngx_°rög
("geoip_org"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

108 
ngx_hâp_geoù_‹g
,

109 
NGX_HTTP_MAIN_CONF_OFFSET
,

111 
NULL
 },

113 { 
ngx_°rög
("geoip_city"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

115 
ngx_hâp_geoù_côy
,

116 
NGX_HTTP_MAIN_CONF_OFFSET
,

118 
NULL
 },

120 { 
ngx_°rög
("geoip_proxy"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_hâp_geoù_¥oxy
,

123 
NGX_HTTP_MAIN_CONF_OFFSET
,

125 
NULL
 },

127 { 
ngx_°rög
("geoip_proxy_recursive"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_FLAG
,

129 
ngx_c⁄f_£t_Êag_¶Ÿ
,

130 
NGX_HTTP_MAIN_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_geoù_c⁄f_t
, 
¥oxy_ªcursive
),

132 
NULL
 },

134 
ngx_nuŒ_comm™d


138 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geoù_moduÀ_˘x
 = {

139 
ngx_hâp_geoù_add_v¨übÀs
,

140 
NULL
,

142 
ngx_hâp_geoù_¸óã_c⁄f
,

143 
ngx_hâp_geoù_öô_c⁄f
,

145 
NULL
,

146 
NULL
,

148 
NULL
,

149 
NULL


153 
ngx_moduÀ_t
 
	gngx_hâp_geoù_moduÀ
 = {

154 
NGX_MODULE_V1
,

155 &
ngx_hâp_geoù_moduÀ_˘x
,

156 
ngx_hâp_geoù_comm™ds
,

157 
NGX_HTTP_MODULE
,

158 
NULL
,

159 
NULL
,

160 
NULL
,

161 
NULL
,

162 
NULL
,

163 
NULL
,

164 
NULL
,

165 
NGX_MODULE_V1_PADDING


169 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_geoù_v¨s
[] = {

171 { 
ngx_°rög
("geoù_cou¡ry_code"), 
NULL
,

172 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

173 
NGX_GEOIP_COUNTRY_CODE
, 0, 0 },

175 { 
ngx_°rög
("geoù_cou¡ry_code3"), 
NULL
,

176 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

177 
NGX_GEOIP_COUNTRY_CODE3
, 0, 0 },

179 { 
ngx_°rög
("geoù_cou¡ry_«me"), 
NULL
,

180 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

181 
NGX_GEOIP_COUNTRY_NAME
, 0, 0 },

183 { 
ngx_°rög
("geoù_‹g"), 
NULL
,

184 
ngx_hâp_geoù_‹g_v¨übÀ
,

187 { 
ngx_°rög
("geoù_côy_c⁄töít_code"), 
NULL
,

188 
ngx_hâp_geoù_côy_v¨übÀ
,

189 
off£tof
(
GeoIPRec‹d
, 
c⁄töít_code
), 0, 0 },

191 { 
ngx_°rög
("geoù_côy_cou¡ry_code"), 
NULL
,

192 
ngx_hâp_geoù_côy_v¨übÀ
,

193 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code
), 0, 0 },

195 { 
ngx_°rög
("geoù_côy_cou¡ry_code3"), 
NULL
,

196 
ngx_hâp_geoù_côy_v¨übÀ
,

197 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code3
), 0, 0 },

199 { 
ngx_°rög
("geoù_côy_cou¡ry_«me"), 
NULL
,

200 
ngx_hâp_geoù_côy_v¨übÀ
,

201 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_«me
), 0, 0 },

203 { 
ngx_°rög
("geoù_ªgi⁄"), 
NULL
,

204 
ngx_hâp_geoù_côy_v¨übÀ
,

205 
off£tof
(
GeoIPRec‹d
, 
ªgi⁄
), 0, 0 },

207 { 
ngx_°rög
("geoù_ªgi⁄_«me"), 
NULL
,

208 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
,

211 { 
ngx_°rög
("geoù_côy"), 
NULL
,

212 
ngx_hâp_geoù_côy_v¨übÀ
,

213 
off£tof
(
GeoIPRec‹d
, 
côy
), 0, 0 },

215 { 
ngx_°rög
("geoù_po°Æ_code"), 
NULL
,

216 
ngx_hâp_geoù_côy_v¨übÀ
,

217 
off£tof
(
GeoIPRec‹d
, 
po°Æ_code
), 0, 0 },

219 { 
ngx_°rög
("geoù_œtôude"), 
NULL
,

220 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

221 
off£tof
(
GeoIPRec‹d
, 
œtôude
), 0, 0 },

223 { 
ngx_°rög
("geoù_l⁄gôude"), 
NULL
,

224 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

225 
off£tof
(
GeoIPRec‹d
, 
l⁄gôude
), 0, 0 },

227 { 
ngx_°rög
("geoù_dma_code"), 
NULL
,

228 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

229 
off£tof
(
GeoIPRec‹d
, 
dma_code
), 0, 0 },

231 { 
ngx_°rög
("geoù_¨ó_code"), 
NULL
,

232 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

233 
off£tof
(
GeoIPRec‹d
, 
¨ó_code
), 0, 0 },

235 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

239 
u_l⁄g


240 
	$ngx_hâp_geoù_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

242 
ngx_addr_t
 
addr
;

243 
ngx_¨øy_t
 *
xfwd
;

244 
sockaddr_ö
 *
sö
;

246 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

247 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

250 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

252 i‡(
xfwd
->
√…s
 > 0 && 
gcf
->
¥oxõs
 !
NULL
) {

253 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
NULL
,

254 
gcf
->
¥oxõs
, gcf->
¥oxy_ªcursive
);

257 #i‡(
NGX_HAVE_INET6
)

259 i‡(
addr
.
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

260 
u_ch¨
 *
p
;

261 
ö_addr_t
 
öaddr
;

262 
ö6_addr
 *
öaddr6
;

264 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

266 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

267 
p
 = 
öaddr6
->
s6_addr
;

269 
öaddr
 = 
p
[12] << 24;

270 
öaddr
 +
p
[13] << 16;

271 
öaddr
 +
p
[14] << 8;

272 
öaddr
 +
p
[15];

274  
öaddr
;

280 i‡(
addr
.
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

281  
INADDR_NONE
;

284 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

285  
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

286 
	}
}

289 #i‡(
NGX_HAVE_GEOIP_V6
)

291 
geoùv6_t


292 
	$ngx_hâp_geoù_addr_v6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

294 
ngx_addr_t
 
addr
;

295 
ngx_¨øy_t
 *
xfwd
;

296 
ö_addr_t
 
addr4
;

297 
ö6_addr
 
addr6
;

298 
sockaddr_ö
 *
sö
;

299 
sockaddr_ö6
 *
sö6
;

301 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

302 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

305 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

307 i‡(
xfwd
->
√…s
 > 0 && 
gcf
->
¥oxõs
 !
NULL
) {

308 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
NULL
,

309 
gcf
->
¥oxõs
, gcf->
¥oxy_ªcursive
);

312 
addr
.
sockaddr
->
ß_Ámûy
) {

314 
AF_INET
:

316 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

317 
addr4
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

319 
	`ngx_memzîo
(&
addr6
, (
ö6_addr
));

320 
addr6
.
s6_addr
[10] = 0xff;

321 
addr6
.
s6_addr
[11] = 0xff;

322 
addr6
.
s6_addr
[12] = 
addr4
 >> 24;

323 
addr6
.
s6_addr
[13] = 
addr4
 >> 16;

324 
addr6
.
s6_addr
[14] = 
addr4
 >> 8;

325 
addr6
.
s6_addr
[15] = 
addr4
;

326  
addr6
;

328 
AF_INET6
:

329 
sö6
 = (
sockaddr_ö6
 *Ë
addr
.
sockaddr
;

330  
sö6
->
sö6_addr
;

333  
ö6addr_™y
;

335 
	}
}

340 
ngx_öt_t


341 
	$ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

342 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

344 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
h™dÀr
 =

345 
ngx_hâp_geoù_cou¡ry_fun˘i⁄s
[
d©a
];

346 #i‡(
NGX_HAVE_GEOIP_V6
)

347 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
h™dÀr_v6
 =

348 
ngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[
d©a
];

351 c⁄° *
vÆ
;

352 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

354 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

356 i‡(
gcf
->
cou¡ry
 =
NULL
) {

357 
nŸ_found
;

360 #i‡(
NGX_HAVE_GEOIP_V6
)

361 
vÆ
 = 
gcf
->
cou¡ry_v6


362 ? 
	`h™dÀr_v6
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr_v6
(
r
, gcf))

363 : 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

365 
vÆ
 = 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

368 i‡(
vÆ
 =
NULL
) {

369 
nŸ_found
;

372 
v
->
Àn
 = 
	`ngx_°æí
(
vÆ
);

373 
v
->
vÆid
 = 1;

374 
v
->
no_ˇchóbÀ
 = 0;

375 
v
->
nŸ_found
 = 0;

376 
v
->
d©a
 = (
u_ch¨
 *Ë
vÆ
;

378  
NGX_OK
;

380 
nŸ_found
:

382 
v
->
nŸ_found
 = 1;

384  
NGX_OK
;

385 
	}
}

388 
ngx_öt_t


389 
	$ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

390 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

392 
size_t
 
Àn
;

393 *
vÆ
;

394 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

396 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

398 i‡(
gcf
->
‹g
 =
NULL
) {

399 
nŸ_found
;

402 #i‡(
NGX_HAVE_GEOIP_V6
)

403 
vÆ
 = 
gcf
->
‹g_v6


404 ? 
	`GeoIP_«me_by_ùnum_v6
(
gcf
->
‹g
,

405 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

406 : 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
,

407 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

409 
vÆ
 = 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

412 i‡(
vÆ
 =
NULL
) {

413 
nŸ_found
;

416 
Àn
 = 
	`ngx_°æí
(
vÆ
);

417 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

418 i‡(
v
->
d©a
 =
NULL
) {

419 
	`ngx_‰ì
(
vÆ
);

420  
NGX_ERROR
;

423 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

425 
v
->
Àn
 =Üen;

426 
v
->
vÆid
 = 1;

427 
v
->
no_ˇchóbÀ
 = 0;

428 
v
->
nŸ_found
 = 0;

430 
	`ngx_‰ì
(
vÆ
);

432  
NGX_OK
;

434 
nŸ_found
:

436 
v
->
nŸ_found
 = 1;

438  
NGX_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

444 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

446 *
vÆ
;

447 
size_t
 
Àn
;

448 
GeoIPRec‹d
 *
gr
;

450 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

451 i‡(
gr
 =
NULL
) {

452 
nŸ_found
;

455 
vÆ
 = *(**Ë((*Ë
gr
 + 
d©a
);

456 i‡(
vÆ
 =
NULL
) {

457 
no_vÆue
;

460 
Àn
 = 
	`ngx_°æí
(
vÆ
);

461 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

462 i‡(
v
->
d©a
 =
NULL
) {

463 
	`GeoIPRec‹d_dñëe
(
gr
);

464  
NGX_ERROR
;

467 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

469 
v
->
Àn
 =Üen;

470 
v
->
vÆid
 = 1;

471 
v
->
no_ˇchóbÀ
 = 0;

472 
v
->
nŸ_found
 = 0;

474 
	`GeoIPRec‹d_dñëe
(
gr
);

476  
NGX_OK
;

478 
no_vÆue
:

480 
	`GeoIPRec‹d_dñëe
(
gr
);

482 
nŸ_found
:

484 
v
->
nŸ_found
 = 1;

486  
NGX_OK
;

487 
	}
}

490 
ngx_öt_t


491 
	$ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

492 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

494 
size_t
 
Àn
;

495 c⁄° *
vÆ
;

496 
GeoIPRec‹d
 *
gr
;

498 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

499 i‡(
gr
 =
NULL
) {

500 
nŸ_found
;

503 
vÆ
 = 
	`GeoIP_ªgi⁄_«me_by_code
(
gr
->
cou¡ry_code
, gr->
ªgi⁄
);

505 
	`GeoIPRec‹d_dñëe
(
gr
);

507 i‡(
vÆ
 =
NULL
) {

508 
nŸ_found
;

511 
Àn
 = 
	`ngx_°æí
(
vÆ
);

512 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

513 i‡(
v
->
d©a
 =
NULL
) {

514  
NGX_ERROR
;

517 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

519 
v
->
Àn
 =Üen;

520 
v
->
vÆid
 = 1;

521 
v
->
no_ˇchóbÀ
 = 0;

522 
v
->
nŸ_found
 = 0;

524  
NGX_OK
;

526 
nŸ_found
:

528 
v
->
nŸ_found
 = 1;

530  
NGX_OK
;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

536 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

538 
vÆ
;

539 
GeoIPRec‹d
 *
gr
;

541 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

542 i‡(
gr
 =
NULL
) {

543 
v
->
nŸ_found
 = 1;

544  
NGX_OK
;

547 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
 + 5);

548 i‡(
v
->
d©a
 =
NULL
) {

549 
	`GeoIPRec‹d_dñëe
(
gr
);

550  
NGX_ERROR
;

553 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

555 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%.4f", 
vÆ
) - v->data;

556 
v
->
vÆid
 = 1;

557 
v
->
no_ˇchóbÀ
 = 0;

558 
v
->
nŸ_found
 = 0;

560 
	`GeoIPRec‹d_dñëe
(
gr
);

562  
NGX_OK
;

563 
	}
}

566 
ngx_öt_t


567 
	$ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

568 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

570 
vÆ
;

571 
GeoIPRec‹d
 *
gr
;

573 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

574 i‡(
gr
 =
NULL
) {

575 
v
->
nŸ_found
 = 1;

576  
NGX_OK
;

579 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

580 i‡(
v
->
d©a
 =
NULL
) {

581 
	`GeoIPRec‹d_dñëe
(
gr
);

582  
NGX_ERROR
;

585 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

587 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%d", 
vÆ
) - v->data;

588 
v
->
vÆid
 = 1;

589 
v
->
no_ˇchóbÀ
 = 0;

590 
v
->
nŸ_found
 = 0;

592 
	`GeoIPRec‹d_dñëe
(
gr
);

594  
NGX_OK
;

595 
	}
}

598 
GeoIPRec‹d
 *

599 
	$ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
)

601 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

603 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

605 i‡(
gcf
->
côy
) {

606 #i‡(
NGX_HAVE_GEOIP_V6
)

607  
gcf
->
côy_v6


608 ? 
	`GeoIP_ªc‹d_by_ùnum_v6
(
gcf
->
côy
,

609 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

610 : 
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
,

611 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

613  
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

617  
NULL
;

618 
	}
}

621 
ngx_öt_t


622 
	$ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

624 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

626 
v
 = 
ngx_hâp_geoù_v¨s
; v->
«me
.
Àn
; v++) {

627 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

628 i‡(
v¨
 =
NULL
) {

629  
NGX_ERROR
;

632 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

633 
v¨
->
d©a
 = 
v
->data;

636  
NGX_OK
;

637 
	}
}

641 
	$ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

643 
ngx_poﬁ_˛ónup_t
 *
˛n
;

644 
ngx_hâp_geoù_c⁄f_t
 *
c⁄f
;

646 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_geoù_c⁄f_t
));

647 i‡(
c⁄f
 =
NULL
) {

648  
NULL
;

651 
c⁄f
->
¥oxy_ªcursive
 = 
NGX_CONF_UNSET
;

653 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

654 i‡(
˛n
 =
NULL
) {

655  
NULL
;

658 
˛n
->
h™dÀr
 = 
ngx_hâp_geoù_˛ónup
;

659 
˛n
->
d©a
 = 
c⁄f
;

661  
c⁄f
;

662 
	}
}

666 
	$ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

668 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

670 
	`ngx_c⁄f_öô_vÆue
(
gcf
->
¥oxy_ªcursive
, 0);

672  
NGX_CONF_OK
;

673 
	}
}

677 
	$ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

679 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

681 
ngx_°r_t
 *
vÆue
;

683 i‡(
gcf
->
cou¡ry
) {

687 
vÆue
 = 
cf
->
¨gs
->
ñts
;

689 
gcf
->
cou¡ry
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

691 i‡(
gcf
->
cou¡ry
 =
NULL
) {

692 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

693 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

695  
NGX_CONF_ERROR
;

698 i‡(
cf
->
¨gs
->
√…s
 == 3) {

699 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

700 
	`GeoIP_£t_ch¨£t
(
gcf
->
cou¡ry
, 
GEOIP_CHARSET_UTF8
);

703 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

704 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

705  
NGX_CONF_ERROR
;

709 
gcf
->
cou¡ry
->
d©aba£Ty≥
) {

711 
GEOIP_COUNTRY_EDITION
:

713  
NGX_CONF_OK
;

715 #i‡(
NGX_HAVE_GEOIP_V6
)

716 
GEOIP_COUNTRY_EDITION_V6
:

718 
gcf
->
cou¡ry_v6
 = 1;

719  
NGX_CONF_OK
;

723 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

725 &
vÆue
[1], 
gcf
->
cou¡ry
->
d©aba£Ty≥
);

726  
NGX_CONF_ERROR
;

728 
	}
}

732 
	$ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

734 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

736 
ngx_°r_t
 *
vÆue
;

738 i‡(
gcf
->
‹g
) {

742 
vÆue
 = 
cf
->
¨gs
->
ñts
;

744 
gcf
->
‹g
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

746 i‡(
gcf
->
‹g
 =
NULL
) {

747 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

748 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

750  
NGX_CONF_ERROR
;

753 i‡(
cf
->
¨gs
->
√…s
 == 3) {

754 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

755 
	`GeoIP_£t_ch¨£t
(
gcf
->
‹g
, 
GEOIP_CHARSET_UTF8
);

758 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

759 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

760  
NGX_CONF_ERROR
;

764 
gcf
->
‹g
->
d©aba£Ty≥
) {

766 
GEOIP_ISP_EDITION
:

767 
GEOIP_ORG_EDITION
:

768 
GEOIP_DOMAIN_EDITION
:

769 
GEOIP_ASNUM_EDITION
:

771  
NGX_CONF_OK
;

773 #i‡(
NGX_HAVE_GEOIP_V6
)

774 
GEOIP_ISP_EDITION_V6
:

775 
GEOIP_ORG_EDITION_V6
:

776 
GEOIP_DOMAIN_EDITION_V6
:

777 
GEOIP_ASNUM_EDITION_V6
:

779 
gcf
->
‹g_v6
 = 1;

780  
NGX_CONF_OK
;

784 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

786 &
vÆue
[1], 
gcf
->
‹g
->
d©aba£Ty≥
);

787  
NGX_CONF_ERROR
;

789 
	}
}

793 
	$ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

795 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

797 
ngx_°r_t
 *
vÆue
;

799 i‡(
gcf
->
côy
) {

803 
vÆue
 = 
cf
->
¨gs
->
ñts
;

805 
gcf
->
côy
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

807 i‡(
gcf
->
côy
 =
NULL
) {

808 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

809 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

811  
NGX_CONF_ERROR
;

814 i‡(
cf
->
¨gs
->
√…s
 == 3) {

815 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

816 
	`GeoIP_£t_ch¨£t
(
gcf
->
côy
, 
GEOIP_CHARSET_UTF8
);

819 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

820 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

821  
NGX_CONF_ERROR
;

825 
gcf
->
côy
->
d©aba£Ty≥
) {

827 
GEOIP_CITY_EDITION_REV0
:

828 
GEOIP_CITY_EDITION_REV1
:

830  
NGX_CONF_OK
;

832 #i‡(
NGX_HAVE_GEOIP_V6
)

833 
GEOIP_CITY_EDITION_REV0_V6
:

834 
GEOIP_CITY_EDITION_REV1_V6
:

836 
gcf
->
côy_v6
 = 1;

837  
NGX_CONF_OK
;

841 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

843 &
vÆue
[1], 
gcf
->
côy
->
d©aba£Ty≥
);

844  
NGX_CONF_ERROR
;

846 
	}
}

850 
	$ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

852 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

854 
ngx_°r_t
 *
vÆue
;

855 
ngx_cidr_t
 
cidr
, *
c
;

857 
vÆue
 = 
cf
->
¨gs
->
ñts
;

859 i‡(
	`ngx_hâp_geoù_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

860  
NGX_CONF_ERROR
;

863 i‡(
gcf
->
¥oxõs
 =
NULL
) {

864 
gcf
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_cidr_t
));

865 i‡(
gcf
->
¥oxõs
 =
NULL
) {

866  
NGX_CONF_ERROR
;

870 
c
 = 
	`ngx_¨øy_push
(
gcf
->
¥oxõs
);

871 i‡(
c
 =
NULL
) {

872  
NGX_CONF_ERROR
;

875 *
c
 = 
cidr
;

877  
NGX_CONF_OK
;

878 
	}
}

880 
ngx_öt_t


881 
	$ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

883 
ngx_öt_t
 
rc
;

885 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

886 
cidr
->
Ámûy
 = 
AF_INET
;

887 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

888 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

890  
NGX_OK
;

893 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

895 i‡(
rc
 =
NGX_ERROR
) {

896 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

897  
NGX_ERROR
;

900 i‡(
rc
 =
NGX_DONE
) {

901 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

902 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

905  
NGX_OK
;

906 
	}
}

910 
	$ngx_hâp_geoù_˛ónup
(*
d©a
)

912 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
d©a
;

914 i‡(
gcf
->
cou¡ry
) {

915 
	`GeoIP_dñëe
(
gcf
->
cou¡ry
);

918 i‡(
gcf
->
‹g
) {

919 
	`GeoIP_dñëe
(
gcf
->
‹g
);

922 i‡(
gcf
->
côy
) {

923 
	`GeoIP_dñëe
(
gcf
->
côy
);

925 
	}
}

	@src/http/modules/ngx_http_gunzip_filter_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

13 
	~<zlib.h
>

17 
ngx_Êag_t
 
	míabÀ
;

18 
ngx_bufs_t
 
	mbufs
;

19 } 
	tngx_hâp_gunzù_c⁄f_t
;

23 
ngx_chaö_t
 *
	mö
;

24 
ngx_chaö_t
 *
	m‰ì
;

25 
ngx_chaö_t
 *
	mbusy
;

26 
ngx_chaö_t
 *
	mout
;

27 
ngx_chaö_t
 **
	mœ°_out
;

29 
ngx_buf_t
 *
	mö_buf
;

30 
ngx_buf_t
 *
	mout_buf
;

31 
ngx_öt_t
 
	mbufs
;

33 
	m°¨ãd
:1;

34 
	mÊush
:4;

35 
	mªdo
:1;

36 
	md⁄e
:1;

37 
	mnomem
:1;

39 
z_°ªam
 
	mz°ªam
;

40 
ngx_hâp_ªque°_t
 *
	mªque°
;

41 } 
	tngx_hâp_gunzù_˘x_t
;

44 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

45 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

46 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

48 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

50 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

52 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

55 *
ngx_hâp_gunzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

56 
u_öt
 
size
);

57 
ngx_hâp_gunzù_fûãr_‰ì
(*
›aque
, *
addªss
);

59 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

60 *
ngx_hâp_gunzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

61 *
ngx_hâp_gunzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

62 *
∑ª¡
, *
chûd
);

65 
ngx_comm™d_t
 
	gngx_hâp_gunzù_fûãr_comm™ds
[] = {

67 { 
ngx_°rög
("gunzip"),

68 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

69 
ngx_c⁄f_£t_Êag_¶Ÿ
,

70 
NGX_HTTP_LOC_CONF_OFFSET
,

71 
off£tof
(
ngx_hâp_gunzù_c⁄f_t
, 
íabÀ
),

72 
NULL
 },

74 { 
ngx_°rög
("gunzip_buffers"),

75 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

76 
ngx_c⁄f_£t_bufs_¶Ÿ
,

77 
NGX_HTTP_LOC_CONF_OFFSET
,

78 
off£tof
(
ngx_hâp_gunzù_c⁄f_t
, 
bufs
),

79 
NULL
 },

81 
ngx_nuŒ_comm™d


85 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gunzù_fûãr_moduÀ_˘x
 = {

86 
NULL
,

87 
ngx_hâp_gunzù_fûãr_öô
,

89 
NULL
,

90 
NULL
,

92 
NULL
,

93 
NULL
,

95 
ngx_hâp_gunzù_¸óã_c⁄f
,

96 
ngx_hâp_gunzù_mîge_c⁄f


100 
ngx_moduÀ_t
 
	gngx_hâp_gunzù_fûãr_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_hâp_gunzù_fûãr_moduÀ_˘x
,

103 
ngx_hâp_gunzù_fûãr_comm™ds
,

104 
NGX_HTTP_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

117 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

120 
ngx_öt_t


121 
	$ngx_hâp_gunzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

123 
ngx_hâp_gunzù_˘x_t
 *
˘x
;

124 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

126 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

132 i‡(!
c⁄f
->
íabÀ


133 || 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 =
NULL


134 || 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
 != 4

135 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
d©a
,

136 (
u_ch¨
 *) "gzip", 4) != 0)

138  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

141 
r
->
gzù_v¨y
 = 1;

143 i‡(!
r
->
gzù_ã°ed
) {

144 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë=
NGX_OK
) {

145  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

148 } i‡(
r
->
gzù_ok
) {

149  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

152 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gunzù_˘x_t
));

153 i‡(
˘x
 =
NULL
) {

154  
NGX_ERROR
;

157 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

159 
˘x
->
ªque°
 = 
r
;

161 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

163 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

164 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

166 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

167 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

168 
	`ngx_hâp_wók_ëag
(
r
);

170  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

171 
	}
}

174 
ngx_öt_t


175 
	$ngx_hâp_gunzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

177 
rc
;

178 
ngx_uöt_t
 
Êush
;

179 
ngx_chaö_t
 *
˛
;

180 
ngx_hâp_gunzù_˘x_t
 *
˘x
;

182 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

184 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

185  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

188 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

191 i‡(!
˘x
->
°¨ãd
) {

192 i‡(
	`ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

193 
Áûed
;

197 i‡(
ö
) {

198 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

199 
Áûed
;

203 i‡(
˘x
->
nomem
) {

207 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

208 
Áûed
;

211 
˛
 = 
NULL
;

213 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

214 (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
);

215 
˘x
->
nomem
 = 0;

216 
Êush
 = 0;

219 
Êush
 = 
˘x
->
busy
 ? 1 : 0;

230 
rc
 = 
	`ngx_hâp_gunzù_fûãr_add_d©a
(
r
, 
˘x
);

232 i‡(
rc
 =
NGX_DECLINED
) {

236 i‡(
rc
 =
NGX_AGAIN
) {

243 
rc
 = 
	`ngx_hâp_gunzù_fûãr_gë_buf
(
r
, 
˘x
);

245 i‡(
rc
 =
NGX_DECLINED
) {

249 i‡(
rc
 =
NGX_ERROR
) {

250 
Áûed
;

253 
rc
 = 
	`ngx_hâp_gunzù_fûãr_öÊ©e
(
r
, 
˘x
);

255 i‡(
rc
 =
NGX_OK
) {

259 i‡(
rc
 =
NGX_ERROR
) {

260 
Áûed
;

266 i‡(
˘x
->
out
 =
NULL
 && !
Êush
) {

267  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

270 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

272 i‡(
rc
 =
NGX_ERROR
) {

273 
Áûed
;

276 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

277 (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
);

278 
˘x
->
œ°_out
 = &˘x->
out
;

280 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

281 "gunzù out: %p", 
˘x
->
out
);

283 
˘x
->
nomem
 = 0;

284 
Êush
 = 0;

286 i‡(
˘x
->
d⁄e
) {

287  
rc
;

293 
Áûed
:

295 
˘x
->
d⁄e
 = 1;

297  
NGX_ERROR
;

298 
	}
}

301 
ngx_öt_t


302 
	$ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

303 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

305 
rc
;

307 
˘x
->
z°ªam
.
√xt_ö
 = 
Z_NULL
;

308 
˘x
->
z°ªam
.
avaû_ö
 = 0;

310 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gunzù_fûãr_Æloc
;

311 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gunzù_fûãr_‰ì
;

312 
˘x
->
z°ªam
.
›aque
 = ctx;

315 
rc
 = 
	`öÊ©eInô2
(&
˘x
->
z°ªam
, 
MAX_WBITS
 + 16);

317 i‡(
rc
 !
Z_OK
) {

318 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "öÊ©eInô2(ËÁûed: %d", 
rc
);

320  
NGX_ERROR
;

323 
˘x
->
°¨ãd
 = 1;

325 
˘x
->
œ°_out
 = &˘x->
out
;

326 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

328  
NGX_OK
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_hâp_gunzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

334 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

336 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

337  
NGX_OK
;

340 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

341 "gunzù in: %p", 
˘x
->
ö
);

343 i‡(
˘x
->
ö
 =
NULL
) {

344  
NGX_DECLINED
;

347 
˘x
->
ö_buf
 = ctx->
ö
->
buf
;

348 
˘x
->
ö
 = ctx->ö->
√xt
;

350 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

351 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

353 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

355 
˘x
->
ö_buf
,

356 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

358 i‡(
˘x
->
ö_buf
->
œ°_buf
 || ctx->ö_buf->
œ°_ö_chaö
) {

359 
˘x
->
Êush
 = 
Z_FINISH
;

361 } i‡(
˘x
->
ö_buf
->
Êush
) {

362 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

364 } i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

366  
NGX_AGAIN
;

369  
NGX_OK
;

370 
	}
}

373 
ngx_öt_t


374 
	$ngx_hâp_gunzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

375 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

377 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

379 i‡(
˘x
->
z°ªam
.
avaû_out
) {

380  
NGX_OK
;

383 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

385 i‡(
˘x
->
‰ì
) {

386 
˘x
->
out_buf
 = ctx->
‰ì
->
buf
;

387 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

389 
˘x
->
out_buf
->
Êush
 = 0;

391 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

393 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

394 i‡(
˘x
->
out_buf
 =
NULL
) {

395  
NGX_ERROR
;

398 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
;

399 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

400 
˘x
->
bufs
++;

403 
˘x
->
nomem
 = 1;

404  
NGX_DECLINED
;

407 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

408 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

410  
NGX_OK
;

411 
	}
}

414 
ngx_öt_t


415 
	$ngx_hâp_gunzù_fûãr_öÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

416 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

418 
rc
;

419 
ngx_buf_t
 *
b
;

420 
ngx_chaö_t
 *
˛
;

422 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

424 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

425 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

426 
˘x
->
Êush
, ctx->
ªdo
);

428 
rc
 = 
	`öÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

430 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
 &&Ñ¯!
Z_BUF_ERROR
) {

431 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

432 "öÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

433  
NGX_ERROR
;

436 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

438 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

439 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

440 
rc
);

442 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

444 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

446 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

447 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

449 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

450 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

454 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

456 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

460 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

461 i‡(
˛
 =
NULL
) {

462  
NGX_ERROR
;

465 
˛
->
buf
 = 
˘x
->
out_buf
;

466 
˛
->
√xt
 = 
NULL
;

467 *
˘x
->
œ°_out
 = 
˛
;

468 
˘x
->
œ°_out
 = &
˛
->
√xt
;

470 
˘x
->
ªdo
 = 1;

472  
NGX_AGAIN
;

475 
˘x
->
ªdo
 = 0;

477 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

479 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

481 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

482 i‡(
˛
 =
NULL
) {

483  
NGX_ERROR
;

486 
b
 = 
˘x
->
out_buf
;

488 i‡(
	`ngx_buf_size
(
b
) == 0) {

490 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

491 i‡(
b
 =
NULL
) {

492  
NGX_ERROR
;

496 
˘x
->
z°ªam
.
avaû_out
 = 0;

499 
b
->
Êush
 = 1;

501 
˛
->
buf
 = 
b
;

502 
˛
->
√xt
 = 
NULL
;

503 *
˘x
->
œ°_out
 = 
˛
;

504 
˘x
->
œ°_out
 = &
˛
->
√xt
;

506  
NGX_OK
;

509 i‡(
˘x
->
Êush
 =
Z_FINISH
 && ctx->
z°ªam
.
avaû_ö
 == 0) {

511 i‡(
rc
 !
Z_STREAM_END
) {

512 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

513 "öÊ©e(Ëªtu∫ed %d o¿ª•⁄£Énd", 
rc
);

514  
NGX_ERROR
;

517 i‡(
	`ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

518  
NGX_ERROR
;

521  
NGX_OK
;

524 i‡(
rc
 =
Z_STREAM_END
 && 
˘x
->
z°ªam
.
avaû_ö
 > 0) {

526 
rc
 = 
	`öÊ©eRe£t
(&
˘x
->
z°ªam
);

528 i‡(
rc
 !
Z_OK
) {

529 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

530 "öÊ©eRe£t(ËÁûed: %d", 
rc
);

531  
NGX_ERROR
;

534 
˘x
->
ªdo
 = 1;

536  
NGX_AGAIN
;

539 i‡(
˘x
->
ö
 =
NULL
) {

541 
b
 = 
˘x
->
out_buf
;

543 i‡(
	`ngx_buf_size
(
b
) == 0) {

544  
NGX_OK
;

547 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

548 i‡(
˛
 =
NULL
) {

549  
NGX_ERROR
;

552 
˘x
->
z°ªam
.
avaû_out
 = 0;

554 
˛
->
buf
 = 
b
;

555 
˛
->
√xt
 = 
NULL
;

556 *
˘x
->
œ°_out
 = 
˛
;

557 
˘x
->
œ°_out
 = &
˛
->
√xt
;

559  
NGX_OK
;

562  
NGX_AGAIN
;

563 
	}
}

566 
ngx_öt_t


567 
	$ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

568 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

570 
rc
;

571 
ngx_buf_t
 *
b
;

572 
ngx_chaö_t
 *
˛
;

574 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

577 
rc
 = 
	`öÊ©eEnd
(&
˘x
->
z°ªam
);

579 i‡(
rc
 !
Z_OK
) {

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

581 "öÊ©eEnd(ËÁûed: %d", 
rc
);

582  
NGX_ERROR
;

585 
b
 = 
˘x
->
out_buf
;

587 i‡(
	`ngx_buf_size
(
b
) == 0) {

589 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

590 i‡(
b
 =
NULL
) {

591  
NGX_ERROR
;

595 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

596 i‡(
˛
 =
NULL
) {

597  
NGX_ERROR
;

600 
˛
->
buf
 = 
b
;

601 
˛
->
√xt
 = 
NULL
;

602 *
˘x
->
œ°_out
 = 
˛
;

603 
˘x
->
œ°_out
 = &
˛
->
√xt
;

605 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

606 
b
->
œ°_ö_chaö
 = 1;

607 
b
->
sync
 = 1;

609 
˘x
->
d⁄e
 = 1;

611  
NGX_OK
;

612 
	}
}

616 
	$ngx_hâp_gunzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

618 
ngx_hâp_gunzù_˘x_t
 *
˘x
 = 
›aque
;

620 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

622 
ôems
, 
size
);

624  
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

625 
	}
}

629 
	$ngx_hâp_gunzù_fûãr_‰ì
(*
›aque
, *
addªss
)

632 
ngx_hâp_gunzù_˘x_t
 *
˘x
 = 
›aque
;

634 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

635 "gunzù fªe: %p", 
addªss
);

637 
	}
}

641 
	$ngx_hâp_gunzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

643 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

645 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gunzù_c⁄f_t
));

646 i‡(
c⁄f
 =
NULL
) {

647  
NULL
;

656 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

658  
c⁄f
;

659 
	}
}

663 
	$ngx_hâp_gunzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

665 
ngx_hâp_gunzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

666 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

668 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

670 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

671 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

673  
NGX_CONF_OK
;

674 
	}
}

677 
ngx_öt_t


678 
	$ngx_hâp_gunzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

680 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

681 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gunzù_hódî_fûãr
;

683 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

684 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gunzù_body_fûãr
;

686  
NGX_OK
;

687 
	}
}

	@src/http/modules/ngx_http_gzip_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<zlib.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	mno_buf„r
;

19 
ngx_hash_t
 
	mty≥s
;

21 
ngx_bufs_t
 
	mbufs
;

23 
size_t
 
	mpo°p⁄e_gzùpög
;

24 
ngx_öt_t
 
	mÀvñ
;

25 
size_t
 
	mwbôs
;

26 
size_t
 
	mmemÀvñ
;

27 
ssize_t
 
	mmö_Àngth
;

29 
ngx_¨øy_t
 *
	mty≥s_keys
;

30 } 
	tngx_hâp_gzù_c⁄f_t
;

34 
ngx_chaö_t
 *
	mö
;

35 
ngx_chaö_t
 *
	m‰ì
;

36 
ngx_chaö_t
 *
	mbusy
;

37 
ngx_chaö_t
 *
	mout
;

38 
ngx_chaö_t
 **
	mœ°_out
;

40 
ngx_chaö_t
 *
	mc›õd
;

41 
ngx_chaö_t
 *
	mc›y_buf
;

43 
ngx_buf_t
 *
	mö_buf
;

44 
ngx_buf_t
 *
	mout_buf
;

45 
ngx_öt_t
 
	mbufs
;

47 *
	m¥óŒoˇãd
;

48 *
	m‰ì_mem
;

49 
ngx_uöt_t
 
	mÆloˇãd
;

51 
	mwbôs
;

52 
	mmemÀvñ
;

54 
	mÊush
:4;

55 
	mªdo
:1;

56 
	md⁄e
:1;

57 
	mnomem
:1;

58 
	mgzhódî
:1;

59 
	mbuf„rög
:1;

61 
size_t
 
	mzö
;

62 
size_t
 
	mzout
;

64 
uöt32_t
 
	m¸c32
;

65 
z_°ªam
 
	mz°ªam
;

66 
ngx_hâp_ªque°_t
 *
	mªque°
;

67 } 
	tngx_hâp_gzù_˘x_t
;

70 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

72 
	sgzåaûî
 {

73 
uöt32_t
 
	m¸c32
;

74 
uöt32_t
 
	mzÀn
;

79 
	sgzåaûî
 {

80 
u_ch¨
 
	m¸c32
[4];

81 
u_ch¨
 
	mzÀn
[4];

87 
ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_gzù_˘x_t
 *
˘x
);

89 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
,

90 
ngx_chaö_t
 *
ö
);

91 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_gzù_˘x_t
 *
˘x
);

93 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_gzù_˘x_t
 *
˘x
);

95 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_gzù_˘x_t
 *
˘x
);

97 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_gzù_˘x_t
 *
˘x
);

99 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_gzù_˘x_t
 *
˘x
);

101 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_gzù_˘x_t
 *
˘x
);

104 *
ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

105 
u_öt
 
size
);

106 
ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
);

107 
ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

108 
ngx_hâp_gzù_˘x_t
 *
˘x
);

110 
ngx_öt_t
 
ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

111 
ngx_öt_t
 
ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

114 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

115 *
ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

116 *
ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

117 *
∑ª¡
, *
chûd
);

118 *
ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

119 *
ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

122 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_gzù_comp_Àvñ_bounds
 = {

123 
ngx_c⁄f_check_num_bounds
, 1, 9

126 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_wödow_p
 = 
ngx_hâp_gzù_wödow
;

127 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_hash_p
 = 
ngx_hâp_gzù_hash
;

130 
ngx_comm™d_t
 
	gngx_hâp_gzù_fûãr_comm™ds
[] = {

132 { 
ngx_°rög
("gzip"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


134 |
NGX_CONF_FLAG
,

135 
ngx_c⁄f_£t_Êag_¶Ÿ
,

136 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
íabÀ
),

138 
NULL
 },

140 { 
ngx_°rög
("gzip_buffers"),

141 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

142 
ngx_c⁄f_£t_bufs_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
bufs
),

145 
NULL
 },

147 { 
ngx_°rög
("gzip_types"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

149 
ngx_hâp_ty≥s_¶Ÿ
,

150 
NGX_HTTP_LOC_CONF_OFFSET
,

151 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
ty≥s_keys
),

152 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

154 { 
ngx_°rög
("gzip_comp_level"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

156 
ngx_c⁄f_£t_num_¶Ÿ
,

157 
NGX_HTTP_LOC_CONF_OFFSET
,

158 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
Àvñ
),

159 &
ngx_hâp_gzù_comp_Àvñ_bounds
 },

161 { 
ngx_°rög
("gzip_window"),

162 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

163 
ngx_c⁄f_£t_size_¶Ÿ
,

164 
NGX_HTTP_LOC_CONF_OFFSET
,

165 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
wbôs
),

166 &
ngx_hâp_gzù_wödow_p
 },

168 { 
ngx_°rög
("gzip_hash"),

169 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

170 
ngx_c⁄f_£t_size_¶Ÿ
,

171 
NGX_HTTP_LOC_CONF_OFFSET
,

172 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
memÀvñ
),

173 &
ngx_hâp_gzù_hash_p
 },

175 { 
ngx_°rög
("postpone_gzipping"),

176 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

177 
ngx_c⁄f_£t_size_¶Ÿ
,

178 
NGX_HTTP_LOC_CONF_OFFSET
,

179 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
po°p⁄e_gzùpög
),

180 
NULL
 },

182 { 
ngx_°rög
("gzip_no_buffer"),

183 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

184 
ngx_c⁄f_£t_Êag_¶Ÿ
,

185 
NGX_HTTP_LOC_CONF_OFFSET
,

186 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
no_buf„r
),

187 
NULL
 },

189 { 
ngx_°rög
("gzip_min_length"),

190 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

191 
ngx_c⁄f_£t_size_¶Ÿ
,

192 
NGX_HTTP_LOC_CONF_OFFSET
,

193 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
mö_Àngth
),

194 
NULL
 },

196 
ngx_nuŒ_comm™d


200 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ_˘x
 = {

201 
ngx_hâp_gzù_add_v¨übÀs
,

202 
ngx_hâp_gzù_fûãr_öô
,

204 
NULL
,

205 
NULL
,

207 
NULL
,

208 
NULL
,

210 
ngx_hâp_gzù_¸óã_c⁄f
,

211 
ngx_hâp_gzù_mîge_c⁄f


215 
ngx_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ
 = {

216 
NGX_MODULE_V1
,

217 &
ngx_hâp_gzù_fûãr_moduÀ_˘x
,

218 
ngx_hâp_gzù_fûãr_comm™ds
,

219 
NGX_HTTP_MODULE
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NULL
,

227 
NGX_MODULE_V1_PADDING


231 
ngx_°r_t
 
	gngx_hâp_gzù_øtio
 = 
ngx_°rög
("gzip_ratio");

233 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

234 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

237 
ngx_öt_t


238 
	$ngx_hâp_gzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

240 
ngx_èbÀ_ñt_t
 *
h
;

241 
ngx_hâp_gzù_˘x_t
 *
˘x
;

242 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

244 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

246 i‡(!
c⁄f
->
íabÀ


247 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


248 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_FORBIDDEN


249 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_FOUND
)

250 || (
r
->
hódîs_out
.
c⁄ã¡_ícodög


251 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

252 || (
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 != -1

253 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < 
c⁄f
->
mö_Àngth
)

254 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL


255 || 
r
->
hódî_⁄ly
)

257  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

260 
r
->
gzù_v¨y
 = 1;

262 #i‡(
NGX_HTTP_DEGRADATION
)

264 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

266 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

268 i‡(
˛cf
->
gzù_dißbÀ_degød©i⁄
 && 
	`ngx_hâp_degøded
(
r
)) {

269  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

274 i‡(!
r
->
gzù_ã°ed
) {

275 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë!
NGX_OK
) {

276  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

279 } i‡(!
r
->
gzù_ok
) {

280  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

283 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gzù_˘x_t
));

284 i‡(
˘x
 =
NULL
) {

285  
NGX_ERROR
;

288 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gzù_fûãr_moduÀ
);

290 
˘x
->
ªque°
 = 
r
;

291 
˘x
->
buf„rög
 = (
c⁄f
->
po°p⁄e_gzùpög
 != 0);

293 
	`ngx_hâp_gzù_fûãr_mem‹y
(
r
, 
˘x
);

295 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

296 i‡(
h
 =
NULL
) {

297  
NGX_ERROR
;

300 
h
->
hash
 = 1;

301 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

302 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

303 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

305 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

307 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

308 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

309 
	`ngx_hâp_wók_ëag
(
r
);

311  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

312 
	}
}

315 
ngx_öt_t


316 
	$ngx_hâp_gzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

318 
rc
;

319 
ngx_uöt_t
 
Êush
;

320 
ngx_chaö_t
 *
˛
;

321 
ngx_hâp_gzù_˘x_t
 *
˘x
;

323 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

325 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
 || 
r
->
hódî_⁄ly
) {

326  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

329 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

332 i‡(
˘x
->
buf„rög
) {

343 i‡(
ö
) {

344 
	`ngx_hâp_gzù_fûãr_buf„r
(
˘x
, 
ö
)) {

346 
NGX_OK
:

347  
NGX_OK
;

349 
NGX_DONE
:

350 
ö
 = 
NULL
;

354 
Áûed
;

358 
˘x
->
buf„rög
 = 0;

362 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

363 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

364 
Áûed
;

368 i‡(
ö
) {

369 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

370 
Áûed
;

373 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

376 i‡(
˘x
->
nomem
) {

380 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

381 
Áûed
;

384 
˛
 = 
NULL
;

386 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

387 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

388 
˘x
->
nomem
 = 0;

389 
Êush
 = 0;

392 
Êush
 = 
˘x
->
busy
 ? 1 : 0;

403 
rc
 = 
	`ngx_hâp_gzù_fûãr_add_d©a
(
r
, 
˘x
);

405 i‡(
rc
 =
NGX_DECLINED
) {

409 i‡(
rc
 =
NGX_AGAIN
) {

416 
rc
 = 
	`ngx_hâp_gzù_fûãr_gë_buf
(
r
, 
˘x
);

418 i‡(
rc
 =
NGX_DECLINED
) {

422 i‡(
rc
 =
NGX_ERROR
) {

423 
Áûed
;

427 
rc
 = 
	`ngx_hâp_gzù_fûãr_deÊ©e
(
r
, 
˘x
);

429 i‡(
rc
 =
NGX_OK
) {

433 i‡(
rc
 =
NGX_ERROR
) {

434 
Áûed
;

440 i‡(
˘x
->
out
 =
NULL
 && !
Êush
) {

441 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

443  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

446 i‡(!
˘x
->
gzhódî
) {

447 i‡(
	`ngx_hâp_gzù_fûãr_gzhódî
(
r
, 
˘x
Ë!
NGX_OK
) {

448 
Áûed
;

452 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

454 i‡(
rc
 =
NGX_ERROR
) {

455 
Áûed
;

458 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

460 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

461 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

462 
˘x
->
œ°_out
 = &˘x->
out
;

464 
˘x
->
nomem
 = 0;

465 
Êush
 = 0;

467 i‡(
˘x
->
d⁄e
) {

468  
rc
;

474 
Áûed
:

476 
˘x
->
d⁄e
 = 1;

478 i‡(
˘x
->
¥óŒoˇãd
) {

479 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

481 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

484 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

486  
NGX_ERROR
;

487 
	}
}

491 
	$ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

493 
wbôs
, 
memÀvñ
;

494 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

496 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

498 
wbôs
 = 
c⁄f
->wbits;

499 
memÀvñ
 = 
c⁄f
->memlevel;

501 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 > 0) {

505 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < ((1 << (
wbôs
 - 1)) - 262)) {

506 
wbôs
--;

507 
memÀvñ
--;

510 i‡(
memÀvñ
 < 1) {

511 
memÀvñ
 = 1;

515 
˘x
->
wbôs
 = wbits;

516 
˘x
->
memÀvñ
 = memlevel;

530 
˘x
->
Æloˇãd
 = 8192 + (1 << (
wbôs
 + 2)Ë+ (1 << (
memÀvñ
 + 9));

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

537 
size_t
 
size
, 
buf„ªd
;

538 
ngx_buf_t
 *
b
, *
buf
;

539 
ngx_chaö_t
 *
˛
, **
Œ
;

540 
ngx_hâp_ªque°_t
 *
r
;

541 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

543 
r
 = 
˘x
->
ªque°
;

545 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

547 
buf„ªd
 = 0;

548 
Œ
 = &
˘x
->
ö
;

550 
˛
 = 
˘x
->
ö
; cl; c»˛->
√xt
) {

551 
buf„ªd
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

552 
Œ
 = &
˛
->
√xt
;

555 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

557 
ö
) {

558 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

559 i‡(
˛
 =
NULL
) {

560  
NGX_ERROR
;

563 
b
 = 
ö
->
buf
;

565 
size
 = 
b
->
œ°
 - b->
pos
;

566 
buf„ªd
 +
size
;

568 i‡(
b
->
Êush
 || b->
œ°_buf
 || 
buf„ªd
 > 
c⁄f
->
po°p⁄e_gzùpög
) {

569 
˘x
->
buf„rög
 = 0;

572 i‡(
˘x
->
buf„rög
 && 
size
) {

574 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

575 i‡(
buf
 =
NULL
) {

576  
NGX_ERROR
;

579 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->
pos
, 
b
->pos, 
size
);

580 
b
->
pos
 = b->
œ°
;

582 
buf
->
œ°_buf
 = 
b
->last_buf;

583 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

585 
˛
->
buf
 = buf;

588 
˛
->
buf
 = 
b
;

591 *
Œ
 = 
˛
;

592 
Œ
 = &
˛
->
√xt
;

593 
ö
 = in->
√xt
;

596 *
Œ
 = 
NULL
;

598  
˘x
->
buf„rög
 ? 
NGX_OK
 : 
NGX_DONE
;

599 
	}
}

602 
ngx_öt_t


603 
	$ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

604 
ngx_hâp_gzù_˘x_t
 *
˘x
)

606 
rc
;

607 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

609 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

611 
˘x
->
¥óŒoˇãd
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Æloˇãd
);

612 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

613  
NGX_ERROR
;

616 
˘x
->
‰ì_mem
 = ctx->
¥óŒoˇãd
;

618 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gzù_fûãr_Æloc
;

619 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gzù_fûãr_‰ì
;

620 
˘x
->
z°ªam
.
›aque
 = ctx;

622 
rc
 = 
	`deÊ©eInô2
(&
˘x
->
z°ªam
, (Ë
c⁄f
->
Àvñ
, 
Z_DEFLATED
,

623 - 
˘x
->
wbôs
, ctx->
memÀvñ
, 
Z_DEFAULT_STRATEGY
);

625 i‡(
rc
 !
Z_OK
) {

626 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

627 "deÊ©eInô2(ËÁûed: %d", 
rc
);

628  
NGX_ERROR
;

631 
˘x
->
œ°_out
 = &˘x->
out
;

632 
˘x
->
¸c32
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

633 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

635  
NGX_OK
;

636 
	}
}

639 
ngx_öt_t


640 
	$ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

642 
ngx_buf_t
 *
b
;

643 
ngx_chaö_t
 *
˛
;

644 
u_ch¨
 
gzhódî
[10] =

645 { 0x1f, 0x8b, 
Z_DEFLATED
, 0, 0, 0, 0, 0, 0, 3 };

647 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

648 i‡(
b
 =
NULL
) {

649  
NGX_ERROR
;

652 
b
->
mem‹y
 = 1;

653 
b
->
pos
 = 
gzhódî
;

654 
b
->
œ°
 = b->
pos
 + 10;

656 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

657 i‡(
˛
 =
NULL
) {

658  
NGX_ERROR
;

661 
˛
->
buf
 = 
b
;

662 
˛
->
√xt
 = 
˘x
->
out
;

663 
˘x
->
out
 = 
˛
;

665 
˘x
->
gzhódî
 = 1;

667  
NGX_OK
;

668 
	}
}

671 
ngx_öt_t


672 
	$ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

674 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

675  
NGX_OK
;

678 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

679 "gzù in: %p", 
˘x
->
ö
);

681 i‡(
˘x
->
ö
 =
NULL
) {

682  
NGX_DECLINED
;

685 i‡(
˘x
->
c›y_buf
) {

692 
˘x
->
c›y_buf
->
√xt
 = ctx->
c›õd
;

693 
˘x
->
c›õd
 = ctx->
c›y_buf
;

694 
˘x
->
c›y_buf
 = 
NULL
;

697 
˘x
->
ö_buf
 = ctx->
ö
->
buf
;

699 i‡(
˘x
->
ö_buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
) {

700 
˘x
->
c›y_buf
 = ctx->
ö
;

703 
˘x
->
ö
 = ctx->ö->
√xt
;

705 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

706 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

708 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

710 
˘x
->
ö_buf
,

711 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

713 i‡(
˘x
->
ö_buf
->
œ°_buf
) {

714 
˘x
->
Êush
 = 
Z_FINISH
;

716 } i‡(
˘x
->
ö_buf
->
Êush
) {

717 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

720 i‡(
˘x
->
z°ªam
.
avaû_ö
) {

722 
˘x
->
¸c32
 = 
	`¸c32
(˘x->¸c32, ctx->
z°ªam
.
√xt_ö
,

723 
˘x
->
z°ªam
.
avaû_ö
);

725 } i‡(
˘x
->
Êush
 =
Z_NO_FLUSH
) {

726  
NGX_AGAIN
;

729  
NGX_OK
;

730 
	}
}

733 
ngx_öt_t


734 
	$ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

736 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

738 i‡(
˘x
->
z°ªam
.
avaû_out
) {

739  
NGX_OK
;

742 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

744 i‡(
˘x
->
‰ì
) {

745 
˘x
->
out_buf
 = ctx->
‰ì
->
buf
;

746 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

748 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

750 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

751 i‡(
˘x
->
out_buf
 =
NULL
) {

752  
NGX_ERROR
;

755 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

756 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

757 
˘x
->
bufs
++;

760 
˘x
->
nomem
 = 1;

761  
NGX_DECLINED
;

764 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

765 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

767  
NGX_OK
;

768 
	}
}

771 
ngx_öt_t


772 
	$ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

774 
rc
;

775 
ngx_buf_t
 *
b
;

776 
ngx_chaö_t
 *
˛
;

777 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

779 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

781 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

782 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

783 
˘x
->
Êush
, ctx->
ªdo
);

785 
rc
 = 
	`deÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

787 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
 &&Ñ¯!
Z_BUF_ERROR
) {

788 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

789 "deÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

790  
NGX_ERROR
;

793 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

795 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

796 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

797 
rc
);

799 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

801 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

803 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

804 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

806 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

807 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

811 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

813 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

817 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

818 i‡(
˛
 =
NULL
) {

819  
NGX_ERROR
;

822 
˛
->
buf
 = 
˘x
->
out_buf
;

823 
˛
->
√xt
 = 
NULL
;

824 *
˘x
->
œ°_out
 = 
˛
;

825 
˘x
->
œ°_out
 = &
˛
->
√xt
;

827 
˘x
->
ªdo
 = 1;

829  
NGX_AGAIN
;

832 
˘x
->
ªdo
 = 0;

834 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

836 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

838 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

839 i‡(
˛
 =
NULL
) {

840  
NGX_ERROR
;

843 
b
 = 
˘x
->
out_buf
;

845 i‡(
	`ngx_buf_size
(
b
) == 0) {

847 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

848 i‡(
b
 =
NULL
) {

849  
NGX_ERROR
;

853 
˘x
->
z°ªam
.
avaû_out
 = 0;

856 
b
->
Êush
 = 1;

858 
˛
->
buf
 = 
b
;

859 
˛
->
√xt
 = 
NULL
;

860 *
˘x
->
œ°_out
 = 
˛
;

861 
˘x
->
œ°_out
 = &
˛
->
√xt
;

863 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_GZIP_BUFFERED
;

865  
NGX_OK
;

868 i‡(
rc
 =
Z_STREAM_END
) {

870 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

871  
NGX_ERROR
;

874  
NGX_OK
;

877 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

879 i‡(
c⁄f
->
no_buf„r
 && 
˘x
->
ö
 =
NULL
) {

881 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

882 i‡(
˛
 =
NULL
) {

883  
NGX_ERROR
;

886 
˛
->
buf
 = 
˘x
->
out_buf
;

887 
˛
->
√xt
 = 
NULL
;

888 *
˘x
->
œ°_out
 = 
˛
;

889 
˘x
->
œ°_out
 = &
˛
->
√xt
;

891  
NGX_OK
;

894  
NGX_AGAIN
;

895 
	}
}

898 
ngx_öt_t


899 
	$ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

900 
ngx_hâp_gzù_˘x_t
 *
˘x
)

902 
rc
;

903 
ngx_buf_t
 *
b
;

904 
ngx_chaö_t
 *
˛
;

905 
gzåaûî
 *
åaûî
;

907 
˘x
->
zö
 = ctx->
z°ªam
.
tŸÆ_ö
;

908 
˘x
->
zout
 = 10 + ctx->
z°ªam
.
tŸÆ_out
 + 8;

910 
rc
 = 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

912 i‡(
rc
 !
Z_OK
) {

913 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

914 "deÊ©eEnd(ËÁûed: %d", 
rc
);

915  
NGX_ERROR
;

918 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

920 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

921 i‡(
˛
 =
NULL
) {

922  
NGX_ERROR
;

925 
˛
->
buf
 = 
˘x
->
out_buf
;

926 
˛
->
√xt
 = 
NULL
;

927 *
˘x
->
œ°_out
 = 
˛
;

928 
˘x
->
œ°_out
 = &
˛
->
√xt
;

930 i‡(
˘x
->
z°ªam
.
avaû_out
 >= 8) {

931 
åaûî
 = (
gzåaûî
 *Ë
˘x
->
out_buf
->
œ°
;

932 
˘x
->
out_buf
->
œ°
 += 8;

933 
˘x
->
out_buf
->
œ°_buf
 = 1;

936 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 8);

937 i‡(
b
 =
NULL
) {

938  
NGX_ERROR
;

941 
b
->
œ°_buf
 = 1;

943 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

944 i‡(
˛
 =
NULL
) {

945  
NGX_ERROR
;

948 
˛
->
buf
 = 
b
;

949 
˛
->
√xt
 = 
NULL
;

950 *
˘x
->
œ°_out
 = 
˛
;

951 
˘x
->
œ°_out
 = &
˛
->
√xt
;

952 
åaûî
 = (
gzåaûî
 *Ë
b
->
pos
;

953 
b
->
œ°
 += 8;

956 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

958 
åaûî
->
¸c32
 = 
˘x
->crc32;

959 
åaûî
->
zÀn
 = 
˘x
->
zö
;

963 
åaûî
->
¸c32
[0] = (
u_ch¨
Ë(
˘x
->crc32 & 0xff);

964 
åaûî
->
¸c32
[1] = (
u_ch¨
Ë((
˘x
->crc32 >> 8) & 0xff);

965 
åaûî
->
¸c32
[2] = (
u_ch¨
Ë((
˘x
->crc32 >> 16) & 0xff);

966 
åaûî
->
¸c32
[3] = (
u_ch¨
Ë((
˘x
->crc32 >> 24) & 0xff);

968 
åaûî
->
zÀn
[0] = (
u_ch¨
Ë(
˘x
->
zö
 & 0xff);

969 
åaûî
->
zÀn
[1] = (
u_ch¨
Ë((
˘x
->
zö
 >> 8) & 0xff);

970 
åaûî
->
zÀn
[2] = (
u_ch¨
Ë((
˘x
->
zö
 >> 16) & 0xff);

971 
åaûî
->
zÀn
[3] = (
u_ch¨
Ë((
˘x
->
zö
 >> 24) & 0xff);

975 
˘x
->
z°ªam
.
avaû_ö
 = 0;

976 
˘x
->
z°ªam
.
avaû_out
 = 0;

978 
˘x
->
d⁄e
 = 1;

980 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_GZIP_BUFFERED
;

982  
NGX_OK
;

983 
	}
}

987 
	$ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

989 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

991 *
p
;

992 
ngx_uöt_t
 
Æloc
;

994 
Æloc
 = 
ôems
 * 
size
;

996 i‡(
Æloc
 % 512 != 0 &&álloc < 8192) {

1003 
Æloc
 = 8192;

1006 i‡(
Æloc
 <
˘x
->
Æloˇãd
) {

1007 
p
 = 
˘x
->
‰ì_mem
;

1008 
˘x
->
‰ì_mem
 +
Æloc
;

1009 
˘x
->
Æloˇãd
 -
Æloc
;

1011 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1013 
ôems
, 
size
, 
Æloc
, 
p
);

1015  
p
;

1018 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1020 
ôems
 * 
size
, 
˘x
->
Æloˇãd
);

1022 
p
 = 
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

1024  
p
;

1025 
	}
}

1029 
	$ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
)

1032 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

1034 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1035 "gzù fªe: %p", 
addªss
);

1037 
	}
}

1041 
	$ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

1042 
ngx_hâp_gzù_˘x_t
 *
˘x
)

1044 
ngx_chaö_t
 *
˛
;

1046 
˛
 = 
˘x
->
c›õd
; cl; c»˛->
√xt
) {

1047 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˛
->
buf
->
°¨t
);

1050 
˘x
->
c›õd
 = 
NULL
;

1051 
	}
}

1054 
ngx_öt_t


1055 
	$ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

1057 
ngx_hâp_v¨übÀ_t
 *
v¨
;

1059 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_gzù_øtio
, 
NGX_HTTP_VAR_NOHASH
);

1060 i‡(
v¨
 =
NULL
) {

1061  
NGX_ERROR
;

1064 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_gzù_øtio_v¨übÀ
;

1066  
NGX_OK
;

1067 
	}
}

1070 
ngx_öt_t


1071 
	$ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1072 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1074 
ngx_uöt_t
 
zöt
, 
z‰ac
;

1075 
ngx_hâp_gzù_˘x_t
 *
˘x
;

1077 
v
->
vÆid
 = 1;

1078 
v
->
no_ˇchóbÀ
 = 0;

1079 
v
->
nŸ_found
 = 0;

1081 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

1083 i‡(
˘x
 =
NULL
 || ctx->
zout
 == 0) {

1084 
v
->
nŸ_found
 = 1;

1085  
NGX_OK
;

1088 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
 + 3);

1089 i‡(
v
->
d©a
 =
NULL
) {

1090  
NGX_ERROR
;

1093 
zöt
 = (
ngx_uöt_t
Ë(
˘x
->
zö
 / ctx->
zout
);

1094 
z‰ac
 = (
ngx_uöt_t
Ë((
˘x
->
zö
 * 100 / ctx->
zout
) % 100);

1096 i‡((
˘x
->
zö
 * 1000 / ctx->
zout
) % 10 > 4) {

1100 
z‰ac
++;

1102 i‡(
z‰ac
 > 99) {

1103 
zöt
++;

1104 
z‰ac
 = 0;

1108 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui.%02ui", 
zöt
, 
z‰ac
) - v->data;

1110  
NGX_OK
;

1111 
	}
}

1115 
	$ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1117 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

1119 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_c⁄f_t
));

1120 i‡(
c⁄f
 =
NULL
) {

1121  
NULL
;

1132 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

1133 
c⁄f
->
no_buf„r
 = 
NGX_CONF_UNSET
;

1135 
c⁄f
->
po°p⁄e_gzùpög
 = 
NGX_CONF_UNSET_SIZE
;

1136 
c⁄f
->
Àvñ
 = 
NGX_CONF_UNSET
;

1137 
c⁄f
->
wbôs
 = 
NGX_CONF_UNSET_SIZE
;

1138 
c⁄f
->
memÀvñ
 = 
NGX_CONF_UNSET_SIZE
;

1139 
c⁄f
->
mö_Àngth
 = 
NGX_CONF_UNSET
;

1141  
c⁄f
;

1142 
	}
}

1146 
	$ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1148 
ngx_hâp_gzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1149 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

1151 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1152 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_buf„r
, 
¥ev
->no_buffer, 0);

1154 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

1155 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

1157 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_gzùpög
, 
¥ev
->postpone_gzipping,

1159 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
Àvñ
, 
¥ev
->level, 1);

1160 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
wbôs
, 
¥ev
->wbôs, 
MAX_WBITS
);

1161 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
memÀvñ
, 
¥ev
->memlevel,

1162 
MAX_MEM_LEVEL
 - 1);

1163 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mö_Àngth
, 
¥ev
->min_length, 20);

1165 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1166 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1167 
ngx_hâp_html_deÁu…_ty≥s
)

1168 !
NGX_OK
)

1170  
NGX_CONF_ERROR
;

1173  
NGX_CONF_OK
;

1174 
	}
}

1177 
ngx_öt_t


1178 
	$ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1180 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1181 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gzù_hódî_fûãr
;

1183 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1184 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gzù_body_fûãr
;

1186  
NGX_OK
;

1187 
	}
}

1191 
	$ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1193 
size_t
 *
≈
 = 
d©a
;

1195 
size_t
 
wbôs
, 
wsize
;

1197 
wbôs
 = 15;

1199 
wsize
 = 32 * 1024; wsize > 256; wsize >>= 1) {

1201 i‡(
wsize
 =*
≈
) {

1202 *
≈
 = 
wbôs
;

1204  
NGX_CONF_OK
;

1207 
wbôs
--;

1211 
	}
}

1215 
	$ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1217 
size_t
 *
≈
 = 
d©a
;

1219 
size_t
 
memÀvñ
, 
hsize
;

1221 
memÀvñ
 = 9;

1223 
hsize
 = 128 * 1024; hsize > 256; hsize >>= 1) {

1225 i‡(
hsize
 =*
≈
) {

1226 *
≈
 = 
memÀvñ
;

1228  
NGX_CONF_OK
;

1231 
memÀvñ
--;

1235 
	}
}

	@src/http/modules/ngx_http_gzip_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_GZIP_STATIC_OFF
 0

	)

14 
	#NGX_HTTP_GZIP_STATIC_ON
 1

	)

15 
	#NGX_HTTP_GZIP_STATIC_ALWAYS
 2

	)

19 
ngx_uöt_t
 
	míabÀ
;

20 } 
	tngx_hâp_gzù_°©ic_c⁄f_t
;

23 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

24 *
ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

26 *
chûd
);

27 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

30 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_°©ic
[] = {

31 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_STATIC_OFF
 },

32 { 
ngx_°rög
("⁄"), 
NGX_HTTP_GZIP_STATIC_ON
 },

33 { 
ngx_°rög
("Æways"), 
NGX_HTTP_GZIP_STATIC_ALWAYS
 },

34 { 
ngx_nuŒ_°rög
, 0 }

38 
ngx_comm™d_t
 
	gngx_hâp_gzù_°©ic_comm™ds
[] = {

40 { 
ngx_°rög
("gzip_static"),

41 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

42 
ngx_c⁄f_£t_íum_¶Ÿ
,

43 
NGX_HTTP_LOC_CONF_OFFSET
,

44 
off£tof
(
ngx_hâp_gzù_°©ic_c⁄f_t
, 
íabÀ
),

45 &
ngx_hâp_gzù_°©ic
 },

47 
ngx_nuŒ_comm™d


51 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ_˘x
 = {

52 
NULL
,

53 
ngx_hâp_gzù_°©ic_öô
,

55 
NULL
,

56 
NULL
,

58 
NULL
,

59 
NULL
,

61 
ngx_hâp_gzù_°©ic_¸óã_c⁄f
,

62 
ngx_hâp_gzù_°©ic_mîge_c⁄f


66 
ngx_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ
 = {

67 
NGX_MODULE_V1
,

68 &
ngx_hâp_gzù_°©ic_moduÀ_˘x
,

69 
ngx_hâp_gzù_°©ic_comm™ds
,

70 
NGX_HTTP_MODULE
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NGX_MODULE_V1_PADDING


82 
ngx_öt_t


83 
	$ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

85 
u_ch¨
 *
p
;

86 
size_t
 
roŸ
;

87 
ngx_°r_t
 
∑th
;

88 
ngx_öt_t
 
rc
;

89 
ngx_uöt_t
 
Àvñ
;

90 
ngx_log_t
 *
log
;

91 
ngx_buf_t
 *
b
;

92 
ngx_chaö_t
 
out
;

93 
ngx_èbÀ_ñt_t
 *
h
;

94 
ngx_›í_fûe_öfo_t
 
of
;

95 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

96 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
gzcf
;

98 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

99  
NGX_DECLINED
;

102 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

103  
NGX_DECLINED
;

106 
gzcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_°©ic_moduÀ
);

108 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_OFF
) {

109  
NGX_DECLINED
;

112 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_ON
) {

113 
rc
 = 
	`ngx_hâp_gzù_ok
(
r
);

117 
rc
 = 
NGX_OK
;

120 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

122 i‡(!
˛cf
->
gzù_v¨y
 && 
rc
 !
NGX_OK
) {

123  
NGX_DECLINED
;

126 
log
 = 
r
->
c⁄√˘i⁄
->log;

128 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, (".gz") - 1);

129 i‡(
p
 =
NULL
) {

130  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

133 *
p
++ = '.';

134 *
p
++ = 'g';

135 *
p
++ = 'z';

136 *
p
 = '\0';

138 
∑th
.
Àn
 = 
p
 -Ö©h.
d©a
;

140 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

141 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

143 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

145 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

146 
of
.
dúe˘io
 = 
˛cf
->directio;

147 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

148 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

149 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

150 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

152 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

153  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

156 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

157 !
NGX_OK
)

159 
of
.
îr
) {

162  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

164 
NGX_ENOENT
:

165 
NGX_ENOTDIR
:

166 
NGX_ENAMETOOLONG
:

168  
NGX_DECLINED
;

170 
NGX_EACCES
:

171 #i‡(
NGX_HAVE_OPENAT
)

172 
NGX_EMLINK
:

173 
NGX_ELOOP
:

176 
Àvñ
 = 
NGX_LOG_ERR
;

181 
Àvñ
 = 
NGX_LOG_CRIT
;

185 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

186 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

188  
NGX_DECLINED
;

191 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_ON
) {

192 
r
->
gzù_v¨y
 = 1;

194 i‡(
rc
 !
NGX_OK
) {

195  
NGX_DECLINED
;

199 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

201 i‡(
of
.
is_dú
) {

202 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

203  
NGX_DECLINED
;

206 #i‡!(
NGX_WIN32
)

208 i‡(!
of
.
is_fûe
) {

209 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

210 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

212  
NGX_HTTP_NOT_FOUND
;

217 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

219 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

221 i‡(
rc
 !
NGX_OK
) {

222  
rc
;

225 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

227 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

228 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

229 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

231 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

232  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

235 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

236  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

239 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

240 i‡(
h
 =
NULL
) {

241  
NGX_ERROR
;

244 
h
->
hash
 = 1;

245 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

246 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

247 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

251 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

252 i‡(
b
 =
NULL
) {

253  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

256 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

257 i‡(
b
->
fûe
 =
NULL
) {

258  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

261 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

263 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

264  
rc
;

267 
b
->
fûe_pos
 = 0;

268 
b
->
fûe_œ°
 = 
of
.
size
;

270 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

271 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

272 
b
->
œ°_ö_chaö
 = 1;

274 
b
->
fûe
->
fd
 = 
of
.fd;

275 
b
->
fûe
->
«me
 = 
∑th
;

276 
b
->
fûe
->
log
 =Üog;

277 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

279 
out
.
buf
 = 
b
;

280 
out
.
√xt
 = 
NULL
;

282  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

283 
	}
}

287 
	$ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

289 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
;

291 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_°©ic_c⁄f_t
));

292 i‡(
c⁄f
 =
NULL
) {

293  
NULL
;

296 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

298  
c⁄f
;

299 
	}
}

303 
	$ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

305 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

306 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
 = 
chûd
;

308 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

309 
NGX_HTTP_GZIP_STATIC_OFF
);

311  
NGX_CONF_OK
;

312 
	}
}

315 
ngx_öt_t


316 
	$ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

318 
ngx_hâp_h™dÀr_±
 *
h
;

319 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

321 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

323 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

324 i‡(
h
 =
NULL
) {

325  
NGX_ERROR
;

328 *
h
 = 
ngx_hâp_gzù_°©ic_h™dÀr
;

330  
NGX_OK
;

331 
	}
}

	@src/http/modules/ngx_http_headers_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_hódî_vÆ_s
 
	tngx_hâp_hódî_vÆ_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_£t_hódî_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_hâp_hódî_vÆ_t
 *
	thv
, 
	tngx_°r_t
 *
	tvÆue
);

20 
ngx_°r_t
 
«me
;

21 
ngx_uöt_t
 
off£t
;

22 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

23 } 
	tngx_hâp_£t_hódî_t
;

26 
	sngx_hâp_hódî_vÆ_s
 {

27 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

28 
ngx_°r_t
 
key
;

29 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

30 
ngx_uöt_t
 
off£t
;

31 
ngx_uöt_t
 
Æways
;

36 
NGX_HTTP_EXPIRES_OFF
,

37 
NGX_HTTP_EXPIRES_EPOCH
,

38 
NGX_HTTP_EXPIRES_MAX
,

39 
NGX_HTTP_EXPIRES_ACCESS
,

40 
NGX_HTTP_EXPIRES_MODIFIED
,

41 
NGX_HTTP_EXPIRES_DAILY
,

42 
NGX_HTTP_EXPIRES_UNSET


43 } 
	tngx_hâp_expúes_t
;

47 
ngx_hâp_expúes_t
 
expúes
;

48 
time_t
 
expúes_time
;

49 
ngx_hâp_com∂ex_vÆue_t
 *
expúes_vÆue
;

50 
ngx_¨øy_t
 *
hódîs
;

51 } 
	tngx_hâp_hódîs_c⁄f_t
;

54 
ngx_öt_t
 
	`ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
);

56 
ngx_öt_t
 
	`ngx_hâp_∑r£_expúes
(
ngx_°r_t
 *
vÆue
,

57 
ngx_hâp_expúes_t
 *
expúes
, 
time_t
 *
expúes_time
, **
îr
);

58 
ngx_öt_t
 
	`ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

60 
ngx_öt_t
 
	`ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

62 
ngx_öt_t
 
	`ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

64 
ngx_öt_t
 
	`ngx_hâp_£t_ª•⁄£_hódî
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

67 *
	`ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

68 *
	`ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

69 *
∑ª¡
, *
chûd
);

70 
ngx_öt_t
 
	`ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

71 *
	`ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

73 *
	`ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

74 *
c⁄f
);

77 
ngx_hâp_£t_hódî_t
 
ngx_hâp_£t_hódîs
[] = {

79 { 
	`ngx_°rög
("Cache-C⁄åﬁ"), 0, 
ngx_hâp_add_ˇche_c⁄åﬁ
 },

81 { 
	`ngx_°rög
("Last-Modified"),

82 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
),

83 
ngx_hâp_£t_œ°_modifõd
 },

85 { 
	`ngx_°rög
("ETag"),

86 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
),

87 
ngx_hâp_£t_ª•⁄£_hódî
 },

89 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

90 
	}
};

93 
ngx_comm™d_t
 
	gngx_hâp_hódîs_fûãr_comm™ds
[] = {

95 { 
ngx_°rög
("expires"),

96 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


97 |
NGX_CONF_TAKE12
,

98 
ngx_hâp_hódîs_expúes
,

99 
NGX_HTTP_LOC_CONF_OFFSET
,

101 
NULL
},

103 { 
ngx_°rög
("add_header"),

104 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


105 |
NGX_CONF_TAKE23
,

106 
ngx_hâp_hódîs_add
,

107 
NGX_HTTP_LOC_CONF_OFFSET
,

109 
NULL
},

111 
ngx_nuŒ_comm™d


115 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ_˘x
 = {

116 
NULL
,

117 
ngx_hâp_hódîs_fûãr_öô
,

119 
NULL
,

120 
NULL
,

122 
NULL
,

123 
NULL
,

125 
ngx_hâp_hódîs_¸óã_c⁄f
,

126 
ngx_hâp_hódîs_mîge_c⁄f


130 
ngx_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ
 = {

131 
NGX_MODULE_V1
,

132 &
ngx_hâp_hódîs_fûãr_moduÀ_˘x
,

133 
ngx_hâp_hódîs_fûãr_comm™ds
,

134 
NGX_HTTP_MODULE
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NGX_MODULE_V1_PADDING


146 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

149 
ngx_öt_t


150 
	$ngx_hâp_hódîs_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

152 
ngx_°r_t
 
vÆue
;

153 
ngx_uöt_t
 
i
, 
ß„_°©us
;

154 
ngx_hâp_hódî_vÆ_t
 *
h
;

155 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

157 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_hódîs_fûãr_moduÀ
);

159 i‡((
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_OFF
 && c⁄f->
hódîs
 =
NULL
)

160 || 
r
 !r->
maö
)

162  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

165 
r
->
hódîs_out
.
°©us
) {

167 
NGX_HTTP_OK
:

168 
NGX_HTTP_CREATED
:

169 
NGX_HTTP_NO_CONTENT
:

170 
NGX_HTTP_PARTIAL_CONTENT
:

171 
NGX_HTTP_MOVED_PERMANENTLY
:

172 
NGX_HTTP_MOVED_TEMPORARILY
:

173 
NGX_HTTP_SEE_OTHER
:

174 
NGX_HTTP_NOT_MODIFIED
:

175 
NGX_HTTP_TEMPORARY_REDIRECT
:

176 
ß„_°©us
 = 1;

180 
ß„_°©us
 = 0;

184 i‡(
c⁄f
->
expúes
 !
NGX_HTTP_EXPIRES_OFF
 && 
ß„_°©us
) {

185 i‡(
	`ngx_hâp_£t_expúes
(
r
, 
c⁄f
Ë!
NGX_OK
) {

186  
NGX_ERROR
;

190 i‡(
c⁄f
->
hódîs
) {

191 
h
 = 
c⁄f
->
hódîs
->
ñts
;

192 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

194 i‡(!
ß„_°©us
 && !
h
[
i
].
Æways
) {

198 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
h
[
i
].
vÆue
, &vÆueË!
NGX_OK
) {

199  
NGX_ERROR
;

202 i‡(
h
[
i
].
	`h™dÀr
(
r
, &h[i], &
vÆue
Ë!
NGX_OK
) {

203  
NGX_ERROR
;

208  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

209 
	}
}

212 
ngx_öt_t


213 
	$ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
)

215 *
îr
;

216 
size_t
 
Àn
;

217 
time_t
 
now
, 
expúes_time
, 
max_age
;

218 
ngx_°r_t
 
vÆue
;

219 
ngx_öt_t
 
rc
;

220 
ngx_uöt_t
 
i
;

221 
ngx_èbÀ_ñt_t
 *
e
, *
cc
, **
c˝
;

222 
ngx_hâp_expúes_t
 
expúes
;

224 
expúes
 = 
c⁄f
->expires;

225 
expúes_time
 = 
c⁄f
->expires_time;

227 i‡(
c⁄f
->
expúes_vÆue
 !
NULL
) {

229 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
expúes_vÆue
, &
vÆue
Ë!
NGX_OK
) {

230  
NGX_ERROR
;

233 
rc
 = 
	`ngx_hâp_∑r£_expúes
(&
vÆue
, &
expúes
, &
expúes_time
, &
îr
);

235 i‡(
rc
 !
NGX_OK
) {

236  
NGX_OK
;

239 i‡(
expúes
 =
NGX_HTTP_EXPIRES_OFF
) {

240  
NGX_OK
;

244 
e
 = 
r
->
hódîs_out
.
expúes
;

246 i‡(
e
 =
NULL
) {

248 
e
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

249 i‡(
e
 =
NULL
) {

250  
NGX_ERROR
;

253 
r
->
hódîs_out
.
expúes
 = 
e
;

255 
e
->
hash
 = 1;

256 
	`ngx_°r_£t
(&
e
->
key
, "Expires");

259 
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT");

260 
e
->
vÆue
.
Àn
 =Üen - 1;

262 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

264 i‡(
c˝
 =
NULL
) {

266 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

267 1, (
ngx_èbÀ_ñt_t
 *))

268 !
NGX_OK
)

270  
NGX_ERROR
;

273 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

274 i‡(
c˝
 =
NULL
) {

275  
NGX_ERROR
;

278 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

279 i‡(
cc
 =
NULL
) {

280  
NGX_ERROR
;

283 
cc
->
hash
 = 1;

284 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

285 *
c˝
 = 
cc
;

288 
i
 = 1; i < 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
√…s
; i++) {

289 
c˝
[
i
]->
hash
 = 0;

292 
cc
 = 
c˝
[0];

295 i‡(
expúes
 =
NGX_HTTP_EXPIRES_EPOCH
) {

296 
e
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 01 Jan 1970 00:00:01 GMT";

297 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

298  
NGX_OK
;

301 i‡(
expúes
 =
NGX_HTTP_EXPIRES_MAX
) {

302 
e
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 31 Dec 2037 23:55:55 GMT";

304 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=315360000");

305  
NGX_OK
;

308 
e
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

309 i‡(
e
->
vÆue
.
d©a
 =
NULL
) {

310  
NGX_ERROR
;

313 i‡(
expúes_time
 =0 && 
expúes
 !
NGX_HTTP_EXPIRES_DAILY
) {

314 
	`ngx_mem˝y
(
e
->
vÆue
.
d©a
, 
ngx_ˇched_hâp_time
.data,

315 
ngx_ˇched_hâp_time
.
Àn
 + 1);

316 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=0");

317  
NGX_OK
;

320 
now
 = 
	`ngx_time
();

322 i‡(
expúes
 =
NGX_HTTP_EXPIRES_DAILY
) {

323 
expúes_time
 = 
	`ngx_√xt_time
(expires_time);

324 
max_age
 = 
expúes_time
 - 
now
;

326 } i‡(
expúes
 =
NGX_HTTP_EXPIRES_ACCESS


327 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

329 
max_age
 = 
expúes_time
;

330 
expúes_time
 +
now
;

333 
expúes_time
 +
r
->
hódîs_out
.
œ°_modifõd_time
;

334 
max_age
 = 
expúes_time
 - 
now
;

337 
	`ngx_hâp_time
(
e
->
vÆue
.
d©a
, 
expúes_time
);

339 i‡(
c⁄f
->
expúes_time
 < 0 || 
max_age
 < 0) {

340 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

341  
NGX_OK
;

344 
cc
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

345 ("max-age="Ë+ 
NGX_TIME_T_LEN
 + 1);

346 i‡(
cc
->
vÆue
.
d©a
 =
NULL
) {

347  
NGX_ERROR
;

350 
cc
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(cc->vÆue.
d©a
, "max-age=%T", 
max_age
)

351 - 
cc
->
vÆue
.
d©a
;

353  
NGX_OK
;

354 
	}
}

357 
ngx_öt_t


358 
	$ngx_hâp_∑r£_expúes
(
ngx_°r_t
 *
vÆue
, 
ngx_hâp_expúes_t
 *
expúes
,

359 
time_t
 *
expúes_time
, **
îr
)

361 
ngx_uöt_t
 
möus
;

363 i‡(*
expúes
 !
NGX_HTTP_EXPIRES_MODIFIED
) {

365 i‡(
vÆue
->
Àn
 =5 && 
	`ngx_°∫cmp
(vÆue->
d©a
, "epoch", 5) == 0) {

366 *
expúes
 = 
NGX_HTTP_EXPIRES_EPOCH
;

367  
NGX_OK
;

370 i‡(
vÆue
->
Àn
 =3 && 
	`ngx_°∫cmp
(vÆue->
d©a
, "max", 3) == 0) {

371 *
expúes
 = 
NGX_HTTP_EXPIRES_MAX
;

372  
NGX_OK
;

375 i‡(
vÆue
->
Àn
 =3 && 
	`ngx_°∫cmp
(vÆue->
d©a
, "off", 3) == 0) {

376 *
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

377  
NGX_OK
;

381 i‡(
vÆue
->
Àn
 && vÆue->
d©a
[0] == '@') {

382 
vÆue
->
d©a
++;

383 
vÆue
->
Àn
--;

384 
möus
 = 0;

386 i‡(*
expúes
 =
NGX_HTTP_EXPIRES_MODIFIED
) {

387 *
îr
 = "dailyÅime cannot be used with \"modified\"Öarameter";

388  
NGX_ERROR
;

391 *
expúes
 = 
NGX_HTTP_EXPIRES_DAILY
;

393 } i‡(
vÆue
->
Àn
 && vÆue->
d©a
[0] == '+') {

394 
vÆue
->
d©a
++;

395 
vÆue
->
Àn
--;

396 
möus
 = 0;

398 } i‡(
vÆue
->
Àn
 && vÆue->
d©a
[0] == '-') {

399 
vÆue
->
d©a
++;

400 
vÆue
->
Àn
--;

401 
möus
 = 1;

404 
möus
 = 0;

407 *
expúes_time
 = 
	`ngx_∑r£_time
(
vÆue
, 1);

409 i‡(*
expúes_time
 =(
time_t
Ë
NGX_ERROR
) {

410 *
îr
 = "invalid value";

411  
NGX_ERROR
;

414 i‡(*
expúes
 =
NGX_HTTP_EXPIRES_DAILY


415 && *
expúes_time
 > 24 * 60 * 60)

417 *
îr
 = "dailyÅime value must beÜessÅhan 24 hours";

418  
NGX_ERROR
;

421 i‡(
möus
) {

422 *
expúes_time
 = - *expires_time;

425  
NGX_OK
;

426 
	}
}

429 
ngx_öt_t


430 
	$ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

431 
ngx_°r_t
 *
vÆue
)

433 
ngx_èbÀ_ñt_t
 *
h
;

435 i‡(
vÆue
->
Àn
) {

436 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

437 i‡(
h
 =
NULL
) {

438  
NGX_ERROR
;

441 
h
->
hash
 = 1;

442 
h
->
key
 = 
hv
->key;

443 
h
->
vÆue
 = *value;

446  
NGX_OK
;

447 
	}
}

450 
ngx_öt_t


451 
	$ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

452 
ngx_°r_t
 *
vÆue
)

454 
ngx_èbÀ_ñt_t
 *
cc
, **
c˝
;

456 i‡(
vÆue
->
Àn
 == 0) {

457  
NGX_OK
;

460 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

462 i‡(
c˝
 =
NULL
) {

464 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

465 1, (
ngx_èbÀ_ñt_t
 *))

466 !
NGX_OK
)

468  
NGX_ERROR
;

472 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

473 i‡(
c˝
 =
NULL
) {

474  
NGX_ERROR
;

477 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

478 i‡(
cc
 =
NULL
) {

479  
NGX_ERROR
;

482 
cc
->
hash
 = 1;

483 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

484 
cc
->
vÆue
 = *value;

486 *
c˝
 = 
cc
;

488  
NGX_OK
;

489 
	}
}

492 
ngx_öt_t


493 
	$ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

494 
ngx_°r_t
 *
vÆue
)

496 i‡(
	`ngx_hâp_£t_ª•⁄£_hódî
(
r
, 
hv
, 
vÆue
Ë!
NGX_OK
) {

497  
NGX_ERROR
;

500 
r
->
hódîs_out
.
œ°_modifõd_time
 =

501 (
vÆue
->
Àn
Ë? 
	`ngx_hâp_∑r£_time
(vÆue->
d©a
, value->len) : -1;

503  
NGX_OK
;

504 
	}
}

507 
ngx_öt_t


508 
	$ngx_hâp_£t_ª•⁄£_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

509 
ngx_°r_t
 *
vÆue
)

511 
ngx_èbÀ_ñt_t
 *
h
, **
ﬁd
;

513 
ﬁd
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
hv
->
off£t
);

515 i‡(
vÆue
->
Àn
 == 0) {

516 i‡(*
ﬁd
) {

517 (*
ﬁd
)->
hash
 = 0;

518 *
ﬁd
 = 
NULL
;

521  
NGX_OK
;

524 i‡(*
ﬁd
) {

525 
h
 = *
ﬁd
;

528 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

529 i‡(
h
 =
NULL
) {

530  
NGX_ERROR
;

533 *
ﬁd
 = 
h
;

536 
h
->
hash
 = 1;

537 
h
->
key
 = 
hv
->key;

538 
h
->
vÆue
 = *value;

540  
NGX_OK
;

541 
	}
}

545 
	$ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

547 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

549 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_hódîs_c⁄f_t
));

550 i‡(
c⁄f
 =
NULL
) {

551  
NULL
;

562 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_UNSET
;

564  
c⁄f
;

565 
	}
}

569 
	$ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

571 
ngx_hâp_hódîs_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

572 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
 = 
chûd
;

574 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

575 
c⁄f
->
expúes
 = 
¥ev
->expires;

576 
c⁄f
->
expúes_time
 = 
¥ev
->expires_time;

577 
c⁄f
->
expúes_vÆue
 = 
¥ev
->expires_value;

579 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

580 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

584 i‡(
c⁄f
->
hódîs
 =
NULL
) {

585 
c⁄f
->
hódîs
 = 
¥ev
->headers;

588  
NGX_CONF_OK
;

589 
	}
}

592 
ngx_öt_t


593 
	$ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

595 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

596 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódîs_fûãr
;

598  
NGX_OK
;

599 
	}
}

603 
	$ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

605 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

607 *
îr
;

608 
ngx_°r_t
 *
vÆue
;

609 
ngx_öt_t
 
rc
;

610 
ngx_uöt_t
 
n
;

611 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

612 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

614 i‡(
hcf
->
expúes
 !
NGX_HTTP_EXPIRES_UNSET
) {

618 
vÆue
 = 
cf
->
¨gs
->
ñts
;

620 i‡(
cf
->
¨gs
->
√…s
 == 2) {

622 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_ACCESS
;

624 
n
 = 1;

628 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "modified") != 0) {

632 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MODIFIED
;

634 
n
 = 2;

637 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

639 
ccv
.
cf
 = cf;

640 
ccv
.
vÆue
 = &vÆue[
n
];

641 
ccv
.
com∂ex_vÆue
 = &
cv
;

643 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

644  
NGX_CONF_ERROR
;

647 i‡(
cv
.
Àngths
 !
NULL
) {

649 
hcf
->
expúes_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

650 (
ngx_hâp_com∂ex_vÆue_t
));

651 i‡(
hcf
->
expúes_vÆue
 =
NULL
) {

652  
NGX_CONF_ERROR
;

655 *
hcf
->
expúes_vÆue
 = 
cv
;

657  
NGX_CONF_OK
;

660 
rc
 = 
	`ngx_hâp_∑r£_expúes
(&
vÆue
[
n
], &
hcf
->
expúes
, &hcf->
expúes_time
,

661 &
îr
);

662 i‡(
rc
 !
NGX_OK
) {

663  
îr
;

666  
NGX_CONF_OK
;

667 
	}
}

671 
	$ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

673 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

675 
ngx_°r_t
 *
vÆue
;

676 
ngx_uöt_t
 
i
;

677 
ngx_hâp_hódî_vÆ_t
 *
hv
;

678 
ngx_hâp_£t_hódî_t
 *
£t
;

679 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

681 
vÆue
 = 
cf
->
¨gs
->
ñts
;

683 i‡(
hcf
->
hódîs
 =
NULL
) {

684 
hcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

685 (
ngx_hâp_hódî_vÆ_t
));

686 i‡(
hcf
->
hódîs
 =
NULL
) {

687  
NGX_CONF_ERROR
;

691 
hv
 = 
	`ngx_¨øy_push
(
hcf
->
hódîs
);

692 i‡(
hv
 =
NULL
) {

693  
NGX_CONF_ERROR
;

696 
hv
->
key
 = 
vÆue
[1];

697 
hv
->
h™dÀr
 = 
ngx_hâp_add_hódî
;

698 
hv
->
off£t
 = 0;

699 
hv
->
Æways
 = 0;

701 
£t
 = 
ngx_hâp_£t_hódîs
;

702 
i
 = 0; 
£t
[i].
«me
.
Àn
; i++) {

703 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, 
£t
[
i
].
«me
.data) != 0) {

707 
hv
->
off£t
 = 
£t
[
i
].offset;

708 
hv
->
h™dÀr
 = 
£t
[
i
].handler;

713 i‡(
vÆue
[2].
Àn
 == 0) {

714 
	`ngx_memzîo
(&
hv
->
vÆue
, (
ngx_hâp_com∂ex_vÆue_t
));

715  
NGX_CONF_OK
;

718 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

720 
ccv
.
cf
 = cf;

721 
ccv
.
vÆue
 = &value[2];

722 
ccv
.
com∂ex_vÆue
 = &
hv
->
vÆue
;

724 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

725  
NGX_CONF_ERROR
;

728 i‡(
cf
->
¨gs
->
√…s
 == 3) {

729  
NGX_CONF_OK
;

732 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "always") != 0) {

733 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

734 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

735  
NGX_CONF_ERROR
;

738 
hv
->
Æways
 = 1;

740  
NGX_CONF_OK
;

741 
	}
}

	@src/http/modules/ngx_http_image_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<gd.h
>

15 
	#NGX_HTTP_IMAGE_OFF
 0

	)

16 
	#NGX_HTTP_IMAGE_TEST
 1

	)

17 
	#NGX_HTTP_IMAGE_SIZE
 2

	)

18 
	#NGX_HTTP_IMAGE_RESIZE
 3

	)

19 
	#NGX_HTTP_IMAGE_CROP
 4

	)

20 
	#NGX_HTTP_IMAGE_ROTATE
 5

	)

23 
	#NGX_HTTP_IMAGE_START
 0

	)

24 
	#NGX_HTTP_IMAGE_READ
 1

	)

25 
	#NGX_HTTP_IMAGE_PROCESS
 2

	)

26 
	#NGX_HTTP_IMAGE_PASS
 3

	)

27 
	#NGX_HTTP_IMAGE_DONE
 4

	)

30 
	#NGX_HTTP_IMAGE_NONE
 0

	)

31 
	#NGX_HTTP_IMAGE_JPEG
 1

	)

32 
	#NGX_HTTP_IMAGE_GIF
 2

	)

33 
	#NGX_HTTP_IMAGE_PNG
 3

	)

36 
	#NGX_HTTP_IMAGE_BUFFERED
 0x08

	)

40 
ngx_uöt_t
 
	mfûãr
;

41 
ngx_uöt_t
 
	mwidth
;

42 
ngx_uöt_t
 
	mheight
;

43 
ngx_uöt_t
 
	m™gÀ
;

44 
ngx_uöt_t
 
	mj≥g_quÆôy
;

45 
ngx_uöt_t
 
	msh¨≥n
;

47 
ngx_Êag_t
 
	må™•¨ícy
;

48 
ngx_Êag_t
 
	möãæa˚
;

50 
ngx_hâp_com∂ex_vÆue_t
 *
	mwcv
;

51 
ngx_hâp_com∂ex_vÆue_t
 *
	mhcv
;

52 
ngx_hâp_com∂ex_vÆue_t
 *
	macv
;

53 
ngx_hâp_com∂ex_vÆue_t
 *
	mjqcv
;

54 
ngx_hâp_com∂ex_vÆue_t
 *
	mshcv
;

56 
size_t
 
	mbuf„r_size
;

57 } 
	tngx_hâp_image_fûãr_c⁄f_t
;

61 
u_ch¨
 *
	mimage
;

62 
u_ch¨
 *
	mœ°
;

64 
size_t
 
	mÀngth
;

66 
ngx_uöt_t
 
	mwidth
;

67 
ngx_uöt_t
 
	mheight
;

68 
ngx_uöt_t
 
	mmax_width
;

69 
ngx_uöt_t
 
	mmax_height
;

70 
ngx_uöt_t
 
	m™gÀ
;

72 
ngx_uöt_t
 
	mpha£
;

73 
ngx_uöt_t
 
	mty≥
;

74 
ngx_uöt_t
 
	mf‹˚
;

75 } 
	tngx_hâp_image_fûãr_˘x_t
;

78 
ngx_öt_t
 
ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

80 
ngx_uöt_t
 
ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

81 
ngx_öt_t
 
ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

82 
ngx_buf_t
 *
ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
);

83 
ngx_buf_t
 *
ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

85 
ngx_buf_t
 *
ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

87 
ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

88 
ngx_öt_t
 
ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

91 
ngx_buf_t
 *
ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

93 
gdImagePå
 
ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

95 
gdImagePå
 
ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
,

96 
cﬁ‹s
);

97 
u_ch¨
 *
ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
,

98 
gdImagePå
 
img
, *
size
);

99 
ngx_hâp_image_˛ónup
(*
d©a
);

100 
ngx_uöt_t
 
ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
);

102 
ngx_uöt_t
 
ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
);

105 *
ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

106 *
ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

107 *
chûd
);

108 *
ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

109 *
c⁄f
);

110 *
ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
,

111 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

112 *
ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

113 *
c⁄f
);

114 
ngx_öt_t
 
ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

117 
ngx_comm™d_t
 
	gngx_hâp_image_fûãr_comm™ds
[] = {

119 { 
ngx_°rög
("image_filter"),

120 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

121 
ngx_hâp_image_fûãr
,

122 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
NULL
 },

126 { 
ngx_°rög
("image_filter_jpeg_quality"),

127 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

128 
ngx_hâp_image_fûãr_j≥g_quÆôy
,

129 
NGX_HTTP_LOC_CONF_OFFSET
,

131 
NULL
 },

133 { 
ngx_°rög
("image_filter_sharpen"),

134 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

135 
ngx_hâp_image_fûãr_sh¨≥n
,

136 
NGX_HTTP_LOC_CONF_OFFSET
,

138 
NULL
 },

140 { 
ngx_°rög
("image_filter_transparency"),

141 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

142 
ngx_c⁄f_£t_Êag_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
å™•¨ícy
),

145 
NULL
 },

147 { 
ngx_°rög
("image_filter_interlace"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

149 
ngx_c⁄f_£t_Êag_¶Ÿ
,

150 
NGX_HTTP_LOC_CONF_OFFSET
,

151 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
öãæa˚
),

152 
NULL
 },

154 { 
ngx_°rög
("image_filter_buffer"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

156 
ngx_c⁄f_£t_size_¶Ÿ
,

157 
NGX_HTTP_LOC_CONF_OFFSET
,

158 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
buf„r_size
),

159 
NULL
 },

161 
ngx_nuŒ_comm™d


165 
ngx_hâp_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ_˘x
 = {

166 
NULL
,

167 
ngx_hâp_image_fûãr_öô
,

169 
NULL
,

170 
NULL
,

172 
NULL
,

173 
NULL
,

175 
ngx_hâp_image_fûãr_¸óã_c⁄f
,

176 
ngx_hâp_image_fûãr_mîge_c⁄f


180 
ngx_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ
 = {

181 
NGX_MODULE_V1
,

182 &
ngx_hâp_image_fûãr_moduÀ_˘x
,

183 
ngx_hâp_image_fûãr_comm™ds
,

184 
NGX_HTTP_MODULE
,

185 
NULL
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
NULL
,

192 
NGX_MODULE_V1_PADDING


196 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

197 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

200 
ngx_°r_t
 
	gngx_hâp_image_ty≥s
[] = {

201 
ngx_°rög
("image/jpeg"),

202 
ngx_°rög
("image/gif"),

203 
ngx_°rög
("image/png")

207 
ngx_öt_t


208 
	$ngx_hâp_image_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

210 
off_t
 
Àn
;

211 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

212 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

214 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

215  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

218 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

220 i‡(
˘x
) {

221 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_image_fûãr_moduÀ
);

222  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

225 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

227 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_OFF
) {

228  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

231 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


233 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

234 (
u_ch¨
 *) "multipart/x-mixed-replace",

238 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

241  
NGX_ERROR
;

244 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_image_fûãr_˘x_t
));

245 i‡(
˘x
 =
NULL
) {

246  
NGX_ERROR
;

249 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_image_fûãr_moduÀ
);

251 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

253 i‡(
Àn
 !-1 &&Üí > (
off_t
Ë
c⁄f
->
buf„r_size
) {

254 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

255 "imagêfûãr:ÅoÿbigÑe•⁄£: %O", 
Àn
);

257  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

260 i‡(
Àn
 == -1) {

261 
˘x
->
Àngth
 = 
c⁄f
->
buf„r_size
;

264 
˘x
->
Àngth
 = (
size_t
Ë
Àn
;

267 i‡(
r
->
hódîs_out
.
ª‰esh
) {

268 
r
->
hódîs_out
.
ª‰esh
->
hash
 = 0;

271 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

272 
r
->
Ælow_ønges
 = 0;

274  
NGX_OK
;

275 
	}
}

278 
ngx_öt_t


279 
	$ngx_hâp_image_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

281 
ngx_öt_t
 
rc
;

282 
ngx_°r_t
 *
˘
;

283 
ngx_chaö_t
 
out
;

284 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

285 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

287 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "image filter");

289 i‡(
ö
 =
NULL
) {

290  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

293 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

295 i‡(
˘x
 =
NULL
) {

296  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

299 
˘x
->
pha£
) {

301 
NGX_HTTP_IMAGE_START
:

303 
˘x
->
ty≥
 = 
	`ngx_hâp_image_ã°
(
r
, 
ö
);

305 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

307 i‡(
˘x
->
ty≥
 =
NGX_HTTP_IMAGE_NONE
) {

309 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

310 
out
.
buf
 = 
	`ngx_hâp_image_js⁄
(
r
, 
NULL
);

312 i‡(
out
.
buf
) {

313 
out
.
√xt
 = 
NULL
;

314 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_DONE
;

316  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

320  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

321 &
ngx_hâp_image_fûãr_moduÀ
,

322 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

327 
˘
 = &
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1];

328 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

329 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

330 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

332 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_TEST
) {

333 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

335  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, 
ö
);

338 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_READ
;

342 
NGX_HTTP_IMAGE_READ
:

344 
rc
 = 
	`ngx_hâp_image_ªad
(
r
, 
ö
);

346 i‡(
rc
 =
NGX_AGAIN
) {

347  
NGX_OK
;

350 i‡(
rc
 =
NGX_ERROR
) {

351  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

352 &
ngx_hâp_image_fûãr_moduÀ
,

353 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

358 
NGX_HTTP_IMAGE_PROCESS
:

360 
out
.
buf
 = 
	`ngx_hâp_image_¥o˚ss
(
r
);

362 i‡(
out
.
buf
 =
NULL
) {

363  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

364 &
ngx_hâp_image_fûãr_moduÀ
,

365 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

368 
out
.
√xt
 = 
NULL
;

369 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

371  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

373 
NGX_HTTP_IMAGE_PASS
:

375  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

379 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

382  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

384 
	}
}

387 
ngx_öt_t


388 
	$ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
,

389 
ngx_chaö_t
 *
ö
)

391 
ngx_öt_t
 
rc
;

393 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

395 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

396  
NGX_ERROR
;

399 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

401 i‡(
˘x
->
pha£
 =
NGX_HTTP_IMAGE_DONE
) {

403  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

406  
rc
;

407 
	}
}

410 
ngx_uöt_t


411 
	$ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

413 
u_ch¨
 *
p
;

415 
p
 = 
ö
->
buf
->
pos
;

417 i‡(
ö
->
buf
->
œ°
 - 
p
 < 16) {

418  
NGX_HTTP_IMAGE_NONE
;

421 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

422 "imagêfûãr: \"%c%c\"", 
p
[0],Ö[1]);

424 i‡(
p
[0] == 0xff &&Ö[1] == 0xd8) {

428  
NGX_HTTP_IMAGE_JPEG
;

430 } i‡(
p
[0] == 'G' &&Ö[1] == 'I' &&Ö[2] == 'F' &&Ö[3] == '8'

431 && 
p
[5] == 'a')

433 i‡(
p
[4] == '9' ||Ö[4] == '7') {

435  
NGX_HTTP_IMAGE_GIF
;

438 } i‡(
p
[0] == 0x89 &&Ö[1] == 'P' &&Ö[2] == 'N' &&Ö[3] == 'G'

439 && 
p
[4] == 0x0d &&Ö[5] == 0x0a &&Ö[6] == 0x1a &&Ö[7] == 0x0a)

443  
NGX_HTTP_IMAGE_PNG
;

446  
NGX_HTTP_IMAGE_NONE
;

447 
	}
}

450 
ngx_öt_t


451 
	$ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

453 
u_ch¨
 *
p
;

454 
size_t
 
size
, 
ª°
;

455 
ngx_buf_t
 *
b
;

456 
ngx_chaö_t
 *
˛
;

457 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

459 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

461 i‡(
˘x
->
image
 =
NULL
) {

462 
˘x
->
image
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Àngth
);

463 i‡(
˘x
->
image
 =
NULL
) {

464  
NGX_ERROR
;

467 
˘x
->
œ°
 = ctx->
image
;

470 
p
 = 
˘x
->
œ°
;

472 
˛
 = 
ö
; cl; c»˛->
√xt
) {

474 
b
 = 
˛
->
buf
;

475 
size
 = 
b
->
œ°
 - b->
pos
;

477 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

478 "imagêbuf: %uz", 
size
);

480 
ª°
 = 
˘x
->
image
 + ctx->
Àngth
 - 
p
;

482 i‡(
size
 > 
ª°
) {

483 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

485  
NGX_ERROR
;

488 
p
 = 
	`ngx_˝ymem
’, 
b
->
pos
, 
size
);

489 
b
->
pos
 +
size
;

491 i‡(
b
->
œ°_buf
) {

492 
˘x
->
œ°
 = 
p
;

493  
NGX_OK
;

497 
˘x
->
œ°
 = 
p
;

498 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_IMAGE_BUFFERED
;

500  
NGX_AGAIN
;

501 
	}
}

504 
ngx_buf_t
 *

505 
	$ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
)

507 
ngx_öt_t
 
rc
;

508 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

509 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

511 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_IMAGE_BUFFERED
;

513 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

515 
rc
 = 
	`ngx_hâp_image_size
(
r
, 
˘x
);

517 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

519 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

520  
	`ngx_hâp_image_js⁄
(
r
, 
rc
 =
NGX_OK
 ? 
˘x
 : 
NULL
);

523 
˘x
->
™gÀ
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
acv
, conf->angle);

525 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

527 i‡(
˘x
->
™gÀ
 != 90 && ctx->angle != 180 && ctx->angle != 270) {

528  
NULL
;

531  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

534 
˘x
->
max_width
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
wcv
, c⁄f->
width
);

535 i‡(
˘x
->
max_width
 == 0) {

536  
NULL
;

539 
˘x
->
max_height
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
hcv
,

540 
c⁄f
->
height
);

541 i‡(
˘x
->
max_height
 == 0) {

542  
NULL
;

545 i‡(
rc
 =
NGX_OK


546 && 
˘x
->
width
 <˘x->
max_width


547 && 
˘x
->
height
 <˘x->
max_height


548 && 
˘x
->
™gÀ
 == 0

549 && !
˘x
->
f‹˚
)

551  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

554  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

555 
	}
}

558 
ngx_buf_t
 *

559 
	$ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

561 
size_t
 
Àn
;

562 
ngx_buf_t
 *
b
;

564 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

565 i‡(
b
 =
NULL
) {

566  
NULL
;

569 
b
->
mem‹y
 = 1;

570 
b
->
œ°_buf
 = 1;

572 
	`ngx_hâp_˛ón_hódî
(
r
);

574 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

575 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("application/json") - 1;

576 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "application/json");

577 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

579 i‡(
˘x
 =
NULL
) {

580 
b
->
pos
 = (
u_ch¨
 *Ë"{}" 
CRLF
;

581 
b
->
œ°
 = b->
pos
 + ("{}" 
CRLF
) - 1;

583 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

585  
b
;

588 
Àn
 = ("{ \"img\" : "

589 "{ \"width\": , \"height\": , \"ty≥\": \"j≥g\" } }" 
CRLF
) - 1

590 + 2 * 
NGX_SIZE_T_LEN
;

592 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

593 i‡(
b
->
pos
 =
NULL
) {

594  
NULL
;

597 
b
->
œ°
 = 
	`ngx_•rötf
(b->
pos
,

601 " \"ty≥\": \"%s\" } }" 
CRLF
,

602 
˘x
->
width
, ctx->
height
,

603 
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1].
d©a
 + 6);

605 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

607  
b
;

608 
	}
}

611 
ngx_buf_t
 *

612 
	$ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

614 
ngx_buf_t
 *
b
;

616 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

617 i‡(
b
 =
NULL
) {

618  
NULL
;

621 
b
->
pos
 = 
˘x
->
image
;

622 
b
->
œ°
 = 
˘x
->last;

623 
b
->
mem‹y
 = 1;

624 
b
->
œ°_buf
 = 1;

626 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

628  
b
;

629 
	}
}

633 
	$ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

635 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

637 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

638 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

641 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

642 
	}
}

645 
ngx_öt_t


646 
	$ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

648 
u_ch¨
 *
p
, *
œ°
;

649 
size_t
 
Àn
, 
≠p
;

650 
ngx_uöt_t
 
width
, 
height
;

652 
p
 = 
˘x
->
image
;

654 
˘x
->
ty≥
) {

656 
NGX_HTTP_IMAGE_JPEG
:

658 
p
 += 2;

659 
œ°
 = 
˘x
->
image
 + ctx->
Àngth
 - 10;

660 
width
 = 0;

661 
height
 = 0;

662 
≠p
 = 0;

664 
p
 < 
œ°
) {

666 i‡(
p
[0] == 0xff &&Ö[1] != 0xff) {

668 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

669 "JPEG: %02xd %02xd", 
p
[0],Ö[1]);

671 
p
++;

673 i‡((*
p
 == 0xc0 || *p == 0xc1 || *p == 0xc2 || *p == 0xc3

674 || *
p
 == 0xc9 || *p == 0xca || *p == 0xcb)

675 && (
width
 =0 || 
height
 == 0))

677 
width
 = 
p
[6] * 256 +Ö[7];

678 
height
 = 
p
[4] * 256 +Ö[5];

681 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

682 "JPEG: %02xd %02xd", 
p
[1],Ö[2]);

684 
Àn
 = 
p
[1] * 256 +Ö[2];

686 i‡(*
p
 >= 0xe1 && *p <= 0xef) {

688 
≠p
 +
Àn
;

691 
p
 +
Àn
;

696 
p
++;

699 i‡(
width
 =0 || 
height
 == 0) {

700  
NGX_DECLINED
;

703 i‡(
˘x
->
Àngth
 / 20 < 
≠p
) {

705 
˘x
->
f‹˚
 = 1;

706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

707 "≠∞d©®size: %uz", 
≠p
);

712 
NGX_HTTP_IMAGE_GIF
:

714 i‡(
˘x
->
Àngth
 < 10) {

715  
NGX_DECLINED
;

718 
width
 = 
p
[7] * 256 +Ö[6];

719 
height
 = 
p
[9] * 256 +Ö[8];

723 
NGX_HTTP_IMAGE_PNG
:

725 i‡(
˘x
->
Àngth
 < 24) {

726  
NGX_DECLINED
;

729 
width
 = 
p
[18] * 256 +Ö[19];

730 
height
 = 
p
[22] * 256 +Ö[23];

736  
NGX_DECLINED
;

739 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

740 "imagêsize: %d x %d", 
width
, 
height
);

742 
˘x
->
width
 = width;

743 
˘x
->
height
 = height;

745  
NGX_OK
;

746 
	}
}

749 
ngx_buf_t
 *

750 
	$ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

752 
sx
, 
sy
, 
dx
, 
dy
, 
ox
, 
oy
, 
ax
, 
ay
, 
size
,

753 
cﬁ‹s
, 
∑Àâe
, 
å™•¨ít
, 
sh¨≥n
,

754 
ªd
, 
gªí
, 
blue
, 
t
;

755 
u_ch¨
 *
out
;

756 
ngx_buf_t
 *
b
;

757 
ngx_uöt_t
 
ªsize
;

758 
gdImagePå
 
§c
, 
d°
;

759 
ngx_poﬁ_˛ónup_t
 *
˛n
;

760 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

762 
§c
 = 
	`ngx_hâp_image_sour˚
(
r
, 
˘x
);

764 i‡(
§c
 =
NULL
) {

765  
NULL
;

768 
sx
 = 
	`gdImageSX
(
§c
);

769 
sy
 = 
	`gdImageSY
(
§c
);

771 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

773 i‡(!
˘x
->
f‹˚


774 && 
˘x
->
™gÀ
 == 0

775 && (
ngx_uöt_t
Ë
sx
 <
˘x
->
max_width


776 && (
ngx_uöt_t
Ë
sy
 <
˘x
->
max_height
)

778 
	`gdImageDe°roy
(
§c
);

779  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

782 
cﬁ‹s
 = 
	`gdImageCﬁ‹sTŸÆ
(
§c
);

784 i‡(
cﬁ‹s
 && 
c⁄f
->
å™•¨ícy
) {

785 
å™•¨ít
 = 
	`gdImageGëTøn•¨ít
(
§c
);

787 i‡(
å™•¨ít
 != -1) {

788 
∑Àâe
 = 
cﬁ‹s
;

789 
ªd
 = 
	`gdImageRed
(
§c
, 
å™•¨ít
);

790 
gªí
 = 
	`gdImageGªí
(
§c
, 
å™•¨ít
);

791 
blue
 = 
	`gdImageBlue
(
§c
, 
å™•¨ít
);

793 
å™•¨ít
;

797 
∑Àâe
 = 0;

798 
å™•¨ít
 = -1;

799 
ªd
 = 0;

800 
gªí
 = 0;

801 
blue
 = 0;

803 
å™•¨ít
:

805 
	`gdImageCﬁ‹Tøn•¨ít
(
§c
, -1);

807 
dx
 = 
sx
;

808 
dy
 = 
sy
;

810 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_RESIZE
) {

812 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

813 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

814 
dy
 = dy ? dy : 1;

815 
dx
 = 
˘x
->
max_width
;

818 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

819 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

820 
dx
 = dx ? dx : 1;

821 
dy
 = 
˘x
->
max_height
;

824 
ªsize
 = 1;

826 } i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

828 
ªsize
 = 0;

832 
ªsize
 = 0;

834 i‡((Ë
dx
 / 
dy
 < (Ë
˘x
->
max_width
 / ctx->
max_height
) {

835 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

836 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

837 
dy
 = dy ? dy : 1;

838 
dx
 = 
˘x
->
max_width
;

839 
ªsize
 = 1;

843 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

844 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

845 
dx
 = dx ? dx : 1;

846 
dy
 = 
˘x
->
max_height
;

847 
ªsize
 = 1;

852 i‡(
ªsize
) {

853 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

854 i‡(
d°
 =
NULL
) {

855 
	`gdImageDe°roy
(
§c
);

856  
NULL
;

859 i‡(
cﬁ‹s
 == 0) {

860 
	`gdImageSaveAÕha
(
d°
, 1);

861 
	`gdImageAÕhaBÀndög
(
d°
, 0);

864 
	`gdImageC›yReßm∂ed
(
d°
, 
§c
, 0, 0, 0, 0, 
dx
, 
dy
, 
sx
, 
sy
);

866 i‡(
cﬁ‹s
) {

867 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

870 
	`gdImageDe°roy
(
§c
);

873 
d°
 = 
§c
;

876 i‡(
˘x
->
™gÀ
) {

877 
§c
 = 
d°
;

879 
ax
 = (
dx
 % 2 == 0) ? 1 : 0;

880 
ay
 = (
dy
 % 2 == 0) ? 1 : 0;

882 
˘x
->
™gÀ
) {

886 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dy
, 
dx
, 
∑Àâe
);

887 i‡(
d°
 =
NULL
) {

888 
	`gdImageDe°roy
(
§c
);

889  
NULL
;

891 i‡(
˘x
->
™gÀ
 == 90) {

892 
ox
 = 
dy
 / 2 + 
ay
;

893 
oy
 = 
dx
 / 2 - 
ax
;

896 
ox
 = 
dy
 / 2 - 
ay
;

897 
oy
 = 
dx
 / 2 + 
ax
;

900 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
ox
, 
oy
, 0, 0,

901 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

902 
	`gdImageDe°roy
(
§c
);

904 
t
 = 
dx
;

905 
dx
 = 
dy
;

906 
dy
 = 
t
;

910 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

911 i‡(
d°
 =
NULL
) {

912 
	`gdImageDe°roy
(
§c
);

913  
NULL
;

915 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
dx
 / 2 - 
ax
, 
dy
 / 2 - 
ay
, 0, 0,

916 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

917 
	`gdImageDe°roy
(
§c
);

922 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_CROP
) {

924 
§c
 = 
d°
;

926 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

927 
ox
 = 
dx
 - 
˘x
->
max_width
;

930 
ox
 = 0;

933 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

934 
oy
 = 
dy
 - 
˘x
->
max_height
;

937 
oy
 = 0;

940 i‡(
ox
 || 
oy
) {

942 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
 - 
ox
, 
dy
 - 
oy
, 
cﬁ‹s
);

944 i‡(
d°
 =
NULL
) {

945 
	`gdImageDe°roy
(
§c
);

946  
NULL
;

949 
ox
 /= 2;

950 
oy
 /= 2;

952 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

954 
dx
, 
dy
, 
ox
, 
oy
);

956 i‡(
cﬁ‹s
 == 0) {

957 
	`gdImageSaveAÕha
(
d°
, 1);

958 
	`gdImageAÕhaBÀndög
(
d°
, 0);

961 
	`gdImageC›y
(
d°
, 
§c
, 0, 0, 
ox
, 
oy
, 
dx
 - ox, 
dy
 - oy);

963 i‡(
cﬁ‹s
) {

964 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

967 
	`gdImageDe°roy
(
§c
);

971 i‡(
å™•¨ít
 !-1 && 
cﬁ‹s
) {

972 
	`gdImageCﬁ‹Tøn•¨ít
(
d°
, 
	`gdImageCﬁ‹Exa˘
(d°, 
ªd
, 
gªí
, 
blue
));

975 
sh¨≥n
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
shcv
, conf->sharpen);

976 i‡(
sh¨≥n
 > 0) {

977 
	`gdImageSh¨≥n
(
d°
, 
sh¨≥n
);

980 
	`gdImageI¡îœ˚
(
d°
, (Ë
c⁄f
->
öãæa˚
);

982 
out
 = 
	`ngx_hâp_image_out
(
r
, 
˘x
->
ty≥
, 
d°
, &
size
);

984 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

985 "image: %d x %d %d", 
sx
, 
sy
, 
cﬁ‹s
);

987 
	`gdImageDe°roy
(
d°
);

988 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
image
);

990 i‡(
out
 =
NULL
) {

991  
NULL
;

994 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

995 i‡(
˛n
 =
NULL
) {

996 
	`gdFªe
(
out
);

997  
NULL
;

1000 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

1001 i‡(
b
 =
NULL
) {

1002 
	`gdFªe
(
out
);

1003  
NULL
;

1006 
˛n
->
h™dÀr
 = 
ngx_hâp_image_˛ónup
;

1007 
˛n
->
d©a
 = 
out
;

1009 
b
->
pos
 = 
out
;

1010 
b
->
œ°
 = 
out
 + 
size
;

1011 
b
->
mem‹y
 = 1;

1012 
b
->
œ°_buf
 = 1;

1014 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

1015 
	`ngx_hâp_wók_ëag
(
r
);

1017  
b
;

1018 
	}
}

1021 
gdImagePå


1022 
	$ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

1024 *
Áûed
;

1025 
gdImagePå
 
img
;

1027 
img
 = 
NULL
;

1029 
˘x
->
ty≥
) {

1031 
NGX_HTTP_IMAGE_JPEG
:

1032 
img
 = 
	`gdImageCª©eFromJ≥gPå
(
˘x
->
Àngth
, ctx->
image
);

1033 
Áûed
 = "gdImageCreateFromJpegPtr() failed";

1036 
NGX_HTTP_IMAGE_GIF
:

1037 
img
 = 
	`gdImageCª©eFromGifPå
(
˘x
->
Àngth
, ctx->
image
);

1038 
Áûed
 = "gdImageCreateFromGifPtr() failed";

1041 
NGX_HTTP_IMAGE_PNG
:

1042 
img
 = 
	`gdImageCª©eFromPngPå
(
˘x
->
Àngth
, ctx->
image
);

1043 
Áûed
 = "gdImageCreateFromPngPtr() failed";

1047 
Áûed
 = "unknown imageÅype";

1051 i‡(
img
 =
NULL
) {

1052 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1055  
img
;

1056 
	}
}

1059 
gdImagePå


1060 
	$ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
, 
cﬁ‹s
)

1062 
gdImagePå
 
img
;

1064 i‡(
cﬁ‹s
 == 0) {

1065 
img
 = 
	`gdImageCª©eTrueCﬁ‹
(
w
, 
h
);

1067 i‡(
img
 =
NULL
) {

1068 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1070  
NULL
;

1074 
img
 = 
	`gdImageCª©e
(
w
, 
h
);

1076 i‡(
img
 =
NULL
) {

1077 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1079  
NULL
;

1083  
img
;

1084 
	}
}

1087 
u_ch¨
 *

1088 
	$ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
, 
gdImagePå
 
img
,

1089 *
size
)

1091 *
Áûed
;

1092 
u_ch¨
 *
out
;

1093 
ngx_öt_t
 
jq
;

1094 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1096 
out
 = 
NULL
;

1098 
ty≥
) {

1100 
NGX_HTTP_IMAGE_JPEG
:

1101 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

1103 
jq
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
jqcv
, c⁄f->
j≥g_quÆôy
);

1104 i‡(
jq
 <= 0) {

1105  
NULL
;

1108 
out
 = 
	`gdImageJ≥gPå
(
img
, 
size
, 
jq
);

1109 
Áûed
 = "gdImageJpegPtr() failed";

1112 
NGX_HTTP_IMAGE_GIF
:

1113 
out
 = 
	`gdImageGifPå
(
img
, 
size
);

1114 
Áûed
 = "gdImageGifPtr() failed";

1117 
NGX_HTTP_IMAGE_PNG
:

1118 
out
 = 
	`gdImagePngPå
(
img
, 
size
);

1119 
Áûed
 = "gdImagePngPtr() failed";

1123 
Áûed
 = "unknown imageÅype";

1127 i‡(
out
 =
NULL
) {

1128 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1131  
out
;

1132 
	}
}

1136 
	$ngx_hâp_image_˛ónup
(*
d©a
)

1138 
	`gdFªe
(
d©a
);

1139 
	}
}

1142 
ngx_uöt_t


1143 
	$ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

1144 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
)

1146 
ngx_°r_t
 
vÆ
;

1148 i‡(
cv
 =
NULL
) {

1149  
v
;

1152 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1156  
	`ngx_hâp_image_fûãr_vÆue
(&
vÆ
);

1157 
	}
}

1160 
ngx_uöt_t


1161 
	$ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
)

1163 
ngx_öt_t
 
n
;

1165 i‡(
vÆue
->
Àn
 =1 && vÆue->
d©a
[0] == '-') {

1166  (
ngx_uöt_t
) -1;

1169 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

1171 i‡(
n
 > 0) {

1172  (
ngx_uöt_t
Ë
n
;

1176 
	}
}

1180 
	$ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1182 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1184 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_image_fûãr_c⁄f_t
));

1185 i‡(
c⁄f
 =
NULL
) {

1186  
NULL
;

1202 
c⁄f
->
fûãr
 = 
NGX_CONF_UNSET_UINT
;

1203 
c⁄f
->
j≥g_quÆôy
 = 
NGX_CONF_UNSET_UINT
;

1204 
c⁄f
->
sh¨≥n
 = 
NGX_CONF_UNSET_UINT
;

1205 
c⁄f
->
å™•¨ícy
 = 
NGX_CONF_UNSET
;

1206 
c⁄f
->
öãæa˚
 = 
NGX_CONF_UNSET
;

1207 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1209  
c⁄f
;

1210 
	}
}

1214 
	$ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1216 
ngx_hâp_image_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1217 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

1219 i‡(
c⁄f
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1221 i‡(
¥ev
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1222 
c⁄f
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1225 
c⁄f
->
fûãr
 = 
¥ev
->filter;

1226 
c⁄f
->
width
 = 
¥ev
->width;

1227 
c⁄f
->
height
 = 
¥ev
->height;

1228 
c⁄f
->
™gÀ
 = 
¥ev
->angle;

1229 
c⁄f
->
wcv
 = 
¥ev
->wcv;

1230 
c⁄f
->
hcv
 = 
¥ev
->hcv;

1231 
c⁄f
->
acv
 = 
¥ev
->acv;

1235 i‡(
c⁄f
->
j≥g_quÆôy
 =
NGX_CONF_UNSET_UINT
) {

1238 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
j≥g_quÆôy
, 
¥ev
->jpeg_quality, 75);

1240 i‡(
c⁄f
->
jqcv
 =
NULL
) {

1241 
c⁄f
->
jqcv
 = 
¥ev
->jqcv;

1245 i‡(
c⁄f
->
sh¨≥n
 =
NGX_CONF_UNSET_UINT
) {

1246 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
sh¨≥n
, 
¥ev
->sharpen, 0);

1248 i‡(
c⁄f
->
shcv
 =
NULL
) {

1249 
c⁄f
->
shcv
 = 
¥ev
->shcv;

1253 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
å™•¨ícy
, 
¥ev
->transparency, 1);

1255 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öãæa˚
, 
¥ev
->interlace, 0);

1257 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1260  
NGX_CONF_OK
;

1261 
	}
}

1265 
	$ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1267 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1269 
ngx_°r_t
 *
vÆue
;

1270 
ngx_öt_t
 
n
;

1271 
ngx_uöt_t
 
i
;

1272 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1273 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1275 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1277 
i
 = 1;

1279 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1280 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1281 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1283 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "test") == 0) {

1284 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_TEST
;

1286 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "size") == 0) {

1287 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_SIZE
;

1290 
Áûed
;

1293  
NGX_CONF_OK
;

1295 } i‡(
cf
->
¨gs
->
√…s
 == 3) {

1297 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "rotate") == 0) {

1298 i‡(
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_RESIZE


1299 && 
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_CROP
)

1301 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_ROTATE
;

1304 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1306 
ccv
.
cf
 = cf;

1307 
ccv
.
vÆue
 = &vÆue[++
i
];

1308 
ccv
.
com∂ex_vÆue
 = &
cv
;

1310 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1311  
NGX_CONF_ERROR
;

1314 i‡(
cv
.
Àngths
 =
NULL
) {

1315 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1317 i‡(
n
 != 90 &&Ç != 180 &&Ç != 270) {

1318 
Áûed
;

1321 
imcf
->
™gÀ
 = (
ngx_uöt_t
Ë
n
;

1324 
imcf
->
acv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1325 (
ngx_hâp_com∂ex_vÆue_t
));

1326 i‡(
imcf
->
acv
 =
NULL
) {

1327  
NGX_CONF_ERROR
;

1330 *
imcf
->
acv
 = 
cv
;

1333  
NGX_CONF_OK
;

1336 
Áûed
;

1340 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "resize") == 0) {

1341 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_RESIZE
;

1343 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "crop") == 0) {

1344 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_CROP
;

1347 
Áûed
;

1350 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1352 
ccv
.
cf
 = cf;

1353 
ccv
.
vÆue
 = &vÆue[++
i
];

1354 
ccv
.
com∂ex_vÆue
 = &
cv
;

1356 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1357  
NGX_CONF_ERROR
;

1360 i‡(
cv
.
Àngths
 =
NULL
) {

1361 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1363 i‡(
n
 == 0) {

1364 
Áûed
;

1367 
imcf
->
width
 = (
ngx_uöt_t
Ë
n
;

1370 
imcf
->
wcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1371 i‡(
imcf
->
wcv
 =
NULL
) {

1372  
NGX_CONF_ERROR
;

1375 *
imcf
->
wcv
 = 
cv
;

1378 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1380 
ccv
.
cf
 = cf;

1381 
ccv
.
vÆue
 = &vÆue[++
i
];

1382 
ccv
.
com∂ex_vÆue
 = &
cv
;

1384 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1385  
NGX_CONF_ERROR
;

1388 i‡(
cv
.
Àngths
 =
NULL
) {

1389 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1391 i‡(
n
 == 0) {

1392 
Áûed
;

1395 
imcf
->
height
 = (
ngx_uöt_t
Ë
n
;

1398 
imcf
->
hcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1399 i‡(
imcf
->
hcv
 =
NULL
) {

1400  
NGX_CONF_ERROR
;

1403 *
imcf
->
hcv
 = 
cv
;

1406  
NGX_CONF_OK
;

1408 
Áûed
:

1410 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

1411 &
vÆue
[
i
]);

1413  
NGX_CONF_ERROR
;

1414 
	}
}

1418 
	$ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1419 *
c⁄f
)

1421 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1423 
ngx_°r_t
 *
vÆue
;

1424 
ngx_öt_t
 
n
;

1425 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1426 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1428 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1430 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1432 
ccv
.
cf
 = cf;

1433 
ccv
.
vÆue
 = &value[1];

1434 
ccv
.
com∂ex_vÆue
 = &
cv
;

1436 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1437  
NGX_CONF_ERROR
;

1440 i‡(
cv
.
Àngths
 =
NULL
) {

1441 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1443 i‡(
n
 <= 0) {

1444 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1445 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1446  
NGX_CONF_ERROR
;

1449 
imcf
->
j≥g_quÆôy
 = (
ngx_uöt_t
Ë
n
;

1452 
imcf
->
jqcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1453 i‡(
imcf
->
jqcv
 =
NULL
) {

1454  
NGX_CONF_ERROR
;

1457 *
imcf
->
jqcv
 = 
cv
;

1460  
NGX_CONF_OK
;

1461 
	}
}

1465 
	$ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1466 *
c⁄f
)

1468 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1470 
ngx_°r_t
 *
vÆue
;

1471 
ngx_öt_t
 
n
;

1472 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1473 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1475 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1477 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1479 
ccv
.
cf
 = cf;

1480 
ccv
.
vÆue
 = &value[1];

1481 
ccv
.
com∂ex_vÆue
 = &
cv
;

1483 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1484  
NGX_CONF_ERROR
;

1487 i‡(
cv
.
Àngths
 =
NULL
) {

1488 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1490 i‡(
n
 < 0) {

1491 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1492 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1493  
NGX_CONF_ERROR
;

1496 
imcf
->
sh¨≥n
 = (
ngx_uöt_t
Ë
n
;

1499 
imcf
->
shcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1500 i‡(
imcf
->
shcv
 =
NULL
) {

1501  
NGX_CONF_ERROR
;

1504 *
imcf
->
shcv
 = 
cv
;

1507  
NGX_CONF_OK
;

1508 
	}
}

1511 
ngx_öt_t


1512 
	$ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1514 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1515 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_image_hódî_fûãr
;

1517 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1518 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_image_body_fûãr
;

1520  
NGX_OK
;

1521 
	}
}

	@src/http/modules/ngx_http_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	m«me
;

15 
ngx_¨øy_t
 *
	mÀngths
;

16 
ngx_¨øy_t
 *
	mvÆues
;

17 } 
	tngx_hâp_ödex_t
;

21 
ngx_¨øy_t
 *
	mödi˚s
;

22 
size_t
 
	mmax_ödex_Àn
;

23 } 
	tngx_hâp_ödex_loc_c⁄f_t
;

26 
	#NGX_HTTP_DEFAULT_INDEX
 "ödex.html"

	)

29 
ngx_öt_t
 
ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
);

31 
ngx_öt_t
 
ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
);

34 
ngx_öt_t
 
ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_ödex_comm™ds
[] = {

44 { 
ngx_°rög
("index"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

46 
ngx_hâp_ödex_£t_ödex
,

47 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
NULL
 },

51 
ngx_nuŒ_comm™d


55 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ödex_moduÀ_˘x
 = {

56 
NULL
,

57 
ngx_hâp_ödex_öô
,

59 
NULL
,

60 
NULL
,

62 
NULL
,

63 
NULL
,

65 
ngx_hâp_ödex_¸óã_loc_c⁄f
,

66 
ngx_hâp_ödex_mîge_loc_c⁄f


70 
ngx_moduÀ_t
 
	gngx_hâp_ödex_moduÀ
 = {

71 
NGX_MODULE_V1
,

72 &
ngx_hâp_ödex_moduÀ_˘x
,

73 
ngx_hâp_ödex_comm™ds
,

74 
NGX_HTTP_MODULE
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NGX_MODULE_V1_PADDING


96 
ngx_öt_t


97 
	$ngx_hâp_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

99 
u_ch¨
 *
p
, *
«me
;

100 
size_t
 
Àn
, 
roŸ
, 
ª£rve
, 
Æloˇãd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_°r_t
 
∑th
, 
uri
;

103 
ngx_uöt_t
 
i
, 
dú_ã°ed
;

104 
ngx_hâp_ödex_t
 *
ödex
;

105 
ngx_›í_fûe_öfo_t
 
of
;

106 
ngx_hâp_s¸ùt_code_±
 
code
;

107 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

108 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

109 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
;

110 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

112 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

113  
NGX_DECLINED
;

116 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

117  
NGX_DECLINED
;

120 
ûcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ödex_moduÀ
);

121 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

123 
Æloˇãd
 = 0;

124 
roŸ
 = 0;

125 
dú_ã°ed
 = 0;

126 
«me
 = 
NULL
;

128 
∑th
.
d©a
 = 
NULL
;

130 
ödex
 = 
ûcf
->
ödi˚s
->
ñts
;

131 
i
 = 0; i < 
ûcf
->
ödi˚s
->
√…s
; i++) {

133 i‡(
ödex
[
i
].
Àngths
 =
NULL
) {

135 i‡(
ödex
[
i
].
«me
.
d©a
[0] == '/') {

136  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
ödex
[
i
].
«me
, &r->
¨gs
);

139 
ª£rve
 = 
ûcf
->
max_ödex_Àn
;

140 
Àn
 = 
ödex
[
i
].
«me
.len;

143 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

145 
e
.
ù
 = 
ödex
[
i
].
Àngths
->
ñts
;

146 
e
.
ªque°
 = 
r
;

147 
e
.
Êushed
 = 1;

150 
Àn
 = 1;

152 *(
uöçå_t
 *Ë
e
.
ù
) {

153 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

154 
Àn
 +
	`lcode
(&
e
);

159 
ª£rve
 = 
Àn
 + 16;

162 i‡(
ª£rve
 > 
Æloˇãd
) {

164 
«me
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
ª£rve
);

165 i‡(
«me
 =
NULL
) {

166  
NGX_ERROR
;

169 
Æloˇãd
 = 
∑th
.
d©a
 +Ö©h.
Àn
 - 
«me
;

172 i‡(
ödex
[
i
].
vÆues
 =
NULL
) {

176 
	`ngx_mem˝y
(
«me
, 
ödex
[
i
].«me.
d©a
, index[i].«me.
Àn
);

178 
∑th
.
Àn
 = (
«me
 + 
ödex
[
i
].«me.À¿- 1Ë-Ö©h.
d©a
;

181 
e
.
ù
 = 
ödex
[
i
].
vÆues
->
ñts
;

182 
e
.
pos
 = 
«me
;

184 *(
uöçå_t
 *Ë
e
.
ù
) {

185 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

186 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

189 i‡(*
«me
 == '/') {

190 
uri
.
Àn
 =Üen - 1;

191 
uri
.
d©a
 = 
«me
;

192  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

195 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

197 *
e
.
pos
 = '\0';

200 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 "›í index \"%V\"", &
∑th
);

203 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

205 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

206 
of
.
dúe˘io
 = 
˛cf
->directio;

207 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

208 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

209 
of
.
ã°_⁄ly
 = 1;

210 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

211 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

213 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

214  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

217 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

218 !
NGX_OK
)

220 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

221 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

223 i‡(
of
.
îr
 == 0) {

224  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

227 #i‡(
NGX_HAVE_OPENAT
)

228 i‡(
of
.
îr
 =
NGX_EMLINK


229 || 
of
.
îr
 =
NGX_ELOOP
)

231  
NGX_HTTP_FORBIDDEN
;

235 i‡(
of
.
îr
 =
NGX_ENOTDIR


236 || 
of
.
îr
 =
NGX_ENAMETOOLONG


237 || 
of
.
îr
 =
NGX_EACCES
)

239  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
∑th
.
d©a
, 
of
.
îr
);

242 i‡(!
dú_ã°ed
) {

243 
rc
 = 
	`ngx_hâp_ödex_ã°_dú
(
r
, 
˛cf
, 
∑th
.
d©a
, 
«me
 - 1);

245 i‡(
rc
 !
NGX_OK
) {

246  
rc
;

249 
dú_ã°ed
 = 1;

252 i‡(
of
.
îr
 =
NGX_ENOENT
) {

256 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

257 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

259  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

262 
uri
.
Àn
 = 
r
->uri.len +Üen - 1;

264 i‡(!
˛cf
->
Æüs
) {

265 
uri
.
d©a
 = 
∑th
.d©®+ 
roŸ
;

268 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

269 i‡(
uri
.
d©a
 =
NULL
) {

270  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

273 
p
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

274 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 - 1);

277  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

280  
NGX_DECLINED
;

281 
	}
}

284 
ngx_öt_t


285 
	$ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

286 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
)

288 
u_ch¨
 
c
;

289 
ngx_°r_t
 
dú
;

290 
ngx_›í_fûe_öfo_t
 
of
;

292 
c
 = *
œ°
;

293 i‡(
c
 !'/' || 
∑th
 =
œ°
) {

295 
c
 = *(++
œ°
);

297 *
œ°
 = '\0';

299 
dú
.
Àn
 = 
œ°
 - 
∑th
;

300 
dú
.
d©a
 = 
∑th
;

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

303 "hâ∞ödex check dú: \"%V\"", &
dú
);

305 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

307 
of
.
ã°_dú
 = 1;

308 
of
.
ã°_⁄ly
 = 1;

309 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

310 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

312 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
dú
, &
of
Ë!
NGX_OK
) {

313  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

316 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
dú
, &
of
, 
r
->
poﬁ
)

317 !
NGX_OK
)

319 i‡(
of
.
îr
) {

321 #i‡(
NGX_HAVE_OPENAT
)

322 i‡(
of
.
îr
 =
NGX_EMLINK


323 || 
of
.
îr
 =
NGX_ELOOP
)

325  
NGX_HTTP_FORBIDDEN
;

329 i‡(
of
.
îr
 =
NGX_ENOENT
) {

330 *
œ°
 = 
c
;

331  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
dú
.
d©a
, 
NGX_ENOENT
);

334 i‡(
of
.
îr
 =
NGX_EACCES
) {

336 *
œ°
 = 
c
;

344  
NGX_OK
;

347 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

348 "%†\"%s\" faûed", 
of
.
Áûed
, 
dú
.
d©a
);

351  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

354 *
œ°
 = 
c
;

356 i‡(
of
.
is_dú
) {

357  
NGX_OK
;

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

361 "\"%s\" i†nŸá dúe˘‹y", 
dú
.
d©a
);

363  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

369 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
)

371 i‡(
îr
 =
NGX_EACCES
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

373 "\"%s\" i†f‹biddí", 
fûe
);

375  
NGX_HTTP_FORBIDDEN
;

378 i‡(
˛cf
->
log_nŸ_found
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

380 "\"%s\" i†nŸ found", 
fûe
);

383  
NGX_HTTP_NOT_FOUND
;

384 
	}
}

388 
	$ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

390 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
;

392 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_ödex_loc_c⁄f_t
));

393 i‡(
c⁄f
 =
NULL
) {

394  
NULL
;

397 
c⁄f
->
ödi˚s
 = 
NULL
;

398 
c⁄f
->
max_ödex_Àn
 = 0;

400  
c⁄f
;

401 
	}
}

405 
	$ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

407 
ngx_hâp_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

408 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

410 
ngx_hâp_ödex_t
 *
ödex
;

412 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

413 
c⁄f
->
ödi˚s
 = 
¥ev
->indices;

414 
c⁄f
->
max_ödex_Àn
 = 
¥ev
->max_index_len;

417 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

418 
c⁄f
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ödex_t
));

419 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

420  
NGX_CONF_ERROR
;

423 
ödex
 = 
	`ngx_¨øy_push
(
c⁄f
->
ödi˚s
);

424 i‡(
ödex
 =
NULL
) {

425  
NGX_CONF_ERROR
;

428 
ödex
->
«me
.
Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

429 
ödex
->
«me
.
d©a
 = (
u_ch¨
 *Ë
NGX_HTTP_DEFAULT_INDEX
;

430 
ödex
->
Àngths
 = 
NULL
;

431 
ödex
->
vÆues
 = 
NULL
;

433 
c⁄f
->
max_ödex_Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

435  
NGX_CONF_OK
;

438  
NGX_CONF_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

445 
ngx_hâp_h™dÀr_±
 *
h
;

446 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

448 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

450 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

451 i‡(
h
 =
NULL
) {

452  
NGX_ERROR
;

455 *
h
 = 
ngx_hâp_ödex_h™dÀr
;

457  
NGX_OK
;

458 
	}
}

464 
	$ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

466 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
 = 
c⁄f
;

468 
ngx_°r_t
 *
vÆue
;

469 
ngx_uöt_t
 
i
, 
n
;

470 
ngx_hâp_ödex_t
 *
ödex
;

471 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

473 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

474 
ûcf
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_ödex_t
));

475 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

476  
NGX_CONF_ERROR
;

480 
vÆue
 = 
cf
->
¨gs
->
ñts
;

482 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

484 i‡(
vÆue
[
i
].
d©a
[0] ='/' && i !
cf
->
¨gs
->
√…s
 - 1) {

485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

490 i‡(
vÆue
[
i
].
Àn
 == 0) {

491 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

493 &
vÆue
[1]);

494  
NGX_CONF_ERROR
;

497 
ödex
 = 
	`ngx_¨øy_push
(
ûcf
->
ödi˚s
);

498 i‡(
ödex
 =
NULL
) {

499  
NGX_CONF_ERROR
;

502 
ödex
->
«me
.
Àn
 = 
vÆue
[
i
].len;

503 
ödex
->
«me
.
d©a
 = 
vÆue
[
i
].data;

504 
ödex
->
Àngths
 = 
NULL
;

505 
ödex
->
vÆues
 = 
NULL
;

507 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[
i
]);

509 i‡(
n
 == 0) {

510 i‡(
ûcf
->
max_ödex_Àn
 < 
ödex
->
«me
.
Àn
) {

511 
ûcf
->
max_ödex_Àn
 = 
ödex
->
«me
.
Àn
;

514 i‡(
ödex
->
«me
.
d©a
[0] == '/') {

519 
ödex
->
«me
.
Àn
++;

524 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

526 
sc
.
cf
 = cf;

527 
sc
.
sour˚
 = &
vÆue
[
i
];

528 
sc
.
Àngths
 = &
ödex
->lengths;

529 
sc
.
vÆues
 = &
ödex
->values;

530 
sc
.
v¨übÀs
 = 
n
;

531 
sc
.
com∂ëe_Àngths
 = 1;

532 
sc
.
com∂ëe_vÆues
 = 1;

534 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

535  
NGX_CONF_ERROR
;

539  
NGX_CONF_OK
;

540 
	}
}

	@src/http/modules/ngx_http_limit_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mÀn
;

16 
u_sh‹t
 
	mc⁄n
;

17 
u_ch¨
 
	md©a
[1];

18 } 
	tngx_hâp_limô_c⁄n_node_t
;

22 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

23 
ngx_rbåì_node_t
 *
	mnode
;

24 } 
	tngx_hâp_limô_c⁄n_˛ónup_t
;

28 
ngx_rbåì_t
 *
	mrbåì
;

29 
ngx_hâp_com∂ex_vÆue_t
 
	mkey
;

30 } 
	tngx_hâp_limô_c⁄n_˘x_t
;

34 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

35 
ngx_uöt_t
 
	mc⁄n
;

36 } 
	tngx_hâp_limô_c⁄n_limô_t
;

40 
ngx_¨øy_t
 
	mlimôs
;

41 
ngx_uöt_t
 
	mlog_Àvñ
;

42 
ngx_uöt_t
 
	m°©us_code
;

43 } 
	tngx_hâp_limô_c⁄n_c⁄f_t
;

46 
ngx_rbåì_node_t
 *
ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
,

47 
ngx_°r_t
 *
key
, 
uöt32_t
 
hash
);

48 
ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
);

49 
ngx_ölöe
 
ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
);

51 *
ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

52 *
ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

53 *
chûd
);

54 *
ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

55 *
c⁄f
);

56 *
ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

57 *
c⁄f
);

58 
ngx_öt_t
 
ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
);

61 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_c⁄n_log_Àvñs
[] = {

62 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

63 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

64 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

65 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

66 { 
ngx_nuŒ_°rög
, 0 }

70 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_limô_c⁄n_°©us_bounds
 = {

71 
ngx_c⁄f_check_num_bounds
, 400, 599

75 
ngx_comm™d_t
 
	gngx_hâp_limô_c⁄n_comm™ds
[] = {

77 { 
ngx_°rög
("limit_conn_zone"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

79 
ngx_hâp_limô_c⁄n_z⁄e
,

82 
NULL
 },

84 { 
ngx_°rög
("limit_conn"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

86 
ngx_hâp_limô_c⁄n
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
NULL
 },

91 { 
ngx_°rög
("limit_conn_log_level"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_c⁄f_£t_íum_¶Ÿ
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

95 
off£tof
(
ngx_hâp_limô_c⁄n_c⁄f_t
, 
log_Àvñ
),

96 &
ngx_hâp_limô_c⁄n_log_Àvñs
 },

98 { 
ngx_°rög
("limit_conn_status"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_c⁄f_£t_num_¶Ÿ
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

102 
off£tof
(
ngx_hâp_limô_c⁄n_c⁄f_t
, 
°©us_code
),

103 &
ngx_hâp_limô_c⁄n_°©us_bounds
 },

105 
ngx_nuŒ_comm™d


109 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ_˘x
 = {

110 
NULL
,

111 
ngx_hâp_limô_c⁄n_öô
,

113 
NULL
,

114 
NULL
,

116 
NULL
,

117 
NULL
,

119 
ngx_hâp_limô_c⁄n_¸óã_c⁄f
,

120 
ngx_hâp_limô_c⁄n_mîge_c⁄f


124 
ngx_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ
 = {

125 
NGX_MODULE_V1
,

126 &
ngx_hâp_limô_c⁄n_moduÀ_˘x
,

127 
ngx_hâp_limô_c⁄n_comm™ds
,

128 
NGX_HTTP_MODULE
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NGX_MODULE_V1_PADDING


140 
ngx_öt_t


141 
	$ngx_hâp_limô_c⁄n_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

143 
size_t
 
n
;

144 
uöt32_t
 
hash
;

145 
ngx_°r_t
 
key
;

146 
ngx_uöt_t
 
i
;

147 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

148 
ngx_rbåì_node_t
 *
node
;

149 
ngx_poﬁ_˛ónup_t
 *
˛n
;

150 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

151 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

152 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
;

153 
ngx_hâp_limô_c⁄n_limô_t
 *
limôs
;

154 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
;

156 i‡(
r
->
maö
->
limô_c⁄n_£t
) {

157  
NGX_DECLINED
;

160 
lccf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_c⁄n_moduÀ
);

161 
limôs
 = 
lccf
->limôs.
ñts
;

163 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

164 
˘x
 = 
limôs
[
i
].
shm_z⁄e
->
d©a
;

166 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
key
, &keyË!
NGX_OK
) {

167  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

170 i‡(
key
.
Àn
 == 0) {

174 i‡(
key
.
Àn
 > 255) {

175 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

178 &
˘x
->
key
.
vÆue
, &key);

182 
r
->
maö
->
limô_c⁄n_£t
 = 1;

184 
hash
 = 
	`ngx_¸c32_sh‹t
(
key
.
d©a
, key.
Àn
);

186 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
limôs
[
i
].
shm_z⁄e
->
shm
.
addr
;

188 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

190 
node
 = 
	`ngx_hâp_limô_c⁄n_lookup
(
˘x
->
rbåì
, &
key
, 
hash
);

192 i‡(
node
 =
NULL
) {

194 
n
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

195 + 
	`off£tof
(
ngx_hâp_limô_c⁄n_node_t
, 
d©a
)

196 + 
key
.
Àn
;

198 
node
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
n
);

200 i‡(
node
 =
NULL
) {

201 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

202 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

203  
lccf
->
°©us_code
;

206 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

208 
node
->
key
 = 
hash
;

209 
lc
->
Àn
 = (
u_ch¨
Ë
key
.len;

210 
lc
->
c⁄n
 = 1;

211 
	`ngx_mem˝y
(
lc
->
d©a
, 
key
.d©a, key.
Àn
);

213 
	`ngx_rbåì_ö£π
(
˘x
->
rbåì
, 
node
);

217 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

219 i‡((
ngx_uöt_t
Ë
lc
->
c⁄n
 >
limôs
[
i
].conn) {

221 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

223 
	`ngx_log_îr‹
(
lccf
->
log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

225 &
limôs
[
i
].
shm_z⁄e
->
shm
.
«me
);

227 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

228  
lccf
->
°©us_code
;

231 
lc
->
c⁄n
++;

234 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

235 "limô c⁄n: %08XD %d", 
node
->
key
, 
lc
->
c⁄n
);

237 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

239 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
,

240 (
ngx_hâp_limô_c⁄n_˛ónup_t
));

241 i‡(
˛n
 =
NULL
) {

242  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

245 
˛n
->
h™dÀr
 = 
ngx_hâp_limô_c⁄n_˛ónup
;

246 
lc˛n
 = 
˛n
->
d©a
;

248 
lc˛n
->
shm_z⁄e
 = 
limôs
[
i
].shm_zone;

249 
lc˛n
->
node
 =Çode;

252  
NGX_DECLINED
;

253 
	}
}

257 
	$ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

258 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

260 
ngx_rbåì_node_t
 **
p
;

261 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
, *
l˙t
;

265 i‡(
node
->
key
 < 
ãmp
->key) {

267 
p
 = &
ãmp
->
À·
;

269 } i‡(
node
->
key
 > 
ãmp
->key) {

271 
p
 = &
ãmp
->
right
;

275 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

276 
l˙t
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
ãmp
->
cﬁ‹
;

278 
p
 = (
	`ngx_memn2cmp
(
l˙
->
d©a
, 
l˙t
->d©a,Ü˙->
Àn
,Ücnt->len) < 0)

279 ? &
ãmp
->
À·
 : &ãmp->
right
;

282 i‡(*
p
 =
£¡öñ
) {

286 
ãmp
 = *
p
;

289 *
p
 = 
node
;

290 
node
->
∑ª¡
 = 
ãmp
;

291 
node
->
À·
 = 
£¡öñ
;

292 
node
->
right
 = 
£¡öñ
;

293 
	`ngx_rbt_ªd
(
node
);

294 
	}
}

297 
ngx_rbåì_node_t
 *

298 
	$ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
key
, 
uöt32_t
 
hash
)

300 
ngx_öt_t
 
rc
;

301 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

302 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
;

304 
node
 = 
rbåì
->
roŸ
;

305 
£¡öñ
 = 
rbåì
->sentinel;

307 
node
 !
£¡öñ
) {

309 i‡(
hash
 < 
node
->
key
) {

310 
node
 =Çode->
À·
;

314 i‡(
hash
 > 
node
->
key
) {

315 
node
 =Çode->
right
;

321 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

323 
rc
 = 
	`ngx_memn2cmp
(
key
->
d©a
, 
l˙
->d©a, key->
Àn
, (
size_t
)Ücn->len);

325 i‡(
rc
 == 0) {

326  
node
;

329 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

332  
NULL
;

333 
	}
}

337 
	$ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
)

339 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
 = 
d©a
;

341 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

342 
ngx_rbåì_node_t
 *
node
;

343 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

344 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

346 
˘x
 = 
lc˛n
->
shm_z⁄e
->
d©a
;

347 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
lc˛n
->
shm_z⁄e
->
shm
.
addr
;

348 
node
 = 
lc˛n
->node;

349 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

351 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

353 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
lc˛n
->
shm_z⁄e
->
shm
.
log
, 0,

354 "limô c⁄¿˛ónup: %08XD %d", 
node
->
key
, 
lc
->
c⁄n
);

356 
lc
->
c⁄n
--;

358 i‡(
lc
->
c⁄n
 == 0) {

359 
	`ngx_rbåì_dñëe
(
˘x
->
rbåì
, 
node
);

360 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
node
);

363 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

364 
	}
}

367 
ngx_ölöe
 

368 
	$ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
)

370 
ngx_poﬁ_˛ónup_t
 *
˛n
;

372 
˛n
 = 
poﬁ
->
˛ónup
;

374 
˛n
 && c ->
h™dÀr
 =
ngx_hâp_limô_c⁄n_˛ónup
) {

375 
	`ngx_hâp_limô_c⁄n_˛ónup
(
˛n
->
d©a
);

376 
˛n
 = c ->
√xt
;

379 
poﬁ
->
˛ónup
 = 
˛n
;

380 
	}
}

383 
ngx_öt_t


384 
	$ngx_hâp_limô_c⁄n_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

386 
ngx_hâp_limô_c⁄n_˘x_t
 *
o˘x
 = 
d©a
;

388 
size_t
 
Àn
;

389 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

390 
ngx_rbåì_node_t
 *
£¡öñ
;

391 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

393 
˘x
 = 
shm_z⁄e
->
d©a
;

395 i‡(
o˘x
) {

396 i‡(
˘x
->
key
.
vÆue
.
Àn
 !
o˘x
->key.value.len

397 || 
	`ngx_°∫cmp
(
˘x
->
key
.
vÆue
.
d©a
, 
o˘x
->key.value.data,

398 
˘x
->
key
.
vÆue
.
Àn
)

401 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

404 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
key
.
vÆue
,

405 &
o˘x
->
key
.
vÆue
);

406  
NGX_ERROR
;

409 
˘x
->
rbåì
 = 
o˘x
->rbtree;

411  
NGX_OK
;

414 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

416 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

417 
˘x
->
rbåì
 = 
shpoﬁ
->
d©a
;

419  
NGX_OK
;

422 
˘x
->
rbåì
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_t
));

423 i‡(
˘x
->
rbåì
 =
NULL
) {

424  
NGX_ERROR
;

427 
shpoﬁ
->
d©a
 = 
˘x
->
rbåì
;

429 
£¡öñ
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_node_t
));

430 i‡(
£¡öñ
 =
NULL
) {

431  
NGX_ERROR
;

434 
	`ngx_rbåì_öô
(
˘x
->
rbåì
, 
£¡öñ
,

435 
ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
);

437 
Àn
 = (" i¿limô_c⁄n_z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

439 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

440 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

441  
NGX_ERROR
;

444 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " inÜimit_conn_zone \"%V\"%Z",

445 &
shm_z⁄e
->
shm
.
«me
);

447  
NGX_OK
;

448 
	}
}

452 
	$ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

454 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
;

456 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_c⁄f_t
));

457 i‡(
c⁄f
 =
NULL
) {

458  
NULL
;

467 
c⁄f
->
log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

468 
c⁄f
->
°©us_code
 = 
NGX_CONF_UNSET_UINT
;

470  
c⁄f
;

471 
	}
}

475 
	$ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

477 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

478 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
 = 
chûd
;

480 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

481 
c⁄f
->
limôs
 = 
¥ev
->limits;

484 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
log_Àvñ
, 
¥ev
->log_Àvñ, 
NGX_LOG_ERR
);

485 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°©us_code
, 
¥ev
->status_code,

486 
NGX_HTTP_SERVICE_UNAVAILABLE
);

488  
NGX_CONF_OK
;

489 
	}
}

493 
	$ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

495 
u_ch¨
 *
p
;

496 
ssize_t
 
size
;

497 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

498 
ngx_uöt_t
 
i
;

499 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

500 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

501 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

503 
vÆue
 = 
cf
->
¨gs
->
ñts
;

505 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_˘x_t
));

506 i‡(
˘x
 =
NULL
) {

507  
NGX_CONF_ERROR
;

510 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

512 
ccv
.
cf
 = cf;

513 
ccv
.
vÆue
 = &value[1];

514 
ccv
.
com∂ex_vÆue
 = &
˘x
->
key
;

516 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

517  
NGX_CONF_ERROR
;

520 
size
 = 0;

521 
«me
.
Àn
 = 0;

523 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

525 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

527 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

529 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

531 i‡(
p
 =
NULL
) {

532 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

533 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

534  
NGX_CONF_ERROR
;

537 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

539 
s
.
d©a
 = 
p
 + 1;

540 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

542 
size
 = 
	`ngx_∑r£_size
(&
s
);

544 i‡(
size
 =
NGX_ERROR
) {

545 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

546 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

547  
NGX_CONF_ERROR
;

550 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

551 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

552 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

553  
NGX_CONF_ERROR
;

559 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

560 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

561  
NGX_CONF_ERROR
;

564 i‡(
«me
.
Àn
 == 0) {

565 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

567 &
cmd
->
«me
);

568  
NGX_CONF_ERROR
;

571 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

572 &
ngx_hâp_limô_c⁄n_moduÀ
);

573 i‡(
shm_z⁄e
 =
NULL
) {

574  
NGX_CONF_ERROR
;

577 i‡(
shm_z⁄e
->
d©a
) {

578 
˘x
 = 
shm_z⁄e
->
d©a
;

580 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

582 &
cmd
->
«me
, &«me, &
˘x
->
key
.
vÆue
);

583  
NGX_CONF_ERROR
;

586 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_c⁄n_öô_z⁄e
;

587 
shm_z⁄e
->
d©a
 = 
˘x
;

589  
NGX_CONF_OK
;

590 
	}
}

594 
	$ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

596 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

597 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
 = 
c⁄f
;

598 
ngx_hâp_limô_c⁄n_limô_t
 *
limô
, *
limôs
;

600 
ngx_°r_t
 *
vÆue
;

601 
ngx_öt_t
 
n
;

602 
ngx_uöt_t
 
i
;

604 
vÆue
 = 
cf
->
¨gs
->
ñts
;

606 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

607 &
ngx_hâp_limô_c⁄n_moduÀ
);

608 i‡(
shm_z⁄e
 =
NULL
) {

609  
NGX_CONF_ERROR
;

612 
limôs
 = 
lccf
->limôs.
ñts
;

614 i‡(
limôs
 =
NULL
) {

615 i‡(
	`ngx_¨øy_öô
(&
lccf
->
limôs
, 
cf
->
poﬁ
, 1,

616 (
ngx_hâp_limô_c⁄n_limô_t
))

617 !
NGX_OK
)

619  
NGX_CONF_ERROR
;

623 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

624 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

629 
n
 = 
	`ngx_©oi
(
vÆue
[2].
d©a
, vÆue[2].
Àn
);

630 i‡(
n
 <= 0) {

631 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

632 "övÆidÇumbî o‡c⁄√˘i⁄†\"%V\"", &
vÆue
[2]);

633  
NGX_CONF_ERROR
;

636 i‡(
n
 > 65535) {

637 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

639  
NGX_CONF_ERROR
;

642 
limô
 = 
	`ngx_¨øy_push
(&
lccf
->
limôs
);

643 i‡(
limô
 =
NULL
) {

644  
NGX_CONF_ERROR
;

647 
limô
->
c⁄n
 = 
n
;

648 
limô
->
shm_z⁄e
 = shm_zone;

650  
NGX_CONF_OK
;

651 
	}
}

654 
ngx_öt_t


655 
	$ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
)

657 
ngx_hâp_h™dÀr_±
 *
h
;

658 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

660 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

662 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

663 i‡(
h
 =
NULL
) {

664  
NGX_ERROR
;

667 *
h
 = 
ngx_hâp_limô_c⁄n_h™dÀr
;

669  
NGX_OK
;

670 
	}
}

	@src/http/modules/ngx_http_limit_req_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mdummy
;

16 
u_sh‹t
 
	mÀn
;

17 
ngx_queue_t
 
	mqueue
;

18 
ngx_m£c_t
 
	mœ°
;

20 
ngx_uöt_t
 
	mex˚ss
;

21 
ngx_uöt_t
 
	mcou¡
;

22 
u_ch¨
 
	md©a
[1];

23 } 
	tngx_hâp_limô_ªq_node_t
;

27 
ngx_rbåì_t
 
	mrbåì
;

28 
ngx_rbåì_node_t
 
	m£¡öñ
;

29 
ngx_queue_t
 
	mqueue
;

30 } 
	tngx_hâp_limô_ªq_sh˘x_t
;

34 
ngx_hâp_limô_ªq_sh˘x_t
 *
	msh
;

35 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

37 
ngx_uöt_t
 
	møã
;

38 
ngx_hâp_com∂ex_vÆue_t
 
	mkey
;

39 
ngx_hâp_limô_ªq_node_t
 *
	mnode
;

40 } 
	tngx_hâp_limô_ªq_˘x_t
;

44 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

46 
ngx_uöt_t
 
	mbur°
;

47 
ngx_uöt_t
 
	mnodñay
;

48 } 
	tngx_hâp_limô_ªq_limô_t
;

52 
ngx_¨øy_t
 
	mlimôs
;

53 
ngx_uöt_t
 
	mlimô_log_Àvñ
;

54 
ngx_uöt_t
 
	mdñay_log_Àvñ
;

55 
ngx_uöt_t
 
	m°©us_code
;

56 } 
	tngx_hâp_limô_ªq_c⁄f_t
;

59 
ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
);

60 
ngx_öt_t
 
ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
,

61 
ngx_uöt_t
 
hash
, 
ngx_°r_t
 *
key
,Çgx_uöt_à*
ï
,Çgx_uöt_à
accou¡
);

62 
ngx_m£c_t
 
ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
,

63 
ngx_uöt_t
 
n
,Çgx_uöt_à*
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
);

64 
ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
,

65 
ngx_uöt_t
 
n
);

67 *
ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

68 *
ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

69 *
chûd
);

70 *
ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

71 *
c⁄f
);

72 *
ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 
ngx_öt_t
 
ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
);

77 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_ªq_log_Àvñs
[] = {

78 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

79 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

80 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

81 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

82 { 
ngx_nuŒ_°rög
, 0 }

86 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_limô_ªq_°©us_bounds
 = {

87 
ngx_c⁄f_check_num_bounds
, 400, 599

91 
ngx_comm™d_t
 
	gngx_hâp_limô_ªq_comm™ds
[] = {

93 { 
ngx_°rög
("limit_req_zone"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

95 
ngx_hâp_limô_ªq_z⁄e
,

98 
NULL
 },

100 { 
ngx_°rög
("limit_req"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

102 
ngx_hâp_limô_ªq
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

105 
NULL
 },

107 { 
ngx_°rög
("limit_req_log_level"),

108 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_íum_¶Ÿ
,

110 
NGX_HTTP_LOC_CONF_OFFSET
,

111 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
limô_log_Àvñ
),

112 &
ngx_hâp_limô_ªq_log_Àvñs
 },

114 { 
ngx_°rög
("limit_req_status"),

115 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

116 
ngx_c⁄f_£t_num_¶Ÿ
,

117 
NGX_HTTP_LOC_CONF_OFFSET
,

118 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
°©us_code
),

119 &
ngx_hâp_limô_ªq_°©us_bounds
 },

121 
ngx_nuŒ_comm™d


125 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ_˘x
 = {

126 
NULL
,

127 
ngx_hâp_limô_ªq_öô
,

129 
NULL
,

130 
NULL
,

132 
NULL
,

133 
NULL
,

135 
ngx_hâp_limô_ªq_¸óã_c⁄f
,

136 
ngx_hâp_limô_ªq_mîge_c⁄f


140 
ngx_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ
 = {

141 
NGX_MODULE_V1
,

142 &
ngx_hâp_limô_ªq_moduÀ_˘x
,

143 
ngx_hâp_limô_ªq_comm™ds
,

144 
NGX_HTTP_MODULE
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NGX_MODULE_V1_PADDING


156 
ngx_öt_t


157 
	$ngx_hâp_limô_ªq_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

159 
uöt32_t
 
hash
;

160 
ngx_°r_t
 
key
;

161 
ngx_öt_t
 
rc
;

162 
ngx_uöt_t
 
n
, 
ex˚ss
;

163 
ngx_m£c_t
 
dñay
;

164 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

165 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
;

166 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

168 i‡(
r
->
maö
->
limô_ªq_£t
) {

169  
NGX_DECLINED
;

172 
Ãcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_ªq_moduÀ
);

173 
limôs
 = 
Ãcf
->limôs.
ñts
;

175 
ex˚ss
 = 0;

177 
rc
 = 
NGX_DECLINED
;

179 #i‡(
NGX_SUPPRESS_WARN
)

180 
limô
 = 
NULL
;

183 
n
 = 0;Ç < 
Ãcf
->
limôs
.
√…s
;Ç++) {

185 
limô
 = &
limôs
[
n
];

187 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

189 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
key
, &keyË!
NGX_OK
) {

190  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

193 i‡(
key
.
Àn
 == 0) {

197 i‡(
key
.
Àn
 > 65535) {

198 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 &
˘x
->
key
.
vÆue
, &key);

205 
hash
 = 
	`ngx_¸c32_sh‹t
(
key
.
d©a
, key.
Àn
);

207 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

209 
rc
 = 
	`ngx_hâp_limô_ªq_lookup
(
limô
, 
hash
, &
key
, &
ex˚ss
,

210 (
n
 =
Ãcf
->
limôs
.
√…s
 - 1));

212 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

214 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

216 
n
, 
rc
, 
ex˚ss
 / 1000,Éxcess % 1000);

218 i‡(
rc
 !
NGX_AGAIN
) {

223 i‡(
rc
 =
NGX_DECLINED
) {

224  
NGX_DECLINED
;

227 
r
->
maö
->
limô_ªq_£t
 = 1;

229 i‡(
rc
 =
NGX_BUSY
 ||Ñ¯=
NGX_ERROR
) {

231 i‡(
rc
 =
NGX_BUSY
) {

232 
	`ngx_log_îr‹
(
Ãcf
->
limô_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

234 
ex˚ss
 / 1000,Éxcess % 1000,

235 &
limô
->
shm_z⁄e
->
shm
.
«me
);

238 
n
--) {

239 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

241 i‡(
˘x
->
node
 =
NULL
) {

245 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

247 
˘x
->
node
->
cou¡
--;

249 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

251 
˘x
->
node
 = 
NULL
;

254  
Ãcf
->
°©us_code
;

259 i‡(
rc
 =
NGX_AGAIN
) {

260 
ex˚ss
 = 0;

263 
dñay
 = 
	`ngx_hâp_limô_ªq_accou¡
(
limôs
, 
n
, &
ex˚ss
, &
limô
);

265 i‡(!
dñay
) {

266  
NGX_DECLINED
;

269 
	`ngx_log_îr‹
(
Ãcf
->
dñay_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

271 
ex˚ss
 / 1000,Éx˚s†% 1000, &
limô
->
shm_z⁄e
->
shm
.
«me
);

273 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

274  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

277 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ã°_ªadög
;

278 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_limô_ªq_dñay
;

279 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
wrôe
, 
dñay
);

281  
NGX_AGAIN
;

282 
	}
}

286 
	$ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
)

288 
ngx_evít_t
 *
wev
;

290 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

293 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

295 i‡(!
wev
->
timedout
) {

297 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

298 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

304 
wev
->
timedout
 = 0;

306 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

307 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

311 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

312 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

314 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

315 
	}
}

319 
	$ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

320 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

322 
ngx_rbåì_node_t
 **
p
;

323 
ngx_hâp_limô_ªq_node_t
 *
Ãn
, *
Ã¡
;

327 i‡(
node
->
key
 < 
ãmp
->key) {

329 
p
 = &
ãmp
->
À·
;

331 } i‡(
node
->
key
 > 
ãmp
->key) {

333 
p
 = &
ãmp
->
right
;

337 
Ãn
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

338 
Ã¡
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
ãmp
->
cﬁ‹
;

340 
p
 = (
	`ngx_memn2cmp
(
Ãn
->
d©a
, 
Ã¡
->d©a,Ü∫->
Àn
,Ürnt->len) < 0)

341 ? &
ãmp
->
À·
 : &ãmp->
right
;

344 i‡(*
p
 =
£¡öñ
) {

348 
ãmp
 = *
p
;

351 *
p
 = 
node
;

352 
node
->
∑ª¡
 = 
ãmp
;

353 
node
->
À·
 = 
£¡öñ
;

354 
node
->
right
 = 
£¡öñ
;

355 
	`ngx_rbt_ªd
(
node
);

356 
	}
}

359 
ngx_öt_t


360 
	$ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
, 
ngx_uöt_t
 
hash
,

361 
ngx_°r_t
 *
key
, 
ngx_uöt_t
 *
ï
,Çgx_uöt_à
accou¡
)

363 
size_t
 
size
;

364 
ngx_öt_t
 
rc
, 
ex˚ss
;

365 
ngx_time_t
 *
ç
;

366 
ngx_m£c_t
 
now
;

367 
ngx_m£c_öt_t
 
ms
;

368 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

369 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

370 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

372 
ç
 = 
	`ngx_timeofday
();

373 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

375 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

377 
node
 = 
˘x
->
sh
->
rbåì
.
roŸ
;

378 
£¡öñ
 = 
˘x
->
sh
->
rbåì
.sentinel;

380 
node
 !
£¡öñ
) {

382 i‡(
hash
 < 
node
->
key
) {

383 
node
 =Çode->
À·
;

387 i‡(
hash
 > 
node
->
key
) {

388 
node
 =Çode->
right
;

394 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

396 
rc
 = 
	`ngx_memn2cmp
(
key
->
d©a
, 
Ã
->d©a, key->
Àn
, (
size_t
)Ür->len);

398 i‡(
rc
 == 0) {

399 
	`ngx_queue_ªmove
(&
Ã
->
queue
);

400 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

402 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

404 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
	`ngx_abs
(
ms
) / 1000 + 1000;

406 i‡(
ex˚ss
 < 0) {

407 
ex˚ss
 = 0;

410 *
ï
 = 
ex˚ss
;

412 i‡((
ngx_uöt_t
Ë
ex˚ss
 > 
limô
->
bur°
) {

413  
NGX_BUSY
;

416 i‡(
accou¡
) {

417 
Ã
->
ex˚ss
 =Éxcess;

418 
Ã
->
œ°
 = 
now
;

419  
NGX_OK
;

422 
Ã
->
cou¡
++;

424 
˘x
->
node
 = 
Ã
;

426  
NGX_AGAIN
;

429 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

432 *
ï
 = 0;

434 
size
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

435 + 
	`off£tof
(
ngx_hâp_limô_ªq_node_t
, 
d©a
)

436 + 
key
->
Àn
;

438 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 1);

440 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

442 i‡(
node
 =
NULL
) {

443 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 0);

445 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

446 i‡(
node
 =
NULL
) {

447 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

448 "couldÇŸáŒoˇãÇode%s", 
˘x
->
shpoﬁ
->
log_˘x
);

449  
NGX_ERROR
;

453 
node
->
key
 = 
hash
;

455 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

457 
Ã
->
Àn
 = (
u_sh‹t
Ë
key
->len;

458 
Ã
->
ex˚ss
 = 0;

460 
	`ngx_mem˝y
(
Ã
->
d©a
, 
key
->d©a, key->
Àn
);

462 
	`ngx_rbåì_ö£π
(&
˘x
->
sh
->
rbåì
, 
node
);

464 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

466 i‡(
accou¡
) {

467 
Ã
->
œ°
 = 
now
;

468 
Ã
->
cou¡
 = 0;

469  
NGX_OK
;

472 
Ã
->
œ°
 = 0;

473 
Ã
->
cou¡
 = 1;

475 
˘x
->
node
 = 
Ã
;

477  
NGX_AGAIN
;

478 
	}
}

481 
ngx_m£c_t


482 
	$ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
, 
ngx_uöt_t
 
n
,

483 
ngx_uöt_t
 *
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
)

485 
ngx_öt_t
 
ex˚ss
;

486 
ngx_time_t
 *
ç
;

487 
ngx_m£c_t
 
now
, 
dñay
, 
max_dñay
;

488 
ngx_m£c_öt_t
 
ms
;

489 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

490 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

492 
ex˚ss
 = *
ï
;

494 i‡(
ex˚ss
 =0 || (*
limô
)->
nodñay
) {

495 
max_dñay
 = 0;

498 
˘x
 = (*
limô
)->
shm_z⁄e
->
d©a
;

499 
max_dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

502 
n
--) {

503 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

504 
Ã
 = 
˘x
->
node
;

506 i‡(
Ã
 =
NULL
) {

510 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

512 
ç
 = 
	`ngx_timeofday
();

514 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

515 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

517 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
	`ngx_abs
(
ms
) / 1000 + 1000;

519 i‡(
ex˚ss
 < 0) {

520 
ex˚ss
 = 0;

523 
Ã
->
œ°
 = 
now
;

524 
Ã
->
ex˚ss
 =Éxcess;

525 
Ã
->
cou¡
--;

527 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

529 
˘x
->
node
 = 
NULL
;

531 i‡(
limôs
[
n
].
nodñay
) {

535 
dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

537 i‡(
dñay
 > 
max_dñay
) {

538 
max_dñay
 = 
dñay
;

539 *
ï
 = 
ex˚ss
;

540 *
limô
 = &
limôs
[
n
];

544  
max_dñay
;

545 
	}
}

549 
	$ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
, 
ngx_uöt_t
 
n
)

551 
ngx_öt_t
 
ex˚ss
;

552 
ngx_time_t
 *
ç
;

553 
ngx_m£c_t
 
now
;

554 
ngx_queue_t
 *
q
;

555 
ngx_m£c_öt_t
 
ms
;

556 
ngx_rbåì_node_t
 *
node
;

557 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

559 
ç
 = 
	`ngx_timeofday
();

561 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

569 
n
 < 3) {

571 i‡(
	`ngx_queue_em±y
(&
˘x
->
sh
->
queue
)) {

575 
q
 = 
	`ngx_queue_œ°
(&
˘x
->
sh
->
queue
);

577 
Ã
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_limô_ªq_node_t
, 
queue
);

579 i‡(
Ã
->
cou¡
) {

589 i‡(
n
++ != 0) {

591 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

592 
ms
 = 
	`ngx_abs
(ms);

594 i‡(
ms
 < 60000) {

598 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
ms
 / 1000;

600 i‡(
ex˚ss
 > 0) {

605 
	`ngx_queue_ªmove
(
q
);

607 
node
 = (
ngx_rbåì_node_t
 *)

608 ((
u_ch¨
 *Ë
Ã
 - 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
));

610 
	`ngx_rbåì_dñëe
(&
˘x
->
sh
->
rbåì
, 
node
);

612 
	`ngx_¶ab_‰ì_locked
(
˘x
->
shpoﬁ
, 
node
);

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_hâp_limô_ªq_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

620 
ngx_hâp_limô_ªq_˘x_t
 *
o˘x
 = 
d©a
;

622 
size_t
 
Àn
;

623 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

625 
˘x
 = 
shm_z⁄e
->
d©a
;

627 i‡(
o˘x
) {

628 i‡(
˘x
->
key
.
vÆue
.
Àn
 !
o˘x
->key.value.len

629 || 
	`ngx_°∫cmp
(
˘x
->
key
.
vÆue
.
d©a
, 
o˘x
->key.value.data,

630 
˘x
->
key
.
vÆue
.
Àn
)

633 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

636 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
key
.
vÆue
,

637 &
o˘x
->
key
.
vÆue
);

638  
NGX_ERROR
;

641 
˘x
->
sh
 = 
o˘x
->sh;

642 
˘x
->
shpoﬁ
 = 
o˘x
->shpool;

644  
NGX_OK
;

647 
˘x
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

649 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

650 
˘x
->
sh
 = ctx->
shpoﬁ
->
d©a
;

652  
NGX_OK
;

655 
˘x
->
sh
 = 
	`ngx_¶ab_Æloc
(˘x->
shpoﬁ
, (
ngx_hâp_limô_ªq_sh˘x_t
));

656 i‡(
˘x
->
sh
 =
NULL
) {

657  
NGX_ERROR
;

660 
˘x
->
shpoﬁ
->
d©a
 = ctx->
sh
;

662 
	`ngx_rbåì_öô
(&
˘x
->
sh
->
rbåì
, &˘x->sh->
£¡öñ
,

663 
ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
);

665 
	`ngx_queue_öô
(&
˘x
->
sh
->
queue
);

667 
Àn
 = (" i¿limô_ªq z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

669 
˘x
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(˘x->shpoﬁ, 
Àn
);

670 i‡(
˘x
->
shpoﬁ
->
log_˘x
 =
NULL
) {

671  
NGX_ERROR
;

674 
	`ngx_•rötf
(
˘x
->
shpoﬁ
->
log_˘x
, " inÜimit_req zone \"%V\"%Z",

675 &
shm_z⁄e
->
shm
.
«me
);

677 
˘x
->
shpoﬁ
->
log_nomem
 = 0;

679  
NGX_OK
;

680 
	}
}

684 
	$ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

686 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
;

688 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_c⁄f_t
));

689 i‡(
c⁄f
 =
NULL
) {

690  
NULL
;

699 
c⁄f
->
limô_log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

700 
c⁄f
->
°©us_code
 = 
NGX_CONF_UNSET_UINT
;

702  
c⁄f
;

703 
	}
}

707 
	$ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

709 
ngx_hâp_limô_ªq_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

710 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
 = 
chûd
;

712 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

713 
c⁄f
->
limôs
 = 
¥ev
->limits;

716 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
limô_log_Àvñ
, 
¥ev
->limit_log_level,

717 
NGX_LOG_ERR
);

719 
c⁄f
->
dñay_log_Àvñ
 = (c⁄f->
limô_log_Àvñ
 =
NGX_LOG_INFO
) ?

720 
NGX_LOG_INFO
 : 
c⁄f
->
limô_log_Àvñ
 + 1;

722 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°©us_code
, 
¥ev
->status_code,

723 
NGX_HTTP_SERVICE_UNAVAILABLE
);

725  
NGX_CONF_OK
;

726 
	}
}

730 
	$ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

732 
u_ch¨
 *
p
;

733 
size_t
 
Àn
;

734 
ssize_t
 
size
;

735 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

736 
ngx_öt_t
 
øã
, 
sˇÀ
;

737 
ngx_uöt_t
 
i
;

738 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

739 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

740 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

742 
vÆue
 = 
cf
->
¨gs
->
ñts
;

744 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_˘x_t
));

745 i‡(
˘x
 =
NULL
) {

746  
NGX_CONF_ERROR
;

749 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

751 
ccv
.
cf
 = cf;

752 
ccv
.
vÆue
 = &value[1];

753 
ccv
.
com∂ex_vÆue
 = &
˘x
->
key
;

755 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

756  
NGX_CONF_ERROR
;

759 
size
 = 0;

760 
øã
 = 1;

761 
sˇÀ
 = 1;

762 
«me
.
Àn
 = 0;

764 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

766 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

768 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

770 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

772 i‡(
p
 =
NULL
) {

773 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

774 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

775  
NGX_CONF_ERROR
;

778 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

780 
s
.
d©a
 = 
p
 + 1;

781 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

783 
size
 = 
	`ngx_∑r£_size
(&
s
);

785 i‡(
size
 =
NGX_ERROR
) {

786 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

787 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

788  
NGX_CONF_ERROR
;

791 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

792 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

793 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

794  
NGX_CONF_ERROR
;

800 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "rate=", 5) == 0) {

802 
Àn
 = 
vÆue
[
i
].len;

803 
p
 = 
vÆue
[
i
].
d©a
 + 
Àn
 - 3;

805 i‡(
	`ngx_°∫cmp
(
p
, "r/s", 3) == 0) {

806 
sˇÀ
 = 1;

807 
Àn
 -= 3;

809 } i‡(
	`ngx_°∫cmp
(
p
, "r/m", 3) == 0) {

810 
sˇÀ
 = 60;

811 
Àn
 -= 3;

814 
øã
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 5, 
Àn
 - 5);

815 i‡(
øã
 <= 0) {

816 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

817 "övÆidÑ©ê\"%V\"", &
vÆue
[
i
]);

818  
NGX_CONF_ERROR
;

824 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

825 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

826  
NGX_CONF_ERROR
;

829 i‡(
«me
.
Àn
 == 0) {

830 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

832 &
cmd
->
«me
);

833  
NGX_CONF_ERROR
;

836 
˘x
->
øã
 =Ñ©ê* 1000 / 
sˇÀ
;

838 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

839 &
ngx_hâp_limô_ªq_moduÀ
);

840 i‡(
shm_z⁄e
 =
NULL
) {

841  
NGX_CONF_ERROR
;

844 i‡(
shm_z⁄e
->
d©a
) {

845 
˘x
 = 
shm_z⁄e
->
d©a
;

847 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

849 &
cmd
->
«me
, &«me, &
˘x
->
key
.
vÆue
);

850  
NGX_CONF_ERROR
;

853 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_ªq_öô_z⁄e
;

854 
shm_z⁄e
->
d©a
 = 
˘x
;

856  
NGX_CONF_OK
;

857 
	}
}

861 
	$ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

863 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
 = 
c⁄f
;

865 
ngx_öt_t
 
bur°
;

866 
ngx_°r_t
 *
vÆue
, 
s
;

867 
ngx_uöt_t
 
i
, 
nodñay
;

868 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

869 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

871 
vÆue
 = 
cf
->
¨gs
->
ñts
;

873 
shm_z⁄e
 = 
NULL
;

874 
bur°
 = 0;

875 
nodñay
 = 0;

877 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

879 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

881 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

882 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

884 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
s
, 0,

885 &
ngx_hâp_limô_ªq_moduÀ
);

886 i‡(
shm_z⁄e
 =
NULL
) {

887  
NGX_CONF_ERROR
;

893 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "burst=", 6) == 0) {

895 
bur°
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 6, vÆue[i].
Àn
 - 6);

896 i‡(
bur°
 <= 0) {

897 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

898 "övÆid bur°Ñ©ê\"%V\"", &
vÆue
[
i
]);

899  
NGX_CONF_ERROR
;

905 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "nodelay") == 0) {

906 
nodñay
 = 1;

910 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

911 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

912  
NGX_CONF_ERROR
;

915 i‡(
shm_z⁄e
 =
NULL
) {

916 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

918 &
cmd
->
«me
);

919  
NGX_CONF_ERROR
;

922 i‡(
shm_z⁄e
->
d©a
 =
NULL
) {

923 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

925 &
shm_z⁄e
->
shm
.
«me
);

926  
NGX_CONF_ERROR
;

929 
limôs
 = 
Ãcf
->limôs.
ñts
;

931 i‡(
limôs
 =
NULL
) {

932 i‡(
	`ngx_¨øy_öô
(&
Ãcf
->
limôs
, 
cf
->
poﬁ
, 1,

933 (
ngx_hâp_limô_ªq_limô_t
))

934 !
NGX_OK
)

936  
NGX_CONF_ERROR
;

940 
i
 = 0; i < 
Ãcf
->
limôs
.
√…s
; i++) {

941 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

946 
limô
 = 
	`ngx_¨øy_push
(&
Ãcf
->
limôs
);

947 i‡(
limô
 =
NULL
) {

948  
NGX_CONF_ERROR
;

951 
limô
->
shm_z⁄e
 = shm_zone;

952 
limô
->
bur°
 = burst * 1000;

953 
limô
->
nodñay
 =Çodelay;

955  
NGX_CONF_OK
;

956 
	}
}

959 
ngx_öt_t


960 
	$ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
)

962 
ngx_hâp_h™dÀr_±
 *
h
;

963 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

965 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

967 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

968 i‡(
h
 =
NULL
) {

969  
NGX_ERROR
;

972 *
h
 = 
ngx_hâp_limô_ªq_h™dÀr
;

974  
NGX_OK
;

975 
	}
}

	@src/http/modules/ngx_http_log_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 #i‡(
NGX_ZLIB
)

13 
	~<zlib.h
>

17 
ngx_hâp_log_›_s
 
	tngx_hâp_log_›_t
;

19 
	gu_ch¨
 *(*
	tngx_hâp_log_›_run_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
, 
	tu_ch¨
 *
	tbuf
,

20 
	tngx_hâp_log_›_t
 *
	t›
);

22 
	$size_t
 (*
	tngx_hâp_log_›_gëÀn_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

23 
	tuöçå_t
 
	td©a
);

26 
	sngx_hâp_log_›_s
 {

27 
size_t
 
Àn
;

28 
ngx_hâp_log_›_gëÀn_±
 
gëÀn
;

29 
ngx_hâp_log_›_run_±
 
run
;

30 
uöçå_t
 
d©a
;

35 
ngx_°r_t
 
«me
;

36 
ngx_¨øy_t
 *
Êushes
;

37 
ngx_¨øy_t
 *
›s
;

38 } 
	tngx_hâp_log_fmt_t
;

42 
ngx_¨øy_t
 
f‹m©s
;

43 
ngx_uöt_t
 
comböed_u£d
;

44 } 
	tngx_hâp_log_maö_c⁄f_t
;

48 
u_ch¨
 *
°¨t
;

49 
u_ch¨
 *
pos
;

50 
u_ch¨
 *
œ°
;

52 
ngx_evít_t
 *
evít
;

53 
ngx_m£c_t
 
Êush
;

54 
ngx_öt_t
 
gzù
;

55 } 
	tngx_hâp_log_buf_t
;

59 
ngx_¨øy_t
 *
Àngths
;

60 
ngx_¨øy_t
 *
vÆues
;

61 } 
	tngx_hâp_log_s¸ùt_t
;

65 
ngx_›í_fûe_t
 *
fûe
;

66 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
;

67 
time_t
 
disk_fuŒ_time
;

68 
time_t
 
îr‹_log_time
;

69 
ngx_sy¶og_≥î_t
 *
sy¶og_≥î
;

70 
ngx_hâp_log_fmt_t
 *
f‹m©
;

71 
ngx_hâp_com∂ex_vÆue_t
 *
fûãr
;

72 } 
	tngx_hâp_log_t
;

76 
ngx_¨øy_t
 *
logs
;

78 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

79 
time_t
 
›í_fûe_ˇche_vÆid
;

80 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

82 
ngx_uöt_t
 
off
;

83 } 
	tngx_hâp_log_loc_c⁄f_t
;

87 
ngx_°r_t
 
«me
;

88 
size_t
 
Àn
;

89 
ngx_hâp_log_›_run_±
 
run
;

90 } 
	tngx_hâp_log_v¨_t
;

93 
	`ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
,

94 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

95 
ssize_t
 
	`ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
, 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
);

98 #i‡(
NGX_ZLIB
)

99 
ssize_t
 
	`ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
,

100 
ngx_öt_t
 
Àvñ
, 
ngx_log_t
 *
log
);

102 *
	`ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
);

103 
	`ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
);

106 
	`ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
);

107 
	`ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
);

109 
u_ch¨
 *
	`ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

110 
ngx_hâp_log_›_t
 *
›
);

111 
u_ch¨
 *
	`ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

112 
ngx_hâp_log_›_t
 *
›
);

113 
u_ch¨
 *
	`ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

114 
ngx_hâp_log_›_t
 *
›
);

115 
u_ch¨
 *
	`ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

116 
ngx_hâp_log_›_t
 *
›
);

117 
u_ch¨
 *
	`ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

118 
ngx_hâp_log_›_t
 *
›
);

119 
u_ch¨
 *
	`ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

120 
ngx_hâp_log_›_t
 *
›
);

121 
u_ch¨
 *
	`ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

122 
ngx_hâp_log_›_t
 *
›
);

123 
u_ch¨
 *
	`ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

124 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
);

125 
u_ch¨
 *
	`ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

126 
ngx_hâp_log_›_t
 *
›
);

128 
ngx_öt_t
 
	`ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
,

129 
ngx_hâp_log_›_t
 *
›
, 
ngx_°r_t
 *
vÆue
);

130 
size_t
 
	`ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
,

131 
uöçå_t
 
d©a
);

132 
u_ch¨
 *
	`ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

133 
ngx_hâp_log_›_t
 *
›
);

134 
uöçå_t
 
	`ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

137 *
	`ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

138 *
	`ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

139 *
	`ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

140 *
chûd
);

141 *
	`ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

142 *
c⁄f
);

143 *
	`ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

144 *
c⁄f
);

145 *
	`ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
,

146 
ngx_¨øy_t
 *
Êushes
,Çgx_¨øy_à*
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
);

147 *
	`ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

148 *
c⁄f
);

149 
ngx_öt_t
 
	`ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
);

152 
ngx_comm™d_t
 
ngx_hâp_log_comm™ds
[] = {

154 { 
	`ngx_°rög
("log_format"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

156 
ngx_hâp_log_£t_f‹m©
,

157 
NGX_HTTP_MAIN_CONF_OFFSET
,

159 
NULL
 },

161 { 
	`ngx_°rög
("access_log"),

162 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


163 |
NGX_HTTP_LMT_CONF
|
NGX_CONF_1MORE
,

164 
ngx_hâp_log_£t_log
,

165 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
NULL
 },

169 { 
	`ngx_°rög
("open_log_file_cache"),

170 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

171 
ngx_hâp_log_›í_fûe_ˇche
,

172 
NGX_HTTP_LOC_CONF_OFFSET
,

174 
NULL
 },

176 
ngx_nuŒ_comm™d


177 
	}
};

180 
ngx_hâp_moduÀ_t
 
	gngx_hâp_log_moduÀ_˘x
 = {

181 
NULL
,

182 
ngx_hâp_log_öô
,

184 
ngx_hâp_log_¸óã_maö_c⁄f
,

185 
NULL
,

187 
NULL
,

188 
NULL
,

190 
ngx_hâp_log_¸óã_loc_c⁄f
,

191 
ngx_hâp_log_mîge_loc_c⁄f


195 
ngx_moduÀ_t
 
	gngx_hâp_log_moduÀ
 = {

196 
NGX_MODULE_V1
,

197 &
ngx_hâp_log_moduÀ_˘x
,

198 
ngx_hâp_log_comm™ds
,

199 
NGX_HTTP_MODULE
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NGX_MODULE_V1_PADDING


211 
ngx_°r_t
 
	gngx_hâp_ac˚ss_log
 = 
ngx_°rög
(
NGX_HTTP_LOG_PATH
);

214 
ngx_°r_t
 
	gngx_hâp_comböed_fmt
 =

215 
ngx_°rög
("$remote_addr - $remote_user [$time_local] "

220 
ngx_hâp_log_v¨_t
 
	gngx_hâp_log_v¨s
[] = {

221 { 
ngx_°rög
("pùe"), 1, 
ngx_hâp_log_pùe
 },

222 { 
ngx_°rög
("time_local"), ("28/Sep/1970:12:00:00 +0600") - 1,

223 
ngx_hâp_log_time
 },

224 { 
ngx_°rög
("time_iso8601"), ("1970-09-28T12:00:00+06:00") - 1,

225 
ngx_hâp_log_iso8601
 },

226 { 
ngx_°rög
("m£c"), 
NGX_TIME_T_LEN
 + 4, 
ngx_hâp_log_m£c
 },

227 { 
ngx_°rög
("ªque°_time"), 
NGX_TIME_T_LEN
 + 4,

228 
ngx_hâp_log_ªque°_time
 },

229 { 
ngx_°rög
("°©us"), 
NGX_INT_T_LEN
, 
ngx_hâp_log_°©us
 },

230 { 
ngx_°rög
("byãs_£¡"), 
NGX_OFF_T_LEN
, 
ngx_hâp_log_byãs_£¡
 },

231 { 
ngx_°rög
("body_byãs_£¡"), 
NGX_OFF_T_LEN
,

232 
ngx_hâp_log_body_byãs_£¡
 },

233 { 
ngx_°rög
("ªque°_Àngth"), 
NGX_SIZE_T_LEN
,

234 
ngx_hâp_log_ªque°_Àngth
 },

236 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

240 
ngx_öt_t


241 
	$ngx_hâp_log_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

243 
u_ch¨
 *
löe
, *
p
;

244 
size_t
 
Àn
, 
size
;

245 
ssize_t
 
n
;

246 
ngx_°r_t
 
vÆ
;

247 
ngx_uöt_t
 
i
, 
l
;

248 
ngx_hâp_log_t
 *
log
;

249 
ngx_hâp_log_›_t
 *
›
;

250 
ngx_hâp_log_buf_t
 *
buf„r
;

251 
ngx_hâp_log_loc_c⁄f_t
 *
lcf
;

253 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

256 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

258 i‡(
lcf
->
off
) {

259  
NGX_OK
;

262 
log
 = 
lcf
->
logs
->
ñts
;

263 
l
 = 0;Ü < 
lcf
->
logs
->
√…s
;Ü++) {

265 i‡(
log
[
l
].
fûãr
) {

266 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
log
[
l
].
fûãr
, &
vÆ
Ë!
NGX_OK
) {

267  
NGX_ERROR
;

270 i‡(
vÆ
.
Àn
 =0 || (vÆ.À¿=1 && vÆ.
d©a
[0] == '0')) {

275 i‡(
	`ngx_time
(Ë=
log
[
l
].
disk_fuŒ_time
) {

286 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
log
[
l
].
f‹m©
->
Êushes
);

288 
Àn
 = 0;

289 
›
 = 
log
[
l
].
f‹m©
->
›s
->
ñts
;

290 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

291 i‡(
›
[
i
].
Àn
 == 0) {

292 
Àn
 +
›
[
i
].
	`gëÀn
(
r
, op[i].
d©a
);

295 
Àn
 +
›
[
i
].len;

299 i‡(
log
[
l
].
sy¶og_≥î
) {

302 
Àn
 += ("<255>Jan 01 00:00:00 ") - 1

303 + 
ngx_cy˛e
->
ho°«me
.
Àn
 + 1

304 + 
log
[
l
].
sy¶og_≥î
->
èg
.
Àn
 + 2;

306 
Æloc_löe
;

309 
Àn
 +
NGX_LINEFEED_SIZE
;

311 
buf„r
 = 
log
[
l
].
fûe
 ?Üog[l].fûe->
d©a
 : 
NULL
;

313 i‡(
buf„r
) {

315 i‡(
Àn
 > (
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

317 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
buf„r
->
°¨t
,

318 
buf„r
->
pos
 - buf„r->
°¨t
);

320 
buf„r
->
pos
 = buf„r->
°¨t
;

323 i‡(
Àn
 <(
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

325 
p
 = 
buf„r
->
pos
;

327 i‡(
buf„r
->
evít
 && 
p
 =buf„r->
°¨t
) {

328 
	`ngx_add_timî
(
buf„r
->
evít
, buf„r->
Êush
);

331 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

332 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

335 
	`ngx_löe„ed
(
p
);

337 
buf„r
->
pos
 = 
p
;

342 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

343 
	`ngx_dñ_timî
(
buf„r
->
evít
);

347 
Æloc_löe
:

349 
löe
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

350 i‡(
löe
 =
NULL
) {

351  
NGX_ERROR
;

354 
p
 = 
löe
;

356 i‡(
log
[
l
].
sy¶og_≥î
) {

357 
p
 = 
	`ngx_sy¶og_add_hódî
(
log
[
l
].
sy¶og_≥î
, 
löe
);

360 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

361 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

364 i‡(
log
[
l
].
sy¶og_≥î
) {

366 
size
 = 
p
 - 
löe
;

368 
n
 = 
	`ngx_sy¶og_£nd
(
log
[
l
].
sy¶og_≥î
, 
löe
, 
size
);

370 i‡(
n
 < 0) {

371 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

374 } i‡((
size_t
Ë
n
 !
size
) {

375 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

377 
n
, 
size
);

383 
	`ngx_löe„ed
(
p
);

385 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
löe
, 
p
 -Üine);

388  
NGX_OK
;

389 
	}
}

393 
	$ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
, 
u_ch¨
 *
buf
,

394 
size_t
 
Àn
)

396 
u_ch¨
 *
«me
;

397 
time_t
 
now
;

398 
ssize_t
 
n
;

399 
ngx_îr_t
 
îr
;

400 #i‡(
NGX_ZLIB
)

401 
ngx_hâp_log_buf_t
 *
buf„r
;

404 i‡(
log
->
s¸ùt
 =
NULL
) {

405 
«me
 = 
log
->
fûe
->«me.
d©a
;

407 #i‡(
NGX_ZLIB
)

408 
buf„r
 = 
log
->
fûe
->
d©a
;

410 i‡(
buf„r
 && buf„r->
gzù
) {

411 
n
 = 
	`ngx_hâp_log_gzù
(
log
->
fûe
->
fd
, 
buf
, 
Àn
, 
buf„r
->
gzù
,

412 
r
->
c⁄√˘i⁄
->
log
);

414 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

417 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

421 
«me
 = 
NULL
;

422 
n
 = 
	`ngx_hâp_log_s¸ùt_wrôe
(
r
, 
log
->
s¸ùt
, &
«me
, 
buf
, 
Àn
);

425 i‡(
n
 =(
ssize_t
Ë
Àn
) {

429 
now
 = 
	`ngx_time
();

431 i‡(
n
 == -1) {

432 
îr
 = 
ngx_î∫o
;

434 i‡(
îr
 =
NGX_ENOSPC
) {

435 
log
->
disk_fuŒ_time
 = 
now
;

438 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

439 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

440 
ngx_wrôe_fd_n
 "Åÿ\"%s\" faûed", 
«me
);

442 
log
->
îr‹_log_time
 = 
now
;

448 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

450 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

451 
«me
, 
n
, 
Àn
);

453 
log
->
îr‹_log_time
 = 
now
;

455 
	}
}

458 
ssize_t


459 
	$ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
,

460 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
)

462 
size_t
 
roŸ
;

463 
ssize_t
 
n
;

464 
ngx_°r_t
 
log
, 
∑th
;

465 
ngx_›í_fûe_öfo_t
 
of
;

466 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
;

467 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

469 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

471 i‡(!
r
->
roŸ_ã°ed
) {

475 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

477  
Àn
;

480 
∑th
.
d©a
[
roŸ
] = '\0';

482 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

484 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

485 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

486 
of
.
ã°_dú
 = 1;

487 
of
.
ã°_⁄ly
 = 1;

488 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

489 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

491 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

493  
Àn
;

496 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

497 !
NGX_OK
)

499 i‡(
of
.
îr
 == 0) {

501  
Àn
;

504 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

505 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

508  
Àn
;

511 i‡(!
of
.
is_dú
) {

512 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ENOTDIR
,

513 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

516  
Àn
;

520 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
log
, 
s¸ùt
->
Àngths
->
ñts
, 1,

521 
s¸ùt
->
vÆues
->
ñts
)

522 =
NULL
)

525  
Àn
;

528 
log
.
d©a
[log.
Àn
 - 1] = '\0';

529 *
«me
 = 
log
.
d©a
;

531 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

532 "hâ∞log \"%s\"", 
log
.
d©a
);

534 
Œcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

536 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

538 
of
.
log
 = 1;

539 
of
.
vÆid
 = 
Œcf
->
›í_fûe_ˇche_vÆid
;

540 
of
.
mö_u£s
 = 
Œcf
->
›í_fûe_ˇche_mö_u£s
;

541 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

543 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
log
, &
of
Ë!
NGX_OK
) {

545  
Àn
;

548 i‡(
	`ngx_›í_ˇched_fûe
(
Œcf
->
›í_fûe_ˇche
, &
log
, &
of
, 
r
->
poﬁ
)

549 !
NGX_OK
)

551 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

552 "%†\"%s\" faûed", 
of
.
Áûed
, 
log
.
d©a
);

554  
Àn
;

557 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

558 "hâ∞log #%d", 
of
.
fd
);

560 
n
 = 
	`ngx_wrôe_fd
(
of
.
fd
, 
buf
, 
Àn
);

562  
n
;

563 
	}
}

566 #i‡(
NGX_ZLIB
)

568 
ssize_t


569 
	$ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
, 
ngx_öt_t
 
Àvñ
,

570 
ngx_log_t
 *
log
)

572 
rc
, 
wbôs
, 
memÀvñ
;

573 
u_ch¨
 *
out
;

574 
size_t
 
size
;

575 
ssize_t
 
n
;

576 
z_°ªam
 
z°ªam
;

577 
ngx_îr_t
 
îr
;

578 
ngx_poﬁ_t
 *
poﬁ
;

580 
wbôs
 = 
MAX_WBITS
;

581 
memÀvñ
 = 
MAX_MEM_LEVEL
 - 1;

583 (
ssize_t
Ë
Àn
 < ((1 << (
wbôs
 - 1)) - 262)) {

584 
wbôs
--;

585 
memÀvñ
--;

593 
size
 = 
Àn
 + ((len + 7) >> 3) + ((len + 63) >> 6) + 5 + 18;

595 
	`ngx_memzîo
(&
z°ªam
, (
z_°ªam
));

597 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(256, 
log
);

598 i‡(
poﬁ
 =
NULL
) {

600  
Àn
;

603 
poﬁ
->
log
 =Üog;

605 
z°ªam
.
zÆloc
 = 
ngx_hâp_log_gzù_Æloc
;

606 
z°ªam
.
z‰ì
 = 
ngx_hâp_log_gzù_‰ì
;

607 
z°ªam
.
›aque
 = 
poﬁ
;

609 
out
 = 
	`ngx_≤Æloc
(
poﬁ
, 
size
);

610 i‡(
out
 =
NULL
) {

611 
d⁄e
;

614 
z°ªam
.
√xt_ö
 = 
buf
;

615 
z°ªam
.
avaû_ö
 = 
Àn
;

616 
z°ªam
.
√xt_out
 = 
out
;

617 
z°ªam
.
avaû_out
 = 
size
;

619 
rc
 = 
	`deÊ©eInô2
(&
z°ªam
, (Ë
Àvñ
, 
Z_DEFLATED
, 
wbôs
 + 16, 
memÀvñ
,

620 
Z_DEFAULT_STRATEGY
);

622 i‡(
rc
 !
Z_OK
) {

623 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eInô2(ËÁûed: %d", 
rc
);

624 
d⁄e
;

627 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

629 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

630 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
);

632 
rc
 = 
	`deÊ©e
(&
z°ªam
, 
Z_FINISH
);

634 i‡(
rc
 !
Z_STREAM_END
) {

635 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

636 "deÊ©e(Z_FINISHËÁûed: %d", 
rc
);

637 
d⁄e
;

640 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

642 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

643 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
,

644 
rc
);

646 
size
 -
z°ªam
.
avaû_out
;

648 
rc
 = 
	`deÊ©eEnd
(&
z°ªam
);

650 i‡(
rc
 !
Z_OK
) {

651 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eEnd(ËÁûed: %d", 
rc
);

652 
d⁄e
;

655 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
out
, 
size
);

657 i‡(
n
 !(
ssize_t
Ë
size
) {

658 
îr
 = (
n
 =-1Ë? 
ngx_î∫o
 : 0;

660 
	`ngx_de°roy_poﬁ
(
poﬁ
);

662 
	`ngx_£t_î∫o
(
îr
);

666 
d⁄e
:

668 
	`ngx_de°roy_poﬁ
(
poﬁ
);

671  
Àn
;

672 
	}
}

676 
	$ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

678 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

680 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

681 "gzùáŒoc:Ç:%ud s:%ud", 
ôems
, 
size
);

683  
	`ngx_∑Œoc
(
poﬁ
, 
ôems
 * 
size
);

684 
	}
}

688 
	$ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
)

691 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

693 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0, "gzù fªe: %p", 
addªss
);

695 
	}
}

701 
	$ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
)

703 
size_t
 
Àn
;

704 
ssize_t
 
n
;

705 
ngx_hâp_log_buf_t
 *
buf„r
;

707 
buf„r
 = 
fûe
->
d©a
;

709 
Àn
 = 
buf„r
->
pos
 - buf„r->
°¨t
;

711 i‡(
Àn
 == 0) {

715 #i‡(
NGX_ZLIB
)

716 i‡(
buf„r
->
gzù
) {

717 
n
 = 
	`ngx_hâp_log_gzù
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
, buf„r->
gzù
, 
log
);

719 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

722 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

725 i‡(
n
 == -1) {

726 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

727 
ngx_wrôe_fd_n
 "Åo \"%s\" failed",

728 
fûe
->
«me
.
d©a
);

730 } i‡((
size_t
Ë
n
 !
Àn
) {

731 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

732 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

733 
fûe
->
«me
.
d©a
, 
n
, 
Àn
);

736 
buf„r
->
pos
 = buf„r->
°¨t
;

738 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

739 
	`ngx_dñ_timî
(
buf„r
->
evít
);

741 
	}
}

745 
	$ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
)

747 
ngx_›í_fûe_t
 *
fûe
;

748 
ngx_hâp_log_buf_t
 *
buf„r
;

750 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

753 i‡(
ev
->
timedout
) {

754 
	`ngx_hâp_log_Êush
(
ev
->
d©a
,Év->
log
);

760 
fûe
 = 
ev
->
d©a
;

761 
buf„r
 = 
fûe
->
d©a
;

763 
buf„r
->
evít
 = 
NULL
;

764 
	}
}

767 
u_ch¨
 *

768 
	$ngx_hâp_log_c›y_sh‹t
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

769 
ngx_hâp_log_›_t
 *
›
)

771 
size_t
 
Àn
;

772 
uöçå_t
 
d©a
;

774 
Àn
 = 
›
->len;

775 
d©a
 = 
›
->data;

777 
Àn
--) {

778 *
buf
++ = (
u_ch¨
Ë(
d©a
 & 0xff);

779 
d©a
 >>= 8;

782  
buf
;

783 
	}
}

786 
u_ch¨
 *

787 
	$ngx_hâp_log_c›y_l⁄g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

788 
ngx_hâp_log_›_t
 *
›
)

790  
	`ngx_˝ymem
(
buf
, (
u_ch¨
 *Ë
›
->
d©a
, op->
Àn
);

791 
	}
}

794 
u_ch¨
 *

795 
	$ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

797 i‡(
r
->
pùñöe
) {

798 *
buf
 = 'p';

800 *
buf
 = '.';

803  
buf
 + 1;

804 
	}
}

807 
u_ch¨
 *

808 
	$ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

810  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_time
.
d©a
,

811 
ngx_ˇched_hâp_log_time
.
Àn
);

812 
	}
}

814 
u_ch¨
 *

815 
	$ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

817  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

818 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

819 
	}
}

821 
u_ch¨
 *

822 
	$ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

824 
ngx_time_t
 *
ç
;

826 
ç
 = 
	`ngx_timeofday
();

828  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
);

829 
	}
}

832 
u_ch¨
 *

833 
	$ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

834 
ngx_hâp_log_›_t
 *
›
)

836 
ngx_time_t
 *
ç
;

837 
ngx_m£c_öt_t
 
ms
;

839 
ç
 = 
	`ngx_timeofday
();

841 
ms
 = (
ngx_m£c_öt_t
)

842 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

843 
ms
 = 
	`ngx_max
(ms, 0);

845  
	`ngx_•rötf
(
buf
, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000);

846 
	}
}

849 
u_ch¨
 *

850 
	$ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

852 
ngx_uöt_t
 
°©us
;

854 i‡(
r
->
îr_°©us
) {

855 
°©us
 = 
r
->
îr_°©us
;

857 } i‡(
r
->
hódîs_out
.
°©us
) {

858 
°©us
 = 
r
->
hódîs_out
.status;

860 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

861 
°©us
 = 9;

864 
°©us
 = 0;

867  
	`ngx_•rötf
(
buf
, "%03ui", 
°©us
);

868 
	}
}

871 
u_ch¨
 *

872 
	$ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

873 
ngx_hâp_log_›_t
 *
›
)

875  
	`ngx_•rötf
(
buf
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
);

876 
	}
}

884 
u_ch¨
 *

885 
	$ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

886 
ngx_hâp_log_›_t
 *
›
)

888 
off_t
 
Àngth
;

890 
Àngth
 = 
r
->
c⁄√˘i⁄
->
£¡
 -Ñ->
hódî_size
;

892 i‡(
Àngth
 > 0) {

893  
	`ngx_•rötf
(
buf
, "%O", 
Àngth
);

896 *
buf
 = '0';

898  
buf
 + 1;

899 
	}
}

902 
u_ch¨
 *

903 
	$ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

904 
ngx_hâp_log_›_t
 *
›
)

906  
	`ngx_•rötf
(
buf
, "%O", 
r
->
ªque°_Àngth
);

907 
	}
}

910 
ngx_öt_t


911 
	$ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_log_›_t
 *
›
,

912 
ngx_°r_t
 *
vÆue
)

914 
ngx_öt_t
 
ödex
;

916 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

917 i‡(
ödex
 =
NGX_ERROR
) {

918  
NGX_ERROR
;

921 
›
->
Àn
 = 0;

922 
›
->
gëÀn
 = 
ngx_hâp_log_v¨übÀ_gëÀn
;

923 
›
->
run
 = 
ngx_hâp_log_v¨übÀ
;

924 
›
->
d©a
 = 
ödex
;

926  
NGX_OK
;

927 
	}
}

930 
size_t


931 
	$ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
, 
uöçå_t
 
d©a
)

933 
uöçå_t
 
Àn
;

934 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

936 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
d©a
);

938 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

942 
Àn
 = 
	`ngx_hâp_log_esˇ≥
(
NULL
, 
vÆue
->
d©a
, value->len);

944 
vÆue
->
esˇ≥
 = 
Àn
 ? 1 : 0;

946  
vÆue
->
Àn
 +Üen * 3;

947 
	}
}

950 
u_ch¨
 *

951 
	$ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

953 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

955 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
›
->
d©a
);

957 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

958 *
buf
 = '-';

959  
buf
 + 1;

962 i‡(
vÆue
->
esˇ≥
 == 0) {

963  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

966  (
u_ch¨
 *Ë
	`ngx_hâp_log_esˇ≥
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

968 
	}
}

971 
uöçå_t


972 
	$ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

974 
ngx_uöt_t
 
n
;

975 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

977 
uöt32_t
 
esˇ≥
[] = {

996 i‡(
d°
 =
NULL
) {

1000 
n
 = 0;

1002 
size
) {

1003 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1004 
n
++;

1006 
§c
++;

1007 
size
--;

1010  (
uöçå_t
Ë
n
;

1013 
size
) {

1014 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1015 *
d°
++ = '\\';

1016 *
d°
++ = 'x';

1017 *
d°
++ = 
hex
[*
§c
 >> 4];

1018 *
d°
++ = 
hex
[*
§c
 & 0xf];

1019 
§c
++;

1022 *
d°
++ = *
§c
++;

1024 
size
--;

1027  (
uöçå_t
Ë
d°
;

1028 
	}
}

1032 
	$ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1034 
ngx_hâp_log_maö_c⁄f_t
 *
c⁄f
;

1036 
ngx_hâp_log_fmt_t
 *
fmt
;

1038 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_maö_c⁄f_t
));

1039 i‡(
c⁄f
 =
NULL
) {

1040  
NULL
;

1043 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
f‹m©s
, 
cf
->
poﬁ
, 4, (
ngx_hâp_log_fmt_t
))

1044 !
NGX_OK
)

1046  
NULL
;

1049 
fmt
 = 
	`ngx_¨øy_push
(&
c⁄f
->
f‹m©s
);

1050 i‡(
fmt
 =
NULL
) {

1051  
NULL
;

1054 
	`ngx_°r_£t
(&
fmt
->
«me
, "combined");

1056 
fmt
->
Êushes
 = 
NULL
;

1058 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

1059 i‡(
fmt
->
›s
 =
NULL
) {

1060  
NULL
;

1063  
c⁄f
;

1064 
	}
}

1068 
	$ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1070 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
;

1072 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_loc_c⁄f_t
));

1073 i‡(
c⁄f
 =
NULL
) {

1074  
NULL
;

1077 
c⁄f
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1079  
c⁄f
;

1080 
	}
}

1084 
	$ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1086 
ngx_hâp_log_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1087 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1089 
ngx_hâp_log_t
 *
log
;

1090 
ngx_hâp_log_fmt_t
 *
fmt
;

1091 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1093 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1095 
c⁄f
->
›í_fûe_ˇche
 = 
¥ev
->open_file_cache;

1096 
c⁄f
->
›í_fûe_ˇche_vÆid
 = 
¥ev
->open_file_cache_valid;

1097 
c⁄f
->
›í_fûe_ˇche_mö_u£s
 = 
¥ev
->open_file_cache_min_uses;

1099 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1100 
c⁄f
->
›í_fûe_ˇche
 = 
NULL
;

1104 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1105  
NGX_CONF_OK
;

1108 
c⁄f
->
logs
 = 
¥ev
->logs;

1109 
c⁄f
->
off
 = 
¥ev
->off;

1111 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1112  
NGX_CONF_OK
;

1115 
c⁄f
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1116 i‡(
c⁄f
->
logs
 =
NULL
) {

1117  
NGX_CONF_ERROR
;

1120 
log
 = 
	`ngx_¨øy_push
(
c⁄f
->
logs
);

1121 i‡(
log
 =
NULL
) {

1122  
NGX_CONF_ERROR
;

1125 
	`ngx_memzîo
(
log
, (
ngx_hâp_log_t
));

1127 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
ngx_hâp_ac˚ss_log
);

1128 i‡(
log
->
fûe
 =
NULL
) {

1129  
NGX_CONF_ERROR
;

1132 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1133 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1136 
log
->
f‹m©
 = &
fmt
[0];

1137 
lmcf
->
comböed_u£d
 = 1;

1139  
NGX_CONF_OK
;

1140 
	}
}

1144 
	$ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1146 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1148 
ssize_t
 
size
;

1149 
ngx_öt_t
 
gzù
;

1150 
ngx_uöt_t
 
i
, 
n
;

1151 
ngx_m£c_t
 
Êush
;

1152 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

1153 
ngx_hâp_log_t
 *
log
;

1154 
ngx_sy¶og_≥î_t
 *
≥î
;

1155 
ngx_hâp_log_buf_t
 *
buf„r
;

1156 
ngx_hâp_log_fmt_t
 *
fmt
;

1157 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1158 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1159 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1161 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1163 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1164 
Œcf
->
off
 = 1;

1165 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1166  
NGX_CONF_OK
;

1169 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1170 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

1171  
NGX_CONF_ERROR
;

1174 i‡(
Œcf
->
logs
 =
NULL
) {

1175 
Œcf
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1176 i‡(
Œcf
->
logs
 =
NULL
) {

1177  
NGX_CONF_ERROR
;

1181 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1183 
log
 = 
	`ngx_¨øy_push
(
Œcf
->
logs
);

1184 i‡(
log
 =
NULL
) {

1185  
NGX_CONF_ERROR
;

1188 
	`ngx_memzîo
(
log
, (
ngx_hâp_log_t
));

1191 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "syslog:", 7) == 0) {

1193 
≥î
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_sy¶og_≥î_t
));

1194 i‡(
≥î
 =
NULL
) {

1195  
NGX_CONF_ERROR
;

1198 i‡(
	`ngx_sy¶og_¥o˚ss_c⁄f
(
cf
, 
≥î
Ë!
NGX_CONF_OK
) {

1199  
NGX_CONF_ERROR
;

1202 
log
->
sy¶og_≥î
 = 
≥î
;

1204 
¥o˚ss_f‹m©s
;

1207 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1209 i‡(
n
 == 0) {

1210 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

1211 i‡(
log
->
fûe
 =
NULL
) {

1212  
NGX_CONF_ERROR
;

1216 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

1217  
NGX_CONF_ERROR
;

1220 
log
->
s¸ùt
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_s¸ùt_t
));

1221 i‡(
log
->
s¸ùt
 =
NULL
) {

1222  
NGX_CONF_ERROR
;

1225 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1227 
sc
.
cf
 = cf;

1228 
sc
.
sour˚
 = &
vÆue
[1];

1229 
sc
.
Àngths
 = &
log
->
s¸ùt
->lengths;

1230 
sc
.
vÆues
 = &
log
->
s¸ùt
->values;

1231 
sc
.
v¨übÀs
 = 
n
;

1232 
sc
.
com∂ëe_Àngths
 = 1;

1233 
sc
.
com∂ëe_vÆues
 = 1;

1235 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1236  
NGX_CONF_ERROR
;

1240 
¥o˚ss_f‹m©s
:

1242 i‡(
cf
->
¨gs
->
√…s
 >= 3) {

1243 
«me
 = 
vÆue
[2];

1245 i‡(
	`ngx_°rcmp
(
«me
.
d©a
, "combined") == 0) {

1246 
lmcf
->
comböed_u£d
 = 1;

1250 
	`ngx_°r_£t
(&
«me
, "combined");

1251 
lmcf
->
comböed_u£d
 = 1;

1254 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1255 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1256 i‡(
fmt
[
i
].
«me
.
Àn
 ==Çame.len

1257 && 
	`ngx_°rˇ£cmp
(
fmt
[
i
].
«me
.
d©a
,Çame.data) == 0)

1259 
log
->
f‹m©
 = &
fmt
[
i
];

1264 i‡(
log
->
f‹m©
 =
NULL
) {

1265 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1266 "unknow¿log f‹m© \"%V\"", &
«me
);

1267  
NGX_CONF_ERROR
;

1270 
size
 = 0;

1271 
Êush
 = 0;

1272 
gzù
 = 0;

1274 
i
 = 3; i < 
cf
->
¨gs
->
√…s
; i++) {

1276 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "buffer=", 7) == 0) {

1277 
s
.
Àn
 = 
vÆue
[
i
].len - 7;

1278 
s
.
d©a
 = 
vÆue
[
i
].data + 7;

1280 
size
 = 
	`ngx_∑r£_size
(&
s
);

1282 i‡(
size
 =
NGX_ERROR
 || size == 0) {

1283 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1284 "övÆid buf„∏sizê\"%V\"", &
s
);

1285  
NGX_CONF_ERROR
;

1291 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "flush=", 6) == 0) {

1292 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1293 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1295 
Êush
 = 
	`ngx_∑r£_time
(&
s
, 0);

1297 i‡(
Êush
 =(
ngx_m£c_t
Ë
NGX_ERROR
 || flush == 0) {

1298 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1299 "övÆid flushÅimê\"%V\"", &
s
);

1300  
NGX_CONF_ERROR
;

1306 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "gzip", 4) == 0

1307 && (
vÆue
[
i
].
Àn
 =4 || vÆue[i].
d©a
[4] == '='))

1309 #i‡(
NGX_ZLIB
)

1310 i‡(
size
 == 0) {

1311 
size
 = 64 * 1024;

1314 i‡(
vÆue
[
i
].
Àn
 == 4) {

1315 
gzù
 = 
Z_BEST_SPEED
;

1319 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

1320 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

1322 
gzù
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

1324 i‡(
gzù
 < 1 || gzip > 9) {

1325 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1326 "övÆid com¥essi⁄Üevñ \"%V\"", &
s
);

1327  
NGX_CONF_ERROR
;

1333 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1335  
NGX_CONF_ERROR
;

1339 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "if=", 3) == 0) {

1340 
s
.
Àn
 = 
vÆue
[
i
].len - 3;

1341 
s
.
d©a
 = 
vÆue
[
i
].data + 3;

1343 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1345 
ccv
.
cf
 = cf;

1346 
ccv
.
vÆue
 = &
s
;

1347 
ccv
.
com∂ex_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1348 (
ngx_hâp_com∂ex_vÆue_t
));

1349 i‡(
ccv
.
com∂ex_vÆue
 =
NULL
) {

1350  
NGX_CONF_ERROR
;

1353 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1354  
NGX_CONF_ERROR
;

1357 
log
->
fûãr
 = 
ccv
.
com∂ex_vÆue
;

1362 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1363 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1364  
NGX_CONF_ERROR
;

1367 i‡(
Êush
 && 
size
 == 0) {

1368 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1370 &
vÆue
[1]);

1371  
NGX_CONF_ERROR
;

1374 i‡(
size
) {

1376 i‡(
log
->
s¸ùt
) {

1377 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1379  
NGX_CONF_ERROR
;

1382 i‡(
log
->
sy¶og_≥î
) {

1383 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1385  
NGX_CONF_ERROR
;

1388 i‡(
log
->
fûe
->
d©a
) {

1389 
buf„r
 = 
log
->
fûe
->
d©a
;

1391 i‡(
buf„r
->
œ°
 - buf„r->
°¨t
 !
size


1392 || 
buf„r
->
Êush
 != flush

1393 || 
buf„r
->
gzù
 != gzip)

1395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1398 &
vÆue
[1]);

1399  
NGX_CONF_ERROR
;

1402  
NGX_CONF_OK
;

1405 
buf„r
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_buf_t
));

1406 i‡(
buf„r
 =
NULL
) {

1407  
NGX_CONF_ERROR
;

1410 
buf„r
->
°¨t
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

1411 i‡(
buf„r
->
°¨t
 =
NULL
) {

1412  
NGX_CONF_ERROR
;

1415 
buf„r
->
pos
 = buf„r->
°¨t
;

1416 
buf„r
->
œ°
 = buf„r->
°¨t
 + 
size
;

1418 i‡(
Êush
) {

1419 
buf„r
->
evít
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_t
));

1420 i‡(
buf„r
->
evít
 =
NULL
) {

1421  
NGX_CONF_ERROR
;

1424 
buf„r
->
evít
->
d©a
 = 
log
->
fûe
;

1425 
buf„r
->
evít
->
h™dÀr
 = 
ngx_hâp_log_Êush_h™dÀr
;

1426 
buf„r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

1427 
buf„r
->
evít
->
ˇn˚œbÀ
 = 1;

1429 
buf„r
->
Êush
 = flush;

1432 
buf„r
->
gzù
 = gzip;

1434 
log
->
fûe
->
Êush
 = 
ngx_hâp_log_Êush
;

1435 
log
->
fûe
->
d©a
 = 
buf„r
;

1438  
NGX_CONF_OK
;

1439 
	}
}

1443 
	$ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1445 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
 = 
c⁄f
;

1447 
ngx_°r_t
 *
vÆue
;

1448 
ngx_uöt_t
 
i
;

1449 
ngx_hâp_log_fmt_t
 *
fmt
;

1451 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1453 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1454 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1455 i‡(
fmt
[
i
].
«me
.
Àn
 =
vÆue
[1].len

1456 && 
	`ngx_°rcmp
(
fmt
[
i
].
«me
.
d©a
, 
vÆue
[1].data) == 0)

1458 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1460 &
vÆue
[1]);

1461  
NGX_CONF_ERROR
;

1465 
fmt
 = 
	`ngx_¨øy_push
(&
lmcf
->
f‹m©s
);

1466 i‡(
fmt
 =
NULL
) {

1467  
NGX_CONF_ERROR
;

1470 
fmt
->
«me
 = 
vÆue
[1];

1472 
fmt
->
Êushes
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_öt_t
));

1473 i‡(
fmt
->
Êushes
 =
NULL
) {

1474  
NGX_CONF_ERROR
;

1477 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

1478 i‡(
fmt
->
›s
 =
NULL
) {

1479  
NGX_CONF_ERROR
;

1482  
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
fmt
->
Êushes
, fmt->
›s
, cf->
¨gs
, 2);

1483 
	}
}

1487 
	$ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
Êushes
,

1488 
ngx_¨øy_t
 *
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
)

1490 
u_ch¨
 *
d©a
, *
p
, 
ch
;

1491 
size_t
 
i
, 
Àn
;

1492 
ngx_°r_t
 *
vÆue
, 
v¨
;

1493 
ngx_öt_t
 *
Êush
;

1494 
ngx_uöt_t
 
bøckë
;

1495 
ngx_hâp_log_›_t
 *
›
;

1496 
ngx_hâp_log_v¨_t
 *
v
;

1498 
vÆue
 = 
¨gs
->
ñts
;

1500  ; 
s
 < 
¨gs
->
√…s
; s++) {

1502 
i
 = 0;

1504 
i
 < 
vÆue
[
s
].
Àn
) {

1506 
›
 = 
	`ngx_¨øy_push
(
›s
);

1507 i‡(
›
 =
NULL
) {

1508  
NGX_CONF_ERROR
;

1511 
d©a
 = &
vÆue
[
s
].d©a[
i
];

1513 i‡(
vÆue
[
s
].
d©a
[
i
] == '$') {

1515 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1516 
övÆid
;

1519 i‡(
vÆue
[
s
].
d©a
[
i
] == '{') {

1520 
bøckë
 = 1;

1522 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1523 
övÆid
;

1526 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1529 
bøckë
 = 0;

1530 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1533 
v¨
.
Àn
 = 0; 
i
 < 
vÆue
[
s
].len; i++, var.len++) {

1534 
ch
 = 
vÆue
[
s
].
d©a
[
i
];

1536 i‡(
ch
 ='}' && 
bøckë
) {

1537 
i
++;

1538 
bøckë
 = 0;

1542 i‡((
ch
 >= 'A' && ch <= 'Z')

1543 || (
ch
 >= 'a' && ch <= 'z')

1544 || (
ch
 >= '0' && ch <= '9')

1545 || 
ch
 == '_')

1553 i‡(
bøckë
) {

1554 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1556 "v¨übÀ i†missög", &
v¨
);

1557  
NGX_CONF_ERROR
;

1560 i‡(
v¨
.
Àn
 == 0) {

1561 
övÆid
;

1564 
v
 = 
ngx_hâp_log_v¨s
; v->
«me
.
Àn
; v++) {

1566 i‡(
v
->
«me
.
Àn
 =
v¨
.len

1567 && 
	`ngx_°∫cmp
(
v
->
«me
.
d©a
, 
v¨
.d©a, v¨.
Àn
) == 0)

1569 
›
->
Àn
 = 
v
->len;

1570 
›
->
gëÀn
 = 
NULL
;

1571 
›
->
run
 = 
v
->run;

1572 
›
->
d©a
 = 0;

1574 
found
;

1578 i‡(
	`ngx_hâp_log_v¨übÀ_compûe
(
cf
, 
›
, &
v¨
Ë!
NGX_OK
) {

1579  
NGX_CONF_ERROR
;

1582 i‡(
Êushes
) {

1584 
Êush
 = 
	`ngx_¨øy_push
(
Êushes
);

1585 i‡(
Êush
 =
NULL
) {

1586  
NGX_CONF_ERROR
;

1589 *
Êush
 = 
›
->
d©a
;

1592 
found
:

1597 
i
++;

1599 
i
 < 
vÆue
[
s
].
Àn
 && vÆue[s].
d©a
[i] != '$') {

1600 
i
++;

1603 
Àn
 = &
vÆue
[
s
].
d©a
[
i
] - data;

1605 i‡(
Àn
) {

1607 
›
->
Àn
 =Üen;

1608 
›
->
gëÀn
 = 
NULL
;

1610 i‡(
Àn
 <(
uöçå_t
)) {

1611 
›
->
run
 = 
ngx_hâp_log_c›y_sh‹t
;

1612 
›
->
d©a
 = 0;

1614 
Àn
--) {

1615 
›
->
d©a
 <<= 8;

1616 
›
->
d©a
 |d©a[
Àn
];

1620 
›
->
run
 = 
ngx_hâp_log_c›y_l⁄g
;

1622 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1623 i‡(
p
 =
NULL
) {

1624  
NGX_CONF_ERROR
;

1627 
	`ngx_mem˝y
(
p
, 
d©a
, 
Àn
);

1628 
›
->
d©a
 = (
uöçå_t
Ë
p
;

1634  
NGX_CONF_OK
;

1636 
övÆid
:

1638 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÖ¨amëî \"%s\"", 
d©a
);

1640  
NGX_CONF_ERROR
;

1641 
	}
}

1645 
	$ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1647 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1649 
time_t
 
öa˘ive
, 
vÆid
;

1650 
ngx_°r_t
 *
vÆue
, 
s
;

1651 
ngx_öt_t
 
max
, 
mö_u£s
;

1652 
ngx_uöt_t
 
i
;

1654 i‡(
Œcf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

1658 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1660 
max
 = 0;

1661 
öa˘ive
 = 10;

1662 
vÆid
 = 60;

1663 
mö_u£s
 = 1;

1665 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1667 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

1669 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

1670 i‡(
max
 =
NGX_ERROR
) {

1671 
Áûed
;

1677 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1679 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1680 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1682 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1683 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

1684 
Áûed
;

1690 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "min_uses=", 9) == 0) {

1692 
mö_u£s
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 9, vÆue[i].
Àn
 - 9);

1693 i‡(
mö_u£s
 =
NGX_ERROR
) {

1694 
Áûed
;

1700 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "valid=", 6) == 0) {

1702 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1703 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1705 
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

1706 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

1707 
Áûed
;

1713 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1715 
Œcf
->
›í_fûe_ˇche
 = 
NULL
;

1720 
Áûed
:

1722 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1724 &
vÆue
[
i
]);

1725  
NGX_CONF_ERROR
;

1728 i‡(
Œcf
->
›í_fûe_ˇche
 =
NULL
) {

1729  
NGX_CONF_OK
;

1732 i‡(
max
 == 0) {

1733 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1735  
NGX_CONF_ERROR
;

1738 
Œcf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

1740 i‡(
Œcf
->
›í_fûe_ˇche
) {

1742 
Œcf
->
›í_fûe_ˇche_vÆid
 = 
vÆid
;

1743 
Œcf
->
›í_fûe_ˇche_mö_u£s
 = 
mö_u£s
;

1745  
NGX_CONF_OK
;

1748  
NGX_CONF_ERROR
;

1749 
	}
}

1752 
ngx_öt_t


1753 
	$ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
)

1755 
ngx_°r_t
 *
vÆue
;

1756 
ngx_¨øy_t
 
a
;

1757 
ngx_hâp_h™dÀr_±
 *
h
;

1758 
ngx_hâp_log_fmt_t
 *
fmt
;

1759 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1760 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1762 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1764 i‡(
lmcf
->
comböed_u£d
) {

1765 i‡(
	`ngx_¨øy_öô
(&
a
, 
cf
->
poﬁ
, 1, (
ngx_°r_t
)Ë!
NGX_OK
) {

1766  
NGX_ERROR
;

1769 
vÆue
 = 
	`ngx_¨øy_push
(&
a
);

1770 i‡(
vÆue
 =
NULL
) {

1771  
NGX_ERROR
;

1774 *
vÆue
 = 
ngx_hâp_comböed_fmt
;

1775 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1777 i‡(
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
NULL
, 
fmt
->
›s
, &
a
, 0)

1778 !
NGX_CONF_OK
)

1780  
NGX_ERROR
;

1784 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1786 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
);

1787 i‡(
h
 =
NULL
) {

1788  
NGX_ERROR
;

1791 *
h
 = 
ngx_hâp_log_h™dÀr
;

1793  
NGX_OK
;

1794 
	}
}

	@src/http/modules/ngx_http_map_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mhash_max_size
;

15 
ngx_uöt_t
 
	mhash_buckë_size
;

16 } 
	tngx_hâp_m≠_c⁄f_t
;

20 
ngx_hash_keys_¨øys_t
 
	mkeys
;

22 
ngx_¨øy_t
 *
	mvÆues_hash
;

23 
ngx_¨øy_t
 
	mv¨_vÆues
;

24 #i‡(
NGX_PCRE
)

25 
ngx_¨øy_t
 
	mªgexes
;

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

29 
ngx_c⁄f_t
 *
	mcf
;

30 
ngx_uöt_t
 
	mho°«mes
;

31 } 
	tngx_hâp_m≠_c⁄f_˘x_t
;

35 
ngx_hâp_m≠_t
 
	mm≠
;

36 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

38 
ngx_uöt_t
 
	mho°«mes
;

39 } 
	tngx_hâp_m≠_˘x_t
;

42 
ngx_libc_cde˛
 
ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

43 c⁄° *
two
);

44 *
ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

45 *
ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

46 *
ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

49 
ngx_comm™d_t
 
	gngx_hâp_m≠_comm™ds
[] = {

51 { 
ngx_°rög
("map"),

52 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

53 
ngx_hâp_m≠_block
,

54 
NGX_HTTP_MAIN_CONF_OFFSET
,

56 
NULL
 },

58 { 
ngx_°rög
("map_hash_max_size"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_num_¶Ÿ
,

61 
NGX_HTTP_MAIN_CONF_OFFSET
,

62 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_max_size
),

63 
NULL
 },

65 { 
ngx_°rög
("map_hash_bucket_size"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_num_¶Ÿ
,

68 
NGX_HTTP_MAIN_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_buckë_size
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_m≠_moduÀ_˘x
 = {

77 
NULL
,

78 
NULL
,

80 
ngx_hâp_m≠_¸óã_c⁄f
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL


91 
ngx_moduÀ_t
 
	gngx_hâp_m≠_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_m≠_moduÀ_˘x
,

94 
ngx_hâp_m≠_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_m≠_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

109 
uöçå_t
 
d©a
)

111 
ngx_hâp_m≠_˘x_t
 *
m≠
 = (ngx_hâp_m≠_˘x_à*Ë
d©a
;

113 
ngx_°r_t
 
vÆ
;

114 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

119 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
m≠
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

120  
NGX_ERROR
;

123 i‡(
m≠
->
ho°«mes
 && 
vÆ
.
Àn
 > 0 && vÆ.
d©a
[val.len - 1] == '.') {

124 
vÆ
.
Àn
--;

127 
vÆue
 = 
	`ngx_hâp_m≠_föd
(
r
, &
m≠
->m≠, &
vÆ
);

129 i‡(
vÆue
 =
NULL
) {

130 
vÆue
 = 
m≠
->
deÁu…_vÆue
;

133 i‡(!
vÆue
->
vÆid
) {

134 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, (
uöçå_t
ËvÆue->
d©a
);

136 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

137 
vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

141 *
v
 = *
vÆue
;

143 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

144 "hâ∞m≠: \"%v\" \"%v\"", &
vÆ
, 
v
);

146  
NGX_OK
;

147 
	}
}

151 
	$ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

153 
ngx_hâp_m≠_c⁄f_t
 *
mcf
;

155 
mcf
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_c⁄f_t
));

156 i‡(
mcf
 =
NULL
) {

157  
NULL
;

160 
mcf
->
hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

161 
mcf
->
hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

163  
mcf
;

164 
	}
}

168 
	$ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

170 
ngx_hâp_m≠_c⁄f_t
 *
mcf
 = 
c⁄f
;

172 *
rv
;

173 
ngx_°r_t
 *
vÆue
, 
«me
;

174 
ngx_c⁄f_t
 
ßve
;

175 
ngx_poﬁ_t
 *
poﬁ
;

176 
ngx_hash_öô_t
 
hash
;

177 
ngx_hâp_m≠_˘x_t
 *
m≠
;

178 
ngx_hâp_v¨übÀ_t
 *
v¨
;

179 
ngx_hâp_m≠_c⁄f_˘x_t
 
˘x
;

180 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

182 i‡(
mcf
->
hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

183 
mcf
->
hash_max_size
 = 2048;

186 i‡(
mcf
->
hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

187 
mcf
->
hash_buckë_size
 = 
ngx_ˇchñöe_size
;

190 
mcf
->
hash_buckë_size
 = 
	`ngx_Æign
(mcf->hash_bucket_size,

191 
ngx_ˇchñöe_size
);

194 
m≠
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_˘x_t
));

195 i‡(
m≠
 =
NULL
) {

196  
NGX_CONF_ERROR
;

199 
vÆue
 = 
cf
->
¨gs
->
ñts
;

201 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

203 
ccv
.
cf
 = cf;

204 
ccv
.
vÆue
 = &value[1];

205 
ccv
.
com∂ex_vÆue
 = &
m≠
->
vÆue
;

207 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

208  
NGX_CONF_ERROR
;

211 
«me
 = 
vÆue
[2];

213 i‡(
«me
.
d©a
[0] != '$') {

214 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

215 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

216  
NGX_CONF_ERROR
;

219 
«me
.
Àn
--;

220 
«me
.
d©a
++;

222 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

223 i‡(
v¨
 =
NULL
) {

224  
NGX_CONF_ERROR
;

227 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_m≠_v¨übÀ
;

228 
v¨
->
d©a
 = (
uöçå_t
Ë
m≠
;

230 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

231 i‡(
poﬁ
 =
NULL
) {

232  
NGX_CONF_ERROR
;

235 
˘x
.
keys
.
poﬁ
 = 
cf
->pool;

236 
˘x
.
keys
.
ãmp_poﬁ
 = 
poﬁ
;

238 i‡(
	`ngx_hash_keys_¨øy_öô
(&
˘x
.
keys
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

239 
	`ngx_de°roy_poﬁ
(
poﬁ
);

240  
NGX_CONF_ERROR
;

243 
˘x
.
vÆues_hash
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_¨øy_t
Ë* ctx.
keys
.
hsize
);

244 i‡(
˘x
.
vÆues_hash
 =
NULL
) {

245 
	`ngx_de°roy_poﬁ
(
poﬁ
);

246  
NGX_CONF_ERROR
;

249 i‡(
	`ngx_¨øy_öô
(&
˘x
.
v¨_vÆues
, 
cf
->
poﬁ
, 2,

250 (
ngx_hâp_v¨übÀ_vÆue_t
))

251 !
NGX_OK
)

253 
	`ngx_de°roy_poﬁ
(
poﬁ
);

254  
NGX_CONF_ERROR
;

257 #i‡(
NGX_PCRE
)

258 i‡(
	`ngx_¨øy_öô
(&
˘x
.
ªgexes
, 
cf
->
poﬁ
, 2, (
ngx_hâp_m≠_ªgex_t
))

259 !
NGX_OK
)

261 
	`ngx_de°roy_poﬁ
(
poﬁ
);

262  
NGX_CONF_ERROR
;

266 
˘x
.
deÁu…_vÆue
 = 
NULL
;

267 
˘x
.
cf
 = &
ßve
;

268 
˘x
.
ho°«mes
 = 0;

270 
ßve
 = *
cf
;

271 
cf
->
poﬁ
 =Öool;

272 
cf
->
˘x
 = &ctx;

273 
cf
->
h™dÀr
 = 
ngx_hâp_m≠
;

274 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

278 *
cf
 = 
ßve
;

280 i‡(
rv
 !
NGX_CONF_OK
) {

281 
	`ngx_de°roy_poﬁ
(
poﬁ
);

282  
rv
;

285 
m≠
->
deÁu…_vÆue
 = 
˘x
.default_value ? ctx.default_value:

286 &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

288 
m≠
->
ho°«mes
 = 
˘x
.hostnames;

290 
hash
.
key
 = 
ngx_hash_key_lc
;

291 
hash
.
max_size
 = 
mcf
->
hash_max_size
;

292 
hash
.
buckë_size
 = 
mcf
->
hash_buckë_size
;

293 
hash
.
«me
 = "map_hash";

294 
hash
.
poﬁ
 = 
cf
->pool;

296 i‡(
˘x
.
keys
.keys.
√…s
) {

297 
hash
.hash = &
m≠
->map.hash.hash;

298 
hash
.
ãmp_poﬁ
 = 
NULL
;

300 i‡(
	`ngx_hash_öô
(&
hash
, 
˘x
.
keys
.keys.
ñts
, ctx.keys.keys.
√…s
)

301 !
NGX_OK
)

303 
	`ngx_de°roy_poﬁ
(
poﬁ
);

304  
NGX_CONF_ERROR
;

308 i‡(
˘x
.
keys
.
dns_wc_hód
.
√…s
) {

310 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_hód
.
ñts
,

311 (
size_t
Ë
˘x
.
keys
.
dns_wc_hód
.
√…s
,

312 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

314 
hash
.hash = 
NULL
;

315 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

317 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_hód
.
ñts
,

318 
˘x
.
keys
.
dns_wc_hód
.
√…s
)

319 !
NGX_OK
)

321 
	`ngx_de°roy_poﬁ
(
poﬁ
);

322  
NGX_CONF_ERROR
;

325 
m≠
->m≠.
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

328 i‡(
˘x
.
keys
.
dns_wc_èû
.
√…s
) {

330 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_èû
.
ñts
,

331 (
size_t
Ë
˘x
.
keys
.
dns_wc_èû
.
√…s
,

332 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

334 
hash
.hash = 
NULL
;

335 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

337 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_èû
.
ñts
,

338 
˘x
.
keys
.
dns_wc_èû
.
√…s
)

339 !
NGX_OK
)

341 
	`ngx_de°roy_poﬁ
(
poﬁ
);

342  
NGX_CONF_ERROR
;

345 
m≠
->m≠.
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

348 #i‡(
NGX_PCRE
)

350 i‡(
˘x
.
ªgexes
.
√…s
) {

351 
m≠
->m≠.
ªgex
 = 
˘x
.
ªgexes
.
ñts
;

352 
m≠
->m≠.
ƒegex
 = 
˘x
.
ªgexes
.
√…s
;

357 
	`ngx_de°roy_poﬁ
(
poﬁ
);

359  
rv
;

360 
	}
}

363 
ngx_libc_cde˛


364 
	$ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

366 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

368 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

369 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

371  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

372 
	}
}

376 
	$ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

378 
ngx_öt_t
 
rc
, 
ödex
;

379 
ngx_°r_t
 *
vÆue
, 
«me
;

380 
ngx_uöt_t
 
i
, 
key
;

381 
ngx_hâp_m≠_c⁄f_˘x_t
 *
˘x
;

382 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨
, **
vp
;

384 
˘x
 = 
cf
->ctx;

386 
vÆue
 = 
cf
->
¨gs
->
ñts
;

388 i‡(
cf
->
¨gs
->
√…s
 == 1

389 && 
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "hostnames") == 0)

391 
˘x
->
ho°«mes
 = 1;

392  
NGX_CONF_OK
;

394 } i‡(
cf
->
¨gs
->
√…s
 != 2) {

395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

397  
NGX_CONF_ERROR
;

400 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

401  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

404 i‡(
vÆue
[1].
d©a
[0] == '$') {

405 
«me
 = 
vÆue
[1];

406 
«me
.
Àn
--;

407 
«me
.
d©a
++;

409 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
˘x
->
cf
, &
«me
);

410 i‡(
ödex
 =
NGX_ERROR
) {

411  
NGX_CONF_ERROR
;

414 
v¨
 = 
˘x
->
v¨_vÆues
.
ñts
;

416 
i
 = 0; i < 
˘x
->
v¨_vÆues
.
√…s
; i++) {

417 i‡(
ödex
 =(
öçå_t
Ë
v¨
[
i
].
d©a
) {

418 
v¨
 = &v¨[
i
];

419 
found
;

423 
v¨
 = 
	`ngx_¨øy_push
(&
˘x
->
v¨_vÆues
);

424 i‡(
v¨
 =
NULL
) {

425  
NGX_CONF_ERROR
;

428 
v¨
->
vÆid
 = 0;

429 
v¨
->
no_ˇchóbÀ
 = 0;

430 
v¨
->
nŸ_found
 = 0;

431 
v¨
->
Àn
 = 0;

432 
v¨
->
d©a
 = (
u_ch¨
 *Ë(
öçå_t
Ë
ödex
;

434 
found
;

437 
key
 = 0;

439 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

440 
key
 = 
	`ngx_hash
(key, 
vÆue
[1].
d©a
[
i
]);

443 
key
 %
˘x
->
keys
.
hsize
;

445 
vp
 = 
˘x
->
vÆues_hash
[
key
].
ñts
;

447 i‡(
vp
) {

448 
i
 = 0; i < 
˘x
->
vÆues_hash
[
key
].
√…s
; i++) {

449 i‡(
vÆue
[1].
Àn
 !(
size_t
Ë
vp
[
i
]->len) {

453 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, 
vp
[
i
]->d©a, vÆue[1].
Àn
) == 0) {

454 
v¨
 = 
vp
[
i
];

455 
found
;

460 i‡(
	`ngx_¨øy_öô
(&
˘x
->
vÆues_hash
[
key
], 
cf
->
poﬁ
, 4,

461 (
ngx_hâp_v¨übÀ_vÆue_t
 *))

462 !
NGX_OK
)

464  
NGX_CONF_ERROR
;

468 
v¨
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

469 i‡(
v¨
 =
NULL
) {

470  
NGX_CONF_ERROR
;

473 
v¨
->
Àn
 = 
vÆue
[1].len;

474 
v¨
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
keys
.
poﬁ
, &
vÆue
[1]);

475 i‡(
v¨
->
d©a
 =
NULL
) {

476  
NGX_CONF_ERROR
;

479 
v¨
->
vÆid
 = 1;

480 
v¨
->
no_ˇchóbÀ
 = 0;

481 
v¨
->
nŸ_found
 = 0;

483 
vp
 = 
	`ngx_¨øy_push
(&
˘x
->
vÆues_hash
[
key
]);

484 i‡(
vp
 =
NULL
) {

485  
NGX_CONF_ERROR
;

488 *
vp
 = 
v¨
;

490 
found
:

492 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

494 i‡(
˘x
->
deÁu…_vÆue
) {

495 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

497  
NGX_CONF_ERROR
;

500 
˘x
->
deÁu…_vÆue
 = 
v¨
;

502  
NGX_CONF_OK
;

505 #i‡(
NGX_PCRE
)

507 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '~') {

508 
ngx_ªgex_compûe_t
 
rc
;

509 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

510 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

512 
ªgex
 = 
	`ngx_¨øy_push
(&
˘x
->
ªgexes
);

513 i‡(
ªgex
 =
NULL
) {

514  
NGX_CONF_ERROR
;

517 
vÆue
[0].
Àn
--;

518 
vÆue
[0].
d©a
++;

520 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

522 i‡(
vÆue
[0].
d©a
[0] == '*') {

523 
vÆue
[0].
Àn
--;

524 
vÆue
[0].
d©a
++;

525 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

528 
rc
.
∑âîn
 = 
vÆue
[0];

529 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

530 
rc
.
îr
.
d©a
 = 
îr°r
;

532 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
˘x
->
cf
, &
rc
);

533 i‡(
ªgex
->ªgex =
NULL
) {

534  
NGX_CONF_ERROR
;

537 
ªgex
->
vÆue
 = 
v¨
;

539  
NGX_CONF_OK
;

544 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '\\') {

545 
vÆue
[0].
Àn
--;

546 
vÆue
[0].
d©a
++;

549 
rc
 = 
	`ngx_hash_add_key
(&
˘x
->
keys
, &
vÆue
[0], 
v¨
,

550 (
˘x
->
ho°«mes
Ë? 
NGX_HASH_WILDCARD_KEY
 : 0);

552 i‡(
rc
 =
NGX_OK
) {

553  
NGX_CONF_OK
;

556 i‡(
rc
 =
NGX_DECLINED
) {

557 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

558 "övÆid ho°«mê‹ wûdˇrd \"%V\"", &
vÆue
[0]);

561 i‡(
rc
 =
NGX_BUSY
) {

562 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

563 "c⁄Êi˘ögÖ¨amëî \"%V\"", &
vÆue
[0]);

566  
NGX_CONF_ERROR
;

567 
	}
}

	@src/http/modules/ngx_http_memcached_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

15 
ngx_öt_t
 
	mödex
;

16 
ngx_uöt_t
 
	mgzù_Êag
;

17 } 
	tngx_hâp_memˇched_loc_c⁄f_t
;

21 
size_t
 
	mª°
;

22 
ngx_hâp_ªque°_t
 *
	mªque°
;

23 
ngx_°r_t
 
	mkey
;

24 } 
	tngx_hâp_memˇched_˘x_t
;

27 
ngx_öt_t
 
ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

28 
ngx_öt_t
 
ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

30 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr_öô
(*
d©a
);

31 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
);

32 
ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

33 
ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

34 
ngx_öt_t
 
rc
);

36 *
ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

37 *
ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

38 *
∑ª¡
, *
chûd
);

40 *
ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
c⁄f
);

44 
ngx_c⁄f_bômask_t
 
	gngx_hâp_memˇched_√xt_up°ªam_masks
[] = {

45 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

46 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

47 { 
ngx_°rög
("övÆid_ª•⁄£"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

48 { 
ngx_°rög
("nŸ_found"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

49 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

50 { 
ngx_nuŒ_°rög
, 0 }

54 
ngx_comm™d_t
 
	gngx_hâp_memˇched_comm™ds
[] = {

56 { 
ngx_°rög
("memcached_pass"),

57 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_hâp_memˇched_∑ss
,

59 
NGX_HTTP_LOC_CONF_OFFSET
,

61 
NULL
 },

63 { 
ngx_°rög
("memcached_bind"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

68 
NULL
 },

70 { 
ngx_°rög
("memcached_connect_timeout"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_m£c_¶Ÿ
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

75 
NULL
 },

77 { 
ngx_°rög
("memcached_send_timeout"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_m£c_¶Ÿ
,

80 
NGX_HTTP_LOC_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

82 
NULL
 },

84 { 
ngx_°rög
("memcached_buffer_size"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_size_¶Ÿ
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

88 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

89 
NULL
 },

91 { 
ngx_°rög
("memcached_read_timeout"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_c⁄f_£t_m£c_¶Ÿ
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

95 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

96 
NULL
 },

98 { 
ngx_°rög
("memcached_next_upstream"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

100 
ngx_c⁄f_£t_bômask_¶Ÿ
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

102 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

103 &
ngx_hâp_memˇched_√xt_up°ªam_masks
 },

105 { 
ngx_°rög
("memcached_next_upstream_tries"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_c⁄f_£t_num_¶Ÿ
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

109 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

110 
NULL
 },

112 { 
ngx_°rög
("memcached_next_upstream_timeout"),

113 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

114 
ngx_c⁄f_£t_m£c_¶Ÿ
,

115 
NGX_HTTP_LOC_CONF_OFFSET
,

116 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

117 
NULL
 },

119 { 
ngx_°rög
("memcached_gzip_flag"),

120 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

121 
ngx_c⁄f_£t_num_¶Ÿ
,

122 
NGX_HTTP_LOC_CONF_OFFSET
,

123 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
gzù_Êag
),

124 
NULL
 },

126 
ngx_nuŒ_comm™d


130 
ngx_hâp_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ_˘x
 = {

131 
NULL
,

132 
NULL
,

134 
NULL
,

135 
NULL
,

137 
NULL
,

138 
NULL
,

140 
ngx_hâp_memˇched_¸óã_loc_c⁄f
,

141 
ngx_hâp_memˇched_mîge_loc_c⁄f


145 
ngx_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ
 = {

146 
NGX_MODULE_V1
,

147 &
ngx_hâp_memˇched_moduÀ_˘x
,

148 
ngx_hâp_memˇched_comm™ds
,

149 
NGX_HTTP_MODULE
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NULL
,

154 
NULL
,

155 
NULL
,

156 
NULL
,

157 
NGX_MODULE_V1_PADDING


161 
ngx_°r_t
 
	gngx_hâp_memˇched_key
 = 
ngx_°rög
("memcached_key");

164 
	#NGX_HTTP_MEMCACHED_END
 ((
ngx_hâp_memˇched_íd
Ë- 1)

	)

165 
u_ch¨
 
	gngx_hâp_memˇched_íd
[] = 
CRLF
 "END" CRLF;

168 
ngx_öt_t


169 
	$ngx_hâp_memˇched_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

171 
ngx_öt_t
 
rc
;

172 
ngx_hâp_up°ªam_t
 *
u
;

173 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

174 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

176 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

177  
NGX_HTTP_NOT_ALLOWED
;

180 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

182 i‡(
rc
 !
NGX_OK
) {

183  
rc
;

186 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

187  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

190 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

191  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

194 
u
 = 
r
->
up°ªam
;

196 
	`ngx_°r_£t
(&
u
->
schema
, "memcached://");

197 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_memˇched_moduÀ
;

199 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

201 
u
->
c⁄f
 = &
mlcf
->
up°ªam
;

203 
u
->
¸óã_ªque°
 = 
ngx_hâp_memˇched_¸óã_ªque°
;

204 
u
->
ªöô_ªque°
 = 
ngx_hâp_memˇched_ªöô_ªque°
;

205 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_memˇched_¥o˚ss_hódî
;

206 
u
->
ab‹t_ªque°
 = 
ngx_hâp_memˇched_ab‹t_ªque°
;

207 
u
->
föÆize_ªque°
 = 
ngx_hâp_memˇched_föÆize_ªque°
;

209 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_memˇched_˘x_t
));

210 i‡(
˘x
 =
NULL
) {

211  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

214 
˘x
->
ªque°
 = 
r
;

216 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_memˇched_moduÀ
);

218 
u
->
öput_fûãr_öô
 = 
ngx_hâp_memˇched_fûãr_öô
;

219 
u
->
öput_fûãr
 = 
ngx_hâp_memˇched_fûãr
;

220 
u
->
öput_fûãr_˘x
 = 
˘x
;

222 
r
->
maö
->
cou¡
++;

224 
	`ngx_hâp_up°ªam_öô
(
r
);

226  
NGX_DONE
;

227 
	}
}

230 
ngx_öt_t


231 
	$ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

233 
size_t
 
Àn
;

234 
uöçå_t
 
esˇ≥
;

235 
ngx_buf_t
 *
b
;

236 
ngx_chaö_t
 *
˛
;

237 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

238 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

239 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

241 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

243 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
mlcf
->
ödex
);

245 i‡(
vv
 =
NULL
 || vv->
nŸ_found
 || vv->
Àn
 == 0) {

246 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

248  
NGX_ERROR
;

251 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vv
->
d©a
, vv->
Àn
, 
NGX_ESCAPE_MEMCACHED
);

253 
Àn
 = ("gë "Ë- 1 + 
vv
->À¿+ 
esˇ≥
 + (
CRLF
) - 1;

255 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

256 i‡(
b
 =
NULL
) {

257  
NGX_ERROR
;

260 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

261 i‡(
˛
 =
NULL
) {

262  
NGX_ERROR
;

265 
˛
->
buf
 = 
b
;

266 
˛
->
√xt
 = 
NULL
;

268 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

270 *
b
->
œ°
++ = 'g'; *b->last++ = 'e'; *b->last++ = 't'; *b->last++ = ' ';

272 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

274 
˘x
->
key
.
d©a
 = 
b
->
œ°
;

276 i‡(
esˇ≥
 == 0) {

277 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
vv
->
d©a
, vv->
Àn
);

280 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
(b->œ°, 
vv
->
d©a
, vv->
Àn
,

281 
NGX_ESCAPE_MEMCACHED
);

284 
˘x
->
key
.
Àn
 = 
b
->
œ°
 - ctx->key.
d©a
;

286 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

287 "hâ∞memˇchedÑeque°: \"%V\"", &
˘x
->
key
);

289 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

291  
NGX_OK
;

292 
	}
}

295 
ngx_öt_t


296 
	$ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

298  
NGX_OK
;

299 
	}
}

302 
ngx_öt_t


303 
	$ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

305 
u_ch¨
 *
p
, *
°¨t
;

306 
ngx_°r_t
 
löe
;

307 
ngx_uöt_t
 
Êags
;

308 
ngx_èbÀ_ñt_t
 *
h
;

309 
ngx_hâp_up°ªam_t
 *
u
;

310 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

311 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

313 
u
 = 
r
->
up°ªam
;

315 
p
 = 
u
->
buf„r
.
pos
;Ö < u->buf„r.
œ°
;Ö++) {

316 i‡(*
p
 =
LF
) {

317 
found
;

321  
NGX_AGAIN
;

323 
found
:

325 
löe
.
d©a
 = 
u
->
buf„r
.
pos
;

326 
löe
.
Àn
 = 
p
 - 
u
->
buf„r
.
pos
;

328 i‡(
löe
.
Àn
 =0 || *(
p
 - 1Ë!
CR
) {

329 
no_vÆid
;

332 *
p
 = '\0';

333 
löe
.
Àn
--;

335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

336 "memˇched: \"%V\"", &
löe
);

338 
p
 = 
u
->
buf„r
.
pos
;

340 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

341 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

343 i‡(
	`ngx_°∫cmp
(
p
, "VALUE ", ("VALUE ") - 1) == 0) {

345 
p
 += ("VALUE ") - 1;

347 i‡(
	`ngx_°∫cmp
(
p
, 
˘x
->
key
.
d©a
, ctx->key.
Àn
) != 0) {

348 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

351 &
löe
, &
˘x
->
key
);

353  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

356 
p
 +
˘x
->
key
.
Àn
;

358 i‡(*
p
++ != ' ') {

359 
no_vÆid
;

364 
°¨t
 = 
p
;

366 *
p
) {

367 i‡(*
p
++ == ' ') {

368 i‡(
mlcf
->
gzù_Êag
) {

369 
Êags
;

371 
Àngth
;

376 
no_vÆid
;

378 
Êags
:

380 
Êags
 = 
	`ngx_©oi
(
°¨t
, 
p
 - start - 1);

382 i‡(
Êags
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

383 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

386 &
löe
, &
˘x
->
key
);

387  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

390 i‡(
Êags
 & 
mlcf
->
gzù_Êag
) {

391 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

392 i‡(
h
 =
NULL
) {

393  
NGX_ERROR
;

396 
h
->
hash
 = 1;

397 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

398 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

399 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

402 
Àngth
:

404 
°¨t
 = 
p
;

405 
p
 = 
löe
.
d©a
 +Üöe.
Àn
;

407 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
°¨t
, 
p
 - start);

408 i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
NGX_ERROR
) {

409 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

412 &
löe
, &
˘x
->
key
);

413  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

416 
u
->
hódîs_ö
.
°©us_n
 = 200;

417 
u
->
°©e
->
°©us
 = 200;

418 
u
->
buf„r
.
pos
 = 
p
 + (
CRLF
) - 1;

420  
NGX_OK
;

423 i‡(
	`ngx_°rcmp
(
p
, "END\x0d") == 0) {

424 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

425 "key: \"%V\" wa†nŸ found by memˇched", &
˘x
->
key
);

427 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

428 
u
->
hódîs_ö
.
°©us_n
 = 404;

429 
u
->
°©e
->
°©us
 = 404;

430 
u
->
buf„r
.
pos
 = 
p
 + ("END" 
CRLF
) - 1;

431 
u
->
kì∑live
 = 1;

433  
NGX_OK
;

436 
no_vÆid
:

438 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

439 "memˇched síàövÆidÑe•⁄£: \"%V\"", &
löe
);

441  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

442 
	}
}

445 
ngx_öt_t


446 
	$ngx_hâp_memˇched_fûãr_öô
(*
d©a
)

448 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

450 
ngx_hâp_up°ªam_t
 *
u
;

452 
u
 = 
˘x
->
ªque°
->
up°ªam
;

454 i‡(
u
->
hódîs_ö
.
°©us_n
 != 404) {

455 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
 + 
NGX_HTTP_MEMCACHED_END
;

456 
˘x
->
ª°
 = 
NGX_HTTP_MEMCACHED_END
;

459 
u
->
Àngth
 = 0;

462  
NGX_OK
;

463 
	}
}

466 
ngx_öt_t


467 
	$ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

469 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

471 
u_ch¨
 *
œ°
;

472 
ngx_buf_t
 *
b
;

473 
ngx_chaö_t
 *
˛
, **
Œ
;

474 
ngx_hâp_up°ªam_t
 *
u
;

476 
u
 = 
˘x
->
ªque°
->
up°ªam
;

477 
b
 = &
u
->
buf„r
;

479 i‡(
u
->
Àngth
 =(
ssize_t
Ë
˘x
->
ª°
) {

481 i‡(
	`ngx_°∫cmp
(
b
->
œ°
,

482 
ngx_hâp_memˇched_íd
 + 
NGX_HTTP_MEMCACHED_END
 - 
˘x
->
ª°
,

483 
byãs
)

486 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

489 
u
->
Àngth
 = 0;

490 
˘x
->
ª°
 = 0;

492  
NGX_OK
;

495 
u
->
Àngth
 -
byãs
;

496 
˘x
->
ª°
 -
byãs
;

498 i‡(
u
->
Àngth
 == 0) {

499 
u
->
kì∑live
 = 1;

502  
NGX_OK
;

505 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

506 
Œ
 = &
˛
->
√xt
;

509 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
˘x
->
ªque°
->
poﬁ
, &
u
->
‰ì_bufs
);

510 i‡(
˛
 =
NULL
) {

511  
NGX_ERROR
;

514 
˛
->
buf
->
Êush
 = 1;

515 
˛
->
buf
->
mem‹y
 = 1;

517 *
Œ
 = 
˛
;

519 
œ°
 = 
b
->last;

520 
˛
->
buf
->
pos
 = 
œ°
;

521 
b
->
œ°
 +
byãs
;

522 
˛
->
buf
->
œ°
 = 
b
->last;

523 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

525 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

527 
byãs
, 
b
->
œ°
 - b->
pos
, 
u
->
Àngth
, 
˘x
->
ª°
);

529 i‡(
byãs
 <(
ssize_t
Ë(
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
)) {

530 
u
->
Àngth
 -
byãs
;

531  
NGX_OK
;

534 
œ°
 +(
size_t
Ë(
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
);

536 i‡(
	`ngx_°∫cmp
(
œ°
, 
ngx_hâp_memˇched_íd
, 
b
->last -Üast) != 0) {

537 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

540 
b
->
œ°
 =Üast;

541 
˛
->
buf
->
œ°
 =Üast;

542 
u
->
Àngth
 = 0;

543 
˘x
->
ª°
 = 0;

545  
NGX_OK
;

548 
˘x
->
ª°
 -
b
->
œ°
 -Üast;

549 
b
->
œ°
 =Üast;

550 
˛
->
buf
->
œ°
 =Üast;

551 
u
->
Àngth
 = 
˘x
->
ª°
;

553 i‡(
u
->
Àngth
 == 0) {

554 
u
->
kì∑live
 = 1;

557  
NGX_OK
;

558 
	}
}

562 
	$ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

564 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

567 
	}
}

571 
	$ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

573 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

576 
	}
}

580 
	$ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

582 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
;

584 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_memˇched_loc_c⁄f_t
));

585 i‡(
c⁄f
 =
NULL
) {

586  
NULL
;

599 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

600 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

601 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

602 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

603 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

604 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

606 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

609 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

610 
c⁄f
->
up°ªam
.
buf„rög
 = 0;

611 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 0;

612 
c⁄f
->
up°ªam
.
£nd_low©
 = 0;

613 
c⁄f
->
up°ªam
.
bufs
.
num
 = 0;

614 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 0;

615 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 0;

616 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 0;

617 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 1;

618 
c⁄f
->
up°ªam
.
öãr˚±_404
 = 1;

619 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 0;

620 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 0;

622 
c⁄f
->
ödex
 = 
NGX_CONF_UNSET
;

623 
c⁄f
->
gzù_Êag
 = 
NGX_CONF_UNSET_UINT
;

625  
c⁄f
;

626 
	}
}

630 
	$ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

632 
ngx_hâp_memˇched_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

633 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

635 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

636 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

638 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

639 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

641 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

642 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

644 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

645 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

647 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

648 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

650 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

651 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

653 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

654 
¥ev
->
up°ªam
.
buf„r_size
,

655 (
size_t
Ë
ngx_∑gesize
);

657 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

658 
¥ev
->
up°ªam
.
√xt_up°ªam
,

659 (
NGX_CONF_BITMASK_SET


660 |
NGX_HTTP_UPSTREAM_FT_ERROR


661 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

663 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

664 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


665 |
NGX_HTTP_UPSTREAM_FT_OFF
;

668 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

669 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

672 i‡(
c⁄f
->
ödex
 =
NGX_CONF_UNSET
) {

673 
c⁄f
->
ödex
 = 
¥ev
->index;

676 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_Êag
, 
¥ev
->gzip_flag, 0);

678  
NGX_CONF_OK
;

679 
	}
}

683 
	$ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

685 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
 = 
c⁄f
;

687 
ngx_°r_t
 *
vÆue
;

688 
ngx_uæ_t
 
u
;

689 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

691 i‡(
mlcf
->
up°ªam
.upstream) {

695 
vÆue
 = 
cf
->
¨gs
->
ñts
;

697 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

699 
u
.
uæ
 = 
vÆue
[1];

700 
u
.
no_ªsﬁve
 = 1;

702 
mlcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

703 i‡(
mlcf
->
up°ªam
.up°ªam =
NULL
) {

704  
NGX_CONF_ERROR
;

707 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

709 
˛cf
->
h™dÀr
 = 
ngx_hâp_memˇched_h™dÀr
;

711 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

712 
˛cf
->
auto_ªdúe˘
 = 1;

715 
mlcf
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_memˇched_key
);

717 i‡(
mlcf
->
ödex
 =
NGX_ERROR
) {

718  
NGX_CONF_ERROR
;

721  
NGX_CONF_OK
;

722 
	}
}

	@src/http/modules/ngx_http_mp4_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_MP4_TRAK_ATOM
 0

	)

13 
	#NGX_HTTP_MP4_TKHD_ATOM
 1

	)

14 
	#NGX_HTTP_MP4_MDIA_ATOM
 2

	)

15 
	#NGX_HTTP_MP4_MDHD_ATOM
 3

	)

16 
	#NGX_HTTP_MP4_HDLR_ATOM
 4

	)

17 
	#NGX_HTTP_MP4_MINF_ATOM
 5

	)

18 
	#NGX_HTTP_MP4_VMHD_ATOM
 6

	)

19 
	#NGX_HTTP_MP4_SMHD_ATOM
 7

	)

20 
	#NGX_HTTP_MP4_DINF_ATOM
 8

	)

21 
	#NGX_HTTP_MP4_STBL_ATOM
 9

	)

22 
	#NGX_HTTP_MP4_STSD_ATOM
 10

	)

23 
	#NGX_HTTP_MP4_STTS_ATOM
 11

	)

24 
	#NGX_HTTP_MP4_STTS_DATA
 12

	)

25 
	#NGX_HTTP_MP4_STSS_ATOM
 13

	)

26 
	#NGX_HTTP_MP4_STSS_DATA
 14

	)

27 
	#NGX_HTTP_MP4_CTTS_ATOM
 15

	)

28 
	#NGX_HTTP_MP4_CTTS_DATA
 16

	)

29 
	#NGX_HTTP_MP4_STSC_ATOM
 17

	)

30 
	#NGX_HTTP_MP4_STSC_START
 18

	)

31 
	#NGX_HTTP_MP4_STSC_DATA
 19

	)

32 
	#NGX_HTTP_MP4_STSC_END
 20

	)

33 
	#NGX_HTTP_MP4_STSZ_ATOM
 21

	)

34 
	#NGX_HTTP_MP4_STSZ_DATA
 22

	)

35 
	#NGX_HTTP_MP4_STCO_ATOM
 23

	)

36 
	#NGX_HTTP_MP4_STCO_DATA
 24

	)

37 
	#NGX_HTTP_MP4_CO64_ATOM
 25

	)

38 
	#NGX_HTTP_MP4_CO64_DATA
 26

	)

40 
	#NGX_HTTP_MP4_LAST_ATOM
 
NGX_HTTP_MP4_CO64_DATA


	)

44 
size_t
 
	mbuf„r_size
;

45 
size_t
 
	mmax_buf„r_size
;

46 } 
	tngx_hâp_mp4_c⁄f_t
;

50 
u_ch¨
 
	mchunk
[4];

51 
u_ch¨
 
	mßm∂es
[4];

52 
u_ch¨
 
	mid
[4];

53 } 
	tngx_mp4_°sc_íåy_t
;

57 
uöt32_t
 
	mtimesˇÀ
;

58 
uöt32_t
 
	mtime_to_ßm∂e_íåõs
;

59 
uöt32_t
 
	mßm∂e_to_chunk_íåõs
;

60 
uöt32_t
 
	msync_ßm∂es_íåõs
;

61 
uöt32_t
 
	mcomposôi⁄_off£t_íåõs
;

62 
uöt32_t
 
	mßm∂e_sizes_íåõs
;

63 
uöt32_t
 
	mchunks
;

65 
ngx_uöt_t
 
	m°¨t_ßm∂e
;

66 
ngx_uöt_t
 
	míd_ßm∂e
;

67 
ngx_uöt_t
 
	m°¨t_chunk
;

68 
ngx_uöt_t
 
	míd_chunk
;

69 
ngx_uöt_t
 
	m°¨t_chunk_ßm∂es
;

70 
ngx_uöt_t
 
	míd_chunk_ßm∂es
;

71 
uöt64_t
 
	m°¨t_chunk_ßm∂es_size
;

72 
uöt64_t
 
	míd_chunk_ßm∂es_size
;

73 
off_t
 
	m°¨t_off£t
;

74 
off_t
 
	míd_off£t
;

76 
size_t
 
	mtkhd_size
;

77 
size_t
 
	mmdhd_size
;

78 
size_t
 
	mhdÃ_size
;

79 
size_t
 
	mvmhd_size
;

80 
size_t
 
	msmhd_size
;

81 
size_t
 
	mdöf_size
;

82 
size_t
 
	msize
;

84 
ngx_chaö_t
 
	mout
[
NGX_HTTP_MP4_LAST_ATOM
 + 1];

86 
ngx_buf_t
 
	måak_©om_buf
;

87 
ngx_buf_t
 
	mtkhd_©om_buf
;

88 
ngx_buf_t
 
	mmdü_©om_buf
;

89 
ngx_buf_t
 
	mmdhd_©om_buf
;

90 
ngx_buf_t
 
	mhdÃ_©om_buf
;

91 
ngx_buf_t
 
	mmöf_©om_buf
;

92 
ngx_buf_t
 
	mvmhd_©om_buf
;

93 
ngx_buf_t
 
	msmhd_©om_buf
;

94 
ngx_buf_t
 
	mdöf_©om_buf
;

95 
ngx_buf_t
 
	m°bl_©om_buf
;

96 
ngx_buf_t
 
	m°sd_©om_buf
;

97 
ngx_buf_t
 
	m°ts_©om_buf
;

98 
ngx_buf_t
 
	m°ts_d©a_buf
;

99 
ngx_buf_t
 
	m°ss_©om_buf
;

100 
ngx_buf_t
 
	m°ss_d©a_buf
;

101 
ngx_buf_t
 
	m˘ts_©om_buf
;

102 
ngx_buf_t
 
	m˘ts_d©a_buf
;

103 
ngx_buf_t
 
	m°sc_©om_buf
;

104 
ngx_buf_t
 
	m°sc_°¨t_chunk_buf
;

105 
ngx_buf_t
 
	m°sc_íd_chunk_buf
;

106 
ngx_buf_t
 
	m°sc_d©a_buf
;

107 
ngx_buf_t
 
	m°sz_©om_buf
;

108 
ngx_buf_t
 
	m°sz_d©a_buf
;

109 
ngx_buf_t
 
	m°co_©om_buf
;

110 
ngx_buf_t
 
	m°co_d©a_buf
;

111 
ngx_buf_t
 
	mco64_©om_buf
;

112 
ngx_buf_t
 
	mco64_d©a_buf
;

114 
ngx_mp4_°sc_íåy_t
 
	m°sc_°¨t_chunk_íåy
;

115 
ngx_mp4_°sc_íåy_t
 
	m°sc_íd_chunk_íåy
;

116 } 
	tngx_hâp_mp4_åak_t
;

120 
ngx_fûe_t
 
	mfûe
;

122 
u_ch¨
 *
	mbuf„r
;

123 
u_ch¨
 *
	mbuf„r_°¨t
;

124 
u_ch¨
 *
	mbuf„r_pos
;

125 
u_ch¨
 *
	mbuf„r_íd
;

126 
size_t
 
	mbuf„r_size
;

128 
off_t
 
	moff£t
;

129 
off_t
 
	míd
;

130 
off_t
 
	mc⁄ã¡_Àngth
;

131 
ngx_uöt_t
 
	m°¨t
;

132 
ngx_uöt_t
 
	mÀngth
;

133 
uöt32_t
 
	mtimesˇÀ
;

134 
ngx_hâp_ªque°_t
 *
	mªque°
;

135 
ngx_¨øy_t
 
	måak
;

136 
ngx_hâp_mp4_åak_t
 
	måaks
[2];

138 
size_t
 
	m·yp_size
;

139 
size_t
 
	mmoov_size
;

141 
ngx_chaö_t
 *
	mout
;

142 
ngx_chaö_t
 
	m·yp_©om
;

143 
ngx_chaö_t
 
	mmoov_©om
;

144 
ngx_chaö_t
 
	mmvhd_©om
;

145 
ngx_chaö_t
 
	mmd©_©om
;

146 
ngx_chaö_t
 
	mmd©_d©a
;

148 
ngx_buf_t
 
	m·yp_©om_buf
;

149 
ngx_buf_t
 
	mmoov_©om_buf
;

150 
ngx_buf_t
 
	mmvhd_©om_buf
;

151 
ngx_buf_t
 
	mmd©_©om_buf
;

152 
ngx_buf_t
 
	mmd©_d©a_buf
;

154 
u_ch¨
 
	mmoov_©om_hódî
[8];

155 
u_ch¨
 
	mmd©_©om_hódî
[16];

156 } 
	tngx_hâp_mp4_fûe_t
;

160 *
	m«me
;

161 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_mp4_fûe_t
 *
	mmp4
,

162 
uöt64_t
 
	m©om_d©a_size
);

163 } 
	tngx_hâp_mp4_©om_h™dÀr_t
;

166 
	#ngx_mp4_©om_hódî
(
mp4
Ë(mp4->
buf„r_pos
 - 8)

	)

167 
	#ngx_mp4_©om_d©a
(
mp4
Ëmp4->
buf„r_pos


	)

168 
	#ngx_mp4_©om_d©a_size
(
t
Ë(
uöt64_t
Ë(—Ë- 8)

	)

171 
	#ngx_mp4_©om_√xt
(
mp4
, 
n
) \

172 
mp4
->
buf„r_pos
 +(
size_t
Ë
n
; \

173 
mp4
->
off£t
 +
n


	)

176 
	#ngx_mp4_£t_©om_«me
(
p
, 
n1
, 
n2
, 
n3
, 
n4
) \

177 ((
u_ch¨
 *Ë(
p
))[4] = 
n1
; \

178 ((
u_ch¨
 *Ë(
p
))[5] = 
n2
; \

179 ((
u_ch¨
 *Ë(
p
))[6] = 
n3
; \

180 ((
u_ch¨
 *Ë(
p
))[7] = 
n4


	)

182 
	#ngx_mp4_gë_32vÆue
(
p
) \

183 –((
uöt32_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 24) \

184 + ( ((
u_ch¨
 *Ë(
p
))[1] << 16) \

185 + ( ((
u_ch¨
 *Ë(
p
))[2] << 8) \

186 + ( ((
u_ch¨
 *Ë(
p
))[3]Ë)

	)

188 
	#ngx_mp4_£t_32vÆue
(
p
, 
n
) \

189 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
n
) >> 24); \

190 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
n
) >> 16); \

191 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
n
) >> 8); \

192 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë(
n
)

	)

194 
	#ngx_mp4_gë_64vÆue
(
p
) \

195 –((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 56) \

196 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[1] << 48) \

197 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[2] << 40) \

198 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[3] << 32) \

199 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[4] << 24) \

200 + ( ((
u_ch¨
 *Ë(
p
))[5] << 16) \

201 + ( ((
u_ch¨
 *Ë(
p
))[6] << 8) \

202 + ( ((
u_ch¨
 *Ë(
p
))[7]Ë)

	)

204 
	#ngx_mp4_£t_64vÆue
(
p
, 
n
) \

205 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 56); \

206 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 48); \

207 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 40); \

208 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 32); \

209 ((
u_ch¨
 *Ë(
p
))[4] = (u_ch¨Ë–(
n
) >> 24); \

210 ((
u_ch¨
 *Ë(
p
))[5] = (u_ch¨Ë–(
n
) >> 16); \

211 ((
u_ch¨
 *Ë(
p
))[6] = (u_ch¨Ë–(
n
) >> 8); \

212 ((
u_ch¨
 *Ë(
p
))[7] = (u_ch¨Ë(
n
)

	)

214 
	#ngx_mp4_œ°_åak
(
mp4
) \

215 &((
ngx_hâp_mp4_åak_t
 *Ë
mp4
->
åak
.
ñts
)[mp4->åak.
√…s
 - 1]

	)

218 
ngx_öt_t
 
ngx_hâp_mp4_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

220 
ngx_öt_t
 
ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
);

221 
ngx_öt_t
 
ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

222 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
);

223 
ngx_öt_t
 
ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
);

224 
ngx_öt_t
 
ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

225 
uöt64_t
 
©om_d©a_size
);

226 
ngx_öt_t
 
ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

227 
uöt64_t
 
©om_d©a_size
);

228 
ngx_öt_t
 
ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

229 
uöt64_t
 
©om_d©a_size
);

230 
size_t
 
ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

231 
off_t
 
°¨t_off£t
, off_à
íd_off£t
);

232 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

233 
uöt64_t
 
©om_d©a_size
);

234 
ngx_öt_t
 
ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

235 
uöt64_t
 
©om_d©a_size
);

236 
ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

237 
ngx_hâp_mp4_åak_t
 *
åak
);

238 
ngx_öt_t
 
ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

239 
uöt64_t
 
©om_d©a_size
);

240 
ngx_öt_t
 
ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

241 
uöt64_t
 
©om_d©a_size
);

242 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

243 
uöt64_t
 
©om_d©a_size
);

244 
ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

245 
ngx_hâp_mp4_åak_t
 *
åak
);

246 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

247 
uöt64_t
 
©om_d©a_size
);

248 
ngx_öt_t
 
ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

249 
uöt64_t
 
©om_d©a_size
);

250 
ngx_öt_t
 
ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

251 
uöt64_t
 
©om_d©a_size
);

252 
ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

253 
ngx_hâp_mp4_åak_t
 *
åak
);

254 
ngx_öt_t
 
ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

255 
uöt64_t
 
©om_d©a_size
);

256 
ngx_öt_t
 
ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

257 
uöt64_t
 
©om_d©a_size
);

258 
ngx_öt_t
 
ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

259 
uöt64_t
 
©om_d©a_size
);

260 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

261 
uöt64_t
 
©om_d©a_size
);

262 
ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

263 
ngx_hâp_mp4_åak_t
 *
åak
);

264 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

265 
uöt64_t
 
©om_d©a_size
);

266 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

267 
uöt64_t
 
©om_d©a_size
);

268 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

269 
ngx_hâp_mp4_åak_t
 *
åak
);

270 
ngx_öt_t
 
ngx_hâp_mp4_¸›_°ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

271 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

272 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

273 
uöt64_t
 
©om_d©a_size
);

274 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

275 
ngx_hâp_mp4_åak_t
 *
åak
);

276 
ngx_hâp_mp4_¸›_°ss_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

277 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

278 
ngx_öt_t
 
ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

279 
uöt64_t
 
©om_d©a_size
);

280 
ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

281 
ngx_hâp_mp4_åak_t
 *
åak
);

282 
ngx_hâp_mp4_¸›_˘ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

283 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

284 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

285 
uöt64_t
 
©om_d©a_size
);

286 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

287 
ngx_hâp_mp4_åak_t
 *
åak
);

288 
ngx_öt_t
 
ngx_hâp_mp4_¸›_°sc_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

289 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
);

290 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

291 
uöt64_t
 
©om_d©a_size
);

292 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

293 
ngx_hâp_mp4_åak_t
 *
åak
);

294 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

295 
uöt64_t
 
©om_d©a_size
);

296 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

297 
ngx_hâp_mp4_åak_t
 *
åak
);

298 
ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

299 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
);

300 
ngx_öt_t
 
ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

301 
uöt64_t
 
©om_d©a_size
);

302 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

303 
ngx_hâp_mp4_åak_t
 *
åak
);

304 
ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

305 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
);

307 *
ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

308 *
ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

309 *
ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

312 
ngx_comm™d_t
 
	gngx_hâp_mp4_comm™ds
[] = {

314 { 
ngx_°rög
("mp4"),

315 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

316 
ngx_hâp_mp4
,

319 
NULL
 },

321 { 
ngx_°rög
("mp4_buffer_size"),

322 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

323 
ngx_c⁄f_£t_size_¶Ÿ
,

324 
NGX_HTTP_LOC_CONF_OFFSET
,

325 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
buf„r_size
),

326 
NULL
 },

328 { 
ngx_°rög
("mp4_max_buffer_size"),

329 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

330 
ngx_c⁄f_£t_size_¶Ÿ
,

331 
NGX_HTTP_LOC_CONF_OFFSET
,

332 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
max_buf„r_size
),

333 
NULL
 },

335 
ngx_nuŒ_comm™d


339 
ngx_hâp_moduÀ_t
 
	gngx_hâp_mp4_moduÀ_˘x
 = {

340 
NULL
,

341 
NULL
,

343 
NULL
,

344 
NULL
,

346 
NULL
,

347 
NULL
,

349 
ngx_hâp_mp4_¸óã_c⁄f
,

350 
ngx_hâp_mp4_mîge_c⁄f


354 
ngx_moduÀ_t
 
	gngx_hâp_mp4_moduÀ
 = {

355 
NGX_MODULE_V1
,

356 &
ngx_hâp_mp4_moduÀ_˘x
,

357 
ngx_hâp_mp4_comm™ds
,

358 
NGX_HTTP_MODULE
,

359 
NULL
,

360 
NULL
,

361 
NULL
,

362 
NULL
,

363 
NULL
,

364 
NULL
,

365 
NULL
,

366 
NGX_MODULE_V1_PADDING


370 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_©oms
[] = {

371 { "·yp", 
ngx_hâp_mp4_ªad_·yp_©om
 },

372 { "moov", 
ngx_hâp_mp4_ªad_moov_©om
 },

373 { "md©", 
ngx_hâp_mp4_ªad_md©_©om
 },

374 { 
NULL
, NULL }

377 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_moov_©oms
[] = {

378 { "mvhd", 
ngx_hâp_mp4_ªad_mvhd_©om
 },

379 { "åak", 
ngx_hâp_mp4_ªad_åak_©om
 },

380 { "cmov", 
ngx_hâp_mp4_ªad_cmov_©om
 },

381 { 
NULL
, NULL }

384 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_åak_©oms
[] = {

385 { "tkhd", 
ngx_hâp_mp4_ªad_tkhd_©om
 },

386 { "mdü", 
ngx_hâp_mp4_ªad_mdü_©om
 },

387 { 
NULL
, NULL }

390 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_mdü_©oms
[] = {

391 { "mdhd", 
ngx_hâp_mp4_ªad_mdhd_©om
 },

392 { "hdÃ", 
ngx_hâp_mp4_ªad_hdÃ_©om
 },

393 { "möf", 
ngx_hâp_mp4_ªad_möf_©om
 },

394 { 
NULL
, NULL }

397 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_möf_©oms
[] = {

398 { "vmhd", 
ngx_hâp_mp4_ªad_vmhd_©om
 },

399 { "smhd", 
ngx_hâp_mp4_ªad_smhd_©om
 },

400 { "döf", 
ngx_hâp_mp4_ªad_döf_©om
 },

401 { "°bl", 
ngx_hâp_mp4_ªad_°bl_©om
 },

402 { 
NULL
, NULL }

405 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_°bl_©oms
[] = {

406 { "°sd", 
ngx_hâp_mp4_ªad_°sd_©om
 },

407 { "°ts", 
ngx_hâp_mp4_ªad_°ts_©om
 },

408 { "°ss", 
ngx_hâp_mp4_ªad_°ss_©om
 },

409 { "˘ts", 
ngx_hâp_mp4_ªad_˘ts_©om
 },

410 { "°sc", 
ngx_hâp_mp4_ªad_°sc_©om
 },

411 { "°sz", 
ngx_hâp_mp4_ªad_°sz_©om
 },

412 { "°co", 
ngx_hâp_mp4_ªad_°co_©om
 },

413 { "co64", 
ngx_hâp_mp4_ªad_co64_©om
 },

414 { 
NULL
, NULL }

418 
ngx_öt_t


419 
	$ngx_hâp_mp4_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

421 
u_ch¨
 *
œ°
;

422 
size_t
 
roŸ
;

423 
ngx_öt_t
 
rc
, 
°¨t
, 
íd
;

424 
ngx_uöt_t
 
Àvñ
, 
Àngth
;

425 
ngx_°r_t
 
∑th
, 
vÆue
;

426 
ngx_log_t
 *
log
;

427 
ngx_buf_t
 *
b
;

428 
ngx_chaö_t
 
out
;

429 
ngx_hâp_mp4_fûe_t
 *
mp4
;

430 
ngx_›í_fûe_öfo_t
 
of
;

431 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

433 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

434  
NGX_HTTP_NOT_ALLOWED
;

437 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

438  
NGX_DECLINED
;

441 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

443 i‡(
rc
 !
NGX_OK
) {

444  
rc
;

447 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

448 i‡(
œ°
 =
NULL
) {

449  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

452 
log
 = 
r
->
c⁄√˘i⁄
->log;

454 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

456 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

457 "hâ∞mp4 fûíame: \"%V\"", &
∑th
);

459 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

461 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

463 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

464 
of
.
dúe˘io
 = 
NGX_MAX_OFF_T_VALUE
;

465 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

466 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

467 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

468 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

470 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

471  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

474 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

475 !
NGX_OK
)

477 
of
.
îr
) {

480  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

482 
NGX_ENOENT
:

483 
NGX_ENOTDIR
:

484 
NGX_ENAMETOOLONG
:

486 
Àvñ
 = 
NGX_LOG_ERR
;

487 
rc
 = 
NGX_HTTP_NOT_FOUND
;

490 
NGX_EACCES
:

491 #i‡(
NGX_HAVE_OPENAT
)

492 
NGX_EMLINK
:

493 
NGX_ELOOP
:

496 
Àvñ
 = 
NGX_LOG_ERR
;

497 
rc
 = 
NGX_HTTP_FORBIDDEN
;

502 
Àvñ
 = 
NGX_LOG_CRIT
;

503 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

507 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

508 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

509 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

512  
rc
;

515 i‡(!
of
.
is_fûe
) {

517 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

518 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

519 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

522  
NGX_DECLINED
;

525 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

526 
r
->
Ælow_ønges
 = 1;

528 
°¨t
 = -1;

529 
Àngth
 = 0;

530 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

531 
mp4
 = 
NULL
;

532 
b
 = 
NULL
;

534 i‡(
r
->
¨gs
.
Àn
) {

536 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

544 
	`ngx_£t_î∫o
(0);

545 
°¨t
 = (Ë(
	`°πod
((*Ë
vÆue
.
d©a
, 
NULL
) * 1000);

547 i‡(
ngx_î∫o
 != 0) {

548 
°¨t
 = -1;

552 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"íd", 3, &
vÆue
Ë=
NGX_OK
) {

554 
	`ngx_£t_î∫o
(0);

555 
íd
 = (Ë(
	`°πod
((*Ë
vÆue
.
d©a
, 
NULL
) * 1000);

557 i‡(
ngx_î∫o
 != 0) {

558 
íd
 = -1;

561 i‡(
íd
 > 0) {

562 i‡(
°¨t
 < 0) {

563 
°¨t
 = 0;

566 i‡(
íd
 > 
°¨t
) {

567 
Àngth
 = 
íd
 - 
°¨t
;

573 i‡(
°¨t
 >= 0) {

574 
r
->
sögÀ_ønge
 = 1;

576 
mp4
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_mp4_fûe_t
));

577 i‡(
mp4
 =
NULL
) {

578  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

581 
mp4
->
fûe
.
fd
 = 
of
.fd;

582 
mp4
->
fûe
.
«me
 = 
∑th
;

583 
mp4
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

584 
mp4
->
íd
 = 
of
.
size
;

585 
mp4
->
°¨t
 = (
ngx_uöt_t
) start;

586 
mp4
->
Àngth
 =Üength;

587 
mp4
->
ªque°
 = 
r
;

589 
	`ngx_hâp_mp4_¥o˚ss
(
mp4
)) {

591 
NGX_DECLINED
:

592 i‡(
mp4
->
buf„r
) {

593 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

596 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

597 
mp4
 = 
NULL
;

601 
NGX_OK
:

602 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
mp4
->
c⁄ã¡_Àngth
;

606 i‡(
mp4
->
buf„r
) {

607 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

610 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

612  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

616 
log
->
a˘i⁄
 = "sending mp4Åo client";

618 i‡(
˛cf
->
dúe˘io
 <
of
.
size
) {

625 i‡(
	`ngx_dúe˘io_⁄
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

626 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

627 
ngx_dúe˘io_⁄_n
 " \"%s\" faûed", 
∑th
.
d©a
);

630 
of
.
is_dúe˘io
 = 1;

632 i‡(
mp4
) {

633 
mp4
->
fûe
.
dúe˘io
 = 1;

637 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

638 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

640 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

641  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

644 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

645  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

648 i‡(
mp4
 =
NULL
) {

649 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

650 i‡(
b
 =
NULL
) {

651  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

654 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

655 i‡(
b
->
fûe
 =
NULL
) {

656  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

660 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

662 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

663  
rc
;

666 i‡(
mp4
) {

667  
	`ngx_hâp_ouçut_fûãr
(
r
, 
mp4
->
out
);

670 
b
->
fûe_pos
 = 0;

671 
b
->
fûe_œ°
 = 
of
.
size
;

673 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

674 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

675 
b
->
œ°_ö_chaö
 = 1;

677 
b
->
fûe
->
fd
 = 
of
.fd;

678 
b
->
fûe
->
«me
 = 
∑th
;

679 
b
->
fûe
->
log
 =Üog;

680 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

682 
out
.
buf
 = 
b
;

683 
out
.
√xt
 = 
NULL
;

685  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

686 
	}
}

689 
ngx_öt_t


690 
	$ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
)

692 
off_t
 
°¨t_off£t
, 
íd_off£t
, 
adju°mít
;

693 
ngx_öt_t
 
rc
;

694 
ngx_uöt_t
 
i
, 
j
;

695 
ngx_chaö_t
 **
¥ev
;

696 
ngx_hâp_mp4_åak_t
 *
åak
;

697 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

699 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

700 "mp4 sèπ:%ui,Üígth:%ui", 
mp4
->
°¨t
, mp4->
Àngth
);

702 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

704 
mp4
->
buf„r_size
 = 
c⁄f
->buffer_size;

706 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_©oms
, mp4->
íd
);

707 i‡(
rc
 !
NGX_OK
) {

708  
rc
;

711 i‡(
mp4
->
åak
.
√…s
 == 0) {

712 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

714 
mp4
->
fûe
.
«me
.
d©a
);

715  
NGX_ERROR
;

718 i‡(
mp4
->
md©_©om
.
buf
 =
NULL
) {

719 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

721 
mp4
->
fûe
.
«me
.
d©a
);

722  
NGX_ERROR
;

725 
¥ev
 = &
mp4
->
out
;

727 i‡(
mp4
->
·yp_©om
.
buf
) {

728 *
¥ev
 = &
mp4
->
·yp_©om
;

729 
¥ev
 = &
mp4
->
·yp_©om
.
√xt
;

732 *
¥ev
 = &
mp4
->
moov_©om
;

733 
¥ev
 = &
mp4
->
moov_©om
.
√xt
;

735 i‡(
mp4
->
mvhd_©om
.
buf
) {

736 
mp4
->
moov_size
 +mp4->
mvhd_©om_buf
.
œ°
 - mp4->mvhd_©om_buf.
pos
;

737 *
¥ev
 = &
mp4
->
mvhd_©om
;

738 
¥ev
 = &
mp4
->
mvhd_©om
.
√xt
;

741 
°¨t_off£t
 = 
mp4
->
íd
;

742 
íd_off£t
 = 0;

743 
åak
 = 
mp4
->åak.
ñts
;

745 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

747 i‡(
	`ngx_hâp_mp4_upd©e_°ts_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

748  
NGX_ERROR
;

751 i‡(
	`ngx_hâp_mp4_upd©e_°ss_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

752  
NGX_ERROR
;

755 
	`ngx_hâp_mp4_upd©e_˘ts_©om
(
mp4
, &
åak
[
i
]);

757 i‡(
	`ngx_hâp_mp4_upd©e_°sc_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

758  
NGX_ERROR
;

761 i‡(
	`ngx_hâp_mp4_upd©e_°sz_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

762  
NGX_ERROR
;

765 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

766 i‡(
	`ngx_hâp_mp4_upd©e_co64_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

767  
NGX_ERROR
;

771 i‡(
	`ngx_hâp_mp4_upd©e_°co_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

772  
NGX_ERROR
;

776 
	`ngx_hâp_mp4_upd©e_°bl_©om
(
mp4
, &
åak
[
i
]);

777 
	`ngx_hâp_mp4_upd©e_möf_©om
(
mp4
, &
åak
[
i
]);

778 
åak
[
i
].
size
 +åak[i].
mdhd_size
;

779 
åak
[
i
].
size
 +åak[i].
hdÃ_size
;

780 
	`ngx_hâp_mp4_upd©e_mdü_©om
(
mp4
, &
åak
[
i
]);

781 
åak
[
i
].
size
 +åak[i].
tkhd_size
;

782 
	`ngx_hâp_mp4_upd©e_åak_©om
(
mp4
, &
åak
[
i
]);

784 
mp4
->
moov_size
 +
åak
[
i
].
size
;

786 i‡(
°¨t_off£t
 > 
åak
[
i
].start_offset) {

787 
°¨t_off£t
 = 
åak
[
i
].start_offset;

790 i‡(
íd_off£t
 < 
åak
[
i
].end_offset) {

791 
íd_off£t
 = 
åak
[
i
].end_offset;

794 *
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
];

795 
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
√xt
;

797 
j
 = 0; j < 
NGX_HTTP_MP4_LAST_ATOM
 + 1; j++) {

798 i‡(
åak
[
i
].
out
[
j
].
buf
) {

799 *
¥ev
 = &
åak
[
i
].
out
[
j
];

800 
¥ev
 = &
åak
[
i
].
out
[
j
].
√xt
;

805 i‡(
íd_off£t
 < 
°¨t_off£t
) {

806 
íd_off£t
 = 
°¨t_off£t
;

809 
mp4
->
moov_size
 += 8;

811 
	`ngx_mp4_£t_32vÆue
(
mp4
->
moov_©om_hódî
, mp4->
moov_size
);

812 
	`ngx_mp4_£t_©om_«me
(
mp4
->
moov_©om_hódî
, 'm', 'o', 'o', 'v');

813 
mp4
->
c⁄ã¡_Àngth
 +mp4->
moov_size
;

815 *
¥ev
 = &
mp4
->
md©_©om
;

817 i‡(
°¨t_off£t
 > 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
) {

818 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

820 
mp4
->
fûe
.
«me
.
d©a
);

821  
NGX_ERROR
;

824 
adju°mít
 = 
mp4
->
·yp_size
 + mp4->
moov_size


825 + 
	`ngx_hâp_mp4_upd©e_md©_©om
(
mp4
, 
°¨t_off£t
, 
íd_off£t
)

826 - 
°¨t_off£t
;

828 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

829 "mp4ádju°mít:%O", 
adju°mít
);

831 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

832 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

833 
	`ngx_hâp_mp4_adju°_co64_©om
(
mp4
, &
åak
[
i
], 
adju°mít
);

835 
	`ngx_hâp_mp4_adju°_°co_©om
(
mp4
, &
åak
[
i
], (
öt32_t
Ë
adju°mít
);

839  
NGX_OK
;

840 
	}
}

844 
u_ch¨
 
	msize
[4];

845 
u_ch¨
 
	m«me
[4];

846 } 
	tngx_mp4_©om_hódî_t
;

849 
u_ch¨
 
	msize
[4];

850 
u_ch¨
 
	m«me
[4];

851 
u_ch¨
 
	msize64
[8];

852 } 
	tngx_mp4_©om_hódî64_t
;

855 
ngx_öt_t


856 
	$ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

857 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
)

859 
off_t
 
íd
;

860 
size_t
 
©om_hódî_size
;

861 
u_ch¨
 *
©om_hódî
, *
©om_«me
;

862 
uöt64_t
 
©om_size
;

863 
ngx_öt_t
 
rc
;

864 
ngx_uöt_t
 
n
;

866 
íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

868 
mp4
->
off£t
 < 
íd
) {

870 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
uöt32_t
)Ë!
NGX_OK
) {

871  
NGX_ERROR
;

874 
©om_hódî
 = 
mp4
->
buf„r_pos
;

875 
©om_size
 = 
	`ngx_mp4_gë_32vÆue
(
©om_hódî
);

876 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

878 i‡(
©om_size
 == 0) {

879 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

881  
NGX_OK
;

884 i‡(
©om_size
 < (
ngx_mp4_©om_hódî_t
)) {

886 i‡(
©om_size
 == 1) {

888 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî64_t
))

889 !
NGX_OK
)

891  
NGX_ERROR
;

895 
©om_hódî
 = 
mp4
->
buf„r_pos
;

896 
©om_size
 = 
	`ngx_mp4_gë_64vÆue
(
©om_hódî
 + 8);

897 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

900 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

902 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

903  
NGX_ERROR
;

907 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî_t
)Ë!
NGX_OK
) {

908  
NGX_ERROR
;

911 
©om_hódî
 = 
mp4
->
buf„r_pos
;

912 
©om_«me
 = 
©om_hódî
 + (
uöt32_t
);

914 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

916 4, 
©om_«me
, 
mp4
->
off£t
, 
©om_size
);

918 i‡(
©om_size
 > (
uöt64_t
Ë(
NGX_MAX_OFF_T_VALUE
 - 
mp4
->
off£t
)

919 || 
mp4
->
off£t
 + (
off_t
Ë
©om_size
 > 
íd
)

921 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

923 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

924  
NGX_ERROR
;

927 
n
 = 0; 
©om
[n].
«me
;Ç++) {

929 i‡(
	`ngx_°∫cmp
(
©om_«me
, 
©om
[
n
].
«me
, 4) == 0) {

931 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_hódî_size
);

933 
rc
 = 
©om
[
n
].
	`h™dÀr
(
mp4
, 
©om_size
 - 
©om_hódî_size
);

934 i‡(
rc
 !
NGX_OK
) {

935  
rc
;

938 
√xt
;

942 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_size
);

944 
√xt
:

948  
NGX_OK
;

949 
	}
}

952 
ngx_öt_t


953 
	$ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
)

955 
ssize_t
 
n
;

957 i‡(
mp4
->
buf„r_pos
 + 
size
 <mp4->
buf„r_íd
) {

958  
NGX_OK
;

961 i‡(
mp4
->
off£t
 + (
off_t
Ëmp4->
buf„r_size
 > mp4->
íd
) {

962 
mp4
->
buf„r_size
 = (
size_t
Ë(mp4->
íd
 - mp4->
off£t
);

965 i‡(
mp4
->
buf„r_size
 < 
size
) {

966 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

967 "\"%s\" mp4 fûêåunˇãd", 
mp4
->
fûe
.
«me
.
d©a
);

968  
NGX_ERROR
;

971 i‡(
mp4
->
buf„r
 =
NULL
) {

972 
mp4
->
buf„r
 = 
	`ngx_∑Œoc
(mp4->
ªque°
->
poﬁ
, mp4->
buf„r_size
);

973 i‡(
mp4
->
buf„r
 =
NULL
) {

974  
NGX_ERROR
;

977 
mp4
->
buf„r_°¨t
 = mp4->
buf„r
;

980 
n
 = 
	`ngx_ªad_fûe
(&
mp4
->
fûe
, mp4->
buf„r_°¨t
, mp4->
buf„r_size
,

981 
mp4
->
off£t
);

983 i‡(
n
 =
NGX_ERROR
) {

984  
NGX_ERROR
;

987 i‡((
size_t
Ë
n
 !
mp4
->
buf„r_size
) {

988 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
mp4
->
fûe
.
log
, 0,

989 
ngx_ªad_fûe_n
 "Ñead only %z of %z from \"%s\"",

990 
n
, 
mp4
->
buf„r_size
, mp4->
fûe
.
«me
.
d©a
);

991  
NGX_ERROR
;

994 
mp4
->
buf„r_pos
 = mp4->
buf„r_°¨t
;

995 
mp4
->
buf„r_íd
 = mp4->
buf„r_°¨t
 + mp4->
buf„r_size
;

997  
NGX_OK
;

998 
	}
}

1001 
ngx_öt_t


1002 
	$ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1004 
u_ch¨
 *
·yp_©om
;

1005 
size_t
 
©om_size
;

1006 
ngx_buf_t
 *
©om
;

1008 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 ftypátom");

1010 i‡(
©om_d©a_size
 > 1024

1011 || 
	`ngx_mp4_©om_d©a
(
mp4
Ë+ (
size_t
Ë
©om_d©a_size
 > mp4->
buf„r_íd
)

1013 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1015 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

1016  
NGX_ERROR
;

1019 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1021 
·yp_©om
 = 
	`ngx_∑Œoc
(
mp4
->
ªque°
->
poﬁ
, 
©om_size
);

1022 i‡(
·yp_©om
 =
NULL
) {

1023  
NGX_ERROR
;

1026 
	`ngx_mp4_£t_32vÆue
(
·yp_©om
, 
©om_size
);

1027 
	`ngx_mp4_£t_©om_«me
(
·yp_©om
, 'f', 't', 'y', 'p');

1033 
	`ngx_mem˝y
(
·yp_©om
 + (
ngx_mp4_©om_hódî_t
),

1034 
	`ngx_mp4_©om_d©a
(
mp4
), (
size_t
Ë
©om_d©a_size
);

1036 
©om
 = &
mp4
->
·yp_©om_buf
;

1037 
©om
->
ãmp‹¨y
 = 1;

1038 
©om
->
pos
 = 
·yp_©om
;

1039 
©om
->
œ°
 = 
·yp_©om
 + 
©om_size
;

1041 
mp4
->
·yp_©om
.
buf
 = 
©om
;

1042 
mp4
->
·yp_size
 = 
©om_size
;

1043 
mp4
->
c⁄ã¡_Àngth
 = 
©om_size
;

1045 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1047  
NGX_OK
;

1048 
	}
}

1055 
	#NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 (4 * 1024)

	)

1057 
ngx_öt_t


1058 
	$ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1060 
ngx_öt_t
 
rc
;

1061 
ngx_uöt_t
 
no_md©
;

1062 
ngx_buf_t
 *
©om
;

1063 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

1065 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom");

1067 
no_md©
 = (
mp4
->
md©_©om
.
buf
 =
NULL
);

1069 i‡(
no_md©
 && 
mp4
->
°¨t
 =0 && mp4->
Àngth
 == 0) {

1074  
NGX_DECLINED
;

1077 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

1079 i‡(
©om_d©a_size
 > 
mp4
->
buf„r_size
) {

1081 i‡(
©om_d©a_size
 > 
c⁄f
->
max_buf„r_size
) {

1082 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1085 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

1086  
NGX_ERROR
;

1089 
	`ngx_p‰ì
(
mp4
->
ªque°
->
poﬁ
, mp4->
buf„r
);

1090 
mp4
->
buf„r
 = 
NULL
;

1091 
mp4
->
buf„r_pos
 = 
NULL
;

1092 
mp4
->
buf„r_íd
 = 
NULL
;

1094 
mp4
->
buf„r_size
 = (
size_t
Ë
©om_d©a_size


1095 + 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 * 
no_md©
;

1098 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
size_t
Ë
©om_d©a_size
Ë!
NGX_OK
) {

1099  
NGX_ERROR
;

1102 
mp4
->
åak
.
ñts
 = &mp4->
åaks
;

1103 
mp4
->
åak
.
size
 = (
ngx_hâp_mp4_åak_t
);

1104 
mp4
->
åak
.
«Œoc
 = 2;

1105 
mp4
->
åak
.
poﬁ
 = mp4->
ªque°
->pool;

1107 
©om
 = &
mp4
->
moov_©om_buf
;

1108 
©om
->
ãmp‹¨y
 = 1;

1109 
©om
->
pos
 = 
mp4
->
moov_©om_hódî
;

1110 
©om
->
œ°
 = 
mp4
->
moov_©om_hódî
 + 8;

1112 
mp4
->
moov_©om
.
buf
 = &mp4->
moov_©om_buf
;

1114 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_moov_©oms
, 
©om_d©a_size
);

1116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom done");

1118 i‡(
no_md©
) {

1119 
mp4
->
buf„r_°¨t
 = mp4->
buf„r_pos
;

1120 
mp4
->
buf„r_size
 = 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
;

1122 i‡(
mp4
->
buf„r_°¨t
 + mp4->
buf„r_size
 > mp4->
buf„r_íd
) {

1123 
mp4
->
buf„r
 = 
NULL
;

1124 
mp4
->
buf„r_pos
 = 
NULL
;

1125 
mp4
->
buf„r_íd
 = 
NULL
;

1130 
mp4
->
off£t
 = mp4->
íd
;

1133  
rc
;

1134 
	}
}

1137 
ngx_öt_t


1138 
	$ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1140 
ngx_buf_t
 *
d©a
;

1142 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdatátom");

1144 
d©a
 = &
mp4
->
md©_d©a_buf
;

1145 
d©a
->
fûe
 = &
mp4
->file;

1146 
d©a
->
ö_fûe
 = 1;

1147 
d©a
->
œ°_buf
 = 1;

1148 
d©a
->
œ°_ö_chaö
 = 1;

1149 
d©a
->
fûe_œ°
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1151 
mp4
->
md©_©om
.
buf
 = &mp4->
md©_©om_buf
;

1152 
mp4
->
md©_©om
.
√xt
 = &mp4->
md©_d©a
;

1153 
mp4
->
md©_d©a
.
buf
 = 
d©a
;

1155 i‡(
mp4
->
åak
.
√…s
) {

1157 
mp4
->
off£t
 = mp4->
íd
;

1160 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1163  
NGX_OK
;

1164 
	}
}

1167 
size_t


1168 
	$ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
off_t
 
°¨t_off£t
,

1169 
off_t
 
íd_off£t
)

1171 
off_t
 
©om_d©a_size
;

1172 
u_ch¨
 *
©om_hódî
;

1173 
uöt32_t
 
©om_hódî_size
;

1174 
uöt64_t
 
©om_size
;

1175 
ngx_buf_t
 *
©om
;

1177 
©om_d©a_size
 = 
íd_off£t
 - 
°¨t_off£t
;

1178 
mp4
->
md©_d©a
.
buf
->
fûe_pos
 = 
°¨t_off£t
;

1179 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
 = 
íd_off£t
;

1181 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1182 "md©Çew off£à@%O:%O", 
°¨t_off£t
, 
©om_d©a_size
);

1184 
©om_hódî
 = 
mp4
->
md©_©om_hódî
;

1186 i‡((
uöt64_t
Ë
©om_d©a_size
 > (uint64_t) 0xffffffff) {

1187 
©om_size
 = 1;

1188 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

1189 
	`ngx_mp4_£t_64vÆue
(
©om_hódî
 + (
ngx_mp4_©om_hódî_t
),

1190 (
ngx_mp4_©om_hódî64_t
Ë+ 
©om_d©a_size
);

1192 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ 
©om_d©a_size
;

1193 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

1196 
mp4
->
c⁄ã¡_Àngth
 +
©om_hódî_size
 + 
©om_d©a_size
;

1198 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1199 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'a', 't');

1201 
©om
 = &
mp4
->
md©_©om_buf
;

1202 
©om
->
ãmp‹¨y
 = 1;

1203 
©om
->
pos
 = 
©om_hódî
;

1204 
©om
->
œ°
 = 
©om_hódî
 + 
©om_hódî_size
;

1206  
©om_hódî_size
;

1207 
	}
}

1211 
u_ch¨
 
	msize
[4];

1212 
u_ch¨
 
	m«me
[4];

1213 
u_ch¨
 
	mvîsi⁄
[1];

1214 
u_ch¨
 
	mÊags
[3];

1215 
u_ch¨
 
	m¸óti⁄_time
[4];

1216 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1217 
u_ch¨
 
	mtimesˇÀ
[4];

1218 
u_ch¨
 
	mduøti⁄
[4];

1219 
u_ch¨
 
	møã
[4];

1220 
u_ch¨
 
	mvﬁume
[2];

1221 
u_ch¨
 
	mª£rved
[10];

1222 
u_ch¨
 
	mm©rix
[36];

1223 
u_ch¨
 
	m¥evõw_time
[4];

1224 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1225 
u_ch¨
 
	mpo°î_time
[4];

1226 
u_ch¨
 
	m£À˘i⁄_time
[4];

1227 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1228 
u_ch¨
 
	mcuºít_time
[4];

1229 
u_ch¨
 
	m√xt_åack_id
[4];

1230 } 
	tngx_mp4_mvhd_©om_t
;

1233 
u_ch¨
 
	msize
[4];

1234 
u_ch¨
 
	m«me
[4];

1235 
u_ch¨
 
	mvîsi⁄
[1];

1236 
u_ch¨
 
	mÊags
[3];

1237 
u_ch¨
 
	m¸óti⁄_time
[8];

1238 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1239 
u_ch¨
 
	mtimesˇÀ
[4];

1240 
u_ch¨
 
	mduøti⁄
[8];

1241 
u_ch¨
 
	møã
[4];

1242 
u_ch¨
 
	mvﬁume
[2];

1243 
u_ch¨
 
	mª£rved
[10];

1244 
u_ch¨
 
	mm©rix
[36];

1245 
u_ch¨
 
	m¥evõw_time
[4];

1246 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1247 
u_ch¨
 
	mpo°î_time
[4];

1248 
u_ch¨
 
	m£À˘i⁄_time
[4];

1249 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1250 
u_ch¨
 
	mcuºít_time
[4];

1251 
u_ch¨
 
	m√xt_åack_id
[4];

1252 } 
	tngx_mp4_mvhd64_©om_t
;

1255 
ngx_öt_t


1256 
	$ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1258 
u_ch¨
 *
©om_hódî
;

1259 
size_t
 
©om_size
;

1260 
uöt32_t
 
timesˇÀ
;

1261 
uöt64_t
 
duøti⁄
, 
°¨t_time
, 
Àngth_time
;

1262 
ngx_buf_t
 *
©om
;

1263 
ngx_mp4_mvhd_©om_t
 *
mvhd_©om
;

1264 
ngx_mp4_mvhd64_©om_t
 *
mvhd64_©om
;

1266 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mvhdátom");

1268 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1269 
mvhd_©om
 = (
ngx_mp4_mvhd_©om_t
 *Ë
©om_hódî
;

1270 
mvhd64_©om
 = (
ngx_mp4_mvhd64_©om_t
 *Ë
©om_hódî
;

1271 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'v', 'h', 'd');

1273 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd_©om_t
Ë> 
©om_d©a_size
) {

1274 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1275 "\"%s\" mp4 mvhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1276  
NGX_ERROR
;

1279 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1281 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->timescale);

1282 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->duration);

1287 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd64_©om_t
Ë> 
©om_d©a_size
) {

1288 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1290 
mp4
->
fûe
.
«me
.
d©a
);

1291  
NGX_ERROR
;

1294 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd64_©om
->timescale);

1295 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mvhd64_©om
->duration);

1298 
mp4
->
timesˇÀ
 =Åimescale;

1300 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1302 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1304 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1306 i‡(
duøti⁄
 < 
°¨t_time
) {

1307 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1309 
mp4
->
fûe
.
«me
.
d©a
);

1310  
NGX_ERROR
;

1313 
duøti⁄
 -
°¨t_time
;

1315 i‡(
mp4
->
Àngth
) {

1316 
Àngth_time
 = (
uöt64_t
Ë
mp4
->
Àngth
 * 
timesˇÀ
 / 1000;

1318 i‡(
duøti⁄
 > 
Àngth_time
) {

1319 
duøti⁄
 = 
Àngth_time
;

1323 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1325 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1327 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1328 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
size
, 
©om_size
);

1330 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1331 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
duøti⁄
, duration);

1334 
	`ngx_mp4_£t_64vÆue
(
mvhd64_©om
->
duøti⁄
, duration);

1337 
©om
 = &
mp4
->
mvhd_©om_buf
;

1338 
©om
->
ãmp‹¨y
 = 1;

1339 
©om
->
pos
 = 
©om_hódî
;

1340 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1342 
mp4
->
mvhd_©om
.
buf
 = 
©om
;

1344 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1346  
NGX_OK
;

1347 
	}
}

1350 
ngx_öt_t


1351 
	$ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1353 
u_ch¨
 *
©om_hódî
, *
©om_íd
;

1354 
off_t
 
©om_fûe_íd
;

1355 
ngx_öt_t
 
rc
;

1356 
ngx_buf_t
 *
©om
;

1357 
ngx_hâp_mp4_åak_t
 *
åak
;

1359 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Årakátom");

1361 
åak
 = 
	`ngx_¨øy_push
(&
mp4
->trak);

1362 i‡(
åak
 =
NULL
) {

1363  
NGX_ERROR
;

1366 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1368 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1369 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 't', 'r', 'a', 'k');

1371 
©om
 = &
åak
->
åak_©om_buf
;

1372 
©om
->
ãmp‹¨y
 = 1;

1373 
©om
->
pos
 = 
©om_hódî
;

1374 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1376 
åak
->
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
buf
 = 
©om
;

1378 
©om_íd
 = 
mp4
->
buf„r_pos
 + (
size_t
Ë
©om_d©a_size
;

1379 
©om_fûe_íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1381 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_åak_©oms
, 
©om_d©a_size
);

1383 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1384 "mp4Åøkátom: %i", 
rc
);

1386 i‡(
rc
 =
NGX_DECLINED
) {

1388 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1389 
mp4
->
åak
.
√…s
--;

1390 
mp4
->
buf„r_pos
 = 
©om_íd
;

1391 
mp4
->
off£t
 = 
©om_fûe_íd
;

1392  
NGX_OK
;

1395  
rc
;

1396 
	}
}

1400 
	$ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1401 
ngx_hâp_mp4_åak_t
 *
åak
)

1403 
ngx_buf_t
 *
©om
;

1405 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1406 
©om
 = &
åak
->
åak_©om_buf
;

1407 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1408 
	}
}

1411 
ngx_öt_t


1412 
	$ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1414 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1416 
mp4
->
fûe
.
«me
.
d©a
);

1418  
NGX_ERROR
;

1419 
	}
}

1423 
u_ch¨
 
	msize
[4];

1424 
u_ch¨
 
	m«me
[4];

1425 
u_ch¨
 
	mvîsi⁄
[1];

1426 
u_ch¨
 
	mÊags
[3];

1427 
u_ch¨
 
	m¸óti⁄_time
[4];

1428 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1429 
u_ch¨
 
	måack_id
[4];

1430 
u_ch¨
 
	mª£rved1
[4];

1431 
u_ch¨
 
	mduøti⁄
[4];

1432 
u_ch¨
 
	mª£rved2
[8];

1433 
u_ch¨
 
	mœyî
[2];

1434 
u_ch¨
 
	mgroup
[2];

1435 
u_ch¨
 
	mvﬁume
[2];

1436 
u_ch¨
 
	mªvîved3
[2];

1437 
u_ch¨
 
	mm©rix
[36];

1438 
u_ch¨
 
	mwidth
[4];

1439 
u_ch¨
 
	mheigth
[4];

1440 } 
	tngx_mp4_tkhd_©om_t
;

1443 
u_ch¨
 
	msize
[4];

1444 
u_ch¨
 
	m«me
[4];

1445 
u_ch¨
 
	mvîsi⁄
[1];

1446 
u_ch¨
 
	mÊags
[3];

1447 
u_ch¨
 
	m¸óti⁄_time
[8];

1448 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1449 
u_ch¨
 
	måack_id
[4];

1450 
u_ch¨
 
	mª£rved1
[4];

1451 
u_ch¨
 
	mduøti⁄
[8];

1452 
u_ch¨
 
	mª£rved2
[8];

1453 
u_ch¨
 
	mœyî
[2];

1454 
u_ch¨
 
	mgroup
[2];

1455 
u_ch¨
 
	mvﬁume
[2];

1456 
u_ch¨
 
	mªvîved3
[2];

1457 
u_ch¨
 
	mm©rix
[36];

1458 
u_ch¨
 
	mwidth
[4];

1459 
u_ch¨
 
	mheigth
[4];

1460 } 
	tngx_mp4_tkhd64_©om_t
;

1463 
ngx_öt_t


1464 
	$ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1466 
u_ch¨
 *
©om_hódî
;

1467 
size_t
 
©om_size
;

1468 
uöt64_t
 
duøti⁄
, 
°¨t_time
, 
Àngth_time
;

1469 
ngx_buf_t
 *
©om
;

1470 
ngx_hâp_mp4_åak_t
 *
åak
;

1471 
ngx_mp4_tkhd_©om_t
 *
tkhd_©om
;

1472 
ngx_mp4_tkhd64_©om_t
 *
tkhd64_©om
;

1474 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Åkhdátom");

1476 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1477 
tkhd_©om
 = (
ngx_mp4_tkhd_©om_t
 *Ë
©om_hódî
;

1478 
tkhd64_©om
 = (
ngx_mp4_tkhd64_©om_t
 *Ë
©om_hódî
;

1479 
	`ngx_mp4_£t_©om_«me
(
tkhd_©om
, 't', 'k', 'h', 'd');

1481 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd_©om_t
Ë> 
©om_d©a_size
) {

1482 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1483 "\"%s\" mp4ÅkhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1484  
NGX_ERROR
;

1487 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1489 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
tkhd_©om
->duration);

1494 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd64_©om_t
Ë> 
©om_d©a_size
) {

1495 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1497 
mp4
->
fûe
.
«me
.
d©a
);

1498  
NGX_ERROR
;

1501 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
tkhd64_©om
->duration);

1504 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1506 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1508 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * mp4->
timesˇÀ
 / 1000;

1510 i‡(
duøti⁄
 <
°¨t_time
) {

1511 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1513  
NGX_DECLINED
;

1516 
duøti⁄
 -
°¨t_time
;

1518 i‡(
mp4
->
Àngth
) {

1519 
Àngth_time
 = (
uöt64_t
Ë
mp4
->
Àngth
 * mp4->
timesˇÀ
 / 1000;

1521 i‡(
duøti⁄
 > 
Àngth_time
) {

1522 
duøti⁄
 = 
Àngth_time
;

1526 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1528 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1530 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1532 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1533 
åak
->
tkhd_size
 = 
©om_size
;

1535 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
size
, 
©om_size
);

1537 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1538 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
duøti⁄
, duration);

1541 
	`ngx_mp4_£t_64vÆue
(
tkhd64_©om
->
duøti⁄
, duration);

1544 
©om
 = &
åak
->
tkhd_©om_buf
;

1545 
©om
->
ãmp‹¨y
 = 1;

1546 
©om
->
pos
 = 
©om_hódî
;

1547 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1549 
åak
->
out
[
NGX_HTTP_MP4_TKHD_ATOM
].
buf
 = 
©om
;

1551 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1553  
NGX_OK
;

1554 
	}
}

1557 
ngx_öt_t


1558 
	$ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1560 
u_ch¨
 *
©om_hódî
;

1561 
ngx_buf_t
 *
©om
;

1562 
ngx_hâp_mp4_åak_t
 *
åak
;

1564 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process mdiaátom");

1566 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1567 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'i', 'a');

1569 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1571 
©om
 = &
åak
->
mdü_©om_buf
;

1572 
©om
->
ãmp‹¨y
 = 1;

1573 
©om
->
pos
 = 
©om_hódî
;

1574 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1576 
åak
->
out
[
NGX_HTTP_MP4_MDIA_ATOM
].
buf
 = 
©om
;

1578  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_mdü_©oms
, 
©om_d©a_size
);

1579 
	}
}

1583 
	$ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1584 
ngx_hâp_mp4_åak_t
 *
åak
)

1586 
ngx_buf_t
 *
©om
;

1588 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1589 
©om
 = &
åak
->
mdü_©om_buf
;

1590 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1591 
	}
}

1595 
u_ch¨
 
	msize
[4];

1596 
u_ch¨
 
	m«me
[4];

1597 
u_ch¨
 
	mvîsi⁄
[1];

1598 
u_ch¨
 
	mÊags
[3];

1599 
u_ch¨
 
	m¸óti⁄_time
[4];

1600 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1601 
u_ch¨
 
	mtimesˇÀ
[4];

1602 
u_ch¨
 
	mduøti⁄
[4];

1603 
u_ch¨
 
	mœnguage
[2];

1604 
u_ch¨
 
	mquÆôy
[2];

1605 } 
	tngx_mp4_mdhd_©om_t
;

1608 
u_ch¨
 
	msize
[4];

1609 
u_ch¨
 
	m«me
[4];

1610 
u_ch¨
 
	mvîsi⁄
[1];

1611 
u_ch¨
 
	mÊags
[3];

1612 
u_ch¨
 
	m¸óti⁄_time
[8];

1613 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1614 
u_ch¨
 
	mtimesˇÀ
[4];

1615 
u_ch¨
 
	mduøti⁄
[8];

1616 
u_ch¨
 
	mœnguage
[2];

1617 
u_ch¨
 
	mquÆôy
[2];

1618 } 
	tngx_mp4_mdhd64_©om_t
;

1621 
ngx_öt_t


1622 
	$ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1624 
u_ch¨
 *
©om_hódî
;

1625 
size_t
 
©om_size
;

1626 
uöt32_t
 
timesˇÀ
;

1627 
uöt64_t
 
duøti⁄
, 
°¨t_time
, 
Àngth_time
;

1628 
ngx_buf_t
 *
©om
;

1629 
ngx_hâp_mp4_åak_t
 *
åak
;

1630 
ngx_mp4_mdhd_©om_t
 *
mdhd_©om
;

1631 
ngx_mp4_mdhd64_©om_t
 *
mdhd64_©om
;

1633 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdhdátom");

1635 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1636 
mdhd_©om
 = (
ngx_mp4_mdhd_©om_t
 *Ë
©om_hódî
;

1637 
mdhd64_©om
 = (
ngx_mp4_mdhd64_©om_t
 *Ë
©om_hódî
;

1638 
	`ngx_mp4_£t_©om_«me
(
mdhd_©om
, 'm', 'd', 'h', 'd');

1640 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd_©om_t
Ë> 
©om_d©a_size
) {

1641 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1642 "\"%s\" mp4 mdhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1643  
NGX_ERROR
;

1646 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1648 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->timescale);

1649 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->duration);

1654 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd64_©om_t
Ë> 
©om_d©a_size
) {

1655 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1657 
mp4
->
fûe
.
«me
.
d©a
);

1658  
NGX_ERROR
;

1661 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd64_©om
->timescale);

1662 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mdhd64_©om
->duration);

1665 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1667 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1669 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1671 i‡(
duøti⁄
 <
°¨t_time
) {

1672 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1674  
NGX_DECLINED
;

1677 
duøti⁄
 -
°¨t_time
;

1679 i‡(
mp4
->
Àngth
) {

1680 
Àngth_time
 = (
uöt64_t
Ë
mp4
->
Àngth
 * 
timesˇÀ
 / 1000;

1682 i‡(
duøti⁄
 > 
Àngth_time
) {

1683 
duøti⁄
 = 
Àngth_time
;

1687 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1689 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1691 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1693 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1694 
åak
->
mdhd_size
 = 
©om_size
;

1695 
åak
->
timesˇÀ
 =Åimescale;

1697 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
size
, 
©om_size
);

1699 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1700 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
duøti⁄
, duration);

1703 
	`ngx_mp4_£t_64vÆue
(
mdhd64_©om
->
duøti⁄
, duration);

1706 
©om
 = &
åak
->
mdhd_©om_buf
;

1707 
©om
->
ãmp‹¨y
 = 1;

1708 
©om
->
pos
 = 
©om_hódî
;

1709 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1711 
åak
->
out
[
NGX_HTTP_MP4_MDHD_ATOM
].
buf
 = 
©om
;

1713 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1715  
NGX_OK
;

1716 
	}
}

1719 
ngx_öt_t


1720 
	$ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1722 
u_ch¨
 *
©om_hódî
;

1723 
size_t
 
©om_size
;

1724 
ngx_buf_t
 *
©om
;

1725 
ngx_hâp_mp4_åak_t
 *
åak
;

1727 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 hdlrátom");

1729 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1730 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1731 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1732 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'h', 'd', 'l', 'r');

1734 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1736 
©om
 = &
åak
->
hdÃ_©om_buf
;

1737 
©om
->
ãmp‹¨y
 = 1;

1738 
©om
->
pos
 = 
©om_hódî
;

1739 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1741 
åak
->
hdÃ_size
 = 
©om_size
;

1742 
åak
->
out
[
NGX_HTTP_MP4_HDLR_ATOM
].
buf
 = 
©om
;

1744 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1746  
NGX_OK
;

1747 
	}
}

1750 
ngx_öt_t


1751 
	$ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1753 
u_ch¨
 *
©om_hódî
;

1754 
ngx_buf_t
 *
©om
;

1755 
ngx_hâp_mp4_åak_t
 *
åak
;

1757 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process minfátom");

1759 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1760 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'i', 'n', 'f');

1762 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1764 
©om
 = &
åak
->
möf_©om_buf
;

1765 
©om
->
ãmp‹¨y
 = 1;

1766 
©om
->
pos
 = 
©om_hódî
;

1767 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1769 
åak
->
out
[
NGX_HTTP_MP4_MINF_ATOM
].
buf
 = 
©om
;

1771  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_möf_©oms
, 
©om_d©a_size
);

1772 
	}
}

1776 
	$ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1777 
ngx_hâp_mp4_åak_t
 *
åak
)

1779 
ngx_buf_t
 *
©om
;

1781 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
)

1782 + 
åak
->
vmhd_size


1783 + 
åak
->
smhd_size


1784 + 
åak
->
döf_size
;

1785 
©om
 = &
åak
->
möf_©om_buf
;

1786 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1787 
	}
}

1790 
ngx_öt_t


1791 
	$ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1793 
u_ch¨
 *
©om_hódî
;

1794 
size_t
 
©om_size
;

1795 
ngx_buf_t
 *
©om
;

1796 
ngx_hâp_mp4_åak_t
 *
åak
;

1798 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 vmhdátom");

1800 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1801 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1802 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1803 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'v', 'm', 'h', 'd');

1805 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1807 
©om
 = &
åak
->
vmhd_©om_buf
;

1808 
©om
->
ãmp‹¨y
 = 1;

1809 
©om
->
pos
 = 
©om_hódî
;

1810 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1812 
åak
->
vmhd_size
 +
©om_size
;

1813 
åak
->
out
[
NGX_HTTP_MP4_VMHD_ATOM
].
buf
 = 
©om
;

1815 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1817  
NGX_OK
;

1818 
	}
}

1821 
ngx_öt_t


1822 
	$ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1824 
u_ch¨
 *
©om_hódî
;

1825 
size_t
 
©om_size
;

1826 
ngx_buf_t
 *
©om
;

1827 
ngx_hâp_mp4_åak_t
 *
åak
;

1829 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 smhdátom");

1831 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1832 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1833 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1834 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 'm', 'h', 'd');

1836 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1838 
©om
 = &
åak
->
smhd_©om_buf
;

1839 
©om
->
ãmp‹¨y
 = 1;

1840 
©om
->
pos
 = 
©om_hódî
;

1841 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1843 
åak
->
smhd_size
 +
©om_size
;

1844 
åak
->
out
[
NGX_HTTP_MP4_SMHD_ATOM
].
buf
 = 
©om
;

1846 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1848  
NGX_OK
;

1849 
	}
}

1852 
ngx_öt_t


1853 
	$ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1855 
u_ch¨
 *
©om_hódî
;

1856 
size_t
 
©om_size
;

1857 
ngx_buf_t
 *
©om
;

1858 
ngx_hâp_mp4_åak_t
 *
åak
;

1860 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 dinfátom");

1862 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1863 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1864 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1865 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'd', 'i', 'n', 'f');

1867 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1869 
©om
 = &
åak
->
döf_©om_buf
;

1870 
©om
->
ãmp‹¨y
 = 1;

1871 
©om
->
pos
 = 
©om_hódî
;

1872 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1874 
åak
->
döf_size
 +
©om_size
;

1875 
åak
->
out
[
NGX_HTTP_MP4_DINF_ATOM
].
buf
 = 
©om
;

1877 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1879  
NGX_OK
;

1880 
	}
}

1883 
ngx_öt_t


1884 
	$ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1886 
u_ch¨
 *
©om_hódî
;

1887 
ngx_buf_t
 *
©om
;

1888 
ngx_hâp_mp4_åak_t
 *
åak
;

1890 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process stblátom");

1892 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1893 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 't', 'b', 'l');

1895 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1897 
©om
 = &
åak
->
°bl_©om_buf
;

1898 
©om
->
ãmp‹¨y
 = 1;

1899 
©om
->
pos
 = 
©om_hódî
;

1900 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1902 
åak
->
out
[
NGX_HTTP_MP4_STBL_ATOM
].
buf
 = 
©om
;

1904  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_°bl_©oms
, 
©om_d©a_size
);

1905 
	}
}

1909 
	$ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1910 
ngx_hâp_mp4_åak_t
 *
åak
)

1912 
ngx_buf_t
 *
©om
;

1914 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1915 
©om
 = &
åak
->
°bl_©om_buf
;

1916 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1917 
	}
}

1921 
u_ch¨
 
	msize
[4];

1922 
u_ch¨
 
	m«me
[4];

1923 
u_ch¨
 
	mvîsi⁄
[1];

1924 
u_ch¨
 
	mÊags
[3];

1925 
u_ch¨
 
	míåõs
[4];

1927 
u_ch¨
 
	mmedü_size
[4];

1928 
u_ch¨
 
	mmedü_«me
[4];

1929 } 
	tngx_mp4_°sd_©om_t
;

1932 
ngx_öt_t


1933 
	$ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1935 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
;

1936 
size_t
 
©om_size
;

1937 
ngx_buf_t
 *
©om
;

1938 
ngx_mp4_°sd_©om_t
 *
°sd_©om
;

1939 
ngx_hâp_mp4_åak_t
 *
åak
;

1943 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stsdátom");

1945 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1946 
°sd_©om
 = (
ngx_mp4_°sd_©om_t
 *Ë
©om_hódî
;

1947 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1948 
©om_èbÀ
 = 
©om_hódî
 + 
©om_size
;

1949 
	`ngx_mp4_£t_32vÆue
(
°sd_©om
->
size
, 
©om_size
);

1950 
	`ngx_mp4_£t_©om_«me
(
°sd_©om
, 's', 't', 's', 'd');

1952 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sd_©om_t
Ë> 
©om_d©a_size
) {

1953 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1954 "\"%s\" mp4 stsdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1955  
NGX_ERROR
;

1958 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1960 
	`ngx_mp4_gë_32vÆue
(
°sd_©om
->
íåõs
),

1961 4, 
°sd_©om
->
medü_«me
);

1963 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1965 
©om
 = &
åak
->
°sd_©om_buf
;

1966 
©om
->
ãmp‹¨y
 = 1;

1967 
©om
->
pos
 = 
©om_hódî
;

1968 
©om
->
œ°
 = 
©om_èbÀ
;

1970 
åak
->
out
[
NGX_HTTP_MP4_STSD_ATOM
].
buf
 = 
©om
;

1971 
åak
->
size
 +
©om_size
;

1973 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1975  
NGX_OK
;

1976 
	}
}

1980 
u_ch¨
 
	msize
[4];

1981 
u_ch¨
 
	m«me
[4];

1982 
u_ch¨
 
	mvîsi⁄
[1];

1983 
u_ch¨
 
	mÊags
[3];

1984 
u_ch¨
 
	míåõs
[4];

1985 } 
	tngx_mp4_°ts_©om_t
;

1988 
u_ch¨
 
	mcou¡
[4];

1989 
u_ch¨
 
	mduøti⁄
[4];

1990 } 
	tngx_mp4_°ts_íåy_t
;

1993 
ngx_öt_t


1994 
	$ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1996 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

1997 
uöt32_t
 
íåõs
;

1998 
ngx_buf_t
 *
©om
, *
d©a
;

1999 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

2000 
ngx_hâp_mp4_åak_t
 *
åak
;

2004 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 sttsátom");

2006 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2007 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om_hódî
;

2008 
	`ngx_mp4_£t_©om_«me
(
°ts_©om
, 's', 't', 't', 's');

2010 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
Ë> 
©om_d©a_size
) {

2011 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2012 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2013  
NGX_ERROR
;

2016 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ts_©om
->entries);

2018 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2019 "mp4Åime-to-ßm∂êíåõs:%uD", 
íåõs
);

2021 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
)

2022 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
Ë> 
©om_d©a_size
)

2024 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2025 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2026  
NGX_ERROR
;

2029 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°ts_©om_t
);

2030 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
);

2032 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2033 
åak
->
time_to_ßm∂e_íåõs
 = 
íåõs
;

2035 
©om
 = &
åak
->
°ts_©om_buf
;

2036 
©om
->
ãmp‹¨y
 = 1;

2037 
©om
->
pos
 = 
©om_hódî
;

2038 
©om
->
œ°
 = 
©om_èbÀ
;

2040 
d©a
 = &
åak
->
°ts_d©a_buf
;

2041 
d©a
->
ãmp‹¨y
 = 1;

2042 
d©a
->
pos
 = 
©om_èbÀ
;

2043 
d©a
->
œ°
 = 
©om_íd
;

2045 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
 = 
©om
;

2046 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
 = 
d©a
;

2048 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2050  
NGX_OK
;

2051 
	}
}

2054 
ngx_öt_t


2055 
	$ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2056 
ngx_hâp_mp4_åak_t
 *
åak
)

2058 
size_t
 
©om_size
;

2059 
ngx_buf_t
 *
©om
, *
d©a
;

2060 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

2067 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2070 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
;

2072 i‡(
d©a
 =
NULL
) {

2073 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2075 
mp4
->
fûe
.
«me
.
d©a
);

2076  
NGX_ERROR
;

2079 i‡(
	`ngx_hâp_mp4_¸›_°ts_d©a
(
mp4
, 
åak
, 1Ë!
NGX_OK
) {

2080  
NGX_ERROR
;

2083 i‡(
	`ngx_hâp_mp4_¸›_°ts_d©a
(
mp4
, 
åak
, 0Ë!
NGX_OK
) {

2084  
NGX_ERROR
;

2087 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2088 "time-to-ßm∂êíåõs:%uD", 
åak
->
time_to_ßm∂e_íåõs
);

2090 
©om_size
 = (
ngx_mp4_°ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2091 
åak
->
size
 +
©om_size
;

2093 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
;

2094 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om
->
pos
;

2095 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
size
, 
©om_size
);

2096 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
íåõs
, 
åak
->
time_to_ßm∂e_íåõs
);

2098  
NGX_OK
;

2099 
	}
}

2102 
ngx_öt_t


2103 
	$ngx_hâp_mp4_¸›_°ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2104 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2106 
uöt32_t
 
cou¡
, 
duøti⁄
, 
ª°
;

2107 
uöt64_t
 
°¨t_time
;

2108 
ngx_buf_t
 *
d©a
;

2109 
ngx_uöt_t
 
°¨t_ßm∂e
, 
íåõs
, 
°¨t_£c
;

2110 
ngx_mp4_°ts_íåy_t
 *
íåy
, *
íd
;

2112 i‡(
°¨t
) {

2113 
°¨t_£c
 = 
mp4
->
°¨t
;

2115 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2116 "mp4 sâ†¸› sèπ_time:%ui", 
°¨t_£c
);

2118 } i‡(
mp4
->
Àngth
) {

2119 
°¨t_£c
 = 
mp4
->
Àngth
;

2121 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2122 "mp4 sâ†¸›Énd_time:%ui", 
°¨t_£c
);

2125  
NGX_OK
;

2128 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
;

2130 
°¨t_time
 = (
uöt64_t
Ë
°¨t_£c
 * 
åak
->
timesˇÀ
 / 1000;

2132 
íåõs
 = 
åak
->
time_to_ßm∂e_íåõs
;

2133 
°¨t_ßm∂e
 = 0;

2134 
íåy
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
pos
;

2135 
íd
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
œ°
;

2137 
íåy
 < 
íd
) {

2138 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

2139 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->duration);

2141 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2143 
°¨t_time
, 
cou¡
, 
duøti⁄
);

2145 i‡(
°¨t_time
 < (
uöt64_t
Ë
cou¡
 * 
duøti⁄
) {

2146 
°¨t_ßm∂e
 +(
ngx_uöt_t
Ë(
°¨t_time
 / 
duøti⁄
);

2147 
ª°
 = (
uöt32_t
Ë(
°¨t_time
 / 
duøti⁄
);

2148 
found
;

2151 
°¨t_ßm∂e
 +
cou¡
;

2152 
°¨t_time
 -
cou¡
 * 
duøti⁄
;

2153 
íåõs
--;

2154 
íåy
++;

2157 i‡(
°¨t
) {

2158 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2160 
mp4
->
fûe
.
«me
.
d©a
);

2162  
NGX_ERROR
;

2165 
åak
->
íd_ßm∂e
 =Åøk->
°¨t_ßm∂e
 + start_sample;

2167 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2168 "íd_ßm∂e:%ui", 
åak
->
íd_ßm∂e
);

2170  
NGX_OK
;

2173 
found
:

2175 i‡(
°¨t
) {

2176 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, cou¡ - 
ª°
);

2177 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2178 
åak
->
time_to_ßm∂e_íåõs
 = 
íåõs
;

2179 
åak
->
°¨t_ßm∂e
 = start_sample;

2181 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2183 
åak
->
°¨t_ßm∂e
, 
cou¡
 - 
ª°
);

2186 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, 
ª°
);

2187 
d©a
->
œ°
 = (
u_ch¨
 *Ë(
íåy
 + 1);

2188 
åak
->
time_to_ßm∂e_íåõs
 -
íåõs
 - 1;

2189 
åak
->
íd_ßm∂e
 =Åøk->
°¨t_ßm∂e
 + start_sample;

2191 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2193 
åak
->
íd_ßm∂e
, 
ª°
);

2196  
NGX_OK
;

2197 
	}
}

2201 
u_ch¨
 
	msize
[4];

2202 
u_ch¨
 
	m«me
[4];

2203 
u_ch¨
 
	mvîsi⁄
[1];

2204 
u_ch¨
 
	mÊags
[3];

2205 
u_ch¨
 
	míåõs
[4];

2206 } 
	tngx_hâp_mp4_°ss_©om_t
;

2209 
ngx_öt_t


2210 
	$ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2212 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2213 
uöt32_t
 
íåõs
;

2214 
ngx_buf_t
 *
©om
, *
d©a
;

2215 
ngx_hâp_mp4_åak_t
 *
åak
;

2216 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2220 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stssátom");

2222 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2223 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om_hódî
;

2224 
	`ngx_mp4_£t_©om_«me
(
°ss_©om
, 's', 't', 's', 's');

2226 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
Ë> 
©om_d©a_size
) {

2227 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2228 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2229  
NGX_ERROR
;

2232 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ss_©om
->entries);

2234 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2235 "syn¯ßm∂êíåõs:%uD", 
íåõs
);

2237 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2238 
åak
->
sync_ßm∂es_íåõs
 = 
íåõs
;

2240 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_hâp_mp4_°ss_©om_t
);

2242 
©om
 = &
åak
->
°ss_©om_buf
;

2243 
©om
->
ãmp‹¨y
 = 1;

2244 
©om
->
pos
 = 
©om_hódî
;

2245 
©om
->
œ°
 = 
©om_èbÀ
;

2247 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
)

2248 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2250 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2251 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2252  
NGX_ERROR
;

2255 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2257 
d©a
 = &
åak
->
°ss_d©a_buf
;

2258 
d©a
->
ãmp‹¨y
 = 1;

2259 
d©a
->
pos
 = 
©om_èbÀ
;

2260 
d©a
->
œ°
 = 
©om_íd
;

2262 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
 = 
©om
;

2263 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
 = 
d©a
;

2265 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2267  
NGX_OK
;

2268 
	}
}

2271 
ngx_öt_t


2272 
	$ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2273 
ngx_hâp_mp4_åak_t
 *
åak
)

2275 
size_t
 
©om_size
;

2276 
uöt32_t
 
ßm∂e
, 
°¨t_ßm∂e
, *
íåy
, *
íd
;

2277 
ngx_buf_t
 *
©om
, *
d©a
;

2278 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2286 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2289 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
;

2291 i‡(
d©a
 =
NULL
) {

2292  
NGX_OK
;

2295 
	`ngx_hâp_mp4_¸›_°ss_d©a
(
mp4
, 
åak
, 1);

2296 
	`ngx_hâp_mp4_¸›_°ss_d©a
(
mp4
, 
åak
, 0);

2298 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2299 "syn¯ßm∂êíåõs:%uD", 
åak
->
sync_ßm∂es_íåõs
);

2301 i‡(
åak
->
sync_ßm∂es_íåõs
) {

2302 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2303 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2305 
°¨t_ßm∂e
 = 
åak
->start_sample;

2307 
íåy
 < 
íd
) {

2308 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2309 
ßm∂e
 -
°¨t_ßm∂e
;

2310 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
ßm∂e
);

2311 
íåy
++;

2315 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
 = 
NULL
;

2318 
©om_size
 = (
ngx_hâp_mp4_°ss_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2319 
åak
->
size
 +
©om_size
;

2321 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
;

2322 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om
->
pos
;

2324 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
size
, 
©om_size
);

2325 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
íåõs
, 
åak
->
sync_ßm∂es_íåõs
);

2327  
NGX_OK
;

2328 
	}
}

2332 
	$ngx_hâp_mp4_¸›_°ss_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2333 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2335 
uöt32_t
 
ßm∂e
, 
°¨t_ßm∂e
, *
íåy
, *
íd
;

2336 
ngx_buf_t
 *
d©a
;

2337 
ngx_uöt_t
 
íåõs
;

2341 i‡(
°¨t
) {

2342 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2344 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2345 "mp4 sts†¸› sèπ_ßm∂e:%uD", 
°¨t_ßm∂e
);

2347 } i‡(
mp4
->
Àngth
) {

2348 
°¨t_ßm∂e
 = 
åak
->
íd_ßm∂e
 + 1;

2350 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2351 "mp4 sts†¸›Énd_ßm∂e:%uD", 
°¨t_ßm∂e
);

2357 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
;

2359 
íåõs
 = 
åak
->
sync_ßm∂es_íåõs
;

2360 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2361 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2363 
íåy
 < 
íd
) {

2364 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2366 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2367 "sync:%uD", 
ßm∂e
);

2369 i‡(
ßm∂e
 >
°¨t_ßm∂e
) {

2370 
found
;

2373 
íåõs
--;

2374 
íåy
++;

2377 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2380 
found
:

2382 i‡(
°¨t
) {

2383 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2384 
åak
->
sync_ßm∂es_íåõs
 = 
íåõs
;

2387 
d©a
->
œ°
 = (
u_ch¨
 *Ë
íåy
;

2388 
åak
->
sync_ßm∂es_íåõs
 -
íåõs
;

2390 
	}
}

2394 
u_ch¨
 
	msize
[4];

2395 
u_ch¨
 
	m«me
[4];

2396 
u_ch¨
 
	mvîsi⁄
[1];

2397 
u_ch¨
 
	mÊags
[3];

2398 
u_ch¨
 
	míåõs
[4];

2399 } 
	tngx_mp4_˘ts_©om_t
;

2402 
u_ch¨
 
	mcou¡
[4];

2403 
u_ch¨
 
	moff£t
[4];

2404 } 
	tngx_mp4_˘ts_íåy_t
;

2407 
ngx_öt_t


2408 
	$ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2410 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2411 
uöt32_t
 
íåõs
;

2412 
ngx_buf_t
 *
©om
, *
d©a
;

2413 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2414 
ngx_hâp_mp4_åak_t
 *
åak
;

2418 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 cttsátom");

2420 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2421 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om_hódî
;

2422 
	`ngx_mp4_£t_©om_«me
(
˘ts_©om
, 'c', 't', 't', 's');

2424 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
Ë> 
©om_d©a_size
) {

2425 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2426 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2427  
NGX_ERROR
;

2430 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
˘ts_©om
->entries);

2432 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2433 "composôi⁄ off£àíåõs:%uD", 
íåõs
);

2435 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2436 
åak
->
composôi⁄_off£t_íåõs
 = 
íåõs
;

2438 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_˘ts_©om_t
);

2440 
©om
 = &
åak
->
˘ts_©om_buf
;

2441 
©om
->
ãmp‹¨y
 = 1;

2442 
©om
->
pos
 = 
©om_hódî
;

2443 
©om
->
œ°
 = 
©om_èbÀ
;

2445 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
)

2446 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
Ë> 
©om_d©a_size
)

2448 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2449 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2450  
NGX_ERROR
;

2453 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
);

2455 
d©a
 = &
åak
->
˘ts_d©a_buf
;

2456 
d©a
->
ãmp‹¨y
 = 1;

2457 
d©a
->
pos
 = 
©om_èbÀ
;

2458 
d©a
->
œ°
 = 
©om_íd
;

2460 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
©om
;

2461 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
d©a
;

2463 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2465  
NGX_OK
;

2466 
	}
}

2470 
	$ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2471 
ngx_hâp_mp4_åak_t
 *
åak
)

2473 
size_t
 
©om_size
;

2474 
ngx_buf_t
 *
©om
, *
d©a
;

2475 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2483 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2486 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
;

2488 i‡(
d©a
 =
NULL
) {

2492 
	`ngx_hâp_mp4_¸›_˘ts_d©a
(
mp4
, 
åak
, 1);

2493 
	`ngx_hâp_mp4_¸›_˘ts_d©a
(
mp4
, 
åak
, 0);

2495 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2497 
åak
->
composôi⁄_off£t_íåõs
);

2499 i‡(
åak
->
composôi⁄_off£t_íåõs
 == 0) {

2500 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
NULL
;

2501 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
NULL
;

2505 
©om_size
 = (
ngx_mp4_˘ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2506 
åak
->
size
 +
©om_size
;

2508 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
;

2509 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om
->
pos
;

2511 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
size
, 
©om_size
);

2512 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
íåõs
, 
åak
->
composôi⁄_off£t_íåõs
);

2515 
	}
}

2519 
	$ngx_hâp_mp4_¸›_˘ts_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2520 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2522 
uöt32_t
 
cou¡
, 
°¨t_ßm∂e
, 
ª°
;

2523 
ngx_buf_t
 *
d©a
;

2524 
ngx_uöt_t
 
íåõs
;

2525 
ngx_mp4_˘ts_íåy_t
 *
íåy
, *
íd
;

2529 i‡(
°¨t
) {

2530 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2532 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2533 "mp4 câ†¸› sèπ_ßm∂e:%uD", 
°¨t_ßm∂e
);

2535 } i‡(
mp4
->
Àngth
) {

2536 
°¨t_ßm∂e
 = 
åak
->
íd_ßm∂e
 -Årak->start_sample + 1;

2538 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2539 "mp4 câ†¸›Énd_ßm∂e:%uD", 
°¨t_ßm∂e
);

2545 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
;

2547 
íåõs
 = 
åak
->
composôi⁄_off£t_íåõs
;

2548 
íåy
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
pos
;

2549 
íd
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
œ°
;

2551 
íåy
 < 
íd
) {

2552 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

2554 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2556 
°¨t_ßm∂e
, 
cou¡
, 
	`ngx_mp4_gë_32vÆue
(
íåy
->
off£t
));

2558 i‡(
°¨t_ßm∂e
 <
cou¡
) {

2559 
ª°
 = 
°¨t_ßm∂e
 - 1;

2560 
found
;

2563 
°¨t_ßm∂e
 -
cou¡
;

2564 
íåõs
--;

2565 
íåy
++;

2568 i‡(
°¨t
) {

2569 
d©a
->
pos
 = (
u_ch¨
 *Ë
íd
;

2570 
åak
->
composôi⁄_off£t_íåõs
 = 0;

2575 
found
:

2577 i‡(
°¨t
) {

2578 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, cou¡ - 
ª°
);

2579 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2580 
åak
->
composôi⁄_off£t_íåõs
 = 
íåõs
;

2583 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, 
ª°
);

2584 
d©a
->
œ°
 = (
u_ch¨
 *Ë(
íåy
 + 1);

2585 
åak
->
composôi⁄_off£t_íåõs
 -
íåõs
 - 1;

2587 
	}
}

2591 
u_ch¨
 
	msize
[4];

2592 
u_ch¨
 
	m«me
[4];

2593 
u_ch¨
 
	mvîsi⁄
[1];

2594 
u_ch¨
 
	mÊags
[3];

2595 
u_ch¨
 
	míåõs
[4];

2596 } 
	tngx_mp4_°sc_©om_t
;

2599 
ngx_öt_t


2600 
	$ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2602 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2603 
uöt32_t
 
íåõs
;

2604 
ngx_buf_t
 *
©om
, *
d©a
;

2605 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2606 
ngx_hâp_mp4_åak_t
 *
åak
;

2610 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stscátom");

2612 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2613 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om_hódî
;

2614 
	`ngx_mp4_£t_©om_«me
(
°sc_©om
, 's', 't', 's', 'c');

2616 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
Ë> 
©om_d©a_size
) {

2617 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2618 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2619  
NGX_ERROR
;

2622 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sc_©om
->entries);

2624 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2625 "ßm∂e-to-chunkÉ¡rõs:%uD", 
íåõs
);

2627 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
)

2628 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
Ë> 
©om_d©a_size
)

2630 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2631 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2632  
NGX_ERROR
;

2635 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sc_©om_t
);

2636 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
);

2638 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2639 
åak
->
ßm∂e_to_chunk_íåõs
 = 
íåõs
;

2641 
©om
 = &
åak
->
°sc_©om_buf
;

2642 
©om
->
ãmp‹¨y
 = 1;

2643 
©om
->
pos
 = 
©om_hódî
;

2644 
©om
->
œ°
 = 
©om_èbÀ
;

2646 
d©a
 = &
åak
->
°sc_d©a_buf
;

2647 
d©a
->
ãmp‹¨y
 = 1;

2648 
d©a
->
pos
 = 
©om_èbÀ
;

2649 
d©a
->
œ°
 = 
©om_íd
;

2651 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
 = 
©om
;

2652 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
 = 
d©a
;

2654 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2656  
NGX_OK
;

2657 
	}
}

2660 
ngx_öt_t


2661 
	$ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2662 
ngx_hâp_mp4_åak_t
 *
åak
)

2664 
size_t
 
©om_size
;

2665 
uöt32_t
 
chunk
;

2666 
ngx_buf_t
 *
©om
, *
d©a
;

2667 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2668 
ngx_mp4_°sc_íåy_t
 *
íåy
, *
íd
;

2676 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2679 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
;

2681 i‡(
d©a
 =
NULL
) {

2682 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2684 
mp4
->
fûe
.
«me
.
d©a
);

2685  
NGX_ERROR
;

2688 i‡(
åak
->
ßm∂e_to_chunk_íåõs
 == 0) {

2689 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2691 
mp4
->
fûe
.
«me
.
d©a
);

2692  
NGX_ERROR
;

2695 i‡(
	`ngx_hâp_mp4_¸›_°sc_d©a
(
mp4
, 
åak
, 1Ë!
NGX_OK
) {

2696  
NGX_ERROR
;

2699 i‡(
	`ngx_hâp_mp4_¸›_°sc_d©a
(
mp4
, 
åak
, 0Ë!
NGX_OK
) {

2700  
NGX_ERROR
;

2703 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2705 
åak
->
ßm∂e_to_chunk_íåõs
);

2707 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2708 
íd
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
œ°
;

2710 
íåy
 < 
íd
) {

2711 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2712 
chunk
 -
åak
->
°¨t_chunk
;

2713 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, chunk);

2714 
íåy
++;

2717 
©om_size
 = (
ngx_mp4_°sc_©om_t
)

2718 + 
åak
->
ßm∂e_to_chunk_íåõs
 * (
ngx_mp4_°sc_íåy_t
);

2720 
åak
->
size
 +
©om_size
;

2722 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
;

2723 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om
->
pos
;

2725 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
size
, 
©om_size
);

2726 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
íåõs
, 
åak
->
ßm∂e_to_chunk_íåõs
);

2728  
NGX_OK
;

2729 
	}
}

2732 
ngx_öt_t


2733 
	$ngx_hâp_mp4_¸›_°sc_d©a
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2734 
ngx_hâp_mp4_åak_t
 *
åak
, 
ngx_uöt_t
 
°¨t
)

2736 
uöt32_t
 
°¨t_ßm∂e
, 
chunk
, 
ßm∂es
, 
id
, 
√xt_chunk
, 
n
,

2737 
¥ev_ßm∂es
;

2738 
ngx_buf_t
 *
d©a
, *
buf
;

2739 
ngx_uöt_t
 
íåõs
, 
èrgë_chunk
, 
chunk_ßm∂es
;

2740 
ngx_mp4_°sc_íåy_t
 *
íåy
, *
íd
, *
fú°
;

2742 
íåõs
 = 
åak
->
ßm∂e_to_chunk_íåõs
 - 1;

2744 i‡(
°¨t
) {

2745 
°¨t_ßm∂e
 = (
uöt32_t
Ë
åak
->start_sample;

2747 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2748 "mp4 sts¯¸› sèπ_ßm∂e:%uD", 
°¨t_ßm∂e
);

2750 } i‡(
mp4
->
Àngth
) {

2751 
°¨t_ßm∂e
 = (
uöt32_t
Ë(
åak
->
íd_ßm∂e
 -Årak->start_sample);

2752 
ßm∂es
 = 0;

2754 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_START
].
buf
;

2756 i‡(
d©a
) {

2757 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2758 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2759 
íåõs
--;

2761 i‡(
ßm∂es
 > 
°¨t_ßm∂e
) {

2762 
ßm∂es
 = 
°¨t_ßm∂e
;

2763 
	`ngx_mp4_£t_32vÆue
(
íåy
->
ßm∂es
, samples);

2766 
°¨t_ßm∂e
 -
ßm∂es
;

2769 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2771 
°¨t_ßm∂e
, 
ßm∂es
);

2774  
NGX_OK
;

2777 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
;

2779 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2780 
íd
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
œ°
;

2782 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2783 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2784 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2785 
¥ev_ßm∂es
 = 0;

2786 
íåy
++;

2788 
íåy
 < 
íd
) {

2790 
√xt_chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->
chunk
);

2792 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2795 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
, 
id
);

2797 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2799 i‡(
°¨t_ßm∂e
 < 
n
) {

2800 
found
;

2803 
°¨t_ßm∂e
 -
n
;

2805 
¥ev_ßm∂es
 = 
ßm∂es
;

2806 
chunk
 = 
√xt_chunk
;

2807 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2808 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2809 
íåõs
--;

2810 
íåy
++;

2813 
√xt_chunk
 = 
åak
->
chunks
 + 1;

2815 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2817 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
);

2819 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2821 i‡(
°¨t_ßm∂e
 > 
n
) {

2822 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2824 
°¨t
 ? "°¨t" : "íd", 
mp4
->
fûe
.
«me
.
d©a
);

2825  
NGX_ERROR
;

2828 
found
:

2830 
íåõs
++;

2831 
íåy
--;

2833 i‡(
ßm∂es
 == 0) {

2834 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2836 
mp4
->
fûe
.
«me
.
d©a
);

2837  
NGX_ERROR
;

2840 
èrgë_chunk
 = 
chunk
 - 1;

2841 
èrgë_chunk
 +
°¨t_ßm∂e
 / 
ßm∂es
;

2842 
chunk_ßm∂es
 = 
°¨t_ßm∂e
 % 
ßm∂es
;

2844 i‡(
°¨t
) {

2845 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2847 
åak
->
ßm∂e_to_chunk_íåõs
 = 
íåõs
;

2848 
åak
->
°¨t_chunk
 = 
èrgë_chunk
;

2849 
åak
->
°¨t_chunk_ßm∂es
 = 
chunk_ßm∂es
;

2851 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 
åak
->
°¨t_chunk
 + 1);

2853 
ßm∂es
 -
chunk_ßm∂es
;

2855 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2857 
åak
->
°¨t_chunk
,Åøk->
°¨t_chunk_ßm∂es
);

2860 i‡(
°¨t_ßm∂e
) {

2861 
d©a
->
œ°
 = (
u_ch¨
 *Ë(
íåy
 + 1);

2862 
åak
->
ßm∂e_to_chunk_íåõs
 -
íåõs
 - 1;

2863 
åak
->
íd_chunk_ßm∂es
 = 
ßm∂es
;

2866 
d©a
->
œ°
 = (
u_ch¨
 *Ë
íåy
;

2867 
åak
->
ßm∂e_to_chunk_íåõs
 -
íåõs
;

2868 
åak
->
íd_chunk_ßm∂es
 = 
¥ev_ßm∂es
;

2871 i‡(
chunk_ßm∂es
) {

2872 
åak
->
íd_chunk
 = 
èrgë_chunk
 + 1;

2873 
åak
->
íd_chunk_ßm∂es
 = 
chunk_ßm∂es
;

2876 
åak
->
íd_chunk
 = 
èrgë_chunk
;

2879 
ßm∂es
 = 
chunk_ßm∂es
;

2880 
√xt_chunk
 = 
chunk
 + 1;

2882 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2884 
åak
->
íd_chunk
,Åøk->
íd_chunk_ßm∂es
);

2887 i‡(
chunk_ßm∂es
 && 
√xt_chunk
 - 
èrgë_chunk
 == 2) {

2889 
	`ngx_mp4_£t_32vÆue
(
íåy
->
ßm∂es
, samples);

2891 } i‡(
chunk_ßm∂es
 && 
°¨t
) {

2893 
fú°
 = &
åak
->
°sc_°¨t_chunk_íåy
;

2894 
	`ngx_mp4_£t_32vÆue
(
fú°
->
chunk
, 1);

2895 
	`ngx_mp4_£t_32vÆue
(
fú°
->
ßm∂es
, samples);

2896 
	`ngx_mp4_£t_32vÆue
(
fú°
->
id
, id);

2898 
buf
 = &
åak
->
°sc_°¨t_chunk_buf
;

2899 
buf
->
ãmp‹¨y
 = 1;

2900 
buf
->
pos
 = (
u_ch¨
 *Ë
fú°
;

2901 
buf
->
œ°
 = (
u_ch¨
 *Ë
fú°
 + (
ngx_mp4_°sc_íåy_t
);

2903 
åak
->
out
[
NGX_HTTP_MP4_STSC_START
].
buf
 = buf;

2905 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 
åak
->
°¨t_chunk
 + 2);

2907 
åak
->
ßm∂e_to_chunk_íåõs
++;

2909 } i‡(
chunk_ßm∂es
) {

2911 
fú°
 = &
åak
->
°sc_íd_chunk_íåy
;

2912 
	`ngx_mp4_£t_32vÆue
(
fú°
->
chunk
, 
åak
->
íd_chunk
 -Åøk->
°¨t_chunk
);

2913 
	`ngx_mp4_£t_32vÆue
(
fú°
->
ßm∂es
, samples);

2914 
	`ngx_mp4_£t_32vÆue
(
fú°
->
id
, id);

2916 
buf
 = &
åak
->
°sc_íd_chunk_buf
;

2917 
buf
->
ãmp‹¨y
 = 1;

2918 
buf
->
pos
 = (
u_ch¨
 *Ë
fú°
;

2919 
buf
->
œ°
 = (
u_ch¨
 *Ë
fú°
 + (
ngx_mp4_°sc_íåy_t
);

2921 
åak
->
out
[
NGX_HTTP_MP4_STSC_END
].
buf
 = buf;

2923 
åak
->
ßm∂e_to_chunk_íåõs
++;

2926  
NGX_OK
;

2927 
	}
}

2931 
u_ch¨
 
	msize
[4];

2932 
u_ch¨
 
	m«me
[4];

2933 
u_ch¨
 
	mvîsi⁄
[1];

2934 
u_ch¨
 
	mÊags
[3];

2935 
u_ch¨
 
	munif‹m_size
[4];

2936 
u_ch¨
 
	míåõs
[4];

2937 } 
	tngx_mp4_°sz_©om_t
;

2940 
ngx_öt_t


2941 
	$ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2943 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2944 
size_t
 
©om_size
;

2945 
uöt32_t
 
íåõs
, 
size
;

2946 
ngx_buf_t
 *
©om
, *
d©a
;

2947 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

2948 
ngx_hâp_mp4_åak_t
 *
åak
;

2952 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stszátom");

2954 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2955 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om_hódî
;

2956 
	`ngx_mp4_£t_©om_«me
(
°sz_©om
, 's', 't', 's', 'z');

2958 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
Ë> 
©om_d©a_size
) {

2959 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2960 "\"%s\" mp4 stszátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2961  
NGX_ERROR
;

2964 
size
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->
unif‹m_size
);

2965 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->entries);

2967 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2968 "ßm∂êunif‹m size:%uD,É¡rõs:%uD", 
size
, 
íåõs
);

2970 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2971 
åak
->
ßm∂e_sizes_íåõs
 = 
íåõs
;

2973 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sz_©om_t
);

2975 
©om
 = &
åak
->
°sz_©om_buf
;

2976 
©om
->
ãmp‹¨y
 = 1;

2977 
©om
->
pos
 = 
©om_hódî
;

2978 
©om
->
œ°
 = 
©om_èbÀ
;

2980 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
 = 
©om
;

2982 i‡(
size
 == 0) {

2983 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
)

2984 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2986 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2988 
mp4
->
fûe
.
«me
.
d©a
);

2989  
NGX_ERROR
;

2992 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2994 
d©a
 = &
åak
->
°sz_d©a_buf
;

2995 
d©a
->
ãmp‹¨y
 = 1;

2996 
d©a
->
pos
 = 
©om_èbÀ
;

2997 
d©a
->
œ°
 = 
©om_íd
;

2999 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
 = 
d©a
;

3004 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

3005 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

3006 
åak
->
size
 +
©om_size
;

3009 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

3011  
NGX_OK
;

3012 
	}
}

3015 
ngx_öt_t


3016 
	$ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3017 
ngx_hâp_mp4_åak_t
 *
åak
)

3019 
size_t
 
©om_size
;

3020 
uöt32_t
 *
pos
, *
íd
, 
íåõs
;

3021 
ngx_buf_t
 *
©om
, *
d©a
;

3022 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

3030 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3033 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
;

3035 i‡(
d©a
) {

3036 
íåõs
 = 
åak
->
ßm∂e_sizes_íåõs
;

3038 i‡(
åak
->
°¨t_ßm∂e
 > 
íåõs
) {

3039 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3041 
mp4
->
fûe
.
«me
.
d©a
);

3042  
NGX_ERROR
;

3045 
íåõs
 -
åak
->
°¨t_ßm∂e
;

3046 
d©a
->
pos
 +
åak
->
°¨t_ßm∂e
 * (
uöt32_t
);

3047 
íd
 = (
uöt32_t
 *Ë
d©a
->
pos
;

3049 
pos
 = 
íd
 - 
åak
->
°¨t_chunk_ßm∂es
;Öos <Énd;Öos++) {

3050 
åak
->
°¨t_chunk_ßm∂es_size
 +
	`ngx_mp4_gë_32vÆue
(
pos
);

3053 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3055 
åak
->
°¨t_chunk_ßm∂es_size
);

3057 i‡(
mp4
->
Àngth
) {

3058 i‡(
åak
->
íd_ßm∂e
 -Åøk->
°¨t_ßm∂e
 > 
íåõs
) {

3059 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3061 
mp4
->
fûe
.
«me
.
d©a
);

3062  
NGX_ERROR
;

3065 
íåõs
 = 
åak
->
íd_ßm∂e
 -Åøk->
°¨t_ßm∂e
;

3066 
d©a
->
œ°
 = d©a->
pos
 + 
íåõs
 * (
uöt32_t
);

3067 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

3069 
pos
 = 
íd
 - 
åak
->
íd_chunk_ßm∂es
;Öos <Énd;Öos++) {

3070 
åak
->
íd_chunk_ßm∂es_size
 +
	`ngx_mp4_gë_32vÆue
(
pos
);

3073 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3075 
åak
->
íd_chunk_ßm∂es_size
);

3078 
©om_size
 = (
ngx_mp4_°sz_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

3079 
åak
->
size
 +
©om_size
;

3081 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
;

3082 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om
->
pos
;

3084 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
size
, 
©om_size
);

3085 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
íåõs
,Éntries);

3088  
NGX_OK
;

3089 
	}
}

3093 
u_ch¨
 
	msize
[4];

3094 
u_ch¨
 
	m«me
[4];

3095 
u_ch¨
 
	mvîsi⁄
[1];

3096 
u_ch¨
 
	mÊags
[3];

3097 
u_ch¨
 
	míåõs
[4];

3098 } 
	tngx_mp4_°co_©om_t
;

3101 
ngx_öt_t


3102 
	$ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

3104 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

3105 
uöt32_t
 
íåõs
;

3106 
ngx_buf_t
 *
©om
, *
d©a
;

3107 
ngx_mp4_°co_©om_t
 *
°co_©om
;

3108 
ngx_hâp_mp4_åak_t
 *
åak
;

3112 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stcoátom");

3114 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

3115 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om_hódî
;

3116 
	`ngx_mp4_£t_©om_«me
(
°co_©om
, 's', 't', 'c', 'o');

3118 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
Ë> 
©om_d©a_size
) {

3119 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3120 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3121  
NGX_ERROR
;

3124 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°co_©om
->entries);

3126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

3128 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
)

3129 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

3131 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3132 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3133  
NGX_ERROR
;

3136 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°co_©om_t
);

3137 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

3139 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

3140 
åak
->
chunks
 = 
íåõs
;

3142 
©om
 = &
åak
->
°co_©om_buf
;

3143 
©om
->
ãmp‹¨y
 = 1;

3144 
©om
->
pos
 = 
©om_hódî
;

3145 
©om
->
œ°
 = 
©om_èbÀ
;

3147 
d©a
 = &
åak
->
°co_d©a_buf
;

3148 
d©a
->
ãmp‹¨y
 = 1;

3149 
d©a
->
pos
 = 
©om_èbÀ
;

3150 
d©a
->
œ°
 = 
©om_íd
;

3152 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
 = 
©om
;

3153 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
 = 
d©a
;

3155 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

3157  
NGX_OK
;

3158 
	}
}

3161 
ngx_öt_t


3162 
	$ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3163 
ngx_hâp_mp4_åak_t
 *
åak
)

3165 
size_t
 
©om_size
;

3166 
uöt32_t
 
íåõs
;

3167 
ngx_buf_t
 *
©om
, *
d©a
;

3168 
ngx_mp4_°co_©om_t
 *
°co_©om
;

3176 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3179 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

3181 i‡(
d©a
 =
NULL
) {

3182 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3184 
mp4
->
fûe
.
«me
.
d©a
);

3185  
NGX_ERROR
;

3188 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

3189 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3191 
mp4
->
fûe
.
«me
.
d©a
);

3192  
NGX_ERROR
;

3195 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt32_t
);

3197 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_32vÆue
(
d©a
->
pos
);

3198 
åak
->
°¨t_off£t
 +åak->
°¨t_chunk_ßm∂es_size
;

3199 
	`ngx_mp4_£t_32vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

3201 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3202 "°¨àchunk off£t:%O", 
åak
->
°¨t_off£t
);

3204 i‡(
mp4
->
Àngth
) {

3206 i‡(
åak
->
íd_chunk
 >Åøk->
chunks
) {

3207 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3209 
mp4
->
fûe
.
«me
.
d©a
);

3210  
NGX_ERROR
;

3213 
íåõs
 = 
åak
->
íd_chunk
 -Åøk->
°¨t_chunk
;

3214 
d©a
->
œ°
 = d©a->
pos
 + 
íåõs
 * (
uöt32_t
);

3216 i‡(
íåõs
) {

3217 
åak
->
íd_off£t
 =

3218 
	`ngx_mp4_gë_32vÆue
(
d©a
->
œ°
 - (
uöt32_t
));

3219 
åak
->
íd_off£t
 +åak->
íd_chunk_ßm∂es_size
;

3221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3222 "íd chunk off£t:%O", 
åak
->
íd_off£t
);

3226 
íåõs
 = 
åak
->
chunks
 -Åøk->
°¨t_chunk
;

3227 
åak
->
íd_off£t
 = 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
;

3230 i‡(
íåõs
 == 0) {

3231 
åak
->
°¨t_off£t
 = 
mp4
->
íd
;

3232 
åak
->
íd_off£t
 = 0;

3235 
©om_size
 = (
ngx_mp4_°co_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

3236 
åak
->
size
 +
©om_size
;

3238 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
;

3239 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om
->
pos
;

3241 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
size
, 
©om_size
);

3242 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
íåõs
,Éntries);

3244  
NGX_OK
;

3245 
	}
}

3249 
	$ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3250 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
)

3252 
uöt32_t
 
off£t
, *
íåy
, *
íd
;

3253 
ngx_buf_t
 *
d©a
;

3260 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3263 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

3264 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

3265 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

3267 
íåy
 < 
íd
) {

3268 
off£t
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

3269 
off£t
 +
adju°mít
;

3270 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
off£t
);

3271 
íåy
++;

3273 
	}
}

3277 
u_ch¨
 
	msize
[4];

3278 
u_ch¨
 
	m«me
[4];

3279 
u_ch¨
 
	mvîsi⁄
[1];

3280 
u_ch¨
 
	mÊags
[3];

3281 
u_ch¨
 
	míåõs
[4];

3282 } 
	tngx_mp4_co64_©om_t
;

3285 
ngx_öt_t


3286 
	$ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

3288 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

3289 
uöt32_t
 
íåõs
;

3290 
ngx_buf_t
 *
©om
, *
d©a
;

3291 
ngx_mp4_co64_©om_t
 *
co64_©om
;

3292 
ngx_hâp_mp4_åak_t
 *
åak
;

3296 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 co64átom");

3298 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

3299 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om_hódî
;

3300 
	`ngx_mp4_£t_©om_«me
(
co64_©om
, 'c', 'o', '6', '4');

3302 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
Ë> 
©om_d©a_size
) {

3303 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3304 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3305  
NGX_ERROR
;

3308 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
co64_©om
->entries);

3310 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

3312 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
)

3313 + 
íåõs
 * (
uöt64_t
Ë> 
©om_d©a_size
)

3315 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3316 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

3317  
NGX_ERROR
;

3320 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_co64_©om_t
);

3321 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt64_t
);

3323 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

3324 
åak
->
chunks
 = 
íåõs
;

3326 
©om
 = &
åak
->
co64_©om_buf
;

3327 
©om
->
ãmp‹¨y
 = 1;

3328 
©om
->
pos
 = 
©om_hódî
;

3329 
©om
->
œ°
 = 
©om_èbÀ
;

3331 
d©a
 = &
åak
->
co64_d©a_buf
;

3332 
d©a
->
ãmp‹¨y
 = 1;

3333 
d©a
->
pos
 = 
©om_èbÀ
;

3334 
d©a
->
œ°
 = 
©om_íd
;

3336 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
 = 
©om
;

3337 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
 = 
d©a
;

3339 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

3341  
NGX_OK
;

3342 
	}
}

3345 
ngx_öt_t


3346 
	$ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3347 
ngx_hâp_mp4_åak_t
 *
åak
)

3349 
size_t
 
©om_size
;

3350 
uöt64_t
 
íåõs
;

3351 
ngx_buf_t
 *
©om
, *
d©a
;

3352 
ngx_mp4_co64_©om_t
 *
co64_©om
;

3360 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3363 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

3365 i‡(
d©a
 =
NULL
) {

3366 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3368 
mp4
->
fûe
.
«me
.
d©a
);

3369  
NGX_ERROR
;

3372 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

3373 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3375 
mp4
->
fûe
.
«me
.
d©a
);

3376  
NGX_ERROR
;

3379 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt64_t
);

3381 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_64vÆue
(
d©a
->
pos
);

3382 
åak
->
°¨t_off£t
 +åak->
°¨t_chunk_ßm∂es_size
;

3383 
	`ngx_mp4_£t_64vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

3385 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3386 "°¨àchunk off£t:%O", 
åak
->
°¨t_off£t
);

3388 i‡(
mp4
->
Àngth
) {

3390 i‡(
åak
->
íd_chunk
 >Åøk->
chunks
) {

3391 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

3393 
mp4
->
fûe
.
«me
.
d©a
);

3394  
NGX_ERROR
;

3397 
íåõs
 = 
åak
->
íd_chunk
 -Åøk->
°¨t_chunk
;

3398 
d©a
->
œ°
 = d©a->
pos
 + 
íåõs
 * (
uöt64_t
);

3400 i‡(
íåõs
) {

3401 
åak
->
íd_off£t
 =

3402 
	`ngx_mp4_gë_64vÆue
(
d©a
->
œ°
 - (
uöt64_t
));

3403 
åak
->
íd_off£t
 +åak->
íd_chunk_ßm∂es_size
;

3405 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3406 "íd chunk off£t:%O", 
åak
->
íd_off£t
);

3410 
íåõs
 = 
åak
->
chunks
 -Åøk->
°¨t_chunk
;

3411 
åak
->
íd_off£t
 = 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
;

3414 i‡(
íåõs
 == 0) {

3415 
åak
->
°¨t_off£t
 = 
mp4
->
íd
;

3416 
åak
->
íd_off£t
 = 0;

3419 
©om_size
 = (
ngx_mp4_co64_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

3420 
åak
->
size
 +
©om_size
;

3422 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
;

3423 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om
->
pos
;

3425 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
size
, 
©om_size
);

3426 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
íåõs
,Éntries);

3428  
NGX_OK
;

3429 
	}
}

3433 
	$ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

3434 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
)

3436 
uöt64_t
 
off£t
, *
íåy
, *
íd
;

3437 
ngx_buf_t
 *
d©a
;

3444 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

3447 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

3448 
íåy
 = (
uöt64_t
 *Ë
d©a
->
pos
;

3449 
íd
 = (
uöt64_t
 *Ë
d©a
->
œ°
;

3451 
íåy
 < 
íd
) {

3452 
off£t
 = 
	`ngx_mp4_gë_64vÆue
(
íåy
);

3453 
off£t
 +
adju°mít
;

3454 
	`ngx_mp4_£t_64vÆue
(
íåy
, 
off£t
);

3455 
íåy
++;

3457 
	}
}

3461 
	$ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3463 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3465 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3466 
˛cf
->
h™dÀr
 = 
ngx_hâp_mp4_h™dÀr
;

3468  
NGX_CONF_OK
;

3469 
	}
}

3473 
	$ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3475 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

3477 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_mp4_c⁄f_t
));

3478 i‡(
c⁄f
 =
NULL
) {

3479  
NULL
;

3482 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3483 
c⁄f
->
max_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3485  
c⁄f
;

3486 
	}
}

3490 
	$ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3492 
ngx_hâp_mp4_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3493 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
 = 
chûd
;

3495 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size, 512 * 1024);

3496 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_buf„r_size
, 
¥ev
->max_buffer_size,

3499  
NGX_CONF_OK
;

3500 
	}
}

	@src/http/modules/ngx_http_not_modified_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_uöt_t
 
ngx_hâp_ã°_if_unmodifõd
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_uöt_t
 
ngx_hâp_ã°_if_modifõd
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_uöt_t
 
ngx_hâp_ã°_if_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

16 
ngx_èbÀ_ñt_t
 *
hódî
, 
ngx_uöt_t
 
wók
);

17 
ngx_öt_t
 
ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

20 
ngx_hâp_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
 = {

21 
NULL
,

22 
ngx_hâp_nŸ_modifõd_fûãr_öô
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL
,

30 
NULL
,

31 
NULL


35 
ngx_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ
 = {

36 
NGX_MODULE_V1
,

37 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
,

38 
NULL
,

39 
NGX_HTTP_MODULE
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NGX_MODULE_V1_PADDING


51 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

54 
ngx_öt_t


55 
	$ngx_hâp_nŸ_modifõd_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

57 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


58 || 
r
 !r->
maö


59 || 
r
->
dißbÀ_nŸ_modifõd
)

61  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

64 i‡(
r
->
hódîs_ö
.
if_unmodifõd_sö˚


65 && !
	`ngx_hâp_ã°_if_unmodifõd
(
r
))

67  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

68 
NGX_HTTP_PRECONDITION_FAILED
);

71 i‡(
r
->
hódîs_ö
.
if_m©ch


72 && !
	`ngx_hâp_ã°_if_m©ch
(
r
,Ñ->
hódîs_ö
.
if_m©ch
, 0))

74  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

75 
NGX_HTTP_PRECONDITION_FAILED
);

78 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚
 ||Ñ->hódîs_ö.
if_n⁄e_m©ch
) {

80 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚


81 && 
	`ngx_hâp_ã°_if_modifõd
(
r
))

83  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

86 i‡(
r
->
hódîs_ö
.
if_n⁄e_m©ch


87 && !
	`ngx_hâp_ã°_if_m©ch
(
r
,Ñ->
hódîs_ö
.
if_n⁄e_m©ch
, 1))

89  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

94 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_NOT_MODIFIED
;

95 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

96 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

97 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

98 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

100 i‡(
r
->
hódîs_out
.
c⁄ã¡_ícodög
) {

101 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

102 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

105  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

109 
	}
}

112 
ngx_uöt_t


113 
	$ngx_hâp_ã°_if_unmodifõd
(
ngx_hâp_ªque°_t
 *
r
)

115 
time_t
 
iums
;

117 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 =(
time_t
) -1) {

121 
iums
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
d©a
,

122 
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
Àn
);

124 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

125 "hâ∞iums:%TÜm:%T", 
iums
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

127 i‡(
iums
 >
r
->
hódîs_out
.
œ°_modifõd_time
) {

132 
	}
}

135 
ngx_uöt_t


136 
	$ngx_hâp_ã°_if_modifõd
(
ngx_hâp_ªque°_t
 *
r
)

138 
time_t
 
ims
;

139 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

141 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 =(
time_t
) -1) {

145 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

147 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_OFF
) {

151 
ims
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
d©a
,

152 
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
Àn
);

154 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

155 "hâ∞ims:%TÜm:%T", 
ims
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

157 i‡(
ims
 =
r
->
hódîs_out
.
œ°_modifõd_time
) {

161 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_EXACT


162 || 
ims
 < 
r
->
hódîs_out
.
œ°_modifõd_time
)

168 
	}
}

171 
ngx_uöt_t


172 
	$ngx_hâp_ã°_if_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
hódî
,

173 
ngx_uöt_t
 
wók
)

175 
u_ch¨
 *
°¨t
, *
íd
, 
ch
;

176 
ngx_°r_t
 
ëag
, *
li°
;

178 
li°
 = &
hódî
->
vÆue
;

180 i‡(
li°
->
Àn
 =1 &&Üi°->
d©a
[0] == '*') {

184 i‡(
r
->
hódîs_out
.
ëag
 =
NULL
) {

188 
ëag
 = 
r
->
hódîs_out
.ëag->
vÆue
;

190 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

191 "hâ∞im:\"%V\"Éèg:%V", 
li°
, &
ëag
);

193 i‡(
wók


194 && 
ëag
.
Àn
 > 2

195 && 
ëag
.
d©a
[0] == 'W'

196 && 
ëag
.
d©a
[1] == '/')

198 
ëag
.
Àn
 -= 2;

199 
ëag
.
d©a
 += 2;

202 
°¨t
 = 
li°
->
d©a
;

203 
íd
 = 
li°
->
d©a
 +Üi°->
Àn
;

205 
°¨t
 < 
íd
) {

207 i‡(
wók


208 && 
íd
 - 
°¨t
 > 2

209 && 
°¨t
[0] == 'W'

210 && 
°¨t
[1] == '/')

212 
°¨t
 += 2;

215 i‡(
ëag
.
Àn
 > (
size_t
Ë(
íd
 - 
°¨t
)) {

219 i‡(
	`ngx_°∫cmp
(
°¨t
, 
ëag
.
d©a
,Éèg.
Àn
) != 0) {

220 
skù
;

223 
°¨t
 +
ëag
.
Àn
;

225 
°¨t
 < 
íd
) {

226 
ch
 = *
°¨t
;

228 i‡(
ch
 == ' ' || ch == '\t') {

229 
°¨t
++;

236 i‡(
°¨t
 =
íd
 || *start == ',') {

240 
skù
:

242 
°¨t
 < 
íd
 && *start != ',') { start++; }

243 
°¨t
 < 
íd
) {

244 
ch
 = *
°¨t
;

246 i‡(
ch
 == ' ' || ch == '\t' || ch == ',') {

247 
°¨t
++;

256 
	}
}

259 
ngx_öt_t


260 
	$ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

262 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

263 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_nŸ_modifõd_hódî_fûãr
;

265  
NGX_OK
;

266 
	}
}

	@src/http/modules/ngx_http_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 
	mˇches
;

15 } 
	tngx_hâp_¥oxy_maö_c⁄f_t
;

18 
ngx_hâp_¥oxy_ªwrôe_s
 
	tngx_hâp_¥oxy_ªwrôe_t
;

20 
	$ngx_öt_t
 (*
	tngx_hâp_¥oxy_ªwrôe_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

21 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tsize_t
 
	t¥efix
, size_à
	tÀn
,

22 
	tngx_hâp_¥oxy_ªwrôe_t
 *
	t¥
);

24 
	sngx_hâp_¥oxy_ªwrôe_s
 {

25 
ngx_hâp_¥oxy_ªwrôe_±
 
h™dÀr
;

28 
ngx_hâp_com∂ex_vÆue_t
 
com∂ex
;

29 #i‡(
NGX_PCRE
)

30 
ngx_hâp_ªgex_t
 *
ªgex
;

32 } 
∑âîn
;

34 
ngx_hâp_com∂ex_vÆue_t
 
ª∂a˚mít
;

39 
ngx_°r_t
 
key_°¨t
;

40 
ngx_°r_t
 
schema
;

41 
ngx_°r_t
 
ho°_hódî
;

42 
ngx_°r_t
 
p‹t
;

43 
ngx_°r_t
 
uri
;

44 } 
	tngx_hâp_¥oxy_v¨s_t
;

48 
ngx_¨øy_t
 *
Êushes
;

49 
ngx_¨øy_t
 *
Àngths
;

50 
ngx_¨øy_t
 *
vÆues
;

51 
ngx_hash_t
 
hash
;

52 } 
	tngx_hâp_¥oxy_hódîs_t
;

56 
ngx_hâp_up°ªam_c⁄f_t
 
up°ªam
;

58 
ngx_¨øy_t
 *
body_Êushes
;

59 
ngx_¨øy_t
 *
body_Àngths
;

60 
ngx_¨øy_t
 *
body_vÆues
;

61 
ngx_°r_t
 
body_sour˚
;

63 
ngx_hâp_¥oxy_hódîs_t
 
hódîs
;

64 #i‡(
NGX_HTTP_CACHE
)

65 
ngx_hâp_¥oxy_hódîs_t
 
hódîs_ˇche
;

67 
ngx_¨øy_t
 *
hódîs_sour˚
;

69 
ngx_¨øy_t
 *
¥oxy_Àngths
;

70 
ngx_¨øy_t
 *
¥oxy_vÆues
;

72 
ngx_¨øy_t
 *
ªdúe˘s
;

73 
ngx_¨øy_t
 *
cookõ_domaös
;

74 
ngx_¨øy_t
 *
cookõ_∑ths
;

76 
ngx_°r_t
 
mëhod
;

77 
ngx_°r_t
 
loˇti⁄
;

78 
ngx_°r_t
 
uæ
;

80 #i‡(
NGX_HTTP_CACHE
)

81 
ngx_hâp_com∂ex_vÆue_t
 
ˇche_key
;

84 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

86 
ngx_Êag_t
 
ªdúe˘
;

88 
ngx_uöt_t
 
hâp_vîsi⁄
;

90 
ngx_uöt_t
 
hódîs_hash_max_size
;

91 
ngx_uöt_t
 
hódîs_hash_buckë_size
;

93 #i‡(
NGX_HTTP_SSL
)

94 
ngx_uöt_t
 
s¶
;

95 
ngx_uöt_t
 
s¶_¥Ÿocﬁs
;

96 
ngx_°r_t
 
s¶_cùhîs
;

97 
ngx_uöt_t
 
s¶_vîify_dïth
;

98 
ngx_°r_t
 
s¶_åu°ed_˚πifiˇã
;

99 
ngx_°r_t
 
s¶_¸l
;

100 
ngx_°r_t
 
s¶_˚πifiˇã
;

101 
ngx_°r_t
 
s¶_˚πifiˇã_key
;

102 
ngx_¨øy_t
 *
s¶_∑ssw‹ds
;

104 } 
	tngx_hâp_¥oxy_loc_c⁄f_t
;

108 
ngx_hâp_°©us_t
 
°©us
;

109 
ngx_hâp_chunked_t
 
chunked
;

110 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

111 
off_t
 
öã∫Æ_body_Àngth
;

113 
ngx_chaö_t
 *
‰ì
;

114 
ngx_chaö_t
 *
busy
;

116 
hód
:1;

117 
öã∫Æ_chunked
:1;

118 
hódî_£¡
:1;

119 } 
	tngx_hâp_¥oxy_˘x_t
;

122 
ngx_öt_t
 
	`ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_¥oxy_˘x_t
 *
˘x
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

124 #i‡(
NGX_HTTP_CACHE
)

125 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

127 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

128 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

129 
ngx_öt_t
 
	`ngx_hâp_¥oxy_body_ouçut_fûãr
(*
d©a
, 
ngx_chaö_t
 *
ö
);

130 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

131 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

132 
ngx_öt_t
 
	`ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
);

133 
ngx_öt_t
 
	`ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
,

134 
ngx_buf_t
 *
buf
);

135 
ngx_öt_t
 
	`ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
,

136 
ngx_buf_t
 *
buf
);

137 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
,

138 
ssize_t
 
byãs
);

139 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
,

140 
ssize_t
 
byãs
);

141 
	`ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

142 
	`ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

143 
ngx_öt_t
 
rc
);

145 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

146 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

147 
ngx_öt_t
 
	`ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

148 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

149 
ngx_öt_t


150 
	`ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

151 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

152 
ngx_öt_t


153 
	`ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

154 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

155 
ngx_öt_t
 
	`ngx_hâp_¥oxy_öã∫Æ_chunked_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

156 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

157 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

158 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

159 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

160 
ngx_èbÀ_ñt_t
 *
h
);

161 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

162 
ngx_èbÀ_ñt_t
 *
h
, 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
);

163 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
,

164 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
);

166 
ngx_öt_t
 
	`ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

167 *
	`ngx_hâp_¥oxy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

168 *
	`ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

169 *
	`ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

170 *
∑ª¡
, *
chûd
);

171 
ngx_öt_t
 
	`ngx_hâp_¥oxy_öô_hódîs
(
ngx_c⁄f_t
 *
cf
,

172 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
, 
ngx_hâp_¥oxy_hódîs_t
 *
hódîs
,

173 
ngx_keyvÆ_t
 *
deÁu…_hódîs
);

175 *
	`ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

176 *
c⁄f
);

177 *
	`ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

178 *
c⁄f
);

179 *
	`ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

180 *
c⁄f
);

181 *
	`ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

182 *
c⁄f
);

183 *
	`ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

184 *
c⁄f
);

185 #i‡(
NGX_HTTP_CACHE
)

186 *
	`ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

187 *
c⁄f
);

188 *
	`ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

189 *
c⁄f
);

191 #i‡(
NGX_HTTP_SSL
)

192 *
	`ngx_hâp_¥oxy_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
,

193 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

196 *
	`ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

198 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
,

199 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

201 #i‡(
NGX_HTTP_SSL
)

202 
ngx_öt_t
 
	`ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

203 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

205 
	`ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
);

208 
ngx_c⁄f_po°_t
 
ngx_hâp_¥oxy_low©_po°
 =

209 { 
ngx_hâp_¥oxy_low©_check
 
	}
};

212 
ngx_c⁄f_bômask_t
 
	gngx_hâp_¥oxy_√xt_up°ªam_masks
[] = {

213 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

214 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

215 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

216 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

217 { 
ngx_°rög
("hâp_502"), 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

218 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

219 { 
ngx_°rög
("hâp_504"), 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

220 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

221 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

222 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

223 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

224 { 
ngx_nuŒ_°rög
, 0 }

228 #i‡(
NGX_HTTP_SSL
)

230 
ngx_c⁄f_bômask_t
 
	gngx_hâp_¥oxy_s¶_¥Ÿocﬁs
[] = {

231 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

232 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

233 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

234 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

235 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

236 { 
ngx_nuŒ_°rög
, 0 }

242 
ngx_c⁄f_íum_t
 
	gngx_hâp_¥oxy_hâp_vîsi⁄
[] = {

243 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

244 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

245 { 
ngx_nuŒ_°rög
, 0 }

249 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
;

252 
ngx_comm™d_t
 
	gngx_hâp_¥oxy_comm™ds
[] = {

254 { 
ngx_°rög
("proxy_pass"),

255 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

256 
ngx_hâp_¥oxy_∑ss
,

257 
NGX_HTTP_LOC_CONF_OFFSET
,

259 
NULL
 },

261 { 
ngx_°rög
("proxy_redirect"),

262 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

263 
ngx_hâp_¥oxy_ªdúe˘
,

264 
NGX_HTTP_LOC_CONF_OFFSET
,

266 
NULL
 },

268 { 
ngx_°rög
("proxy_cookie_domain"),

269 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

270 
ngx_hâp_¥oxy_cookõ_domaö
,

271 
NGX_HTTP_LOC_CONF_OFFSET
,

273 
NULL
 },

275 { 
ngx_°rög
("proxy_cookie_path"),

276 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

277 
ngx_hâp_¥oxy_cookõ_∑th
,

278 
NGX_HTTP_LOC_CONF_OFFSET
,

280 
NULL
 },

282 { 
ngx_°rög
("proxy_store"),

283 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

284 
ngx_hâp_¥oxy_°‹e
,

285 
NGX_HTTP_LOC_CONF_OFFSET
,

287 
NULL
 },

289 { 
ngx_°rög
("proxy_store_access"),

290 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

291 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

292 
NGX_HTTP_LOC_CONF_OFFSET
,

293 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

294 
NULL
 },

296 { 
ngx_°rög
("proxy_buffering"),

297 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

298 
ngx_c⁄f_£t_Êag_¶Ÿ
,

299 
NGX_HTTP_LOC_CONF_OFFSET
,

300 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

301 
NULL
 },

303 { 
ngx_°rög
("proxy_request_buffering"),

304 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

305 
ngx_c⁄f_£t_Êag_¶Ÿ
,

306 
NGX_HTTP_LOC_CONF_OFFSET
,

307 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ªque°_buf„rög
),

308 
NULL
 },

310 { 
ngx_°rög
("proxy_ignore_client_abort"),

311 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

312 
ngx_c⁄f_£t_Êag_¶Ÿ
,

313 
NGX_HTTP_LOC_CONF_OFFSET
,

314 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

315 
NULL
 },

317 { 
ngx_°rög
("proxy_bind"),

318 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

319 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

320 
NGX_HTTP_LOC_CONF_OFFSET
,

321 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

322 
NULL
 },

324 { 
ngx_°rög
("proxy_connect_timeout"),

325 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

326 
ngx_c⁄f_£t_m£c_¶Ÿ
,

327 
NGX_HTTP_LOC_CONF_OFFSET
,

328 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

329 
NULL
 },

331 { 
ngx_°rög
("proxy_send_timeout"),

332 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

333 
ngx_c⁄f_£t_m£c_¶Ÿ
,

334 
NGX_HTTP_LOC_CONF_OFFSET
,

335 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

336 
NULL
 },

338 { 
ngx_°rög
("proxy_send_lowat"),

339 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

340 
ngx_c⁄f_£t_size_¶Ÿ
,

341 
NGX_HTTP_LOC_CONF_OFFSET
,

342 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

343 &
ngx_hâp_¥oxy_low©_po°
 },

345 { 
ngx_°rög
("proxy_intercept_errors"),

346 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

347 
ngx_c⁄f_£t_Êag_¶Ÿ
,

348 
NGX_HTTP_LOC_CONF_OFFSET
,

349 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

350 
NULL
 },

352 { 
ngx_°rög
("proxy_set_header"),

353 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

354 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

355 
NGX_HTTP_LOC_CONF_OFFSET
,

356 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_sour˚
),

357 
NULL
 },

359 { 
ngx_°rög
("proxy_headers_hash_max_size"),

360 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

361 
ngx_c⁄f_£t_num_¶Ÿ
,

362 
NGX_HTTP_LOC_CONF_OFFSET
,

363 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_max_size
),

364 
NULL
 },

366 { 
ngx_°rög
("proxy_headers_hash_bucket_size"),

367 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

368 
ngx_c⁄f_£t_num_¶Ÿ
,

369 
NGX_HTTP_LOC_CONF_OFFSET
,

370 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_buckë_size
),

371 
NULL
 },

373 { 
ngx_°rög
("proxy_set_body"),

374 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

375 
ngx_c⁄f_£t_°r_¶Ÿ
,

376 
NGX_HTTP_LOC_CONF_OFFSET
,

377 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
body_sour˚
),

378 
NULL
 },

380 { 
ngx_°rög
("proxy_method"),

381 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

382 
ngx_c⁄f_£t_°r_¶Ÿ
,

383 
NGX_HTTP_LOC_CONF_OFFSET
,

384 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
mëhod
),

385 
NULL
 },

387 { 
ngx_°rög
("proxy_pass_request_headers"),

388 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

389 
ngx_c⁄f_£t_Êag_¶Ÿ
,

390 
NGX_HTTP_LOC_CONF_OFFSET
,

391 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

392 
NULL
 },

394 { 
ngx_°rög
("proxy_pass_request_body"),

395 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

396 
ngx_c⁄f_£t_Êag_¶Ÿ
,

397 
NGX_HTTP_LOC_CONF_OFFSET
,

398 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

399 
NULL
 },

401 { 
ngx_°rög
("proxy_buffer_size"),

402 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

403 
ngx_c⁄f_£t_size_¶Ÿ
,

404 
NGX_HTTP_LOC_CONF_OFFSET
,

405 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

406 
NULL
 },

408 { 
ngx_°rög
("proxy_read_timeout"),

409 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

410 
ngx_c⁄f_£t_m£c_¶Ÿ
,

411 
NGX_HTTP_LOC_CONF_OFFSET
,

412 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

413 
NULL
 },

415 { 
ngx_°rög
("proxy_buffers"),

416 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

417 
ngx_c⁄f_£t_bufs_¶Ÿ
,

418 
NGX_HTTP_LOC_CONF_OFFSET
,

419 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
bufs
),

420 
NULL
 },

422 { 
ngx_°rög
("proxy_busy_buffers_size"),

423 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

424 
ngx_c⁄f_£t_size_¶Ÿ
,

425 
NGX_HTTP_LOC_CONF_OFFSET
,

426 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

427 
NULL
 },

429 { 
ngx_°rög
("proxy_force_ranges"),

430 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

431 
ngx_c⁄f_£t_Êag_¶Ÿ
,

432 
NGX_HTTP_LOC_CONF_OFFSET
,

433 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
f‹˚_ønges
),

434 
NULL
 },

436 { 
ngx_°rög
("proxy_limit_rate"),

437 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

438 
ngx_c⁄f_£t_size_¶Ÿ
,

439 
NGX_HTTP_LOC_CONF_OFFSET
,

440 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
limô_øã
),

441 
NULL
 },

443 #i‡(
NGX_HTTP_CACHE
)

445 { 
ngx_°rög
("proxy_cache"),

446 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

447 
ngx_hâp_¥oxy_ˇche
,

448 
NGX_HTTP_LOC_CONF_OFFSET
,

450 
NULL
 },

452 { 
ngx_°rög
("proxy_cache_key"),

453 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

454 
ngx_hâp_¥oxy_ˇche_key
,

455 
NGX_HTTP_LOC_CONF_OFFSET
,

457 
NULL
 },

459 { 
ngx_°rög
("proxy_cache_path"),

460 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

461 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

462 
NGX_HTTP_MAIN_CONF_OFFSET
,

463 
off£tof
(
ngx_hâp_¥oxy_maö_c⁄f_t
, 
ˇches
),

464 &
ngx_hâp_¥oxy_moduÀ
 },

466 { 
ngx_°rög
("proxy_cache_bypass"),

467 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

468 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

469 
NGX_HTTP_LOC_CONF_OFFSET
,

470 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

471 
NULL
 },

473 { 
ngx_°rög
("proxy_no_cache"),

474 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

475 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

476 
NGX_HTTP_LOC_CONF_OFFSET
,

477 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

478 
NULL
 },

480 { 
ngx_°rög
("proxy_cache_valid"),

481 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

482 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

483 
NGX_HTTP_LOC_CONF_OFFSET
,

484 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

485 
NULL
 },

487 { 
ngx_°rög
("proxy_cache_min_uses"),

488 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

489 
ngx_c⁄f_£t_num_¶Ÿ
,

490 
NGX_HTTP_LOC_CONF_OFFSET
,

491 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

492 
NULL
 },

494 { 
ngx_°rög
("proxy_cache_use_stale"),

495 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

496 
ngx_c⁄f_£t_bômask_¶Ÿ
,

497 
NGX_HTTP_LOC_CONF_OFFSET
,

498 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

499 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

501 { 
ngx_°rög
("proxy_cache_methods"),

502 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

503 
ngx_c⁄f_£t_bômask_¶Ÿ
,

504 
NGX_HTTP_LOC_CONF_OFFSET
,

505 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

506 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

508 { 
ngx_°rög
("proxy_cache_lock"),

509 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

510 
ngx_c⁄f_£t_Êag_¶Ÿ
,

511 
NGX_HTTP_LOC_CONF_OFFSET
,

512 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

513 
NULL
 },

515 { 
ngx_°rög
("proxy_cache_lock_timeout"),

516 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

517 
ngx_c⁄f_£t_m£c_¶Ÿ
,

518 
NGX_HTTP_LOC_CONF_OFFSET
,

519 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

520 
NULL
 },

522 { 
ngx_°rög
("proxy_cache_lock_age"),

523 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

524 
ngx_c⁄f_£t_m£c_¶Ÿ
,

525 
NGX_HTTP_LOC_CONF_OFFSET
,

526 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_age
),

527 
NULL
 },

529 { 
ngx_°rög
("proxy_cache_revalidate"),

530 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

531 
ngx_c⁄f_£t_Êag_¶Ÿ
,

532 
NGX_HTTP_LOC_CONF_OFFSET
,

533 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

534 
NULL
 },

538 { 
ngx_°rög
("proxy_temp_path"),

539 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

540 
ngx_c⁄f_£t_∑th_¶Ÿ
,

541 
NGX_HTTP_LOC_CONF_OFFSET
,

542 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

543 
NULL
 },

545 { 
ngx_°rög
("proxy_max_temp_file_size"),

546 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

547 
ngx_c⁄f_£t_size_¶Ÿ
,

548 
NGX_HTTP_LOC_CONF_OFFSET
,

549 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

550 
NULL
 },

552 { 
ngx_°rög
("proxy_temp_file_write_size"),

553 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

554 
ngx_c⁄f_£t_size_¶Ÿ
,

555 
NGX_HTTP_LOC_CONF_OFFSET
,

556 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

557 
NULL
 },

559 { 
ngx_°rög
("proxy_next_upstream"),

560 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

561 
ngx_c⁄f_£t_bômask_¶Ÿ
,

562 
NGX_HTTP_LOC_CONF_OFFSET
,

563 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

564 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

566 { 
ngx_°rög
("proxy_next_upstream_tries"),

567 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

568 
ngx_c⁄f_£t_num_¶Ÿ
,

569 
NGX_HTTP_LOC_CONF_OFFSET
,

570 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

571 
NULL
 },

573 { 
ngx_°rög
("proxy_next_upstream_timeout"),

574 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

575 
ngx_c⁄f_£t_m£c_¶Ÿ
,

576 
NGX_HTTP_LOC_CONF_OFFSET
,

577 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

578 
NULL
 },

580 { 
ngx_°rög
("proxy_pass_header"),

581 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

582 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

583 
NGX_HTTP_LOC_CONF_OFFSET
,

584 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

585 
NULL
 },

587 { 
ngx_°rög
("proxy_hide_header"),

588 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

589 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

590 
NGX_HTTP_LOC_CONF_OFFSET
,

591 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

592 
NULL
 },

594 { 
ngx_°rög
("proxy_ignore_headers"),

595 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

596 
ngx_c⁄f_£t_bômask_¶Ÿ
,

597 
NGX_HTTP_LOC_CONF_OFFSET
,

598 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

599 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

601 { 
ngx_°rög
("proxy_http_version"),

602 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

603 
ngx_c⁄f_£t_íum_¶Ÿ
,

604 
NGX_HTTP_LOC_CONF_OFFSET
,

605 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hâp_vîsi⁄
),

606 &
ngx_hâp_¥oxy_hâp_vîsi⁄
 },

608 #i‡(
NGX_HTTP_SSL
)

610 { 
ngx_°rög
("proxy_ssl_session_reuse"),

611 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

612 
ngx_c⁄f_£t_Êag_¶Ÿ
,

613 
NGX_HTTP_LOC_CONF_OFFSET
,

614 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

615 
NULL
 },

617 { 
ngx_°rög
("proxy_ssl_protocols"),

618 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

619 
ngx_c⁄f_£t_bômask_¶Ÿ
,

620 
NGX_HTTP_LOC_CONF_OFFSET
,

621 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_¥Ÿocﬁs
),

622 &
ngx_hâp_¥oxy_s¶_¥Ÿocﬁs
 },

624 { 
ngx_°rög
("proxy_ssl_ciphers"),

625 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

626 
ngx_c⁄f_£t_°r_¶Ÿ
,

627 
NGX_HTTP_LOC_CONF_OFFSET
,

628 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_cùhîs
),

629 
NULL
 },

631 { 
ngx_°rög
("proxy_ssl_name"),

632 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

633 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

634 
NGX_HTTP_LOC_CONF_OFFSET
,

635 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_«me
),

636 
NULL
 },

638 { 
ngx_°rög
("proxy_ssl_server_name"),

639 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

640 
ngx_c⁄f_£t_Êag_¶Ÿ
,

641 
NGX_HTTP_LOC_CONF_OFFSET
,

642 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_£rvî_«me
),

643 
NULL
 },

645 { 
ngx_°rög
("proxy_ssl_verify"),

646 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

647 
ngx_c⁄f_£t_Êag_¶Ÿ
,

648 
NGX_HTTP_LOC_CONF_OFFSET
,

649 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_vîify
),

650 
NULL
 },

652 { 
ngx_°rög
("proxy_ssl_verify_depth"),

653 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

654 
ngx_c⁄f_£t_num_¶Ÿ
,

655 
NGX_HTTP_LOC_CONF_OFFSET
,

656 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_vîify_dïth
),

657 
NULL
 },

659 { 
ngx_°rög
("proxy_ssl_trusted_certificate"),

660 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

661 
ngx_c⁄f_£t_°r_¶Ÿ
,

662 
NGX_HTTP_LOC_CONF_OFFSET
,

663 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_åu°ed_˚πifiˇã
),

664 
NULL
 },

666 { 
ngx_°rög
("proxy_ssl_crl"),

667 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

668 
ngx_c⁄f_£t_°r_¶Ÿ
,

669 
NGX_HTTP_LOC_CONF_OFFSET
,

670 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_¸l
),

671 
NULL
 },

673 { 
ngx_°rög
("proxy_ssl_certificate"),

674 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

675 
ngx_c⁄f_£t_°r_¶Ÿ
,

676 
NGX_HTTP_LOC_CONF_OFFSET
,

677 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_˚πifiˇã
),

678 
NULL
 },

680 { 
ngx_°rög
("proxy_ssl_certificate_key"),

681 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

682 
ngx_c⁄f_£t_°r_¶Ÿ
,

683 
NGX_HTTP_LOC_CONF_OFFSET
,

684 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
s¶_˚πifiˇã_key
),

685 
NULL
 },

687 { 
ngx_°rög
("proxy_ssl_password_file"),

688 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

689 
ngx_hâp_¥oxy_s¶_∑ssw‹d_fûe
,

690 
NGX_HTTP_LOC_CONF_OFFSET
,

692 
NULL
 },

696 
ngx_nuŒ_comm™d


700 
ngx_hâp_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ_˘x
 = {

701 
ngx_hâp_¥oxy_add_v¨übÀs
,

702 
NULL
,

704 
ngx_hâp_¥oxy_¸óã_maö_c⁄f
,

705 
NULL
,

707 
NULL
,

708 
NULL
,

710 
ngx_hâp_¥oxy_¸óã_loc_c⁄f
,

711 
ngx_hâp_¥oxy_mîge_loc_c⁄f


715 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
 = {

716 
NGX_MODULE_V1
,

717 &
ngx_hâp_¥oxy_moduÀ_˘x
,

718 
ngx_hâp_¥oxy_comm™ds
,

719 
NGX_HTTP_MODULE
,

720 
NULL
,

721 
NULL
,

722 
NULL
,

723 
NULL
,

724 
NULL
,

725 
NULL
,

726 
NULL
,

727 
NGX_MODULE_V1_PADDING


731 
	gngx_hâp_¥oxy_vîsi⁄
[] = " HTTP/1.0" 
CRLF
;

732 
	gngx_hâp_¥oxy_vîsi⁄_11
[] = " HTTP/1.1" 
CRLF
;

735 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_hódîs
[] = {

736 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

737 { 
ngx_°rög
("Connection"),Çgx_string("close") },

738 { 
ngx_°rög
("Content-Length"),Çgx_string("$proxy_internal_body_length") },

739 { 
ngx_°rög
("Transfer-Encoding"),Çgx_string("$proxy_internal_chunked") },

740 { 
ngx_°rög
("TE"),Çgx_string("") },

741 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

742 { 
ngx_°rög
("Expect"),Çgx_string("") },

743 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

744 { 
ngx_nuŒ_°rög
,Çgx_null_string }

748 
ngx_°r_t
 
	gngx_hâp_¥oxy_hide_hódîs
[] = {

749 
ngx_°rög
("Date"),

750 
ngx_°rög
("Server"),

751 
ngx_°rög
("X-Pad"),

752 
ngx_°rög
("X-Accel-Expires"),

753 
ngx_°rög
("X-Accel-Redirect"),

754 
ngx_°rög
("X-Accel-Limit-Rate"),

755 
ngx_°rög
("X-Accel-Buffering"),

756 
ngx_°rög
("X-Accel-Charset"),

757 
ngx_nuŒ_°rög


761 #i‡(
NGX_HTTP_CACHE
)

763 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_ˇche_hódîs
[] = {

764 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

765 { 
ngx_°rög
("Connection"),Çgx_string("close") },

766 { 
ngx_°rög
("Content-Length"),Çgx_string("$proxy_internal_body_length") },

767 { 
ngx_°rög
("Transfer-Encoding"),Çgx_string("$proxy_internal_chunked") },

768 { 
ngx_°rög
("TE"),Çgx_string("") },

769 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

770 { 
ngx_°rög
("Expect"),Çgx_string("") },

771 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

772 { 
ngx_°rög
("If-Modified-Since"),

773 
ngx_°rög
("$upstream_cache_last_modified") },

774 { 
ngx_°rög
("If-Unmodified-Since"),Çgx_string("") },

775 { 
ngx_°rög
("If-None-Match"),Çgx_string("$upstream_cache_etag") },

776 { 
ngx_°rög
("If-Match"),Çgx_string("") },

777 { 
ngx_°rög
("Range"),Çgx_string("") },

778 { 
ngx_°rög
("If-Range"),Çgx_string("") },

779 { 
ngx_nuŒ_°rög
,Çgx_null_string }

785 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_¥oxy_v¨s
[] = {

787 { 
ngx_°rög
("¥oxy_ho°"), 
NULL
, 
ngx_hâp_¥oxy_ho°_v¨übÀ
, 0,

788 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

790 { 
ngx_°rög
("¥oxy_p‹t"), 
NULL
, 
ngx_hâp_¥oxy_p‹t_v¨übÀ
, 0,

791 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

793 { 
ngx_°rög
("¥oxy_add_x_f‹w¨ded_f‹"), 
NULL
,

794 
ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

797 { 
ngx_°rög
("¥oxy_add_vü"), 
NULL
, NULL, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

800 { 
ngx_°rög
("¥oxy_öã∫Æ_body_Àngth"), 
NULL
,

801 
ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
, 0,

802 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

804 { 
ngx_°rög
("¥oxy_öã∫Æ_chunked"), 
NULL
,

805 
ngx_hâp_¥oxy_öã∫Æ_chunked_v¨übÀ
, 0,

806 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

808 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

812 
ngx_∑th_öô_t
 
	gngx_hâp_¥oxy_ãmp_∑th
 = {

813 
ngx_°rög
(
NGX_HTTP_PROXY_TEMP_PATH
), { 1, 2, 0 }

817 
ngx_öt_t


818 
	$ngx_hâp_¥oxy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

820 
ngx_öt_t
 
rc
;

821 
ngx_hâp_up°ªam_t
 *
u
;

822 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

823 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

824 #i‡(
NGX_HTTP_CACHE
)

825 
ngx_hâp_¥oxy_maö_c⁄f_t
 *
pmcf
;

828 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

829  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

832 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_¥oxy_˘x_t
));

833 i‡(
˘x
 =
NULL
) {

834  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

837 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_¥oxy_moduÀ
);

839 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

841 
u
 = 
r
->
up°ªam
;

843 i‡(
∂cf
->
¥oxy_Àngths
 =
NULL
) {

844 
˘x
->
v¨s
 = 
∂cf
->vars;

845 
u
->
schema
 = 
∂cf
->
v¨s
.schema;

846 #i‡(
NGX_HTTP_SSL
)

847 
u
->
s¶
 = (
∂cf
->
up°ªam
.s¶ !
NULL
);

851 i‡(
	`ngx_hâp_¥oxy_evÆ
(
r
, 
˘x
, 
∂cf
Ë!
NGX_OK
) {

852  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

856 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_moduÀ
;

858 
u
->
c⁄f
 = &
∂cf
->
up°ªam
;

860 #i‡(
NGX_HTTP_CACHE
)

861 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

863 
u
->
ˇches
 = &
pmcf
->caches;

864 
u
->
¸óã_key
 = 
ngx_hâp_¥oxy_¸óã_key
;

867 
u
->
¸óã_ªque°
 = 
ngx_hâp_¥oxy_¸óã_ªque°
;

868 
u
->
ªöô_ªque°
 = 
ngx_hâp_¥oxy_ªöô_ªque°
;

869 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

870 
u
->
ab‹t_ªque°
 = 
ngx_hâp_¥oxy_ab‹t_ªque°
;

871 
u
->
föÆize_ªque°
 = 
ngx_hâp_¥oxy_föÆize_ªque°
;

872 
r
->
°©e
 = 0;

874 i‡(
∂cf
->
ªdúe˘s
) {

875 
u
->
ªwrôe_ªdúe˘
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘
;

878 i‡(
∂cf
->
cookõ_domaös
 ||Ölcf->
cookõ_∑ths
) {

879 
u
->
ªwrôe_cookõ
 = 
ngx_hâp_¥oxy_ªwrôe_cookõ
;

882 
u
->
buf„rög
 = 
∂cf
->
up°ªam
.buffering;

884 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

885 i‡(
u
->
pùe
 =
NULL
) {

886  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

889 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

890 
u
->
pùe
->
öput_˘x
 = 
r
;

892 
u
->
öput_fûãr_öô
 = 
ngx_hâp_¥oxy_öput_fûãr_öô
;

893 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

894 
u
->
öput_fûãr_˘x
 = 
r
;

896 
u
->
ac˚l
 = 1;

898 i‡(!
∂cf
->
up°ªam
.
ªque°_buf„rög


899 && 
∂cf
->
body_vÆues
 =
NULL
 &&Ölcf->
up°ªam
.
∑ss_ªque°_body


900 && (!
r
->
hódîs_ö
.
chunked


901 || 
∂cf
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_11
))

903 
r
->
ªque°_body_no_buf„rög
 = 1;

906 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

908 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

909  
rc
;

912  
NGX_DONE
;

913 
	}
}

916 
ngx_öt_t


917 
	$ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_¥oxy_˘x_t
 *
˘x
,

918 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

920 
u_ch¨
 *
p
;

921 
size_t
 
add
;

922 
u_sh‹t
 
p‹t
;

923 
ngx_°r_t
 
¥oxy
;

924 
ngx_uæ_t
 
uæ
;

925 
ngx_hâp_up°ªam_t
 *
u
;

927 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
¥oxy
, 
∂cf
->
¥oxy_Àngths
->
ñts
, 0,

928 
∂cf
->
¥oxy_vÆues
->
ñts
)

929 =
NULL
)

931  
NGX_ERROR
;

934 i‡(
¥oxy
.
Àn
 > 7

935 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

937 
add
 = 7;

938 
p‹t
 = 80;

940 #i‡(
NGX_HTTP_SSL
)

942 } i‡(
¥oxy
.
Àn
 > 8

943 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "https://", 8) == 0)

945 
add
 = 8;

946 
p‹t
 = 443;

947 
r
->
up°ªam
->
s¶
 = 1;

952 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

953 "övÆid URLÖªfix i¿\"%V\"", &
¥oxy
);

954  
NGX_ERROR
;

957 
u
 = 
r
->
up°ªam
;

959 
u
->
schema
.
Àn
 = 
add
;

960 
u
->
schema
.
d©a
 = 
¥oxy
.data;

962 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

964 
uæ
.uæ.
Àn
 = 
¥oxy
.À¿- 
add
;

965 
uæ
.uæ.
d©a
 = 
¥oxy
.d©®+ 
add
;

966 
uæ
.
deÁu…_p‹t
 = 
p‹t
;

967 
uæ
.
uri_∑π
 = 1;

968 
uæ
.
no_ªsﬁve
 = 1;

970 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

971 i‡(
uæ
.
îr
) {

972 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

973 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

976  
NGX_ERROR
;

979 i‡(
uæ
.
uri
.
Àn
) {

980 i‡(
uæ
.
uri
.
d©a
[0] == '?') {

981 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
uæ
.
uri
.
Àn
 + 1);

982 i‡(
p
 =
NULL
) {

983  
NGX_ERROR
;

986 *
p
++ = '/';

987 
	`ngx_mem˝y
(
p
, 
uæ
.
uri
.
d©a
, uæ.uri.
Àn
);

989 
uæ
.
uri
.
Àn
++;

990 
uæ
.
uri
.
d©a
 = 
p
 - 1;

994 
˘x
->
v¨s
.
key_°¨t
 = 
u
->
schema
;

996 
	`ngx_hâp_¥oxy_£t_v¨s
(&
uæ
, &
˘x
->
v¨s
);

998 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

999 i‡(
u
->
ªsﬁved
 =
NULL
) {

1000  
NGX_ERROR
;

1003 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

1004 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

1005 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

1006 
u
->
ªsﬁved
->
«ddrs
 = 1;

1007 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

1010 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

1011 
u
->
ªsﬁved
->
p‹t
 = (
ö_p‹t_t
Ë(
uæ
.
no_p‹t
 ?Öort : url.port);

1012 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

1015  
NGX_OK
;

1016 
	}
}

1019 #i‡(
NGX_HTTP_CACHE
)

1021 
ngx_öt_t


1022 
	$ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

1024 
size_t
 
Àn
, 
loc_Àn
;

1025 
u_ch¨
 *
p
;

1026 
uöçå_t
 
esˇ≥
;

1027 
ngx_°r_t
 *
key
;

1028 
ngx_hâp_up°ªam_t
 *
u
;

1029 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1030 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

1032 
u
 = 
r
->
up°ªam
;

1034 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1036 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1038 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

1039 i‡(
key
 =
NULL
) {

1040  
NGX_ERROR
;

1043 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

1045 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∂cf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

1046  
NGX_ERROR
;

1049  
NGX_OK
;

1052 *
key
 = 
˘x
->
v¨s
.
key_°¨t
;

1054 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

1055 i‡(
key
 =
NULL
) {

1056  
NGX_ERROR
;

1059 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1061 *
key
 = 
˘x
->
v¨s
.
uri
;

1062 
u
->
uri
 = 
˘x
->
v¨s
.uri;

1064  
NGX_OK
;

1066 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

1068 *
key
 = 
r
->
u≈¨£d_uri
;

1069 
u
->
uri
 = 
r
->
u≈¨£d_uri
;

1071  
NGX_OK
;

1074 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
Ë? 
∂cf
->
loˇti⁄
.len : 0;

1076 i‡(
r
->
quŸed_uri
 ||Ñ->
öã∫Æ
) {

1077 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1078 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1080 
esˇ≥
 = 0;

1083 
Àn
 = 
˘x
->
v¨s
.
uri
.À¿+ 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


1084 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

1086 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1087 i‡(
p
 =
NULL
) {

1088  
NGX_ERROR
;

1091 
key
->
d©a
 = 
p
;

1093 i‡(
r
->
vÆid_loˇti⁄
) {

1094 
p
 = 
	`ngx_c›y
’, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1097 i‡(
esˇ≥
) {

1098 
	`ngx_esˇ≥_uri
(
p
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1099 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1100 
p
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

1103 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
 + 
loc_Àn
,Ñ->uri.
Àn
 -Üoc_len);

1106 i‡(
r
->
¨gs
.
Àn
 > 0) {

1107 *
p
++ = '?';

1108 
p
 = 
	`ngx_c›y
’, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1111 
key
->
Àn
 = 
p
 - key->
d©a
;

1112 
u
->
uri
 = *
key
;

1114  
NGX_OK
;

1115 
	}
}

1120 
ngx_öt_t


1121 
	$ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1123 
size_t
 
Àn
, 
uri_Àn
, 
loc_Àn
, 
body_Àn
;

1124 
uöçå_t
 
esˇ≥
;

1125 
ngx_buf_t
 *
b
;

1126 
ngx_°r_t
 
mëhod
;

1127 
ngx_uöt_t
 
i
, 
u≈¨£d_uri
;

1128 
ngx_chaö_t
 *
˛
, *
body
;

1129 
ngx_li°_∑π_t
 *
∑π
;

1130 
ngx_èbÀ_ñt_t
 *
hódî
;

1131 
ngx_hâp_up°ªam_t
 *
u
;

1132 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1133 
ngx_hâp_s¸ùt_code_±
 
code
;

1134 
ngx_hâp_¥oxy_hódîs_t
 *
hódîs
;

1135 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

1136 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

1137 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1139 
u
 = 
r
->
up°ªam
;

1141 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1143 #i‡(
NGX_HTTP_CACHE
)

1144 
hódîs
 = 
u
->
ˇchóbÀ
 ? &
∂cf
->
hódîs_ˇche
 : &plcf->headers;

1146 
hódîs
 = &
∂cf
->headers;

1149 i‡(
u
->
mëhod
.
Àn
) {

1151 
mëhod
 = 
u
->method;

1152 
mëhod
.
Àn
++;

1154 } i‡(
∂cf
->
mëhod
.
Àn
) {

1155 
mëhod
 = 
∂cf
->method;

1158 
mëhod
 = 
r
->
mëhod_«me
;

1159 
mëhod
.
Àn
++;

1162 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1164 i‡(
mëhod
.
Àn
 == 5

1165 && 
	`ngx_°∫ˇ£cmp
(
mëhod
.
d©a
, (
u_ch¨
 *) "HEAD ", 5) == 0)

1167 
˘x
->
hód
 = 1;

1170 
Àn
 = 
mëhod
.À¿+ (
ngx_hâp_¥oxy_vîsi⁄
Ë- 1 + (
CRLF
) - 1;

1172 
esˇ≥
 = 0;

1173 
loc_Àn
 = 0;

1174 
u≈¨£d_uri
 = 0;

1176 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1177 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
;

1179 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

1181 
u≈¨£d_uri
 = 1;

1182 
uri_Àn
 = 
r
->
u≈¨£d_uri
.
Àn
;

1185 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
) ?

1186 
∂cf
->
loˇti⁄
.
Àn
 : 0;

1188 i‡(
r
->
quŸed_uri
 ||Ñ->
•a˚_ö_uri
 ||Ñ->
öã∫Æ
) {

1189 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1190 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1193 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
 + 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


1194 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

1197 i‡(
uri_Àn
 == 0) {

1198 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1200  
NGX_ERROR
;

1203 
Àn
 +
uri_Àn
;

1205 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1207 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∂cf
->
body_Êushes
);

1208 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
hódîs
->
Êushes
);

1210 i‡(
∂cf
->
body_Àngths
) {

1211 
À
.
ù
 = 
∂cf
->
body_Àngths
->
ñts
;

1212 
À
.
ªque°
 = 
r
;

1213 
À
.
Êushed
 = 1;

1214 
body_Àn
 = 0;

1216 *(
uöçå_t
 *Ë
À
.
ù
) {

1217 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1218 
body_Àn
 +
	`lcode
(&
À
);

1221 
˘x
->
öã∫Æ_body_Àngth
 = 
body_Àn
;

1222 
Àn
 +
body_Àn
;

1224 } i‡(
r
->
hódîs_ö
.
chunked
 &&Ñ->
ªadög_body
) {

1225 
˘x
->
öã∫Æ_body_Àngth
 = -1;

1226 
˘x
->
öã∫Æ_chunked
 = 1;

1229 
˘x
->
öã∫Æ_body_Àngth
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1232 
À
.
ù
 = 
hódîs
->
Àngths
->
ñts
;

1233 
À
.
ªque°
 = 
r
;

1234 
À
.
Êushed
 = 1;

1236 *(
uöçå_t
 *Ë
À
.
ù
) {

1237 *(
uöçå_t
 *Ë
À
.
ù
) {

1238 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1239 
Àn
 +
	`lcode
(&
À
);

1241 
À
.
ù
 +(
uöçå_t
);

1245 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1246 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1247 
hódî
 = 
∑π
->
ñts
;

1249 
i
 = 0; ; i++) {

1251 i‡(
i
 >
∑π
->
√…s
) {

1252 i‡(
∑π
->
√xt
 =
NULL
) {

1256 
∑π
 =Ö¨t->
√xt
;

1257 
hódî
 = 
∑π
->
ñts
;

1258 
i
 = 0;

1261 i‡(
	`ngx_hash_föd
(&
hódîs
->
hash
, 
hódî
[
i
].hash,

1262 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1267 
Àn
 +
hódî
[
i
].
key
.len + (": ") - 1

1268 + 
hódî
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

1273 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

1274 i‡(
b
 =
NULL
) {

1275  
NGX_ERROR
;

1278 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1279 i‡(
˛
 =
NULL
) {

1280  
NGX_ERROR
;

1283 
˛
->
buf
 = 
b
;

1288 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
mëhod
.
d©a
, mëhod.
Àn
);

1290 
u
->
uri
.
d©a
 = 
b
->
œ°
;

1292 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1293 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1295 } i‡(
u≈¨£d_uri
) {

1296 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

1299 i‡(
r
->
vÆid_loˇti⁄
) {

1300 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1303 i‡(
esˇ≥
) {

1304 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1305 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1306 
b
->
œ°
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

1309 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1310 
r
->
uri
.
Àn
 - 
loc_Àn
);

1313 i‡(
r
->
¨gs
.
Àn
 > 0) {

1314 *
b
->
œ°
++ = '?';

1315 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1319 
u
->
uri
.
Àn
 = 
b
->
œ°
 - u->uri.
d©a
;

1321 i‡(
∂cf
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_11
) {

1322 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄_11
,

1323 (
ngx_hâp_¥oxy_vîsi⁄_11
) - 1);

1326 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄
,

1327 (
ngx_hâp_¥oxy_vîsi⁄
) - 1);

1330 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1332 
e
.
ù
 = 
hódîs
->
vÆues
->
ñts
;

1333 
e
.
pos
 = 
b
->
œ°
;

1334 
e
.
ªque°
 = 
r
;

1335 
e
.
Êushed
 = 1;

1337 
À
.
ù
 = 
hódîs
->
Àngths
->
ñts
;

1339 *(
uöçå_t
 *Ë
À
.
ù
) {

1340 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1343 (Ë
	`lcode
(&
À
);

1345 i‡(*(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
) {

1347 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1348 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1351 
e
.
skù
 = (
Àn
 =(
CRLF
) - 1) ? 1 : 0;

1354 
e
.
skù
 = 0;

1357 
À
.
ù
 +(
uöçå_t
);

1359 *(
uöçå_t
 *Ë
e
.
ù
) {

1360 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1361 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1363 
e
.
ù
 +(
uöçå_t
);

1366 
b
->
œ°
 = 
e
.
pos
;

1369 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1370 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1371 
hódî
 = 
∑π
->
ñts
;

1373 
i
 = 0; ; i++) {

1375 i‡(
i
 >
∑π
->
√…s
) {

1376 i‡(
∑π
->
√xt
 =
NULL
) {

1380 
∑π
 =Ö¨t->
√xt
;

1381 
hódî
 = 
∑π
->
ñts
;

1382 
i
 = 0;

1385 i‡(
	`ngx_hash_föd
(&
hódîs
->
hash
, 
hódî
[
i
].hash,

1386 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1391 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1393 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

1395 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
,

1396 
hódî
[
i
].
vÆue
.
Àn
);

1398 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1400 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1402 &
hódî
[
i
].
key
, &hódî[i].
vÆue
);

1408 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1410 i‡(
∂cf
->
body_vÆues
) {

1411 
e
.
ù
 = 
∂cf
->
body_vÆues
->
ñts
;

1412 
e
.
pos
 = 
b
->
œ°
;

1413 
e
.
skù
 = 0;

1415 *(
uöçå_t
 *Ë
e
.
ù
) {

1416 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1417 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1420 
b
->
œ°
 = 
e
.
pos
;

1423 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1425 (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

1427 i‡(
r
->
ªque°_body_no_buf„rög
) {

1429 
u
->
ªque°_bufs
 = 
˛
;

1431 i‡(
˘x
->
öã∫Æ_chunked
) {

1432 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_hâp_¥oxy_body_ouçut_fûãr
;

1433 
u
->
ouçut
.
fûãr_˘x
 = 
r
;

1436 } i‡(
∂cf
->
body_vÆues
 =
NULL
 &&Ölcf->
up°ªam
.
∑ss_ªque°_body
) {

1438 
body
 = 
u
->
ªque°_bufs
;

1439 
u
->
ªque°_bufs
 = 
˛
;

1441 
body
) {

1442 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1443 i‡(
b
 =
NULL
) {

1444  
NGX_ERROR
;

1447 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1449 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1450 i‡(
˛
->
√xt
 =
NULL
) {

1451  
NGX_ERROR
;

1454 
˛
 = cl->
√xt
;

1455 
˛
->
buf
 = 
b
;

1457 
body
 = body->
√xt
;

1461 
u
->
ªque°_bufs
 = 
˛
;

1464 
b
->
Êush
 = 1;

1465 
˛
->
√xt
 = 
NULL
;

1467  
NGX_OK
;

1468 
	}
}

1471 
ngx_öt_t


1472 
	$ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1474 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1476 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1478 i‡(
˘x
 =
NULL
) {

1479  
NGX_OK
;

1482 
˘x
->
°©us
.
code
 = 0;

1483 
˘x
->
°©us
.
cou¡
 = 0;

1484 
˘x
->
°©us
.
°¨t
 = 
NULL
;

1485 
˘x
->
°©us
.
íd
 = 
NULL
;

1486 
˘x
->
chunked
.
°©e
 = 0;

1488 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

1489 
r
->
up°ªam
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

1490 
r
->
up°ªam
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

1491 
r
->
°©e
 = 0;

1493  
NGX_OK
;

1494 
	}
}

1497 
ngx_öt_t


1498 
	$ngx_hâp_¥oxy_body_ouçut_fûãr
(*
d©a
, 
ngx_chaö_t
 *
ö
)

1500 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1502 
off_t
 
size
;

1503 
u_ch¨
 *
chunk
;

1504 
ngx_öt_t
 
rc
;

1505 
ngx_buf_t
 *
b
;

1506 
ngx_chaö_t
 *
out
, *
˛
, *
é
, **
Œ
, **
Ê
;

1507 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1509 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1512 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1514 i‡(
ö
 =
NULL
) {

1515 
out
 = 
ö
;

1516 
out
;

1519 
out
 = 
NULL
;

1520 
Œ
 = &
out
;

1522 i‡(!
˘x
->
hódî_£¡
) {

1525 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1528 
˘x
->
hódî_£¡
 = 1;

1530 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1531 i‡(
é
 =
NULL
) {

1532  
NGX_ERROR
;

1535 
é
->
buf
 = 
ö
->buf;

1536 *
Œ
 = 
é
;

1537 
Œ
 = &
é
->
√xt
;

1539 
ö
 = in->
√xt
;

1541 i‡(
ö
 =
NULL
) {

1542 
é
->
√xt
 = 
NULL
;

1543 
out
;

1547 
size
 = 0;

1548 
˛
 = 
ö
;

1549 
Ê
 = 
Œ
;

1552 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1553 "¥oxy ouçuàchunk: %d", 
	`ngx_buf_size
(
˛
->
buf
));

1555 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

1557 i‡(
˛
->
buf
->
Êush


1558 || 
˛
->
buf
->
sync


1559 || 
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)

1560 || 
˛
->
buf
->
ö_fûe
)

1562 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1563 i‡(
é
 =
NULL
) {

1564  
NGX_ERROR
;

1567 
é
->
buf
 = 
˛
->buf;

1568 *
Œ
 = 
é
;

1569 
Œ
 = &
é
->
√xt
;

1572 i‡(
˛
->
√xt
 =
NULL
) {

1576 
˛
 = cl->
√xt
;

1579 i‡(
size
) {

1580 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

1581 i‡(
é
 =
NULL
) {

1582  
NGX_ERROR
;

1585 
b
 = 
é
->
buf
;

1586 
chunk
 = 
b
->
°¨t
;

1588 i‡(
chunk
 =
NULL
) {

1591 
chunk
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ("0000000000000000" 
CRLF
) - 1);

1592 i‡(
chunk
 =
NULL
) {

1593  
NGX_ERROR
;

1596 
b
->
°¨t
 = 
chunk
;

1597 
b
->
íd
 = 
chunk
 + ("0000000000000000" 
CRLF
) - 1;

1600 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_body_ouçut_fûãr
;

1601 
b
->
mem‹y
 = 0;

1602 
b
->
ãmp‹¨y
 = 1;

1603 
b
->
pos
 = 
chunk
;

1604 
b
->
œ°
 = 
	`ngx_•rötf
(
chunk
, "%xO" 
CRLF
, 
size
);

1606 
é
->
√xt
 = *
Ê
;

1607 *
Ê
 = 
é
;

1610 i‡(
˛
->
buf
->
œ°_buf
) {

1611 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

1612 i‡(
é
 =
NULL
) {

1613  
NGX_ERROR
;

1616 
b
 = 
é
->
buf
;

1618 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_body_ouçut_fûãr
;

1619 
b
->
ãmp‹¨y
 = 0;

1620 
b
->
mem‹y
 = 1;

1621 
b
->
œ°_buf
 = 1;

1622 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
 "0" CRLF CRLF;

1623 
b
->
œ°
 = b->
pos
 + 7;

1625 
˛
->
buf
->
œ°_buf
 = 0;

1627 *
Œ
 = 
é
;

1629 i‡(
size
 == 0) {

1630 
b
->
pos
 += 2;

1633 } i‡(
size
 > 0) {

1634 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

1635 i‡(
é
 =
NULL
) {

1636  
NGX_ERROR
;

1639 
b
 = 
é
->
buf
;

1641 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_body_ouçut_fûãr
;

1642 
b
->
ãmp‹¨y
 = 0;

1643 
b
->
mem‹y
 = 1;

1644 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
;

1645 
b
->
œ°
 = b->
pos
 + 2;

1647 *
Œ
 = 
é
;

1650 *
Œ
 = 
NULL
;

1653 
out
:

1655 
rc
 = 
	`ngx_chaö_wrôî
(&
r
->
up°ªam
->
wrôî
, 
out
);

1657 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
out
,

1658 (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_body_ouçut_fûãr
);

1660  
rc
;

1661 
	}
}

1664 
ngx_öt_t


1665 
	$ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

1667 
size_t
 
Àn
;

1668 
ngx_öt_t
 
rc
;

1669 
ngx_hâp_up°ªam_t
 *
u
;

1670 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1672 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1674 i‡(
˘x
 =
NULL
) {

1675  
NGX_ERROR
;

1678 
u
 = 
r
->
up°ªam
;

1680 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, &
˘x
->
°©us
);

1682 i‡(
rc
 =
NGX_AGAIN
) {

1683  
rc
;

1686 i‡(
rc
 =
NGX_ERROR
) {

1688 #i‡(
NGX_HTTP_CACHE
)

1690 i‡(
r
->
ˇche
) {

1691 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1692  
NGX_OK
;

1697 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1701 i‡(
u
->
ac˚l
) {

1702  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1706 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1707 
u
->
°©e
->
°©us
 = 
NGX_HTTP_OK
;

1708 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1710  
NGX_OK
;

1713 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1714 
u
->
°©e
->
°©us
 = 
˘x
->°©us.
code
;

1717 
u
->
hódîs_ö
.
°©us_n
 = 
˘x
->
°©us
.
code
;

1719 
Àn
 = 
˘x
->
°©us
.
íd
 - ctx->°©us.
°¨t
;

1720 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

1722 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1723 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

1724  
NGX_ERROR
;

1727 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
˘x
->
°©us
.
°¨t
, 
Àn
);

1729 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1731 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1733 i‡(
˘x
->
°©us
.
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

1734 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1737 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_hódî
;

1739  
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
r
);

1740 
	}
}

1743 
ngx_öt_t


1744 
	$ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1746 
ngx_öt_t
 
rc
;

1747 
ngx_èbÀ_ñt_t
 *
h
;

1748 
ngx_hâp_up°ªam_t
 *
u
;

1749 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1750 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1751 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1753 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1757 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1759 i‡(
rc
 =
NGX_OK
) {

1763 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1764 i‡(
h
 =
NULL
) {

1765  
NGX_ERROR
;

1768 
h
->
hash
 = 
r
->
hódî_hash
;

1770 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1771 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1773 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1774 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1 + h->key.len);

1775 i‡(
h
->
key
.
d©a
 =
NULL
) {

1776  
NGX_ERROR
;

1779 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1780 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1782 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1783 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1784 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1785 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1787 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1788 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1791 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1794 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1795 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1797 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1798  
NGX_ERROR
;

1801 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1803 &
h
->
key
, &h->
vÆue
);

1808 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1812 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1820 i‡(
r
->
up°ªam
->
hódîs_ö
.
£rvî
 =
NULL
) {

1821 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1822 i‡(
h
 =
NULL
) {

1823  
NGX_ERROR
;

1826 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash(ngx_hash(

1827 
	`ngx_hash
('s', 'e'), 'r'), 'v'), 'e'), 'r');

1829 
	`ngx_°r_£t
(&
h
->
key
, "Server");

1830 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1831 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "server";

1834 i‡(
r
->
up°ªam
->
hódîs_ö
.
d©e
 =
NULL
) {

1835 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1836 i‡(
h
 =
NULL
) {

1837  
NGX_ERROR
;

1840 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash('d', 'a'), 't'), 'e');

1842 
	`ngx_°r_£t
(&
h
->
key
, "Date");

1843 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1844 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "date";

1849 
u
 = 
r
->
up°ªam
;

1851 i‡(
u
->
hódîs_ö
.
chunked
) {

1852 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1860 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1862 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1863 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1864 || 
˘x
->
hód


1865 || (!
u
->
hódîs_ö
.
chunked


1866 && 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0))

1868 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1871 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

1872 
u
->
kì∑live
 = 0;

1874 i‡(
r
->
hódîs_ö
.
upgøde
) {

1875 
u
->
upgøde
 = 1;

1879  
NGX_OK
;

1882 i‡(
rc
 =
NGX_AGAIN
) {

1883  
NGX_AGAIN
;

1888 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1891  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1893 
	}
}

1896 
ngx_öt_t


1897 
	$ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
)

1899 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1900 
ngx_hâp_up°ªam_t
 *
u
;

1901 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1903 
u
 = 
r
->
up°ªam
;

1904 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1906 i‡(
˘x
 =
NULL
) {

1907  
NGX_ERROR
;

1910 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1912 
u
->
hódîs_ö
.
°©us_n
, 
˘x
->
hód
, u->hódîs_ö.
chunked
,

1913 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

1917 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1918 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1919 || 
˘x
->
hód
)

1924 
u
->
pùe
->
Àngth
 = 0;

1925 
u
->
Àngth
 = 0;

1926 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1928 } i‡(
u
->
hódîs_ö
.
chunked
) {

1931 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_chunked_fûãr
;

1932 
u
->
pùe
->
Àngth
 = 3;

1934 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
;

1935 
u
->
Àngth
 = 1;

1937 } i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

1940 
u
->
pùe
->
Àngth
 = 0;

1941 
u
->
Àngth
 = 0;

1942 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1947 
u
->
pùe
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1948 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1951  
NGX_OK
;

1952 
	}
}

1955 
ngx_öt_t


1956 
	$ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1958 
ngx_buf_t
 *
b
;

1959 
ngx_chaö_t
 *
˛
;

1960 
ngx_hâp_ªque°_t
 *
r
;

1962 i‡(
buf
->
pos
 =buf->
œ°
) {

1963  
NGX_OK
;

1966 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

1967 i‡(
˛
 =
NULL
) {

1968  
NGX_ERROR
;

1971 
b
 = 
˛
->
buf
;

1973 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

1974 
b
->
shadow
 = 
buf
;

1975 
b
->
èg
 = 
p
->tag;

1976 
b
->
œ°_shadow
 = 1;

1977 
b
->
ªcy˛ed
 = 1;

1978 
buf
->
shadow
 = 
b
;

1980 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

1982 i‡(
p
->
ö
) {

1983 *
p
->
œ°_ö
 = 
˛
;

1985 
p
->
ö
 = 
˛
;

1987 
p
->
œ°_ö
 = &
˛
->
√xt
;

1989 i‡(
p
->
Àngth
 == -1) {

1990  
NGX_OK
;

1993 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

1995 i‡(
p
->
Àngth
 == 0) {

1996 
r
 = 
p
->
öput_˘x
;

1997 
p
->
up°ªam_d⁄e
 = 1;

1998 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2000 } i‡(
p
->
Àngth
 < 0) {

2001 
r
 = 
p
->
öput_˘x
;

2002 
p
->
up°ªam_d⁄e
 = 1;

2004 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2009  
NGX_OK
;

2010 
	}
}

2013 
ngx_öt_t


2014 
	$ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

2016 
ngx_öt_t
 
rc
;

2017 
ngx_buf_t
 *
b
, **
¥ev
;

2018 
ngx_chaö_t
 *
˛
;

2019 
ngx_hâp_ªque°_t
 *
r
;

2020 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2022 i‡(
buf
->
pos
 =buf->
œ°
) {

2023  
NGX_OK
;

2026 
r
 = 
p
->
öput_˘x
;

2027 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2029 i‡(
˘x
 =
NULL
) {

2030  
NGX_ERROR
;

2033 
b
 = 
NULL
;

2034 
¥ev
 = &
buf
->
shadow
;

2038 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
buf
, &
˘x
->
chunked
);

2040 i‡(
rc
 =
NGX_OK
) {

2044 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

2045 i‡(
˛
 =
NULL
) {

2046  
NGX_ERROR
;

2049 
b
 = 
˛
->
buf
;

2051 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

2053 
b
->
pos
 = 
buf
->pos;

2054 
b
->
°¨t
 = 
buf
->start;

2055 
b
->
íd
 = 
buf
->end;

2056 
b
->
èg
 = 
p
->tag;

2057 
b
->
ãmp‹¨y
 = 1;

2058 
b
->
ªcy˛ed
 = 1;

2060 *
¥ev
 = 
b
;

2061 
¥ev
 = &
b
->
shadow
;

2063 i‡(
p
->
ö
) {

2064 *
p
->
œ°_ö
 = 
˛
;

2066 
p
->
ö
 = 
˛
;

2068 
p
->
œ°_ö
 = &
˛
->
√xt
;

2070  
b
->
num
 = 
buf
->num;

2072 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

2073 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

2075 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
chunked
.
size
) {

2077 
buf
->
pos
 +(
size_t
Ë
˘x
->
chunked
.
size
;

2078 
b
->
œ°
 = 
buf
->
pos
;

2079 
˘x
->
chunked
.
size
 = 0;

2084 
˘x
->
chunked
.
size
 -
buf
->
œ°
 - buf->
pos
;

2085 
buf
->
pos
 = buf->
œ°
;

2086 
b
->
œ°
 = 
buf
->last;

2091 i‡(
rc
 =
NGX_DONE
) {

2095 
p
->
up°ªam_d⁄e
 = 1;

2096 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2101 i‡(
rc
 =
NGX_AGAIN
) {

2105 
p
->
Àngth
 = 
˘x
->
chunked
.length;

2112 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2115  
NGX_ERROR
;

2118 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2120 
˘x
->
chunked
.
°©e
, 
p
->
Àngth
);

2122 i‡(
b
) {

2123 
b
->
shadow
 = 
buf
;

2124 
b
->
œ°_shadow
 = 1;

2126 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

2127 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

2129  
NGX_OK
;

2134 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

2135  
NGX_ERROR
;

2138  
NGX_OK
;

2139 
	}
}

2142 
ngx_öt_t


2143 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2145 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2147 
ngx_buf_t
 *
b
;

2148 
ngx_chaö_t
 *
˛
, **
Œ
;

2149 
ngx_hâp_up°ªam_t
 *
u
;

2151 
u
 = 
r
->
up°ªam
;

2153 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2154 
Œ
 = &
˛
->
√xt
;

2157 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2158 i‡(
˛
 =
NULL
) {

2159  
NGX_ERROR
;

2162 *
Œ
 = 
˛
;

2164 
˛
->
buf
->
Êush
 = 1;

2165 
˛
->
buf
->
mem‹y
 = 1;

2167 
b
 = &
u
->
buf„r
;

2169 
˛
->
buf
->
pos
 = 
b
->
œ°
;

2170 
b
->
œ°
 +
byãs
;

2171 
˛
->
buf
->
œ°
 = 
b
->last;

2172 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

2174 i‡(
u
->
Àngth
 == -1) {

2175  
NGX_OK
;

2178 
u
->
Àngth
 -
byãs
;

2180 i‡(
u
->
Àngth
 == 0) {

2181 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2184  
NGX_OK
;

2185 
	}
}

2188 
ngx_öt_t


2189 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2191 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2193 
ngx_öt_t
 
rc
;

2194 
ngx_buf_t
 *
b
, *
buf
;

2195 
ngx_chaö_t
 *
˛
, **
Œ
;

2196 
ngx_hâp_up°ªam_t
 *
u
;

2197 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2199 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2201 i‡(
˘x
 =
NULL
) {

2202  
NGX_ERROR
;

2205 
u
 = 
r
->
up°ªam
;

2206 
buf
 = &
u
->
buf„r
;

2208 
buf
->
pos
 = buf->
œ°
;

2209 
buf
->
œ°
 +
byãs
;

2211 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2212 
Œ
 = &
˛
->
√xt
;

2217 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
buf
, &
˘x
->
chunked
);

2219 i‡(
rc
 =
NGX_OK
) {

2223 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2224 i‡(
˛
 =
NULL
) {

2225  
NGX_ERROR
;

2228 *
Œ
 = 
˛
;

2229 
Œ
 = &
˛
->
√xt
;

2231 
b
 = 
˛
->
buf
;

2233 
b
->
Êush
 = 1;

2234 
b
->
mem‹y
 = 1;

2236 
b
->
pos
 = 
buf
->pos;

2237 
b
->
èg
 = 
u
->
ouçut
.tag;

2239 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
chunked
.
size
) {

2240 
buf
->
pos
 +(
size_t
Ë
˘x
->
chunked
.
size
;

2241 
b
->
œ°
 = 
buf
->
pos
;

2242 
˘x
->
chunked
.
size
 = 0;

2245 
˘x
->
chunked
.
size
 -
buf
->
œ°
 - buf->
pos
;

2246 
buf
->
pos
 = buf->
œ°
;

2247 
b
->
œ°
 = 
buf
->last;

2250 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2252 
b
->
pos
, b->
œ°
 - b->pos);

2257 i‡(
rc
 =
NGX_DONE
) {

2261 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

2262 
u
->
Àngth
 = 0;

2267 i‡(
rc
 =
NGX_AGAIN
) {

2273 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2276  
NGX_ERROR
;

2281 i‡(
r
->
subªque°_ö_mem‹y
) {

2283 
˛
 = 
u
->
out_bufs
;

2285 i‡(
˛
) {

2286 
buf
->
pos
 = 
˛
->buf->pos;

2289 
buf
->
œ°
 = buf->
pos
;

2291 
˛
 = 
u
->
out_bufs
; cl; c»˛->
√xt
) {

2292 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2294 
˛
->
buf
->
pos
, cl->buf->
œ°
, 
	`ngx_buf_size
(cl->buf));

2296 i‡(
buf
->
œ°
 =
˛
->buf->
pos
) {

2297 
buf
->
œ°
 = 
˛
->buf->last;

2301 
buf
->
œ°
 = 
	`ngx_movemem
(buf->œ°, 
˛
->buf->
pos
,

2302 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

2304 
˛
->
buf
->
pos
 = buf->
œ°
 - (cl->buf->last - cl->buf->pos);

2305 
˛
->
buf
->
œ°
 = buf->last;

2309  
NGX_OK
;

2310 
	}
}

2314 
	$ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2316 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2320 
	}
}

2324 
	$ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2326 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2330 
	}
}

2333 
ngx_öt_t


2334 
	$ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2335 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2337 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2339 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2341 i‡(
˘x
 =
NULL
) {

2342 
v
->
nŸ_found
 = 1;

2343  
NGX_OK
;

2346 
v
->
Àn
 = 
˘x
->
v¨s
.
ho°_hódî
.len;

2347 
v
->
vÆid
 = 1;

2348 
v
->
no_ˇchóbÀ
 = 0;

2349 
v
->
nŸ_found
 = 0;

2350 
v
->
d©a
 = 
˘x
->
v¨s
.
ho°_hódî
.data;

2352  
NGX_OK
;

2353 
	}
}

2356 
ngx_öt_t


2357 
	$ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2358 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2360 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2362 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2364 i‡(
˘x
 =
NULL
) {

2365 
v
->
nŸ_found
 = 1;

2366  
NGX_OK
;

2369 
v
->
Àn
 = 
˘x
->
v¨s
.
p‹t
.len;

2370 
v
->
vÆid
 = 1;

2371 
v
->
no_ˇchóbÀ
 = 0;

2372 
v
->
nŸ_found
 = 0;

2373 
v
->
d©a
 = 
˘x
->
v¨s
.
p‹t
.data;

2375  
NGX_OK
;

2376 
	}
}

2379 
ngx_öt_t


2380 
	$ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2381 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2383 
size_t
 
Àn
;

2384 
u_ch¨
 *
p
;

2385 
ngx_uöt_t
 
i
, 
n
;

2386 
ngx_èbÀ_ñt_t
 **
h
;

2388 
v
->
vÆid
 = 1;

2389 
v
->
no_ˇchóbÀ
 = 0;

2390 
v
->
nŸ_found
 = 0;

2392 
n
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
.
√…s
;

2393 
h
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
.
ñts
;

2395 
Àn
 = 0;

2397 
i
 = 0; i < 
n
; i++) {

2398 
Àn
 +
h
[
i
]->
vÆue
.len + (", ") - 1;

2401 i‡(
Àn
 == 0) {

2402 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

2403 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

2404  
NGX_OK
;

2407 
Àn
 +
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

2409 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2410 i‡(
p
 =
NULL
) {

2411  
NGX_ERROR
;

2414 
v
->
Àn
 =Üen;

2415 
v
->
d©a
 = 
p
;

2417 
i
 = 0; i < 
n
; i++) {

2418 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

2419 *
p
++ = ','; *p++ = ' ';

2422 
	`ngx_mem˝y
(
p
, 
r
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,Ñ->c⁄√˘i⁄->addr_ãxt.
Àn
);

2424  
NGX_OK
;

2425 
	}
}

2428 
ngx_öt_t


2429 
	$ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2430 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2432 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2434 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2436 i‡(
˘x
 =
NULL
 || ctx->
öã∫Æ_body_Àngth
 < 0) {

2437 
v
->
nŸ_found
 = 1;

2438  
NGX_OK
;

2441 
v
->
vÆid
 = 1;

2442 
v
->
no_ˇchóbÀ
 = 0;

2443 
v
->
nŸ_found
 = 0;

2445 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

2447 i‡(
v
->
d©a
 =
NULL
) {

2448  
NGX_ERROR
;

2451 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%O", 
˘x
->
öã∫Æ_body_Àngth
) - v->data;

2453  
NGX_OK
;

2454 
	}
}

2457 
ngx_öt_t


2458 
	$ngx_hâp_¥oxy_öã∫Æ_chunked_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2459 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2461 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2463 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2465 i‡(
˘x
 =
NULL
 || !˘x->
öã∫Æ_chunked
) {

2466 
v
->
nŸ_found
 = 1;

2467  
NGX_OK
;

2470 
v
->
vÆid
 = 1;

2471 
v
->
no_ˇchóbÀ
 = 0;

2472 
v
->
nŸ_found
 = 0;

2474 
v
->
d©a
 = (
u_ch¨
 *) "chunked";

2475 
v
->
Àn
 = ("chunked") - 1;

2477  
NGX_OK
;

2478 
	}
}

2481 
ngx_öt_t


2482 
	$ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2483 
size_t
 
¥efix
)

2485 
size_t
 
Àn
;

2486 
ngx_öt_t
 
rc
;

2487 
ngx_uöt_t
 
i
;

2488 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2489 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2491 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2493 
¥
 = 
∂cf
->
ªdúe˘s
->
ñts
;

2495 i‡(
¥
 =
NULL
) {

2496  
NGX_DECLINED
;

2499 
Àn
 = 
h
->
vÆue
.À¿- 
¥efix
;

2501 
i
 = 0; i < 
∂cf
->
ªdúe˘s
->
√…s
; i++) {

2502 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2504 i‡(
rc
 !
NGX_DECLINED
) {

2505  
rc
;

2509  
NGX_DECLINED
;

2510 
	}
}

2513 
ngx_öt_t


2514 
	$ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
)

2516 
size_t
 
¥efix
;

2517 
u_ch¨
 *
p
;

2518 
ngx_öt_t
 
rc
, 
rv
;

2519 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2521 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
h
->
vÆue
.
d©a
, ';');

2522 i‡(
p
 =
NULL
) {

2523  
NGX_DECLINED
;

2526 
¥efix
 = 
p
 + 1 - 
h
->
vÆue
.
d©a
;

2528 
rv
 = 
NGX_DECLINED
;

2530 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2532 i‡(
∂cf
->
cookõ_domaös
) {

2533 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "domain=", 7 - 1);

2535 i‡(
p
) {

2536 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 7,

2537 
∂cf
->
cookõ_domaös
);

2538 i‡(
rc
 =
NGX_ERROR
) {

2539  
NGX_ERROR
;

2542 i‡(
rc
 !
NGX_DECLINED
) {

2543 
rv
 = 
rc
;

2548 i‡(
∂cf
->
cookõ_∑ths
) {

2549 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "path=", 5 - 1);

2551 i‡(
p
) {

2552 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 5,

2553 
∂cf
->
cookõ_∑ths
);

2554 i‡(
rc
 =
NGX_ERROR
) {

2555  
NGX_ERROR
;

2558 i‡(
rc
 !
NGX_DECLINED
) {

2559 
rv
 = 
rc
;

2564  
rv
;

2565 
	}
}

2568 
ngx_öt_t


2569 
	$ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2570 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
)

2572 
size_t
 
Àn
, 
¥efix
;

2573 
u_ch¨
 *
p
;

2574 
ngx_öt_t
 
rc
;

2575 
ngx_uöt_t
 
i
;

2576 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2578 
¥efix
 = 
vÆue
 - 
h
->vÆue.
d©a
;

2580 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
, ';');

2582 
Àn
 = 
p
 ? (
size_t
Ë’ - 
vÆue
Ë: (
h
->vÆue.À¿- 
¥efix
);

2584 
¥
 = 
ªwrôes
->
ñts
;

2586 
i
 = 0; i < 
ªwrôes
->
√…s
; i++) {

2587 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2589 i‡(
rc
 !
NGX_DECLINED
) {

2590  
rc
;

2594  
NGX_DECLINED
;

2595 
	}
}

2598 
ngx_öt_t


2599 
	$ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2600 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2602 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2604 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2605  
NGX_ERROR
;

2608 i‡(
∑âîn
.
Àn
 >Üen

2609 || 
	`ngx_r°∫cmp
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
∑âîn
.data,

2610 
∑âîn
.
Àn
) != 0)

2612  
NGX_DECLINED
;

2615 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2616  
NGX_ERROR
;

2619  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
∑âîn
.
Àn
, &
ª∂a˚mít
);

2620 
	}
}

2623 #i‡(
NGX_PCRE
)

2625 
ngx_öt_t


2626 
	$ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2627 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2629 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2631 
∑âîn
.
Àn
 =Üen;

2632 
∑âîn
.
d©a
 = 
h
->
vÆue
.d©®+ 
¥efix
;

2634 i‡(
	`ngx_hâp_ªgex_exec
(
r
, 
¥
->
∑âîn
.
ªgex
, &∑âînË!
NGX_OK
) {

2635  
NGX_DECLINED
;

2638 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2639  
NGX_ERROR
;

2642 i‡(
¥efix
 =0 && 
h
->
vÆue
.
Àn
 ==Üen) {

2643 
h
->
vÆue
 = 
ª∂a˚mít
;

2644  
NGX_OK
;

2647  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2648 
	}
}

2653 
ngx_öt_t


2654 
	$ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2655 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2657 
u_ch¨
 *
p
;

2658 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2660 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2661  
NGX_ERROR
;

2664 
p
 = 
h
->
vÆue
.
d©a
 + 
¥efix
;

2666 i‡(
p
[0] == '.') {

2667 
p
++;

2668 
¥efix
++;

2669 
Àn
--;

2672 i‡(
∑âîn
.
Àn
 !À¿|| 
	`ngx_r°∫ˇ£cmp
’©ã∫.
d©a
, 
p
,Üen) != 0) {

2673  
NGX_DECLINED
;

2676 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2677  
NGX_ERROR
;

2680  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2681 
	}
}

2684 
ngx_öt_t


2685 
	$ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
,

2686 
size_t
 
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
)

2688 
u_ch¨
 *
p
, *
d©a
;

2689 
size_t
 
√w_Àn
;

2691 
√w_Àn
 = 
ª∂a˚mít
->
Àn
 + 
h
->
vÆue
.len -Üen;

2693 i‡(
ª∂a˚mít
->
Àn
 >Üen) {

2695 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
√w_Àn
 + 1);

2696 i‡(
d©a
 =
NULL
) {

2697  
NGX_ERROR
;

2700 
p
 = 
	`ngx_c›y
(
d©a
, 
h
->
vÆue
.d©a, 
¥efix
);

2701 
p
 = 
	`ngx_c›y
’, 
ª∂a˚mít
->
d©a
,Ñïœ˚mít->
Àn
);

2703 
	`ngx_mem˝y
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2704 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
 + 1);

2706 
h
->
vÆue
.
d©a
 = data;

2709 
p
 = 
	`ngx_c›y
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
ª∂a˚mít
->data,

2710 
ª∂a˚mít
->
Àn
);

2712 
	`ngx_memmove
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2713 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
 + 1);

2716 
h
->
vÆue
.
Àn
 = 
√w_Àn
;

2718  
NGX_OK
;

2719 
	}
}

2722 
ngx_öt_t


2723 
	$ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2725 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2727 
v
 = 
ngx_hâp_¥oxy_v¨s
; v->
«me
.
Àn
; v++) {

2728 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2729 i‡(
v¨
 =
NULL
) {

2730  
NGX_ERROR
;

2733 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2734 
v¨
->
d©a
 = 
v
->data;

2737  
NGX_OK
;

2738 
	}
}

2742 
	$ngx_hâp_¥oxy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2744 
ngx_hâp_¥oxy_maö_c⁄f_t
 *
c⁄f
;

2746 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_¥oxy_maö_c⁄f_t
));

2747 i‡(
c⁄f
 =
NULL
) {

2748  
NULL
;

2751 #i‡(
NGX_HTTP_CACHE
)

2752 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
ˇches
, 
cf
->
poﬁ
, 4,

2753 (
ngx_hâp_fûe_ˇche_t
 *))

2754 !
NGX_OK
)

2756  
NULL
;

2760  
c⁄f
;

2761 
	}
}

2765 
	$ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2767 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
;

2769 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_¥oxy_loc_c⁄f_t
));

2770 i‡(
c⁄f
 =
NULL
) {

2771  
NULL
;

2812 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2813 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2814 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

2815 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2816 
c⁄f
->
up°ªam
.
ªque°_buf„rög
 = 
NGX_CONF_UNSET
;

2817 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2818 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 
NGX_CONF_UNSET
;

2820 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

2822 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2823 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2824 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2825 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2827 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2828 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2829 
c⁄f
->
up°ªam
.
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

2831 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2832 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2833 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2835 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2836 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2838 #i‡(
NGX_HTTP_CACHE
)

2839 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET
;

2840 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2841 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2842 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2843 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2844 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2845 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2846 
c⁄f
->
up°ªam
.
ˇche_lock_age
 = 
NGX_CONF_UNSET_MSEC
;

2847 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

2850 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2851 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2853 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2855 #i‡(
NGX_HTTP_SSL
)

2856 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

2857 
c⁄f
->
up°ªam
.
s¶_£rvî_«me
 = 
NGX_CONF_UNSET
;

2858 
c⁄f
->
up°ªam
.
s¶_vîify
 = 
NGX_CONF_UNSET
;

2859 
c⁄f
->
s¶_vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

2860 
c⁄f
->
s¶_∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

2864 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2866 
c⁄f
->
ªdúe˘
 = 
NGX_CONF_UNSET
;

2867 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

2869 
c⁄f
->
cookõ_domaös
 = 
NGX_CONF_UNSET_PTR
;

2870 
c⁄f
->
cookõ_∑ths
 = 
NGX_CONF_UNSET_PTR
;

2872 
c⁄f
->
hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

2874 
c⁄f
->
hódîs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

2875 
c⁄f
->
hódîs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

2877 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "proxy");

2879  
c⁄f
;

2880 
	}
}

2884 
	$ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2886 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2887 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2889 
u_ch¨
 *
p
;

2890 
size_t
 
size
;

2891 
ngx_öt_t
 
rc
;

2892 
ngx_hash_öô_t
 
hash
;

2893 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2894 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2895 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2897 #i‡(
NGX_HTTP_CACHE
)

2899 i‡(
c⁄f
->
up°ªam
.
°‹e
 > 0) {

2900 
c⁄f
->
up°ªam
.
ˇche
 = 0;

2903 i‡(
c⁄f
->
up°ªam
.
ˇche
 > 0) {

2904 
c⁄f
->
up°ªam
.
°‹e
 = 0;

2909 i‡(
c⁄f
->
up°ªam
.
°‹e
 =
NGX_CONF_UNSET
) {

2910 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2911 
¥ev
->
up°ªam
.
°‹e
, 0);

2913 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2914 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2917 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2918 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2920 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

2921 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

2923 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2924 
¥ev
->
up°ªam
.
buf„rög
, 1);

2926 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ªque°_buf„rög
,

2927 
¥ev
->
up°ªam
.
ªque°_buf„rög
, 1);

2929 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2930 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2932 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
f‹˚_ønges
,

2933 
¥ev
->
up°ªam
.
f‹˚_ønges
, 0);

2935 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

2936 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

2938 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2939 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2941 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2942 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2944 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2945 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2947 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

2948 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

2950 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2951 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2953 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2954 
¥ev
->
up°ªam
.
buf„r_size
,

2955 (
size_t
Ë
ngx_∑gesize
);

2957 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
limô_øã
,

2958 
¥ev
->
up°ªam
.
limô_øã
, 0);

2960 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2961 8, 
ngx_∑gesize
);

2963 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2964 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2966  
NGX_CONF_ERROR
;

2970 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2971 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2972 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2976 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2977 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2978 
NGX_CONF_UNSET_SIZE
);

2980 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2981 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2983 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2984 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2987 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2988 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2993  
NGX_CONF_ERROR
;

2996 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2997 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2999 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3003  
NGX_CONF_ERROR
;

3007 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

3008 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

3009 
NGX_CONF_UNSET_SIZE
);

3011 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

3012 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

3014 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

3015 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

3018 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

3019 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3024  
NGX_CONF_ERROR
;

3027 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

3028 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

3029 
NGX_CONF_UNSET_SIZE
);

3031 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

3032 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

3034 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

3035 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

3038 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

3039 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

3041 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3047  
NGX_CONF_ERROR
;

3051 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

3052 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

3053 
NGX_CONF_BITMASK_SET
);

3056 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

3057 
¥ev
->
up°ªam
.
√xt_up°ªam
,

3058 (
NGX_CONF_BITMASK_SET


3059 |
NGX_HTTP_UPSTREAM_FT_ERROR


3060 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

3062 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

3063 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


3064 |
NGX_HTTP_UPSTREAM_FT_OFF
;

3067 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

3068 
¥ev
->
up°ªam
.
ãmp_∑th
,

3069 &
ngx_hâp_¥oxy_ãmp_∑th
)

3070 !
NGX_OK
)

3072  
NGX_CONF_ERROR
;

3076 #i‡(
NGX_HTTP_CACHE
)

3078 i‡(
c⁄f
->
up°ªam
.
ˇche
 =
NGX_CONF_UNSET
) {

3079 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

3080 
¥ev
->
up°ªam
.
ˇche
, 0);

3082 
c⁄f
->
up°ªam
.
ˇche_z⁄e
 = 
¥ev
->upstream.cache_zone;

3083 
c⁄f
->
up°ªam
.
ˇche_vÆue
 = 
¥ev
->upstream.cache_value;

3086 i‡(
c⁄f
->
up°ªam
.
ˇche_z⁄e
 && c⁄f->up°ªam.ˇche_z⁄e->
d©a
 =
NULL
) {

3087 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

3089 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche_z⁄e
;

3091 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3093 &
shm_z⁄e
->
shm
.
«me
);

3095  
NGX_CONF_ERROR
;

3098 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

3099 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

3101 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

3102 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

3103 (
NGX_CONF_BITMASK_SET


3104 |
NGX_HTTP_UPSTREAM_FT_OFF
));

3106 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

3107 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


3108 |
NGX_HTTP_UPSTREAM_FT_OFF
;

3111 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

3112 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

3115 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

3116 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

3119 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

3121 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

3122 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

3124 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

3125 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

3127 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

3128 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

3130 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

3131 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

3134 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

3135 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

3137 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

3138 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

3140 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_age
,

3141 
¥ev
->
up°ªam
.
ˇche_lock_age
, 5000);

3143 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

3144 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

3148 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
mëhod
, 
¥ev
->method, "");

3150 i‡(
c⁄f
->
mëhod
.
Àn


3151 && 
c⁄f
->
mëhod
.
d©a
[c⁄f->mëhod.
Àn
 - 1] != ' ')

3153 
c⁄f
->
mëhod
.
d©a
[c⁄f->mëhod.
Àn
] = ' ';

3154 
c⁄f
->
mëhod
.
Àn
++;

3157 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

3158 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

3159 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

3160 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

3162 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

3163 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

3165 #i‡(
NGX_HTTP_SSL
)

3167 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

3168 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

3170 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
s¶_¥Ÿocﬁs
, 
¥ev
->ssl_protocols,

3171 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3


3172 |
NGX_SSL_TLSv1
|
NGX_SSL_TLSv1_1


3173 |
NGX_SSL_TLSv1_2
));

3175 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_cùhîs
, 
¥ev
->ssl_ciphers,

3178 i‡(
c⁄f
->
up°ªam
.
s¶_«me
 =
NULL
) {

3179 
c⁄f
->
up°ªam
.
s¶_«me
 = 
¥ev
->upstream.ssl_name;

3182 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£rvî_«me
,

3183 
¥ev
->
up°ªam
.
s¶_£rvî_«me
, 0);

3184 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_vîify
,

3185 
¥ev
->
up°ªam
.
s¶_vîify
, 0);

3186 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
s¶_vîify_dïth
,

3187 
¥ev
->
s¶_vîify_dïth
, 1);

3188 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_åu°ed_˚πifiˇã
,

3189 
¥ev
->
s¶_åu°ed_˚πifiˇã
, "");

3190 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_¸l
, 
¥ev
->ssl_crl, "");

3192 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã
,

3193 
¥ev
->
s¶_˚πifiˇã
, "");

3194 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã_key
,

3195 
¥ev
->
s¶_˚πifiˇã_key
, "");

3196 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
s¶_∑ssw‹ds
, 
¥ev
->s¶_∑ssw‹ds, 
NULL
);

3198 i‡(
c⁄f
->
s¶
 && 
	`ngx_hâp_¥oxy_£t_s¶
(
cf
, c⁄fË!
NGX_OK
) {

3199  
NGX_CONF_ERROR
;

3204 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªdúe˘
, 
¥ev
->redirect, 1);

3206 i‡(
c⁄f
->
ªdúe˘
) {

3208 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

3209 
c⁄f
->
ªdúe˘s
 = 
¥ev
->redirects;

3212 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
 && c⁄f->
uæ
.
d©a
) {

3214 
c⁄f
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3215 (
ngx_hâp_¥oxy_ªwrôe_t
));

3216 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

3217  
NGX_CONF_ERROR
;

3220 
¥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ªdúe˘s
);

3221 i‡(
¥
 =
NULL
) {

3222  
NGX_CONF_ERROR
;

3225 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
,

3226 (
ngx_hâp_com∂ex_vÆue_t
));

3228 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

3230 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3232 i‡(
c⁄f
->
v¨s
.
uri
.
Àn
) {

3233 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
c⁄f
->
uæ
;

3234 
¥
->
ª∂a˚mít
.
vÆue
 = 
c⁄f
->
loˇti⁄
;

3237 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
c⁄f
->
uæ
.len

3240 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

3241 i‡(
p
 =
NULL
) {

3242  
NGX_CONF_ERROR
;

3245 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

3247 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
uæ
.
d©a
, c⁄f->uæ.
Àn
);

3248 *
p
 = '/';

3250 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

3255 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_domaös
, 
¥ev
->cookõ_domaös, 
NULL
);

3257 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_∑ths
, 
¥ev
->cookõ_∑ths, 
NULL
);

3259 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hâp_vîsi⁄
, 
¥ev
->http_version,

3260 
NGX_HTTP_VERSION_10
);

3262 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_max_size
,

3263 
¥ev
->
hódîs_hash_max_size
, 512);

3265 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_buckë_size
,

3266 
¥ev
->
hódîs_hash_buckë_size
, 64);

3268 
c⁄f
->
hódîs_hash_buckë_size
 = 
	`ngx_Æign
(conf->headers_hash_bucket_size,

3269 
ngx_ˇchñöe_size
);

3271 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

3272 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

3273 
hash
.
«me
 = "proxy_headers_hash";

3275 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

3276 &
¥ev
->
up°ªam
, 
ngx_hâp_¥oxy_hide_hódîs
, &
hash
)

3277 !
NGX_OK
)

3279  
NGX_CONF_ERROR
;

3282 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3284 i‡(
˛cf
->
n⁄ame


3285 && 
c⁄f
->
up°ªam
.up°ªam =
NULL
 && c⁄f->
¥oxy_Àngths
 == NULL)

3287 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

3288 
c⁄f
->
loˇti⁄
 = 
¥ev
->location;

3289 
c⁄f
->
v¨s
 = 
¥ev
->vars;

3291 
c⁄f
->
¥oxy_Àngths
 = 
¥ev
->proxy_lengths;

3292 
c⁄f
->
¥oxy_vÆues
 = 
¥ev
->proxy_values;

3294 #i‡(
NGX_HTTP_SSL
)

3295 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

3299 i‡(
˛cf
->
lmt_ex˝t
 && clcf->
h™dÀr
 =
NULL


3300 && (
c⁄f
->
up°ªam
.up°ªam || c⁄f->
¥oxy_Àngths
))

3302 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

3305 i‡(
c⁄f
->
body_sour˚
.
d©a
 =
NULL
) {

3306 
c⁄f
->
body_Êushes
 = 
¥ev
->body_flushes;

3307 
c⁄f
->
body_sour˚
 = 
¥ev
->body_source;

3308 
c⁄f
->
body_Àngths
 = 
¥ev
->body_lengths;

3309 
c⁄f
->
body_vÆues
 = 
¥ev
->body_values;

3312 i‡(
c⁄f
->
body_sour˚
.
d©a
 && c⁄f->
body_Àngths
 =
NULL
) {

3314 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3316 
sc
.
cf
 = cf;

3317 
sc
.
sour˚
 = &
c⁄f
->
body_sour˚
;

3318 
sc
.
Êushes
 = &
c⁄f
->
body_Êushes
;

3319 
sc
.
Àngths
 = &
c⁄f
->
body_Àngths
;

3320 
sc
.
vÆues
 = &
c⁄f
->
body_vÆues
;

3321 
sc
.
com∂ëe_Àngths
 = 1;

3322 
sc
.
com∂ëe_vÆues
 = 1;

3324 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3325  
NGX_CONF_ERROR
;

3329 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

3330 
c⁄f
->
hódîs
 = 
¥ev
->headers;

3331 #i‡(
NGX_HTTP_CACHE
)

3332 
c⁄f
->
hódîs_ˇche
 = 
¥ev
->headers_cache;

3334 
c⁄f
->
hódîs_sour˚
 = 
¥ev
->headers_source;

3337 
rc
 = 
	`ngx_hâp_¥oxy_öô_hódîs
(
cf
, 
c⁄f
, &c⁄f->
hódîs
,

3338 
ngx_hâp_¥oxy_hódîs
);

3339 i‡(
rc
 !
NGX_OK
) {

3340  
NGX_CONF_ERROR
;

3343 #i‡(
NGX_HTTP_CACHE
)

3345 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

3346 
rc
 = 
	`ngx_hâp_¥oxy_öô_hódîs
(
cf
, 
c⁄f
, &c⁄f->
hódîs_ˇche
,

3347 
ngx_hâp_¥oxy_ˇche_hódîs
);

3348 i‡(
rc
 !
NGX_OK
) {

3349  
NGX_CONF_ERROR
;

3355  
NGX_CONF_OK
;

3356 
	}
}

3359 
ngx_öt_t


3360 
	$ngx_hâp_¥oxy_öô_hódîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,

3361 
ngx_hâp_¥oxy_hódîs_t
 *
hódîs
, 
ngx_keyvÆ_t
 *
deÁu…_hódîs
)

3363 
u_ch¨
 *
p
;

3364 
size_t
 
size
;

3365 
uöçå_t
 *
code
;

3366 
ngx_uöt_t
 
i
;

3367 
ngx_¨øy_t
 
hódîs_«mes
, 
hódîs_mîged
;

3368 
ngx_keyvÆ_t
 *
§c
, *
s
, *
h
;

3369 
ngx_hash_key_t
 *
hk
;

3370 
ngx_hash_öô_t
 
hash
;

3371 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3372 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

3374 i‡(
hódîs
->
hash
.
buckës
) {

3375  
NGX_OK
;

3378 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

3379 !
NGX_OK
)

3381  
NGX_ERROR
;

3384 i‡(
	`ngx_¨øy_öô
(&
hódîs_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

3385 !
NGX_OK
)

3387  
NGX_ERROR
;

3390 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

3391 
c⁄f
->
hódîs_sour˚
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

3392 (
ngx_keyvÆ_t
));

3393 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

3394  
NGX_ERROR
;

3398 
hódîs
->
Àngths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

3399 i‡(
hódîs
->
Àngths
 =
NULL
) {

3400  
NGX_ERROR
;

3403 
hódîs
->
vÆues
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

3404 i‡(
hódîs
->
vÆues
 =
NULL
) {

3405  
NGX_ERROR
;

3408 
§c
 = 
c⁄f
->
hódîs_sour˚
->
ñts
;

3409 
i
 = 0; i < 
c⁄f
->
hódîs_sour˚
->
√…s
; i++) {

3411 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

3412 i‡(
s
 =
NULL
) {

3413  
NGX_ERROR
;

3416 *
s
 = 
§c
[
i
];

3419 
h
 = 
deÁu…_hódîs
;

3421 
h
->
key
.
Àn
) {

3423 
§c
 = 
hódîs_mîged
.
ñts
;

3424 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

3425 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

3426 
√xt
;

3430 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

3431 i‡(
s
 =
NULL
) {

3432  
NGX_ERROR
;

3435 *
s
 = *
h
;

3437 
√xt
:

3439 
h
++;

3443 
§c
 = 
hódîs_mîged
.
ñts
;

3444 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

3446 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

3447 i‡(
hk
 =
NULL
) {

3448  
NGX_ERROR
;

3451 
hk
->
key
 = 
§c
[
i
].key;

3452 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3453 
hk
->
vÆue
 = (*) 1;

3455 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

3459 i‡(
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
§c
[
i
].
vÆue
) == 0) {

3460 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
,

3461 (
ngx_hâp_s¸ùt_c›y_code_t
));

3462 i‡(
c›y
 =
NULL
) {

3463  
NGX_ERROR
;

3466 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3467 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3468 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

3469 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

3472 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3473 + 
§c
[
i
].
key
.
Àn
 + (": ") - 1

3474 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1

3475 + (
uöçå_t
) - 1)

3476 & ~((
uöçå_t
) - 1);

3478 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
vÆues
, 
size
);

3479 i‡(
c›y
 =
NULL
) {

3480  
NGX_ERROR
;

3483 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3484 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

3485 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

3487 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3489 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3490 *
p
++ = ':'; *p++ = ' ';

3491 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
vÆue
.
d©a
, src[i].vÆue.
Àn
);

3492 *
p
++ = 
CR
; *∞
LF
;

3495 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
,

3496 (
ngx_hâp_s¸ùt_c›y_code_t
));

3497 i‡(
c›y
 =
NULL
) {

3498  
NGX_ERROR
;

3501 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3502 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3503 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

3506 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3507 + 
§c
[
i
].
key
.
Àn
 + (": "Ë- 1 + (
uöçå_t
) - 1)

3508 & ~((
uöçå_t
) - 1);

3510 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
vÆues
, 
size
);

3511 i‡(
c›y
 =
NULL
) {

3512  
NGX_ERROR
;

3515 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3516 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

3518 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3519 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3520 *
p
++ = ':'; *p = ' ';

3523 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3525 
sc
.
cf
 = cf;

3526 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

3527 
sc
.
Êushes
 = &
hódîs
->flushes;

3528 
sc
.
Àngths
 = &
hódîs
->lengths;

3529 
sc
.
vÆues
 = &
hódîs
->values;

3531 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3532  
NGX_ERROR
;

3536 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
,

3537 (
ngx_hâp_s¸ùt_c›y_code_t
));

3538 i‡(
c›y
 =
NULL
) {

3539  
NGX_ERROR
;

3542 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3543 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3544 
c›y
->
Àn
 = (
CRLF
) - 1;

3547 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3548 + (
CRLF
Ë- 1 + (
uöçå_t
) - 1)

3549 & ~((
uöçå_t
) - 1);

3551 
c›y
 = 
	`ngx_¨øy_push_n
(
hódîs
->
vÆues
, 
size
);

3552 i‡(
c›y
 =
NULL
) {

3553  
NGX_ERROR
;

3556 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3557 
c›y
->
Àn
 = (
CRLF
) - 1;

3559 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3560 *
p
++ = 
CR
; *∞
LF
;

3563 
code
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
, (
uöçå_t
));

3564 i‡(
code
 =
NULL
) {

3565  
NGX_ERROR
;

3568 *
code
 = (
uöçå_t
Ë
NULL
;

3570 
code
 = 
	`ngx_¨øy_push_n
(
hódîs
->
vÆues
, (
uöçå_t
));

3571 i‡(
code
 =
NULL
) {

3572  
NGX_ERROR
;

3575 *
code
 = (
uöçå_t
Ë
NULL
;

3578 
code
 = 
	`ngx_¨øy_push_n
(
hódîs
->
Àngths
, (
uöçå_t
));

3579 i‡(
code
 =
NULL
) {

3580  
NGX_ERROR
;

3583 *
code
 = (
uöçå_t
Ë
NULL
;

3586 
hash
.hash = &
hódîs
->hash;

3587 
hash
.
key
 = 
ngx_hash_key_lc
;

3588 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

3589 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

3590 
hash
.
«me
 = "proxy_headers_hash";

3591 
hash
.
poﬁ
 = 
cf
->pool;

3592 
hash
.
ãmp_poﬁ
 = 
NULL
;

3594  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

3595 
	}
}

3599 
	$ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3601 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3603 
size_t
 
add
;

3604 
u_sh‹t
 
p‹t
;

3605 
ngx_°r_t
 *
vÆue
, *
uæ
;

3606 
ngx_uæ_t
 
u
;

3607 
ngx_uöt_t
 
n
;

3608 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3609 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3611 i‡(
∂cf
->
up°ªam
.up°ªam ||Ölcf->
¥oxy_Àngths
) {

3615 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3617 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

3619 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

3620 
˛cf
->
auto_ªdúe˘
 = 1;

3623 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3625 
uæ
 = &
vÆue
[1];

3627 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

3629 i‡(
n
) {

3631 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3633 
sc
.
cf
 = cf;

3634 
sc
.
sour˚
 = 
uæ
;

3635 
sc
.
Àngths
 = &
∂cf
->
¥oxy_Àngths
;

3636 
sc
.
vÆues
 = &
∂cf
->
¥oxy_vÆues
;

3637 
sc
.
v¨übÀs
 = 
n
;

3638 
sc
.
com∂ëe_Àngths
 = 1;

3639 
sc
.
com∂ëe_vÆues
 = 1;

3641 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3642  
NGX_CONF_ERROR
;

3645 #i‡(
NGX_HTTP_SSL
)

3646 
∂cf
->
s¶
 = 1;

3649  
NGX_CONF_OK
;

3652 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "http://", 7) == 0) {

3653 
add
 = 7;

3654 
p‹t
 = 80;

3656 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "https://", 8) == 0) {

3658 #i‡(
NGX_HTTP_SSL
)

3659 
∂cf
->
s¶
 = 1;

3661 
add
 = 8;

3662 
p‹t
 = 443;

3664 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3666  
NGX_CONF_ERROR
;

3670 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalid URLÖrefix");

3671  
NGX_CONF_ERROR
;

3674 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3676 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

3677 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

3678 
u
.
deÁu…_p‹t
 = 
p‹t
;

3679 
u
.
uri_∑π
 = 1;

3680 
u
.
no_ªsﬁve
 = 1;

3682 
∂cf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

3683 i‡(
∂cf
->
up°ªam
.up°ªam =
NULL
) {

3684  
NGX_CONF_ERROR
;

3687 
∂cf
->
v¨s
.
schema
.
Àn
 = 
add
;

3688 
∂cf
->
v¨s
.
schema
.
d©a
 = 
uæ
->data;

3689 
∂cf
->
v¨s
.
key_°¨t
 =Ölcf->v¨s.
schema
;

3691 
	`ngx_hâp_¥oxy_£t_v¨s
(&
u
, &
∂cf
->
v¨s
);

3693 
∂cf
->
loˇti⁄
 = 
˛cf
->
«me
;

3695 i‡(
˛cf
->
«med


3696 #i‡(
NGX_PCRE
)

3697 || 
˛cf
->
ªgex


3699 || 
˛cf
->
n⁄ame
)

3701 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3702 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3708  
NGX_CONF_ERROR
;

3711 
∂cf
->
loˇti⁄
.
Àn
 = 0;

3714 
∂cf
->
uæ
 = *url;

3716  
NGX_CONF_OK
;

3717 
	}
}

3721 
	$ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3723 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3725 
u_ch¨
 *
p
;

3726 
ngx_°r_t
 *
vÆue
;

3727 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3728 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3730 i‡(
∂cf
->
ªdúe˘
 == 0) {

3731  
NGX_CONF_OK
;

3734 
∂cf
->
ªdúe˘
 = 1;

3736 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3738 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3739 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3740 
∂cf
->
ªdúe˘
 = 0;

3741 
∂cf
->
ªdúe˘s
 = 
NULL
;

3742  
NGX_CONF_OK
;

3745 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "false") == 0) {

3746 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

3748 
∂cf
->
ªdúe˘
 = 0;

3749 
∂cf
->
ªdúe˘s
 = 
NULL
;

3750  
NGX_CONF_OK
;

3753 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") != 0) {

3754 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3755 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3756  
NGX_CONF_ERROR
;

3760 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3761 
∂cf
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3762 (
ngx_hâp_¥oxy_ªwrôe_t
));

3763 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3764  
NGX_CONF_ERROR
;

3768 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
ªdúe˘s
);

3769 i‡(
¥
 =
NULL
) {

3770  
NGX_CONF_ERROR
;

3773 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") == 0) {

3774 i‡(
∂cf
->
¥oxy_Àngths
) {

3775 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3778  
NGX_CONF_ERROR
;

3781 i‡(
∂cf
->
uæ
.
d©a
 =
NULL
) {

3782 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3785  
NGX_CONF_ERROR
;

3788 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3790 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
, (
ngx_hâp_com∂ex_vÆue_t
));

3792 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

3794 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3795 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
∂cf
->
uæ
;

3796 
¥
->
ª∂a˚mít
.
vÆue
 = 
∂cf
->
loˇti⁄
;

3799 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
∂cf
->
uæ
.len + ("/") - 1;

3801 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

3802 i‡(
p
 =
NULL
) {

3803  
NGX_CONF_ERROR
;

3806 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

3808 
p
 = 
	`ngx_˝ymem
’, 
∂cf
->
uæ
.
d©a
,Ölcf->uæ.
Àn
);

3809 *
p
 = '/';

3811 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

3814  
NGX_CONF_OK
;

3818 i‡(
vÆue
[1].
d©a
[0] == '~') {

3819 
vÆue
[1].
Àn
--;

3820 
vÆue
[1].
d©a
++;

3822 i‡(
vÆue
[1].
d©a
[0] == '*') {

3823 
vÆue
[1].
Àn
--;

3824 
vÆue
[1].
d©a
++;

3826 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3827  
NGX_CONF_ERROR
;

3831 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

3832  
NGX_CONF_ERROR
;

3838 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3840 
ccv
.
cf
 = cf;

3841 
ccv
.
vÆue
 = &value[1];

3842 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3844 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3845  
NGX_CONF_ERROR
;

3848 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3852 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3854 
ccv
.
cf
 = cf;

3855 
ccv
.
vÆue
 = &value[2];

3856 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3858 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3859  
NGX_CONF_ERROR
;

3862  
NGX_CONF_OK
;

3863 
	}
}

3867 
	$ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3869 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3871 
ngx_°r_t
 *
vÆue
;

3872 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3873 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3875 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3876  
NGX_CONF_OK
;

3879 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3881 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3883 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3884 
∂cf
->
cookõ_domaös
 = 
NULL
;

3885  
NGX_CONF_OK
;

3888 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3889 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3890  
NGX_CONF_ERROR
;

3893 i‡(
∂cf
->
cookõ_domaös
 =
NGX_CONF_UNSET_PTR
) {

3894 
∂cf
->
cookõ_domaös
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3895 (
ngx_hâp_¥oxy_ªwrôe_t
));

3896 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3897  
NGX_CONF_ERROR
;

3901 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_domaös
);

3902 i‡(
¥
 =
NULL
) {

3903  
NGX_CONF_ERROR
;

3906 i‡(
vÆue
[1].
d©a
[0] == '~') {

3907 
vÆue
[1].
Àn
--;

3908 
vÆue
[1].
d©a
++;

3910 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3911  
NGX_CONF_ERROR
;

3916 i‡(
vÆue
[1].
d©a
[0] == '.') {

3917 
vÆue
[1].
Àn
--;

3918 
vÆue
[1].
d©a
++;

3921 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3923 
ccv
.
cf
 = cf;

3924 
ccv
.
vÆue
 = &value[1];

3925 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3927 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3928  
NGX_CONF_ERROR
;

3931 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
;

3933 i‡(
vÆue
[2].
d©a
[0] == '.') {

3934 
vÆue
[2].
Àn
--;

3935 
vÆue
[2].
d©a
++;

3939 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3941 
ccv
.
cf
 = cf;

3942 
ccv
.
vÆue
 = &value[2];

3943 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3945 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3946  
NGX_CONF_ERROR
;

3949  
NGX_CONF_OK
;

3950 
	}
}

3954 
	$ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3956 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3958 
ngx_°r_t
 *
vÆue
;

3959 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3960 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3962 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3963  
NGX_CONF_OK
;

3966 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3968 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3970 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3971 
∂cf
->
cookõ_∑ths
 = 
NULL
;

3972  
NGX_CONF_OK
;

3975 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3976 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3977  
NGX_CONF_ERROR
;

3980 i‡(
∂cf
->
cookõ_∑ths
 =
NGX_CONF_UNSET_PTR
) {

3981 
∂cf
->
cookõ_∑ths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3982 (
ngx_hâp_¥oxy_ªwrôe_t
));

3983 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3984  
NGX_CONF_ERROR
;

3988 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_∑ths
);

3989 i‡(
¥
 =
NULL
) {

3990  
NGX_CONF_ERROR
;

3993 i‡(
vÆue
[1].
d©a
[0] == '~') {

3994 
vÆue
[1].
Àn
--;

3995 
vÆue
[1].
d©a
++;

3997 i‡(
vÆue
[1].
d©a
[0] == '*') {

3998 
vÆue
[1].
Àn
--;

3999 
vÆue
[1].
d©a
++;

4001 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

4002  
NGX_CONF_ERROR
;

4006 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

4007  
NGX_CONF_ERROR
;

4013 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4015 
ccv
.
cf
 = cf;

4016 
ccv
.
vÆue
 = &value[1];

4017 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

4019 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4020  
NGX_CONF_ERROR
;

4023 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

4026 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4028 
ccv
.
cf
 = cf;

4029 
ccv
.
vÆue
 = &value[2];

4030 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

4032 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4033  
NGX_CONF_ERROR
;

4036  
NGX_CONF_OK
;

4037 
	}
}

4040 
ngx_öt_t


4041 
	$ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
,

4042 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

4044 #i‡(
NGX_PCRE
)

4045 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4046 
ngx_ªgex_compûe_t
 
rc
;

4048 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4050 
rc
.
∑âîn
 = *
ªgex
;

4051 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4052 
rc
.
îr
.
d©a
 = 
îr°r
;

4054 i‡(
ˇ£Àss
) {

4055 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4058 
¥
->
∑âîn
.
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

4059 i‡(
¥
->
∑âîn
.
ªgex
 =
NULL
) {

4060  
NGX_ERROR
;

4063 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
;

4065  
NGX_OK
;

4069 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4070 "usögÑegex \"%V\"Ñequúe†PCREÜibøry", 
ªgex
);

4071  
NGX_ERROR
;

4074 
	}
}

4078 
	$ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4080 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

4082 
ngx_°r_t
 *
vÆue
;

4083 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4085 i‡(
∂cf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
) {

4089 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4091 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4092 
∂cf
->
up°ªam
.
°‹e
 = 0;

4093  
NGX_CONF_OK
;

4096 #i‡(
NGX_HTTP_CACHE
)

4097 i‡(
∂cf
->
up°ªam
.
ˇche
 > 0) {

4102 
∂cf
->
up°ªam
.
°‹e
 = 1;

4104 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

4105  
NGX_CONF_OK
;

4109 
vÆue
[1].
Àn
++;

4111 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4113 
sc
.
cf
 = cf;

4114 
sc
.
sour˚
 = &
vÆue
[1];

4115 
sc
.
Àngths
 = &
∂cf
->
up°ªam
.
°‹e_Àngths
;

4116 
sc
.
vÆues
 = &
∂cf
->
up°ªam
.
°‹e_vÆues
;

4117 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

4118 
sc
.
com∂ëe_Àngths
 = 1;

4119 
sc
.
com∂ëe_vÆues
 = 1;

4121 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4122  
NGX_CONF_ERROR
;

4125  
NGX_CONF_OK
;

4126 
	}
}

4129 #i‡(
NGX_HTTP_CACHE
)

4132 
	$ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4134 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

4136 
ngx_°r_t
 *
vÆue
;

4137 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4138 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4140 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4142 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET
) {

4146 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4147 
∂cf
->
up°ªam
.
ˇche
 = 0;

4148  
NGX_CONF_OK
;

4151 i‡(
∂cf
->
up°ªam
.
°‹e
 > 0) {

4155 
∂cf
->
up°ªam
.
ˇche
 = 1;

4157 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4159 
ccv
.
cf
 = cf;

4160 
ccv
.
vÆue
 = &value[1];

4161 
ccv
.
com∂ex_vÆue
 = &
cv
;

4163 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4164  
NGX_CONF_ERROR
;

4167 i‡(
cv
.
Àngths
 !
NULL
) {

4169 
∂cf
->
up°ªam
.
ˇche_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

4170 (
ngx_hâp_com∂ex_vÆue_t
));

4171 i‡(
∂cf
->
up°ªam
.
ˇche_vÆue
 =
NULL
) {

4172  
NGX_CONF_ERROR
;

4175 *
∂cf
->
up°ªam
.
ˇche_vÆue
 = 
cv
;

4177  
NGX_CONF_OK
;

4180 
∂cf
->
up°ªam
.
ˇche_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

4181 &
ngx_hâp_¥oxy_moduÀ
);

4182 i‡(
∂cf
->
up°ªam
.
ˇche_z⁄e
 =
NULL
) {

4183  
NGX_CONF_ERROR
;

4186  
NGX_CONF_OK
;

4187 
	}
}

4191 
	$ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4193 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

4195 
ngx_°r_t
 *
vÆue
;

4196 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4198 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4200 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

4204 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4206 
ccv
.
cf
 = cf;

4207 
ccv
.
vÆue
 = &value[1];

4208 
ccv
.
com∂ex_vÆue
 = &
∂cf
->
ˇche_key
;

4210 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4211  
NGX_CONF_ERROR
;

4214  
NGX_CONF_OK
;

4215 
	}
}

4220 #i‡(
NGX_HTTP_SSL
)

4223 
	$ngx_hâp_¥oxy_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4225 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

4227 
ngx_°r_t
 *
vÆue
;

4229 i‡(
∂cf
->
s¶_∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

4233 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4235 
∂cf
->
s¶_∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

4237 i‡(
∂cf
->
s¶_∑ssw‹ds
 =
NULL
) {

4238  
NGX_CONF_ERROR
;

4241  
NGX_CONF_OK
;

4242 
	}
}

4248 
	$ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

4250 #i‡(
NGX_FREEBSD
)

4251 
ssize_t
 *
≈
 = 
d©a
;

4253 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

4254 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4257 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

4259  
NGX_CONF_ERROR
;

4262 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

4263 
ssize_t
 *
≈
 = 
d©a
;

4265 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4268 *
≈
 = 0;

4272  
NGX_CONF_OK
;

4273 
	}
}

4276 #i‡(
NGX_HTTP_SSL
)

4278 
ngx_öt_t


4279 
	$ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

4281 
ngx_poﬁ_˛ónup_t
 *
˛n
;

4283 
∂cf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

4284 i‡(
∂cf
->
up°ªam
.
s¶
 =
NULL
) {

4285  
NGX_ERROR
;

4288 
∂cf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

4290 i‡(
	`ngx_s¶_¸óã
(
∂cf
->
up°ªam
.
s¶
,Ölcf->
s¶_¥Ÿocﬁs
, 
NULL
)

4291 !
NGX_OK
)

4293  
NGX_ERROR
;

4296 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

4297 i‡(
˛n
 =
NULL
) {

4298  
NGX_ERROR
;

4301 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

4302 
˛n
->
d©a
 = 
∂cf
->
up°ªam
.
s¶
;

4304 i‡(
∂cf
->
s¶_˚πifiˇã
.
Àn
) {

4306 i‡(
∂cf
->
s¶_˚πifiˇã_key
.
Àn
 == 0) {

4307 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4309 "f‹ cîtifiˇã \"%V\"", &
∂cf
->
s¶_˚πifiˇã
);

4310  
NGX_ERROR
;

4313 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, 
∂cf
->
up°ªam
.
s¶
, &∂cf->
s¶_˚πifiˇã
,

4314 &
∂cf
->
s¶_˚πifiˇã_key
,Ölcf->
s¶_∑ssw‹ds
)

4315 !
NGX_OK
)

4317  
NGX_ERROR
;

4321 i‡(
	`SSL_CTX_£t_cùhî_li°
(
∂cf
->
up°ªam
.
s¶
->
˘x
,

4322 (c⁄° *Ë
∂cf
->
s¶_cùhîs
.
d©a
)

4325 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4327 &
∂cf
->
s¶_cùhîs
);

4328  
NGX_ERROR
;

4331 i‡(
∂cf
->
up°ªam
.
s¶_vîify
) {

4332 i‡(
∂cf
->
s¶_åu°ed_˚πifiˇã
.
Àn
 == 0) {

4333 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

4335  
NGX_ERROR
;

4338 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, 
∂cf
->
up°ªam
.
s¶
,

4339 &
∂cf
->
s¶_åu°ed_˚πifiˇã
,

4340 
∂cf
->
s¶_vîify_dïth
)

4341 !
NGX_OK
)

4343  
NGX_ERROR
;

4346 i‡(
	`ngx_s¶_¸l
(
cf
, 
∂cf
->
up°ªam
.
s¶
, &∂cf->
s¶_¸l
Ë!
NGX_OK
) {

4347  
NGX_ERROR
;

4351  
NGX_OK
;

4352 
	}
}

4358 
	$ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
)

4360 i‡(
u
->
Ámûy
 !
AF_UNIX
) {

4362 i‡(
u
->
no_p‹t
 || u->
p‹t
 =u->
deÁu…_p‹t
) {

4364 
v
->
ho°_hódî
 = 
u
->
ho°
;

4366 i‡(
u
->
deÁu…_p‹t
 == 80) {

4367 
	`ngx_°r_£t
(&
v
->
p‹t
, "80");

4370 
	`ngx_°r_£t
(&
v
->
p‹t
, "443");

4374 
v
->
ho°_hódî
.
Àn
 = 
u
->
ho°
.À¿+ 1 + u->
p‹t_ãxt
.len;

4375 
v
->
ho°_hódî
.
d©a
 = 
u
->
ho°
.data;

4376 
v
->
p‹t
 = 
u
->
p‹t_ãxt
;

4379 
v
->
key_°¨t
.
Àn
 +v->
ho°_hódî
.len;

4382 
	`ngx_°r_£t
(&
v
->
ho°_hódî
, "localhost");

4383 
	`ngx_°r_nuŒ
(&
v
->
p‹t
);

4384 
v
->
key_°¨t
.
Àn
 +("unix:"Ë- 1 + 
u
->
ho°
.len + 1;

4387 
v
->
uri
 = 
u
->uri;

4388 
	}
}

	@src/http/modules/ngx_http_random_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_Êag_t
 
	míabÀ
;

15 } 
	tngx_hâp_øndom_ödex_loc_c⁄f_t
;

18 
	#NGX_HTTP_RANDOM_INDEX_PREALLOCATE
 50

	)

21 
ngx_öt_t
 
ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

23 
ngx_öt_t
 
ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

26 *
∑ª¡
, *
chûd
);

29 
ngx_comm™d_t
 
	gngx_hâp_øndom_ödex_comm™ds
[] = {

31 { 
ngx_°rög
("random_index"),

32 
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

33 
ngx_c⁄f_£t_Êag_¶Ÿ
,

34 
NGX_HTTP_LOC_CONF_OFFSET
,

35 
off£tof
(
ngx_hâp_øndom_ödex_loc_c⁄f_t
, 
íabÀ
),

36 
NULL
 },

38 
ngx_nuŒ_comm™d


42 
ngx_hâp_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ_˘x
 = {

43 
NULL
,

44 
ngx_hâp_øndom_ödex_öô
,

46 
NULL
,

47 
NULL
,

49 
NULL
,

50 
NULL
,

52 
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
,

53 
ngx_hâp_øndom_ödex_mîge_loc_c⁄f


57 
ngx_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_hâp_øndom_ödex_moduÀ_˘x
,

60 
ngx_hâp_øndom_ödex_comm™ds
,

61 
NGX_HTTP_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


73 
ngx_öt_t


74 
	$ngx_hâp_øndom_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

76 
u_ch¨
 *
œ°
, *
fûíame
;

77 
size_t
 
Àn
, 
Æloˇãd
, 
roŸ
;

78 
ngx_îr_t
 
îr
;

79 
ngx_öt_t
 
rc
;

80 
ngx_°r_t
 
∑th
, 
uri
, *
«me
;

81 
ngx_dú_t
 
dú
;

82 
ngx_uöt_t
 
n
, 
Àvñ
;

83 
ngx_¨øy_t
 
«mes
;

84 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
æcf
;

86 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

87  
NGX_DECLINED
;

90 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

91  
NGX_DECLINED
;

94 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_øndom_ödex_moduÀ
);

96 i‡(!
æcf
->
íabÀ
) {

97  
NGX_DECLINED
;

100 #i‡(
NGX_HAVE_D_TYPE
)

101 
Àn
 = 
NGX_DIR_MASK_LEN
;

103 
Àn
 = 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

106 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Àn
);

107 i‡(
œ°
 =
NULL
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

111 
Æloˇãd
 = 
∑th
.
Àn
;

113 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
 - 1;

114 
∑th
.
d©a
[∑th.
Àn
] = '\0';

116 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

117 "hâ∞øndom index: \"%s\"", 
∑th
.
d©a
);

119 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 =
NGX_ENOENT


123 || 
îr
 =
NGX_ENOTDIR


124 || 
îr
 =
NGX_ENAMETOOLONG
)

126 
Àvñ
 = 
NGX_LOG_ERR
;

127 
rc
 = 
NGX_HTTP_NOT_FOUND
;

129 } i‡(
îr
 =
NGX_EACCES
) {

130 
Àvñ
 = 
NGX_LOG_ERR
;

131 
rc
 = 
NGX_HTTP_FORBIDDEN
;

134 
Àvñ
 = 
NGX_LOG_CRIT
;

135 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

138 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

139 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

141  
rc
;

144 i‡(
	`ngx_¨øy_öô
(&
«mes
, 
r
->
poﬁ
, 32, (
ngx_°r_t
)Ë!
NGX_OK
) {

145  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

148 
fûíame
 = 
∑th
.
d©a
;

149 
fûíame
[
∑th
.
Àn
] = '/';

152 
	`ngx_£t_î∫o
(0);

154 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

155 
îr
 = 
ngx_î∫o
;

157 i‡(
îr
 !
NGX_ENOMOREFILES
) {

158 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

159 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

160  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

166 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

167 "hâ∞øndom index fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

169 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

173 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

175 i‡(
dú
.
ty≥
 =0 || 
	`ngx_de_is_lök
(&dir)) {

179 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

180 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

181 + 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

183 
fûíame
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

184 i‡(
fûíame
 =
NULL
) {

185  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

188 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

189 *
œ°
++ = '/';

192 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

194 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

195 
îr
 = 
ngx_î∫o
;

197 i‡(
îr
 !
NGX_ENOENT
) {

198 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

199 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

200  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

203 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

204 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

205 
ngx_de_lök_öfo_n
 " \"%s\" failed",

206 
fûíame
);

207  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

212 i‡(!
	`ngx_de_is_fûe
(&
dú
)) {

216 
«me
 = 
	`ngx_¨øy_push
(&
«mes
);

217 i‡(
«me
 =
NULL
) {

218  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

221 
«me
->
Àn
 =Üen;

223 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

224 i‡(
«me
->
d©a
 =
NULL
) {

225  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

228 
	`ngx_mem˝y
(
«me
->
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
);

231 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

232 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

233 
ngx_˛o£_dú_n
 " \"%s\" faûed", &
∑th
);

236 
n
 = 
«mes
.
√…s
;

238 i‡(
n
 == 0) {

239  
NGX_DECLINED
;

242 
«me
 = 
«mes
.
ñts
;

244 
n
 = (
ngx_uöt_t
Ë(((
uöt64_t
Ë
	`ngx_øndom
() *Ç) / 0x80000000);

246 
uri
.
Àn
 = 
r
->uri.À¿+ 
«me
[
n
].len;

248 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

249 i‡(
uri
.
d©a
 =
NULL
) {

250  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

253 
œ°
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

254 
	`ngx_mem˝y
(
œ°
, 
«me
[
n
].
d©a
,Çame[n].
Àn
);

256  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
,

262 
ngx_°r_t
 *
«me
)

264 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

265 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

266 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

269  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

270 
	}
}

274 
	$ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

276 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
;

278 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_øndom_ödex_loc_c⁄f_t
));

279 i‡(
c⁄f
 =
NULL
) {

280  
NULL
;

283 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

285  
c⁄f
;

286 
	}
}

290 
	$ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

292 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

293 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

295 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

297  
NGX_CONF_OK
;

298 
	}
}

301 
ngx_öt_t


302 
	$ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

304 
ngx_hâp_h™dÀr_±
 *
h
;

305 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

307 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

309 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

310 i‡(
h
 =
NULL
) {

311  
NGX_ERROR
;

314 *
h
 = 
ngx_hâp_øndom_ödex_h™dÀr
;

316  
NGX_OK
;

317 
	}
}

	@src/http/modules/ngx_http_range_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

49 
off_t
 
	m°¨t
;

50 
off_t
 
	míd
;

51 
ngx_°r_t
 
	mc⁄ã¡_ønge
;

52 } 
	tngx_hâp_ønge_t
;

56 
off_t
 
	moff£t
;

57 
ngx_°r_t
 
	mbound¨y_hódî
;

58 
ngx_¨øy_t
 
	mønges
;

59 } 
	tngx_hâp_ønge_fûãr_˘x_t
;

62 
ngx_öt_t
 
ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_uöt_t
 
ønges
);

64 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

68 
ngx_öt_t
 
ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
);

69 
ngx_öt_t
 
ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

71 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

73 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

76 
ngx_öt_t
 
ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

77 
ngx_öt_t
 
ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

80 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
 = {

81 
NULL
,

82 
ngx_hâp_ønge_hódî_fûãr_öô
,

84 
NULL
,

85 
NULL
,

87 
NULL
,

88 
NULL
,

90 
NULL
,

91 
NULL
,

95 
ngx_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ
 = {

96 
NGX_MODULE_V1
,

97 &
ngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
,

98 
NULL
,

99 
NGX_HTTP_MODULE
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NGX_MODULE_V1_PADDING


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_ønge_body_fûãr_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
NULL
,

122 
NULL
,

126 
ngx_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_ønge_body_fûãr_moduÀ_˘x
,

129 
NULL
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

143 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

146 
ngx_öt_t


147 
	$ngx_hâp_ønge_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

149 
time_t
 
if_ønge_time
;

150 
ngx_°r_t
 *
if_ønge
, *
ëag
;

151 
ngx_uöt_t
 
ønges
;

152 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

153 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

155 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10


156 || 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


157 || 
r
 !r->
maö


158 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1

159 || !
r
->
Ælow_ønges
)

161  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

164 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

166 i‡(
˛cf
->
max_ønges
 == 0) {

167  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

170 i‡(
r
->
hódîs_ö
.
ønge
 =
NULL


171 || 
r
->
hódîs_ö
.
ønge
->
vÆue
.
Àn
 < 7

172 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
,

173 (
u_ch¨
 *) "bytes=", 6)

176 
√xt_fûãr
;

179 i‡(
r
->
hódîs_ö
.
if_ønge
) {

181 
if_ønge
 = &
r
->
hódîs_ö
.if_ønge->
vÆue
;

183 i‡(
if_ønge
->
Àn
 >2 && if_ønge->
d©a
[if_range->len - 1] == '"') {

185 i‡(
r
->
hódîs_out
.
ëag
 =
NULL
) {

186 
√xt_fûãr
;

189 
ëag
 = &
r
->
hódîs_out
.ëag->
vÆue
;

191 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

192 "hâ∞ú:%VÉèg:%V", 
if_ønge
, 
ëag
);

194 i‡(
if_ønge
->
Àn
 !
ëag
->len

195 || 
	`ngx_°∫cmp
(
if_ønge
->
d©a
, 
ëag
->d©a,Éèg->
Àn
) != 0)

197 
√xt_fûãr
;

200 
∑r£
;

203 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 =(
time_t
) -1) {

204 
√xt_fûãr
;

207 
if_ønge_time
 = 
	`ngx_hâp_∑r£_time
(
if_ønge
->
d©a
, if_ønge->
Àn
);

209 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

211 
if_ønge_time
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

213 i‡(
if_ønge_time
 !
r
->
hódîs_out
.
œ°_modifõd_time
) {

214 
√xt_fûãr
;

218 
∑r£
:

220 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ønge_fûãr_˘x_t
));

221 i‡(
˘x
 =
NULL
) {

222  
NGX_ERROR
;

225 i‡(
	`ngx_¨øy_öô
(&
˘x
->
ønges
, 
r
->
poﬁ
, 1, (
ngx_hâp_ønge_t
))

226 !
NGX_OK
)

228  
NGX_ERROR
;

231 
ønges
 = 
r
->
sögÀ_ønge
 ? 1 : 
˛cf
->
max_ønges
;

233 
	`ngx_hâp_ønge_∑r£
(
r
, 
˘x
, 
ønges
)) {

235 
NGX_OK
:

236 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

238 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_PARTIAL_CONTENT
;

239 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

241 i‡(
˘x
->
ønges
.
√…s
 == 1) {

242  
	`ngx_hâp_ønge_sögÀ∑π_hódî
(
r
, 
˘x
);

245  
	`ngx_hâp_ønge_mu…ù¨t_hódî
(
r
, 
˘x
);

247 
NGX_HTTP_RANGE_NOT_SATISFIABLE
:

248  
	`ngx_hâp_ønge_nŸ_ßtisfübÀ
(
r
);

250 
NGX_ERROR
:

251  
NGX_ERROR
;

257 
√xt_fûãr
:

259 
r
->
hódîs_out
.
ac˚±_ønges
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

260 i‡(
r
->
hódîs_out
.
ac˚±_ønges
 =
NULL
) {

261  
NGX_ERROR
;

264 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 1;

265 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
key
, "Accept-Ranges");

266 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
vÆue
, "bytes");

268  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

269 
	}
}

272 
ngx_öt_t


273 
	$ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
,

274 
ngx_uöt_t
 
ønges
)

276 
u_ch¨
 *
p
;

277 
off_t
 
°¨t
, 
íd
, 
size
, 
c⁄ã¡_Àngth
, 
cutoff
, 
cuéim
;

278 
ngx_uöt_t
 
suffix
;

279 
ngx_hâp_ønge_t
 *
ønge
;

281 
p
 = 
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
 + 6;

282 
size
 = 0;

283 
c⁄ã¡_Àngth
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

285 
cutoff
 = 
NGX_MAX_OFF_T_VALUE
 / 10;

286 
cuéim
 = 
NGX_MAX_OFF_T_VALUE
 % 10;

289 
°¨t
 = 0;

290 
íd
 = 0;

291 
suffix
 = 0;

293 *
p
 == ' ') {Ö++; }

295 i‡(*
p
 != '-') {

296 i‡(*
p
 < '0' || *p > '9') {

297  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

300 *
p
 >= '0' && *p <= '9') {

301 i‡(
°¨t
 >
cutoff
 && (°¨à> cutof‡|| *
p
 - '0' > 
cuéim
)) {

302  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

305 
°¨t
 = sèπ * 10 + *
p
++ - '0';

308 *
p
 == ' ') {Ö++; }

310 i‡(*
p
++ != '-') {

311  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

314 *
p
 == ' ') {Ö++; }

316 i‡(*
p
 == ',' || *p == '\0') {

317 
íd
 = 
c⁄ã¡_Àngth
;

318 
found
;

322 
suffix
 = 1;

323 
p
++;

326 i‡(*
p
 < '0' || *p > '9') {

327  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

330 *
p
 >= '0' && *p <= '9') {

331 i‡(
íd
 >
cutoff
 && (íd > cutof‡|| *
p
 - '0' > 
cuéim
)) {

332  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

335 
íd
 =Énd * 10 + *
p
++ - '0';

338 *
p
 == ' ') {Ö++; }

340 i‡(*
p
 != ',' && *p != '\0') {

341  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

344 i‡(
suffix
) {

345 
°¨t
 = 
c⁄ã¡_Àngth
 - 
íd
;

346 
íd
 = 
c⁄ã¡_Àngth
 - 1;

349 i‡(
íd
 >
c⁄ã¡_Àngth
) {

350 
íd
 = 
c⁄ã¡_Àngth
;

353 
íd
++;

356 
found
:

358 i‡(
°¨t
 < 
íd
) {

359 
ønge
 = 
	`ngx_¨øy_push
(&
˘x
->
ønges
);

360 i‡(
ønge
 =
NULL
) {

361  
NGX_ERROR
;

364 
ønge
->
°¨t
 = start;

365 
ønge
->
íd
 =Énd;

367 
size
 +
íd
 - 
°¨t
;

369 i‡(
ønges
-- == 0) {

370  
NGX_DECLINED
;

374 i‡(*
p
++ != ',') {

379 i‡(
˘x
->
ønges
.
√…s
 == 0) {

380  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

383 i‡(
size
 > 
c⁄ã¡_Àngth
) {

384  
NGX_DECLINED
;

387  
NGX_OK
;

388 
	}
}

391 
ngx_öt_t


392 
	$ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

393 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

395 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

396 
ngx_hâp_ønge_t
 *
ønge
;

398 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

399 i‡(
c⁄ã¡_ønge
 =
NULL
) {

400  
NGX_ERROR
;

403 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

405 
c⁄ã¡_ønge
->
hash
 = 1;

406 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

408 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

409 ("byã†-/"Ë- 1 + 3 * 
NGX_OFF_T_LEN
);

410 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

411  
NGX_ERROR
;

416 
ønge
 = 
˘x
->
ønges
.
ñts
;

418 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

420 
ønge
->
°¨t
,Ñ™ge->
íd
 - 1,

421 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

422 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

424 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ønge
->
íd
 -Ñ™ge->
°¨t
;

426 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

427 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

428 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

431  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

432 
	}
}

435 
ngx_öt_t


436 
	$ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

437 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

439 
size_t
 
Àn
;

440 
ngx_uöt_t
 
i
;

441 
ngx_hâp_ønge_t
 *
ønge
;

442 
ngx_©omic_uöt_t
 
bound¨y
;

444 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


445 + (
CRLF
 "Content-Type: ") - 1

446 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


447 + (
CRLF
 "Content-Range: bytes ") - 1;

449 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


450 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

452 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

455 
˘x
->
bound¨y_hódî
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

456 i‡(
˘x
->
bound¨y_hódî
.
d©a
 =
NULL
) {

457  
NGX_ERROR
;

460 
bound¨y
 = 
	`ngx_√xt_ãmp_numbî
(0);

470 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


471 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

473 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

474 
CRLF
 "--%0muA" CRLF

475 "C⁄ã¡-Ty≥: %V; ch¨£t=%V" 
CRLF


477 
bound¨y
,

478 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
,

479 &
r
->
hódîs_out
.
ch¨£t
)

480 - 
˘x
->
bound¨y_hódî
.
d©a
;

482 } i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

483 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

484 
CRLF
 "--%0muA" CRLF

485 "C⁄ã¡-Ty≥: %V" 
CRLF


487 
bound¨y
,

488 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
)

489 - 
˘x
->
bound¨y_hódî
.
d©a
;

492 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

493 
CRLF
 "--%0muA" CRLF

495 
bound¨y
)

496 - 
˘x
->
bound¨y_hódî
.
d©a
;

499 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =

500 
	`ngx_≤Æloc
(
r
->
poﬁ
,

502 + 
NGX_ATOMIC_T_LEN
);

504 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =
NULL
) {

505  
NGX_ERROR
;

508 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

512 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =

513 
	`ngx_•rötf
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

515 
bound¨y
)

516 - 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
;

518 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥
.
Àn
;

520 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

524 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
 + ("--" CRLF) - 1;

526 
ønge
 = 
˘x
->
ønges
.
ñts
;

527 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

531 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =

532 
	`ngx_≤Æloc
(
r
->
poﬁ
, 3 * 
NGX_OFF_T_LEN
 + 2 + 4);

534 i‡(
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =
NULL
) {

535  
NGX_ERROR
;

538 
ønge
[
i
].
c⁄ã¡_ønge
.
Àn
 = 
	`ngx_•rötf
‘™ge[i].c⁄ã¡_ønge.
d©a
,

539 "%O-%O/%O" 
CRLF
 CRLF,

540 
ønge
[
i
].
°¨t
,Ñ™ge[i].
íd
 - 1,

541 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

542 - 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

544 
Àn
 +
˘x
->
bound¨y_hódî
.À¿+ 
ønge
[
i
].
c⁄ã¡_ønge
.len

545 + (
size_t
Ë(
ønge
[
i
].
íd
 -Ñ™ge[i].
°¨t
);

548 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

550 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

551 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

552 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

555  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

556 
	}
}

559 
ngx_öt_t


560 
	$ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
)

562 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

564 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

566 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

567 i‡(
c⁄ã¡_ønge
 =
NULL
) {

568  
NGX_ERROR
;

571 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

573 
c⁄ã¡_ønge
->
hash
 = 1;

574 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

576 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

577 ("byã†*/"Ë- 1 + 
NGX_OFF_T_LEN
);

578 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

579  
NGX_ERROR
;

582 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

584 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

585 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

587 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

589  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

590 
	}
}

593 
ngx_öt_t


594 
	$ngx_hâp_ønge_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

596 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

598 i‡(
ö
 =
NULL
) {

599  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

602 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

604 i‡(
˘x
 =
NULL
) {

605  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

608 i‡(
˘x
->
ønges
.
√…s
 == 1) {

609  
	`ngx_hâp_ønge_sögÀ∑π_body
(
r
, 
˘x
, 
ö
);

616 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

617  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

620 i‡(
	`ngx_hâp_ønge_ã°_ovîœµed
(
r
, 
˘x
, 
ö
Ë!
NGX_OK
) {

621  
NGX_ERROR
;

624  
	`ngx_hâp_ønge_mu…ù¨t_body
(
r
, 
˘x
, 
ö
);

625 
	}
}

628 
ngx_öt_t


629 
	$ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

630 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

632 
off_t
 
°¨t
, 
œ°
;

633 
ngx_buf_t
 *
buf
;

634 
ngx_uöt_t
 
i
;

635 
ngx_hâp_ønge_t
 *
ønge
;

637 i‡(
˘x
->
off£t
) {

638 
ovîœµed
;

641 
buf
 = 
ö
->buf;

643 i‡(!
buf
->
œ°_buf
) {

644 
°¨t
 = 
˘x
->
off£t
;

645 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

647 
ønge
 = 
˘x
->
ønges
.
ñts
;

648 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

649 i‡(
°¨t
 > 
ønge
[
i
].°¨à|| 
œ°
 <Ñ™ge[i].
íd
) {

650 
ovîœµed
;

655 
˘x
->
off£t
 = 
	`ngx_buf_size
(
buf
);

657  
NGX_OK
;

659 
ovîœµed
:

661 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

664  
NGX_ERROR
;

665 
	}
}

668 
ngx_öt_t


669 
	$ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

670 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

672 
off_t
 
°¨t
, 
œ°
;

673 
ngx_buf_t
 *
buf
;

674 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

675 
ngx_hâp_ønge_t
 *
ønge
;

677 
out
 = 
NULL
;

678 
Œ
 = &
out
;

679 
ønge
 = 
˘x
->
ønges
.
ñts
;

681 
˛
 = 
ö
; cl; c»˛->
√xt
) {

683 
buf
 = 
˛
->buf;

685 
°¨t
 = 
˘x
->
off£t
;

686 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

688 
˘x
->
off£t
 = 
œ°
;

690 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

691 "hâ∞øngêbody buf: %O-%O", 
°¨t
, 
œ°
);

693 i‡(
	`ngx_buf_•ecül
(
buf
)) {

694 *
Œ
 = 
˛
;

695 
Œ
 = &
˛
->
√xt
;

699 i‡(
ønge
->
íd
 <
°¨t
 ||Ñ™ge->°¨à>
œ°
) {

701 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

704 i‡(
buf
->
ö_fûe
) {

705 
buf
->
fûe_pos
 = buf->
fûe_œ°
;

708 
buf
->
pos
 = buf->
œ°
;

709 
buf
->
sync
 = 1;

714 i‡(
ønge
->
°¨t
 > start) {

716 i‡(
buf
->
ö_fûe
) {

717 
buf
->
fûe_pos
 +
ønge
->
°¨t
 - start;

720 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

721 
buf
->
pos
 +(
size_t
Ë(
ønge
->
°¨t
 - start);

725 i‡(
ønge
->
íd
 <
œ°
) {

727 i‡(
buf
->
ö_fûe
) {

728 
buf
->
fûe_œ°
 -
œ°
 - 
ønge
->
íd
;

731 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

732 
buf
->
œ°
 -(
size_t
Ë÷a° - 
ønge
->
íd
);

735 
buf
->
œ°_buf
 = 1;

736 *
Œ
 = 
˛
;

737 
˛
->
√xt
 = 
NULL
;

742 *
Œ
 = 
˛
;

743 
Œ
 = &
˛
->
√xt
;

746 i‡(
out
 =
NULL
) {

747  
NGX_OK
;

750  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

751 
	}
}

754 
ngx_öt_t


755 
	$ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

756 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

758 
ngx_buf_t
 *
b
, *
buf
;

759 
ngx_uöt_t
 
i
;

760 
ngx_chaö_t
 *
out
, *
h˛
, *
r˛
, *
d˛
, **
Œ
;

761 
ngx_hâp_ønge_t
 *
ønge
;

763 
Œ
 = &
out
;

764 
buf
 = 
ö
->buf;

765 
ønge
 = 
˘x
->
ønges
.
ñts
;

767 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

777 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

778 i‡(
b
 =
NULL
) {

779  
NGX_ERROR
;

782 
b
->
mem‹y
 = 1;

783 
b
->
pos
 = 
˘x
->
bound¨y_hódî
.
d©a
;

784 
b
->
œ°
 = 
˘x
->
bound¨y_hódî
.
d©a
 + ctx->bound¨y_hódî.
Àn
;

786 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

787 i‡(
h˛
 =
NULL
) {

788  
NGX_ERROR
;

791 
h˛
->
buf
 = 
b
;

796 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

797 i‡(
b
 =
NULL
) {

798  
NGX_ERROR
;

801 
b
->
ãmp‹¨y
 = 1;

802 
b
->
pos
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

803 
b
->
œ°
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 +Ñ™ge[i].c⁄ã¡_ønge.
Àn
;

805 
r˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

806 i‡(
r˛
 =
NULL
) {

807  
NGX_ERROR
;

810 
r˛
->
buf
 = 
b
;

815 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

816 i‡(
b
 =
NULL
) {

817  
NGX_ERROR
;

820 
b
->
ö_fûe
 = 
buf
->in_file;

821 
b
->
ãmp‹¨y
 = 
buf
->temporary;

822 
b
->
mem‹y
 = 
buf
->memory;

823 
b
->
mm≠
 = 
buf
->mmap;

824 
b
->
fûe
 = 
buf
->file;

826 i‡(
buf
->
ö_fûe
) {

827 
b
->
fûe_pos
 = 
buf
->fûe_po†+ 
ønge
[
i
].
°¨t
;

828 
b
->
fûe_œ°
 = 
buf
->
fûe_pos
 + 
ønge
[
i
].
íd
;

831 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

832 
b
->
pos
 = 
buf
->po†+ (
size_t
Ë
ønge
[
i
].
°¨t
;

833 
b
->
œ°
 = 
buf
->
pos
 + (
size_t
Ë
ønge
[
i
].
íd
;

836 
d˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

837 i‡(
d˛
 =
NULL
) {

838  
NGX_ERROR
;

841 
d˛
->
buf
 = 
b
;

843 *
Œ
 = 
h˛
;

844 
h˛
->
√xt
 = 
r˛
;

845 
r˛
->
√xt
 = 
d˛
;

846 
Œ
 = &
d˛
->
√xt
;

851 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

852 i‡(
b
 =
NULL
) {

853  
NGX_ERROR
;

856 
b
->
ãmp‹¨y
 = 1;

857 
b
->
œ°_buf
 = 1;

859 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


860 + ("--" 
CRLF
) - 1);

861 i‡(
b
->
pos
 =
NULL
) {

862  
NGX_ERROR
;

865 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
˘x
->
bound¨y_hódî
.
d©a
,

866 (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
);

867 *
b
->
œ°
++ = '-'; *b->last++ = '-';

868 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

870 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

871 i‡(
h˛
 =
NULL
) {

872  
NGX_ERROR
;

875 
h˛
->
buf
 = 
b
;

876 
h˛
->
√xt
 = 
NULL
;

878 *
Œ
 = 
h˛
;

880  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

881 
	}
}

884 
ngx_öt_t


885 
	$ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

887 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

888 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ønge_hódî_fûãr
;

890  
NGX_OK
;

891 
	}
}

894 
ngx_öt_t


895 
	$ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

897 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

898 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ønge_body_fûãr
;

900  
NGX_OK
;

901 
	}
}

	@src/http/modules/ngx_http_realip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REALIP_XREALIP
 0

	)

14 
	#NGX_HTTP_REALIP_XFWD
 1

	)

15 
	#NGX_HTTP_REALIP_HEADER
 2

	)

16 
	#NGX_HTTP_REALIP_PROXY
 3

	)

20 
ngx_¨øy_t
 *
	m‰om
;

21 
ngx_uöt_t
 
	mty≥
;

22 
ngx_uöt_t
 
	mhash
;

23 
ngx_°r_t
 
	mhódî
;

24 
ngx_Êag_t
 
	mªcursive
;

25 } 
	tngx_hâp_ªÆù_loc_c⁄f_t
;

29 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

30 
sockaddr
 *
	msockaddr
;

31 
sockÀn_t
 
	msockÀn
;

32 
ngx_°r_t
 
	maddr_ãxt
;

33 } 
	tngx_hâp_ªÆù_˘x_t
;

36 
ngx_öt_t
 
ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_öt_t
 
ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
,

38 
ngx_addr_t
 *
addr
);

39 
ngx_hâp_ªÆù_˛ónup
(*
d©a
);

40 *
ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
c⁄f
);

42 *
ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

43 *
ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

45 *
∑ª¡
, *
chûd
);

46 
ngx_öt_t
 
ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
);

49 
ngx_comm™d_t
 
	gngx_hâp_ªÆù_comm™ds
[] = {

51 { 
ngx_°rög
("set_real_ip_from"),

52 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

53 
ngx_hâp_ªÆù_‰om
,

54 
NGX_HTTP_LOC_CONF_OFFSET
,

56 
NULL
 },

58 { 
ngx_°rög
("real_ip_header"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_hâp_ªÆù
,

61 
NGX_HTTP_LOC_CONF_OFFSET
,

63 
NULL
 },

65 { 
ngx_°rög
("real_ip_recursive"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

67 
ngx_c⁄f_£t_Êag_¶Ÿ
,

68 
NGX_HTTP_LOC_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_ªÆù_loc_c⁄f_t
, 
ªcursive
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


77 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ_˘x
 = {

78 
NULL
,

79 
ngx_hâp_ªÆù_öô
,

81 
NULL
,

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
ngx_hâp_ªÆù_¸óã_loc_c⁄f
,

88 
ngx_hâp_ªÆù_mîge_loc_c⁄f


92 
ngx_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ
 = {

93 
NGX_MODULE_V1
,

94 &
ngx_hâp_ªÆù_moduÀ_˘x
,

95 
ngx_hâp_ªÆù_comm™ds
,

96 
NGX_HTTP_MODULE
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NGX_MODULE_V1_PADDING


108 
ngx_öt_t


109 
	$ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

111 
u_ch¨
 *
p
;

112 
size_t
 
Àn
;

113 
ngx_°r_t
 *
vÆue
;

114 
ngx_uöt_t
 
i
, 
hash
;

115 
ngx_addr_t
 
addr
;

116 
ngx_¨øy_t
 *
xfwd
;

117 
ngx_li°_∑π_t
 *
∑π
;

118 
ngx_èbÀ_ñt_t
 *
hódî
;

119 
ngx_c⁄√˘i⁄_t
 *
c
;

120 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

121 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
;

123 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

125 i‡(
˘x
) {

126  
NGX_DECLINED
;

129 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

131 i‡(
æcf
->
‰om
 =
NULL
) {

132  
NGX_DECLINED
;

135 
æcf
->
ty≥
) {

137 
NGX_HTTP_REALIP_XREALIP
:

139 i‡(
r
->
hódîs_ö
.
x_ªÆ_ù
 =
NULL
) {

140  
NGX_DECLINED
;

143 
vÆue
 = &
r
->
hódîs_ö
.
x_ªÆ_ù
->value;

144 
xfwd
 = 
NULL
;

148 
NGX_HTTP_REALIP_XFWD
:

150 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

152 i‡(
xfwd
->
ñts
 =
NULL
) {

153  
NGX_DECLINED
;

156 
vÆue
 = 
NULL
;

160 
NGX_HTTP_REALIP_PROXY
:

162 
vÆue
 = &
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
;

164 i‡(
vÆue
->
Àn
 == 0) {

165  
NGX_DECLINED
;

168 
xfwd
 = 
NULL
;

174 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

175 
hódî
 = 
∑π
->
ñts
;

177 
hash
 = 
æcf
->hash;

178 
Àn
 = 
æcf
->
hódî
.len;

179 
p
 = 
æcf
->
hódî
.
d©a
;

181 
i
 = 0; ; i++) {

183 i‡(
i
 >
∑π
->
√…s
) {

184 i‡(
∑π
->
√xt
 =
NULL
) {

188 
∑π
 =Ö¨t->
√xt
;

189 
hódî
 = 
∑π
->
ñts
;

190 
i
 = 0;

193 i‡(
hash
 =
hódî
[
i
].hash

194 && 
Àn
 =
hódî
[
i
].
key
.len

195 && 
	`ngx_°∫cmp
(
p
, 
hódî
[
i
].
lowˇ£_key
, 
Àn
) == 0)

197 
vÆue
 = &
hódî
[
i
].value;

198 
xfwd
 = 
NULL
;

200 
found
;

204  
NGX_DECLINED
;

207 
found
:

209 
c
 = 
r
->
c⁄√˘i⁄
;

211 
addr
.
sockaddr
 = 
c
->sockaddr;

212 
addr
.
sockÀn
 = 
c
->socklen;

215 i‡(
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
vÆue
, 
æcf
->
‰om
,

216 
æcf
->
ªcursive
)

217 !
NGX_DECLINED
)

219  
	`ngx_hâp_ªÆù_£t_addr
(
r
, &
addr
);

222  
NGX_DECLINED
;

223 
	}
}

226 
ngx_öt_t


227 
	$ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
)

229 
size_t
 
Àn
;

230 
u_ch¨
 *
p
;

231 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

232 
ngx_c⁄√˘i⁄_t
 *
c
;

233 
ngx_poﬁ_˛ónup_t
 *
˛n
;

234 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

236 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, (
ngx_hâp_ªÆù_˘x_t
));

237 i‡(
˛n
 =
NULL
) {

238  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

241 
˘x
 = 
˛n
->
d©a
;

242 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ªÆù_moduÀ
);

244 
c
 = 
r
->
c⁄√˘i⁄
;

246 
Àn
 = 
	`ngx_sock_¡›
(
addr
->
sockaddr
,áddr->
sockÀn
, 
ãxt
,

247 
NGX_SOCKADDR_STRLEN
, 0);

248 i‡(
Àn
 == 0) {

249  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

252 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
);

253 i‡(
p
 =
NULL
) {

254  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

257 
	`ngx_mem˝y
(
p
, 
ãxt
, 
Àn
);

259 
˛n
->
h™dÀr
 = 
ngx_hâp_ªÆù_˛ónup
;

261 
˘x
->
c⁄√˘i⁄
 = 
c
;

262 
˘x
->
sockaddr
 = 
c
->sockaddr;

263 
˘x
->
sockÀn
 = 
c
->socklen;

264 
˘x
->
addr_ãxt
 = 
c
->addr_text;

266 
c
->
sockaddr
 = 
addr
->sockaddr;

267 
c
->
sockÀn
 = 
addr
->socklen;

268 
c
->
addr_ãxt
.
Àn
 =Üen;

269 
c
->
addr_ãxt
.
d©a
 = 
p
;

271  
NGX_DECLINED
;

272 
	}
}

276 
	$ngx_hâp_ªÆù_˛ónup
(*
d©a
)

278 
ngx_hâp_ªÆù_˘x_t
 *
˘x
 = 
d©a
;

280 
ngx_c⁄√˘i⁄_t
 *
c
;

282 
c
 = 
˘x
->
c⁄√˘i⁄
;

284 
c
->
sockaddr
 = 
˘x
->sockaddr;

285 
c
->
sockÀn
 = 
˘x
->socklen;

286 
c
->
addr_ãxt
 = 
˘x
->addr_text;

287 
	}
}

291 
	$ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

293 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

295 
ngx_öt_t
 
rc
;

296 
ngx_°r_t
 *
vÆue
;

297 
ngx_cidr_t
 *
cidr
;

299 
vÆue
 = 
cf
->
¨gs
->
ñts
;

301 i‡(
æcf
->
‰om
 =
NULL
) {

302 
æcf
->
‰om
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

303 (
ngx_cidr_t
));

304 i‡(
æcf
->
‰om
 =
NULL
) {

305  
NGX_CONF_ERROR
;

309 
cidr
 = 
	`ngx_¨øy_push
(
æcf
->
‰om
);

310 i‡(
cidr
 =
NULL
) {

311  
NGX_CONF_ERROR
;

314 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

316 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

317 
cidr
->
Ámûy
 = 
AF_UNIX
;

318  
NGX_CONF_OK
;

323 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], 
cidr
);

325 i‡(
rc
 =
NGX_ERROR
) {

326 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

327 &
vÆue
[1]);

328  
NGX_CONF_ERROR
;

331 i‡(
rc
 =
NGX_DONE
) {

332 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

333 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

336  
NGX_CONF_OK
;

337 
	}
}

341 
	$ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

343 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

345 
ngx_°r_t
 *
vÆue
;

347 
vÆue
 = 
cf
->
¨gs
->
ñts
;

349 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Real-IP") == 0) {

350 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XREALIP
;

351  
NGX_CONF_OK
;

354 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Forwarded-For") == 0) {

355 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XFWD
;

356  
NGX_CONF_OK
;

359 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "proxy_protocol") == 0) {

360 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_PROXY
;

361  
NGX_CONF_OK
;

364 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_HEADER
;

365 
æcf
->
hash
 = 
	`ngx_hash_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

366 
æcf
->
hódî
 = 
vÆue
[1];

368  
NGX_CONF_OK
;

369 
	}
}

373 
	$ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

375 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
;

377 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªÆù_loc_c⁄f_t
));

378 i‡(
c⁄f
 =
NULL
) {

379  
NULL
;

390 
c⁄f
->
ty≥
 = 
NGX_CONF_UNSET_UINT
;

391 
c⁄f
->
ªcursive
 = 
NGX_CONF_UNSET
;

393  
c⁄f
;

394 
	}
}

398 
	$ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

400 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

401 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

403 i‡(
c⁄f
->
‰om
 =
NULL
) {

404 
c⁄f
->
‰om
 = 
¥ev
->from;

407 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥
, 
¥ev
->ty≥, 
NGX_HTTP_REALIP_XREALIP
);

408 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive
, 
¥ev
->recursive, 0);

410 i‡(
c⁄f
->
hódî
.
Àn
 == 0) {

411 
c⁄f
->
hash
 = 
¥ev
->hash;

412 
c⁄f
->
hódî
 = 
¥ev
->header;

415  
NGX_CONF_OK
;

416 
	}
}

419 
ngx_öt_t


420 
	$ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
)

422 
ngx_hâp_h™dÀr_±
 *
h
;

423 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

425 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

427 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
);

428 i‡(
h
 =
NULL
) {

429  
NGX_ERROR
;

432 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

434 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

435 i‡(
h
 =
NULL
) {

436  
NGX_ERROR
;

439 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

441  
NGX_OK
;

442 
	}
}

	@src/http/modules/ngx_http_referer_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REFERER_NO_URI_PART
 ((*Ë4)

	)

17 
ngx_hash_comböed_t
 
	mhash
;

19 #i‡(
NGX_PCRE
)

20 
ngx_¨øy_t
 *
	mªgex
;

21 
ngx_¨øy_t
 *
	m£rvî_«me_ªgex
;

24 
ngx_Êag_t
 
	mno_ª„ªr
;

25 
ngx_Êag_t
 
	mblocked_ª„ªr
;

26 
ngx_Êag_t
 
	m£rvî_«mes
;

28 
ngx_hash_keys_¨øys_t
 *
	mkeys
;

30 
ngx_uöt_t
 
	mª„ªr_hash_max_size
;

31 
ngx_uöt_t
 
	mª„ªr_hash_buckë_size
;

32 } 
	tngx_hâp_ª„ªr_c⁄f_t
;

35 * 
ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 * 
ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

37 *
chûd
);

38 *
ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

40 
ngx_öt_t
 
ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
,

41 
ngx_hash_keys_¨øys_t
 *
keys
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
);

42 
ngx_öt_t
 
ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
, 
ngx_°r_t
 *
«me
);

44 #i‡(
NGX_PCRE
)

45 
ngx_öt_t
 
ngx_hâp_add_ªgex_£rvî_«me
(
ngx_c⁄f_t
 *
cf
,

46 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
, 
ngx_hâp_ªgex_t
 *
ªgex
);

48 
ngx_libc_cde˛
 
ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
,

49 c⁄° *
two
);

52 
ngx_comm™d_t
 
	gngx_hâp_ª„ªr_comm™ds
[] = {

54 { 
ngx_°rög
("valid_referers"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

56 
ngx_hâp_vÆid_ª„ªrs
,

57 
NGX_HTTP_LOC_CONF_OFFSET
,

59 
NULL
 },

61 { 
ngx_°rög
("referer_hash_max_size"),

62 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

64 
NGX_HTTP_LOC_CONF_OFFSET
,

65 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_max_size
),

66 
NULL
 },

68 { 
ngx_°rög
("referer_hash_bucket_size"),

69 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

71 
NGX_HTTP_LOC_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_buckë_size
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ_˘x
 = {

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL
,

89 
ngx_hâp_ª„ªr_¸óã_c⁄f
,

90 
ngx_hâp_ª„ªr_mîge_c⁄f


94 
ngx_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ
 = {

95 
NGX_MODULE_V1
,

96 &
ngx_hâp_ª„ªr_moduÀ_˘x
,

97 
ngx_hâp_ª„ªr_comm™ds
,

98 
NGX_HTTP_MODULE
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NGX_MODULE_V1_PADDING


110 
ngx_öt_t


111 
	$ngx_hâp_ª„ªr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

112 
uöçå_t
 
d©a
)

114 
u_ch¨
 *
p
, *
ªf
, *
œ°
;

115 
size_t
 
Àn
;

116 
ngx_°r_t
 *
uri
;

117 
ngx_uöt_t
 
i
, 
key
;

118 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
;

119 
u_ch¨
 
buf
[256];

120 #i‡(
NGX_PCRE
)

121 
ngx_öt_t
 
rc
;

122 
ngx_°r_t
 
ª„ªr
;

125 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ª„ªr_moduÀ
);

127 i‡(
æcf
->
hash
.hash.
buckës
 =
NULL


128 && 
æcf
->
hash
.
wc_hód
 =
NULL


129 && 
æcf
->
hash
.
wc_èû
 =
NULL


130 #i‡(
NGX_PCRE
)

131 && 
æcf
->
ªgex
 =
NULL


132 && 
æcf
->
£rvî_«me_ªgex
 =
NULL


136 
vÆid
;

139 i‡(
r
->
hódîs_ö
.
ª„ªr
 =
NULL
) {

140 i‡(
æcf
->
no_ª„ªr
) {

141 
vÆid
;

144 
övÆid
;

147 
Àn
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.len;

148 
ªf
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.
d©a
;

150 i‡(
Àn
 >= ("http://i.ru") - 1) {

151 
œ°
 = 
ªf
 + 
Àn
;

153 i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "http://", 7) == 0) {

154 
ªf
 += 7;

155 
Àn
 -= 7;

156 
vÆid_scheme
;

158 } i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "https://", 8) == 0) {

159 
ªf
 += 8;

160 
Àn
 -= 8;

161 
vÆid_scheme
;

165 i‡(
æcf
->
blocked_ª„ªr
) {

166 
vÆid
;

169 
övÆid
;

171 
vÆid_scheme
:

173 
i
 = 0;

174 
key
 = 0;

176 
p
 = 
ªf
;Ö < 
œ°
;Ö++) {

177 i‡(*
p
 == '/' || *p == ':') {

181 i‡(
i
 == 256) {

182 
övÆid
;

185 
buf
[
i
] = 
	`ngx_tﬁowî
(*
p
);

186 
key
 = 
	`ngx_hash
(key, 
buf
[
i
++]);

189 
uri
 = 
	`ngx_hash_föd_comböed
(&
æcf
->
hash
, 
key
, 
buf
, 
p
 - 
ªf
);

191 i‡(
uri
) {

192 
uri
;

195 #i‡(
NGX_PCRE
)

197 i‡(
æcf
->
£rvî_«me_ªgex
) {

198 
ª„ªr
.
Àn
 = 
p
 - 
ªf
;

199 
ª„ªr
.
d©a
 = 
buf
;

201 
rc
 = 
	`ngx_ªgex_exec_¨øy
(
æcf
->
£rvî_«me_ªgex
, &
ª„ªr
,

202 
r
->
c⁄√˘i⁄
->
log
);

204 i‡(
rc
 =
NGX_OK
) {

205 
vÆid
;

208 i‡(
rc
 =
NGX_ERROR
) {

209  
rc
;

215 i‡(
æcf
->
ªgex
) {

216 
ª„ªr
.
Àn
 =Üen;

217 
ª„ªr
.
d©a
 = 
ªf
;

219 
rc
 = 
	`ngx_ªgex_exec_¨øy
(
æcf
->
ªgex
, &
ª„ªr
, 
r
->
c⁄√˘i⁄
->
log
);

221 i‡(
rc
 =
NGX_OK
) {

222 
vÆid
;

225 i‡(
rc
 =
NGX_ERROR
) {

226  
rc
;

234 
övÆid
:

236 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

238  
NGX_OK
;

240 
uri
:

242  ; 
p
 < 
œ°
;Ö++) {

243 i‡(*
p
 == '/') {

248 
Àn
 = 
œ°
 - 
p
;

250 i‡(
uri
 =
NGX_HTTP_REFERER_NO_URI_PART
) {

251 
vÆid
;

254 i‡(
Àn
 < 
uri
->À¿|| 
	`ngx_°∫cmp
(uri->
d©a
, 
p
, uri->len) != 0) {

255 
övÆid
;

258 
vÆid
:

260 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

262  
NGX_OK
;

263 
	}
}

267 
	$ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

269 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
;

271 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ª„ªr_c⁄f_t
));

272 i‡(
c⁄f
 =
NULL
) {

273  
NULL
;

284 #i‡(
NGX_PCRE
)

285 
c⁄f
->
ªgex
 = 
NGX_CONF_UNSET_PTR
;

286 
c⁄f
->
£rvî_«me_ªgex
 = 
NGX_CONF_UNSET_PTR
;

289 
c⁄f
->
no_ª„ªr
 = 
NGX_CONF_UNSET
;

290 
c⁄f
->
blocked_ª„ªr
 = 
NGX_CONF_UNSET
;

291 
c⁄f
->
ª„ªr_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

292 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

294  
c⁄f
;

295 
	}
}

299 
	$ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

301 
ngx_hâp_ª„ªr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

302 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
 = 
chûd
;

304 
ngx_uöt_t
 
n
;

305 
ngx_hash_öô_t
 
hash
;

306 
ngx_hâp_£rvî_«me_t
 *
¢
;

307 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

309 i‡(
c⁄f
->
keys
 =
NULL
) {

310 
c⁄f
->
hash
 = 
¥ev
->hash;

312 #i‡(
NGX_PCRE
)

313 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

314 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£rvî_«me_ªgex
,

315 
¥ev
->
£rvî_«me_ªgex
, 
NULL
);

317 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_ª„ªr
, 
¥ev
->no_referer, 0);

318 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
blocked_ª„ªr
, 
¥ev
->blocked_referer, 0);

319 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

320 
¥ev
->
ª„ªr_hash_max_size
, 2048);

321 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

322 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

324  
NGX_CONF_OK
;

327 i‡(
c⁄f
->
£rvî_«mes
 == 1) {

328 
cscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

330 
¢
 = 
cscf
->
£rvî_«mes
.
ñts
;

331 
n
 = 0;Ç < 
cscf
->
£rvî_«mes
.
√…s
;Ç++) {

333 #i‡(
NGX_PCRE
)

334 i‡(
¢
[
n
].
ªgex
) {

336 i‡(
	`ngx_hâp_add_ªgex_£rvî_«me
(
cf
, 
c⁄f
, 
¢
[
n
].
ªgex
)

337 !
NGX_OK
)

339  
NGX_CONF_ERROR
;

346 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
c⁄f
->
keys
, &
¢
[
n
].
«me
, 
NULL
)

347 !
NGX_OK
)

349  
NGX_CONF_ERROR
;

354 i‡((
c⁄f
->
no_ª„ªr
 =1 || c⁄f->
blocked_ª„ªr
 == 1)

355 && 
c⁄f
->
keys
->keys.
√…s
 == 0

356 && 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
 == 0

357 && 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
 == 0)

359 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

363  
NGX_CONF_ERROR
;

366 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

367 
¥ev
->
ª„ªr_hash_max_size
, 2048);

368 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

369 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

370 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
	`ngx_Æign
(conf->referer_hash_bucket_size,

371 
ngx_ˇchñöe_size
);

373 
hash
.
key
 = 
ngx_hash_key_lc
;

374 
hash
.
max_size
 = 
c⁄f
->
ª„ªr_hash_max_size
;

375 
hash
.
buckë_size
 = 
c⁄f
->
ª„ªr_hash_buckë_size
;

376 
hash
.
«me
 = "referer_hash";

377 
hash
.
poﬁ
 = 
cf
->pool;

379 i‡(
c⁄f
->
keys
->keys.
√…s
) {

380 
hash
.hash = &
c⁄f
->hash.hash;

381 
hash
.
ãmp_poﬁ
 = 
NULL
;

383 i‡(
	`ngx_hash_öô
(&
hash
, 
c⁄f
->
keys
->keys.
ñts
, c⁄f->keys->keys.
√…s
)

384 !
NGX_OK
)

386  
NGX_CONF_ERROR
;

390 i‡(
c⁄f
->
keys
->
dns_wc_hód
.
√…s
) {

392 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

393 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_hód
.
√…s
,

394 (
ngx_hash_key_t
),

395 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

397 
hash
.hash = 
NULL
;

398 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

400 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

401 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
)

402 !
NGX_OK
)

404  
NGX_CONF_ERROR
;

407 
c⁄f
->
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

410 i‡(
c⁄f
->
keys
->
dns_wc_èû
.
√…s
) {

412 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

413 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_èû
.
√…s
,

414 (
ngx_hash_key_t
),

415 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

417 
hash
.hash = 
NULL
;

418 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

420 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

421 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
)

422 !
NGX_OK
)

424  
NGX_CONF_ERROR
;

427 
c⁄f
->
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

430 #i‡(
NGX_PCRE
)

431 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

432 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£rvî_«me_ªgex
, 
¥ev
->server_name_regex,

433 
NULL
);

436 i‡(
c⁄f
->
no_ª„ªr
 =
NGX_CONF_UNSET
) {

437 
c⁄f
->
no_ª„ªr
 = 0;

440 i‡(
c⁄f
->
blocked_ª„ªr
 =
NGX_CONF_UNSET
) {

441 
c⁄f
->
blocked_ª„ªr
 = 0;

444 
c⁄f
->
keys
 = 
NULL
;

446  
NGX_CONF_OK
;

447 
	}
}

451 
	$ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

453 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
 = 
c⁄f
;

455 
u_ch¨
 *
p
;

456 
ngx_°r_t
 *
vÆue
, 
uri
, 
«me
;

457 
ngx_uöt_t
 
i
;

458 
ngx_hâp_v¨übÀ_t
 *
v¨
;

460 
	`ngx_°r_£t
(&
«me
, "invalid_referer");

462 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

463 i‡(
v¨
 =
NULL
) {

464  
NGX_CONF_ERROR
;

467 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_ª„ªr_v¨übÀ
;

469 i‡(
æcf
->
keys
 =
NULL
) {

470 
æcf
->
keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
, (
ngx_hash_keys_¨øys_t
));

471 i‡(
æcf
->
keys
 =
NULL
) {

472  
NGX_CONF_ERROR
;

475 
æcf
->
keys
->
poﬁ
 = 
cf
->pool;

476 
æcf
->
keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

478 i‡(
	`ngx_hash_keys_¨øy_öô
(
æcf
->
keys
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

479  
NGX_CONF_ERROR
;

483 
vÆue
 = 
cf
->
¨gs
->
ñts
;

485 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

486 i‡(
vÆue
[
i
].
Àn
 == 0) {

487 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

488 "övÆidÑe„ª∏\"%V\"", &
vÆue
[
i
]);

489  
NGX_CONF_ERROR
;

492 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

493 
æcf
->
no_ª„ªr
 = 1;

497 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "blocked") == 0) {

498 
æcf
->
blocked_ª„ªr
 = 1;

502 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "server_names") == 0) {

503 
æcf
->
£rvî_«mes
 = 1;

507 i‡(
vÆue
[
i
].
d©a
[0] == '~') {

508 i‡(
	`ngx_hâp_add_ªgex_ª„ªr
(
cf
, 
æcf
, &
vÆue
[
i
]Ë!
NGX_OK
) {

509  
NGX_CONF_ERROR
;

515 
	`ngx_°r_nuŒ
(&
uri
);

517 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/');

519 i‡(
p
) {

520 
uri
.
Àn
 = (
vÆue
[
i
].
d©a
 + vÆue[i].ÀnË- 
p
;

521 
uri
.
d©a
 = 
p
;

522 
vÆue
[
i
].
Àn
 = 
p
 - vÆue[i].
d©a
;

525 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
æcf
->
keys
, &
vÆue
[
i
], &
uri
Ë!
NGX_OK
) {

526  
NGX_CONF_ERROR
;

530  
NGX_CONF_OK
;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hash_keys_¨øys_t
 *
keys
,

536 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
)

538 
ngx_öt_t
 
rc
;

539 
ngx_°r_t
 *
u
;

541 i‡(
uri
 =
NULL
 || uri->
Àn
 == 0) {

542 
u
 = 
NGX_HTTP_REFERER_NO_URI_PART
;

545 
u
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

546 i‡(
u
 =
NULL
) {

547  
NGX_ERROR
;

550 *
u
 = *
uri
;

553 
rc
 = 
	`ngx_hash_add_key
(
keys
, 
vÆue
, 
u
, 
NGX_HASH_WILDCARD_KEY
);

555 i‡(
rc
 =
NGX_OK
) {

556  
NGX_OK
;

559 i‡(
rc
 =
NGX_DECLINED
) {

560 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

561 "övÆid ho°«mê‹ wûdˇrd \"%V\"", 
vÆue
);

564 i‡(
rc
 =
NGX_BUSY
) {

565 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

566 "c⁄Êi˘ögÖ¨amëî \"%V\"", 
vÆue
);

569  
NGX_ERROR
;

570 
	}
}

573 
ngx_öt_t


574 
	$ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
,

575 
ngx_°r_t
 *
«me
)

577 #i‡(
NGX_PCRE
)

578 
ngx_ªgex_ñt_t
 *
ª
;

579 
ngx_ªgex_compûe_t
 
rc
;

580 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

582 i‡(
«me
->
Àn
 == 1) {

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "em±yÑegex i¿\"%V\"", 
«me
);

584  
NGX_ERROR
;

587 i‡(
æcf
->
ªgex
 =
NGX_CONF_UNSET_PTR
) {

588 
æcf
->
ªgex
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_ªgex_ñt_t
));

589 i‡(
æcf
->
ªgex
 =
NULL
) {

590  
NGX_ERROR
;

594 
ª
 = 
	`ngx_¨øy_push
(
æcf
->
ªgex
);

595 i‡(
ª
 =
NULL
) {

596  
NGX_ERROR
;

599 
«me
->
Àn
--;

600 
«me
->
d©a
++;

602 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

604 
rc
.
∑âîn
 = *
«me
;

605 
rc
.
poﬁ
 = 
cf
->pool;

606 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

607 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

608 
rc
.
îr
.
d©a
 = 
îr°r
;

610 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

611 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

612  
NGX_ERROR
;

615 
ª
->
ªgex
 = 
rc
.regex;

616 
ª
->
«me
 =Çame->
d©a
;

618  
NGX_OK
;

622 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

624 
«me
);

626  
NGX_ERROR
;

629 
	}
}

632 #i‡(
NGX_PCRE
)

634 
ngx_öt_t


635 
	$ngx_hâp_add_ªgex_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
,

636 
ngx_hâp_ªgex_t
 *
ªgex
)

638 
ngx_ªgex_ñt_t
 *
ª
;

640 i‡(
æcf
->
£rvî_«me_ªgex
 =
NGX_CONF_UNSET_PTR
) {

641 
æcf
->
£rvî_«me_ªgex
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

642 (
ngx_ªgex_ñt_t
));

643 i‡(
æcf
->
£rvî_«me_ªgex
 =
NULL
) {

644  
NGX_ERROR
;

648 
ª
 = 
	`ngx_¨øy_push
(
æcf
->
£rvî_«me_ªgex
);

649 i‡(
ª
 =
NULL
) {

650  
NGX_ERROR
;

653 
ª
->
ªgex
 =Ñegex->regex;

654 
ª
->
«me
 = 
ªgex
->«me.
d©a
;

656  
NGX_OK
;

657 
	}
}

662 
ngx_libc_cde˛


663 
	$ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

665 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

667 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

668 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

670  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

671 
	}
}

	@src/http/modules/ngx_http_rewrite_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 *
	mcodes
;

16 
ngx_uöt_t
 
	m°ack_size
;

18 
ngx_Êag_t
 
	mlog
;

19 
ngx_Êag_t
 
	munöôülized_v¨übÀ_w¨n
;

20 } 
	tngx_hâp_ªwrôe_loc_c⁄f_t
;

23 *
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

25 *
∑ª¡
, *
chûd
);

26 
ngx_öt_t
 
ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
);

27 *
ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

28 *
ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

29 *
c⁄f
);

30 *
ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

31 *
c⁄f
);

32 *
ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

34 * 
ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
,

35 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
);

36 *
ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

38 *
ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

40 * 
ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
,

41 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

44 
ngx_comm™d_t
 
	gngx_hâp_ªwrôe_comm™ds
[] = {

46 { 
ngx_°rög
("rewrite"),

47 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


48 |
NGX_CONF_TAKE23
,

49 
ngx_hâp_ªwrôe
,

50 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
NULL
 },

54 { 
ngx_°rög
("return"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


56 |
NGX_CONF_TAKE12
,

57 
ngx_hâp_ªwrôe_ªtu∫
,

58 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
NULL
 },

62 { 
ngx_°rög
("break"),

63 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


64 |
NGX_CONF_NOARGS
,

65 
ngx_hâp_ªwrôe_bªak
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

68 
NULL
 },

70 { 
ngx_°rög
("if"),

71 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

72 
ngx_hâp_ªwrôe_if
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

75 
NULL
 },

77 { 
ngx_°rög
("set"),

78 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


79 |
NGX_CONF_TAKE2
,

80 
ngx_hâp_ªwrôe_£t
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("rewrite_log"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


87 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
log
),

91 
NULL
 },

93 { 
ngx_°rög
("uninitialized_variable_warn"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


95 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

96 
ngx_c⁄f_£t_Êag_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
unöôülized_v¨übÀ_w¨n
),

99 
NULL
 },

101 
ngx_nuŒ_comm™d


105 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ_˘x
 = {

106 
NULL
,

107 
ngx_hâp_ªwrôe_öô
,

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
,

116 
ngx_hâp_ªwrôe_mîge_loc_c⁄f


120 
ngx_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ
 = {

121 
NGX_MODULE_V1
,

122 &
ngx_hâp_ªwrôe_moduÀ_˘x
,

123 
ngx_hâp_ªwrôe_comm™ds
,

124 
NGX_HTTP_MODULE
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NGX_MODULE_V1_PADDING


136 
ngx_öt_t


137 
	$ngx_hâp_ªwrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

139 
ngx_öt_t
 
ödex
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

141 
ngx_hâp_s¸ùt_ígöe_t
 *
e
;

142 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

143 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

144 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

146 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

147 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

148 
ödex
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

150 i‡(
r
->
pha£_h™dÀr
 =
ödex
 &&Ñ->
loc_c⁄f
 =
cscf
->
˘x
->loc_conf) {

152  
NGX_DECLINED
;

155 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

157 i‡(
æcf
->
codes
 =
NULL
) {

158  
NGX_DECLINED
;

161 
e
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_s¸ùt_ígöe_t
));

162 i‡(
e
 =
NULL
) {

163  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

166 
e
->
•
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

167 
æcf
->
°ack_size
 * (
ngx_hâp_v¨übÀ_vÆue_t
));

168 i‡(
e
->
•
 =
NULL
) {

169  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

172 
e
->
ù
 = 
æcf
->
codes
->
ñts
;

173 
e
->
ªque°
 = 
r
;

174 
e
->
quŸe
 = 1;

175 
e
->
log
 = 
æcf
->log;

176 
e
->
°©us
 = 
NGX_DECLINED
;

178 *(
uöçå_t
 *Ë
e
->
ù
) {

179 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
->
ù
;

180 
	`code
(
e
);

183 i‡(
e
->
°©us
 < 
NGX_HTTP_BAD_REQUEST
) {

184  
e
->
°©us
;

187 i‡(
r
->
îr_°©us
 == 0) {

188  
e
->
°©us
;

191  
r
->
îr_°©us
;

192 
	}
}

195 
ngx_öt_t


196 
	$ngx_hâp_ªwrôe_v¨
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

197 
uöçå_t
 
d©a
)

199 
ngx_hâp_v¨übÀ_t
 *
v¨
;

200 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

201 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

203 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

205 i‡(
æcf
->
unöôülized_v¨übÀ_w¨n
 == 0) {

206 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

207  
NGX_OK
;

210 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

212 
v¨
 = 
cmcf
->
v¨übÀs
.
ñts
;

220 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

221 "usög unöôülized \"%V\" v¨übÀ", &
v¨
[
d©a
].
«me
);

223 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

225  
NGX_OK
;

226 
	}
}

230 
	$ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

232 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
;

234 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªwrôe_loc_c⁄f_t
));

235 i‡(
c⁄f
 =
NULL
) {

236  
NULL
;

239 
c⁄f
->
°ack_size
 = 
NGX_CONF_UNSET_UINT
;

240 
c⁄f
->
log
 = 
NGX_CONF_UNSET
;

241 
c⁄f
->
unöôülized_v¨übÀ_w¨n
 = 
NGX_CONF_UNSET
;

243  
c⁄f
;

244 
	}
}

248 
	$ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

250 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

251 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

253 
uöçå_t
 *
code
;

255 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log
, 
¥ev
->log, 0);

256 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
unöôülized_v¨übÀ_w¨n
,

257 
¥ev
->
unöôülized_v¨übÀ_w¨n
, 1);

258 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ack_size
, 
¥ev
->stack_size, 10);

260 i‡(
c⁄f
->
codes
 =
NULL
) {

261  
NGX_CONF_OK
;

264 i‡(
c⁄f
->
codes
 =
¥ev
->codes) {

265  
NGX_CONF_OK
;

268 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
codes
, (
uöçå_t
));

269 i‡(
code
 =
NULL
) {

270  
NGX_CONF_ERROR
;

273 *
code
 = (
uöçå_t
Ë
NULL
;

275  
NGX_CONF_OK
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
)

282 
ngx_hâp_h™dÀr_±
 *
h
;

283 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

285 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

287 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
);

288 i‡(
h
 =
NULL
) {

289  
NGX_ERROR
;

292 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

294 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
);

295 i‡(
h
 =
NULL
) {

296  
NGX_ERROR
;

299 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

301  
NGX_OK
;

302 
	}
}

306 
	$ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

308 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

310 
ngx_°r_t
 *
vÆue
;

311 
ngx_uöt_t
 
œ°
;

312 
ngx_ªgex_compûe_t
 
rc
;

313 
ngx_hâp_s¸ùt_code_±
 *
code
;

314 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

315 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

316 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
ªgex_íd
;

317 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

319 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

320 (
ngx_hâp_s¸ùt_ªgex_code_t
));

321 i‡(
ªgex
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

327 
vÆue
 = 
cf
->
¨gs
->
ñts
;

329 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

331 
rc
.
∑âîn
 = 
vÆue
[1];

332 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

333 
rc
.
îr
.
d©a
 = 
îr°r
;

337 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

338 i‡(
ªgex
->ªgex =
NULL
) {

339  
NGX_CONF_ERROR
;

342 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

343 
ªgex
->
uri
 = 1;

344 
ªgex
->
«me
 = 
vÆue
[1];

346 i‡(
vÆue
[2].
d©a
[vÆue[2].
Àn
 - 1] == '?') {

349 
vÆue
[2].
Àn
--;

352 
ªgex
->
add_¨gs
 = 1;

355 
œ°
 = 0;

357 i‡(
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "http://", ("http://") - 1) == 0

358 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "https://", ("https://") - 1) == 0

359 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "$scheme", ("$scheme") - 1) == 0)

361 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

362 
ªgex
->
ªdúe˘
 = 1;

363 
œ°
 = 1;

366 i‡(
cf
->
¨gs
->
√…s
 == 4) {

367 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "last") == 0) {

368 
œ°
 = 1;

370 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "break") == 0) {

371 
ªgex
->
bªak_cy˛e
 = 1;

372 
œ°
 = 1;

374 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "redirect") == 0) {

375 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

376 
ªgex
->
ªdúe˘
 = 1;

377 
œ°
 = 1;

379 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "permanent") == 0) {

380 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_PERMANENTLY
;

381 
ªgex
->
ªdúe˘
 = 1;

382 
œ°
 = 1;

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

386 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

387  
NGX_CONF_ERROR
;

391 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

393 
sc
.
cf
 = cf;

394 
sc
.
sour˚
 = &
vÆue
[2];

395 
sc
.
Àngths
 = &
ªgex
->lengths;

396 
sc
.
vÆues
 = &
lcf
->
codes
;

397 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[2]);

398 
sc
.
maö
 = 
ªgex
;

399 
sc
.
com∂ëe_Àngths
 = 1;

400 
sc
.
compûe_¨gs
 = !
ªgex
->
ªdúe˘
;

402 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

403  
NGX_CONF_ERROR
;

406 
ªgex
 = 
sc
.
maö
;

408 
ªgex
->
size
 = 
sc
.size;

409 
ªgex
->
¨gs
 = 
sc
.args;

411 i‡(
sc
.
v¨übÀs
 =0 && !sc.
dup_ˇ±uª
) {

412 
ªgex
->
Àngths
 = 
NULL
;

415 
ªgex_íd
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
,

416 (
ngx_hâp_s¸ùt_ªgex_íd_code_t
),

417 &
ªgex
);

418 i‡(
ªgex_íd
 =
NULL
) {

419  
NGX_CONF_ERROR
;

422 
ªgex_íd
->
code
 = 
ngx_hâp_s¸ùt_ªgex_íd_code
;

423 
ªgex_íd
->
uri
 = 
ªgex
->uri;

424 
ªgex_íd
->
¨gs
 = 
ªgex
->args;

425 
ªgex_íd
->
add_¨gs
 = 
ªgex
->add_args;

426 
ªgex_íd
->
ªdúe˘
 = 
ªgex
->redirect;

428 i‡(
œ°
) {

429 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
, (
uöçå_t
), &
ªgex
);

430 i‡(
code
 =
NULL
) {

431  
NGX_CONF_ERROR
;

434 *
code
 = 
NULL
;

437 
ªgex
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


438 - (
u_ch¨
 *Ë
ªgex
;

440  
NGX_CONF_OK
;

441 
	}
}

445 
	$ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

447 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

449 
u_ch¨
 *
p
;

450 
ngx_°r_t
 *
vÆue
, *
v
;

451 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
ªt
;

452 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

454 
ªt
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

455 (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

456 i‡(
ªt
 =
NULL
) {

457  
NGX_CONF_ERROR
;

460 
vÆue
 = 
cf
->
¨gs
->
ñts
;

462 
	`ngx_memzîo
(
ªt
, (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

464 
ªt
->
code
 = 
ngx_hâp_s¸ùt_ªtu∫_code
;

466 
p
 = 
vÆue
[1].
d©a
;

468 
ªt
->
°©us
 = 
	`ngx_©oi
(
p
, 
vÆue
[1].
Àn
);

470 i‡(
ªt
->
°©us
 =(
uöçå_t
Ë
NGX_ERROR
) {

472 i‡(
cf
->
¨gs
->
√…s
 == 2

473 && (
	`ngx_°∫cmp
(
p
, "http://", ("http://") - 1) == 0

474 || 
	`ngx_°∫cmp
(
p
, "https://", ("https://") - 1) == 0

475 || 
	`ngx_°∫cmp
(
p
, "$scheme", ("$scheme") - 1) == 0))

477 
ªt
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

478 
v
 = &
vÆue
[1];

481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

482 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

483  
NGX_CONF_ERROR
;

488 i‡(
ªt
->
°©us
 > 999) {

489 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

490 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

491  
NGX_CONF_ERROR
;

494 i‡(
cf
->
¨gs
->
√…s
 == 2) {

495  
NGX_CONF_OK
;

498 
v
 = &
vÆue
[2];

501 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

503 
ccv
.
cf
 = cf;

504 
ccv
.
vÆue
 = 
v
;

505 
ccv
.
com∂ex_vÆue
 = &
ªt
->
ãxt
;

507 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

508  
NGX_CONF_ERROR
;

511  
NGX_CONF_OK
;

512 
	}
}

516 
	$ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

518 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

520 
ngx_hâp_s¸ùt_code_±
 *
code
;

522 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
, (
uöçå_t
));

523 i‡(
code
 =
NULL
) {

524  
NGX_CONF_ERROR
;

527 *
code
 = 
ngx_hâp_s¸ùt_bªak_code
;

529  
NGX_CONF_OK
;

530 
	}
}

534 
	$ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

536 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

538 *
mc⁄f
;

539 *
rv
;

540 
u_ch¨
 *
ñts
;

541 
ngx_uöt_t
 
i
;

542 
ngx_c⁄f_t
 
ßve
;

543 
ngx_hâp_moduÀ_t
 *
moduÀ
;

544 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

545 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

546 
ngx_hâp_s¸ùt_if_code_t
 *
if_code
;

547 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
∆cf
;

549 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

550 i‡(
˘x
 =
NULL
) {

551  
NGX_CONF_ERROR
;

554 
p˘x
 = 
cf
->
˘x
;

555 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

556 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

558 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

559 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

560  
NGX_CONF_ERROR
;

563 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

564 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

568 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

570 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

572 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

573 i‡(
mc⁄f
 =
NULL
) {

574  
NGX_CONF_ERROR
;

577 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

581 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

583 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

584 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

585 
˛cf
->
«me
 = 
p˛cf
->name;

586 
˛cf
->
n⁄ame
 = 1;

588 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

589  
NGX_CONF_ERROR
;

592 i‡(
	`ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
cf
, 
lcf
Ë!
NGX_CONF_OK
) {

593  
NGX_CONF_ERROR
;

596 
if_code
 = 
	`ngx_¨øy_push_n
(
lcf
->
codes
, (
ngx_hâp_s¸ùt_if_code_t
));

597 i‡(
if_code
 =
NULL
) {

598  
NGX_CONF_ERROR
;

601 
if_code
->
code
 = 
ngx_hâp_s¸ùt_if_code
;

603 
ñts
 = 
lcf
->
codes
->elts;

608 
∆cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_ªwrôe_moduÀ
.
˘x_ödex
];

609 
∆cf
->
codes
 = 
lcf
->codes;

612 
ßve
 = *
cf
;

613 
cf
->
˘x
 = ctx;

615 i‡(
p˛cf
->
«me
.
Àn
 == 0) {

616 
if_code
->
loc_c⁄f
 = 
NULL
;

617 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SIF_CONF
;

620 
if_code
->
loc_c⁄f
 = 
˘x
->loc_conf;

621 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LIF_CONF
;

624 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

626 *
cf
 = 
ßve
;

628 i‡(
rv
 !
NGX_CONF_OK
) {

629  
rv
;

633 i‡(
ñts
 !
lcf
->
codes
->elts) {

634 
if_code
 = (
ngx_hâp_s¸ùt_if_code_t
 *)

635 ((
u_ch¨
 *Ë
if_code
 + ((u_ch¨ *Ë
lcf
->
codes
->
ñts
 -Élts));

638 
if_code
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


639 - (
u_ch¨
 *Ë
if_code
;

643 
∆cf
->
codes
 = 
NULL
;

645  
NGX_CONF_OK
;

646 
	}
}

650 
	$ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
)

652 
u_ch¨
 *
p
;

653 
size_t
 
Àn
;

654 
ngx_°r_t
 *
vÆue
;

655 
ngx_uöt_t
 
cur
, 
œ°
;

656 
ngx_ªgex_compûe_t
 
rc
;

657 
ngx_hâp_s¸ùt_code_±
 *
code
;

658 
ngx_hâp_s¸ùt_fûe_code_t
 *
f›
;

659 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

660 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

662 
vÆue
 = 
cf
->
¨gs
->
ñts
;

663 
œ°
 = 
cf
->
¨gs
->
√…s
 - 1;

665 i‡(
vÆue
[1].
Àn
 < 1 || vÆue[1].
d©a
[0] != '(') {

666 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

667 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[1]);

668  
NGX_CONF_ERROR
;

671 i‡(
vÆue
[1].
Àn
 == 1) {

672 
cur
 = 2;

675 
cur
 = 1;

676 
vÆue
[1].
Àn
--;

677 
vÆue
[1].
d©a
++;

680 i‡(
vÆue
[
œ°
].
Àn
 < 1 || vÆue[œ°].
d©a
[value[last].len - 1] != ')') {

681 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

682 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
œ°
]);

683  
NGX_CONF_ERROR
;

686 i‡(
vÆue
[
œ°
].
Àn
 == 1) {

687 
œ°
--;

690 
vÆue
[
œ°
].
Àn
--;

691 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

694 
Àn
 = 
vÆue
[
cur
].len;

695 
p
 = 
vÆue
[
cur
].
d©a
;

697 i‡(
Àn
 > 1 && 
p
[0] == '$') {

699 i‡(
cur
 !
œ°
 && cur + 2 !=Üast) {

700 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

701 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

702  
NGX_CONF_ERROR
;

705 i‡(
	`ngx_hâp_ªwrôe_v¨übÀ
(
cf
, 
lcf
, &
vÆue
[
cur
]Ë!
NGX_CONF_OK
) {

706  
NGX_CONF_ERROR
;

709 i‡(
cur
 =
œ°
) {

710  
NGX_CONF_OK
;

713 
cur
++;

715 
Àn
 = 
vÆue
[
cur
].len;

716 
p
 = 
vÆue
[
cur
].
d©a
;

718 i‡(
Àn
 =1 && 
p
[0] == '=') {

720 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

721  
NGX_CONF_ERROR
;

724 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

725 (
uöçå_t
));

726 i‡(
code
 =
NULL
) {

727  
NGX_CONF_ERROR
;

730 *
code
 = 
ngx_hâp_s¸ùt_equÆ_code
;

732  
NGX_CONF_OK
;

735 i‡(
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '=') {

737 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

738  
NGX_CONF_ERROR
;

741 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

742 (
uöçå_t
));

743 i‡(
code
 =
NULL
) {

744  
NGX_CONF_ERROR
;

747 *
code
 = 
ngx_hâp_s¸ùt_nŸ_equÆ_code
;

748  
NGX_CONF_OK
;

751 i‡((
Àn
 =1 && 
p
[0] == '~')

752 || (
Àn
 =2 && 
p
[0] == '~' &&Ö[1] == '*')

753 || (
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '~')

754 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '~' &&Ö[2] == '*'))

756 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

757 (
ngx_hâp_s¸ùt_ªgex_code_t
));

758 i‡(
ªgex
 =
NULL
) {

759  
NGX_CONF_ERROR
;

762 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

764 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

766 
rc
.
∑âîn
 = 
vÆue
[
œ°
];

767 
rc
.
›ti⁄s
 = (
p
[
Àn
 - 1] ='*'Ë? 
NGX_REGEX_CASELESS
 : 0;

768 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

769 
rc
.
îr
.
d©a
 = 
îr°r
;

771 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

772 i‡(
ªgex
->ªgex =
NULL
) {

773  
NGX_CONF_ERROR
;

776 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

777 
ªgex
->
√xt
 = (
ngx_hâp_s¸ùt_ªgex_code_t
);

778 
ªgex
->
ã°
 = 1;

779 i‡(
p
[0] == '!') {

780 
ªgex
->
√g©ive_ã°
 = 1;

782 
ªgex
->
«me
 = 
vÆue
[
œ°
];

784  
NGX_CONF_OK
;

787 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

788 "u√x≥˘ed \"%V\" i¿c⁄dôi⁄", &
vÆue
[
cur
]);

789  
NGX_CONF_ERROR
;

791 } i‡((
Àn
 =2 && 
p
[0] == '-')

792 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '-'))

794 i‡(
cur
 + 1 !
œ°
) {

795 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

796 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

797  
NGX_CONF_ERROR
;

800 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

801 
vÆue
[
œ°
].
Àn
++;

803 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

804  
NGX_CONF_ERROR
;

807 
f›
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

808 (
ngx_hâp_s¸ùt_fûe_code_t
));

809 i‡(
f›
 =
NULL
) {

810  
NGX_CONF_ERROR
;

813 
f›
->
code
 = 
ngx_hâp_s¸ùt_fûe_code
;

815 i‡(
p
[1] == 'f') {

816 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_∂aö
;

817  
NGX_CONF_OK
;

820 i‡(
p
[1] == 'd') {

821 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_dú
;

822  
NGX_CONF_OK
;

825 i‡(
p
[1] == 'e') {

826 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exi°s
;

827  
NGX_CONF_OK
;

830 i‡(
p
[1] == 'x') {

831 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exec
;

832  
NGX_CONF_OK
;

835 i‡(
p
[0] == '!') {

836 i‡(
p
[2] == 'f') {

837 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
;

838  
NGX_CONF_OK
;

841 i‡(
p
[2] == 'd') {

842 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_dú
;

843  
NGX_CONF_OK
;

846 i‡(
p
[2] == 'e') {

847 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
;

848  
NGX_CONF_OK
;

851 i‡(
p
[2] == 'x') {

852 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exec
;

853  
NGX_CONF_OK
;

857 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

858 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

859  
NGX_CONF_ERROR
;

862 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

863 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

865  
NGX_CONF_ERROR
;

866 
	}
}

870 
	$ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

871 
ngx_°r_t
 *
vÆue
)

873 
ngx_öt_t
 
ödex
;

874 
ngx_hâp_s¸ùt_v¨_code_t
 *
v¨_code
;

876 
vÆue
->
Àn
--;

877 
vÆue
->
d©a
++;

879 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

881 i‡(
ödex
 =
NGX_ERROR
) {

882  
NGX_CONF_ERROR
;

885 
v¨_code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

886 (
ngx_hâp_s¸ùt_v¨_code_t
));

887 i‡(
v¨_code
 =
NULL
) {

888  
NGX_CONF_ERROR
;

891 
v¨_code
->
code
 = 
ngx_hâp_s¸ùt_v¨_code
;

892 
v¨_code
->
ödex
 = index;

894  
NGX_CONF_OK
;

895 
	}
}

899 
	$ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

901 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

903 
ngx_öt_t
 
ödex
;

904 
ngx_°r_t
 *
vÆue
;

905 
ngx_hâp_v¨übÀ_t
 *
v
;

906 
ngx_hâp_s¸ùt_v¨_code_t
 *
vcode
;

907 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
vhcode
;

909 
vÆue
 = 
cf
->
¨gs
->
ñts
;

911 i‡(
vÆue
[1].
d©a
[0] != '$') {

912 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

913 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

914  
NGX_CONF_ERROR
;

917 
vÆue
[1].
Àn
--;

918 
vÆue
[1].
d©a
++;

920 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

921 i‡(
v
 =
NULL
) {

922  
NGX_CONF_ERROR
;

925 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

926 i‡(
ödex
 =
NGX_ERROR
) {

927  
NGX_CONF_ERROR
;

930 i‡(
v
->
gë_h™dÀr
 =
NULL


931 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "http_", 5) != 0

932 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "sent_http_", 10) != 0

933 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "upstream_http_", 14) != 0

934 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "cookie_", 7) != 0

935 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "upstream_cookie_", 16)

937 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "arg_", 4) != 0)

939 
v
->
gë_h™dÀr
 = 
ngx_hâp_ªwrôe_v¨
;

940 
v
->
d©a
 = 
ödex
;

943 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[2]Ë!
NGX_CONF_OK
) {

944  
NGX_CONF_ERROR
;

947 i‡(
v
->
£t_h™dÀr
) {

948 
vhcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

949 (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
));

950 i‡(
vhcode
 =
NULL
) {

951  
NGX_CONF_ERROR
;

954 
vhcode
->
code
 = 
ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
;

955 
vhcode
->
h™dÀr
 = 
v
->
£t_h™dÀr
;

956 
vhcode
->
d©a
 = 
v
->data;

958  
NGX_CONF_OK
;

961 
vcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

962 (
ngx_hâp_s¸ùt_v¨_code_t
));

963 i‡(
vcode
 =
NULL
) {

964  
NGX_CONF_ERROR
;

967 
vcode
->
code
 = 
ngx_hâp_s¸ùt_£t_v¨_code
;

968 
vcode
->
ödex
 = (
uöçå_t
) index;

970  
NGX_CONF_OK
;

971 
	}
}

975 
	$ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

976 
ngx_°r_t
 *
vÆue
)

978 
ngx_öt_t
 
n
;

979 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

980 
ngx_hâp_s¸ùt_vÆue_code_t
 *
vÆ
;

981 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
com∂ex
;

983 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
vÆue
);

985 i‡(
n
 == 0) {

986 
vÆ
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

987 (
ngx_hâp_s¸ùt_vÆue_code_t
));

988 i‡(
vÆ
 =
NULL
) {

989  
NGX_CONF_ERROR
;

992 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

994 i‡(
n
 =
NGX_ERROR
) {

995 
n
 = 0;

998 
vÆ
->
code
 = 
ngx_hâp_s¸ùt_vÆue_code
;

999 
vÆ
->
vÆue
 = (
uöçå_t
Ë
n
;

1000 
vÆ
->
ãxt_Àn
 = (
uöçå_t
Ë
vÆue
->
Àn
;

1001 
vÆ
->
ãxt_d©a
 = (
uöçå_t
Ë
vÆue
->
d©a
;

1003  
NGX_CONF_OK
;

1006 
com∂ex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

1007 (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
));

1008 i‡(
com∂ex
 =
NULL
) {

1009  
NGX_CONF_ERROR
;

1012 
com∂ex
->
code
 = 
ngx_hâp_s¸ùt_com∂ex_vÆue_code
;

1013 
com∂ex
->
Àngths
 = 
NULL
;

1015 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1017 
sc
.
cf
 = cf;

1018 
sc
.
sour˚
 = 
vÆue
;

1019 
sc
.
Àngths
 = &
com∂ex
->lengths;

1020 
sc
.
vÆues
 = &
lcf
->
codes
;

1021 
sc
.
v¨übÀs
 = 
n
;

1022 
sc
.
com∂ëe_Àngths
 = 1;

1024 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1025  
NGX_CONF_ERROR
;

1028  
NGX_CONF_OK
;

1029 
	}
}

	@src/http/modules/ngx_http_scgi_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

15 
ngx_¨øy_t
 
	mˇches
;

16 } 
	tngx_hâp_scgi_maö_c⁄f_t
;

20 
ngx_¨øy_t
 *
	mÊushes
;

21 
ngx_¨øy_t
 *
	mÀngths
;

22 
ngx_¨øy_t
 *
	mvÆues
;

23 
ngx_uöt_t
 
	mnumbî
;

24 
ngx_hash_t
 
	mhash
;

25 } 
	tngx_hâp_scgi_∑øms_t
;

29 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

31 
ngx_hâp_scgi_∑øms_t
 
	m∑øms
;

32 #i‡(
NGX_HTTP_CACHE
)

33 
ngx_hâp_scgi_∑øms_t
 
	m∑øms_ˇche
;

35 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

37 
ngx_¨øy_t
 *
	mscgi_Àngths
;

38 
ngx_¨øy_t
 *
	mscgi_vÆues
;

40 #i‡(
NGX_HTTP_CACHE
)

41 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

43 } 
	tngx_hâp_scgi_loc_c⁄f_t
;

46 
ngx_öt_t
 
ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
);

48 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_öt_t
 
ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

51 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

53 
ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

55 *
ngx_hâp_scgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

56 *
ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

58 *
chûd
);

59 
ngx_öt_t
 
ngx_hâp_scgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
,

60 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
, 
ngx_hâp_scgi_∑øms_t
 *
∑øms
,

61 
ngx_keyvÆ_t
 *
deÁu…_∑øms
);

63 *
ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

64 *
ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

65 *
c⁄f
);

67 #i‡(
NGX_HTTP_CACHE
)

68 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

69 *
ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

71 *
ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

76 
ngx_c⁄f_bômask_t
 
	gngx_hâp_scgi_√xt_up°ªam_masks
[] = {

77 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

78 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

79 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

80 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

81 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

82 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

83 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

84 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

85 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

86 { 
ngx_nuŒ_°rög
, 0 }

90 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
;

93 
ngx_comm™d_t
 
	gngx_hâp_scgi_comm™ds
[] = {

95 { 
ngx_°rög
("scgi_pass"),

96 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_hâp_scgi_∑ss
,

98 
NGX_HTTP_LOC_CONF_OFFSET
,

100 
NULL
 },

102 { 
ngx_°rög
("scgi_store"),

103 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

104 
ngx_hâp_scgi_°‹e
,

105 
NGX_HTTP_LOC_CONF_OFFSET
,

107 
NULL
 },

109 { 
ngx_°rög
("scgi_store_access"),

110 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

111 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

112 
NGX_HTTP_LOC_CONF_OFFSET
,

113 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

114 
NULL
 },

116 { 
ngx_°rög
("scgi_buffering"),

117 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

118 
ngx_c⁄f_£t_Êag_¶Ÿ
,

119 
NGX_HTTP_LOC_CONF_OFFSET
,

120 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

121 
NULL
 },

123 { 
ngx_°rög
("scgi_request_buffering"),

124 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

125 
ngx_c⁄f_£t_Êag_¶Ÿ
,

126 
NGX_HTTP_LOC_CONF_OFFSET
,

127 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ªque°_buf„rög
),

128 
NULL
 },

130 { 
ngx_°rög
("scgi_ignore_client_abort"),

131 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

132 
ngx_c⁄f_£t_Êag_¶Ÿ
,

133 
NGX_HTTP_LOC_CONF_OFFSET
,

134 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

135 
NULL
 },

137 { 
ngx_°rög
("scgi_bind"),

138 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

139 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

140 
NGX_HTTP_LOC_CONF_OFFSET
,

141 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

142 
NULL
 },

144 { 
ngx_°rög
("scgi_connect_timeout"),

145 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_m£c_¶Ÿ
,

147 
NGX_HTTP_LOC_CONF_OFFSET
,

148 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

149 
NULL
 },

151 { 
ngx_°rög
("scgi_send_timeout"),

152 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_m£c_¶Ÿ
,

154 
NGX_HTTP_LOC_CONF_OFFSET
,

155 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

156 
NULL
 },

158 { 
ngx_°rög
("scgi_buffer_size"),

159 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

160 
ngx_c⁄f_£t_size_¶Ÿ
,

161 
NGX_HTTP_LOC_CONF_OFFSET
,

162 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

163 
NULL
 },

165 { 
ngx_°rög
("scgi_pass_request_headers"),

166 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

167 
ngx_c⁄f_£t_Êag_¶Ÿ
,

168 
NGX_HTTP_LOC_CONF_OFFSET
,

169 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

170 
NULL
 },

172 { 
ngx_°rög
("scgi_pass_request_body"),

173 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

174 
ngx_c⁄f_£t_Êag_¶Ÿ
,

175 
NGX_HTTP_LOC_CONF_OFFSET
,

176 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

177 
NULL
 },

179 { 
ngx_°rög
("scgi_intercept_errors"),

180 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

181 
ngx_c⁄f_£t_Êag_¶Ÿ
,

182 
NGX_HTTP_LOC_CONF_OFFSET
,

183 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

184 
NULL
 },

186 { 
ngx_°rög
("scgi_read_timeout"),

187 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

188 
ngx_c⁄f_£t_m£c_¶Ÿ
,

189 
NGX_HTTP_LOC_CONF_OFFSET
,

190 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

191 
NULL
 },

193 { 
ngx_°rög
("scgi_buffers"),

194 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

195 
ngx_c⁄f_£t_bufs_¶Ÿ
,

196 
NGX_HTTP_LOC_CONF_OFFSET
,

197 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

198 
NULL
 },

200 { 
ngx_°rög
("scgi_busy_buffers_size"),

201 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

202 
ngx_c⁄f_£t_size_¶Ÿ
,

203 
NGX_HTTP_LOC_CONF_OFFSET
,

204 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

205 
NULL
 },

207 { 
ngx_°rög
("scgi_force_ranges"),

208 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

209 
ngx_c⁄f_£t_Êag_¶Ÿ
,

210 
NGX_HTTP_LOC_CONF_OFFSET
,

211 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
f‹˚_ønges
),

212 
NULL
 },

214 { 
ngx_°rög
("scgi_limit_rate"),

215 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

216 
ngx_c⁄f_£t_size_¶Ÿ
,

217 
NGX_HTTP_LOC_CONF_OFFSET
,

218 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
limô_øã
),

219 
NULL
 },

221 #i‡(
NGX_HTTP_CACHE
)

223 { 
ngx_°rög
("scgi_cache"),

224 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

225 
ngx_hâp_scgi_ˇche
,

226 
NGX_HTTP_LOC_CONF_OFFSET
,

228 
NULL
 },

230 { 
ngx_°rög
("scgi_cache_key"),

231 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

232 
ngx_hâp_scgi_ˇche_key
,

233 
NGX_HTTP_LOC_CONF_OFFSET
,

235 
NULL
 },

237 { 
ngx_°rög
("scgi_cache_path"),

238 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

239 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

240 
NGX_HTTP_MAIN_CONF_OFFSET
,

241 
off£tof
(
ngx_hâp_scgi_maö_c⁄f_t
, 
ˇches
),

242 &
ngx_hâp_scgi_moduÀ
 },

244 { 
ngx_°rög
("scgi_cache_bypass"),

245 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

246 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

247 
NGX_HTTP_LOC_CONF_OFFSET
,

248 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

249 
NULL
 },

251 { 
ngx_°rög
("scgi_no_cache"),

252 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

253 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

254 
NGX_HTTP_LOC_CONF_OFFSET
,

255 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

256 
NULL
 },

258 { 
ngx_°rög
("scgi_cache_valid"),

259 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

260 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

261 
NGX_HTTP_LOC_CONF_OFFSET
,

262 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

263 
NULL
 },

265 { 
ngx_°rög
("scgi_cache_min_uses"),

266 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

267 
ngx_c⁄f_£t_num_¶Ÿ
,

268 
NGX_HTTP_LOC_CONF_OFFSET
,

269 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

270 
NULL
 },

272 { 
ngx_°rög
("scgi_cache_use_stale"),

273 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

274 
ngx_c⁄f_£t_bômask_¶Ÿ
,

275 
NGX_HTTP_LOC_CONF_OFFSET
,

276 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

277 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

279 { 
ngx_°rög
("scgi_cache_methods"),

280 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

281 
ngx_c⁄f_£t_bômask_¶Ÿ
,

282 
NGX_HTTP_LOC_CONF_OFFSET
,

283 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

284 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

286 { 
ngx_°rög
("scgi_cache_lock"),

287 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

288 
ngx_c⁄f_£t_Êag_¶Ÿ
,

289 
NGX_HTTP_LOC_CONF_OFFSET
,

290 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

291 
NULL
 },

293 { 
ngx_°rög
("scgi_cache_lock_timeout"),

294 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

295 
ngx_c⁄f_£t_m£c_¶Ÿ
,

296 
NGX_HTTP_LOC_CONF_OFFSET
,

297 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

298 
NULL
 },

300 { 
ngx_°rög
("scgi_cache_lock_age"),

301 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

302 
ngx_c⁄f_£t_m£c_¶Ÿ
,

303 
NGX_HTTP_LOC_CONF_OFFSET
,

304 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_age
),

305 
NULL
 },

307 { 
ngx_°rög
("scgi_cache_revalidate"),

308 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

309 
ngx_c⁄f_£t_Êag_¶Ÿ
,

310 
NGX_HTTP_LOC_CONF_OFFSET
,

311 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

312 
NULL
 },

316 { 
ngx_°rög
("scgi_temp_path"),

317 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

318 
ngx_c⁄f_£t_∑th_¶Ÿ
,

319 
NGX_HTTP_LOC_CONF_OFFSET
,

320 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

321 
NULL
 },

323 { 
ngx_°rög
("scgi_max_temp_file_size"),

324 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

325 
ngx_c⁄f_£t_size_¶Ÿ
,

326 
NGX_HTTP_LOC_CONF_OFFSET
,

327 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

328 
NULL
 },

330 { 
ngx_°rög
("scgi_temp_file_write_size"),

331 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

332 
ngx_c⁄f_£t_size_¶Ÿ
,

333 
NGX_HTTP_LOC_CONF_OFFSET
,

334 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

335 
NULL
 },

337 { 
ngx_°rög
("scgi_next_upstream"),

338 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

339 
ngx_c⁄f_£t_bômask_¶Ÿ
,

340 
NGX_HTTP_LOC_CONF_OFFSET
,

341 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

342 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

344 { 
ngx_°rög
("scgi_next_upstream_tries"),

345 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

346 
ngx_c⁄f_£t_num_¶Ÿ
,

347 
NGX_HTTP_LOC_CONF_OFFSET
,

348 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

349 
NULL
 },

351 { 
ngx_°rög
("scgi_next_upstream_timeout"),

352 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

353 
ngx_c⁄f_£t_m£c_¶Ÿ
,

354 
NGX_HTTP_LOC_CONF_OFFSET
,

355 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

356 
NULL
 },

358 { 
ngx_°rög
("scgi_param"),

359 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

360 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

361 
NGX_HTTP_LOC_CONF_OFFSET
,

362 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
∑øms_sour˚
),

363 
NULL
 },

365 { 
ngx_°rög
("scgi_pass_header"),

366 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

367 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

368 
NGX_HTTP_LOC_CONF_OFFSET
,

369 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

370 
NULL
 },

372 { 
ngx_°rög
("scgi_hide_header"),

373 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

374 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

375 
NGX_HTTP_LOC_CONF_OFFSET
,

376 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

377 
NULL
 },

379 { 
ngx_°rög
("scgi_ignore_headers"),

380 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

381 
ngx_c⁄f_£t_bômask_¶Ÿ
,

382 
NGX_HTTP_LOC_CONF_OFFSET
,

383 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

384 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

386 
ngx_nuŒ_comm™d


390 
ngx_hâp_moduÀ_t
 
	gngx_hâp_scgi_moduÀ_˘x
 = {

391 
NULL
,

392 
NULL
,

394 
ngx_hâp_scgi_¸óã_maö_c⁄f
,

395 
NULL
,

397 
NULL
,

398 
NULL
,

400 
ngx_hâp_scgi_¸óã_loc_c⁄f
,

401 
ngx_hâp_scgi_mîge_loc_c⁄f


405 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
 = {

406 
NGX_MODULE_V1
,

407 &
ngx_hâp_scgi_moduÀ_˘x
,

408 
ngx_hâp_scgi_comm™ds
,

409 
NGX_HTTP_MODULE
,

410 
NULL
,

411 
NULL
,

412 
NULL
,

413 
NULL
,

414 
NULL
,

415 
NULL
,

416 
NULL
,

417 
NGX_MODULE_V1_PADDING


421 
ngx_°r_t
 
	gngx_hâp_scgi_hide_hódîs
[] = {

422 
ngx_°rög
("Status"),

423 
ngx_°rög
("X-Accel-Expires"),

424 
ngx_°rög
("X-Accel-Redirect"),

425 
ngx_°rög
("X-Accel-Limit-Rate"),

426 
ngx_°rög
("X-Accel-Buffering"),

427 
ngx_°rög
("X-Accel-Charset"),

428 
ngx_nuŒ_°rög


432 #i‡(
NGX_HTTP_CACHE
)

434 
ngx_keyvÆ_t
 
	gngx_hâp_scgi_ˇche_hódîs
[] = {

435 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),

436 
ngx_°rög
("$upstream_cache_last_modified") },

437 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

438 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("$upstream_cache_etag") },

439 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

440 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

441 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

442 { 
ngx_nuŒ_°rög
,Çgx_null_string }

448 
ngx_∑th_öô_t
 
	gngx_hâp_scgi_ãmp_∑th
 = {

449 
ngx_°rög
(
NGX_HTTP_SCGI_TEMP_PATH
), { 1, 2, 0 }

453 
ngx_öt_t


454 
	$ngx_hâp_scgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

456 
ngx_öt_t
 
rc
;

457 
ngx_hâp_°©us_t
 *
°©us
;

458 
ngx_hâp_up°ªam_t
 *
u
;

459 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

460 #i‡(
NGX_HTTP_CACHE
)

461 
ngx_hâp_scgi_maö_c⁄f_t
 *
smcf
;

464 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

465  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

468 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

469 i‡(
°©us
 =
NULL
) {

470  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

473 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_scgi_moduÀ
);

475 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

477 i‡(
scf
->
scgi_Àngths
) {

478 i‡(
	`ngx_hâp_scgi_evÆ
(
r
, 
scf
Ë!
NGX_OK
) {

479  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

483 
u
 = 
r
->
up°ªam
;

485 
	`ngx_°r_£t
(&
u
->
schema
, "scgi://");

486 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_scgi_moduÀ
;

488 
u
->
c⁄f
 = &
scf
->
up°ªam
;

490 #i‡(
NGX_HTTP_CACHE
)

491 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

493 
u
->
ˇches
 = &
smcf
->caches;

494 
u
->
¸óã_key
 = 
ngx_hâp_scgi_¸óã_key
;

497 
u
->
¸óã_ªque°
 = 
ngx_hâp_scgi_¸óã_ªque°
;

498 
u
->
ªöô_ªque°
 = 
ngx_hâp_scgi_ªöô_ªque°
;

499 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

500 
u
->
ab‹t_ªque°
 = 
ngx_hâp_scgi_ab‹t_ªque°
;

501 
u
->
föÆize_ªque°
 = 
ngx_hâp_scgi_föÆize_ªque°
;

502 
r
->
°©e
 = 0;

504 
u
->
buf„rög
 = 
scf
->
up°ªam
.buffering;

506 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

507 i‡(
u
->
pùe
 =
NULL
) {

508  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

511 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

512 
u
->
pùe
->
öput_˘x
 = 
r
;

514 i‡(!
scf
->
up°ªam
.
ªque°_buf„rög


515 && 
scf
->
up°ªam
.
∑ss_ªque°_body


516 && !
r
->
hódîs_ö
.
chunked
)

518 
r
->
ªque°_body_no_buf„rög
 = 1;

521 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

523 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

524  
rc
;

527  
NGX_DONE
;

528 
	}
}

531 
ngx_öt_t


532 
	$ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_scgi_loc_c⁄f_t
 * 
scf
)

534 
ngx_uæ_t
 
uæ
;

535 
ngx_hâp_up°ªam_t
 *
u
;

537 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

539 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
scf
->
scgi_Àngths
->
ñts
, 0,

540 
scf
->
scgi_vÆues
->
ñts
)

541 =
NULL
)

543  
NGX_ERROR
;

546 
uæ
.
no_ªsﬁve
 = 1;

548 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

549 i‡(
uæ
.
îr
) {

550 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

551 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

554  
NGX_ERROR
;

557 
u
 = 
r
->
up°ªam
;

559 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

560 i‡(
u
->
ªsﬁved
 =
NULL
) {

561  
NGX_ERROR
;

564 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

565 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

566 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

567 
u
->
ªsﬁved
->
«ddrs
 = 1;

568 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

571 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

572 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

573 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

576  
NGX_OK
;

577 
	}
}

580 #i‡(
NGX_HTTP_CACHE
)

582 
ngx_öt_t


583 
	$ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

585 
ngx_°r_t
 *
key
;

586 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

588 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

589 i‡(
key
 =
NULL
) {

590  
NGX_ERROR
;

593 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

595 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
scf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

596  
NGX_ERROR
;

599  
NGX_OK
;

600 
	}
}

605 
ngx_öt_t


606 
	$ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

608 
off_t
 
c⁄ã¡_Àngth_n
;

609 
u_ch¨
 
ch
, *
key
, *
vÆ
, *
lowˇ£_key
;

610 
size_t
 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
Æloˇãd
;

611 
ngx_buf_t
 *
b
;

612 
ngx_°r_t
 
c⁄ã¡_Àngth
;

613 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

614 
ngx_chaö_t
 *
˛
, *
body
;

615 
ngx_li°_∑π_t
 *
∑π
;

616 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

617 
ngx_hâp_scgi_∑øms_t
 *
∑øms
;

618 
ngx_hâp_s¸ùt_code_±
 
code
;

619 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

620 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

621 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

622 
u_ch¨
 
buf„r
[
NGX_OFF_T_LEN
];

624 
c⁄ã¡_Àngth_n
 = 0;

625 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

627 
body
) {

628 
c⁄ã¡_Àngth_n
 +
	`ngx_buf_size
(
body
->
buf
);

629 
body
 = body->
√xt
;

632 
c⁄ã¡_Àngth
.
d©a
 = 
buf„r
;

633 
c⁄ã¡_Àngth
.
Àn
 = 
	`ngx_•rötf
(
buf„r
, "%O", 
c⁄ã¡_Àngth_n
) - buffer;

635 
Àn
 = ("CONTENT_LENGTH"Ë+ 
c⁄ã¡_Àngth
.len + 1;

637 
hódî_∑øms
 = 0;

638 
ign‹ed
 = 
NULL
;

640 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

642 #i‡(
NGX_HTTP_CACHE
)

643 
∑øms
 = 
r
->
up°ªam
->
ˇchóbÀ
 ? &
scf
->
∑øms_ˇche
 : &scf->params;

645 
∑øms
 = &
scf
->params;

648 i‡(
∑øms
->
Àngths
) {

649 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

651 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∑øms
->
Êushes
);

652 
À
.
Êushed
 = 1;

654 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

655 
À
.
ªque°
 = 
r
;

657 *(
uöçå_t
 *Ë
À
.
ù
) {

659 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

660 
key_Àn
 = 
	`lcode
(&
À
);

662 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

663 
skù_em±y
 = 
	`lcode
(&
À
);

665 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

666 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

668 
À
.
ù
 +(
uöçå_t
);

670 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

674 
Àn
 +
key_Àn
 + 
vÆ_Àn
 + 1;

678 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

680 
Æloˇãd
 = 0;

681 
lowˇ£_key
 = 
NULL
;

683 i‡(
∑øms
->
numbî
) {

684 
n
 = 0;

685 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

687 
∑π
) {

688 
n
 +
∑π
->
√…s
;

689 
∑π
 =Ö¨t->
√xt
;

692 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

693 i‡(
ign‹ed
 =
NULL
) {

694  
NGX_ERROR
;

698 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

699 
hódî
 = 
∑π
->
ñts
;

701 
i
 = 0; ; i++) {

703 i‡(
i
 >
∑π
->
√…s
) {

704 i‡(
∑π
->
√xt
 =
NULL
) {

708 
∑π
 =Ö¨t->
√xt
;

709 
hódî
 = 
∑π
->
ñts
;

710 
i
 = 0;

713 i‡(
∑øms
->
numbî
) {

714 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

715 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

716 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

717 i‡(
lowˇ£_key
 =
NULL
) {

718  
NGX_ERROR
;

722 
hash
 = 0;

724 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

725 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

727 i‡(
ch
 >= 'A' && ch <= 'Z') {

728 
ch
 |= 0x20;

730 } i‡(
ch
 == '-') {

731 
ch
 = '_';

734 
hash
 = 
	`ngx_hash
(hash, 
ch
);

735 
lowˇ£_key
[
n
] = 
ch
;

738 i‡(
	`ngx_hash_föd
(&
∑øms
->
hash
, hash, 
lowˇ£_key
, 
n
)) {

739 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

744 
Àn
 +("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len + 1

745 + 
hódî
[
i
].
vÆue
.
Àn
 + 1;

751 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
 + 1 + 
Àn
 + 1);

752 i‡(
b
 =
NULL
) {

753  
NGX_ERROR
;

756 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

757 i‡(
˛
 =
NULL
) {

758  
NGX_ERROR
;

761 
˛
->
buf
 = 
b
;

763 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%ui:CONTENT_LENGTH%Z%V%Z",

764 
Àn
, &
c⁄ã¡_Àngth
);

766 i‡(
∑øms
->
Àngths
) {

767 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

769 
e
.
ù
 = 
∑øms
->
vÆues
->
ñts
;

770 
e
.
pos
 = 
b
->
œ°
;

771 
e
.
ªque°
 = 
r
;

772 
e
.
Êushed
 = 1;

774 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

776 *(
uöçå_t
 *Ë
À
.
ù
) {

778 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

779 
	`lcode
(&
À
);

781 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

782 
skù_em±y
 = 
	`lcode
(&
À
);

784 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

785 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

787 
À
.
ù
 +(
uöçå_t
);

789 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

790 
e
.
skù
 = 1;

792 *(
uöçå_t
 *Ë
e
.
ù
) {

793 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

794 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

796 
e
.
ù
 +(
uöçå_t
);

798 
e
.
skù
 = 0;

803 #i‡(
NGX_DEBUG
)

804 
key
 = 
e
.
pos
;

806 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

807 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

809 #i‡(
NGX_DEBUG
)

810 
vÆ
 = 
e
.
pos
;

812 *(
uöçå_t
 *Ë
e
.
ù
) {

813 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

814 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

816 *
e
.
pos
++ = '\0';

817 
e
.
ù
 +(
uöçå_t
);

819 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

820 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

823 
b
->
œ°
 = 
e
.
pos
;

826 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

828 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

829 
hódî
 = 
∑π
->
ñts
;

831 
i
 = 0; ; i++) {

833 i‡(
i
 >
∑π
->
√…s
) {

834 i‡(
∑π
->
√xt
 =
NULL
) {

838 
∑π
 =Ö¨t->
√xt
;

839 
hódî
 = 
∑π
->
ñts
;

840 
i
 = 0;

843 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

844 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

845 
√xt
;

849 
key
 = 
b
->
œ°
;

850 
b
->
œ°
 = 
	`ngx_˝ymem
(
key
, "HTTP_", ("HTTP_") - 1);

852 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

853 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

855 i‡(
ch
 >= 'a' && ch <= 'z') {

856 
ch
 &= ~0x20;

858 } i‡(
ch
 == '-') {

859 
ch
 = '_';

862 *
b
->
œ°
++ = 
ch
;

865 *
b
->
œ°
++ = (
u_ch¨
) 0;

867 
vÆ
 = 
b
->
œ°
;

868 
b
->
œ°
 = 
	`ngx_c›y
(
vÆ
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

869 *
b
->
œ°
++ = (
u_ch¨
) 0;

871 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

872 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

874 
√xt
:

880 *
b
->
œ°
++ = (
u_ch¨
) ',';

882 i‡(
r
->
ªque°_body_no_buf„rög
) {

883 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

885 } i‡(
scf
->
up°ªam
.
∑ss_ªque°_body
) {

886 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

887 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

889 
body
) {

890 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

891 i‡(
b
 =
NULL
) {

892  
NGX_ERROR
;

895 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

897 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

898 i‡(
˛
->
√xt
 =
NULL
) {

899  
NGX_ERROR
;

902 
˛
 = cl->
√xt
;

903 
˛
->
buf
 = 
b
;

905 
body
 = body->
√xt
;

909 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

912 
˛
->
√xt
 = 
NULL
;

914  
NGX_OK
;

915 
	}
}

918 
ngx_öt_t


919 
	$ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

921 
ngx_hâp_°©us_t
 *
°©us
;

923 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

925 i‡(
°©us
 =
NULL
) {

926  
NGX_OK
;

929 
°©us
->
code
 = 0;

930 
°©us
->
cou¡
 = 0;

931 
°©us
->
°¨t
 = 
NULL
;

932 
°©us
->
íd
 = 
NULL
;

934 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

935 
r
->
°©e
 = 0;

937  
NGX_OK
;

938 
	}
}

941 
ngx_öt_t


942 
	$ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

944 
size_t
 
Àn
;

945 
ngx_öt_t
 
rc
;

946 
ngx_hâp_°©us_t
 *
°©us
;

947 
ngx_hâp_up°ªam_t
 *
u
;

949 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

951 i‡(
°©us
 =
NULL
) {

952  
NGX_ERROR
;

955 
u
 = 
r
->
up°ªam
;

957 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

959 i‡(
rc
 =
NGX_AGAIN
) {

960  
rc
;

963 i‡(
rc
 =
NGX_ERROR
) {

964 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

965  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

968 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

969 
u
->
°©e
->
°©us
 = sètus->
code
;

972 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

974 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

975 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

977 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

978 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

979  
NGX_ERROR
;

982 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

984 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

986 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

988 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

990  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

991 
	}
}

994 
ngx_öt_t


995 
	$ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

997 
ngx_°r_t
 *
°©us_löe
;

998 
ngx_öt_t
 
rc
, 
°©us
;

999 
ngx_èbÀ_ñt_t
 *
h
;

1000 
ngx_hâp_up°ªam_t
 *
u
;

1001 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1002 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1004 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1008 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1010 i‡(
rc
 =
NGX_OK
) {

1014 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1015 i‡(
h
 =
NULL
) {

1016  
NGX_ERROR
;

1019 
h
->
hash
 = 
r
->
hódî_hash
;

1021 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1022 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1024 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1025 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1026 + 
h
->
key
.
Àn
);

1027 i‡(
h
->
key
.
d©a
 =
NULL
) {

1028  
NGX_ERROR
;

1031 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1032 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1034 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1035 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1036 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1037 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1039 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1040 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1043 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1046 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1047 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1049 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1050  
NGX_ERROR
;

1053 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1054 "hâ∞scgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

1059 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1063 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1066 
u
 = 
r
->
up°ªam
;

1068 i‡(
u
->
hódîs_ö
.
°©us_n
) {

1069 
d⁄e
;

1072 i‡(
u
->
hódîs_ö
.
°©us
) {

1073 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1075 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1076 i‡(
°©us
 =
NGX_ERROR
) {

1077 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1079 
°©us_löe
);

1080  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1083 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1084 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1086 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1087 
u
->
hódîs_ö
.
°©us_n
 = 302;

1088 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1092 
u
->
hódîs_ö
.
°©us_n
 = 200;

1093 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1096 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1097 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1100 
d⁄e
:

1102 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS


1103 && 
r
->
hódîs_ö
.
upgøde
)

1105 
u
->
upgøde
 = 1;

1108  
NGX_OK
;

1111 i‡(
rc
 =
NGX_AGAIN
) {

1112  
NGX_AGAIN
;

1117 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1120  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1122 
	}
}

1126 
	$ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1128 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1132 
	}
}

1136 
	$ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1138 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1142 
	}
}

1146 
	$ngx_hâp_scgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1148 
ngx_hâp_scgi_maö_c⁄f_t
 *
c⁄f
;

1150 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_scgi_maö_c⁄f_t
));

1151 i‡(
c⁄f
 =
NULL
) {

1152  
NULL
;

1155 #i‡(
NGX_HTTP_CACHE
)

1156 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
ˇches
, 
cf
->
poﬁ
, 4,

1157 (
ngx_hâp_fûe_ˇche_t
 *))

1158 !
NGX_OK
)

1160  
NULL
;

1164  
c⁄f
;

1165 
	}
}

1169 
	$ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1171 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
;

1173 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_scgi_loc_c⁄f_t
));

1174 i‡(
c⁄f
 =
NULL
) {

1175  
NULL
;

1178 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1179 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1180 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

1181 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1182 
c⁄f
->
up°ªam
.
ªque°_buf„rög
 = 
NGX_CONF_UNSET
;

1183 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1184 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 
NGX_CONF_UNSET
;

1186 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

1188 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1189 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1190 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1191 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1193 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1194 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1195 
c⁄f
->
up°ªam
.
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

1197 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1198 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1199 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1201 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1202 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1204 #i‡(
NGX_HTTP_CACHE
)

1205 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET
;

1206 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1207 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1208 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1209 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1210 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1211 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1212 
c⁄f
->
up°ªam
.
ˇche_lock_age
 = 
NGX_CONF_UNSET_MSEC
;

1213 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

1216 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1217 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1219 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1222 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1224 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1226 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "scgi");

1228  
c⁄f
;

1229 
	}
}

1233 
	$ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1235 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1236 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1238 
size_t
 
size
;

1239 
ngx_öt_t
 
rc
;

1240 
ngx_hash_öô_t
 
hash
;

1241 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1243 #i‡(
NGX_HTTP_CACHE
)

1245 i‡(
c⁄f
->
up°ªam
.
°‹e
 > 0) {

1246 
c⁄f
->
up°ªam
.
ˇche
 = 0;

1249 i‡(
c⁄f
->
up°ªam
.
ˇche
 > 0) {

1250 
c⁄f
->
up°ªam
.
°‹e
 = 0;

1255 i‡(
c⁄f
->
up°ªam
.
°‹e
 =
NGX_CONF_UNSET
) {

1256 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1258 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1259 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1262 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1263 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1265 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

1266 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

1268 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1269 
¥ev
->
up°ªam
.
buf„rög
, 1);

1271 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ªque°_buf„rög
,

1272 
¥ev
->
up°ªam
.
ªque°_buf„rög
, 1);

1274 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1275 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1277 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
f‹˚_ønges
,

1278 
¥ev
->
up°ªam
.
f‹˚_ønges
, 0);

1280 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

1281 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

1283 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1284 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1286 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1287 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1289 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1290 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1292 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

1293 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

1295 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1296 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1298 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1299 
¥ev
->
up°ªam
.
buf„r_size
,

1300 (
size_t
Ë
ngx_∑gesize
);

1302 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
limô_øã
,

1303 
¥ev
->
up°ªam
.
limô_øã
, 0);

1306 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1307 8, 
ngx_∑gesize
);

1309 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1310 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1312  
NGX_CONF_ERROR
;

1316 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1317 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1318 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1322 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1323 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1324 
NGX_CONF_UNSET_SIZE
);

1326 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1327 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1329 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1330 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1333 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1334 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1339  
NGX_CONF_ERROR
;

1342 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1343 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1345 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1349  
NGX_CONF_ERROR
;

1353 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1354 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1355 
NGX_CONF_UNSET_SIZE
);

1357 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1358 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1360 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1361 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1364 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1365 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1370  
NGX_CONF_ERROR
;

1374 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1375 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1376 
NGX_CONF_UNSET_SIZE
);

1378 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1379 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1381 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1382 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1385 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1386 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

1388 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1394  
NGX_CONF_ERROR
;

1398 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1399 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1400 
NGX_CONF_BITMASK_SET
);

1403 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1404 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1405 (
NGX_CONF_BITMASK_SET


1406 |
NGX_HTTP_UPSTREAM_FT_ERROR


1407 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1409 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1410 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1411 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1414 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1415 
¥ev
->
up°ªam
.
ãmp_∑th
,

1416 &
ngx_hâp_scgi_ãmp_∑th
)

1417 !
NGX_OK
)

1419  
NGX_CONF_ERROR
;

1422 #i‡(
NGX_HTTP_CACHE
)

1424 i‡(
c⁄f
->
up°ªam
.
ˇche
 =
NGX_CONF_UNSET
) {

1425 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1426 
¥ev
->
up°ªam
.
ˇche
, 0);

1428 
c⁄f
->
up°ªam
.
ˇche_z⁄e
 = 
¥ev
->upstream.cache_zone;

1429 
c⁄f
->
up°ªam
.
ˇche_vÆue
 = 
¥ev
->upstream.cache_value;

1432 i‡(
c⁄f
->
up°ªam
.
ˇche_z⁄e
 && c⁄f->up°ªam.ˇche_z⁄e->
d©a
 =
NULL
) {

1433 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1435 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche_z⁄e
;

1437 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1439 &
shm_z⁄e
->
shm
.
«me
);

1441  
NGX_CONF_ERROR
;

1444 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1445 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1447 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1448 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1449 (
NGX_CONF_BITMASK_SET


1450 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1452 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1453 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1454 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1457 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1458 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1461 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1462 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1465 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1467 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1468 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1470 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1471 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1473 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1474 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1476 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1477 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1480 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1485 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1486 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1488 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1489 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1491 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_age
,

1492 
¥ev
->
up°ªam
.
ˇche_lock_age
, 5000);

1494 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

1495 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

1499 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1500 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1501 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1502 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1504 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1505 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1507 
hash
.
max_size
 = 512;

1508 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1509 
hash
.
«me
 = "scgi_hide_headers_hash";

1511 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1512 &
¥ev
->
up°ªam
, 
ngx_hâp_scgi_hide_hódîs
, &
hash
)

1513 !
NGX_OK
)

1515  
NGX_CONF_ERROR
;

1518 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1520 i‡(
˛cf
->
n⁄ame


1521 && 
c⁄f
->
up°ªam
.up°ªam =
NULL
 && c⁄f->
scgi_Àngths
 == NULL)

1523 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1524 
c⁄f
->
scgi_Àngths
 = 
¥ev
->scgi_lengths;

1525 
c⁄f
->
scgi_vÆues
 = 
¥ev
->scgi_values;

1528 i‡(
˛cf
->
lmt_ex˝t
 && clcf->
h™dÀr
 =
NULL


1529 && (
c⁄f
->
up°ªam
.up°ªam || c⁄f->
scgi_Àngths
))

1531 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1534 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1535 
c⁄f
->
∑øms
 = 
¥ev
->params;

1536 #i‡(
NGX_HTTP_CACHE
)

1537 
c⁄f
->
∑øms_ˇche
 = 
¥ev
->params_cache;

1539 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1542 
rc
 = 
	`ngx_hâp_scgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms
, 
NULL
);

1543 i‡(
rc
 !
NGX_OK
) {

1544  
NGX_CONF_ERROR
;

1547 #i‡(
NGX_HTTP_CACHE
)

1549 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1550 
rc
 = 
	`ngx_hâp_scgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms_ˇche
,

1551 
ngx_hâp_scgi_ˇche_hódîs
);

1552 i‡(
rc
 !
NGX_OK
) {

1553  
NGX_CONF_ERROR
;

1559  
NGX_CONF_OK
;

1560 
	}
}

1563 
ngx_öt_t


1564 
	$ngx_hâp_scgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,

1565 
ngx_hâp_scgi_∑øms_t
 *
∑øms
, 
ngx_keyvÆ_t
 *
deÁu…_∑øms
)

1567 
u_ch¨
 *
p
;

1568 
size_t
 
size
;

1569 
uöçå_t
 *
code
;

1570 
ngx_uöt_t
 
i
, 
n§c
;

1571 
ngx_¨øy_t
 
hódîs_«mes
, 
∑øms_mîged
;

1572 
ngx_keyvÆ_t
 *
h
;

1573 
ngx_hash_key_t
 *
hk
;

1574 
ngx_hash_öô_t
 
hash
;

1575 
ngx_hâp_up°ªam_∑øm_t
 *
§c
, *
s
;

1576 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1577 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1579 i‡(
∑øms
->
hash
.
buckës
) {

1580  
NGX_OK
;

1583 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
 && 
deÁu…_∑øms
 == NULL) {

1584 
∑øms
->
hash
.
buckës
 = (*) 1;

1585  
NGX_OK
;

1588 
∑øms
->
Àngths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1589 i‡(
∑øms
->
Àngths
 =
NULL
) {

1590  
NGX_ERROR
;

1593 
∑øms
->
vÆues
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1594 i‡(
∑øms
->
vÆues
 =
NULL
) {

1595  
NGX_ERROR
;

1598 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1599 !
NGX_OK
)

1601  
NGX_ERROR
;

1604 i‡(
c⁄f
->
∑øms_sour˚
) {

1605 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1606 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1609 
§c
 = 
NULL
;

1610 
n§c
 = 0;

1613 i‡(
deÁu…_∑øms
) {

1614 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1615 (
ngx_hâp_up°ªam_∑øm_t
))

1616 !
NGX_OK
)

1618  
NGX_ERROR
;

1621 
i
 = 0; i < 
n§c
; i++) {

1623 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1624 i‡(
s
 =
NULL
) {

1625  
NGX_ERROR
;

1628 *
s
 = 
§c
[
i
];

1631 
h
 = 
deÁu…_∑øms
;

1633 
h
->
key
.
Àn
) {

1635 
§c
 = 
∑øms_mîged
.
ñts
;

1636 
n§c
 = 
∑øms_mîged
.
√…s
;

1638 
i
 = 0; i < 
n§c
; i++) {

1639 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1640 
√xt
;

1644 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1645 i‡(
s
 =
NULL
) {

1646  
NGX_ERROR
;

1649 
s
->
key
 = 
h
->key;

1650 
s
->
vÆue
 = 
h
->value;

1651 
s
->
skù_em±y
 = 1;

1653 
√xt
:

1655 
h
++;

1658 
§c
 = 
∑øms_mîged
.
ñts
;

1659 
n§c
 = 
∑øms_mîged
.
√…s
;

1662 
i
 = 0; i < 
n§c
; i++) {

1664 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1665 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1667 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1668 i‡(
hk
 =
NULL
) {

1669  
NGX_ERROR
;

1672 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1673 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1674 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1675 
hk
->
vÆue
 = (*) 1;

1677 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1682 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

1683 (
ngx_hâp_s¸ùt_c›y_code_t
));

1684 i‡(
c›y
 =
NULL
) {

1685  
NGX_ERROR
;

1688 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1689 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1691 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

1692 (
ngx_hâp_s¸ùt_c›y_code_t
));

1693 i‡(
c›y
 =
NULL
) {

1694  
NGX_ERROR
;

1697 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1698 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

1701 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1702 + 
§c
[
i
].
key
.
Àn
 + 1 + (
uöçå_t
) - 1)

1703 & ~((
uöçå_t
) - 1);

1705 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, 
size
);

1706 i‡(
c›y
 =
NULL
) {

1707  
NGX_ERROR
;

1710 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1711 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1713 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1714 (Ë
	`ngx_˝y°∫
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
 + 1);

1717 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1719 
sc
.
cf
 = cf;

1720 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1721 
sc
.
Êushes
 = &
∑øms
->flushes;

1722 
sc
.
Àngths
 = &
∑øms
->lengths;

1723 
sc
.
vÆues
 = &
∑øms
->values;

1725 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1726  
NGX_ERROR
;

1729 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

1730 i‡(
code
 =
NULL
) {

1731  
NGX_ERROR
;

1734 *
code
 = (
uöçå_t
Ë
NULL
;

1737 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, (
uöçå_t
));

1738 i‡(
code
 =
NULL
) {

1739  
NGX_ERROR
;

1742 *
code
 = (
uöçå_t
Ë
NULL
;

1745 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

1746 i‡(
code
 =
NULL
) {

1747  
NGX_ERROR
;

1750 *
code
 = (
uöçå_t
Ë
NULL
;

1752 
∑øms
->
numbî
 = 
hódîs_«mes
.
√…s
;

1754 
hash
.hash = &
∑øms
->hash;

1755 
hash
.
key
 = 
ngx_hash_key_lc
;

1756 
hash
.
max_size
 = 512;

1757 
hash
.
buckë_size
 = 64;

1758 
hash
.
«me
 = "scgi_params_hash";

1759 
hash
.
poﬁ
 = 
cf
->pool;

1760 
hash
.
ãmp_poﬁ
 = 
NULL
;

1762  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1763 
	}
}

1767 
	$ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1769 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1771 
ngx_uæ_t
 
u
;

1772 
ngx_°r_t
 *
vÆue
, *
uæ
;

1773 
ngx_uöt_t
 
n
;

1774 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1775 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1777 i‡(
scf
->
up°ªam
.up°ªam || scf->
scgi_Àngths
) {

1781 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1782 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1784 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1786 
uæ
 = &
vÆue
[1];

1788 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1790 i‡(
n
) {

1792 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1794 
sc
.
cf
 = cf;

1795 
sc
.
sour˚
 = 
uæ
;

1796 
sc
.
Àngths
 = &
scf
->
scgi_Àngths
;

1797 
sc
.
vÆues
 = &
scf
->
scgi_vÆues
;

1798 
sc
.
v¨übÀs
 = 
n
;

1799 
sc
.
com∂ëe_Àngths
 = 1;

1800 
sc
.
com∂ëe_vÆues
 = 1;

1802 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1803  
NGX_CONF_ERROR
;

1806  
NGX_CONF_OK
;

1809 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1811 
u
.
uæ
 = 
vÆue
[1];

1812 
u
.
no_ªsﬁve
 = 1;

1814 
scf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1815 i‡(
scf
->
up°ªam
.up°ªam =
NULL
) {

1816  
NGX_CONF_ERROR
;

1819 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

1820 
˛cf
->
auto_ªdúe˘
 = 1;

1823  
NGX_CONF_OK
;

1824 
	}
}

1828 
	$ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1830 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1832 
ngx_°r_t
 *
vÆue
;

1833 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1835 i‡(
scf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
) {

1839 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1841 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1842 
scf
->
up°ªam
.
°‹e
 = 0;

1843  
NGX_CONF_OK
;

1846 #i‡(
NGX_HTTP_CACHE
)

1847 i‡(
scf
->
up°ªam
.
ˇche
 > 0) {

1852 
scf
->
up°ªam
.
°‹e
 = 1;

1854 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1855  
NGX_CONF_OK
;

1859 
vÆue
[1].
Àn
++;

1861 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1863 
sc
.
cf
 = cf;

1864 
sc
.
sour˚
 = &
vÆue
[1];

1865 
sc
.
Àngths
 = &
scf
->
up°ªam
.
°‹e_Àngths
;

1866 
sc
.
vÆues
 = &
scf
->
up°ªam
.
°‹e_vÆues
;

1867 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1868 
sc
.
com∂ëe_Àngths
 = 1;

1869 
sc
.
com∂ëe_vÆues
 = 1;

1871 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1872  
NGX_CONF_ERROR
;

1875  
NGX_CONF_OK
;

1876 
	}
}

1879 #i‡(
NGX_HTTP_CACHE
)

1882 
	$ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1884 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1886 
ngx_°r_t
 *
vÆue
;

1887 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1888 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1890 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1892 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET
) {

1896 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1897 
scf
->
up°ªam
.
ˇche
 = 0;

1898  
NGX_CONF_OK
;

1901 i‡(
scf
->
up°ªam
.
°‹e
 > 0) {

1905 
scf
->
up°ªam
.
ˇche
 = 1;

1907 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1909 
ccv
.
cf
 = cf;

1910 
ccv
.
vÆue
 = &value[1];

1911 
ccv
.
com∂ex_vÆue
 = &
cv
;

1913 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1914  
NGX_CONF_ERROR
;

1917 i‡(
cv
.
Àngths
 !
NULL
) {

1919 
scf
->
up°ªam
.
ˇche_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1920 (
ngx_hâp_com∂ex_vÆue_t
));

1921 i‡(
scf
->
up°ªam
.
ˇche_vÆue
 =
NULL
) {

1922  
NGX_CONF_ERROR
;

1925 *
scf
->
up°ªam
.
ˇche_vÆue
 = 
cv
;

1927  
NGX_CONF_OK
;

1930 
scf
->
up°ªam
.
ˇche_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1931 &
ngx_hâp_scgi_moduÀ
);

1932 i‡(
scf
->
up°ªam
.
ˇche_z⁄e
 =
NULL
) {

1933  
NGX_CONF_ERROR
;

1936  
NGX_CONF_OK
;

1937 
	}
}

1941 
	$ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1943 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1945 
ngx_°r_t
 *
vÆue
;

1946 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1948 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1950 i‡(
scf
->
ˇche_key
.
vÆue
.
d©a
) {

1954 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1956 
ccv
.
cf
 = cf;

1957 
ccv
.
vÆue
 = &value[1];

1958 
ccv
.
com∂ex_vÆue
 = &
scf
->
ˇche_key
;

1960 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1961  
NGX_CONF_ERROR
;

1964  
NGX_CONF_OK
;

1965 
	}
}

	@src/http/modules/ngx_http_secure_link_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

15 
ngx_hâp_com∂ex_vÆue_t
 *
	mv¨übÀ
;

16 
ngx_hâp_com∂ex_vÆue_t
 *
	mmd5
;

17 
ngx_°r_t
 
	m£¸ë
;

18 } 
	tngx_hâp_£cuª_lök_c⁄f_t
;

22 
ngx_°r_t
 
	mexpúes
;

23 } 
	tngx_hâp_£cuª_lök_˘x_t
;

26 
ngx_öt_t
 
ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

28 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 *
ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 
ngx_öt_t
 
ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

37 
ngx_comm™d_t
 
	gngx_hâp_£cuª_lök_comm™ds
[] = {

39 { 
ngx_°rög
("secure_link"),

40 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

41 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

42 
NGX_HTTP_LOC_CONF_OFFSET
,

43 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
v¨übÀ
),

44 
NULL
 },

46 { 
ngx_°rög
("secure_link_md5"),

47 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

48 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

49 
NGX_HTTP_LOC_CONF_OFFSET
,

50 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
md5
),

51 
NULL
 },

53 { 
ngx_°rög
("secure_link_secret"),

54 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

55 
ngx_c⁄f_£t_°r_¶Ÿ
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
£¸ë
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ_˘x
 = {

65 
ngx_hâp_£cuª_lök_add_v¨übÀs
,

66 
NULL
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_£cuª_lök_¸óã_c⁄f
,

75 
ngx_hâp_£cuª_lök_mîge_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_£cuª_lök_moduÀ_˘x
,

82 
ngx_hâp_£cuª_lök_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_«me
 = 
ngx_°rög
("secure_link");

96 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_expúes_«me
 =

97 
ngx_°rög
("secure_link_expires");

100 
ngx_öt_t


101 
	$ngx_hâp_£cuª_lök_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

104 
u_ch¨
 *
p
, *
œ°
;

105 
ngx_°r_t
 
vÆ
, 
hash
;

106 
time_t
 
expúes
;

107 
ngx_md5_t
 
md5
;

108 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

109 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

110 
u_ch¨
 
hash_buf
[16], 
md5_buf
[16];

112 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

114 i‡(
c⁄f
->
£¸ë
.
d©a
) {

115  
	`ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
r
, 
c⁄f
, 
v
, 
d©a
);

118 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 || c⁄f->
md5
 == NULL) {

119 
nŸ_found
;

122 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
v¨übÀ
, &
vÆ
Ë!
NGX_OK
) {

123  
NGX_ERROR
;

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

127 "£cuªÜök: \"%V\"", &
vÆ
);

129 
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

131 
p
 = 
	`ngx_°æchr
(
vÆ
.
d©a
, 
œ°
, ',');

132 
expúes
 = 0;

134 i‡(
p
) {

135 
vÆ
.
Àn
 = 
p
++ - vÆ.
d©a
;

137 
expúes
 = 
	`ngx_©Ÿm
(
p
, 
œ°
 -Ö);

138 i‡(
expúes
 <= 0) {

139 
nŸ_found
;

142 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_£cuª_lök_˘x_t
));

143 i‡(
˘x
 =
NULL
) {

144  
NGX_ERROR
;

147 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_£cuª_lök_moduÀ
);

149 
˘x
->
expúes
.
Àn
 = 
œ°
 - 
p
;

150 
˘x
->
expúes
.
d©a
 = 
p
;

153 i‡(
vÆ
.
Àn
 > 24) {

154 
nŸ_found
;

157 
hash
.
Àn
 = 16;

158 
hash
.
d©a
 = 
hash_buf
;

160 i‡(
	`ngx_decode_ba£64uæ
(&
hash
, &
vÆ
Ë!
NGX_OK
) {

161 
nŸ_found
;

164 i‡(
hash
.
Àn
 != 16) {

165 
nŸ_found
;

168 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
md5
, &
vÆ
Ë!
NGX_OK
) {

169  
NGX_ERROR
;

172 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

173 "£cuªÜök md5: \"%V\"", &
vÆ
);

175 
	`ngx_md5_öô
(&
md5
);

176 
	`ngx_md5_upd©e
(&
md5
, 
vÆ
.
d©a
, vÆ.
Àn
);

177 
	`ngx_md5_föÆ
(
md5_buf
, &
md5
);

179 i‡(
	`ngx_memcmp
(
hash_buf
, 
md5_buf
, 16) != 0) {

180 
nŸ_found
;

183 
v
->
d©a
 = (
u_ch¨
 *Ë((
expúes
 &&Éxpúe†< 
	`ngx_time
()) ? "0" : "1");

184 
v
->
Àn
 = 1;

185 
v
->
vÆid
 = 1;

186 
v
->
no_ˇchóbÀ
 = 0;

187 
v
->
nŸ_found
 = 0;

189  
NGX_OK
;

191 
nŸ_found
:

193 
v
->
nŸ_found
 = 1;

195  
NGX_OK
;

196 
	}
}

199 
ngx_öt_t


200 
	$ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

201 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

202 
uöçå_t
 
d©a
)

204 
u_ch¨
 *
p
, *
°¨t
, *
íd
, *
œ°
;

205 
size_t
 
Àn
;

206 
ngx_öt_t
 
n
;

207 
ngx_uöt_t
 
i
;

208 
ngx_md5_t
 
md5
;

209 
u_ch¨
 
hash
[16];

211 
p
 = &
r
->
u≈¨£d_uri
.
d©a
[1];

212 
œ°
 = 
r
->
u≈¨£d_uri
.
d©a
 +Ñ->u≈¨£d_uri.
Àn
;

214 
p
 < 
œ°
) {

215 i‡(*
p
++ == '/') {

216 
°¨t
 = 
p
;

217 
md5_°¨t
;

221 
nŸ_found
;

223 
md5_°¨t
:

225 
p
 < 
œ°
) {

226 i‡(*
p
++ == '/') {

227 
íd
 = 
p
 - 1;

228 
uæ_°¨t
;

232 
nŸ_found
;

234 
uæ_°¨t
:

236 
Àn
 = 
œ°
 - 
p
;

238 i‡(
íd
 - 
°¨t
 !32 || 
Àn
 == 0) {

239 
nŸ_found
;

242 
	`ngx_md5_öô
(&
md5
);

243 
	`ngx_md5_upd©e
(&
md5
, 
p
, 
Àn
);

244 
	`ngx_md5_upd©e
(&
md5
, 
c⁄f
->
£¸ë
.
d©a
, c⁄f->£¸ë.
Àn
);

245 
	`ngx_md5_föÆ
(
hash
, &
md5
);

247 
i
 = 0; i < 16; i++) {

248 
n
 = 
	`ngx_hextoi
(&
°¨t
[2 * 
i
], 2);

249 i‡(
n
 =
NGX_ERROR
 ||Ç !
hash
[
i
]) {

250 
nŸ_found
;

254 
v
->
Àn
 =Üen;

255 
v
->
vÆid
 = 1;

256 
v
->
no_ˇchóbÀ
 = 0;

257 
v
->
nŸ_found
 = 0;

258 
v
->
d©a
 = 
p
;

260  
NGX_OK
;

262 
nŸ_found
:

264 
v
->
nŸ_found
 = 1;

266  
NGX_OK
;

267 
	}
}

270 
ngx_öt_t


271 
	$ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

272 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

274 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

276 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

278 i‡(
˘x
) {

279 
v
->
Àn
 = 
˘x
->
expúes
.len;

280 
v
->
vÆid
 = 1;

281 
v
->
no_ˇchóbÀ
 = 0;

282 
v
->
nŸ_found
 = 0;

283 
v
->
d©a
 = 
˘x
->
expúes
.data;

286 
v
->
nŸ_found
 = 1;

289  
NGX_OK
;

290 
	}
}

294 
	$ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

296 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

298 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_£cuª_lök_c⁄f_t
));

299 i‡(
c⁄f
 =
NULL
) {

300  
NULL
;

311  
c⁄f
;

312 
	}
}

316 
	$ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

318 
ngx_hâp_£cuª_lök_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

319 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
 = 
chûd
;

321 i‡(
c⁄f
->
£¸ë
.
d©a
) {

322 i‡(
c⁄f
->
v¨übÀ
 || c⁄f->
md5
) {

323 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

326  
NGX_CONF_ERROR
;

329  
NGX_CONF_OK
;

332 i‡(
c⁄f
->
v¨übÀ
 =
NULL
) {

333 
c⁄f
->
v¨übÀ
 = 
¥ev
->variable;

336 i‡(
c⁄f
->
md5
 =
NULL
) {

337 
c⁄f
->
md5
 = 
¥ev
->md5;

340 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 && c⁄f->
md5
 == NULL) {

341 
c⁄f
->
£¸ë
 = 
¥ev
->secret;

344  
NGX_CONF_OK
;

345 
	}
}

348 
ngx_öt_t


349 
	$ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

351 
ngx_hâp_v¨übÀ_t
 *
v¨
;

353 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_«me
, 0);

354 i‡(
v¨
 =
NULL
) {

355  
NGX_ERROR
;

358 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_v¨übÀ
;

360 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_expúes_«me
, 0);

361 i‡(
v¨
 =
NULL
) {

362  
NGX_ERROR
;

365 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
;

367  
NGX_OK
;

368 
	}
}

	@src/http/modules/ngx_http_split_clients_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
uöt32_t
 
	m≥r˚¡
;

15 
ngx_hâp_v¨übÀ_vÆue_t
 
	mvÆue
;

16 } 
	tngx_hâp_•lô_˛õ¡s_∑π_t
;

20 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

21 
ngx_¨øy_t
 
	m∑πs
;

22 } 
	tngx_hâp_•lô_˛õ¡s_˘x_t
;

25 *
ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 *
ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

28 *
c⁄f
);

30 
ngx_comm™d_t
 
	gngx_hâp_•lô_˛õ¡s_comm™ds
[] = {

32 { 
ngx_°rög
("split_clients"),

33 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

34 
ngx_c⁄f_•lô_˛õ¡s_block
,

35 
NGX_HTTP_MAIN_CONF_OFFSET
,

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ_˘x
 = {

44 
NULL
,

45 
NULL
,

47 
NULL
,

48 
NULL
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL


58 
ngx_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_hâp_•lô_˛õ¡s_moduÀ_˘x
,

61 
ngx_hâp_•lô_˛õ¡s_comm™ds
,

62 
NGX_HTTP_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_hâp_•lô_˛õ¡s_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

78 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
 = (ngx_hâp_•lô_˛õ¡s_˘x_à*Ë
d©a
;

80 
uöt32_t
 
hash
;

81 
ngx_°r_t
 
vÆ
;

82 
ngx_uöt_t
 
i
;

83 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

85 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

87 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

88  
NGX_OK
;

91 
hash
 = 
	`ngx_murmur_hash2
(
vÆ
.
d©a
, vÆ.
Àn
);

93 
∑π
 = 
˘x
->
∑πs
.
ñts
;

95 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

98 "hâ∞•lô: %uD %uD", 
hash
, 
∑π
[
i
].
≥r˚¡
);

100 i‡(
hash
 < 
∑π
[
i
].
≥r˚¡
 ||Öart[i].percent == 0) {

101 *
v
 = 
∑π
[
i
].
vÆue
;

102  
NGX_OK
;

106  
NGX_OK
;

107 
	}
}

111 
	$ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

113 *
rv
;

114 
uöt32_t
 
sum
, 
œ°
;

115 
ngx_°r_t
 *
vÆue
, 
«me
;

116 
ngx_uöt_t
 
i
;

117 
ngx_c⁄f_t
 
ßve
;

118 
ngx_hâp_v¨übÀ_t
 *
v¨
;

119 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

120 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

121 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

123 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•lô_˛õ¡s_˘x_t
));

124 i‡(
˘x
 =
NULL
) {

125  
NGX_CONF_ERROR
;

128 
vÆue
 = 
cf
->
¨gs
->
ñts
;

130 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

132 
ccv
.
cf
 = cf;

133 
ccv
.
vÆue
 = &value[1];

134 
ccv
.
com∂ex_vÆue
 = &
˘x
->
vÆue
;

136 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

137  
NGX_CONF_ERROR
;

140 
«me
 = 
vÆue
[2];

142 i‡(
«me
.
d©a
[0] != '$') {

143 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

144 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

145  
NGX_CONF_ERROR
;

148 
«me
.
Àn
--;

149 
«me
.
d©a
++;

151 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

152 i‡(
v¨
 =
NULL
) {

153  
NGX_CONF_ERROR
;

156 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s_v¨übÀ
;

157 
v¨
->
d©a
 = (
uöçå_t
Ë
˘x
;

159 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑πs
, 
cf
->
poﬁ
, 2,

160 (
ngx_hâp_•lô_˛õ¡s_∑π_t
))

161 !
NGX_OK
)

163  
NGX_CONF_ERROR
;

166 
ßve
 = *
cf
;

167 
cf
->
˘x
 = ctx;

168 
cf
->
h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s
;

169 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

171 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

173 *
cf
 = 
ßve
;

175 i‡(
rv
 !
NGX_CONF_OK
) {

176  
rv
;

179 
sum
 = 0;

180 
œ°
 = 0;

181 
∑π
 = 
˘x
->
∑πs
.
ñts
;

183 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

184 
sum
 = 
∑π
[
i
].
≥r˚¡
 ? sum +Öart[i].percent : 10000;

185 i‡(
sum
 > 10000) {

186 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

188  
NGX_CONF_ERROR
;

191 i‡(
∑π
[
i
].
≥r˚¡
) {

192 
œ°
 +
∑π
[
i
].
≥r˚¡
 * (
uöt64_t
) 0xffffffff / 10000;

193 
∑π
[
i
].
≥r˚¡
 = 
œ°
;

197  
rv
;

198 
	}
}

202 
	$ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

204 
ngx_öt_t
 
n
;

205 
ngx_°r_t
 *
vÆue
;

206 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

207 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

209 
˘x
 = 
cf
->ctx;

210 
vÆue
 = 
cf
->
¨gs
->
ñts
;

212 
∑π
 = 
	`ngx_¨øy_push
(&
˘x
->
∑πs
);

213 i‡(
∑π
 =
NULL
) {

214  
NGX_CONF_ERROR
;

217 i‡(
vÆue
[0].
Àn
 =1 && vÆue[0].
d©a
[0] == '*') {

218 
∑π
->
≥r˚¡
 = 0;

221 i‡(
vÆue
[0].
Àn
 =0 || vÆue[0].
d©a
[value[0].len - 1] != '%') {

222 
övÆid
;

225 
n
 = 
	`ngx_©oÂ
(
vÆue
[0].
d©a
, vÆue[0].
Àn
 - 1, 2);

226 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

227 
övÆid
;

230 
∑π
->
≥r˚¡
 = (
uöt32_t
Ë
n
;

233 
∑π
->
vÆue
.
Àn
 = value[1].len;

234 
∑π
->
vÆue
.
vÆid
 = 1;

235 
∑π
->
vÆue
.
no_ˇchóbÀ
 = 0;

236 
∑π
->
vÆue
.
nŸ_found
 = 0;

237 
∑π
->
vÆue
.
d©a
 = value[1].data;

239  
NGX_CONF_OK
;

241 
övÆid
:

243 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

244 "övÆidÖî˚¡ vÆuê\"%V\"", &
vÆue
[0]);

245  
NGX_CONF_ERROR
;

246 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_SSI_ERROR
 1

	)

14 
	#NGX_HTTP_SSI_DATE_LEN
 2048

	)

16 
	#NGX_HTTP_SSI_ADD_PREFIX
 1

	)

17 
	#NGX_HTTP_SSI_ADD_ZERO
 2

	)

21 
ngx_Êag_t
 
	míabÀ
;

22 
ngx_Êag_t
 
	msûít_îr‹s
;

23 
ngx_Êag_t
 
	mign‹e_ªcy˛ed_buf„rs
;

24 
ngx_Êag_t
 
	mœ°_modifõd
;

26 
ngx_hash_t
 
	mty≥s
;

28 
size_t
 
	mmö_fûe_chunk
;

29 
size_t
 
	mvÆue_Àn
;

31 
ngx_¨øy_t
 *
	mty≥s_keys
;

32 } 
	tngx_hâp_ssi_loc_c⁄f_t
;

36 
ngx_°r_t
 
	m«me
;

37 
ngx_uöt_t
 
	mkey
;

38 
ngx_°r_t
 
	mvÆue
;

39 } 
	tngx_hâp_ssi_v¨_t
;

43 
ngx_°r_t
 
	m«me
;

44 
ngx_chaö_t
 *
	mbufs
;

45 
ngx_uöt_t
 
	mcou¡
;

46 } 
	tngx_hâp_ssi_block_t
;

50 
	mssi_°¨t_°©e
 = 0,

51 
	mssi_èg_°©e
,

52 
	mssi_commít0_°©e
,

53 
	mssi_commít1_°©e
,

54 
	mssi_sh¨p_°©e
,

55 
	mssi_¥ecomm™d_°©e
,

56 
	mssi_comm™d_°©e
,

57 
	mssi_¥ï¨am_°©e
,

58 
	mssi_∑øm_°©e
,

59 
	mssi_¥ìquÆ_°©e
,

60 
	mssi_¥evÆue_°©e
,

61 
	mssi_doubÀ_quŸed_vÆue_°©e
,

62 
	mssi_quŸed_vÆue_°©e
,

63 
	mssi_quŸed_symbﬁ_°©e
,

64 
	mssi_po°∑øm_°©e
,

65 
	mssi_commít_íd0_°©e
,

66 
	mssi_commít_íd1_°©e
,

67 
	mssi_îr‹_°©e
,

68 
	mssi_îr‹_íd0_°©e
,

69 
	mssi_îr‹_íd1_°©e


70 } 
	tngx_hâp_ssi_°©e_e
;

73 
ngx_öt_t
 
ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_ssi_˘x_t
 *
˘x
);

75 
ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_ssi_˘x_t
 *
˘x
);

77 
ngx_öt_t
 
ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_ssi_˘x_t
 *
˘x
);

79 
ngx_°r_t
 *
ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

81 
ngx_öt_t
 
ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
);

83 
ngx_öt_t
 
ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_°r_t
 *
∑âîn
,Çgx_°r_à*
°r
);

86 
ngx_öt_t
 
ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

88 
ngx_öt_t
 
ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

89 
ngx_öt_t
 
rc
);

90 
ngx_öt_t
 
ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

91 
ngx_öt_t
 
rc
);

92 
ngx_öt_t
 
ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

94 
ngx_öt_t
 
ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
,

95 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

96 
ngx_öt_t
 
ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
,

97 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

98 
ngx_öt_t
 
ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

100 
ngx_öt_t
 
ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

102 
ngx_öt_t
 
ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

104 
ngx_öt_t
 
ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
,

105 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

106 
ngx_öt_t
 
ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
,

107 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

109 
ngx_öt_t
 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

110 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
);

112 
ngx_öt_t
 
ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

113 *
ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

114 *
ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

115 *
ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

116 *
ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

117 *
∑ª¡
, *
chûd
);

118 
ngx_öt_t
 
ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

121 
ngx_comm™d_t
 
	gngx_hâp_ssi_fûãr_comm™ds
[] = {

123 { 
ngx_°rög
("ssi"),

124 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


125 |
NGX_CONF_FLAG
,

126 
ngx_c⁄f_£t_Êag_¶Ÿ
,

127 
NGX_HTTP_LOC_CONF_OFFSET
,

128 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
íabÀ
),

129 
NULL
 },

131 { 
ngx_°rög
("ssi_silent_errors"),

132 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

133 
ngx_c⁄f_£t_Êag_¶Ÿ
,

134 
NGX_HTTP_LOC_CONF_OFFSET
,

135 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
sûít_îr‹s
),

136 
NULL
 },

138 { 
ngx_°rög
("ssi_ignore_recycled_buffers"),

139 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

140 
ngx_c⁄f_£t_Êag_¶Ÿ
,

141 
NGX_HTTP_LOC_CONF_OFFSET
,

142 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ign‹e_ªcy˛ed_buf„rs
),

143 
NULL
 },

145 { 
ngx_°rög
("ssi_min_file_chunk"),

146 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

147 
ngx_c⁄f_£t_size_¶Ÿ
,

148 
NGX_HTTP_LOC_CONF_OFFSET
,

149 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
mö_fûe_chunk
),

150 
NULL
 },

152 { 
ngx_°rög
("ssi_value_length"),

153 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

154 
ngx_c⁄f_£t_size_¶Ÿ
,

155 
NGX_HTTP_LOC_CONF_OFFSET
,

156 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
vÆue_Àn
),

157 
NULL
 },

159 { 
ngx_°rög
("ssi_types"),

160 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

161 
ngx_hâp_ty≥s_¶Ÿ
,

162 
NGX_HTTP_LOC_CONF_OFFSET
,

163 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ty≥s_keys
),

164 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

166 { 
ngx_°rög
("ssi_last_modified"),

167 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

168 
ngx_c⁄f_£t_Êag_¶Ÿ
,

169 
NGX_HTTP_LOC_CONF_OFFSET
,

170 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
œ°_modifõd
),

171 
NULL
 },

173 
ngx_nuŒ_comm™d


178 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ_˘x
 = {

179 
ngx_hâp_ssi_¥ec⁄figuøti⁄
,

180 
ngx_hâp_ssi_fûãr_öô
,

182 
ngx_hâp_ssi_¸óã_maö_c⁄f
,

183 
ngx_hâp_ssi_öô_maö_c⁄f
,

185 
NULL
,

186 
NULL
,

188 
ngx_hâp_ssi_¸óã_loc_c⁄f
,

189 
ngx_hâp_ssi_mîge_loc_c⁄f


193 
ngx_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ
 = {

194 
NGX_MODULE_V1
,

195 &
ngx_hâp_ssi_fûãr_moduÀ_˘x
,

196 
ngx_hâp_ssi_fûãr_comm™ds
,

197 
NGX_HTTP_MODULE
,

198 
NULL
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NGX_MODULE_V1_PADDING


209 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

210 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

213 
u_ch¨
 
	gngx_hâp_ssi_°rög
[] = "<!--";

215 
ngx_°r_t
 
	gngx_hâp_ssi_n⁄e
 = 
ngx_°rög
("(none)");

216 
ngx_°r_t
 
	gngx_hâp_ssi_timefmt
 = 
ngx_°rög
("%A, %d-%b-%Y %H:%M:%S %Z");

217 
ngx_°r_t
 
	gngx_hâp_ssi_nuŒ_°rög
 = 
ngx_nuŒ_°rög
;

220 
	#NGX_HTTP_SSI_INCLUDE_VIRTUAL
 0

	)

221 
	#NGX_HTTP_SSI_INCLUDE_FILE
 1

	)

222 
	#NGX_HTTP_SSI_INCLUDE_WAIT
 2

	)

223 
	#NGX_HTTP_SSI_INCLUDE_SET
 3

	)

224 
	#NGX_HTTP_SSI_INCLUDE_STUB
 4

	)

226 
	#NGX_HTTP_SSI_ECHO_VAR
 0

	)

227 
	#NGX_HTTP_SSI_ECHO_DEFAULT
 1

	)

228 
	#NGX_HTTP_SSI_ECHO_ENCODING
 2

	)

230 
	#NGX_HTTP_SSI_CONFIG_ERRMSG
 0

	)

231 
	#NGX_HTTP_SSI_CONFIG_TIMEFMT
 1

	)

233 
	#NGX_HTTP_SSI_SET_VAR
 0

	)

234 
	#NGX_HTTP_SSI_SET_VALUE
 1

	)

236 
	#NGX_HTTP_SSI_IF_EXPR
 0

	)

238 
	#NGX_HTTP_SSI_BLOCK_NAME
 0

	)

241 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_ö˛ude_∑øms
[] = {

242 { 
ngx_°rög
("vútuÆ"), 
NGX_HTTP_SSI_INCLUDE_VIRTUAL
, 0, 0 },

243 { 
ngx_°rög
("fûe"), 
NGX_HTTP_SSI_INCLUDE_FILE
, 0, 0 },

244 { 
ngx_°rög
("waô"), 
NGX_HTTP_SSI_INCLUDE_WAIT
, 0, 0 },

245 { 
ngx_°rög
("£t"), 
NGX_HTTP_SSI_INCLUDE_SET
, 0, 0 },

246 { 
ngx_°rög
("°ub"), 
NGX_HTTP_SSI_INCLUDE_STUB
, 0, 0 },

247 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

251 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_echo_∑øms
[] = {

252 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_ECHO_VAR
, 1, 0 },

253 { 
ngx_°rög
("deÁu…"), 
NGX_HTTP_SSI_ECHO_DEFAULT
, 0, 0 },

254 { 
ngx_°rög
("ícodög"), 
NGX_HTTP_SSI_ECHO_ENCODING
, 0, 0 },

255 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

259 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_c⁄fig_∑øms
[] = {

260 { 
ngx_°rög
("îrmsg"), 
NGX_HTTP_SSI_CONFIG_ERRMSG
, 0, 0 },

261 { 
ngx_°rög
("timefmt"), 
NGX_HTTP_SSI_CONFIG_TIMEFMT
, 0, 0 },

262 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

266 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_£t_∑øms
[] = {

267 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_SET_VAR
, 1, 0 },

268 { 
ngx_°rög
("vÆue"), 
NGX_HTTP_SSI_SET_VALUE
, 1, 0 },

269 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

273 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_if_∑øms
[] = {

274 { 
ngx_°rög
("ex¥"), 
NGX_HTTP_SSI_IF_EXPR
, 1, 0 },

275 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

279 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_block_∑øms
[] = {

280 { 
ngx_°rög
("«me"), 
NGX_HTTP_SSI_BLOCK_NAME
, 1, 0 },

281 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

285 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_no_∑øms
[] = {

286 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

290 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_ssi_comm™ds
[] = {

291 { 
ngx_°rög
("ö˛ude"), 
ngx_hâp_ssi_ö˛ude
,

292 
ngx_hâp_ssi_ö˛ude_∑øms
, 0, 0, 1 },

293 { 
ngx_°rög
("echo"), 
ngx_hâp_ssi_echo
,

294 
ngx_hâp_ssi_echo_∑øms
, 0, 0, 0 },

295 { 
ngx_°rög
("c⁄fig"), 
ngx_hâp_ssi_c⁄fig
,

296 
ngx_hâp_ssi_c⁄fig_∑øms
, 0, 0, 0 },

297 { 
ngx_°rög
("£t"), 
ngx_hâp_ssi_£t
, 
ngx_hâp_ssi_£t_∑øms
, 0, 0, 0 },

299 { 
ngx_°rög
("if"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
, 0, 0, 0 },

300 { 
ngx_°rög
("ñif"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
,

301 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

302 { 
ngx_°rög
("ñ£"), 
ngx_hâp_ssi_ñ£
, 
ngx_hâp_ssi_no_∑øms
,

303 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

304 { 
ngx_°rög
("ídif"), 
ngx_hâp_ssi_ídif
, 
ngx_hâp_ssi_no_∑øms
,

305 
NGX_HTTP_SSI_COND_ELSE
, 0, 0 },

307 { 
ngx_°rög
("block"), 
ngx_hâp_ssi_block
,

308 
ngx_hâp_ssi_block_∑øms
, 0, 0, 0 },

309 { 
ngx_°rög
("ídblock"), 
ngx_hâp_ssi_ídblock
,

310 
ngx_hâp_ssi_no_∑øms
, 0, 1, 0 },

312 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

316 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_ssi_v¨s
[] = {

318 { 
ngx_°rög
("d©e_loˇl"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 0,

319 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

321 { 
ngx_°rög
("d©e_gmt"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 1,

322 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

324 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

329 
ngx_öt_t


330 
	$ngx_hâp_ssi_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

332 
ngx_hâp_ssi_˘x_t
 *
˘x
;

333 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

335 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

337 i‡(!
¶cf
->
íabÀ


338 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

339 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

341  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

344 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ssi_˘x_t
));

345 i‡(
˘x
 =
NULL
) {

346  
NGX_ERROR
;

349 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ssi_fûãr_moduÀ
);

352 
˘x
->
vÆue_Àn
 = 
¶cf
->value_len;

353 
˘x
->
œ°_out
 = &˘x->
out
;

355 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

356 
˘x
->
ouçut
 = 1;

358 
˘x
->
∑øms
.
ñts
 = ctx->
∑øms_¨øy
;

359 
˘x
->
∑øms
.
size
 = (
ngx_èbÀ_ñt_t
);

360 
˘x
->
∑øms
.
«Œoc
 = 
NGX_HTTP_SSI_PARAMS_N
;

361 
˘x
->
∑øms
.
poﬁ
 = 
r
->pool;

363 
˘x
->
timefmt
 = 
ngx_hâp_ssi_timefmt
;

364 
	`ngx_°r_£t
(&
˘x
->
îrmsg
,

367 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

369 i‡(
r
 =r->
maö
) {

370 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

371 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

373 i‡(!
¶cf
->
œ°_modifõd
) {

374 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

375 
	`ngx_hâp_˛ór_ëag
(
r
);

378 
	`ngx_hâp_wók_ëag
(
r
);

382  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

383 
	}
}

386 
ngx_öt_t


387 
	$ngx_hâp_ssi_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

389 
size_t
 
Àn
;

390 
ngx_öt_t
 
rc
;

391 
ngx_buf_t
 *
b
;

392 
ngx_uöt_t
 
i
, 
ödex
;

393 
ngx_chaö_t
 *
˛
, **
Œ
;

394 
ngx_èbÀ_ñt_t
 *
∑øm
;

395 
ngx_hâp_ssi_˘x_t
 *
˘x
, *
m˘x
;

396 
ngx_hâp_ssi_block_t
 *
bl
;

397 
ngx_hâp_ssi_∑øm_t
 *
¥m
;

398 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

399 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

400 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

401 
ngx_°r_t
 *
∑øms
[
NGX_HTTP_SSI_MAX_PARAMS
 + 1];

403 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

405 i‡(
˘x
 =
NULL


406 || (
ö
 =
NULL


407 && 
˘x
->
buf
 =
NULL


408 && 
˘x
->
ö
 =
NULL


409 && 
˘x
->
busy
 =
NULL
))

411  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

416 i‡(
ö
) {

417 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

418  
NGX_ERROR
;

422 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

423 "hâ∞ssòfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

425 i‡(
˘x
->
waô
) {

427 i‡(
r
 !r->
c⁄√˘i⁄
->
d©a
) {

428 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

430 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

432  
NGX_AGAIN
;

435 i‡(
˘x
->
waô
->
d⁄e
) {

436 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

438 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

440 
˘x
->
waô
 = 
NULL
;

443 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

445 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

447  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

451 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

453 
˘x
->
ö
 || ctx->
buf
) {

455 i‡(
˘x
->
buf
 =
NULL
) {

456 
˘x
->
buf
 = ctx->
ö
->buf;

457 
˘x
->
ö
 = ctx->ö->
√xt
;

458 
˘x
->
pos
 = ctx->
buf
->pos;

461 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

462 
˘x
->
c›y_°¨t
 = ctx->
pos
;

463 
˘x
->
c›y_íd
 = ctx->
pos
;

466 
b
 = 
NULL
;

468 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

470 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

471 "ßved: %d sèã: %d", 
˘x
->
ßved
, ctx->
°©e
);

473 
rc
 = 
	`ngx_hâp_ssi_∑r£
(
r
, 
˘x
);

475 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

477 
rc
, 
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

479 i‡(
rc
 =
NGX_ERROR
) {

480  
rc
;

483 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

485 i‡(
˘x
->
ouçut
) {

487 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

488 "ßved: %d", 
˘x
->
ßved
);

490 i‡(
˘x
->
ßved
) {

492 i‡(
˘x
->
‰ì
) {

493 
˛
 = 
˘x
->
‰ì
;

494 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

495 
b
 = 
˛
->
buf
;

496 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

499 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

500 i‡(
b
 =
NULL
) {

501  
NGX_ERROR
;

504 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

505 i‡(
˛
 =
NULL
) {

506  
NGX_ERROR
;

509 
˛
->
buf
 = 
b
;

512 
b
->
mem‹y
 = 1;

513 
b
->
pos
 = 
ngx_hâp_ssi_°rög
;

514 
b
->
œ°
 = 
ngx_hâp_ssi_°rög
 + 
˘x
->
ßved
;

516 *
˘x
->
œ°_out
 = 
˛
;

517 
˘x
->
œ°_out
 = &
˛
->
√xt
;

519 
˘x
->
ßved
 = 0;

522 i‡(
˘x
->
‰ì
) {

523 
˛
 = 
˘x
->
‰ì
;

524 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

525 
b
 = 
˛
->
buf
;

528 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

529 i‡(
b
 =
NULL
) {

530  
NGX_ERROR
;

533 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

534 i‡(
˛
 =
NULL
) {

535  
NGX_ERROR
;

538 
˛
->
buf
 = 
b
;

541 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

543 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

544 
b
->
œ°
 = 
˘x
->
c›y_íd
;

545 
b
->
shadow
 = 
NULL
;

546 
b
->
œ°_buf
 = 0;

547 
b
->
ªcy˛ed
 = 0;

549 i‡(
b
->
ö_fûe
) {

550 i‡(
¶cf
->
mö_fûe_chunk
 < (
size_t
Ë(
b
->
œ°
 - b->
pos
))

552 
b
->
fûe_œ°
 = b->
fûe_pos


553 + (
b
->
œ°
 - 
˘x
->
buf
->
pos
);

554 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

557 
b
->
ö_fûe
 = 0;

561 
˛
->
√xt
 = 
NULL
;

562 *
˘x
->
œ°_out
 = 
˛
;

563 
˘x
->
œ°_out
 = &
˛
->
√xt
;

566 i‡(
˘x
->
block


567 && 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
))

569 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

570 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
));

572 i‡(
b
 =
NULL
) {

573  
NGX_ERROR
;

576 i‡(
˘x
->
ßved
) {

577 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
ngx_hâp_ssi_°rög
,

578 
˘x
->
ßved
);

581 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
c›y_°¨t
,

582 
˘x
->
c›y_íd
 - ctx->
c›y_°¨t
);

584 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

585 i‡(
˛
 =
NULL
) {

586  
NGX_ERROR
;

589 
˛
->
buf
 = 
b
;

590 
˛
->
√xt
 = 
NULL
;

592 
b
 = 
NULL
;

594 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

595 
ngx_hâp_ssi_fûãr_moduÀ
);

596 
bl
 = 
m˘x
->
blocks
->
ñts
;

597 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

598 *
Œ
;

599 
Œ
 = &(*Œ)->
√xt
)

604 *
Œ
 = 
˛
;

607 
˘x
->
ßved
 = 0;

611 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

612 
˘x
->
c›y_°¨t
 = ctx->
pos
;

613 
˘x
->
c›y_íd
 = ctx->
pos
;

616 
˘x
->
c›y_°¨t
 = 
NULL
;

617 
˘x
->
c›y_íd
 = 
NULL
;

620 i‡(
rc
 =
NGX_AGAIN
) {

625 
b
 = 
NULL
;

627 i‡(
rc
 =
NGX_OK
) {

629 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
,

630 
ngx_hâp_ssi_fûãr_moduÀ
);

632 
cmd
 = 
	`ngx_hash_föd
(&
smcf
->
hash
, 
˘x
->
key
, ctx->
comm™d
.
d©a
,

633 
˘x
->
comm™d
.
Àn
);

635 i‡(
cmd
 =
NULL
) {

636 i‡(
˘x
->
ouçut
) {

637 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

639 &
˘x
->
comm™d
);

640 
ssi_îr‹
;

646 i‡(!
˘x
->
ouçut
 && !
cmd
->
block
) {

648 i‡(
˘x
->
block
) {

652 
Àn
 = 5 + 
˘x
->
comm™d
.len + 4;

654 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

655 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

656 
Àn
 +1 + 
∑øm
[
i
].
key
.len + 2

657 + 
∑øm
[
i
].
vÆue
.
Àn
 + 1;

660 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

662 i‡(
b
 =
NULL
) {

663  
NGX_ERROR
;

666 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

667 i‡(
˛
 =
NULL
) {

668  
NGX_ERROR
;

671 
˛
->
buf
 = 
b
;

672 
˛
->
√xt
 = 
NULL
;

674 *
b
->
œ°
++ = '<';

675 *
b
->
œ°
++ = '!';

676 *
b
->
œ°
++ = '-';

677 *
b
->
œ°
++ = '-';

678 *
b
->
œ°
++ = '#';

680 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
comm™d
.
d©a
,

681 
˘x
->
comm™d
.
Àn
);

683 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

684 *
b
->
œ°
++ = ' ';

685 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
key
.
d©a
,

686 
∑øm
[
i
].
key
.
Àn
);

687 *
b
->
œ°
++ = '=';

688 *
b
->
œ°
++ = '"';

689 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
vÆue
.
d©a
,

690 
∑øm
[
i
].
vÆue
.
Àn
);

691 *
b
->
œ°
++ = '"';

694 *
b
->
œ°
++ = ' ';

695 *
b
->
œ°
++ = '-';

696 *
b
->
œ°
++ = '-';

697 *
b
->
œ°
++ = '>';

699 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

700 
ngx_hâp_ssi_fûãr_moduÀ
);

701 
bl
 = 
m˘x
->
blocks
->
ñts
;

702 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

703 *
Œ
;

704 
Œ
 = &(*Œ)->
√xt
)

709 *
Œ
 = 
˛
;

711 
b
 = 
NULL
;

716 i‡(
cmd
->
c⁄dôi⁄Æ
 == 0) {

721 i‡(
cmd
->
c⁄dôi⁄Æ


722 && (
˘x
->
c⁄dôi⁄Æ
 == 0

723 || 
˘x
->
c⁄dôi⁄Æ
 > 
cmd
->conditional))

725 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

727 &
˘x
->
comm™d
);

728 
ssi_îr‹
;

731 i‡(
˘x
->
∑øms
.
√…s
 > 
NGX_HTTP_SSI_MAX_PARAMS
) {

732 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

734 &
˘x
->
comm™d
);

735 
ssi_îr‹
;

738 
	`ngx_memzîo
(
∑øms
,

739 (
NGX_HTTP_SSI_MAX_PARAMS
 + 1Ë* (
ngx_°r_t
 *));

741 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

743 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

745 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

747 i‡(
∑øm
[
i
].
key
.
Àn
 !
¥m
->
«me
.len

748 || 
	`ngx_°∫cmp
(
∑øm
[
i
].
key
.
d©a
, 
¥m
->
«me
.data,

749 
¥m
->
«me
.
Àn
) != 0)

754 i‡(!
¥m
->
mu…ùÀ
) {

755 i‡(
∑øms
[
¥m
->
ödex
]) {

756 
	`ngx_log_îr‹
(
NGX_LOG_ERR
,

757 
r
->
c⁄√˘i⁄
->
log
, 0,

760 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

762 
ssi_îr‹
;

765 
∑øms
[
¥m
->
ödex
] = &
∑øm
[
i
].
vÆue
;

770 
ödex
 = 
¥m
->ödex; 
∑øms
[index]; index++) {

774 
∑øms
[
ödex
] = &
∑øm
[
i
].
vÆue
;

779 i‡(
¥m
->
«me
.
Àn
 == 0) {

780 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

783 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

785 
ssi_îr‹
;

789 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

790 i‡(
¥m
->
m™d©‹y
 && 
∑øms
[¥m->
ödex
] == 0) {

791 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

794 &
¥m
->
«me
, &
˘x
->
comm™d
);

796 
ssi_îr‹
;

800 i‡(
cmd
->
Êush
 && 
˘x
->
out
) {

802 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

805 i‡(
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

806  
NGX_ERROR
;

810 
rc
 = 
cmd
->
	`h™dÀr
(
r
, 
˘x
, 
∑øms
);

812 i‡(
rc
 =
NGX_OK
) {

816 i‡(
rc
 =
NGX_DONE
 ||Ñ¯=
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

817 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

818  
rc
;

825 
ssi_îr‹
:

827 i‡(
¶cf
->
sûít_îr‹s
) {

831 i‡(
˘x
->
‰ì
) {

832 
˛
 = 
˘x
->
‰ì
;

833 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

834 
b
 = 
˛
->
buf
;

835 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

838 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

839 i‡(
b
 =
NULL
) {

840  
NGX_ERROR
;

843 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

844 i‡(
˛
 =
NULL
) {

845  
NGX_ERROR
;

848 
˛
->
buf
 = 
b
;

851 
b
->
mem‹y
 = 1;

852 
b
->
pos
 = 
˘x
->
îrmsg
.
d©a
;

853 
b
->
œ°
 = 
˘x
->
îrmsg
.
d©a
 + ctx->îrmsg.
Àn
;

855 
˛
->
√xt
 = 
NULL
;

856 *
˘x
->
œ°_out
 = 
˛
;

857 
˘x
->
œ°_out
 = &
˛
->
√xt
;

862 i‡(
˘x
->
buf
->
œ°_buf
 || 
	`ngx_buf_ö_mem‹y
(ctx->buf)) {

863 i‡(
b
 =
NULL
) {

864 i‡(
˘x
->
‰ì
) {

865 
˛
 = 
˘x
->
‰ì
;

866 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

867 
b
 = 
˛
->
buf
;

868 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

871 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

872 i‡(
b
 =
NULL
) {

873  
NGX_ERROR
;

876 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

877 i‡(
˛
 =
NULL
) {

878  
NGX_ERROR
;

881 
˛
->
buf
 = 
b
;

884 
b
->
sync
 = 1;

886 
˛
->
√xt
 = 
NULL
;

887 *
˘x
->
œ°_out
 = 
˛
;

888 
˘x
->
œ°_out
 = &
˛
->
√xt
;

891 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

892 
b
->
shadow
 = 
˘x
->
buf
;

894 i‡(
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 == 0) {

895 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

899 
˘x
->
buf
 = 
NULL
;

901 
˘x
->
ßved
 = ctx->
looked
;

904 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

905  
NGX_OK
;

908  
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
);

909 
	}
}

912 
ngx_öt_t


913 
	$ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

915 
ngx_öt_t
 
rc
;

916 
ngx_buf_t
 *
b
;

917 
ngx_chaö_t
 *
˛
;

920 
b
 = 
NULL
;

921 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

922 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

923 "ssòout: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

924 i‡(
˛
->
buf
 =
b
) {

925 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

927 
	`ngx_debug_poöt
();

928  
NGX_ERROR
;

930 
b
 = 
˛
->
buf
;

934 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

936 i‡(
˘x
->
busy
 =
NULL
) {

937 
˘x
->
busy
 = ctx->
out
;

940 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

941 
˛
->
√xt
 = 
˘x
->
out
;

944 
˘x
->
out
 = 
NULL
;

945 
˘x
->
œ°_out
 = &˘x->
out
;

947 
˘x
->
busy
) {

949 
˛
 = 
˘x
->
busy
;

950 
b
 = 
˛
->
buf
;

952 i‡(
	`ngx_buf_size
(
b
) != 0) {

956 i‡(
b
->
shadow
) {

957 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

960 
˘x
->
busy
 = 
˛
->
√xt
;

962 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

965 
˛
->
√xt
 = 
˘x
->
‰ì
;

966 
˘x
->
‰ì
 = 
˛
;

970 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

972  
rc
;

973 
	}
}

977 
	$ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

979 i‡(
˘x
->
ö
 || ctx->
buf
) {

980 
r
->
buf„ªd
 |
NGX_HTTP_SSI_BUFFERED
;

983 
r
->
buf„ªd
 &~
NGX_HTTP_SSI_BUFFERED
;

985 
	}
}

988 
ngx_öt_t


989 
	$ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

991 
u_ch¨
 *
p
, *
vÆue
, *
œ°
, *
c›y_íd
, 
ch
;

992 
size_t
 
looked
;

993 
ngx_hâp_ssi_°©e_e
 
°©e
;

995 
°©e
 = 
˘x
->state;

996 
looked
 = 
˘x
->looked;

997 
œ°
 = 
˘x
->
buf
->last;

998 
c›y_íd
 = 
˘x
->copy_end;

1000 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

1002 
ch
 = *
p
;

1004 i‡(
°©e
 =
ssi_°¨t_°©e
) {

1009 i‡(
ch
 == '<') {

1010 
c›y_íd
 = 
p
;

1011 
looked
 = 1;

1012 
°©e
 = 
ssi_èg_°©e
;

1014 
èg_°¨ãd
;

1017 i‡(++
p
 =
œ°
) {

1021 
ch
 = *
p
;

1024 
˘x
->
°©e
 = state;

1025 
˘x
->
pos
 = 
p
;

1026 
˘x
->
looked
 =Üooked;

1027 
˘x
->
c›y_íd
 = 
p
;

1029 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

1030 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1033  
NGX_AGAIN
;

1035 
èg_°¨ãd
:

1040 
°©e
) {

1042 
ssi_°¨t_°©e
:

1046 
ssi_èg_°©e
:

1047 
ch
) {

1049 
looked
 = 2;

1050 
°©e
 = 
ssi_commít0_°©e
;

1054 
c›y_íd
 = 
p
;

1058 
c›y_íd
 = 
p
;

1059 
looked
 = 0;

1060 
°©e
 = 
ssi_°¨t_°©e
;

1066 
ssi_commít0_°©e
:

1067 
ch
) {

1069 
looked
 = 3;

1070 
°©e
 = 
ssi_commít1_°©e
;

1074 
c›y_íd
 = 
p
;

1075 
looked
 = 1;

1076 
°©e
 = 
ssi_èg_°©e
;

1080 
c›y_íd
 = 
p
;

1081 
looked
 = 0;

1082 
°©e
 = 
ssi_°¨t_°©e
;

1088 
ssi_commít1_°©e
:

1089 
ch
) {

1091 
looked
 = 4;

1092 
°©e
 = 
ssi_sh¨p_°©e
;

1096 
c›y_íd
 = 
p
;

1097 
looked
 = 1;

1098 
°©e
 = 
ssi_èg_°©e
;

1102 
c›y_íd
 = 
p
;

1103 
looked
 = 0;

1104 
°©e
 = 
ssi_°¨t_°©e
;

1110 
ssi_sh¨p_°©e
:

1111 
ch
) {

1113 i‡(
p
 - 
˘x
->
pos
 < 4) {

1114 
˘x
->
ßved
 = 0;

1116 
looked
 = 0;

1117 
°©e
 = 
ssi_¥ecomm™d_°©e
;

1121 
c›y_íd
 = 
p
;

1122 
looked
 = 1;

1123 
°©e
 = 
ssi_èg_°©e
;

1127 
c›y_íd
 = 
p
;

1128 
looked
 = 0;

1129 
°©e
 = 
ssi_°¨t_°©e
;

1135 
ssi_¥ecomm™d_°©e
:

1136 
ch
) {

1138 
CR
:

1139 
LF
:

1144 
˘x
->
comm™d
.
Àn
 = 1;

1145 
˘x
->
comm™d
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1146 
NGX_HTTP_SSI_COMMAND_LEN
);

1147 i‡(
˘x
->
comm™d
.
d©a
 =
NULL
) {

1148  
NGX_ERROR
;

1151 
˘x
->
comm™d
.
d©a
[0] = 
ch
;

1153 
˘x
->
key
 = 0;

1154 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1156 
˘x
->
∑øms
.
√…s
 = 0;

1158 
°©e
 = 
ssi_comm™d_°©e
;

1164 
ssi_comm™d_°©e
:

1165 
ch
) {

1167 
CR
:

1168 
LF
:

1170 
°©e
 = 
ssi_¥ï¨am_°©e
;

1174 
°©e
 = 
ssi_commít_íd0_°©e
;

1178 i‡(
˘x
->
comm™d
.
Àn
 =
NGX_HTTP_SSI_COMMAND_LEN
) {

1179 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1181 &
˘x
->
comm™d
, 
ch
);

1183 
°©e
 = 
ssi_îr‹_°©e
;

1187 
˘x
->
comm™d
.
d©a
[˘x->comm™d.
Àn
++] = 
ch
;

1188 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1193 
ssi_¥ï¨am_°©e
:

1194 
ch
) {

1196 
CR
:

1197 
LF
:

1202 
°©e
 = 
ssi_commít_íd0_°©e
;

1206 
˘x
->
∑øm
 = 
	`ngx_¨øy_push
(&˘x->
∑øms
);

1207 i‡(
˘x
->
∑øm
 =
NULL
) {

1208  
NGX_ERROR
;

1211 
˘x
->
∑øm
->
key
.
Àn
 = 1;

1212 
˘x
->
∑øm
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1213 
NGX_HTTP_SSI_PARAM_LEN
);

1214 i‡(
˘x
->
∑øm
->
key
.
d©a
 =
NULL
) {

1215  
NGX_ERROR
;

1218 
˘x
->
∑øm
->
key
.
d©a
[0] = 
ch
;

1220 
˘x
->
∑øm
->
vÆue
.
Àn
 = 0;

1222 i‡(
˘x
->
vÆue_buf
 =
NULL
) {

1223 
˘x
->
∑øm
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1224 
˘x
->
vÆue_Àn
 + 1);

1225 i‡(
˘x
->
∑øm
->
vÆue
.
d©a
 =
NULL
) {

1226  
NGX_ERROR
;

1230 
˘x
->
∑øm
->
vÆue
.
d©a
 = ctx->
vÆue_buf
;

1233 
°©e
 = 
ssi_∑øm_°©e
;

1239 
ssi_∑øm_°©e
:

1240 
ch
) {

1242 
CR
:

1243 
LF
:

1245 
°©e
 = 
ssi_¥ìquÆ_°©e
;

1249 
°©e
 = 
ssi_¥evÆue_°©e
;

1253 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1255 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1256 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1258 &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1262 i‡(
˘x
->
∑øm
->
key
.
Àn
 =
NGX_HTTP_SSI_PARAM_LEN
) {

1263 
°©e
 = 
ssi_îr‹_°©e
;

1264 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1267 &
˘x
->
∑øm
->
key
, 
ch
, &˘x->
comm™d
);

1271 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1276 
ssi_¥ìquÆ_°©e
:

1277 
ch
) {

1279 
CR
:

1280 
LF
:

1285 
°©e
 = 
ssi_¥evÆue_°©e
;

1289 i‡(
ch
 == '-') {

1290 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1292 
°©e
 = 
ssi_îr‹_°©e
;

1295 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1298 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1304 
ssi_¥evÆue_°©e
:

1305 
ch
) {

1307 
CR
:

1308 
LF
:

1313 
°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1317 
°©e
 = 
ssi_quŸed_vÆue_°©e
;

1321 i‡(
ch
 == '-') {

1322 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1324 
°©e
 = 
ssi_îr‹_°©e
;

1327 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1330 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1336 
ssi_doubÀ_quŸed_vÆue_°©e
:

1337 
ch
) {

1339 
°©e
 = 
ssi_po°∑øm_°©e
;

1343 
˘x
->
ßved_°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1344 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1349 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1350 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1353 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1354 &
˘x
->
comm™d
);

1355 
°©e
 = 
ssi_îr‹_°©e
;

1359 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1364 
ssi_quŸed_vÆue_°©e
:

1365 
ch
) {

1367 
°©e
 = 
ssi_po°∑øm_°©e
;

1371 
˘x
->
ßved_°©e
 = 
ssi_quŸed_vÆue_°©e
;

1372 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1377 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1378 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1381 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1382 &
˘x
->
comm™d
);

1383 
°©e
 = 
ssi_îr‹_°©e
;

1387 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1392 
ssi_quŸed_symbﬁ_°©e
:

1393 
°©e
 = 
˘x
->
ßved_°©e
;

1395 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1396 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1399 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1400 &
˘x
->
comm™d
);

1401 
°©e
 = 
ssi_îr‹_°©e
;

1405 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1409 
ssi_po°∑øm_°©e
:

1411 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 + 1 < ctx->
vÆue_Àn
 / 2) {

1412 
vÆue
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
∑øm
->vÆue.
Àn
 + 1);

1413 i‡(
vÆue
 =
NULL
) {

1414  
NGX_ERROR
;

1417 
	`ngx_mem˝y
(
vÆue
, 
˘x
->
∑øm
->vÆue.
d©a
,

1418 
˘x
->
∑øm
->
vÆue
.
Àn
);

1420 
˘x
->
vÆue_buf
 = ctx->
∑øm
->
vÆue
.
d©a
;

1421 
˘x
->
∑øm
->
vÆue
.
d©a
 = value;

1424 
˘x
->
vÆue_buf
 = 
NULL
;

1427 
ch
) {

1429 
CR
:

1430 
LF
:

1432 
°©e
 = 
ssi_¥ï¨am_°©e
;

1436 
°©e
 = 
ssi_commít_íd0_°©e
;

1440 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1443 
ch
, &
˘x
->
∑øm
->
vÆue
, &˘x->∑øm->
key
,

1444 &
˘x
->
comm™d
);

1445 
°©e
 = 
ssi_îr‹_°©e
;

1451 
ssi_commít_íd0_°©e
:

1452 
ch
) {

1454 
°©e
 = 
ssi_commít_íd1_°©e
;

1458 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1460 
ch
, &
˘x
->
comm™d
);

1461 
°©e
 = 
ssi_îr‹_°©e
;

1467 
ssi_commít_íd1_°©e
:

1468 
ch
) {

1470 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1471 
˘x
->
pos
 = 
p
 + 1;

1472 
˘x
->
looked
 =Üooked;

1473 
˘x
->
c›y_íd
 = copy_end;

1475 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1476 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1479  
NGX_OK
;

1482 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1484 
ch
, &
˘x
->
comm™d
);

1485 
°©e
 = 
ssi_îr‹_°©e
;

1491 
ssi_îr‹_°©e
:

1492 
ch
) {

1494 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1503 
ssi_îr‹_íd0_°©e
:

1504 
ch
) {

1506 
°©e
 = 
ssi_îr‹_íd1_°©e
;

1510 
°©e
 = 
ssi_îr‹_°©e
;

1516 
ssi_îr‹_íd1_°©e
:

1517 
ch
) {

1519 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1520 
˘x
->
pos
 = 
p
 + 1;

1521 
˘x
->
looked
 =Üooked;

1522 
˘x
->
c›y_íd
 = copy_end;

1524 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1525 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1528  
NGX_HTTP_SSI_ERROR
;

1531 
°©e
 = 
ssi_îr‹_°©e
;

1539 
˘x
->
°©e
 = state;

1540 
˘x
->
pos
 = 
p
;

1541 
˘x
->
looked
 =Üooked;

1543 
˘x
->
c›y_íd
 = (
°©e
 =
ssi_°¨t_°©e
Ë? 
p
 : copy_end;

1545 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

1546 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1549  
NGX_AGAIN
;

1550 
	}
}

1553 
ngx_°r_t
 *

1554 
	$ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

1555 
ngx_uöt_t
 
key
)

1557 
ngx_uöt_t
 
i
;

1558 
ngx_li°_∑π_t
 *
∑π
;

1559 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1560 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1562 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1564 #i‡(
NGX_PCRE
)

1566 
ngx_°r_t
 *
vÆue
;

1568 i‡(
key
 >= '0' && key <= '9') {

1569 
i
 = 
key
 - '0';

1571 i‡(
i
 < 
˘x
->
nˇ±uªs
) {

1572 
vÆue
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_°r_t
));

1573 i‡(
vÆue
 =
NULL
) {

1574  
NULL
;

1577 
i
 *= 2;

1579 
vÆue
->
d©a
 = 
˘x
->
ˇ±uªs_d©a
 + ctx->
ˇ±uªs
[
i
];

1580 
vÆue
->
Àn
 = 
˘x
->
ˇ±uªs
[
i
 + 1] - ctx->captures[i];

1582  
vÆue
;

1588 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1589  
NULL
;

1592 
∑π
 = &
˘x
->
v¨übÀs
->part;

1593 
v¨
 = 
∑π
->
ñts
;

1595 
i
 = 0; ; i++) {

1597 i‡(
i
 >
∑π
->
√…s
) {

1598 i‡(
∑π
->
√xt
 =
NULL
) {

1602 
∑π
 =Ö¨t->
√xt
;

1603 
v¨
 = 
∑π
->
ñts
;

1604 
i
 = 0;

1607 i‡(
«me
->
Àn
 !
v¨
[
i
].name.len) {

1611 i‡(
key
 !
v¨
[
i
].key) {

1615 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
v¨
[
i
].«me.d©a,Çame->
Àn
) == 0) {

1616  &
v¨
[
i
].
vÆue
;

1620  
NULL
;

1621 
	}
}

1624 
ngx_öt_t


1625 
	$ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1626 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
)

1628 
u_ch¨
 
ch
, *
p
, **
vÆue
, *
d©a
, *
∑π_d©a
;

1629 
size_t
 *
size
, 
Àn
, 
¥efix
, 
∑π_Àn
;

1630 
ngx_°r_t
 
v¨
, *
vÆ
;

1631 
ngx_öt_t
 
key
;

1632 
ngx_uöt_t
 
i
, 
n
, 
bøckë
, 
quŸed
;

1633 
ngx_¨øy_t
 
Àngths
, 
vÆues
;

1634 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1636 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ãxt
);

1638 i‡(
n
 == 0) {

1640 
d©a
 = 
ãxt
->data;

1641 
p
 = 
d©a
;

1643 i‡((
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
Ë&& 
ãxt
->
d©a
[0] != '/') {

1645 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1646 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1651 i‡(
¥efix
) {

1652 
Àn
 = 
¥efix
 + 
ãxt
->len;

1654 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1655 i‡(
d©a
 =
NULL
) {

1656  
NGX_ERROR
;

1659 
p
 = 
	`ngx_c›y
(
d©a
, 
r
->
uri
.d©a, 
¥efix
);

1663 
quŸed
 = 0;

1665 
i
 = 0; i < 
ãxt
->
Àn
; i++) {

1666 
ch
 = 
ãxt
->
d©a
[
i
];

1668 i‡(!
quŸed
) {

1670 i‡(
ch
 == '\\') {

1671 
quŸed
 = 1;

1676 
quŸed
 = 0;

1678 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1679 *
p
++ = '\\';

1683 *
p
++ = 
ch
;

1686 
ãxt
->
Àn
 = 
p
 - 
d©a
;

1687 
ãxt
->
d©a
 = data;

1689  
NGX_OK
;

1692 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
r
->
poﬁ
, 8, (
size_t
 *)Ë!
NGX_OK
) {

1693  
NGX_ERROR
;

1696 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
r
->
poﬁ
, 8, (
u_ch¨
 *)Ë!
NGX_OK
) {

1697  
NGX_ERROR
;

1700 
Àn
 = 0;

1701 
i
 = 0;

1703 
i
 < 
ãxt
->
Àn
) {

1705 i‡(
ãxt
->
d©a
[
i
] == '$') {

1707 
v¨
.
Àn
 = 0;

1709 i‡(++
i
 =
ãxt
->
Àn
) {

1710 
övÆid_v¨übÀ
;

1713 i‡(
ãxt
->
d©a
[
i
] == '{') {

1714 
bøckë
 = 1;

1716 i‡(++
i
 =
ãxt
->
Àn
) {

1717 
övÆid_v¨übÀ
;

1720 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1723 
bøckë
 = 0;

1724 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1727  ; 
i
 < 
ãxt
->
Àn
; i++, 
v¨
.len++) {

1728 
ch
 = 
ãxt
->
d©a
[
i
];

1730 i‡(
ch
 ='}' && 
bøckë
) {

1731 
i
++;

1732 
bøckë
 = 0;

1736 i‡((
ch
 >= 'A' && ch <= 'Z')

1737 || (
ch
 >= 'a' && ch <= 'z')

1738 || (
ch
 >= '0' && ch <= '9')

1739 || 
ch
 == '_')

1747 i‡(
bøckë
) {

1748 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1750 "v¨übÀ i†missög", &
v¨
);

1751  
NGX_HTTP_SSI_ERROR
;

1754 i‡(
v¨
.
Àn
 == 0) {

1755 
övÆid_v¨übÀ
;

1758 
key
 = 
	`ngx_hash_°æow
(
v¨
.
d©a
, v¨.d©a, v¨.
Àn
);

1760 
vÆ
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1762 i‡(
vÆ
 =
NULL
) {

1763 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1764 i‡(
vv
 =
NULL
) {

1765  
NGX_ERROR
;

1768 i‡(
vv
->
nŸ_found
) {

1772 
∑π_d©a
 = 
vv
->
d©a
;

1773 
∑π_Àn
 = 
vv
->
Àn
;

1776 
∑π_d©a
 = 
vÆ
->
d©a
;

1777 
∑π_Àn
 = 
vÆ
->
Àn
;

1781 
∑π_d©a
 = &
ãxt
->
d©a
[
i
];

1782 
quŸed
 = 0;

1784 
p
 = 
∑π_d©a
; 
i
 < 
ãxt
->
Àn
; i++) {

1785 
ch
 = 
ãxt
->
d©a
[
i
];

1787 i‡(!
quŸed
) {

1789 i‡(
ch
 == '\\') {

1790 
quŸed
 = 1;

1794 i‡(
ch
 == '$') {

1799 
quŸed
 = 0;

1801 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1802 *
p
++ = '\\';

1806 *
p
++ = 
ch
;

1809 
∑π_Àn
 = 
p
 - 
∑π_d©a
;

1812 
Àn
 +
∑π_Àn
;

1814 
size
 = 
	`ngx_¨øy_push
(&
Àngths
);

1815 i‡(
size
 =
NULL
) {

1816  
NGX_ERROR
;

1819 *
size
 = 
∑π_Àn
;

1821 
vÆue
 = 
	`ngx_¨øy_push
(&
vÆues
);

1822 i‡(
vÆue
 =
NULL
) {

1823  
NGX_ERROR
;

1826 *
vÆue
 = 
∑π_d©a
;

1829 
¥efix
 = 0;

1831 
size
 = 
Àngths
.
ñts
;

1832 
vÆue
 = 
vÆues
.
ñts
;

1834 i‡(
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
) {

1835 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1836 i‡(
size
[
i
] != 0) {

1837 i‡(*
vÆue
[
i
] != '/') {

1838 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1839 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1840 
Àn
 +
¥efix
;

1851 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
 + ((
Êags
 & 
NGX_HTTP_SSI_ADD_ZERO
) ? 1 : 0));

1852 i‡(
p
 =
NULL
) {

1853  
NGX_ERROR
;

1856 
ãxt
->
Àn
 =Üen;

1857 
ãxt
->
d©a
 = 
p
;

1859 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
, 
¥efix
);

1861 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1862 
p
 = 
	`ngx_c›y
’, 
vÆue
[
i
], 
size
[i]);

1865  
NGX_OK
;

1867 
övÆid_v¨übÀ
:

1869 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1870 "övÆid v¨übÀÇamêö \"%V\"", 
ãxt
);

1872  
NGX_HTTP_SSI_ERROR
;

1873 
	}
}

1876 
ngx_öt_t


1877 
	$ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑âîn
,

1878 
ngx_°r_t
 *
°r
)

1880 #i‡(
NGX_PCRE
)

1881 
rc
, *
ˇ±uªs
;

1882 
u_ch¨
 *
p
, 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1883 
size_t
 
size
;

1884 
ngx_öt_t
 
key
;

1885 
ngx_°r_t
 *
vv
, 
«me
, 
vÆue
;

1886 
ngx_uöt_t
 
i
, 
n
;

1887 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1888 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1889 
ngx_ªgex_compûe_t
 
rgc
;

1891 
	`ngx_memzîo
(&
rgc
, (
ngx_ªgex_compûe_t
));

1893 
rgc
.
∑âîn
 = *pattern;

1894 
rgc
.
poﬁ
 = 
r
->pool;

1895 
rgc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

1896 
rgc
.
îr
.
d©a
 = 
îr°r
;

1898 i‡(
	`ngx_ªgex_compûe
(&
rgc
Ë!
NGX_OK
) {

1899 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "%V", &
rgc
.
îr
);

1900  
NGX_HTTP_SSI_ERROR
;

1903 
n
 = (
rgc
.
ˇ±uªs
 + 1) * 3;

1905 
ˇ±uªs
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * ());

1906 i‡(
ˇ±uªs
 =
NULL
) {

1907  
NGX_ERROR
;

1910 
rc
 = 
	`ngx_ªgex_exec
(
rgc
.
ªgex
, 
°r
, 
ˇ±uªs
, 
n
);

1912 i‡(
rc
 < 
NGX_REGEX_NO_MATCHED
) {

1913 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1914 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

1915 
rc
, 
°r
, 
∑âîn
);

1916  
NGX_HTTP_SSI_ERROR
;

1919 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

1920  
NGX_DECLINED
;

1923 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1925 
˘x
->
nˇ±uªs
 = 
rc
;

1926 
˘x
->
ˇ±uªs
 = captures;

1927 
˘x
->
ˇ±uªs_d©a
 = 
°r
->
d©a
;

1929 i‡(
rgc
.
«med_ˇ±uªs
 > 0) {

1931 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1932 
˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

1933 (
ngx_hâp_ssi_v¨_t
));

1934 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1935  
NGX_ERROR
;

1939 
size
 = 
rgc
.
«me_size
;

1940 
p
 = 
rgc
.
«mes
;

1942 
i
 = 0; i < (
ngx_uöt_t
Ë
rgc
.
«med_ˇ±uªs
; i++, 
p
 +
size
) {

1944 
«me
.
d©a
 = &
p
[2];

1945 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

1947 
n
 = 2 * ((
p
[0] << 8) +Ö[1]);

1949 
vÆue
.
d©a
 = &
°r
->d©a[
ˇ±uªs
[
n
]];

1950 
vÆue
.
Àn
 = 
ˇ±uªs
[
n
 + 1] - captures[n];

1952 
key
 = 
	`ngx_hash_°æow
(
«me
.
d©a
,Çame.d©a,Çame.
Àn
);

1954 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
«me
, 
key
);

1956 i‡(
vv
) {

1957 *
vv
 = 
vÆue
;

1961 
v¨
 = 
	`ngx_li°_push
(
˘x
->
v¨übÀs
);

1962 i‡(
v¨
 =
NULL
) {

1963  
NGX_ERROR
;

1966 
v¨
->
«me
 =Çame;

1967 
v¨
->
key
 = key;

1968 
v¨
->
vÆue
 = value;

1972  
NGX_OK
;

1976 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1978 
∑âîn
);

1979  
NGX_HTTP_SSI_ERROR
;

1982 
	}
}

1985 
ngx_öt_t


1986 
	$ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1987 
ngx_°r_t
 **
∑øms
)

1989 
ngx_öt_t
 
rc
, 
key
;

1990 
ngx_°r_t
 *
uri
, *
fûe
, *
waô
, *
£t
, *
°ub
, 
¨gs
;

1991 
ngx_buf_t
 *
b
;

1992 
ngx_uöt_t
 
Êags
, 
i
;

1993 
ngx_chaö_t
 *
˛
, *
é
, **
Œ
, *
out
;

1994 
ngx_hâp_ªque°_t
 *
§
;

1995 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1996 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

1997 
ngx_hâp_ssi_block_t
 *
bl
;

1998 
ngx_hâp_po°_subªque°_t
 *
p§
;

2000 
uri
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_VIRTUAL
];

2001 
fûe
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_FILE
];

2002 
waô
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_WAIT
];

2003 
£t
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_SET
];

2004 
°ub
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_STUB
];

2006 i‡(
uri
 && 
fûe
) {

2007 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2009 
uri
, 
fûe
);

2010  
NGX_HTTP_SSI_ERROR
;

2013 i‡(
uri
 =
NULL
 && 
fûe
 == NULL) {

2014 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2016  
NGX_HTTP_SSI_ERROR
;

2019 i‡(
£t
 && 
°ub
) {

2020 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2023  
NGX_HTTP_SSI_ERROR
;

2026 i‡(
waô
) {

2027 i‡(
uri
 =
NULL
) {

2028 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2029 "\"waô\" c™nŸ bêu£d wôh fûe=\"%V\"", 
fûe
);

2030  
NGX_HTTP_SSI_ERROR
;

2033 i‡(
waô
->
Àn
 == 2

2034 && 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "no", 2) == 0)

2036 
waô
 = 
NULL
;

2038 } i‡(
waô
->
Àn
 != 3

2039 || 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "yes", 3) != 0)

2041 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2043 
waô
);

2044  
NGX_HTTP_SSI_ERROR
;

2048 i‡(
uri
 =
NULL
) {

2049 
uri
 = 
fûe
;

2050 
waô
 = (
ngx_°r_t
 *) -1;

2053 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
uri
, 
NGX_HTTP_SSI_ADD_PREFIX
);

2055 i‡(
rc
 !
NGX_OK
) {

2056  
rc
;

2059 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2060 "ssòö˛ude: \"%V\"", 
uri
);

2062 
	`ngx_°r_nuŒ
(&
¨gs
);

2063 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

2065 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, 
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

2066  
NGX_HTTP_SSI_ERROR
;

2069 
p§
 = 
NULL
;

2071 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2073 i‡(
°ub
) {

2074 i‡(
m˘x
->
blocks
) {

2075 
bl
 = 
m˘x
->
blocks
->
ñts
;

2076 
i
 = 0; i < 
m˘x
->
blocks
->
√…s
; i++) {

2077 i‡(
°ub
->
Àn
 =
bl
[
i
].
«me
.len

2078 && 
	`ngx_°∫cmp
(
°ub
->
d©a
, 
bl
[
i
].
«me
.d©a, stub->
Àn
) == 0)

2080 
found
;

2085 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2086 "\"°ub\"=\"%V\" f‹ \"ö˛ude\"ÇŸ found", 
°ub
);

2087  
NGX_HTTP_SSI_ERROR
;

2089 
found
:

2091 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2092 i‡(
p§
 =
NULL
) {

2093  
NGX_ERROR
;

2096 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_°ub_ouçut
;

2098 i‡(
bl
[
i
].
cou¡
++) {

2100 
out
 = 
NULL
;

2101 
Œ
 = &
out
;

2103 
é
 = 
bl
[
i
].
bufs
;Ål;Å»é->
√xt
) {

2105 i‡(
˘x
->
‰ì
) {

2106 
˛
 = 
˘x
->
‰ì
;

2107 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

2108 
b
 = 
˛
->
buf
;

2111 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

2112 i‡(
b
 =
NULL
) {

2113  
NGX_ERROR
;

2116 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2117 i‡(
˛
 =
NULL
) {

2118  
NGX_ERROR
;

2121 
˛
->
buf
 = 
b
;

2124 
	`ngx_mem˝y
(
b
, 
é
->
buf
, (
ngx_buf_t
));

2126 
b
->
pos
 = b->
°¨t
;

2128 *
Œ
 = 
˛
;

2129 
˛
->
√xt
 = 
NULL
;

2130 
Œ
 = &
˛
->
√xt
;

2133 
p§
->
d©a
 = 
out
;

2136 
p§
->
d©a
 = 
bl
[
i
].
bufs
;

2140 i‡(
waô
) {

2141 
Êags
 |
NGX_HTTP_SUBREQUEST_WAITED
;

2144 i‡(
£t
) {

2145 
key
 = 
	`ngx_hash_°æow
(
£t
->
d©a
, së->d©a, së->
Àn
);

2147 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2148 i‡(
p§
 =
NULL
) {

2149  
NGX_ERROR
;

2152 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_£t_v¨übÀ
;

2153 
p§
->
d©a
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
£t
, 
key
);

2155 i‡(
p§
->
d©a
 =
NULL
) {

2157 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2158 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2159 (
ngx_hâp_ssi_v¨_t
));

2160 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2161  
NGX_ERROR
;

2165 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2166 i‡(
v¨
 =
NULL
) {

2167  
NGX_ERROR
;

2170 
v¨
->
«me
 = *
£t
;

2171 
v¨
->
key
 = key;

2172 
v¨
->
vÆue
 = 
ngx_hâp_ssi_nuŒ_°rög
;

2173 
p§
->
d©a
 = &
v¨
->
vÆue
;

2176 
Êags
 |
NGX_HTTP_SUBREQUEST_IN_MEMORY
|
NGX_HTTP_SUBREQUEST_WAITED
;

2179 i‡(
	`ngx_hâp_subªque°
(
r
, 
uri
, &
¨gs
, &
§
, 
p§
, 
Êags
Ë!
NGX_OK
) {

2180  
NGX_HTTP_SSI_ERROR
;

2183 i‡(
waô
 =
NULL
 && 
£t
 == NULL) {

2184  
NGX_OK
;

2187 i‡(
˘x
->
waô
 =
NULL
) {

2188 
˘x
->
waô
 = 
§
;

2190  
NGX_AGAIN
;

2193 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2197  
NGX_OK
;

2198 
	}
}

2201 
ngx_öt_t


2202 
	$ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2204 
ngx_chaö_t
 *
out
;

2206 i‡(
rc
 =
NGX_ERROR
 || 
r
->
c⁄√˘i⁄
->
îr‹
 ||Ñ->
ªque°_ouçut
) {

2207  
rc
;

2210 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2211 "ssò°ub ouçut: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2213 
out
 = 
d©a
;

2215 i‡(!
r
->
hódî_£¡
) {

2216 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =

2217 
r
->
∑ª¡
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

2218 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 =Ñ->
∑ª¡
->headers_out.content_type;

2220 i‡(
	`ngx_hâp_£nd_hódî
(
r
Ë=
NGX_ERROR
) {

2221  
NGX_ERROR
;

2225  
	`ngx_hâp_ouçut_fûãr
(
r
, 
out
);

2226 
	}
}

2229 
ngx_öt_t


2230 
	$ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2232 
ngx_°r_t
 *
vÆue
 = 
d©a
;

2234 i‡(
r
->
up°ªam
) {

2235 
vÆue
->
Àn
 = 
r
->
up°ªam
->
buf„r
.
œ°
 -Ñ->up°ªam->buf„r.
pos
;

2236 
vÆue
->
d©a
 = 
r
->
up°ªam
->
buf„r
.
pos
;

2239  
rc
;

2240 
	}
}

2243 
ngx_öt_t


2244 
	$ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2245 
ngx_°r_t
 **
∑øms
)

2247 
u_ch¨
 *
p
;

2248 
uöçå_t
 
Àn
;

2249 
ngx_öt_t
 
key
;

2250 
ngx_buf_t
 *
b
;

2251 
ngx_°r_t
 *
v¨
, *
vÆue
, *
íc
, 
ãxt
;

2252 
ngx_chaö_t
 *
˛
;

2253 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2255 
v¨
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_VAR
];

2257 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2258 "ssòechÿ\"%V\"", 
v¨
);

2260 
key
 = 
	`ngx_hash_°æow
(
v¨
->
d©a
, v¨->d©a, v¨->
Àn
);

2262 
vÆue
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2264 i‡(
vÆue
 =
NULL
) {

2265 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2267 i‡(
vv
 =
NULL
) {

2268  
NGX_HTTP_SSI_ERROR
;

2271 i‡(!
vv
->
nŸ_found
) {

2272 
ãxt
.
d©a
 = 
vv
->data;

2273 
ãxt
.
Àn
 = 
vv
->len;

2274 
vÆue
 = &
ãxt
;

2278 i‡(
vÆue
 =
NULL
) {

2279 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_DEFAULT
];

2281 i‡(
vÆue
 =
NULL
) {

2282 
vÆue
 = &
ngx_hâp_ssi_n⁄e
;

2284 } i‡(
vÆue
->
Àn
 == 0) {

2285  
NGX_OK
;

2289 i‡(
vÆue
->
Àn
 == 0) {

2290  
NGX_OK
;

2294 
íc
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_ENCODING
];

2296 i‡(
íc
) {

2297 i‡(
íc
->
Àn
 =4 && 
	`ngx_°∫cmp
”nc->
d©a
, "none", 4) == 0) {

2299 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_NO_ENCODING
;

2301 } i‡(
íc
->
Àn
 =3 && 
	`ngx_°∫cmp
”nc->
d©a
, "url", 3) == 0) {

2303 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_URL_ENCODING
;

2305 } i‡(
íc
->
Àn
 =6 && 
	`ngx_°∫cmp
”nc->
d©a
, "entity", 6) == 0) {

2307 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

2310 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2312 
íc
);

2316 
p
 = 
vÆue
->
d©a
;

2318 
˘x
->
ícodög
) {

2320 
NGX_HTTP_SSI_URL_ENCODING
:

2321 
Àn
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vÆue
->
d©a
, value->len,

2322 
NGX_ESCAPE_HTML
);

2324 i‡(
Àn
) {

2325 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2326 i‡(
p
 =
NULL
) {

2327  
NGX_HTTP_SSI_ERROR
;

2330 (Ë
	`ngx_esˇ≥_uri
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
, 
NGX_ESCAPE_HTML
);

2333 
Àn
 +
vÆue
->len;

2336 
NGX_HTTP_SSI_ENTITY_ENCODING
:

2337 
Àn
 = 
	`ngx_esˇ≥_html
(
NULL
, 
vÆue
->
d©a
, value->len);

2339 i‡(
Àn
) {

2340 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2341 i‡(
p
 =
NULL
) {

2342  
NGX_HTTP_SSI_ERROR
;

2345 (Ë
	`ngx_esˇ≥_html
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

2348 
Àn
 +
vÆue
->len;

2352 
Àn
 = 
vÆue
->len;

2356 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2357 i‡(
b
 =
NULL
) {

2358  
NGX_HTTP_SSI_ERROR
;

2361 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2362 i‡(
˛
 =
NULL
) {

2363  
NGX_HTTP_SSI_ERROR
;

2366 
b
->
mem‹y
 = 1;

2367 
b
->
pos
 = 
p
;

2368 
b
->
œ°
 = 
p
 + 
Àn
;

2370 
˛
->
buf
 = 
b
;

2371 
˛
->
√xt
 = 
NULL
;

2372 *
˘x
->
œ°_out
 = 
˛
;

2373 
˘x
->
œ°_out
 = &
˛
->
√xt
;

2375  
NGX_OK
;

2376 
	}
}

2379 
ngx_öt_t


2380 
	$ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2381 
ngx_°r_t
 **
∑øms
)

2383 
ngx_°r_t
 *
vÆue
;

2385 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_TIMEFMT
];

2387 i‡(
vÆue
) {

2388 
˘x
->
timefmt
.
Àn
 = 
vÆue
->len;

2389 
˘x
->
timefmt
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 + 1);

2390 i‡(
˘x
->
timefmt
.
d©a
 =
NULL
) {

2391  
NGX_HTTP_SSI_ERROR
;

2394 
	`ngx_˝y°∫
(
˘x
->
timefmt
.
d©a
, 
vÆue
->d©a, vÆue->
Àn
 + 1);

2397 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_ERRMSG
];

2399 i‡(
vÆue
) {

2400 
˘x
->
îrmsg
 = *
vÆue
;

2403  
NGX_OK
;

2404 
	}
}

2407 
ngx_öt_t


2408 
	$ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2409 
ngx_°r_t
 **
∑øms
)

2411 
ngx_öt_t
 
key
, 
rc
;

2412 
ngx_°r_t
 *
«me
, *
vÆue
, *
vv
;

2413 
ngx_hâp_ssi_v¨_t
 *
v¨
;

2414 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2416 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2418 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2419 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2420 (
ngx_hâp_ssi_v¨_t
));

2421 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2422  
NGX_ERROR
;

2426 
«me
 = 
∑øms
[
NGX_HTTP_SSI_SET_VAR
];

2427 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_SET_VALUE
];

2429 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2430 "ssò£à\"%V\" \"%V\"", 
«me
, 
vÆue
);

2432 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
vÆue
, 0);

2434 i‡(
rc
 !
NGX_OK
) {

2435  
rc
;

2438 
key
 = 
	`ngx_hash_°æow
(
«me
->
d©a
,Çame->d©a,Çame->
Àn
);

2440 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
«me
, 
key
);

2442 i‡(
vv
) {

2443 *
vv
 = *
vÆue
;

2444  
NGX_OK
;

2447 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2448 i‡(
v¨
 =
NULL
) {

2449  
NGX_ERROR
;

2452 
v¨
->
«me
 = *name;

2453 
v¨
->
key
 = key;

2454 
v¨
->
vÆue
 = *value;

2456 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2457 "£t: \"%V\"=\"%V\"", 
«me
, 
vÆue
);

2459  
NGX_OK
;

2460 
	}
}

2463 
ngx_öt_t


2464 
	$ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2465 
ngx_°r_t
 **
∑øms
)

2467 
u_ch¨
 *
p
, *
œ°
;

2468 
ngx_°r_t
 *
ex¥
, 
À·
, 
right
;

2469 
ngx_öt_t
 
rc
;

2470 
ngx_uöt_t
 
√g©ive
, 
n‹egex
, 
Êags
;

2472 i‡(
˘x
->
comm™d
.
Àn
 == 2) {

2473 i‡(
˘x
->
c⁄dôi⁄Æ
) {

2474 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2476  
NGX_HTTP_SSI_ERROR
;

2480 i‡(
˘x
->
ouçut_cho£n
) {

2481 
˘x
->
ouçut
 = 0;

2482  
NGX_OK
;

2485 
ex¥
 = 
∑øms
[
NGX_HTTP_SSI_IF_EXPR
];

2487 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2488 "ssòi‡ex¥=\"%V\"", 
ex¥
);

2490 
À·
.
d©a
 = 
ex¥
->data;

2491 
œ°
 = 
ex¥
->
d©a
 +Éx¥->
Àn
;

2493 
p
 = 
À·
.
d©a
;Ö < 
œ°
;Ö++) {

2494 i‡(*
p
 >= 'A' && *p <= 'Z') {

2495 *
p
 |= 0x20;

2499 i‡((*
p
 >= 'a' && *p <= 'z')

2500 || (*
p
 >= '0' && *p <= '9')

2501 || *
p
 == '$' || *p == '{' || *p == '}' || *p == '_'

2502 || *
p
 == '"' || *p == '\'')

2510 
À·
.
Àn
 = 
p
 -Üe·.
d©a
;

2512 
p
 < 
œ°
 && *p == ' ') {

2513 
p
++;

2516 
Êags
 = 0;

2518 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2519 "À·: \"%V\"", &
À·
);

2521 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
À·
, 
Êags
);

2523 i‡(
rc
 !
NGX_OK
) {

2524  
rc
;

2527 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2528 "evÆuãdÜe·: \"%V\"", &
À·
);

2530 i‡(
p
 =
œ°
) {

2531 i‡(
À·
.
Àn
) {

2532 
˘x
->
ouçut
 = 1;

2533 
˘x
->
ouçut_cho£n
 = 1;

2536 
˘x
->
ouçut
 = 0;

2539 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2541  
NGX_OK
;

2544 i‡(
p
 < 
œ°
 && *p == '=') {

2545 
√g©ive
 = 0;

2546 
p
++;

2548 } i‡(
p
 + 1 < 
œ°
 && *p == '!' && *(p + 1) == '=') {

2549 
√g©ive
 = 1;

2550 
p
 += 2;

2553 
övÆid_ex¥essi⁄
;

2556 
p
 < 
œ°
 && *p == ' ') {

2557 
p
++;

2560 i‡(
p
 < 
œ°
 - 1 && *p == '/') {

2561 i‡(*(
œ°
 - 1) != '/') {

2562 
övÆid_ex¥essi⁄
;

2565 
n‹egex
 = 0;

2566 
Êags
 = 
NGX_HTTP_SSI_ADD_ZERO
;

2567 
œ°
--;

2568 
p
++;

2571 
n‹egex
 = 1;

2572 
Êags
 = 0;

2574 i‡(
p
 < 
œ°
 - 1 &&Ö[0] == '\\' &&Ö[1] == '/') {

2575 
p
++;

2579 
right
.
Àn
 = 
œ°
 - 
p
;

2580 
right
.
d©a
 = 
p
;

2582 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2583 "right: \"%V\"", &
right
);

2585 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
right
, 
Êags
);

2587 i‡(
rc
 !
NGX_OK
) {

2588  
rc
;

2591 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2592 "evÆuãdÑight: \"%V\"", &
right
);

2594 i‡(
n‹egex
) {

2595 i‡(
À·
.
Àn
 !
right
.len) {

2596 
rc
 = -1;

2599 
rc
 = 
	`ngx_°∫cmp
(
À·
.
d©a
, 
right
.d©a,Ñight.
Àn
);

2603 
right
.
d©a
[right.
Àn
] = '\0';

2605 
rc
 = 
	`ngx_hâp_ssi_ªgex_m©ch
(
r
, &
right
, &
À·
);

2607 i‡(
rc
 =
NGX_OK
) {

2608 
rc
 = 0;

2609 } i‡(
rc
 =
NGX_DECLINED
) {

2610 
rc
 = -1;

2612  
rc
;

2616 i‡((
rc
 =0 && !
√g©ive
) || (rc != 0 &&Çegative)) {

2617 
˘x
->
ouçut
 = 1;

2618 
˘x
->
ouçut_cho£n
 = 1;

2621 
˘x
->
ouçut
 = 0;

2624 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2626  
NGX_OK
;

2628 
övÆid_ex¥essi⁄
:

2630 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2631 "övÆidÉx¥essi⁄ i¿\"%V\"", 
ex¥
);

2633  
NGX_HTTP_SSI_ERROR
;

2634 
	}
}

2637 
ngx_öt_t


2638 
	$ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2639 
ngx_°r_t
 **
∑øms
)

2641 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2644 i‡(
˘x
->
ouçut_cho£n
) {

2645 
˘x
->
ouçut
 = 0;

2647 
˘x
->
ouçut
 = 1;

2650 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_ELSE
;

2652  
NGX_OK
;

2653 
	}
}

2656 
ngx_öt_t


2657 
	$ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2658 
ngx_°r_t
 **
∑øms
)

2660 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2663 
˘x
->
ouçut
 = 1;

2664 
˘x
->
ouçut_cho£n
 = 0;

2665 
˘x
->
c⁄dôi⁄Æ
 = 0;

2667  
NGX_OK
;

2668 
	}
}

2671 
ngx_öt_t


2672 
	$ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2673 
ngx_°r_t
 **
∑øms
)

2675 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2676 
ngx_hâp_ssi_block_t
 *
bl
;

2678 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2681 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2683 i‡(
m˘x
->
blocks
 =
NULL
) {

2684 
m˘x
->
blocks
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 4,

2685 (
ngx_hâp_ssi_block_t
));

2686 i‡(
m˘x
->
blocks
 =
NULL
) {

2687  
NGX_HTTP_SSI_ERROR
;

2691 
bl
 = 
	`ngx_¨øy_push
(
m˘x
->
blocks
);

2692 i‡(
bl
 =
NULL
) {

2693  
NGX_HTTP_SSI_ERROR
;

2696 
bl
->
«me
 = *
∑øms
[
NGX_HTTP_SSI_BLOCK_NAME
];

2697 
bl
->
bufs
 = 
NULL
;

2698 
bl
->
cou¡
 = 0;

2700 
˘x
->
ouçut
 = 0;

2701 
˘x
->
block
 = 1;

2703  
NGX_OK
;

2704 
	}
}

2707 
ngx_öt_t


2708 
	$ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2709 
ngx_°r_t
 **
∑øms
)

2711 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2714 
˘x
->
ouçut
 = 1;

2715 
˘x
->
block
 = 0;

2717  
NGX_OK
;

2718 
	}
}

2721 
ngx_öt_t


2722 
	$ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2723 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
)

2725 
ngx_hâp_ssi_˘x_t
 *
˘x
;

2726 
ngx_time_t
 *
ç
;

2727 
ngx_°r_t
 *
timefmt
;

2728 
tm
Åm;

2729 
buf
[
NGX_HTTP_SSI_DATE_LEN
];

2731 
v
->
vÆid
 = 1;

2732 
v
->
no_ˇchóbÀ
 = 0;

2733 
v
->
nŸ_found
 = 0;

2735 
ç
 = 
	`ngx_timeofday
();

2737 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2739 
timefmt
 = 
˘x
 ? &˘x->timefmà: &
ngx_hâp_ssi_timefmt
;

2741 i‡(
timefmt
->
Àn
 == ("%s") - 1

2742 && 
timefmt
->
d©a
[0] == '%' &&Åimefmt->data[1] == 's')

2744 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
);

2745 i‡(
v
->
d©a
 =
NULL
) {

2746  
NGX_ERROR
;

2749 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%T", 
ç
->
£c
) - v->data;

2751  
NGX_OK
;

2754 i‡(
gmt
) {

2755 
	`ngx_libc_gmtime
(
ç
->
£c
, &
tm
);

2757 
	`ngx_libc_loˇ…ime
(
ç
->
£c
, &
tm
);

2760 
v
->
Àn
 = 
	`°r·ime
(
buf
, 
NGX_HTTP_SSI_DATE_LEN
,

2761 (*Ë
timefmt
->
d©a
, &
tm
);

2762 i‡(
v
->
Àn
 == 0) {

2763  
NGX_ERROR
;

2766 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2767 i‡(
v
->
d©a
 =
NULL
) {

2768  
NGX_ERROR
;

2771 
	`ngx_mem˝y
(
v
->
d©a
, 
buf
, v->
Àn
);

2773  
NGX_OK
;

2774 
	}
}

2777 
ngx_öt_t


2778 
	$ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

2780 
ngx_öt_t
 
rc
;

2781 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2782 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

2783 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2785 
v
 = 
ngx_hâp_ssi_v¨s
; v->
«me
.
Àn
; v++) {

2786 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2787 i‡(
v¨
 =
NULL
) {

2788  
NGX_ERROR
;

2791 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2792 
v¨
->
d©a
 = 
v
->data;

2795 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2797 
cmd
 = 
ngx_hâp_ssi_comm™ds
; cmd->
«me
.
Àn
; cmd++) {

2798 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
cmd
->
«me
, cmd,

2799 
NGX_HASH_READONLY_KEY
);

2801 i‡(
rc
 =
NGX_OK
) {

2805 i‡(
rc
 =
NGX_BUSY
) {

2806 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2807 "c⁄Êi˘ög SSI comm™d \"%V\"", &
cmd
->
«me
);

2810  
NGX_ERROR
;

2813  
NGX_OK
;

2814 
	}
}

2818 
	$ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2820 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2822 
smcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_maö_c⁄f_t
));

2823 i‡(
smcf
 =
NULL
) {

2824  
NULL
;

2827 
smcf
->
comm™ds
.
poﬁ
 = 
cf
->pool;

2828 
smcf
->
comm™ds
.
ãmp_poﬁ
 = 
cf
->temp_pool;

2830 i‡(
	`ngx_hash_keys_¨øy_öô
(&
smcf
->
comm™ds
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

2831  
NULL
;

2834  
smcf
;

2835 
	}
}

2839 
	$ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

2841 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
 = 
c⁄f
;

2843 
ngx_hash_öô_t
 
hash
;

2845 
hash
.hash = &
smcf
->hash;

2846 
hash
.
key
 = 
ngx_hash_key
;

2847 
hash
.
max_size
 = 1024;

2848 
hash
.
buckë_size
 = 
ngx_ˇchñöe_size
;

2849 
hash
.
«me
 = "ssi_command_hash";

2850 
hash
.
poﬁ
 = 
cf
->pool;

2851 
hash
.
ãmp_poﬁ
 = 
NULL
;

2853 i‡(
	`ngx_hash_öô
(&
hash
, 
smcf
->
comm™ds
.
keys
.
ñts
,

2854 
smcf
->
comm™ds
.
keys
.
√…s
)

2855 !
NGX_OK
)

2857  
NGX_CONF_ERROR
;

2860  
NGX_CONF_OK
;

2861 
	}
}

2865 
	$ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2867 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

2869 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_loc_c⁄f_t
));

2870 i‡(
¶cf
 =
NULL
) {

2871  
NULL
;

2881 
¶cf
->
íabÀ
 = 
NGX_CONF_UNSET
;

2882 
¶cf
->
sûít_îr‹s
 = 
NGX_CONF_UNSET
;

2883 
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 = 
NGX_CONF_UNSET
;

2884 
¶cf
->
œ°_modifõd
 = 
NGX_CONF_UNSET
;

2886 
¶cf
->
mö_fûe_chunk
 = 
NGX_CONF_UNSET_SIZE
;

2887 
¶cf
->
vÆue_Àn
 = 
NGX_CONF_UNSET_SIZE
;

2889  
¶cf
;

2890 
	}
}

2894 
	$ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2896 
ngx_hâp_ssi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2897 
ngx_hâp_ssi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2899 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

2900 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sûít_îr‹s
, 
¥ev
->silent_errors, 0);

2901 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_ªcy˛ed_buf„rs
,

2902 
¥ev
->
ign‹e_ªcy˛ed_buf„rs
, 0);

2903 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
œ°_modifõd
, 
¥ev
->last_modified, 0);

2905 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
mö_fûe_chunk
, 
¥ev
->min_file_chunk, 1024);

2906 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
vÆue_Àn
, 
¥ev
->value_len, 255);

2908 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

2909 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

2910 
ngx_hâp_html_deÁu…_ty≥s
)

2911 !
NGX_OK
)

2913  
NGX_CONF_ERROR
;

2916  
NGX_CONF_OK
;

2917 
	}
}

2920 
ngx_öt_t


2921 
	$ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

2923 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

2924 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ssi_hódî_fûãr
;

2926 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

2927 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ssi_body_fûãr
;

2929  
NGX_OK
;

2930 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.h

8 #i‚de‡
_NGX_HTTP_SSI_FILTER_H_INCLUDED_


9 
	#_NGX_HTTP_SSI_FILTER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_SSI_MAX_PARAMS
 16

	)

19 
	#NGX_HTTP_SSI_COMMAND_LEN
 32

	)

20 
	#NGX_HTTP_SSI_PARAM_LEN
 32

	)

21 
	#NGX_HTTP_SSI_PARAMS_N
 4

	)

24 
	#NGX_HTTP_SSI_COND_IF
 1

	)

25 
	#NGX_HTTP_SSI_COND_ELSE
 2

	)

28 
	#NGX_HTTP_SSI_NO_ENCODING
 0

	)

29 
	#NGX_HTTP_SSI_URL_ENCODING
 1

	)

30 
	#NGX_HTTP_SSI_ENTITY_ENCODING
 2

	)

34 
ngx_hash_t
 
	mhash
;

35 
ngx_hash_keys_¨øys_t
 
	mcomm™ds
;

36 } 
	tngx_hâp_ssi_maö_c⁄f_t
;

40 
ngx_buf_t
 *
	mbuf
;

42 
u_ch¨
 *
	mpos
;

43 
u_ch¨
 *
	mc›y_°¨t
;

44 
u_ch¨
 *
	mc›y_íd
;

46 
ngx_uöt_t
 
	mkey
;

47 
ngx_°r_t
 
	mcomm™d
;

48 
ngx_¨øy_t
 
	m∑øms
;

49 
ngx_èbÀ_ñt_t
 *
	m∑øm
;

50 
ngx_èbÀ_ñt_t
 
	m∑øms_¨øy
[
NGX_HTTP_SSI_PARAMS_N
];

52 
ngx_chaö_t
 *
	mö
;

53 
ngx_chaö_t
 *
	mout
;

54 
ngx_chaö_t
 **
	mœ°_out
;

55 
ngx_chaö_t
 *
	mbusy
;

56 
ngx_chaö_t
 *
	m‰ì
;

58 
ngx_uöt_t
 
	m°©e
;

59 
ngx_uöt_t
 
	mßved_°©e
;

60 
size_t
 
	mßved
;

61 
size_t
 
	mlooked
;

63 
size_t
 
	mvÆue_Àn
;

65 
ngx_li°_t
 *
	mv¨übÀs
;

66 
ngx_¨øy_t
 *
	mblocks
;

68 #i‡(
NGX_PCRE
)

69 
ngx_uöt_t
 
	mnˇ±uªs
;

70 *
	mˇ±uªs
;

71 
u_ch¨
 *
	mˇ±uªs_d©a
;

74 
	mc⁄dôi⁄Æ
:2;

75 
	mícodög
:2;

76 
	mblock
:1;

77 
	mouçut
:1;

78 
	mouçut_cho£n
:1;

80 
ngx_hâp_ªque°_t
 *
	mwaô
;

81 *
	mvÆue_buf
;

82 
ngx_°r_t
 
	mtimefmt
;

83 
ngx_°r_t
 
	mîrmsg
;

84 } 
	tngx_hâp_ssi_˘x_t
;

87 
	$ngx_öt_t
 (*
	tngx_hâp_ssi_comm™d_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

88 
	tngx_hâp_ssi_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 **);

92 
ngx_°r_t
 
«me
;

93 
ngx_uöt_t
 
ödex
;

95 
m™d©‹y
:1;

96 
mu…ùÀ
:1;

97 } 
	tngx_hâp_ssi_∑øm_t
;

101 
ngx_°r_t
 
«me
;

102 
ngx_hâp_ssi_comm™d_±
 
h™dÀr
;

103 
ngx_hâp_ssi_∑øm_t
 *
∑øms
;

105 
c⁄dôi⁄Æ
:2;

106 
block
:1;

107 
Êush
:1;

108 } 
	tngx_hâp_ssi_comm™d_t
;

111 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

	@src/http/modules/ngx_http_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	$ngx_öt_t
 (*
	tngx_s¶_v¨übÀ_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
,

14 
	tngx_poﬁ_t
 *
	tpoﬁ
, 
	tngx_°r_t
 *
	ts
);

17 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

18 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

20 
	#NGX_HTTP_NPN_ADVERTISE
 "\x08hâp/1.1"

	)

23 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


24 
	`ngx_hâp_s¶_Æ≤_£À˘
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

25 c⁄° **
out
, *
ouéí
,

26 c⁄° *
ö
, 
öÀn
, *
¨g
);

29 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


30 
	`ngx_hâp_s¶_≈n_advîti£d
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

31 c⁄° **
out
, *
ouéí
, *
¨g
);

34 
ngx_öt_t
 
	`ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

36 
ngx_öt_t
 
	`ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

39 
ngx_öt_t
 
	`ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

40 *
	`ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

41 *
	`ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

42 *
∑ª¡
, *
chûd
);

44 *
	`ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

45 *
c⁄f
);

46 *
	`ngx_hâp_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

47 *
c⁄f
);

48 *
	`ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

49 *
c⁄f
);

51 
ngx_öt_t
 
	`ngx_hâp_s¶_öô
(
ngx_c⁄f_t
 *
cf
);

54 
ngx_c⁄f_bômask_t
 
ngx_hâp_s¶_¥Ÿocﬁs
[] = {

55 { 
	`ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

56 { 
	`ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

57 { 
	`ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

58 { 
	`ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

59 { 
	`ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

60 { 
ngx_nuŒ_°rög
, 0 }

61 
	}
};

64 
ngx_c⁄f_íum_t
 
	gngx_hâp_s¶_vîify
[] = {

65 { 
ngx_°rög
("off"), 0 },

66 { 
ngx_°rög
("on"), 1 },

67 { 
ngx_°rög
("optional"), 2 },

68 { 
ngx_°rög
("optional_no_ca"), 3 },

69 { 
ngx_nuŒ_°rög
, 0 }

73 
ngx_comm™d_t
 
	gngx_hâp_s¶_comm™ds
[] = {

75 { 
ngx_°rög
("ssl"),

76 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

77 
ngx_hâp_s¶_íabÀ
,

78 
NGX_HTTP_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
íabÀ
),

80 
NULL
 },

82 { 
ngx_°rög
("ssl_certificate"),

83 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

84 
ngx_c⁄f_£t_°r_¶Ÿ
,

85 
NGX_HTTP_SRV_CONF_OFFSET
,

86 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã
),

87 
NULL
 },

89 { 
ngx_°rög
("ssl_certificate_key"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

91 
ngx_c⁄f_£t_°r_¶Ÿ
,

92 
NGX_HTTP_SRV_CONF_OFFSET
,

93 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã_key
),

94 
NULL
 },

96 { 
ngx_°rög
("ssl_password_file"),

97 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_hâp_s¶_∑ssw‹d_fûe
,

99 
NGX_HTTP_SRV_CONF_OFFSET
,

101 
NULL
 },

103 { 
ngx_°rög
("ssl_dhparam"),

104 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

105 
ngx_c⁄f_£t_°r_¶Ÿ
,

106 
NGX_HTTP_SRV_CONF_OFFSET
,

107 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
dh∑øm
),

108 
NULL
 },

110 { 
ngx_°rög
("ssl_ecdh_curve"),

111 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

112 
ngx_c⁄f_£t_°r_¶Ÿ
,

113 
NGX_HTTP_SRV_CONF_OFFSET
,

114 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
ecdh_curve
),

115 
NULL
 },

117 { 
ngx_°rög
("ssl_protocols"),

118 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

119 
ngx_c⁄f_£t_bômask_¶Ÿ
,

120 
NGX_HTTP_SRV_CONF_OFFSET
,

121 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥Ÿocﬁs
),

122 &
ngx_hâp_s¶_¥Ÿocﬁs
 },

124 { 
ngx_°rög
("ssl_ciphers"),

125 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

126 
ngx_c⁄f_£t_°r_¶Ÿ
,

127 
NGX_HTTP_SRV_CONF_OFFSET
,

128 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
cùhîs
),

129 
NULL
 },

131 { 
ngx_°rög
("ssl_buffer_size"),

132 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

133 
ngx_c⁄f_£t_size_¶Ÿ
,

134 
NGX_HTTP_SRV_CONF_OFFSET
,

135 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
buf„r_size
),

136 
NULL
 },

138 { 
ngx_°rög
("ssl_verify_client"),

139 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

140 
ngx_c⁄f_£t_íum_¶Ÿ
,

141 
NGX_HTTP_SRV_CONF_OFFSET
,

142 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify
),

143 &
ngx_hâp_s¶_vîify
 },

145 { 
ngx_°rög
("ssl_verify_depth"),

146 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

147 
ngx_c⁄f_£t_num_¶Ÿ
,

148 
NGX_HTTP_SRV_CONF_OFFSET
,

149 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify_dïth
),

150 
NULL
 },

152 { 
ngx_°rög
("ssl_client_certificate"),

153 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

154 
ngx_c⁄f_£t_°r_¶Ÿ
,

155 
NGX_HTTP_SRV_CONF_OFFSET
,

156 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˛õ¡_˚πifiˇã
),

157 
NULL
 },

159 { 
ngx_°rög
("ssl_trusted_certificate"),

160 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

161 
ngx_c⁄f_£t_°r_¶Ÿ
,

162 
NGX_HTTP_SRV_CONF_OFFSET
,

163 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
åu°ed_˚πifiˇã
),

164 
NULL
 },

166 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

167 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

168 
ngx_c⁄f_£t_Êag_¶Ÿ
,

169 
NGX_HTTP_SRV_CONF_OFFSET
,

170 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

171 
NULL
 },

173 { 
ngx_°rög
("ssl_session_cache"),

174 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE12
,

175 
ngx_hâp_s¶_£ssi⁄_ˇche
,

176 
NGX_HTTP_SRV_CONF_OFFSET
,

178 
NULL
 },

180 { 
ngx_°rög
("ssl_session_tickets"),

181 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

182 
ngx_c⁄f_£t_Êag_¶Ÿ
,

183 
NGX_HTTP_SRV_CONF_OFFSET
,

184 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_tickës
),

185 
NULL
 },

187 { 
ngx_°rög
("ssl_session_ticket_key"),

188 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

189 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

190 
NGX_HTTP_SRV_CONF_OFFSET
,

191 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_tickë_keys
),

192 
NULL
 },

194 { 
ngx_°rög
("ssl_session_timeout"),

195 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

196 
ngx_c⁄f_£t_£c_¶Ÿ
,

197 
NGX_HTTP_SRV_CONF_OFFSET
,

198 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_timeout
),

199 
NULL
 },

201 { 
ngx_°rög
("ssl_crl"),

202 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

203 
ngx_c⁄f_£t_°r_¶Ÿ
,

204 
NGX_HTTP_SRV_CONF_OFFSET
,

205 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¸l
),

206 
NULL
 },

208 { 
ngx_°rög
("ssl_stapling"),

209 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

210 
ngx_c⁄f_£t_Êag_¶Ÿ
,

211 
NGX_HTTP_SRV_CONF_OFFSET
,

212 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög
),

213 
NULL
 },

215 { 
ngx_°rög
("ssl_stapling_file"),

216 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

217 
ngx_c⁄f_£t_°r_¶Ÿ
,

218 
NGX_HTTP_SRV_CONF_OFFSET
,

219 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_fûe
),

220 
NULL
 },

222 { 
ngx_°rög
("ssl_stapling_responder"),

223 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

224 
ngx_c⁄f_£t_°r_¶Ÿ
,

225 
NGX_HTTP_SRV_CONF_OFFSET
,

226 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_ª•⁄dî
),

227 
NULL
 },

229 { 
ngx_°rög
("ssl_stapling_verify"),

230 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

231 
ngx_c⁄f_£t_Êag_¶Ÿ
,

232 
NGX_HTTP_SRV_CONF_OFFSET
,

233 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_vîify
),

234 
NULL
 },

236 
ngx_nuŒ_comm™d


240 
ngx_hâp_moduÀ_t
 
	gngx_hâp_s¶_moduÀ_˘x
 = {

241 
ngx_hâp_s¶_add_v¨übÀs
,

242 
ngx_hâp_s¶_öô
,

244 
NULL
,

245 
NULL
,

247 
ngx_hâp_s¶_¸óã_§v_c⁄f
,

248 
ngx_hâp_s¶_mîge_§v_c⁄f
,

250 
NULL
,

251 
NULL


255 
ngx_moduÀ_t
 
	gngx_hâp_s¶_moduÀ
 = {

256 
NGX_MODULE_V1
,

257 &
ngx_hâp_s¶_moduÀ_˘x
,

258 
ngx_hâp_s¶_comm™ds
,

259 
NGX_HTTP_MODULE
,

260 
NULL
,

261 
NULL
,

262 
NULL
,

263 
NULL
,

264 
NULL
,

265 
NULL
,

266 
NULL
,

267 
NGX_MODULE_V1_PADDING


271 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_s¶_v¨s
[] = {

273 { 
ngx_°rög
("s¶_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

274 (
uöçå_t
Ë
ngx_s¶_gë_¥Ÿocﬁ
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

276 { 
ngx_°rög
("s¶_cùhî"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

277 (
uöçå_t
Ë
ngx_s¶_gë_cùhî_«me
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

279 { 
ngx_°rög
("s¶_£ssi⁄_id"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

280 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_id
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

282 { 
ngx_°rög
("s¶_£ssi⁄_ªu£d"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

283 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_ªu£d
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

285 { 
ngx_°rög
("s¶_£rvî_«me"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

286 (
uöçå_t
Ë
ngx_s¶_gë_£rvî_«me
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

288 { 
ngx_°rög
("s¶_˛õ¡_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

289 (
uöçå_t
Ë
ngx_s¶_gë_˚πifiˇã
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

291 { 
ngx_°rög
("s¶_˛õ¡_øw_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

292 (
uöçå_t
Ë
ngx_s¶_gë_øw_˚πifiˇã
,

293 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

295 { 
ngx_°rög
("s¶_˛õ¡_s_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

296 (
uöçå_t
Ë
ngx_s¶_gë_subje˘_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

298 { 
ngx_°rög
("s¶_˛õ¡_i_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

299 (
uöçå_t
Ë
ngx_s¶_gë_issuî_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

301 { 
ngx_°rög
("s¶_˛õ¡_£rül"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

302 (
uöçå_t
Ë
ngx_s¶_gë_£rül_numbî
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

304 { 
ngx_°rög
("s¶_˛õ¡_fögî¥öt"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

305 (
uöçå_t
Ë
ngx_s¶_gë_fögî¥öt
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

307 { 
ngx_°rög
("s¶_˛õ¡_vîify"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

308 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_vîify
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

310 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

314 
ngx_°r_t
 
	gngx_hâp_s¶_£ss_id_˘x
 = 
ngx_°rög
("HTTP");

317 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


320 
	$ngx_hâp_s¶_Æ≤_£À˘
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, c⁄° **
out
,

321 *
ouéí
, c⁄° *
ö
, 
öÀn
,

322 *
¨g
)

324 
§vÀn
;

325 *
§v
;

326 #i‡(
NGX_DEBUG
)

327 
i
;

329 #i‡(
NGX_HTTP_SPDY
)

330 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

332 #i‡(
NGX_HTTP_SPDY
 || 
NGX_DEBUG
)

333 
ngx_c⁄√˘i⁄_t
 *
c
;

335 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

338 #i‡(
NGX_DEBUG
)

339 
i
 = 0; i < 
öÀn
; i +
ö
[i] + 1) {

340 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

341 "SSL ALPN suµ‹ãd by clõ¡: %*s", 
ö
[
i
], &in[i + 1]);

345 #i‡(
NGX_HTTP_SPDY
)

346 
hc
 = 
c
->
d©a
;

348 i‡(
hc
->
addr_c⁄f
->
•dy
) {

349 
§v
 = (*Ë
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
;

350 
§vÀn
 = (
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
) - 1;

355 
§v
 = (*Ë
NGX_HTTP_NPN_ADVERTISE
;

356 
§vÀn
 = (
NGX_HTTP_NPN_ADVERTISE
) - 1;

359 i‡(
	`SSL_£À˘_√xt_¥Ÿo
((**Ë
out
, 
ouéí
, 
§v
, 
§vÀn
,

360 
ö
, 
öÀn
)

361 !
OPENSSL_NPN_NEGOTIATED
)

363  
SSL_TLSEXT_ERR_NOACK
;

366 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

367 "SSL ALPN sñe˘ed: %*s", *
ouéí
, *
out
);

369  
SSL_TLSEXT_ERR_OK
;

370 
	}
}

375 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


378 
	$ngx_hâp_s¶_≈n_advîti£d
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

379 c⁄° **
out
, *
ouéí
, *
¨g
)

381 #i‡(
NGX_HTTP_SPDY
 || 
NGX_DEBUG
)

382 
ngx_c⁄√˘i⁄_t
 *
c
;

384 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

385 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "SSL NPNádvertised");

388 #i‡(
NGX_HTTP_SPDY
)

390 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

392 
hc
 = 
c
->
d©a
;

394 i‡(
hc
->
addr_c⁄f
->
•dy
) {

395 *
out
 = (*Ë
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
;

396 *
ouéí
 = (
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
) - 1;

398  
SSL_TLSEXT_ERR_OK
;

403 *
out
 = (*Ë
NGX_HTTP_NPN_ADVERTISE
;

404 *
ouéí
 = (
NGX_HTTP_NPN_ADVERTISE
) - 1;

406  
SSL_TLSEXT_ERR_OK
;

407 
	}
}

412 
ngx_öt_t


413 
	$ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

414 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

416 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

418 
size_t
 
Àn
;

419 
ngx_°r_t
 
s
;

421 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

423 (Ë
	`h™dÀr
(
r
->
c⁄√˘i⁄
, 
NULL
, &
s
);

425 
v
->
d©a
 = 
s
.data;

427 
Àn
 = 0; 
v
->
d©a
[len];Üen++) { }

429 
v
->
Àn
 =Üen;

430 
v
->
vÆid
 = 1;

431 
v
->
no_ˇchóbÀ
 = 0;

432 
v
->
nŸ_found
 = 0;

434  
NGX_OK
;

437 
v
->
nŸ_found
 = 1;

439  
NGX_OK
;

440 
	}
}

443 
ngx_öt_t


444 
	$ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

445 
uöçå_t
 
d©a
)

447 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

449 
ngx_°r_t
 
s
;

451 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

453 i‡(
	`h™dÀr
(
r
->
c⁄√˘i⁄
,Ñ->
poﬁ
, &
s
Ë!
NGX_OK
) {

454  
NGX_ERROR
;

457 
v
->
Àn
 = 
s
.len;

458 
v
->
d©a
 = 
s
.data;

460 i‡(
v
->
Àn
) {

461 
v
->
vÆid
 = 1;

462 
v
->
no_ˇchóbÀ
 = 0;

463 
v
->
nŸ_found
 = 0;

465  
NGX_OK
;

469 
v
->
nŸ_found
 = 1;

471  
NGX_OK
;

472 
	}
}

475 
ngx_öt_t


476 
	$ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

478 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

480 
v
 = 
ngx_hâp_s¶_v¨s
; v->
«me
.
Àn
; v++) {

481 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

482 i‡(
v¨
 =
NULL
) {

483  
NGX_ERROR
;

486 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

487 
v¨
->
d©a
 = 
v
->data;

490  
NGX_OK
;

491 
	}
}

495 
	$ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

497 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

499 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_s¶_§v_c⁄f_t
));

500 i‡(
sscf
 =
NULL
) {

501  
NULL
;

521 
sscf
->
íabÀ
 = 
NGX_CONF_UNSET
;

522 
sscf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

523 
sscf
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

524 
sscf
->
vîify
 = 
NGX_CONF_UNSET_UINT
;

525 
sscf
->
vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

526 
sscf
->
∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

527 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

528 
sscf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

529 
sscf
->
£ssi⁄_tickës
 = 
NGX_CONF_UNSET
;

530 
sscf
->
£ssi⁄_tickë_keys
 = 
NGX_CONF_UNSET_PTR
;

531 
sscf
->
°≠lög
 = 
NGX_CONF_UNSET
;

532 
sscf
->
°≠lög_vîify
 = 
NGX_CONF_UNSET
;

534  
sscf
;

535 
	}
}

539 
	$ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

541 
ngx_hâp_s¶_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

542 
ngx_hâp_s¶_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

544 
ngx_poﬁ_˛ónup_t
 *
˛n
;

546 i‡(
c⁄f
->
íabÀ
 =
NGX_CONF_UNSET
) {

547 i‡(
¥ev
->
íabÀ
 =
NGX_CONF_UNSET
) {

548 
c⁄f
->
íabÀ
 = 0;

551 
c⁄f
->
íabÀ
 = 
¥ev
->enable;

552 
c⁄f
->
fûe
 = 
¥ev
->file;

553 
c⁄f
->
löe
 = 
¥ev
->line;

557 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

558 
¥ev
->
£ssi⁄_timeout
, 300);

560 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

561 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

563 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

564 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


565 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

567 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

568 
NGX_SSL_BUFSIZE
);

570 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify
, 
¥ev
->verify, 0);

571 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify_dïth
, 
¥ev
->verify_depth, 1);

573 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

574 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

576 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
∑ssw‹ds
, 
¥ev
->∑ssw‹ds, 
NULL
);

578 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

580 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˛õ¡_˚πifiˇã
, 
¥ev
->client_certificate,

582 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
åu°ed_˚πifiˇã
,

583 
¥ev
->
åu°ed_˚πifiˇã
, "");

584 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
¸l
, 
¥ev
->crl, "");

586 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

587 
NGX_DEFAULT_ECDH_CURVE
);

589 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

591 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
°≠lög
, 
¥ev
->stapling, 0);

592 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
°≠lög_vîify
, 
¥ev
->stapling_verify, 0);

593 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
°≠lög_fûe
, 
¥ev
->stapling_file, "");

594 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
°≠lög_ª•⁄dî
,

595 
¥ev
->
°≠lög_ª•⁄dî
, "");

597 
c⁄f
->
s¶
.
log
 = 
cf
->log;

599 i‡(
c⁄f
->
íabÀ
) {

601 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

602 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

605 
c⁄f
->
fûe
, c⁄f->
löe
);

606  
NGX_CONF_ERROR
;

609 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

610 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

613 
c⁄f
->
fûe
, c⁄f->
löe
);

614  
NGX_CONF_ERROR
;

619 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

620  
NGX_CONF_OK
;

623 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

624 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

626 "f‹ cîtifiˇã \"%V\"", &
c⁄f
->
˚πifiˇã
);

627  
NGX_CONF_ERROR
;

631 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, c⁄fË!
NGX_OK
) {

632  
NGX_CONF_ERROR
;

635 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


637 i‡(
	`SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
c⁄f
->
s¶
.
˘x
,

638 
ngx_hâp_s¶_£rvî«me
)

641 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

649 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


650 
	`SSL_CTX_£t_Æ≤_£À˘_cb
(
c⁄f
->
s¶
.
˘x
, 
ngx_hâp_s¶_Æ≤_£À˘
, 
NULL
);

653 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


654 
	`SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
c⁄f
->
s¶
.
˘x
,

655 
ngx_hâp_s¶_≈n_advîti£d
, 
NULL
);

658 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

659 i‡(
˛n
 =
NULL
) {

660  
NGX_CONF_ERROR
;

663 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

664 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

666 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

667 &
c⁄f
->
˚πifiˇã_key
, c⁄f->
∑ssw‹ds
)

668 !
NGX_OK
)

670  
NGX_CONF_ERROR
;

673 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

674 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

677 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

679 &
c⁄f
->
cùhîs
);

680  
NGX_CONF_ERROR
;

683 
c⁄f
->
s¶
.
buf„r_size
 = conf->buffer_size;

685 i‡(
c⁄f
->
vîify
) {

687 i‡(
c⁄f
->
˛õ¡_˚πifiˇã
.
Àn
 =0 && c⁄f->
vîify
 != 3) {

688 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

690  
NGX_CONF_ERROR
;

693 i‡(
	`ngx_s¶_˛õ¡_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

694 &
c⁄f
->
˛õ¡_˚πifiˇã
,

695 
c⁄f
->
vîify_dïth
)

696 !
NGX_OK
)

698  
NGX_CONF_ERROR
;

702 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

703 &
c⁄f
->
åu°ed_˚πifiˇã
,

704 
c⁄f
->
vîify_dïth
)

705 !
NGX_OK
)

707  
NGX_CONF_ERROR
;

710 i‡(
	`ngx_s¶_¸l
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
¸l
Ë!
NGX_OK
) {

711  
NGX_CONF_ERROR
;

714 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

715 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

718 #i‚de‡
LIBRESSL_VERSION_NUMBER


720 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

723 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

724  
NGX_CONF_ERROR
;

727 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

728  
NGX_CONF_ERROR
;

731 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

732 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

734 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

735 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

738 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_hâp_s¶_£ss_id_˘x
,

739 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

740 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

741 !
NGX_OK
)

743  
NGX_CONF_ERROR
;

746 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_tickës
, 
¥ev
->session_tickets, 1);

748 #ifde‡
SSL_OP_NO_TICKET


749 i‡(!
c⁄f
->
£ssi⁄_tickës
) {

750 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_NO_TICKET
);

754 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£ssi⁄_tickë_keys
,

755 
¥ev
->
£ssi⁄_tickë_keys
, 
NULL
);

757 i‡(
	`ngx_s¶_£ssi⁄_tickë_keys
(
cf
, &
c⁄f
->
s¶
, c⁄f->
£ssi⁄_tickë_keys
)

758 !
NGX_OK
)

760  
NGX_CONF_ERROR
;

763 i‡(
c⁄f
->
°≠lög
) {

765 i‡(
	`ngx_s¶_°≠lög
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
°≠lög_fûe
,

766 &
c⁄f
->
°≠lög_ª•⁄dî
, c⁄f->
°≠lög_vîify
)

767 !
NGX_OK
)

769  
NGX_CONF_ERROR
;

774  
NGX_CONF_OK
;

775 
	}
}

779 
	$ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

781 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

783 *
rv
;

785 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

787 i‡(
rv
 !
NGX_CONF_OK
) {

788  
rv
;

791 
sscf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

792 
sscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

794  
NGX_CONF_OK
;

795 
	}
}

799 
	$ngx_hâp_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

801 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

803 
ngx_°r_t
 *
vÆue
;

805 i‡(
sscf
->
∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

809 
vÆue
 = 
cf
->
¨gs
->
ñts
;

811 
sscf
->
∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

813 i‡(
sscf
->
∑ssw‹ds
 =
NULL
) {

814  
NGX_CONF_ERROR
;

817  
NGX_CONF_OK
;

818 
	}
}

822 
	$ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

824 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

826 
size_t
 
Àn
;

827 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

828 
ngx_öt_t
 
n
;

829 
ngx_uöt_t
 
i
, 
j
;

831 
vÆue
 = 
cf
->
¨gs
->
ñts
;

833 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

835 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

836 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

840 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

841 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

845 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

846 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

850 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

851 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

854 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

855 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

857 i‡(
n
 =
NGX_ERROR
) {

858 
övÆid
;

861 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

866 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

867 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

870 
Àn
 = 0;

872 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

873 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

877 
Àn
++;

880 i‡(
Àn
 == 0) {

881 
övÆid
;

884 
«me
.
Àn
 =Üen;

885 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

887 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

888 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

890 
n
 = 
	`ngx_∑r£_size
(&
size
);

892 i‡(
n
 =
NGX_ERROR
) {

893 
övÆid
;

896 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

897 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

899 &
vÆue
[
i
]);

901  
NGX_CONF_ERROR
;

904 
sscf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

905 &
ngx_hâp_s¶_moduÀ
);

906 i‡(
sscf
->
shm_z⁄e
 =
NULL
) {

907  
NGX_CONF_ERROR
;

910 
sscf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

915 
övÆid
;

918 i‡(
sscf
->
shm_z⁄e
 && sscf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

919 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

922  
NGX_CONF_OK
;

924 
övÆid
:

926 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

927 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

929  
NGX_CONF_ERROR
;

930 
	}
}

933 
ngx_öt_t


934 
	$ngx_hâp_s¶_öô
(
ngx_c⁄f_t
 *
cf
)

936 
ngx_uöt_t
 
s
;

937 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

938 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

939 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

940 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

942 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

943 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

945 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

947 
sscf
 = 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
ngx_hâp_s¶_moduÀ
.
˘x_ödex
];

949 i‡(
sscf
->
s¶
.
˘x
 =
NULL
 || !sscf->
°≠lög
) {

953 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

955 i‡(
	`ngx_s¶_°≠lög_ªsﬁvî
(
cf
, &
sscf
->
s¶
, 
˛cf
->
ªsﬁvî
,

956 
˛cf
->
ªsﬁvî_timeout
)

957 !
NGX_OK
)

959  
NGX_ERROR
;

963  
NGX_OK
;

964 
	}
}

	@src/http/modules/ngx_http_ssl_module.h

8 #i‚de‡
_NGX_HTTP_SSL_H_INCLUDED_


9 
	#_NGX_HTTP_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
ngx_Êag_t
 
	míabÀ
;

20 
ngx_s¶_t
 
	ms¶
;

22 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

24 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

26 
ngx_uöt_t
 
	mvîify
;

27 
ngx_uöt_t
 
	mvîify_dïth
;

29 
size_t
 
	mbuf„r_size
;

31 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

33 
time_t
 
	m£ssi⁄_timeout
;

35 
ngx_°r_t
 
	m˚πifiˇã
;

36 
ngx_°r_t
 
	m˚πifiˇã_key
;

37 
ngx_°r_t
 
	mdh∑øm
;

38 
ngx_°r_t
 
	mecdh_curve
;

39 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

40 
ngx_°r_t
 
	måu°ed_˚πifiˇã
;

41 
ngx_°r_t
 
	m¸l
;

43 
ngx_°r_t
 
	mcùhîs
;

45 
ngx_¨øy_t
 *
	m∑ssw‹ds
;

47 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

49 
ngx_Êag_t
 
	m£ssi⁄_tickës
;

50 
ngx_¨øy_t
 *
	m£ssi⁄_tickë_keys
;

52 
ngx_Êag_t
 
	m°≠lög
;

53 
ngx_Êag_t
 
	m°≠lög_vîify
;

54 
ngx_°r_t
 
	m°≠lög_fûe
;

55 
ngx_°r_t
 
	m°≠lög_ª•⁄dî
;

57 
u_ch¨
 *
	mfûe
;

58 
ngx_uöt_t
 
	mlöe
;

59 } 
	tngx_hâp_s¶_§v_c⁄f_t
;

62 
ngx_moduÀ_t
 
ngx_hâp_s¶_moduÀ
;

	@src/http/modules/ngx_http_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

17 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ_˘x
 = {

18 
NULL
,

19 
ngx_hâp_°©ic_öô
,

21 
NULL
,

22 
NULL
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL


32 
ngx_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ
 = {

33 
NGX_MODULE_V1
,

34 &
ngx_hâp_°©ic_moduÀ_˘x
,

35 
NULL
,

36 
NGX_HTTP_MODULE
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NGX_MODULE_V1_PADDING


48 
ngx_öt_t


49 
	$ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

51 
u_ch¨
 *
œ°
, *
loˇti⁄
;

52 
size_t
 
roŸ
, 
Àn
;

53 
ngx_°r_t
 
∑th
;

54 
ngx_öt_t
 
rc
;

55 
ngx_uöt_t
 
Àvñ
;

56 
ngx_log_t
 *
log
;

57 
ngx_buf_t
 *
b
;

58 
ngx_chaö_t
 
out
;

59 
ngx_›í_fûe_öfo_t
 
of
;

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

62 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

63  
NGX_HTTP_NOT_ALLOWED
;

66 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

67  
NGX_DECLINED
;

70 
log
 = 
r
->
c⁄√˘i⁄
->log;

77 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

78 i‡(
œ°
 =
NULL
) {

79  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

82 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

84 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

85 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

87 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

89 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

91 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

92 
of
.
dúe˘io
 = 
˛cf
->directio;

93 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

94 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

95 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

96 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

98 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

99  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

102 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

103 !
NGX_OK
)

105 
of
.
îr
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

110 
NGX_ENOENT
:

111 
NGX_ENOTDIR
:

112 
NGX_ENAMETOOLONG
:

114 
Àvñ
 = 
NGX_LOG_ERR
;

115 
rc
 = 
NGX_HTTP_NOT_FOUND
;

118 
NGX_EACCES
:

119 #i‡(
NGX_HAVE_OPENAT
)

120 
NGX_EMLINK
:

121 
NGX_ELOOP
:

124 
Àvñ
 = 
NGX_LOG_ERR
;

125 
rc
 = 
NGX_HTTP_FORBIDDEN
;

130 
Àvñ
 = 
NGX_LOG_CRIT
;

131 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

135 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

136 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

137 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

140  
rc
;

143 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

145 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

147 i‡(
of
.
is_dú
) {

149 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

151 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

153 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

154 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

155  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

158 
Àn
 = 
r
->
uri
.len + 1;

160 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
 && 
r
->
¨gs
.
Àn
 == 0) {

161 
loˇti⁄
 = 
∑th
.
d©a
 + 
˛cf
->
roŸ
.
Àn
;

163 *
œ°
 = '/';

166 i‡(
r
->
¨gs
.
Àn
) {

167 
Àn
 +
r
->
¨gs
.len + 1;

170 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

171 i‡(
loˇti⁄
 =
NULL
) {

172  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

175 
œ°
 = 
	`ngx_c›y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

177 *
œ°
 = '/';

179 i‡(
r
->
¨gs
.
Àn
) {

180 *++
œ°
 = '?';

181 
	`ngx_mem˝y
(++
œ°
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

190 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

191 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

193  
NGX_HTTP_MOVED_PERMANENTLY
;

196 #i‡!(
NGX_WIN32
)

198 i‡(!
of
.
is_fûe
) {

199 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

200 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

202  
NGX_HTTP_NOT_FOUND
;

207 i‡(
r
->
mëhod
 & 
NGX_HTTP_POST
) {

208  
NGX_HTTP_NOT_ALLOWED
;

211 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

213 i‡(
rc
 !
NGX_OK
) {

214  
rc
;

217 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

219 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

220 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

221 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

223 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

224  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

227 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

228  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

231 i‡(
r
 !r->
maö
 && 
of
.
size
 == 0) {

232  
	`ngx_hâp_£nd_hódî
(
r
);

235 
r
->
Ælow_ønges
 = 1;

239 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

240 i‡(
b
 =
NULL
) {

241  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

244 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

245 i‡(
b
->
fûe
 =
NULL
) {

246  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

249 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

251 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

252  
rc
;

255 
b
->
fûe_pos
 = 0;

256 
b
->
fûe_œ°
 = 
of
.
size
;

258 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

259 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

260 
b
->
œ°_ö_chaö
 = 1;

262 
b
->
fûe
->
fd
 = 
of
.fd;

263 
b
->
fûe
->
«me
 = 
∑th
;

264 
b
->
fûe
->
log
 =Üog;

265 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

267 
out
.
buf
 = 
b
;

268 
out
.
√xt
 = 
NULL
;

270  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

271 
	}
}

274 
ngx_öt_t


275 
	$ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

277 
ngx_hâp_h™dÀr_±
 *
h
;

278 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

280 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

282 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

283 i‡(
h
 =
NULL
) {

284  
NGX_ERROR
;

287 *
h
 = 
ngx_hâp_°©ic_h™dÀr
;

289  
NGX_OK
;

290 
	}
}

	@src/http/modules/ngx_http_stub_status_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°ub_°©us_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_°ub_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

16 
ngx_öt_t
 
ngx_hâp_°ub_°©us_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

17 *
ngx_hâp_£t_°ub_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

18 *
c⁄f
);

21 
ngx_comm™d_t
 
	gngx_hâp_°©us_comm™ds
[] = {

23 { 
ngx_°rög
("stub_status"),

24 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
|
NGX_CONF_TAKE1
,

25 
ngx_hâp_£t_°ub_°©us
,

28 
NULL
 },

30 
ngx_nuŒ_comm™d


34 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ_˘x
 = {

35 
ngx_hâp_°ub_°©us_add_v¨übÀs
,

36 
NULL
,

38 
NULL
,

39 
NULL
,

41 
NULL
,

42 
NULL
,

44 
NULL
,

45 
NULL


49 
ngx_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ
 = {

50 
NGX_MODULE_V1
,

51 &
ngx_hâp_°ub_°©us_moduÀ_˘x
,

52 
ngx_hâp_°©us_comm™ds
,

53 
NGX_HTTP_MODULE
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NGX_MODULE_V1_PADDING


65 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_°ub_°©us_v¨s
[] = {

67 { 
ngx_°rög
("c⁄√˘i⁄s_a˘ive"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

68 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

70 { 
ngx_°rög
("c⁄√˘i⁄s_ªadög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

71 1, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

73 { 
ngx_°rög
("c⁄√˘i⁄s_wrôög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

74 2, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

76 { 
ngx_°rög
("c⁄√˘i⁄s_waôög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

77 3, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

79 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

83 
ngx_öt_t


84 
	$ngx_hâp_°ub_°©us_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

86 
size_t
 
size
;

87 
ngx_öt_t
 
rc
;

88 
ngx_buf_t
 *
b
;

89 
ngx_chaö_t
 
out
;

90 
ngx_©omic_öt_t
 
≠
, 
hn
, 
ac
, 
rq
, 
rd
, 
wr
, 
wa
;

92 i‡(
r
->
mëhod
 !
NGX_HTTP_GET
 &&Ñ->mëhod !
NGX_HTTP_HEAD
) {

93  
NGX_HTTP_NOT_ALLOWED
;

96 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

98 i‡(
rc
 !
NGX_OK
) {

99  
rc
;

102 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/plain") - 1;

103 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/plain");

104 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

106 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

107 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

109 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

111 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

112  
rc
;

116 
size
 = ("A˘ivêc⁄√˘i⁄s: \n"Ë+ 
NGX_ATOMIC_T_LEN


118 + 6 + 3 * 
NGX_ATOMIC_T_LEN


119 + ("Ródög: Wrôög: Waôög: \n"Ë+ 3 * 
NGX_ATOMIC_T_LEN
;

121 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

122 i‡(
b
 =
NULL
) {

123  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

126 
out
.
buf
 = 
b
;

127 
out
.
√xt
 = 
NULL
;

129 
≠
 = *
ngx_°©_ac˚±ed
;

130 
hn
 = *
ngx_°©_h™dÀd
;

131 
ac
 = *
ngx_°©_a˘ive
;

132 
rq
 = *
ngx_°©_ªque°s
;

133 
rd
 = *
ngx_°©_ªadög
;

134 
wr
 = *
ngx_°©_wrôög
;

135 
wa
 = *
ngx_°©_waôög
;

137 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "A˘ivêc⁄√˘i⁄s: %uA \n", 
ac
);

139 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "serveráccepts handledÑequests\n",

142 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %uA %uA %uA \n", 
≠
, 
hn
, 
rq
);

144 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "Reading: %uA Writing: %uA Waiting: %uA \n",

145 
rd
, 
wr
, 
wa
);

147 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

148 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

150 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

151 
b
->
œ°_ö_chaö
 = 1;

153 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

155 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

156  
rc
;

159  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

160 
	}
}

163 
ngx_öt_t


164 
	$ngx_hâp_°ub_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

165 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

167 
u_ch¨
 *
p
;

168 
ngx_©omic_öt_t
 
vÆue
;

170 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

171 i‡(
p
 =
NULL
) {

172  
NGX_ERROR
;

175 
d©a
) {

177 
vÆue
 = *
ngx_°©_a˘ive
;

181 
vÆue
 = *
ngx_°©_ªadög
;

185 
vÆue
 = *
ngx_°©_wrôög
;

189 
vÆue
 = *
ngx_°©_waôög
;

194 
vÆue
 = 0;

198 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
vÆue
) -Ö;

199 
v
->
vÆid
 = 1;

200 
v
->
no_ˇchóbÀ
 = 0;

201 
v
->
nŸ_found
 = 0;

202 
v
->
d©a
 = 
p
;

204  
NGX_OK
;

205 
	}
}

208 
ngx_öt_t


209 
	$ngx_hâp_°ub_°©us_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

211 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

213 
v
 = 
ngx_hâp_°ub_°©us_v¨s
; v->
«me
.
Àn
; v++) {

214 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

215 i‡(
v¨
 =
NULL
) {

216  
NGX_ERROR
;

219 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

220 
v¨
->
d©a
 = 
v
->data;

223  
NGX_OK
;

224 
	}
}

228 
	$ngx_hâp_£t_°ub_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

230 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

232 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

233 
˛cf
->
h™dÀr
 = 
ngx_hâp_°ub_°©us_h™dÀr
;

235  
NGX_CONF_OK
;

236 
	}
}

	@src/http/modules/ngx_http_sub_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mm©ch
;

15 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

17 
ngx_hash_t
 
	mty≥s
;

19 
ngx_Êag_t
 
	m⁄˚
;

20 
ngx_Êag_t
 
	mœ°_modifõd
;

22 
ngx_¨øy_t
 *
	mty≥s_keys
;

23 } 
	tngx_hâp_sub_loc_c⁄f_t
;

27 
	msub_°¨t_°©e
 = 0,

28 
	msub_m©ch_°©e
,

29 } 
	tngx_hâp_sub_°©e_e
;

33 
ngx_°r_t
 
	mm©ch
;

34 
ngx_°r_t
 
	mßved
;

35 
ngx_°r_t
 
	mlooked
;

37 
ngx_uöt_t
 
	m⁄˚
;

39 
ngx_buf_t
 *
	mbuf
;

41 
u_ch¨
 *
	mpos
;

42 
u_ch¨
 *
	mc›y_°¨t
;

43 
u_ch¨
 *
	mc›y_íd
;

45 
ngx_chaö_t
 *
	mö
;

46 
ngx_chaö_t
 *
	mout
;

47 
ngx_chaö_t
 **
	mœ°_out
;

48 
ngx_chaö_t
 *
	mbusy
;

49 
ngx_chaö_t
 *
	m‰ì
;

51 
ngx_°r_t
 
	msub
;

53 
ngx_uöt_t
 
	m°©e
;

54 } 
	tngx_hâp_sub_˘x_t
;

57 
ngx_öt_t
 
ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

58 
ngx_hâp_sub_˘x_t
 *
˘x
);

59 
ngx_öt_t
 
ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

60 
ngx_hâp_sub_˘x_t
 *
˘x
);

62 * 
ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

65 *
ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

66 *
∑ª¡
, *
chûd
);

67 
ngx_öt_t
 
ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

70 
ngx_comm™d_t
 
	gngx_hâp_sub_fûãr_comm™ds
[] = {

72 { 
ngx_°rög
("sub_filter"),

73 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

74 
ngx_hâp_sub_fûãr
,

75 
NGX_HTTP_LOC_CONF_OFFSET
,

77 
NULL
 },

79 { 
ngx_°rög
("sub_filter_types"),

80 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

81 
ngx_hâp_ty≥s_¶Ÿ
,

82 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
ty≥s_keys
),

84 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

86 { 
ngx_°rög
("sub_filter_once"),

87 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
⁄˚
),

91 
NULL
 },

93 { 
ngx_°rög
("sub_filter_last_modified"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

95 
ngx_c⁄f_£t_Êag_¶Ÿ
,

96 
NGX_HTTP_LOC_CONF_OFFSET
,

97 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
œ°_modifõd
),

98 
NULL
 },

100 
ngx_nuŒ_comm™d


104 
ngx_hâp_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ_˘x
 = {

105 
NULL
,

106 
ngx_hâp_sub_fûãr_öô
,

108 
NULL
,

109 
NULL
,

111 
NULL
,

112 
NULL
,

114 
ngx_hâp_sub_¸óã_c⁄f
,

115 
ngx_hâp_sub_mîge_c⁄f


119 
ngx_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ
 = {

120 
NGX_MODULE_V1
,

121 &
ngx_hâp_sub_fûãr_moduÀ_˘x
,

122 
ngx_hâp_sub_fûãr_comm™ds
,

123 
NGX_HTTP_MODULE
,

124 
NULL
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NGX_MODULE_V1_PADDING


135 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

136 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

139 
ngx_öt_t


140 
	$ngx_hâp_sub_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

142 
ngx_hâp_sub_˘x_t
 *
˘x
;

143 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

145 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

147 i‡(
¶cf
->
m©ch
.
Àn
 == 0

148 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

149 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

151  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

154 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_sub_˘x_t
));

155 i‡(
˘x
 =
NULL
) {

156  
NGX_ERROR
;

159 
˘x
->
ßved
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

160 i‡(
˘x
->
ßved
.
d©a
 =
NULL
) {

161  
NGX_ERROR
;

164 
˘x
->
looked
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

165 i‡(
˘x
->
looked
.
d©a
 =
NULL
) {

166  
NGX_ERROR
;

169 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_sub_fûãr_moduÀ
);

171 
˘x
->
m©ch
 = 
¶cf
->match;

172 
˘x
->
œ°_out
 = &˘x->
out
;

174 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

176 i‡(
r
 =r->
maö
) {

177 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

179 i‡(!
¶cf
->
œ°_modifõd
) {

180 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

181 
	`ngx_hâp_˛ór_ëag
(
r
);

184 
	`ngx_hâp_wók_ëag
(
r
);

188  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

189 
	}
}

192 
ngx_öt_t


193 
	$ngx_hâp_sub_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

195 
ngx_öt_t
 
rc
;

196 
ngx_buf_t
 *
b
;

197 
ngx_chaö_t
 *
˛
;

198 
ngx_hâp_sub_˘x_t
 *
˘x
;

199 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

201 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

203 i‡(
˘x
 =
NULL
) {

204  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

207 i‡((
ö
 =
NULL


208 && 
˘x
->
buf
 =
NULL


209 && 
˘x
->
ö
 =
NULL


210 && 
˘x
->
busy
 =
NULL
))

212  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

215 i‡(
˘x
->
⁄˚
 && (˘x->
buf
 =
NULL
 || ctx->
ö
 == NULL)) {

217 i‡(
˘x
->
busy
) {

218 i‡(
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

219  
NGX_ERROR
;

223  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

228 i‡(
ö
) {

229 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

230  
NGX_ERROR
;

234 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

235 "hâ∞sub fûã∏\"%V\"", &
r
->
uri
);

237 
˘x
->
ö
 || ctx->
buf
) {

239 i‡(
˘x
->
buf
 =
NULL
) {

240 
˘x
->
buf
 = ctx->
ö
->buf;

241 
˘x
->
ö
 = ctx->ö->
√xt
;

242 
˘x
->
pos
 = ctx->
buf
->pos;

245 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

246 
˘x
->
c›y_°¨t
 = ctx->
pos
;

247 
˘x
->
c›y_íd
 = ctx->
pos
;

250 
b
 = 
NULL
;

252 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

254 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

255 "ßved: \"%V\" sèã: %d", &
˘x
->
ßved
, ctx->
°©e
);

257 
rc
 = 
	`ngx_hâp_sub_∑r£
(
r
, 
˘x
);

259 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

261 
rc
, &
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

263 i‡(
rc
 =
NGX_ERROR
) {

264  
rc
;

267 i‡(
˘x
->
ßved
.
Àn
) {

269 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

270 "ßved: \"%V\"", &
˘x
->
ßved
);

272 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

273 i‡(
˛
 =
NULL
) {

274  
NGX_ERROR
;

277 
b
 = 
˛
->
buf
;

279 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

281 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
ßved
.
Àn
);

282 i‡(
b
->
pos
 =
NULL
) {

283  
NGX_ERROR
;

286 
	`ngx_mem˝y
(
b
->
pos
, 
˘x
->
ßved
.
d©a
, ctx->ßved.
Àn
);

287 
b
->
œ°
 = b->
pos
 + 
˘x
->
ßved
.
Àn
;

288 
b
->
mem‹y
 = 1;

290 *
˘x
->
œ°_out
 = 
˛
;

291 
˘x
->
œ°_out
 = &
˛
->
√xt
;

293 
˘x
->
ßved
.
Àn
 = 0;

296 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

298 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

299 i‡(
˛
 =
NULL
) {

300  
NGX_ERROR
;

303 
b
 = 
˛
->
buf
;

305 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

307 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

308 
b
->
œ°
 = 
˘x
->
c›y_íd
;

309 
b
->
shadow
 = 
NULL
;

310 
b
->
œ°_buf
 = 0;

311 
b
->
œ°_ö_chaö
 = 0;

312 
b
->
ªcy˛ed
 = 0;

314 i‡(
b
->
ö_fûe
) {

315 
b
->
fûe_œ°
 = b->
fûe_pos
 + (b->
œ°
 - 
˘x
->
buf
->
pos
);

316 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

319 *
˘x
->
œ°_out
 = 
˛
;

320 
˘x
->
œ°_out
 = &
˛
->
√xt
;

323 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

324 
˘x
->
c›y_°¨t
 = ctx->
pos
;

325 
˘x
->
c›y_íd
 = ctx->
pos
;

328 
˘x
->
c›y_°¨t
 = 
NULL
;

329 
˘x
->
c›y_íd
 = 
NULL
;

332 i‡(
˘x
->
looked
.
Àn
 > (
size_t
Ë(˘x->
pos
 - ctx->
buf
->pos)) {

333 
˘x
->
ßved
.
Àn
 = ctx->
looked
.À¿- (˘x->
pos
 - ctx->
buf
->pos);

334 
	`ngx_mem˝y
(
˘x
->
ßved
.
d©a
, ctx->
looked
.d©a, ctx->ßved.
Àn
);

337 i‡(
rc
 =
NGX_AGAIN
) {

344 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

345 i‡(
˛
 =
NULL
) {

346  
NGX_ERROR
;

349 
b
 = 
˛
->
buf
;

351 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

353 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

355 i‡(
˘x
->
sub
.
d©a
 =
NULL
) {

357 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¶cf
->
vÆue
, &
˘x
->
sub
)

358 !
NGX_OK
)

360  
NGX_ERROR
;

364 i‡(
˘x
->
sub
.
Àn
) {

365 
b
->
mem‹y
 = 1;

366 
b
->
pos
 = 
˘x
->
sub
.
d©a
;

367 
b
->
œ°
 = 
˘x
->
sub
.
d©a
 + ctx->sub.
Àn
;

370 
b
->
sync
 = 1;

373 *
˘x
->
œ°_out
 = 
˛
;

374 
˘x
->
œ°_out
 = &
˛
->
√xt
;

376 
˘x
->
⁄˚
 = 
¶cf
->once;

381 i‡(
˘x
->
looked
.
Àn


382 && (
˘x
->
buf
->
œ°_buf
 || ctx->buf->
œ°_ö_chaö
))

384 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

385 i‡(
˛
 =
NULL
) {

386  
NGX_ERROR
;

389 
b
 = 
˛
->
buf
;

391 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

393 
b
->
pos
 = 
˘x
->
looked
.
d©a
;

394 
b
->
œ°
 = b->
pos
 + 
˘x
->
looked
.
Àn
;

395 
b
->
mem‹y
 = 1;

397 *
˘x
->
œ°_out
 = 
˛
;

398 
˘x
->
œ°_out
 = &
˛
->
√xt
;

400 
˘x
->
looked
.
Àn
 = 0;

403 i‡(
˘x
->
buf
->
œ°_buf
 || ctx->buf->
Êush
 || ctx->buf->
sync


404 || 
	`ngx_buf_ö_mem‹y
(
˘x
->
buf
))

406 i‡(
b
 =
NULL
) {

407 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

408 i‡(
˛
 =
NULL
) {

409  
NGX_ERROR
;

412 
b
 = 
˛
->
buf
;

414 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

416 
b
->
sync
 = 1;

418 *
˘x
->
œ°_out
 = 
˛
;

419 
˘x
->
œ°_out
 = &
˛
->
√xt
;

422 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

423 
b
->
œ°_ö_chaö
 = 
˘x
->
buf
->last_in_chain;

424 
b
->
Êush
 = 
˘x
->
buf
->flush;

425 
b
->
shadow
 = 
˘x
->
buf
;

427 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

430 
˘x
->
buf
 = 
NULL
;

432 
˘x
->
ßved
.
Àn
 = ctx->
looked
.len;

433 
	`ngx_mem˝y
(
˘x
->
ßved
.
d©a
, ctx->
looked
.d©a, ctx->looked.
Àn
);

436 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

437  
NGX_OK
;

440  
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
);

441 
	}
}

444 
ngx_öt_t


445 
	$ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

447 
ngx_öt_t
 
rc
;

448 
ngx_buf_t
 *
b
;

449 
ngx_chaö_t
 *
˛
;

452 
b
 = 
NULL
;

453 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

454 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

455 "sub out: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

456 i‡(
˛
->
buf
 =
b
) {

457 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

459 
	`ngx_debug_poöt
();

460  
NGX_ERROR
;

462 
b
 = 
˛
->
buf
;

466 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

468 i‡(
˘x
->
busy
 =
NULL
) {

469 
˘x
->
busy
 = ctx->
out
;

472 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

473 
˛
->
√xt
 = 
˘x
->
out
;

476 
˘x
->
out
 = 
NULL
;

477 
˘x
->
œ°_out
 = &˘x->
out
;

479 
˘x
->
busy
) {

481 
˛
 = 
˘x
->
busy
;

482 
b
 = 
˛
->
buf
;

484 i‡(
	`ngx_buf_size
(
b
) != 0) {

488 i‡(
b
->
shadow
) {

489 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

492 
˘x
->
busy
 = 
˛
->
√xt
;

494 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

497 
˛
->
√xt
 = 
˘x
->
‰ì
;

498 
˘x
->
‰ì
 = 
˛
;

502 i‡(
˘x
->
ö
 || ctx->
buf
) {

503 
r
->
buf„ªd
 |
NGX_HTTP_SUB_BUFFERED
;

506 
r
->
buf„ªd
 &~
NGX_HTTP_SUB_BUFFERED
;

509  
rc
;

510 
	}
}

513 
ngx_öt_t


514 
	$ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

516 
u_ch¨
 *
p
, *
œ°
, *
c›y_íd
, 
ch
, 
m©ch
;

517 
size_t
 
looked
, 
i
;

518 
ngx_hâp_sub_°©e_e
 
°©e
;

520 i‡(
˘x
->
⁄˚
) {

521 
˘x
->
c›y_°¨t
 = ctx->
pos
;

522 
˘x
->
c›y_íd
 = ctx->
buf
->
œ°
;

523 
˘x
->
pos
 = ctx->
buf
->
œ°
;

524 
˘x
->
looked
.
Àn
 = 0;

526 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "once");

528  
NGX_AGAIN
;

531 
°©e
 = 
˘x
->state;

532 
looked
 = 
˘x
->looked.
Àn
;

533 
œ°
 = 
˘x
->
buf
->last;

534 
c›y_íd
 = 
˘x
->copy_end;

536 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

538 
ch
 = *
p
;

539 
ch
 = 
	`ngx_tﬁowî
(ch);

541 i‡(
°©e
 =
sub_°¨t_°©e
) {

545 
m©ch
 = 
˘x
->m©ch.
d©a
[0];

548 i‡(
ch
 =
m©ch
) {

550 i‡(
˘x
->
m©ch
.
Àn
 == 1) {

551 
˘x
->
pos
 = 
p
 + 1;

552 
˘x
->
c›y_íd
 = 
p
;

554  
NGX_OK
;

557 
c›y_íd
 = 
p
;

558 
˘x
->
looked
.
d©a
[0] = *
p
;

559 
looked
 = 1;

560 
°©e
 = 
sub_m©ch_°©e
;

562 
m©ch_°¨ãd
;

565 i‡(++
p
 =
œ°
) {

569 
ch
 = *
p
;

570 
ch
 = 
	`ngx_tﬁowî
(ch);

573 
˘x
->
°©e
 = state;

574 
˘x
->
pos
 = 
p
;

575 
˘x
->
looked
.
Àn
 =Üooked;

576 
˘x
->
c›y_íd
 = 
p
;

578 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

579 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

582  
NGX_AGAIN
;

584 
m©ch_°¨ãd
:

591 i‡(
ch
 =
˘x
->
m©ch
.
d©a
[
looked
]) {

592 
˘x
->
looked
.
d©a
[looked] = *
p
;

593 
looked
++;

595 i‡(
looked
 =
˘x
->
m©ch
.
Àn
) {

597 
˘x
->
°©e
 = 
sub_°¨t_°©e
;

598 
˘x
->
pos
 = 
p
 + 1;

599 
˘x
->
looked
.
Àn
 = 0;

600 
˘x
->
ßved
.
Àn
 = 0;

601 
˘x
->
c›y_íd
 = copy_end;

603 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

604 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

607  
NGX_OK
;

616 
˘x
->
looked
.
d©a
[looked] = *
p
;

617 
looked
++;

619 
i
 = 1; i < 
looked
; i++) {

620 i‡(
	`ngx_°∫ˇ£cmp
(
˘x
->
looked
.
d©a
 + 
i
,

621 
˘x
->
m©ch
.
d©a
, 
looked
 - 
i
)

628 i‡(
i
 < 
looked
) {

629 i‡(
˘x
->
ßved
.
Àn
 > 
i
) {

630 
˘x
->
ßved
.
Àn
 = 
i
;

633 i‡((
size_t
Ë(
p
 + 1 - 
˘x
->
buf
->
pos
Ë>
looked
 - 
i
) {

634 
c›y_íd
 = 
p
 + 1 - (
looked
 - 
i
);

637 
	`ngx_memmove
(
˘x
->
looked
.
d©a
, ctx->looked.d©®+ 
i
,Üooked - i);

638 
looked
 =Üooked - 
i
;

641 
c›y_íd
 = 
p
;

642 
looked
 = 0;

643 
°©e
 = 
sub_°¨t_°©e
;

646 i‡(
˘x
->
ßved
.
Àn
) {

647 
p
++;

648 
out
;

653 
˘x
->
ßved
.
Àn
 = 0;

655 
out
:

657 
˘x
->
°©e
 = state;

658 
˘x
->
pos
 = 
p
;

659 
˘x
->
looked
.
Àn
 =Üooked;

661 
˘x
->
c›y_íd
 = (
°©e
 =
sub_°¨t_°©e
Ë? 
p
 : copy_end;

663 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

664 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

667  
NGX_AGAIN
;

668 
	}
}

672 
	$ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

674 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
 = 
c⁄f
;

676 
ngx_°r_t
 *
vÆue
;

677 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

679 i‡(
¶cf
->
m©ch
.
d©a
) {

683 
vÆue
 = 
cf
->
¨gs
->
ñts
;

685 
	`ngx_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

687 
¶cf
->
m©ch
 = 
vÆue
[1];

689 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

691 
ccv
.
cf
 = cf;

692 
ccv
.
vÆue
 = &value[2];

693 
ccv
.
com∂ex_vÆue
 = &
¶cf
->
vÆue
;

695 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

696  
NGX_CONF_ERROR
;

699  
NGX_CONF_OK
;

700 
	}
}

704 
	$ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

706 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

708 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_sub_loc_c⁄f_t
));

709 i‡(
¶cf
 =
NULL
) {

710  
NULL
;

721 
¶cf
->
⁄˚
 = 
NGX_CONF_UNSET
;

722 
¶cf
->
œ°_modifõd
 = 
NGX_CONF_UNSET
;

724  
¶cf
;

725 
	}
}

729 
	$ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

731 
ngx_hâp_sub_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

732 
ngx_hâp_sub_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

734 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
⁄˚
, 
¥ev
->once, 1);

735 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
m©ch
, 
¥ev
->match, "");

736 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
œ°_modifõd
, 
¥ev
->last_modified, 0);

738 i‡(
c⁄f
->
vÆue
.vÆue.
d©a
 =
NULL
) {

739 
c⁄f
->
vÆue
 = 
¥ev
->value;

742 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

743 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

744 
ngx_hâp_html_deÁu…_ty≥s
)

745 !
NGX_OK
)

747  
NGX_CONF_ERROR
;

750  
NGX_CONF_OK
;

751 
	}
}

754 
ngx_öt_t


755 
	$ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

757 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

758 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_sub_hódî_fûãr
;

760 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

761 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_sub_body_fûãr
;

763  
NGX_OK
;

764 
	}
}

	@src/http/modules/ngx_http_upstream_hash_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
uöt32_t
 
	mhash
;

15 
ngx_°r_t
 *
	m£rvî
;

16 } 
	tngx_hâp_up°ªam_chash_poöt_t
;

20 
ngx_uöt_t
 
	mnumbî
;

21 
ngx_hâp_up°ªam_chash_poöt_t
 
	mpoöt
[1];

22 } 
	tngx_hâp_up°ªam_chash_poöts_t
;

26 
ngx_hâp_com∂ex_vÆue_t
 
	mkey
;

27 
ngx_hâp_up°ªam_chash_poöts_t
 *
	mpoöts
;

28 } 
	tngx_hâp_up°ªam_hash_§v_c⁄f_t
;

33 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

34 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
	mc⁄f
;

35 
ngx_°r_t
 
	mkey
;

36 
ngx_uöt_t
 
	måõs
;

37 
ngx_uöt_t
 
	mªhash
;

38 
uöt32_t
 
	mhash
;

39 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

40 } 
	tngx_hâp_up°ªam_hash_≥î_d©a_t
;

43 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_hash
(
ngx_c⁄f_t
 *
cf
,

44 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

45 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

47 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

48 *
d©a
);

50 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_chash
(
ngx_c⁄f_t
 *
cf
,

51 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

52 
ngx_libc_cde˛


53 
ngx_hâp_up°ªam_chash_cmp_poöts
(c⁄° *
⁄e
, c⁄° *
two
);

54 
ngx_uöt_t
 
ngx_hâp_up°ªam_föd_chash_poöt
(

55 
ngx_hâp_up°ªam_chash_poöts_t
 *
poöts
, 
uöt32_t
 
hash
);

56 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_chash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

58 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_chash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

59 *
d©a
);

61 *
ngx_hâp_up°ªam_hash_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

62 *
ngx_hâp_up°ªam_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

66 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_hash_comm™ds
[] = {

68 { 
ngx_°rög
("hash"),

69 
NGX_HTTP_UPS_CONF
|
NGX_CONF_TAKE12
,

70 
ngx_hâp_up°ªam_hash
,

71 
NGX_HTTP_SRV_CONF_OFFSET
,

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_hash_moduÀ_˘x
 = {

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
ngx_hâp_up°ªam_hash_¸óã_c⁄f
,

87 
NULL
,

89 
NULL
,

90 
NULL


94 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_hash_moduÀ
 = {

95 
NGX_MODULE_V1
,

96 &
ngx_hâp_up°ªam_hash_moduÀ_˘x
,

97 
ngx_hâp_up°ªam_hash_comm™ds
,

98 
NGX_HTTP_MODULE
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NGX_MODULE_V1_PADDING


110 
ngx_öt_t


111 
	$ngx_hâp_up°ªam_öô_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

113 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

114  
NGX_ERROR
;

117 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_hash_≥î
;

119  
NGX_OK
;

120 
	}
}

123 
ngx_öt_t


124 
	$ngx_hâp_up°ªam_öô_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

127 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

128 
ngx_hâp_up°ªam_hash_≥î_d©a_t
 *
hp
;

130 
hp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_hash_≥î_d©a_t
));

131 i‡(
hp
 =
NULL
) {

132  
NGX_ERROR
;

135 
r
->
up°ªam
->
≥î
.
d©a
 = &
hp
->
ºp
;

137 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

138  
NGX_ERROR
;

141 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_hash_≥î
;

143 
hcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
, 
ngx_hâp_up°ªam_hash_moduÀ
);

145 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
hcf
->
key
, &
hp
->keyË!
NGX_OK
) {

146  
NGX_ERROR
;

149 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

150 "up°ªam hash key:\"%V\"", &
hp
->
key
);

152 
hp
->
c⁄f
 = 
hcf
;

153 
hp
->
åõs
 = 0;

154 
hp
->
ªhash
 = 0;

155 
hp
->
hash
 = 0;

156 
hp
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

158  
NGX_OK
;

159 
	}
}

162 
ngx_öt_t


163 
	$ngx_hâp_up°ªam_gë_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

165 
ngx_hâp_up°ªam_hash_≥î_d©a_t
 *
hp
 = 
d©a
;

167 
time_t
 
now
;

168 
u_ch¨
 
buf
[
NGX_INT_T_LEN
];

169 
size_t
 
size
;

170 
uöt32_t
 
hash
;

171 
ngx_öt_t
 
w
;

172 
uöçå_t
 
m
;

173 
ngx_uöt_t
 
i
, 
n
, 
p
;

174 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

176 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

177 "gë hashÖìr,Åry: %ui", 
pc
->
åõs
);

179 i‡(
hp
->
åõs
 > 20 || hp->
ºp
.
≥îs
->
sögÀ
) {

180  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

183 
now
 = 
	`ngx_time
();

185 
pc
->
ˇched
 = 0;

186 
pc
->
c⁄√˘i⁄
 = 
NULL
;

196 
	`ngx_¸c32_öô
(
hash
);

198 i‡(
hp
->
ªhash
 > 0) {

199 
size
 = 
	`ngx_•rötf
(
buf
, "%ui", 
hp
->
ªhash
) - buf;

200 
	`ngx_¸c32_upd©e
(&
hash
, 
buf
, 
size
);

203 
	`ngx_¸c32_upd©e
(&
hash
, 
hp
->
key
.
d©a
, hp->key.
Àn
);

204 
	`ngx_¸c32_föÆ
(
hash
);

206 
hash
 = (hash >> 16) & 0x7fff;

208 
hp
->
hash
 += hash;

209 
hp
->
ªhash
++;

211 i‡(!
hp
->
ºp
.
≥îs
->
weighãd
) {

212 
p
 = 
hp
->
hash
 % hp->
ºp
.
≥îs
->
numbî
;

215 
w
 = 
hp
->
hash
 % hp->
ºp
.
≥îs
->
tŸÆ_weight
;

217 
i
 = 0; i < 
hp
->
ºp
.
≥îs
->
numbî
; i++) {

218 
w
 -
hp
->
ºp
.
≥îs
->
≥î
[
i
].
weight
;

219 i‡(
w
 < 0) {

224 
p
 = 
i
;

227 
n
 = 
p
 / (8 * (
uöçå_t
));

228 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

230 i‡(
hp
->
ºp
.
åõd
[
n
] & 
m
) {

231 
√xt
;

234 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

235 "gë hashÖìr, vÆue:%uD,Öìr:%ui", 
hp
->
hash
, 
p
);

237 
≥î
 = &
hp
->
ºp
.
≥îs
->≥î[
p
];

239 i‡(
≥î
->
down
) {

240 
√xt
;

243 i‡(
≥î
->
max_Áûs


244 && 
≥î
->
Áûs
 >≥î->
max_Áûs


245 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

247 
√xt
;

252 
√xt
:

254 i‡(++
hp
->
åõs
 > 20) {

255  
hp
->
	`gë_º_≥î
(
pc
, &hp->
ºp
);

259 
hp
->
ºp
.
cuºít
 = 
p
;

261 
pc
->
sockaddr
 = 
≥î
->sockaddr;

262 
pc
->
sockÀn
 = 
≥î
->socklen;

263 
pc
->
«me
 = &
≥î
->name;

265 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

266 
≥î
->
checked
 = 
now
;

269 
hp
->
ºp
.
åõd
[
n
] |
m
;

271  
NGX_OK
;

272 
	}
}

275 
ngx_öt_t


276 
	$ngx_hâp_up°ªam_öô_chash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

278 
u_ch¨
 *
ho°
, *
p‹t
, 
c
;

279 
size_t
 
ho°_Àn
, 
p‹t_Àn
, 
size
;

280 
uöt32_t
 
hash
, 
ba£_hash
, 
¥ev_hash
;

281 
ngx_°r_t
 *
£rvî
;

282 
ngx_uöt_t
 
≈oöts
, 
i
, 
j
;

283 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

284 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

285 
ngx_hâp_up°ªam_chash_poöts_t
 *
poöts
;

286 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

288 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

289  
NGX_ERROR
;

292 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_chash_≥î
;

294 
≥îs
 = 
us
->
≥î
.
d©a
;

295 
≈oöts
 = 
≥îs
->
tŸÆ_weight
 * 160;

297 
size
 = (
ngx_hâp_up°ªam_chash_poöts_t
)

298 + (
ngx_hâp_up°ªam_chash_poöt_t
Ë* (
≈oöts
 - 1);

300 
poöts
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
size
);

301 i‡(
poöts
 =
NULL
) {

302  
NGX_ERROR
;

305 
poöts
->
numbî
 = 0;

307 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

308 
≥î
 = &
≥îs
->≥î[
i
];

309 
£rvî
 = &
≥î
->server;

316 i‡(
£rvî
->
Àn
 >= 5

317 && 
	`ngx_°∫ˇ£cmp
(
£rvî
->
d©a
, (
u_ch¨
 *) "unix:", 5) == 0)

319 
ho°
 = 
£rvî
->
d©a
 + 5;

320 
ho°_Àn
 = 
£rvî
->
Àn
 - 5;

321 
p‹t
 = 
NULL
;

322 
p‹t_Àn
 = 0;

323 
d⁄e
;

326 
j
 = 0; j < 
£rvî
->
Àn
; j++) {

327 
c
 = 
£rvî
->
d©a
[£rvî->
Àn
 - 
j
 - 1];

329 i‡(
c
 == ':') {

330 
ho°
 = 
£rvî
->
d©a
;

331 
ho°_Àn
 = 
£rvî
->
Àn
 - 
j
 - 1;

332 
p‹t
 = 
£rvî
->
d©a
 + sîvî->
Àn
 - 
j
;

333 
p‹t_Àn
 = 
j
;

334 
d⁄e
;

337 i‡(
c
 < '0' || c > '9') {

342 
ho°
 = 
£rvî
->
d©a
;

343 
ho°_Àn
 = 
£rvî
->
Àn
;

344 
p‹t
 = 
NULL
;

345 
p‹t_Àn
 = 0;

347 
d⁄e
:

349 
	`ngx_¸c32_öô
(
ba£_hash
);

350 
	`ngx_¸c32_upd©e
(&
ba£_hash
, 
ho°
, 
ho°_Àn
);

351 
	`ngx_¸c32_upd©e
(&
ba£_hash
, (
u_ch¨
 *) "", 1);

352 
	`ngx_¸c32_upd©e
(&
ba£_hash
, 
p‹t
, 
p‹t_Àn
);

354 
¥ev_hash
 = 0;

355 
≈oöts
 = 
≥î
->
weight
 * 160;

357 
j
 = 0; j < 
≈oöts
; j++) {

358 
hash
 = 
ba£_hash
;

360 
	`ngx_¸c32_upd©e
(&
hash
, (
u_ch¨
 *Ë&
¥ev_hash
, (
uöt32_t
));

361 
	`ngx_¸c32_föÆ
(
hash
);

363 
poöts
->
poöt
[poöts->
numbî
].
hash
 = hash;

364 
poöts
->
poöt
[poöts->
numbî
].
£rvî
 = server;

365 
poöts
->
numbî
++;

367 
¥ev_hash
 = 
hash
;

371 
	`ngx_qs‹t
(
poöts
->
poöt
,

372 
poöts
->
numbî
,

373 (
ngx_hâp_up°ªam_chash_poöt_t
),

374 
ngx_hâp_up°ªam_chash_cmp_poöts
);

376 
i
 = 0, 
j
 = 1; j < 
poöts
->
numbî
; j++) {

377 i‡(
poöts
->
poöt
[
i
].
hash
 !poöts->poöt[
j
].hash) {

378 
poöts
->
poöt
[++
i
] =Öoöts->poöt[
j
];

382 
poöts
->
numbî
 = 
i
 + 1;

384 
hcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
, 
ngx_hâp_up°ªam_hash_moduÀ
);

385 
hcf
->
poöts
 =Öoints;

387  
NGX_OK
;

388 
	}
}

391 
ngx_libc_cde˛


392 
	$ngx_hâp_up°ªam_chash_cmp_poöts
(c⁄° *
⁄e
, c⁄° *
two
)

394 
ngx_hâp_up°ªam_chash_poöt_t
 *
fú°
 =

395 (
ngx_hâp_up°ªam_chash_poöt_t
 *Ë
⁄e
;

396 
ngx_hâp_up°ªam_chash_poöt_t
 *
£c⁄d
 =

397 (
ngx_hâp_up°ªam_chash_poöt_t
 *Ë
two
;

399 i‡(
fú°
->
hash
 < 
£c⁄d
->hash) {

402 } i‡(
fú°
->
hash
 > 
£c⁄d
->hash) {

408 
	}
}

411 
ngx_uöt_t


412 
	$ngx_hâp_up°ªam_föd_chash_poöt
(
ngx_hâp_up°ªam_chash_poöts_t
 *
poöts
,

413 
uöt32_t
 
hash
)

415 
ngx_uöt_t
 
i
, 
j
, 
k
;

416 
ngx_hâp_up°ªam_chash_poöt_t
 *
poöt
;

420 
poöt
 = &
poöts
->point[0];

422 
i
 = 0;

423 
j
 = 
poöts
->
numbî
;

425 
i
 < 
j
) {

426 
k
 = (
i
 + 
j
) / 2;

428 i‡(
hash
 > 
poöt
[
k
].hash) {

429 
i
 = 
k
 + 1;

431 } i‡(
hash
 < 
poöt
[
k
].hash) {

432 
j
 = 
k
;

435  
k
;

439  
i
;

440 
	}
}

443 
ngx_öt_t


444 
	$ngx_hâp_up°ªam_öô_chash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

445 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

447 
uöt32_t
 
hash
;

448 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

449 
ngx_hâp_up°ªam_hash_≥î_d©a_t
 *
hp
;

451 i‡(
	`ngx_hâp_up°ªam_öô_hash_≥î
(
r
, 
us
Ë!
NGX_OK
) {

452  
NGX_ERROR
;

455 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_chash_≥î
;

457 
hp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

458 
hcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
, 
ngx_hâp_up°ªam_hash_moduÀ
);

460 
hash
 = 
	`ngx_¸c32_l⁄g
(
hp
->
key
.
d©a
, hp->key.
Àn
);

461 
hp
->
hash
 = 
	`ngx_hâp_up°ªam_föd_chash_poöt
(
hcf
->
poöts
, hash);

463  
NGX_OK
;

464 
	}
}

467 
ngx_öt_t


468 
	$ngx_hâp_up°ªam_gë_chash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

470 
ngx_hâp_up°ªam_hash_≥î_d©a_t
 *
hp
 = 
d©a
;

472 
time_t
 
now
;

473 
öçå_t
 
m
;

474 
ngx_°r_t
 *
£rvî
;

475 
ngx_öt_t
 
tŸÆ
;

476 
ngx_uöt_t
 
i
, 
n
;

477 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

478 
ngx_hâp_up°ªam_chash_poöt_t
 *
poöt
;

479 
ngx_hâp_up°ªam_chash_poöts_t
 *
poöts
;

480 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
;

482 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

483 "gë c⁄si°íàhashÖìr,Åry: %ui", 
pc
->
åõs
);

485 
pc
->
ˇched
 = 0;

486 
pc
->
c⁄√˘i⁄
 = 
NULL
;

488 
now
 = 
	`ngx_time
();

489 
hcf
 = 
hp
->
c⁄f
;

491 
poöts
 = 
hcf
->points;

492 
poöt
 = &
poöts
->point[0];

495 
£rvî
 = 
poöt
[
hp
->
hash
 % 
poöts
->
numbî
].server;

497 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

499 
hp
->
hash
, 
£rvî
);

501 
be°
 = 
NULL
;

502 
tŸÆ
 = 0;

504 
i
 = 0; i < 
hp
->
ºp
.
≥îs
->
numbî
; i++) {

506 
n
 = 
i
 / (8 * (
uöçå_t
));

507 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

509 i‡(
hp
->
ºp
.
åõd
[
n
] & 
m
) {

513 
≥î
 = &
hp
->
ºp
.
≥îs
->≥î[
i
];

515 i‡(
≥î
->
down
) {

519 i‡(
≥î
->
£rvî
.
Àn
 != server->len

520 || 
	`ngx_°∫cmp
(
≥î
->
£rvî
.
d©a
, sîvî->d©a, sîvî->
Àn
)

526 i‡(
≥î
->
max_Áûs


527 && 
≥î
->
Áûs
 >≥î->
max_Áûs


528 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

533 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

534 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

536 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

537 
≥î
->
ef„˘ive_weight
++;

540 i‡(
be°
 =
NULL
 || 
≥î
->
cuºít_weight
 > best->current_weight) {

541 
be°
 = 
≥î
;

545 i‡(
be°
) {

546 
be°
->
cuºít_weight
 -
tŸÆ
;

548 
i
 = 
be°
 - &
hp
->
ºp
.
≥îs
->
≥î
[0];

550 
hp
->
ºp
.
cuºít
 = 
i
;

552 
n
 = 
i
 / (8 * (
uöçå_t
));

553 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

555 
hp
->
ºp
.
åõd
[
n
] |
m
;

557 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

558 
be°
->
checked
 = 
now
;

561 
pc
->
sockaddr
 = 
be°
->sockaddr;

562 
pc
->
sockÀn
 = 
be°
->socklen;

563 
pc
->
«me
 = &
be°
->name;

565  
NGX_OK
;

568 
hp
->
hash
++;

569 
hp
->
åõs
++;

571 i‡(
hp
->
åõs
 >
poöts
->
numbî
) {

572  
NGX_BUSY
;

575 
	}
}

579 
	$ngx_hâp_up°ªam_hash_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

581 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
c⁄f
;

583 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_hash_§v_c⁄f_t
));

584 i‡(
c⁄f
 =
NULL
) {

585  
NULL
;

588 
c⁄f
->
poöts
 = 
NULL
;

590  
c⁄f
;

591 
	}
}

595 
	$ngx_hâp_up°ªam_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

597 
ngx_hâp_up°ªam_hash_§v_c⁄f_t
 *
hcf
 = 
c⁄f
;

599 
ngx_°r_t
 *
vÆue
;

600 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

601 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

603 
vÆue
 = 
cf
->
¨gs
->
ñts
;

605 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

607 
ccv
.
cf
 = cf;

608 
ccv
.
vÆue
 = &value[1];

609 
ccv
.
com∂ex_vÆue
 = &
hcf
->
key
;

611 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

612  
NGX_CONF_ERROR
;

615 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

617 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

618 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

622 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


623 |
NGX_HTTP_UPSTREAM_WEIGHT


624 |
NGX_HTTP_UPSTREAM_MAX_FAILS


625 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


626 |
NGX_HTTP_UPSTREAM_DOWN
;

628 i‡(
cf
->
¨gs
->
√…s
 == 2) {

629 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_hash
;

631 } i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "consistent") == 0) {

632 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_chash
;

635 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

636 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

637  
NGX_CONF_ERROR
;

640  
NGX_CONF_OK
;

641 
	}
}

	@src/http/modules/ngx_http_upstream_ip_hash_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

17 
ngx_uöt_t
 
	mhash
;

19 
u_ch¨
 
	maddæí
;

20 
u_ch¨
 *
	maddr
;

22 
u_ch¨
 
	måõs
;

24 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

25 } 
	tngx_hâp_up°ªam_ù_hash_≥î_d©a_t
;

28 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

30 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

31 *
d©a
);

32 *
ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

36 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_ù_hash_comm™ds
[] = {

38 { 
ngx_°rög
("ip_hash"),

39 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

40 
ngx_hâp_up°ªam_ù_hash
,

43 
NULL
 },

45 
ngx_nuŒ_comm™d


49 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ_˘x
 = {

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL
,

56 
NULL
,

57 
NULL
,

59 
NULL
,

60 
NULL


64 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ
 = {

65 
NGX_MODULE_V1
,

66 &
ngx_hâp_up°ªam_ù_hash_moduÀ_˘x
,

67 
ngx_hâp_up°ªam_ù_hash_comm™ds
,

68 
NGX_HTTP_MODULE
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NGX_MODULE_V1_PADDING


80 
u_ch¨
 
	gngx_hâp_up°ªam_ù_hash_p£udo_addr
[3];

83 
ngx_öt_t


84 
	$ngx_hâp_up°ªam_öô_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

86 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

87  
NGX_ERROR
;

90 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_ù_hash_≥î
;

92  
NGX_OK
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

100 
sockaddr_ö
 *
sö
;

101 #i‡(
NGX_HAVE_INET6
)

102 
sockaddr_ö6
 *
sö6
;

104 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
;

106 
ùhp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
));

107 i‡(
ùhp
 =
NULL
) {

108  
NGX_ERROR
;

111 
r
->
up°ªam
->
≥î
.
d©a
 = &
ùhp
->
ºp
;

113 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

114  
NGX_ERROR
;

117 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_ù_hash_≥î
;

119 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

121 
AF_INET
:

122 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

123 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
.
s_addr
;

124 
ùhp
->
addæí
 = 3;

127 #i‡(
NGX_HAVE_INET6
)

128 
AF_INET6
:

129 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

130 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö6
->
sö6_addr
.
s6_addr
;

131 
ùhp
->
addæí
 = 16;

136 
ùhp
->
addr
 = 
ngx_hâp_up°ªam_ù_hash_p£udo_addr
;

137 
ùhp
->
addæí
 = 3;

140 
ùhp
->
hash
 = 89;

141 
ùhp
->
åõs
 = 0;

142 
ùhp
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

144  
NGX_OK
;

145 
	}
}

148 
ngx_öt_t


149 
	$ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

151 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
 = 
d©a
;

153 
time_t
 
now
;

154 
ngx_öt_t
 
w
;

155 
uöçå_t
 
m
;

156 
ngx_uöt_t
 
i
, 
n
, 
p
, 
hash
;

157 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

159 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

160 "gë i∞hashÖìr,Åry: %ui", 
pc
->
åõs
);

164 i‡(
ùhp
->
åõs
 > 20 || iphp->
ºp
.
≥îs
->
sögÀ
) {

165  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

168 
now
 = 
	`ngx_time
();

170 
pc
->
ˇched
 = 0;

171 
pc
->
c⁄√˘i⁄
 = 
NULL
;

173 
hash
 = 
ùhp
->hash;

177 
i
 = 0; i < (
ngx_uöt_t
Ë
ùhp
->
addæí
; i++) {

178 
hash
 = (hash * 113 + 
ùhp
->
addr
[
i
]) % 6271;

181 i‡(!
ùhp
->
ºp
.
≥îs
->
weighãd
) {

182 
p
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
numbî
;

185 
w
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
tŸÆ_weight
;

187 
i
 = 0; i < 
ùhp
->
ºp
.
≥îs
->
numbî
; i++) {

188 
w
 -
ùhp
->
ºp
.
≥îs
->
≥î
[
i
].
weight
;

189 i‡(
w
 < 0) {

194 
p
 = 
i
;

197 
n
 = 
p
 / (8 * (
uöçå_t
));

198 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

200 i‡(
ùhp
->
ºp
.
åõd
[
n
] & 
m
) {

201 
√xt
;

204 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

205 "gë i∞hashÖìr, hash: %uò%04XA", 
p
, 
m
);

207 
≥î
 = &
ùhp
->
ºp
.
≥îs
->≥î[
p
];

211 i‡(
≥î
->
down
) {

212 
√xt_åy
;

215 i‡(
≥î
->
max_Áûs


216 && 
≥î
->
Áûs
 >≥î->
max_Áûs


217 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

219 
√xt_åy
;

224 
√xt_åy
:

226 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

230 
pc
->
åõs
--;

232 
√xt
:

234 i‡(++
ùhp
->
åõs
 > 20) {

235  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

239 
ùhp
->
ºp
.
cuºít
 = 
p
;

241 
pc
->
sockaddr
 = 
≥î
->sockaddr;

242 
pc
->
sockÀn
 = 
≥î
->socklen;

243 
pc
->
«me
 = &
≥î
->name;

245 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

246 
≥î
->
checked
 = 
now
;

251 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

252 
ùhp
->
hash
 = hash;

254  
NGX_OK
;

255 
	}
}

259 
	$ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

261 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

263 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

265 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

266 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

270 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_ù_hash
;

272 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


273 |
NGX_HTTP_UPSTREAM_WEIGHT


274 |
NGX_HTTP_UPSTREAM_MAX_FAILS


275 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


276 |
NGX_HTTP_UPSTREAM_DOWN
;

278  
NGX_CONF_OK
;

279 
	}
}

	@src/http/modules/ngx_http_upstream_keepalive_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mmax_ˇched
;

16 
ngx_queue_t
 
	mˇche
;

17 
ngx_queue_t
 
	m‰ì
;

19 
ngx_hâp_up°ªam_öô_±
 
	m‹igöÆ_öô_up°ªam
;

20 
ngx_hâp_up°ªam_öô_≥î_±
 
	m‹igöÆ_öô_≥î
;

22 } 
	tngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
;

26 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

28 
ngx_hâp_up°ªam_t
 *
	mup°ªam
;

30 *
	md©a
;

32 
ngx_evít_gë_≥î_±
 
	m‹igöÆ_gë_≥î
;

33 
ngx_evít_‰ì_≥î_±
 
	m‹igöÆ_‰ì_≥î
;

35 #i‡(
NGX_HTTP_SSL
)

36 
ngx_evít_£t_≥î_£ssi⁄_±
 
	m‹igöÆ_£t_£ssi⁄
;

37 
ngx_evít_ßve_≥î_£ssi⁄_±
 
	m‹igöÆ_ßve_£ssi⁄
;

40 } 
	tngx_hâp_up°ªam_kì∑live_≥î_d©a_t
;

44 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

46 
ngx_queue_t
 
	mqueue
;

47 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

49 
sockÀn_t
 
	msockÀn
;

50 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

52 } 
	tngx_hâp_up°ªam_kì∑live_ˇche_t
;

55 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

57 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

58 *
d©a
);

59 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

60 *
d©a
, 
ngx_uöt_t
 
°©e
);

62 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

63 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

64 
ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
);

67 #i‡(
NGX_HTTP_SSL
)

68 
ngx_öt_t
 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(

69 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

70 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

71 *
d©a
);

74 *
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

75 *
ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

76 *
c⁄f
);

79 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_kì∑live_comm™ds
[] = {

81 { 
ngx_°rög
("keepalive"),

82 
NGX_HTTP_UPS_CONF
|
NGX_CONF_TAKE1
,

83 
ngx_hâp_up°ªam_kì∑live
,

84 
NGX_HTTP_SRV_CONF_OFFSET
,

86 
NULL
 },

88 
ngx_nuŒ_comm™d


92 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ_˘x
 = {

93 
NULL
,

94 
NULL
,

96 
NULL
,

97 
NULL
,

99 
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
,

100 
NULL
,

102 
NULL
,

103 
NULL


107 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ
 = {

108 
NGX_MODULE_V1
,

109 &
ngx_hâp_up°ªam_kì∑live_moduÀ_˘x
,

110 
ngx_hâp_up°ªam_kì∑live_comm™ds
,

111 
NGX_HTTP_MODULE
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NGX_MODULE_V1_PADDING


123 
ngx_öt_t


124 
	$ngx_hâp_up°ªam_öô_kì∑live
(
ngx_c⁄f_t
 *
cf
,

125 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

127 
ngx_uöt_t
 
i
;

128 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

129 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ˇched
;

131 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

134 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

135 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

137 i‡(
kcf
->
	`‹igöÆ_öô_up°ªam
(
cf
, 
us
Ë!
NGX_OK
) {

138  
NGX_ERROR
;

141 
kcf
->
‹igöÆ_öô_≥î
 = 
us
->
≥î
.
öô
;

143 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_kì∑live_≥î
;

147 
ˇched
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

148 (
ngx_hâp_up°ªam_kì∑live_ˇche_t
Ë* 
kcf
->
max_ˇched
);

149 i‡(
ˇched
 =
NULL
) {

150  
NGX_ERROR
;

153 
	`ngx_queue_öô
(&
kcf
->
ˇche
);

154 
	`ngx_queue_öô
(&
kcf
->
‰ì
);

156 
i
 = 0; i < 
kcf
->
max_ˇched
; i++) {

157 
	`ngx_queue_ö£π_hód
(&
kcf
->
‰ì
, &
ˇched
[
i
].
queue
);

158 
ˇched
[
i
].
c⁄f
 = 
kcf
;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

167 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

169 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
;

170 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

172 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

175 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

176 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

178 
kp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
));

179 i‡(
kp
 =
NULL
) {

180  
NGX_ERROR
;

183 i‡(
kcf
->
	`‹igöÆ_öô_≥î
(
r
, 
us
Ë!
NGX_OK
) {

184  
NGX_ERROR
;

187 
kp
->
c⁄f
 = 
kcf
;

188 
kp
->
up°ªam
 = 
r
->upstream;

189 
kp
->
d©a
 = 
r
->
up°ªam
->
≥î
.data;

190 
kp
->
‹igöÆ_gë_≥î
 = 
r
->
up°ªam
->
≥î
.
gë
;

191 
kp
->
‹igöÆ_‰ì_≥î
 = 
r
->
up°ªam
->
≥î
.
‰ì
;

193 
r
->
up°ªam
->
≥î
.
d©a
 = 
kp
;

194 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_kì∑live_≥î
;

195 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
;

197 #i‡(
NGX_HTTP_SSL
)

198 
kp
->
‹igöÆ_£t_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
;

199 
kp
->
‹igöÆ_ßve_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
;

200 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
;

201 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
;

204  
NGX_OK
;

205 
	}
}

208 
ngx_öt_t


209 
	$ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

211 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

212 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

214 
ngx_öt_t
 
rc
;

215 
ngx_queue_t
 *
q
, *
ˇche
;

216 
ngx_c⁄√˘i⁄_t
 *
c
;

218 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

223 
rc
 = 
kp
->
	`‹igöÆ_gë_≥î
(
pc
, kp->
d©a
);

225 i‡(
rc
 !
NGX_OK
) {

226  
rc
;

231 
ˇche
 = &
kp
->
c⁄f
->cache;

233 
q
 = 
	`ngx_queue_hód
(
ˇche
);

234 
q
 !
	`ngx_queue_£¡öñ
(
ˇche
);

235 
q
 = 
	`ngx_queue_√xt
(q))

237 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

238 
c
 = 
ôem
->
c⁄√˘i⁄
;

240 i‡(
	`ngx_memn2cmp
((
u_ch¨
 *Ë&
ôem
->
sockaddr
, (u_ch¨ *Ë
pc
->sockaddr,

241 
ôem
->
sockÀn
, 
pc
->socklen)

244 
	`ngx_queue_ªmove
(
q
);

245 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
‰ì
, 
q
);

247 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

248 "gë kì∑livê≥î: usög c⁄√˘i⁄ %p", 
c
);

250 
c
->
idÀ
 = 0;

251 
c
->
£¡
 = 0;

252 
c
->
log
 = 
pc
->log;

253 
c
->
ªad
->
log
 = 
pc
->log;

254 
c
->
wrôe
->
log
 = 
pc
->log;

255 
c
->
poﬁ
->
log
 = 
pc
->log;

257 
pc
->
c⁄√˘i⁄
 = 
c
;

258 
pc
->
ˇched
 = 1;

260  
NGX_DONE
;

264  
NGX_OK
;

265 
	}
}

269 
	$ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

270 
ngx_uöt_t
 
°©e
)

272 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

273 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

275 
ngx_queue_t
 *
q
;

276 
ngx_c⁄√˘i⁄_t
 *
c
;

277 
ngx_hâp_up°ªam_t
 *
u
;

279 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

284 
u
 = 
kp
->
up°ªam
;

285 
c
 = 
pc
->
c⁄√˘i⁄
;

287 i‡(
°©e
 & 
NGX_PEER_FAILED


288 || 
c
 =
NULL


289 || 
c
->
ªad
->
eof


290 || 
c
->
ªad
->
îr‹


291 || 
c
->
ªad
->
timedout


292 || 
c
->
wrôe
->
îr‹


293 || 
c
->
wrôe
->
timedout
)

295 
övÆid
;

298 i‡(!
u
->
kì∑live
) {

299 
övÆid
;

302 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

303 
övÆid
;

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

307 "‰ì kì∑livê≥î: savög c⁄√˘i⁄ %p", 
c
);

309 i‡(
	`ngx_queue_em±y
(&
kp
->
c⁄f
->
‰ì
)) {

311 
q
 = 
	`ngx_queue_œ°
(&
kp
->
c⁄f
->
ˇche
);

312 
	`ngx_queue_ªmove
(
q
);

314 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

316 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
ôem
->
c⁄√˘i⁄
);

319 
q
 = 
	`ngx_queue_hód
(&
kp
->
c⁄f
->
‰ì
);

320 
	`ngx_queue_ªmove
(
q
);

322 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

325 
ôem
->
c⁄√˘i⁄
 = 
c
;

326 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
ˇche
, 
q
);

328 
pc
->
c⁄√˘i⁄
 = 
NULL
;

330 i‡(
c
->
ªad
->
timî_£t
) {

331 
	`ngx_dñ_timî
(
c
->
ªad
);

333 i‡(
c
->
wrôe
->
timî_£t
) {

334 
	`ngx_dñ_timî
(
c
->
wrôe
);

337 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
;

338 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
;

340 
c
->
d©a
 = 
ôem
;

341 
c
->
idÀ
 = 1;

342 
c
->
log
 = 
ngx_cy˛e
->log;

343 
c
->
ªad
->
log
 = 
ngx_cy˛e
->log;

344 
c
->
wrôe
->
log
 = 
ngx_cy˛e
->log;

345 
c
->
poﬁ
->
log
 = 
ngx_cy˛e
->log;

347 
ôem
->
sockÀn
 = 
pc
->socklen;

348 
	`ngx_mem˝y
(&
ôem
->
sockaddr
, 
pc
->sockaddr,Öc->
sockÀn
);

350 i‡(
c
->
ªad
->
ªady
) {

351 
	`ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
c
->
ªad
);

354 
övÆid
:

356 
kp
->
	`‹igöÆ_‰ì_≥î
(
pc
, kp->
d©a
, 
°©e
);

357 
	}
}

361 
	$ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

363 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

365 
	}
}

369 
	$ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
)

371 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

372 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

374 
n
;

375 
buf
[1];

376 
ngx_c⁄√˘i⁄_t
 *
c
;

378 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

381 
c
 = 
ev
->
d©a
;

383 i‡(
c
->
˛o£
) {

384 
˛o£
;

387 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

389 i‡(
n
 =-1 && 
ngx_sockë_î∫o
 =
NGX_EAGAIN
) {

390 
ev
->
ªady
 = 0;

392 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

393 
˛o£
;

399 
˛o£
:

401 
ôem
 = 
c
->
d©a
;

402 
c⁄f
 = 
ôem
->conf;

404 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
c
);

406 
	`ngx_queue_ªmove
(&
ôem
->
queue
);

407 
	`ngx_queue_ö£π_hód
(&
c⁄f
->
‰ì
, &
ôem
->
queue
);

408 
	}
}

412 
	$ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
)

415 #i‡(
NGX_HTTP_SSL
)

417 i‡(
c
->
s¶
) {

418 
c
->
s¶
->
no_waô_shutdown
 = 1;

419 
c
->
s¶
->
no_£nd_shutdown
 = 1;

421 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

422 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£
;

429 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

430 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

431 
	}
}

434 #i‡(
NGX_HTTP_SSL
)

436 
ngx_öt_t


437 
	$ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

439 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

441  
kp
->
	`‹igöÆ_£t_£ssi⁄
(
pc
, kp->
d©a
);

442 
	}
}

446 
	$ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

448 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

450 
kp
->
	`‹igöÆ_ßve_£ssi⁄
(
pc
, kp->
d©a
);

452 
	}
}

458 
	$ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

460 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

462 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

463 (
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
));

464 i‡(
c⁄f
 =
NULL
) {

465  
NULL
;

475 
c⁄f
->
max_ˇched
 = 1;

477  
c⁄f
;

478 
	}
}

482 
	$ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

484 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

485 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
 = 
c⁄f
;

487 
ngx_öt_t
 
n
;

488 
ngx_°r_t
 *
vÆue
;

490 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

492 i‡(
kcf
->
‹igöÆ_öô_up°ªam
) {

496 
kcf
->
‹igöÆ_öô_up°ªam
 = 
uscf
->
≥î
.
öô_up°ªam


497 ? 
uscf
->
≥î
.
öô_up°ªam


498 : 
ngx_hâp_up°ªam_öô_round_robö
;

500 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_kì∑live
;

504 
vÆue
 = 
cf
->
¨gs
->
ñts
;

506 
n
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

508 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

509 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

511 &
vÆue
[1], &
cmd
->
«me
);

512  
NGX_CONF_ERROR
;

515 
kcf
->
max_ˇched
 = 
n
;

517  
NGX_CONF_OK
;

518 
	}
}

	@src/http/modules/ngx_http_upstream_least_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 *
	mc⁄ns
;

15 } 
	tngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
;

20 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

22 
ngx_uöt_t
 *
	mc⁄ns
;

24 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

25 
ngx_evít_‰ì_≥î_±
 
	m‰ì_º_≥î
;

26 } 
	tngx_hâp_up°ªam_lc_≥î_d©a_t
;

29 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

31 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(

32 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

33 
ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

34 *
d©a
, 
ngx_uöt_t
 
°©e
);

35 *
ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

37 *
c⁄f
);

40 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
[] = {

42 { 
ngx_°rög
("least_conn"),

43 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

44 
ngx_hâp_up°ªam_Àa°_c⁄n
,

47 
NULL
 },

49 
ngx_nuŒ_comm™d


53 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
 = {

54 
NULL
,

55 
NULL
,

57 
NULL
,

58 
NULL
,

60 
ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
,

61 
NULL
,

63 
NULL
,

64 
NULL


68 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
 = {

69 
NGX_MODULE_V1
,

70 &
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
,

71 
ngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
,

72 
NGX_HTTP_MODULE
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NGX_MODULE_V1_PADDING


84 
ngx_öt_t


85 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
,

86 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

88 
ngx_uöt_t
 
n
;

89 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

90 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
lcf
;

92 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

95 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

96  
NGX_ERROR
;

99 
≥îs
 = 
us
->
≥î
.
d©a
;

101 
n
 = 
≥îs
->
numbî
;

103 i‡(
≥îs
->
√xt
) {

104 
n
 +
≥îs
->
√xt
->
numbî
;

107 
lcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

108 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
);

110 
lcf
->
c⁄ns
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_uöt_t
Ë* 
n
);

111 i‡(
lcf
->
c⁄ns
 =
NULL
) {

112  
NGX_ERROR
;

115 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
;

117  
NGX_OK
;

118 
	}
}

121 
ngx_öt_t


122 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

125 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
;

126 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
lcf
;

128 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

131 
lcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

132 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
);

134 
l˝
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_lc_≥î_d©a_t
));

135 i‡(
l˝
 =
NULL
) {

136  
NGX_ERROR
;

139 
l˝
->
c⁄ns
 = 
lcf
->conns;

141 
r
->
up°ªam
->
≥î
.
d©a
 = &
l˝
->
ºp
;

143 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

144  
NGX_ERROR
;

147 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
;

148 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
;

150 
l˝
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

151 
l˝
->
‰ì_º_≥î
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

153  
NGX_OK
;

154 
	}
}

157 
ngx_öt_t


158 
	$ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

160 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
 = 
d©a
;

162 
time_t
 
now
;

163 
uöçå_t
 
m
;

164 
ngx_öt_t
 
rc
, 
tŸÆ
;

165 
ngx_uöt_t
 
i
, 
n
, 
p
, 
m™y
;

166 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

167 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

169 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

170 "gëÜó° c⁄¿≥î,Åry: %ui", 
pc
->
åõs
);

172 i‡(
l˝
->
ºp
.
≥îs
->
sögÀ
) {

173  
l˝
->
	`gë_º_≥î
(
pc
, &l˝->
ºp
);

176 
pc
->
ˇched
 = 0;

177 
pc
->
c⁄√˘i⁄
 = 
NULL
;

179 
now
 = 
	`ngx_time
();

181 
≥îs
 = 
l˝
->
ºp
.peers;

183 
be°
 = 
NULL
;

184 
tŸÆ
 = 0;

186 #i‡(
NGX_SUPPRESS_WARN
)

187 
m™y
 = 0;

188 
p
 = 0;

191 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

193 
n
 = 
i
 / (8 * (
uöçå_t
));

194 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

196 i‡(
l˝
->
ºp
.
åõd
[
n
] & 
m
) {

200 
≥î
 = &
≥îs
->≥î[
i
];

202 i‡(
≥î
->
down
) {

206 i‡(
≥î
->
max_Áûs


207 && 
≥î
->
Áûs
 >≥î->
max_Áûs


208 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

219 i‡(
be°
 =
NULL


220 || 
l˝
->
c⁄ns
[
i
] * 
be°
->
weight
 <Ü˝->c⁄ns[
p
] * 
≥î
->weight)

222 
be°
 = 
≥î
;

223 
m™y
 = 0;

224 
p
 = 
i
;

226 } i‡(
l˝
->
c⁄ns
[
i
] * 
be°
->
weight


227 =
l˝
->
c⁄ns
[
p
] * 
≥î
->
weight
)

229 
m™y
 = 1;

233 i‡(
be°
 =
NULL
) {

234 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

237 
Áûed
;

240 i‡(
m™y
) {

241 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

244 
i
 = 
p
; i < 
≥îs
->
numbî
; i++) {

246 
n
 = 
i
 / (8 * (
uöçå_t
));

247 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

249 i‡(
l˝
->
ºp
.
åõd
[
n
] & 
m
) {

253 
≥î
 = &
≥îs
->≥î[
i
];

255 i‡(
≥î
->
down
) {

259 i‡(
l˝
->
c⁄ns
[
i
] * 
be°
->
weight
 !l˝->c⁄ns[
p
] * 
≥î
->weight) {

263 i‡(
≥î
->
max_Áûs


264 && 
≥î
->
Áûs
 >≥î->
max_Áûs


265 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

270 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

271 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

273 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

274 
≥î
->
ef„˘ive_weight
++;

277 i‡(
≥î
->
cuºít_weight
 > 
be°
->current_weight) {

278 
be°
 = 
≥î
;

279 
p
 = 
i
;

284 
be°
->
cuºít_weight
 -
tŸÆ
;

286 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

287 
be°
->
checked
 = 
now
;

290 
pc
->
sockaddr
 = 
be°
->sockaddr;

291 
pc
->
sockÀn
 = 
be°
->socklen;

292 
pc
->
«me
 = &
be°
->name;

294 
l˝
->
ºp
.
cuºít
 = 
p
;

296 
n
 = 
p
 / (8 * (
uöçå_t
));

297 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

299 
l˝
->
ºp
.
åõd
[
n
] |
m
;

300 
l˝
->
c⁄ns
[
p
]++;

302  
NGX_OK
;

304 
Áûed
:

306 i‡(
≥îs
->
√xt
) {

307 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

310 
l˝
->
c⁄ns
 +
≥îs
->
numbî
;

312 
l˝
->
ºp
.
≥îs
 =Öìrs->
√xt
;

314 
n
 = (
l˝
->
ºp
.
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

315 / (8 * (
uöçå_t
));

317 
i
 = 0; i < 
n
; i++) {

318 
l˝
->
ºp
.
åõd
[
i
] = 0;

321 
rc
 = 
	`ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
pc
, 
l˝
);

323 i‡(
rc
 !
NGX_BUSY
) {

324  
rc
;

330 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

331 
≥îs
->
≥î
[
i
].
Áûs
 = 0;

334 
pc
->
«me
 = 
≥îs
->name;

336  
NGX_BUSY
;

337 
	}
}

341 
	$ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

342 *
d©a
, 
ngx_uöt_t
 
°©e
)

344 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
 = 
d©a
;

346 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

347 "‰ìÜó° c⁄¿≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

349 i‡(
l˝
->
ºp
.
≥îs
->
sögÀ
) {

350 
l˝
->
	`‰ì_º_≥î
(
pc
, &l˝->
ºp
, 
°©e
);

354 
l˝
->
c⁄ns
[l˝->
ºp
.
cuºít
]--;

356 
l˝
->
	`‰ì_º_≥î
(
pc
, &l˝->
ºp
, 
°©e
);

357 
	}
}

361 
	$ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

363 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
c⁄f
;

365 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

366 (
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
));

367 i‡(
c⁄f
 =
NULL
) {

368  
NULL
;

377  
c⁄f
;

378 
	}
}

382 
	$ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

384 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

386 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

388 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

389 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

393 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n
;

395 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


396 |
NGX_HTTP_UPSTREAM_WEIGHT


397 |
NGX_HTTP_UPSTREAM_MAX_FAILS


398 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


399 |
NGX_HTTP_UPSTREAM_DOWN


400 |
NGX_HTTP_UPSTREAM_BACKUP
;

402  
NGX_CONF_OK
;

403 
	}
}

	@src/http/modules/ngx_http_userid_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_USERID_OFF
 0

	)

14 
	#NGX_HTTP_USERID_LOG
 1

	)

15 
	#NGX_HTTP_USERID_V1
 2

	)

16 
	#NGX_HTTP_USERID_ON
 3

	)

19 
	#NGX_HTTP_USERID_MAX_EXPIRES
 2145916555

	)

23 
ngx_uöt_t
 
	míabÀ
;

25 
ngx_öt_t
 
	m£rvi˚
;

27 
ngx_°r_t
 
	m«me
;

28 
ngx_°r_t
 
	mdomaö
;

29 
ngx_°r_t
 
	m∑th
;

30 
ngx_°r_t
 
	mp3p
;

32 
time_t
 
	mexpúes
;

34 
u_ch¨
 
	mm¨k
;

35 } 
	tngx_hâp_u£rid_c⁄f_t
;

39 
uöt32_t
 
	muid_gŸ
[4];

40 
uöt32_t
 
	muid_£t
[4];

41 
ngx_°r_t
 
	mcookõ
;

42 
ngx_uöt_t
 
	mª£t
;

43 } 
	tngx_hâp_u£rid_˘x_t
;

46 
ngx_hâp_u£rid_˘x_t
 *
ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

48 
ngx_öt_t
 
ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
);

50 
ngx_öt_t
 
ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

52 
ngx_öt_t
 
ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

55 
ngx_öt_t
 
ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

56 
ngx_öt_t
 
ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

58 *
ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

59 *
chûd
);

60 *
ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

61 *
ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

62 *
ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

65 *
ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 
ngx_öt_t
 
ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

71 
uöt32_t
 
	g°¨t_vÆue
;

72 
uöt32_t
 
	g£quí˚r_v1
 = 1;

73 
uöt32_t
 
	g£quí˚r_v2
 = 0x03030302;

76 
u_ch¨
 
	gexpúes
[] = ";Éxpires=Thu, 31-Dec-37 23:55:55 GMT";

79 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

82 
ngx_c⁄f_íum_t
 
	gngx_hâp_u£rid_°©e
[] = {

83 { 
ngx_°rög
("off"), 
NGX_HTTP_USERID_OFF
 },

84 { 
ngx_°rög
("log"), 
NGX_HTTP_USERID_LOG
 },

85 { 
ngx_°rög
("v1"), 
NGX_HTTP_USERID_V1
 },

86 { 
ngx_°rög
("⁄"), 
NGX_HTTP_USERID_ON
 },

87 { 
ngx_nuŒ_°rög
, 0 }

91 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_domaö_p
 =

92 
ngx_hâp_u£rid_domaö
;

93 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_∑th_p
 = 
ngx_hâp_u£rid_∑th
;

94 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_p3p_p
 = 
ngx_hâp_u£rid_p3p
;

97 
ngx_comm™d_t
 
	gngx_hâp_u£rid_comm™ds
[] = {

99 { 
ngx_°rög
("userid"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_íum_¶Ÿ
,

102 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
íabÀ
),

104 
ngx_hâp_u£rid_°©e
 },

106 { 
ngx_°rög
("userid_service"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_num_¶Ÿ
,

109 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
£rvi˚
),

111 
NULL
 },

113 { 
ngx_°rög
("userid_name"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_°r_¶Ÿ
,

116 
NGX_HTTP_LOC_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
«me
),

118 
NULL
 },

120 { 
ngx_°rög
("userid_domain"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_°r_¶Ÿ
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
domaö
),

125 &
ngx_hâp_u£rid_domaö_p
 },

127 { 
ngx_°rög
("userid_path"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

129 
ngx_c⁄f_£t_°r_¶Ÿ
,

130 
NGX_HTTP_LOC_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
∑th
),

132 &
ngx_hâp_u£rid_∑th_p
 },

134 { 
ngx_°rög
("userid_expires"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

136 
ngx_hâp_u£rid_expúes
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("userid_p3p"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_c⁄f_£t_°r_¶Ÿ
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

145 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
p3p
),

146 &
ngx_hâp_u£rid_p3p_p
 },

148 { 
ngx_°rög
("userid_mark"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_u£rid_m¨k
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

153 
NULL
 },

155 
ngx_nuŒ_comm™d


159 
ngx_hâp_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ_˘x
 = {

160 
ngx_hâp_u£rid_add_v¨übÀs
,

161 
ngx_hâp_u£rid_öô
,

163 
NULL
,

164 
NULL
,

166 
NULL
,

167 
NULL
,

169 
ngx_hâp_u£rid_¸óã_c⁄f
,

170 
ngx_hâp_u£rid_mîge_c⁄f


174 
ngx_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ
 = {

175 
NGX_MODULE_V1
,

176 &
ngx_hâp_u£rid_fûãr_moduÀ_˘x
,

177 
ngx_hâp_u£rid_comm™ds
,

178 
NGX_HTTP_MODULE
,

179 
NULL
,

180 
NULL
,

181 
ngx_hâp_u£rid_öô_w‹kî
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NGX_MODULE_V1_PADDING


190 
ngx_°r_t
 
	gngx_hâp_u£rid_gŸ
 = 
ngx_°rög
("uid_got");

191 
ngx_°r_t
 
	gngx_hâp_u£rid_£t
 = 
ngx_°rög
("uid_set");

192 
ngx_°r_t
 
	gngx_hâp_u£rid_ª£t
 = 
ngx_°rög
("uid_reset");

193 
ngx_uöt_t
 
	gngx_hâp_u£rid_ª£t_ödex
;

196 
ngx_öt_t


197 
	$ngx_hâp_u£rid_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

199 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

200 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

202 i‡(
r
 !r->
maö
) {

203  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

206 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

208 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

209  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

212 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
, 
c⁄f
);

214 i‡(
˘x
 =
NULL
) {

215  
NGX_ERROR
;

218 i‡(
	`ngx_hâp_u£rid_£t_uid
(
r
, 
˘x
, 
c⁄f
Ë=
NGX_OK
) {

219  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

222  
NGX_ERROR
;

223 
	}
}

226 
ngx_öt_t


227 
	$ngx_hâp_u£rid_gŸ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

228 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

230 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

231 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

233 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

235 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_OFF
) {

236 
v
->
nŸ_found
 = 1;

237  
NGX_OK
;

240 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

242 i‡(
˘x
 =
NULL
) {

243  
NGX_ERROR
;

246 i‡(
˘x
->
uid_gŸ
[3] != 0) {

247  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
);

250 
v
->
nŸ_found
 = 1;

252  
NGX_OK
;

253 
	}
}

256 
ngx_öt_t


257 
	$ngx_hâp_u£rid_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

258 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

260 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

261 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

263 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

265 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

266 
v
->
nŸ_found
 = 1;

267  
NGX_OK
;

270 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

272 i‡(
˘x
 =
NULL
) {

273  
NGX_ERROR
;

276 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
->
maö
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

277  
NGX_ERROR
;

280 i‡(
˘x
->
uid_£t
[3] == 0) {

281 
v
->
nŸ_found
 = 1;

282  
NGX_OK
;

285  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_£t
);

286 
	}
}

289 
ngx_hâp_u£rid_˘x_t
 *

290 
	$ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

292 
ngx_öt_t
 
n
;

293 
ngx_°r_t
 
§c
, 
d°
;

294 
ngx_èbÀ_ñt_t
 **
cookõs
;

295 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

297 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

299 i‡(
˘x
) {

300  
˘x
;

303 i‡(
˘x
 =
NULL
) {

304 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_u£rid_˘x_t
));

305 i‡(
˘x
 =
NULL
) {

306  
NULL
;

309 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

312 
n
 = 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
c⁄f
->
«me
,

313 &
˘x
->
cookõ
);

314 i‡(
n
 =
NGX_DECLINED
) {

315  
˘x
;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "uid cookõ: \"%V\"", &
˘x
->
cookõ
);

321 i‡(
˘x
->
cookõ
.
Àn
 < 22) {

322 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

323 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

325 &
cookõs
[
n
]->
vÆue
);

326  
˘x
;

329 
§c
 = 
˘x
->
cookõ
;

338 
§c
.
Àn
 = 22;

340 
d°
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_gŸ
;

342 i‡(
	`ngx_decode_ba£64
(&
d°
, &
§c
Ë=
NGX_ERROR
) {

343 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

344 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

346 &
cookõs
[
n
]->
vÆue
);

347  
˘x
;

350 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

352 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

353 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

355  
˘x
;

356 
	}
}

359 
ngx_öt_t


360 
	$ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

361 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

363 
u_ch¨
 *
cookõ
, *
p
;

364 
size_t
 
Àn
;

365 
ngx_°r_t
 
§c
, 
d°
;

366 
ngx_èbÀ_ñt_t
 *
£t_cookõ
, *
p3p
;

368 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

369  
NGX_ERROR
;

372 i‡(
˘x
->
uid_£t
[3] == 0) {

373  
NGX_OK
;

376 
Àn
 = 
c⁄f
->
«me
.À¿+ 1 + 
	`ngx_ba£64_ícoded_Àngth
(16Ë+ c⁄f->
∑th
.len;

378 i‡(
c⁄f
->
expúes
) {

379 
Àn
 +(
expúes
) - 1 + 2;

382 i‡(
c⁄f
->
domaö
.
Àn
) {

383 
Àn
 +
c⁄f
->
domaö
.len;

386 
cookõ
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

387 i‡(
cookõ
 =
NULL
) {

388  
NGX_ERROR
;

391 
p
 = 
	`ngx_c›y
(
cookõ
, 
c⁄f
->
«me
.
d©a
, c⁄f->«me.
Àn
);

392 *
p
++ = '=';

394 i‡(
˘x
->
uid_gŸ
[3] =0 || ctx->
ª£t
) {

395 
§c
.
Àn
 = 16;

396 
§c
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_£t
;

397 
d°
.
d©a
 = 
p
;

399 
	`ngx_ícode_ba£64
(&
d°
, &
§c
);

401 
p
 +
d°
.
Àn
;

403 i‡(
c⁄f
->
m¨k
) {

404 *(
p
 - 2Ë
c⁄f
->
m¨k
;

408 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
cookõ
.
d©a
, 22);

409 *
p
++ = 
c⁄f
->
m¨k
;

410 *
p
++ = '=';

413 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_USERID_MAX_EXPIRES
) {

414 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (expires) - 1);

416 } i‡(
c⁄f
->
expúes
) {

417 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (";Éxpires=") - 1);

418 
p
 = 
	`ngx_hâp_cookõ_time
’, 
	`ngx_time
(Ë+ 
c⁄f
->
expúes
);

421 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
domaö
.
d©a
, c⁄f->domaö.
Àn
);

423 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
∑th
.
d©a
, c⁄f->∑th.
Àn
);

425 
£t_cookõ
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

426 i‡(
£t_cookõ
 =
NULL
) {

427  
NGX_ERROR
;

430 
£t_cookõ
->
hash
 = 1;

431 
	`ngx_°r_£t
(&
£t_cookõ
->
key
, "Set-Cookie");

432 
£t_cookõ
->
vÆue
.
Àn
 = 
p
 - 
cookõ
;

433 
£t_cookõ
->
vÆue
.
d©a
 = 
cookõ
;

435 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

436 "uid cookõ: \"%V\"", &
£t_cookõ
->
vÆue
);

438 i‡(
c⁄f
->
p3p
.
Àn
 == 0) {

439  
NGX_OK
;

442 
p3p
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

443 i‡(
p3p
 =
NULL
) {

444  
NGX_ERROR
;

447 
p3p
->
hash
 = 1;

448 
	`ngx_°r_£t
(&
p3p
->
key
, "P3P");

449 
p3p
->
vÆue
 = 
c⁄f
->p3p;

451  
NGX_OK
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

457 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

459 
ngx_c⁄√˘i⁄_t
 *
c
;

460 
sockaddr_ö
 *
sö
;

461 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

462 #i‡(
NGX_HAVE_INET6
)

463 
u_ch¨
 *
p
;

464 
sockaddr_ö6
 *
sö6
;

467 i‡(
˘x
->
uid_£t
[3] != 0) {

468  
NGX_OK
;

471 i‡(
˘x
->
uid_gŸ
[3] != 0) {

473 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ngx_hâp_u£rid_ª£t_ödex
);

475 i‡(
vv
->
Àn
 =0 || (vv->À¿=1 && vv->
d©a
[0] == '0')) {

477 i‡(
c⁄f
->
m¨k
 == '\0'

478 || (
˘x
->
cookõ
.
Àn
 > 23

479 && 
˘x
->
cookõ
.
d©a
[22] =
c⁄f
->
m¨k


480 && 
˘x
->
cookõ
.
d©a
[23] == '='))

482  
NGX_OK
;

485 
˘x
->
uid_£t
[0] = ctx->
uid_gŸ
[0];

486 
˘x
->
uid_£t
[1] = ctx->
uid_gŸ
[1];

487 
˘x
->
uid_£t
[2] = ctx->
uid_gŸ
[2];

488 
˘x
->
uid_£t
[3] = ctx->
uid_gŸ
[3];

490  
NGX_OK
;

493 
˘x
->
ª£t
 = 1;

495 i‡(
vv
->
Àn
 =3 && 
	`ngx_°∫cmp
(vv->
d©a
, "log", 3) == 0) {

496 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

498 &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

499 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

509 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_V1
) {

510 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

511 
˘x
->
uid_£t
[0] = 0;

513 
˘x
->
uid_£t
[0] = 
c⁄f
->
£rvi˚
;

515 
˘x
->
uid_£t
[1] = (
uöt32_t
Ë
	`ngx_time
();

516 
˘x
->
uid_£t
[2] = 
°¨t_vÆue
;

517 
˘x
->
uid_£t
[3] = 
£quí˚r_v1
;

518 
£quí˚r_v1
 += 0x100;

521 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

523 
c
 = 
r
->
c⁄√˘i⁄
;

525 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

526  
NGX_ERROR
;

529 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

531 #i‡(
NGX_HAVE_INET6
)

532 
AF_INET6
:

533 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

535 
p
 = (
u_ch¨
 *Ë&
˘x
->
uid_£t
[0];

537 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[12];

538 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[13];

539 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[14];

540 *
p
 = 
sö6
->
sö6_addr
.
s6_addr
[15];

545 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

546 
˘x
->
uid_£t
[0] = 
sö
->
sö_addr
.
s_addr
;

551 
˘x
->
uid_£t
[0] = 
	`ht⁄l
(
c⁄f
->
£rvi˚
);

554 
˘x
->
uid_£t
[1] = 
	`ht⁄l
((
uöt32_t
Ë
	`ngx_time
());

555 
˘x
->
uid_£t
[2] = 
	`ht⁄l
(
°¨t_vÆue
);

556 
˘x
->
uid_£t
[3] = 
	`ht⁄l
(
£quí˚r_v2
);

557 
£quí˚r_v2
 += 0x100;

558 i‡(
£quí˚r_v2
 < 0x03030302) {

559 
£quí˚r_v2
 = 0x03030302;

563  
NGX_OK
;

564 
	}
}

567 
ngx_öt_t


568 
	$ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

569 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
)

571 
v
->
Àn
 = 
«me
->len + ("=00001111222233334444555566667777") - 1;

572 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

573 i‡(
v
->
d©a
 =
NULL
) {

574  
NGX_ERROR
;

577 
v
->
vÆid
 = 1;

578 
v
->
no_ˇchóbÀ
 = 0;

579 
v
->
nŸ_found
 = 0;

581 
	`ngx_•rötf
(
v
->
d©a
, "%V=%08XD%08XD%08XD%08XD",

582 
«me
, 
uid
[0], uid[1], uid[2], uid[3]);

584  
NGX_OK
;

585 
	}
}

588 
ngx_öt_t


589 
	$ngx_hâp_u£rid_ª£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

590 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

592 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

594  
NGX_OK
;

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

601 
ngx_öt_t
 
n
;

602 
ngx_hâp_v¨übÀ_t
 *
v¨
;

604 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_gŸ
, 0);

605 i‡(
v¨
 =
NULL
) {

606  
NGX_ERROR
;

609 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_gŸ_v¨übÀ
;

611 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_£t
, 0);

612 i‡(
v¨
 =
NULL
) {

613  
NGX_ERROR
;

616 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_£t_v¨übÀ
;

618 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_ª£t
,

619 
NGX_HTTP_VAR_CHANGEABLE
);

620 i‡(
v¨
 =
NULL
) {

621  
NGX_ERROR
;

624 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_ª£t_v¨übÀ
;

626 
n
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_u£rid_ª£t
);

627 i‡(
n
 =
NGX_ERROR
) {

628  
NGX_ERROR
;

631 
ngx_hâp_u£rid_ª£t_ödex
 = 
n
;

633  
NGX_OK
;

634 
	}
}

638 
	$ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

640 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

642 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_u£rid_c⁄f_t
));

643 i‡(
c⁄f
 =
NULL
) {

644  
NULL
;

656 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

657 
c⁄f
->
£rvi˚
 = 
NGX_CONF_UNSET
;

658 
c⁄f
->
expúes
 = 
NGX_CONF_UNSET
;

659 
c⁄f
->
m¨k
 = (
u_ch¨
) '\xFF';

661  
c⁄f
;

662 
	}
}

666 
	$ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

668 
ngx_hâp_u£rid_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

669 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
 = 
chûd
;

671 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

672 
NGX_HTTP_USERID_OFF
);

674 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
«me
, 
¥ev
->name, "uid");

675 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
domaö
, 
¥ev
->domain, "");

676 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
∑th
, 
¥ev
->path, ";Öath=/");

677 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
p3p
, 
¥ev
->p3p, "");

679 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvi˚
, 
¥ev
->£rvi˚, 
NGX_CONF_UNSET
);

680 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
expúes
, 
¥ev
->expires, 0);

682 i‡(
c⁄f
->
m¨k
 =(
u_ch¨
) '\xFF') {

683 i‡(
¥ev
->
m¨k
 =(
u_ch¨
) '\xFF') {

684 
c⁄f
->
m¨k
 = '\0';

686 
c⁄f
->
m¨k
 = 
¥ev
->mark;

690  
NGX_CONF_OK
;

691 
	}
}

694 
ngx_öt_t


695 
	$ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
)

697 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

698 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_u£rid_fûãr
;

700  
NGX_OK
;

701 
	}
}

705 
	$ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

707 
ngx_°r_t
 *
domaö
 = 
d©a
;

709 
u_ch¨
 *
p
, *
√w
;

711 i‡(
	`ngx_°rcmp
(
domaö
->
d©a
, "none") == 0) {

712 
	`ngx_°r_£t
(
domaö
, "");

713  
NGX_CONF_OK
;

716 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, ("; domaö="Ë- 1 + 
domaö
->
Àn
);

717 i‡(
√w
 =
NULL
) {

718  
NGX_CONF_ERROR
;

721 
p
 = 
	`ngx_˝ymem
(
√w
, "; domain=", ("; domain=") - 1);

722 
	`ngx_mem˝y
(
p
, 
domaö
->
d©a
, domaö->
Àn
);

724 
domaö
->
Àn
 += ("; domain=") - 1;

725 
domaö
->
d©a
 = 
√w
;

727  
NGX_CONF_OK
;

728 
	}
}

732 
	$ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

734 
ngx_°r_t
 *
∑th
 = 
d©a
;

736 
u_ch¨
 *
p
, *
√w
;

738 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, (";Ö©h="Ë- 1 + 
∑th
->
Àn
);

739 i‡(
√w
 =
NULL
) {

740  
NGX_CONF_ERROR
;

743 
p
 = 
	`ngx_˝ymem
(
√w
, ";Öath=", (";Öath=") - 1);

744 
	`ngx_mem˝y
(
p
, 
∑th
->
d©a
,Ö©h->
Àn
);

746 
∑th
->
Àn
 += (";Öath=") - 1;

747 
∑th
->
d©a
 = 
√w
;

749  
NGX_CONF_OK
;

750 
	}
}

754 
	$ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

756 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

758 
ngx_°r_t
 *
vÆue
;

760 i‡(
ucf
->
expúes
 !
NGX_CONF_UNSET
) {

764 
vÆue
 = 
cf
->
¨gs
->
ñts
;

766 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

767 
ucf
->
expúes
 = 
NGX_HTTP_USERID_MAX_EXPIRES
;

768  
NGX_CONF_OK
;

771 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

772 
ucf
->
expúes
 = 0;

773  
NGX_CONF_OK
;

776 
ucf
->
expúes
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

777 i‡(
ucf
->
expúes
 =(
time_t
Ë
NGX_ERROR
) {

781  
NGX_CONF_OK
;

782 
	}
}

786 
	$ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

788 
ngx_°r_t
 *
p3p
 = 
d©a
;

790 i‡(
	`ngx_°rcmp
(
p3p
->
d©a
, "none") == 0) {

791 
	`ngx_°r_£t
(
p3p
, "");

794  
NGX_CONF_OK
;

795 
	}
}

799 
	$ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

801 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

803 
ngx_°r_t
 *
vÆue
;

805 i‡(
ucf
->
m¨k
 !(
u_ch¨
) '\xFF') {

809 
vÆue
 = 
cf
->
¨gs
->
ñts
;

811 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

812 
ucf
->
m¨k
 = '\0';

813  
NGX_CONF_OK
;

816 i‡(
vÆue
[1].
Àn
 != 1

817 || !((
vÆue
[1].
d©a
[0] >= '0' && value[1].data[0] <= '9')

818 || (
vÆue
[1].
d©a
[0] >= 'A' && value[1].data[0] <= 'Z')

819 || (
vÆue
[1].
d©a
[0] >= 'a' && value[1].data[0] <= 'z')

820 || 
vÆue
[1].
d©a
[0] == '='))

825 
ucf
->
m¨k
 = 
vÆue
[1].
d©a
[0];

827  
NGX_CONF_OK
;

828 
	}
}

831 
ngx_öt_t


832 
	$ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

834 
timevÆ
 
ç
;

836 
	`ngx_gëtimeofday
(&
ç
);

839 
°¨t_vÆue
 = ((
ç
.
tv_u£c
 / 20Ë<< 16Ë| 
ngx_pid
;

841  
NGX_OK
;

842 
	}
}

	@src/http/modules/ngx_http_uwsgi_module.c

10 
	~<ngx_c⁄fig.h
>

11 
	~<ngx_c‹e.h
>

12 
	~<ngx_hâp.h
>

16 
ngx_¨øy_t
 
	mˇches
;

17 } 
	tngx_hâp_uwsgi_maö_c⁄f_t
;

21 
ngx_¨øy_t
 *
	mÊushes
;

22 
ngx_¨øy_t
 *
	mÀngths
;

23 
ngx_¨øy_t
 *
	mvÆues
;

24 
ngx_uöt_t
 
	mnumbî
;

25 
ngx_hash_t
 
	mhash
;

26 } 
	tngx_hâp_uwsgi_∑øms_t
;

30 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

32 
ngx_hâp_uwsgi_∑øms_t
 
	m∑øms
;

33 #i‡(
NGX_HTTP_CACHE
)

34 
ngx_hâp_uwsgi_∑øms_t
 
	m∑øms_ˇche
;

36 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

38 
ngx_¨øy_t
 *
	muwsgi_Àngths
;

39 
ngx_¨øy_t
 *
	muwsgi_vÆues
;

41 #i‡(
NGX_HTTP_CACHE
)

42 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

45 
ngx_°r_t
 
	muwsgi_°rög
;

47 
ngx_uöt_t
 
	mmodifõr1
;

48 
ngx_uöt_t
 
	mmodifõr2
;

50 #i‡(
NGX_HTTP_SSL
)

51 
ngx_uöt_t
 
	ms¶
;

52 
ngx_uöt_t
 
	ms¶_¥Ÿocﬁs
;

53 
ngx_°r_t
 
	ms¶_cùhîs
;

54 
ngx_uöt_t
 
	ms¶_vîify_dïth
;

55 
ngx_°r_t
 
	ms¶_åu°ed_˚πifiˇã
;

56 
ngx_°r_t
 
	ms¶_¸l
;

57 
ngx_°r_t
 
	ms¶_˚πifiˇã
;

58 
ngx_°r_t
 
	ms¶_˚πifiˇã_key
;

59 
ngx_¨øy_t
 *
	ms¶_∑ssw‹ds
;

61 } 
	tngx_hâp_uwsgi_loc_c⁄f_t
;

64 
ngx_öt_t
 
ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
);

66 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

67 
ngx_öt_t
 
ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

68 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

69 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

70 
ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

71 
ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_öt_t
 
rc
);

74 *
ngx_hâp_uwsgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

75 *
ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

76 *
ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

77 *
chûd
);

78 
ngx_öt_t
 
ngx_hâp_uwsgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
,

79 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
, 
ngx_hâp_uwsgi_∑øms_t
 *
∑øms
,

80 
ngx_keyvÆ_t
 *
deÁu…_∑øms
);

82 *
ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

83 *
c⁄f
);

84 *
ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

85 *
c⁄f
);

87 #i‡(
NGX_HTTP_CACHE
)

88 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

89 *
ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

90 *
c⁄f
);

91 *
ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

92 *
c⁄f
);

95 #i‡(
NGX_HTTP_SSL
)

96 *
ngx_hâp_uwsgi_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
,

97 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

98 
ngx_öt_t
 
ngx_hâp_uwsgi_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

99 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
);

103 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_uwsgi_modifõr_bounds
 = {

104 
ngx_c⁄f_check_num_bounds
, 0, 255

108 
ngx_c⁄f_bômask_t
 
	gngx_hâp_uwsgi_√xt_up°ªam_masks
[] = {

109 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

110 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

111 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

112 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

113 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

114 { 
ngx_°rög
("hâp_403"), 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

115 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

116 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

117 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

118 { 
ngx_nuŒ_°rög
, 0 }

122 #i‡(
NGX_HTTP_SSL
)

124 
ngx_c⁄f_bômask_t
 
	gngx_hâp_uwsgi_s¶_¥Ÿocﬁs
[] = {

125 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

126 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

127 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

128 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

129 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

130 { 
ngx_nuŒ_°rög
, 0 }

136 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
;

139 
ngx_comm™d_t
 
	gngx_hâp_uwsgi_comm™ds
[] = {

141 { 
ngx_°rög
("uwsgi_pass"),

142 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_hâp_uwsgi_∑ss
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

146 
NULL
 },

148 { 
ngx_°rög
("uwsgi_modifier1"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_c⁄f_£t_num_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr1
),

153 &
ngx_hâp_uwsgi_modifõr_bounds
 },

155 { 
ngx_°rög
("uwsgi_modifier2"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

157 
ngx_c⁄f_£t_num_¶Ÿ
,

158 
NGX_HTTP_LOC_CONF_OFFSET
,

159 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr2
),

160 &
ngx_hâp_uwsgi_modifõr_bounds
 },

162 { 
ngx_°rög
("uwsgi_store"),

163 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

164 
ngx_hâp_uwsgi_°‹e
,

165 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
NULL
 },

169 { 
ngx_°rög
("uwsgi_store_access"),

170 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

171 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

172 
NGX_HTTP_LOC_CONF_OFFSET
,

173 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

174 
NULL
 },

176 { 
ngx_°rög
("uwsgi_buffering"),

177 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

178 
ngx_c⁄f_£t_Êag_¶Ÿ
,

179 
NGX_HTTP_LOC_CONF_OFFSET
,

180 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

181 
NULL
 },

183 { 
ngx_°rög
("uwsgi_request_buffering"),

184 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

185 
ngx_c⁄f_£t_Êag_¶Ÿ
,

186 
NGX_HTTP_LOC_CONF_OFFSET
,

187 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ªque°_buf„rög
),

188 
NULL
 },

190 { 
ngx_°rög
("uwsgi_ignore_client_abort"),

191 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

192 
ngx_c⁄f_£t_Êag_¶Ÿ
,

193 
NGX_HTTP_LOC_CONF_OFFSET
,

194 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

195 
NULL
 },

197 { 
ngx_°rög
("uwsgi_bind"),

198 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

199 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

200 
NGX_HTTP_LOC_CONF_OFFSET
,

201 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

202 
NULL
 },

204 { 
ngx_°rög
("uwsgi_connect_timeout"),

205 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

206 
ngx_c⁄f_£t_m£c_¶Ÿ
,

207 
NGX_HTTP_LOC_CONF_OFFSET
,

208 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

209 
NULL
 },

211 { 
ngx_°rög
("uwsgi_send_timeout"),

212 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

213 
ngx_c⁄f_£t_m£c_¶Ÿ
,

214 
NGX_HTTP_LOC_CONF_OFFSET
,

215 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

216 
NULL
 },

218 { 
ngx_°rög
("uwsgi_buffer_size"),

219 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

220 
ngx_c⁄f_£t_size_¶Ÿ
,

221 
NGX_HTTP_LOC_CONF_OFFSET
,

222 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

223 
NULL
 },

225 { 
ngx_°rög
("uwsgi_pass_request_headers"),

226 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

227 
ngx_c⁄f_£t_Êag_¶Ÿ
,

228 
NGX_HTTP_LOC_CONF_OFFSET
,

229 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

230 
NULL
 },

232 { 
ngx_°rög
("uwsgi_pass_request_body"),

233 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

234 
ngx_c⁄f_£t_Êag_¶Ÿ
,

235 
NGX_HTTP_LOC_CONF_OFFSET
,

236 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

237 
NULL
 },

239 { 
ngx_°rög
("uwsgi_intercept_errors"),

240 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

241 
ngx_c⁄f_£t_Êag_¶Ÿ
,

242 
NGX_HTTP_LOC_CONF_OFFSET
,

243 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

244 
NULL
 },

246 { 
ngx_°rög
("uwsgi_read_timeout"),

247 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

248 
ngx_c⁄f_£t_m£c_¶Ÿ
,

249 
NGX_HTTP_LOC_CONF_OFFSET
,

250 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

251 
NULL
 },

253 { 
ngx_°rög
("uwsgi_buffers"),

254 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

255 
ngx_c⁄f_£t_bufs_¶Ÿ
,

256 
NGX_HTTP_LOC_CONF_OFFSET
,

257 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

258 
NULL
 },

260 { 
ngx_°rög
("uwsgi_busy_buffers_size"),

261 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

262 
ngx_c⁄f_£t_size_¶Ÿ
,

263 
NGX_HTTP_LOC_CONF_OFFSET
,

264 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

265 
NULL
 },

267 { 
ngx_°rög
("uwsgi_force_ranges"),

268 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

269 
ngx_c⁄f_£t_Êag_¶Ÿ
,

270 
NGX_HTTP_LOC_CONF_OFFSET
,

271 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
f‹˚_ønges
),

272 
NULL
 },

274 { 
ngx_°rög
("uwsgi_limit_rate"),

275 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

276 
ngx_c⁄f_£t_size_¶Ÿ
,

277 
NGX_HTTP_LOC_CONF_OFFSET
,

278 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
limô_øã
),

279 
NULL
 },

281 #i‡(
NGX_HTTP_CACHE
)

283 { 
ngx_°rög
("uwsgi_cache"),

284 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

285 
ngx_hâp_uwsgi_ˇche
,

286 
NGX_HTTP_LOC_CONF_OFFSET
,

288 
NULL
 },

290 { 
ngx_°rög
("uwsgi_cache_key"),

291 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

292 
ngx_hâp_uwsgi_ˇche_key
,

293 
NGX_HTTP_LOC_CONF_OFFSET
,

295 
NULL
 },

297 { 
ngx_°rög
("uwsgi_cache_path"),

298 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

299 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

300 
NGX_HTTP_MAIN_CONF_OFFSET
,

301 
off£tof
(
ngx_hâp_uwsgi_maö_c⁄f_t
, 
ˇches
),

302 &
ngx_hâp_uwsgi_moduÀ
 },

304 { 
ngx_°rög
("uwsgi_cache_bypass"),

305 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

306 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

307 
NGX_HTTP_LOC_CONF_OFFSET
,

308 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

309 
NULL
 },

311 { 
ngx_°rög
("uwsgi_no_cache"),

312 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

313 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

314 
NGX_HTTP_LOC_CONF_OFFSET
,

315 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

316 
NULL
 },

318 { 
ngx_°rög
("uwsgi_cache_valid"),

319 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

320 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

321 
NGX_HTTP_LOC_CONF_OFFSET
,

322 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

323 
NULL
 },

325 { 
ngx_°rög
("uwsgi_cache_min_uses"),

326 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

327 
ngx_c⁄f_£t_num_¶Ÿ
,

328 
NGX_HTTP_LOC_CONF_OFFSET
,

329 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

330 
NULL
 },

332 { 
ngx_°rög
("uwsgi_cache_use_stale"),

333 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

334 
ngx_c⁄f_£t_bômask_¶Ÿ
,

335 
NGX_HTTP_LOC_CONF_OFFSET
,

336 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

337 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

339 { 
ngx_°rög
("uwsgi_cache_methods"),

340 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

341 
ngx_c⁄f_£t_bômask_¶Ÿ
,

342 
NGX_HTTP_LOC_CONF_OFFSET
,

343 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

344 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

346 { 
ngx_°rög
("uwsgi_cache_lock"),

347 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

348 
ngx_c⁄f_£t_Êag_¶Ÿ
,

349 
NGX_HTTP_LOC_CONF_OFFSET
,

350 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

351 
NULL
 },

353 { 
ngx_°rög
("uwsgi_cache_lock_timeout"),

354 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

355 
ngx_c⁄f_£t_m£c_¶Ÿ
,

356 
NGX_HTTP_LOC_CONF_OFFSET
,

357 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

358 
NULL
 },

360 { 
ngx_°rög
("uwsgi_cache_lock_age"),

361 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

362 
ngx_c⁄f_£t_m£c_¶Ÿ
,

363 
NGX_HTTP_LOC_CONF_OFFSET
,

364 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_age
),

365 
NULL
 },

367 { 
ngx_°rög
("uwsgi_cache_revalidate"),

368 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

369 
ngx_c⁄f_£t_Êag_¶Ÿ
,

370 
NGX_HTTP_LOC_CONF_OFFSET
,

371 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_ªvÆid©e
),

372 
NULL
 },

376 { 
ngx_°rög
("uwsgi_temp_path"),

377 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

378 
ngx_c⁄f_£t_∑th_¶Ÿ
,

379 
NGX_HTTP_LOC_CONF_OFFSET
,

380 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

381 
NULL
 },

383 { 
ngx_°rög
("uwsgi_max_temp_file_size"),

384 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

385 
ngx_c⁄f_£t_size_¶Ÿ
,

386 
NGX_HTTP_LOC_CONF_OFFSET
,

387 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

388 
NULL
 },

390 { 
ngx_°rög
("uwsgi_temp_file_write_size"),

391 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

392 
ngx_c⁄f_£t_size_¶Ÿ
,

393 
NGX_HTTP_LOC_CONF_OFFSET
,

394 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

395 
NULL
 },

397 { 
ngx_°rög
("uwsgi_next_upstream"),

398 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

399 
ngx_c⁄f_£t_bômask_¶Ÿ
,

400 
NGX_HTTP_LOC_CONF_OFFSET
,

401 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

402 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

404 { 
ngx_°rög
("uwsgi_next_upstream_tries"),

405 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

406 
ngx_c⁄f_£t_num_¶Ÿ
,

407 
NGX_HTTP_LOC_CONF_OFFSET
,

408 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_åõs
),

409 
NULL
 },

411 { 
ngx_°rög
("uwsgi_next_upstream_timeout"),

412 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

413 
ngx_c⁄f_£t_m£c_¶Ÿ
,

414 
NGX_HTTP_LOC_CONF_OFFSET
,

415 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam_timeout
),

416 
NULL
 },

418 { 
ngx_°rög
("uwsgi_param"),

419 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

420 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

421 
NGX_HTTP_LOC_CONF_OFFSET
,

422 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
∑øms_sour˚
),

423 
NULL
 },

425 { 
ngx_°rög
("uwsgi_string"),

426 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

427 
ngx_c⁄f_£t_°r_¶Ÿ
,

428 
NGX_HTTP_LOC_CONF_OFFSET
,

429 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
uwsgi_°rög
),

430 
NULL
 },

432 { 
ngx_°rög
("uwsgi_pass_header"),

433 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

434 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

435 
NGX_HTTP_LOC_CONF_OFFSET
,

436 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

437 
NULL
 },

439 { 
ngx_°rög
("uwsgi_hide_header"),

440 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

441 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

442 
NGX_HTTP_LOC_CONF_OFFSET
,

443 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

444 
NULL
 },

446 { 
ngx_°rög
("uwsgi_ignore_headers"),

447 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

448 
ngx_c⁄f_£t_bômask_¶Ÿ
,

449 
NGX_HTTP_LOC_CONF_OFFSET
,

450 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

451 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

453 #i‡(
NGX_HTTP_SSL
)

455 { 
ngx_°rög
("uwsgi_ssl_session_reuse"),

456 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

457 
ngx_c⁄f_£t_Êag_¶Ÿ
,

458 
NGX_HTTP_LOC_CONF_OFFSET
,

459 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

460 
NULL
 },

462 { 
ngx_°rög
("uwsgi_ssl_protocols"),

463 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

464 
ngx_c⁄f_£t_bômask_¶Ÿ
,

465 
NGX_HTTP_LOC_CONF_OFFSET
,

466 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_¥Ÿocﬁs
),

467 &
ngx_hâp_uwsgi_s¶_¥Ÿocﬁs
 },

469 { 
ngx_°rög
("uwsgi_ssl_ciphers"),

470 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

471 
ngx_c⁄f_£t_°r_¶Ÿ
,

472 
NGX_HTTP_LOC_CONF_OFFSET
,

473 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_cùhîs
),

474 
NULL
 },

476 { 
ngx_°rög
("uwsgi_ssl_name"),

477 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

478 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

479 
NGX_HTTP_LOC_CONF_OFFSET
,

480 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
s¶_«me
),

481 
NULL
 },

483 { 
ngx_°rög
("uwsgi_ssl_server_name"),

484 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

485 
ngx_c⁄f_£t_Êag_¶Ÿ
,

486 
NGX_HTTP_LOC_CONF_OFFSET
,

487 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
s¶_£rvî_«me
),

488 
NULL
 },

490 { 
ngx_°rög
("uwsgi_ssl_verify"),

491 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

492 
ngx_c⁄f_£t_Êag_¶Ÿ
,

493 
NGX_HTTP_LOC_CONF_OFFSET
,

494 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
s¶_vîify
),

495 
NULL
 },

497 { 
ngx_°rög
("uwsgi_ssl_verify_depth"),

498 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

499 
ngx_c⁄f_£t_num_¶Ÿ
,

500 
NGX_HTTP_LOC_CONF_OFFSET
,

501 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_vîify_dïth
),

502 
NULL
 },

504 { 
ngx_°rög
("uwsgi_ssl_trusted_certificate"),

505 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

506 
ngx_c⁄f_£t_°r_¶Ÿ
,

507 
NGX_HTTP_LOC_CONF_OFFSET
,

508 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_åu°ed_˚πifiˇã
),

509 
NULL
 },

511 { 
ngx_°rög
("uwsgi_ssl_crl"),

512 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

513 
ngx_c⁄f_£t_°r_¶Ÿ
,

514 
NGX_HTTP_LOC_CONF_OFFSET
,

515 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_¸l
),

516 
NULL
 },

518 { 
ngx_°rög
("uwsgi_ssl_certificate"),

519 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

520 
ngx_c⁄f_£t_°r_¶Ÿ
,

521 
NGX_HTTP_LOC_CONF_OFFSET
,

522 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_˚πifiˇã
),

523 
NULL
 },

525 { 
ngx_°rög
("uwsgi_ssl_certificate_key"),

526 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

527 
ngx_c⁄f_£t_°r_¶Ÿ
,

528 
NGX_HTTP_LOC_CONF_OFFSET
,

529 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
s¶_˚πifiˇã_key
),

530 
NULL
 },

532 { 
ngx_°rög
("uwsgi_ssl_password_file"),

533 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

534 
ngx_hâp_uwsgi_s¶_∑ssw‹d_fûe
,

535 
NGX_HTTP_LOC_CONF_OFFSET
,

537 
NULL
 },

541 
ngx_nuŒ_comm™d


545 
ngx_hâp_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ_˘x
 = {

546 
NULL
,

547 
NULL
,

549 
ngx_hâp_uwsgi_¸óã_maö_c⁄f
,

550 
NULL
,

552 
NULL
,

553 
NULL
,

555 
ngx_hâp_uwsgi_¸óã_loc_c⁄f
,

556 
ngx_hâp_uwsgi_mîge_loc_c⁄f


560 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
 = {

561 
NGX_MODULE_V1
,

562 &
ngx_hâp_uwsgi_moduÀ_˘x
,

563 
ngx_hâp_uwsgi_comm™ds
,

564 
NGX_HTTP_MODULE
,

565 
NULL
,

566 
NULL
,

567 
NULL
,

568 
NULL
,

569 
NULL
,

570 
NULL
,

571 
NULL
,

572 
NGX_MODULE_V1_PADDING


576 
ngx_°r_t
 
	gngx_hâp_uwsgi_hide_hódîs
[] = {

577 
ngx_°rög
("X-Accel-Expires"),

578 
ngx_°rög
("X-Accel-Redirect"),

579 
ngx_°rög
("X-Accel-Limit-Rate"),

580 
ngx_°rög
("X-Accel-Buffering"),

581 
ngx_°rög
("X-Accel-Charset"),

582 
ngx_nuŒ_°rög


586 #i‡(
NGX_HTTP_CACHE
)

588 
ngx_keyvÆ_t
 
	gngx_hâp_uwsgi_ˇche_hódîs
[] = {

589 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),

590 
ngx_°rög
("$upstream_cache_last_modified") },

591 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

592 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("$upstream_cache_etag") },

593 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

594 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

595 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

596 { 
ngx_nuŒ_°rög
,Çgx_null_string }

602 
ngx_∑th_öô_t
 
	gngx_hâp_uwsgi_ãmp_∑th
 = {

603 
ngx_°rög
(
NGX_HTTP_UWSGI_TEMP_PATH
), { 1, 2, 0 }

607 
ngx_öt_t


608 
	$ngx_hâp_uwsgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

610 
ngx_öt_t
 
rc
;

611 
ngx_hâp_°©us_t
 *
°©us
;

612 
ngx_hâp_up°ªam_t
 *
u
;

613 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

614 #i‡(
NGX_HTTP_CACHE
)

615 
ngx_hâp_uwsgi_maö_c⁄f_t
 *
uwmcf
;

618 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

619  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

622 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

623 i‡(
°©us
 =
NULL
) {

624  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

627 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_uwsgi_moduÀ
);

629 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

631 
u
 = 
r
->
up°ªam
;

633 i‡(
uwcf
->
uwsgi_Àngths
 =
NULL
) {

635 #i‡(
NGX_HTTP_SSL
)

636 
u
->
s¶
 = (
uwcf
->
up°ªam
.s¶ !
NULL
);

638 i‡(
u
->
s¶
) {

639 
	`ngx_°r_£t
(&
u
->
schema
, "suwsgi://");

642 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

645 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

649 i‡(
	`ngx_hâp_uwsgi_evÆ
(
r
, 
uwcf
Ë!
NGX_OK
) {

650  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

654 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_uwsgi_moduÀ
;

656 
u
->
c⁄f
 = &
uwcf
->
up°ªam
;

658 #i‡(
NGX_HTTP_CACHE
)

659 
uwmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

661 
u
->
ˇches
 = &
uwmcf
->caches;

662 
u
->
¸óã_key
 = 
ngx_hâp_uwsgi_¸óã_key
;

665 
u
->
¸óã_ªque°
 = 
ngx_hâp_uwsgi_¸óã_ªque°
;

666 
u
->
ªöô_ªque°
 = 
ngx_hâp_uwsgi_ªöô_ªque°
;

667 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

668 
u
->
ab‹t_ªque°
 = 
ngx_hâp_uwsgi_ab‹t_ªque°
;

669 
u
->
föÆize_ªque°
 = 
ngx_hâp_uwsgi_föÆize_ªque°
;

670 
r
->
°©e
 = 0;

672 
u
->
buf„rög
 = 
uwcf
->
up°ªam
.buffering;

674 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

675 i‡(
u
->
pùe
 =
NULL
) {

676  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

679 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

680 
u
->
pùe
->
öput_˘x
 = 
r
;

682 i‡(!
uwcf
->
up°ªam
.
ªque°_buf„rög


683 && 
uwcf
->
up°ªam
.
∑ss_ªque°_body


684 && !
r
->
hódîs_ö
.
chunked
)

686 
r
->
ªque°_body_no_buf„rög
 = 1;

689 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

691 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

692  
rc
;

695  
NGX_DONE
;

696 
	}
}

699 
ngx_öt_t


700 
	$ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 * 
uwcf
)

702 
size_t
 
add
;

703 
ngx_uæ_t
 
uæ
;

704 
ngx_hâp_up°ªam_t
 *
u
;

706 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

708 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
uwcf
->
uwsgi_Àngths
->
ñts
, 0,

709 
uwcf
->
uwsgi_vÆues
->
ñts
)

710 =
NULL
)

712  
NGX_ERROR
;

715 i‡(
uæ
.uæ.
Àn
 > 8

716 && 
	`ngx_°∫ˇ£cmp
(
uæ
.uæ.
d©a
, (
u_ch¨
 *) "uwsgi://", 8) == 0)

718 
add
 = 8;

720 } i‡(
uæ
.uæ.
Àn
 > 9

721 && 
	`ngx_°∫ˇ£cmp
(
uæ
.uæ.
d©a
, (
u_ch¨
 *) "suwsgi://", 9) == 0)

724 #i‡(
NGX_HTTP_SSL
)

725 
add
 = 9;

726 
r
->
up°ªam
->
s¶
 = 1;

728 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

730  
NGX_ERROR
;

734 
add
 = 0;

737 
u
 = 
r
->
up°ªam
;

739 i‡(
add
) {

740 
u
->
schema
.
Àn
 = 
add
;

741 
u
->
schema
.
d©a
 = 
uæ
.url.data;

743 
uæ
.uæ.
d©a
 +
add
;

744 
uæ
.uæ.
Àn
 -
add
;

747 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

750 
uæ
.
no_ªsﬁve
 = 1;

752 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

753 i‡(
uæ
.
îr
) {

754 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

755 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

758  
NGX_ERROR
;

761 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

762 i‡(
u
->
ªsﬁved
 =
NULL
) {

763  
NGX_ERROR
;

766 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

767 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

768 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

769 
u
->
ªsﬁved
->
«ddrs
 = 1;

770 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

773 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

774 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

775 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

778  
NGX_OK
;

779 
	}
}

782 #i‡(
NGX_HTTP_CACHE
)

784 
ngx_öt_t


785 
	$ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

787 
ngx_°r_t
 *
key
;

788 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

790 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

791 i‡(
key
 =
NULL
) {

792  
NGX_ERROR
;

795 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

797 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
uwcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

798  
NGX_ERROR
;

801  
NGX_OK
;

802 
	}
}

807 
ngx_öt_t


808 
	$ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

810 
u_ch¨
 
ch
, *
lowˇ£_key
;

811 
size_t
 
key_Àn
, 
vÆ_Àn
, 
Àn
, 
Æloˇãd
;

812 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

813 
ngx_buf_t
 *
b
;

814 
ngx_chaö_t
 *
˛
, *
body
;

815 
ngx_li°_∑π_t
 *
∑π
;

816 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

817 
ngx_hâp_uwsgi_∑øms_t
 *
∑øms
;

818 
ngx_hâp_s¸ùt_code_±
 
code
;

819 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

820 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

821 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

823 
Àn
 = 0;

824 
hódî_∑øms
 = 0;

825 
ign‹ed
 = 
NULL
;

827 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

829 #i‡(
NGX_HTTP_CACHE
)

830 
∑øms
 = 
r
->
up°ªam
->
ˇchóbÀ
 ? &
uwcf
->
∑øms_ˇche
 : &uwcf->params;

832 
∑øms
 = &
uwcf
->params;

835 i‡(
∑øms
->
Àngths
) {

836 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

838 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∑øms
->
Êushes
);

839 
À
.
Êushed
 = 1;

841 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

842 
À
.
ªque°
 = 
r
;

844 *(
uöçå_t
 *Ë
À
.
ù
) {

846 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

847 
key_Àn
 = 
	`lcode
(&
À
);

849 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

850 
skù_em±y
 = 
	`lcode
(&
À
);

852 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
 (&le)) {

853 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

855 
À
.
ù
 +(
uöçå_t
);

857 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

861 
Àn
 +2 + 
key_Àn
 + 2 + 
vÆ_Àn
;

865 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

867 
Æloˇãd
 = 0;

868 
lowˇ£_key
 = 
NULL
;

870 i‡(
∑øms
->
numbî
) {

871 
n
 = 0;

872 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

874 
∑π
) {

875 
n
 +
∑π
->
√…s
;

876 
∑π
 =Ö¨t->
√xt
;

879 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

880 i‡(
ign‹ed
 =
NULL
) {

881  
NGX_ERROR
;

885 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

886 
hódî
 = 
∑π
->
ñts
;

888 
i
 = 0; ; i++) {

890 i‡(
i
 >
∑π
->
√…s
) {

891 i‡(
∑π
->
√xt
 =
NULL
) {

895 
∑π
 =Ö¨t->
√xt
;

896 
hódî
 = 
∑π
->
ñts
;

897 
i
 = 0;

900 i‡(
∑øms
->
numbî
) {

901 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

902 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

903 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

904 i‡(
lowˇ£_key
 =
NULL
) {

905  
NGX_ERROR
;

909 
hash
 = 0;

911 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

912 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

914 i‡(
ch
 >= 'A' && ch <= 'Z') {

915 
ch
 |= 0x20;

917 } i‡(
ch
 == '-') {

918 
ch
 = '_';

921 
hash
 = 
	`ngx_hash
(hash, 
ch
);

922 
lowˇ£_key
[
n
] = 
ch
;

925 i‡(
	`ngx_hash_föd
(&
∑øms
->
hash
, hash, 
lowˇ£_key
, 
n
)) {

926 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

931 
Àn
 +2 + ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len

932 + 2 + 
hódî
[
i
].
vÆue
.
Àn
;

936 
Àn
 +
uwcf
->
uwsgi_°rög
.len;

940 i‡(
Àn
 > 0 &&Üen < 2) {

941 
	`ngx_log_îr‹
 (
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

942 "uwsgòªque° i†toÿlôée: %uz", 
Àn
);

943  
NGX_ERROR
;

947 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
 + 4);

948 i‡(
b
 =
NULL
) {

949  
NGX_ERROR
;

952 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

953 i‡(
˛
 =
NULL
) {

954  
NGX_ERROR
;

957 
˛
->
buf
 = 
b
;

959 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr1
;

960 *
b
->
œ°
++ = (
u_ch¨
Ë(
Àn
 & 0xff);

961 *
b
->
œ°
++ = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

962 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr2
;

964 i‡(
∑øms
->
Àngths
) {

965 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

967 
e
.
ù
 = 
∑øms
->
vÆues
->
ñts
;

968 
e
.
pos
 = 
b
->
œ°
;

969 
e
.
ªque°
 = 
r
;

970 
e
.
Êushed
 = 1;

972 
À
.
ù
 = 
∑øms
->
Àngths
->
ñts
;

974 *(
uöçå_t
 *Ë
À
.
ù
) {

976 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

977 
key_Àn
 = (
u_ch¨
Ë
	`lcode
 (&
À
);

979 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

980 
skù_em±y
 = 
	`lcode
(&
À
);

982 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

983 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

985 
À
.
ù
 +(
uöçå_t
);

987 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

988 
e
.
skù
 = 1;

990 *(
uöçå_t
 *Ë
e
.
ù
) {

991 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

992 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

994 
e
.
ù
 +(
uöçå_t
);

996 
e
.
skù
 = 0;

1001 *
e
.
pos
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

1002 *
e
.
pos
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

1004 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1005 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

1007 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1008 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1010 *(
uöçå_t
 *Ë
e
.
ù
) {

1011 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1012 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

1015 
e
.
ù
 +(
uöçå_t
);

1017 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1019 
key_Àn
, 
e
.
pos
 - (key_À¿+ 2 + 
vÆ_Àn
),

1020 
vÆ_Àn
, 
e
.
pos
 - val_len);

1023 
b
->
œ°
 = 
e
.
pos
;

1026 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1028 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1029 
hódî
 = 
∑π
->
ñts
;

1031 
i
 = 0; ; i++) {

1033 i‡(
i
 >
∑π
->
√…s
) {

1034 i‡(
∑π
->
√xt
 =
NULL
) {

1038 
∑π
 =Ö¨t->
√xt
;

1039 
hódî
 = 
∑π
->
ñts
;

1040 
i
 = 0;

1043 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

1044 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

1045 
√xt
;

1049 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

1050 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

1051 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

1053 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

1054 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

1055 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

1057 i‡(
ch
 >= 'a' && ch <= 'z') {

1058 
ch
 &= ~0x20;

1060 } i‡(
ch
 == '-') {

1061 
ch
 = '_';

1064 *
b
->
œ°
++ = 
ch
;

1067 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

1068 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1069 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1070 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

1072 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1074 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 2 + 
vÆ_Àn
),

1075 
vÆ_Àn
, 
b
->
œ°
 - val_len);

1076 
√xt
:

1082 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
uwcf
->
uwsgi_°rög
.
d©a
,

1083 
uwcf
->
uwsgi_°rög
.
Àn
);

1085 i‡(
r
->
ªque°_body_no_buf„rög
) {

1086 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1088 } i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_body
) {

1089 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

1090 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1092 
body
) {

1093 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1094 i‡(
b
 =
NULL
) {

1095  
NGX_ERROR
;

1098 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1100 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1101 i‡(
˛
->
√xt
 =
NULL
) {

1102  
NGX_ERROR
;

1105 
˛
 = cl->
√xt
;

1106 
˛
->
buf
 = 
b
;

1108 
body
 = body->
√xt
;

1112 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1115 
˛
->
√xt
 = 
NULL
;

1117  
NGX_OK
;

1118 
	}
}

1121 
ngx_öt_t


1122 
	$ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1124 
ngx_hâp_°©us_t
 *
°©us
;

1126 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

1128 i‡(
°©us
 =
NULL
) {

1129  
NGX_OK
;

1132 
°©us
->
code
 = 0;

1133 
°©us
->
cou¡
 = 0;

1134 
°©us
->
°¨t
 = 
NULL
;

1135 
°©us
->
íd
 = 
NULL
;

1137 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

1138 
r
->
°©e
 = 0;

1140  
NGX_OK
;

1141 
	}
}

1144 
ngx_öt_t


1145 
	$ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

1147 
size_t
 
Àn
;

1148 
ngx_öt_t
 
rc
;

1149 
ngx_hâp_°©us_t
 *
°©us
;

1150 
ngx_hâp_up°ªam_t
 *
u
;

1152 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

1154 i‡(
°©us
 =
NULL
) {

1155  
NGX_ERROR
;

1158 
u
 = 
r
->
up°ªam
;

1160 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

1162 i‡(
rc
 =
NGX_AGAIN
) {

1163  
rc
;

1166 i‡(
rc
 =
NGX_ERROR
) {

1167 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

1168  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

1171 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1172 
u
->
°©e
->
°©us
 = sètus->
code
;

1175 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

1177 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

1178 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

1180 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1181 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

1182  
NGX_ERROR
;

1185 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

1187 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1189 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1191 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

1193  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

1194 
	}
}

1197 
ngx_öt_t


1198 
	$ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1200 
ngx_°r_t
 *
°©us_löe
;

1201 
ngx_öt_t
 
rc
, 
°©us
;

1202 
ngx_èbÀ_ñt_t
 *
h
;

1203 
ngx_hâp_up°ªam_t
 *
u
;

1204 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1205 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1207 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1211 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1213 i‡(
rc
 =
NGX_OK
) {

1217 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1218 i‡(
h
 =
NULL
) {

1219  
NGX_ERROR
;

1222 
h
->
hash
 = 
r
->
hódî_hash
;

1224 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1225 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1227 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1228 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1229 + 
h
->
key
.
Àn
);

1230 i‡(
h
->
key
.
d©a
 =
NULL
) {

1231  
NGX_ERROR
;

1234 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1235 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1237 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1238 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1239 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1240 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1242 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1243 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1246 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1249 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1250 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1252 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1253  
NGX_ERROR
;

1256 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1257 "hâ∞uwsgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

1262 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1266 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1269 
u
 = 
r
->
up°ªam
;

1271 i‡(
u
->
hódîs_ö
.
°©us_n
) {

1272 
d⁄e
;

1275 i‡(
u
->
hódîs_ö
.
°©us
) {

1276 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1278 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1279 i‡(
°©us
 =
NGX_ERROR
) {

1280 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1282 
°©us_löe
);

1283  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1286 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1287 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1289 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1290 
u
->
hódîs_ö
.
°©us_n
 = 302;

1291 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1295 
u
->
hódîs_ö
.
°©us_n
 = 200;

1296 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1299 i‡(
u
->
°©e
 && u->°©e->
°©us
 == 0) {

1300 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1303 
d⁄e
:

1305 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS


1306 && 
r
->
hódîs_ö
.
upgøde
)

1308 
u
->
upgøde
 = 1;

1311  
NGX_OK
;

1314 i‡(
rc
 =
NGX_AGAIN
) {

1315  
NGX_AGAIN
;

1320 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1323  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1325 
	}
}

1329 
	$ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1331 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1335 
	}
}

1339 
	$ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1341 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1345 
	}
}

1349 
	$ngx_hâp_uwsgi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1351 
ngx_hâp_uwsgi_maö_c⁄f_t
 *
c⁄f
;

1353 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_uwsgi_maö_c⁄f_t
));

1354 i‡(
c⁄f
 =
NULL
) {

1355  
NULL
;

1358 #i‡(
NGX_HTTP_CACHE
)

1359 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
ˇches
, 
cf
->
poﬁ
, 4,

1360 (
ngx_hâp_fûe_ˇche_t
 *))

1361 !
NGX_OK
)

1363  
NULL
;

1367  
c⁄f
;

1368 
	}
}

1372 
	$ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1374 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
;

1376 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_uwsgi_loc_c⁄f_t
));

1377 i‡(
c⁄f
 =
NULL
) {

1378  
NULL
;

1381 
c⁄f
->
modifõr1
 = 
NGX_CONF_UNSET_UINT
;

1382 
c⁄f
->
modifõr2
 = 
NGX_CONF_UNSET_UINT
;

1384 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1385 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1386 
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
 = 
NGX_CONF_UNSET_UINT
;

1387 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1388 
c⁄f
->
up°ªam
.
ªque°_buf„rög
 = 
NGX_CONF_UNSET
;

1389 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1390 
c⁄f
->
up°ªam
.
f‹˚_ønges
 = 
NGX_CONF_UNSET
;

1392 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

1394 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1395 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1396 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1397 
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1399 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1400 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1401 
c⁄f
->
up°ªam
.
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

1403 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1404 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1405 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1407 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1408 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1410 #i‡(
NGX_HTTP_CACHE
)

1411 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET
;

1412 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1413 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1414 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1415 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1416 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1417 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1418 
c⁄f
->
up°ªam
.
ˇche_lock_age
 = 
NGX_CONF_UNSET_MSEC
;

1419 
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
 = 
NGX_CONF_UNSET
;

1422 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1423 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1425 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1427 #i‡(
NGX_HTTP_SSL
)

1428 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

1429 
c⁄f
->
up°ªam
.
s¶_£rvî_«me
 = 
NGX_CONF_UNSET
;

1430 
c⁄f
->
up°ªam
.
s¶_vîify
 = 
NGX_CONF_UNSET
;

1431 
c⁄f
->
s¶_vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

1432 
c⁄f
->
s¶_∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

1436 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1438 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1440 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "uwsgi");

1442  
c⁄f
;

1443 
	}
}

1447 
	$ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1449 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1450 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1452 
size_t
 
size
;

1453 
ngx_öt_t
 
rc
;

1454 
ngx_hash_öô_t
 
hash
;

1455 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1457 #i‡(
NGX_HTTP_CACHE
)

1459 i‡(
c⁄f
->
up°ªam
.
°‹e
 > 0) {

1460 
c⁄f
->
up°ªam
.
ˇche
 = 0;

1463 i‡(
c⁄f
->
up°ªam
.
ˇche
 > 0) {

1464 
c⁄f
->
up°ªam
.
°‹e
 = 0;

1469 i‡(
c⁄f
->
up°ªam
.
°‹e
 =
NGX_CONF_UNSET
) {

1470 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1472 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1473 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1476 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1477 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1479 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_åõs
,

1480 
¥ev
->
up°ªam
.
√xt_up°ªam_åõs
, 0);

1482 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1483 
¥ev
->
up°ªam
.
buf„rög
, 1);

1485 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ªque°_buf„rög
,

1486 
¥ev
->
up°ªam
.
ªque°_buf„rög
, 1);

1488 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1489 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1491 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
f‹˚_ønges
,

1492 
¥ev
->
up°ªam
.
f‹˚_ønges
, 0);

1494 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

1495 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

1497 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1498 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1500 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1501 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1503 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1504 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1506 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam_timeout
,

1507 
¥ev
->
up°ªam
.
√xt_up°ªam_timeout
, 0);

1509 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1510 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1512 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1513 
¥ev
->
up°ªam
.
buf„r_size
,

1514 (
size_t
Ë
ngx_∑gesize
);

1516 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
limô_øã
,

1517 
¥ev
->
up°ªam
.
limô_øã
, 0);

1520 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1521 8, 
ngx_∑gesize
);

1523 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1524 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1526  
NGX_CONF_ERROR
;

1530 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1531 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1532 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1536 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1537 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1538 
NGX_CONF_UNSET_SIZE
);

1540 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1541 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1543 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1544 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1547 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1548 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1553  
NGX_CONF_ERROR
;

1556 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1557 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1559 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1563  
NGX_CONF_ERROR
;

1567 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1568 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1569 
NGX_CONF_UNSET_SIZE
);

1571 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1572 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1574 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1575 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1578 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1579 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1584  
NGX_CONF_ERROR
;

1588 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1589 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1590 
NGX_CONF_UNSET_SIZE
);

1592 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1593 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1595 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1596 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1599 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1600 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

1602 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1608  
NGX_CONF_ERROR
;

1612 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1613 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1614 
NGX_CONF_BITMASK_SET
);

1617 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1618 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1619 (
NGX_CONF_BITMASK_SET


1620 |
NGX_HTTP_UPSTREAM_FT_ERROR


1621 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1623 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1624 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1625 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1628 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1629 
¥ev
->
up°ªam
.
ãmp_∑th
,

1630 &
ngx_hâp_uwsgi_ãmp_∑th
)

1631 !
NGX_OK
)

1633  
NGX_CONF_ERROR
;

1636 #i‡(
NGX_HTTP_CACHE
)

1638 i‡(
c⁄f
->
up°ªam
.
ˇche
 =
NGX_CONF_UNSET
) {

1639 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1640 
¥ev
->
up°ªam
.
ˇche
, 0);

1642 
c⁄f
->
up°ªam
.
ˇche_z⁄e
 = 
¥ev
->upstream.cache_zone;

1643 
c⁄f
->
up°ªam
.
ˇche_vÆue
 = 
¥ev
->upstream.cache_value;

1646 i‡(
c⁄f
->
up°ªam
.
ˇche_z⁄e
 && c⁄f->up°ªam.ˇche_z⁄e->
d©a
 =
NULL
) {

1647 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1649 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche_z⁄e
;

1651 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1653 &
shm_z⁄e
->
shm
.
«me
);

1655  
NGX_CONF_ERROR
;

1658 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1659 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1661 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1662 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1663 (
NGX_CONF_BITMASK_SET


1664 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1666 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1667 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1668 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1671 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1672 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1675 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1676 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1679 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1681 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1682 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1684 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1685 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1687 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1688 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1690 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1691 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1694 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1695 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1699 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1700 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1702 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1703 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1705 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_age
,

1706 
¥ev
->
up°ªam
.
ˇche_lock_age
, 5000);

1708 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_ªvÆid©e
,

1709 
¥ev
->
up°ªam
.
ˇche_ªvÆid©e
, 0);

1713 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1714 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1715 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1716 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1718 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1719 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1721 #i‡(
NGX_HTTP_SSL
)

1723 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

1724 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

1726 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
s¶_¥Ÿocﬁs
, 
¥ev
->ssl_protocols,

1727 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3


1728 |
NGX_SSL_TLSv1
|
NGX_SSL_TLSv1_1


1729 |
NGX_SSL_TLSv1_2
));

1731 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_cùhîs
, 
¥ev
->ssl_ciphers,

1734 i‡(
c⁄f
->
up°ªam
.
s¶_«me
 =
NULL
) {

1735 
c⁄f
->
up°ªam
.
s¶_«me
 = 
¥ev
->upstream.ssl_name;

1738 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£rvî_«me
,

1739 
¥ev
->
up°ªam
.
s¶_£rvî_«me
, 0);

1740 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_vîify
,

1741 
¥ev
->
up°ªam
.
s¶_vîify
, 0);

1742 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
s¶_vîify_dïth
,

1743 
¥ev
->
s¶_vîify_dïth
, 1);

1744 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_åu°ed_˚πifiˇã
,

1745 
¥ev
->
s¶_åu°ed_˚πifiˇã
, "");

1746 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_¸l
, 
¥ev
->ssl_crl, "");

1748 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã
,

1749 
¥ev
->
s¶_˚πifiˇã
, "");

1750 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
s¶_˚πifiˇã_key
,

1751 
¥ev
->
s¶_˚πifiˇã_key
, "");

1752 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
s¶_∑ssw‹ds
, 
¥ev
->s¶_∑ssw‹ds, 
NULL
);

1754 i‡(
c⁄f
->
s¶
 && 
	`ngx_hâp_uwsgi_£t_s¶
(
cf
, c⁄fË!
NGX_OK
) {

1755  
NGX_CONF_ERROR
;

1760 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
uwsgi_°rög
, 
¥ev
->uwsgi_string, "");

1762 
hash
.
max_size
 = 512;

1763 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1764 
hash
.
«me
 = "uwsgi_hide_headers_hash";

1766 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1767 &
¥ev
->
up°ªam
, 
ngx_hâp_uwsgi_hide_hódîs
, &
hash
)

1768 !
NGX_OK
)

1770  
NGX_CONF_ERROR
;

1773 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1775 i‡(
˛cf
->
n⁄ame


1776 && 
c⁄f
->
up°ªam
.up°ªam =
NULL
 && c⁄f->
uwsgi_Àngths
 == NULL)

1778 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1780 
c⁄f
->
uwsgi_Àngths
 = 
¥ev
->uwsgi_lengths;

1781 
c⁄f
->
uwsgi_vÆues
 = 
¥ev
->uwsgi_values;

1783 #i‡(
NGX_HTTP_SSL
)

1784 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

1788 i‡(
˛cf
->
lmt_ex˝t
 && clcf->
h™dÀr
 =
NULL


1789 && (
c⁄f
->
up°ªam
.up°ªam || c⁄f->
uwsgi_Àngths
))

1791 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1794 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr1
, 
¥ev
->modifier1, 0);

1795 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr2
, 
¥ev
->modifier2, 0);

1797 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1798 
c⁄f
->
∑øms
 = 
¥ev
->params;

1799 #i‡(
NGX_HTTP_CACHE
)

1800 
c⁄f
->
∑øms_ˇche
 = 
¥ev
->params_cache;

1802 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1805 
rc
 = 
	`ngx_hâp_uwsgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms
, 
NULL
);

1806 i‡(
rc
 !
NGX_OK
) {

1807  
NGX_CONF_ERROR
;

1810 #i‡(
NGX_HTTP_CACHE
)

1812 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1813 
rc
 = 
	`ngx_hâp_uwsgi_öô_∑øms
(
cf
, 
c⁄f
, &c⁄f->
∑øms_ˇche
,

1814 
ngx_hâp_uwsgi_ˇche_hódîs
);

1815 i‡(
rc
 !
NGX_OK
) {

1816  
NGX_CONF_ERROR
;

1822  
NGX_CONF_OK
;

1823 
	}
}

1826 
ngx_öt_t


1827 
	$ngx_hâp_uwsgi_öô_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,

1828 
ngx_hâp_uwsgi_∑øms_t
 *
∑øms
, 
ngx_keyvÆ_t
 *
deÁu…_∑øms
)

1830 
u_ch¨
 *
p
;

1831 
size_t
 
size
;

1832 
uöçå_t
 *
code
;

1833 
ngx_uöt_t
 
i
, 
n§c
;

1834 
ngx_¨øy_t
 
hódîs_«mes
, 
∑øms_mîged
;

1835 
ngx_keyvÆ_t
 *
h
;

1836 
ngx_hash_key_t
 *
hk
;

1837 
ngx_hash_öô_t
 
hash
;

1838 
ngx_hâp_up°ªam_∑øm_t
 *
§c
, *
s
;

1839 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1840 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1842 i‡(
∑øms
->
hash
.
buckës
) {

1843  
NGX_OK
;

1846 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
 && 
deÁu…_∑øms
 == NULL) {

1847 
∑øms
->
hash
.
buckës
 = (*) 1;

1848  
NGX_OK
;

1851 
∑øms
->
Àngths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1852 i‡(
∑øms
->
Àngths
 =
NULL
) {

1853  
NGX_ERROR
;

1856 
∑øms
->
vÆues
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1857 i‡(
∑øms
->
vÆues
 =
NULL
) {

1858  
NGX_ERROR
;

1861 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1862 !
NGX_OK
)

1864  
NGX_ERROR
;

1867 i‡(
c⁄f
->
∑øms_sour˚
) {

1868 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1869 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1872 
§c
 = 
NULL
;

1873 
n§c
 = 0;

1876 i‡(
deÁu…_∑øms
) {

1877 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1878 (
ngx_hâp_up°ªam_∑øm_t
))

1879 !
NGX_OK
)

1881  
NGX_ERROR
;

1884 
i
 = 0; i < 
n§c
; i++) {

1886 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1887 i‡(
s
 =
NULL
) {

1888  
NGX_ERROR
;

1891 *
s
 = 
§c
[
i
];

1894 
h
 = 
deÁu…_∑øms
;

1896 
h
->
key
.
Àn
) {

1898 
§c
 = 
∑øms_mîged
.
ñts
;

1899 
n§c
 = 
∑øms_mîged
.
√…s
;

1901 
i
 = 0; i < 
n§c
; i++) {

1902 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1903 
√xt
;

1907 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1908 i‡(
s
 =
NULL
) {

1909  
NGX_ERROR
;

1912 
s
->
key
 = 
h
->key;

1913 
s
->
vÆue
 = 
h
->value;

1914 
s
->
skù_em±y
 = 1;

1916 
√xt
:

1918 
h
++;

1921 
§c
 = 
∑øms_mîged
.
ñts
;

1922 
n§c
 = 
∑øms_mîged
.
√…s
;

1925 
i
 = 0; i < 
n§c
; i++) {

1927 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1928 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1930 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1931 i‡(
hk
 =
NULL
) {

1932  
NGX_ERROR
;

1935 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1936 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1937 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1938 
hk
->
vÆue
 = (*) 1;

1940 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1945 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

1946 (
ngx_hâp_s¸ùt_c›y_code_t
));

1947 i‡(
c›y
 =
NULL
) {

1948  
NGX_ERROR
;

1951 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1952 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1954 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
,

1955 (
ngx_hâp_s¸ùt_c›y_code_t
));

1956 i‡(
c›y
 =
NULL
) {

1957  
NGX_ERROR
;

1960 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1961 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

1964 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1965 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

1966 & ~((
uöçå_t
) - 1);

1968 
c›y
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, 
size
);

1969 i‡(
c›y
 =
NULL
) {

1970  
NGX_ERROR
;

1973 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1974 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1976 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1977 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

1980 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1982 
sc
.
cf
 = cf;

1983 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1984 
sc
.
Êushes
 = &
∑øms
->flushes;

1985 
sc
.
Àngths
 = &
∑øms
->lengths;

1986 
sc
.
vÆues
 = &
∑øms
->values;

1988 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1989  
NGX_ERROR
;

1992 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

1993 i‡(
code
 =
NULL
) {

1994  
NGX_ERROR
;

1997 *
code
 = (
uöçå_t
Ë
NULL
;

2000 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
vÆues
, (
uöçå_t
));

2001 i‡(
code
 =
NULL
) {

2002  
NGX_ERROR
;

2005 *
code
 = (
uöçå_t
Ë
NULL
;

2008 
code
 = 
	`ngx_¨øy_push_n
(
∑øms
->
Àngths
, (
uöçå_t
));

2009 i‡(
code
 =
NULL
) {

2010  
NGX_ERROR
;

2013 *
code
 = (
uöçå_t
Ë
NULL
;

2015 
∑øms
->
numbî
 = 
hódîs_«mes
.
√…s
;

2017 
hash
.hash = &
∑øms
->hash;

2018 
hash
.
key
 = 
ngx_hash_key_lc
;

2019 
hash
.
max_size
 = 512;

2020 
hash
.
buckë_size
 = 64;

2021 
hash
.
«me
 = "uwsgi_params_hash";

2022 
hash
.
poﬁ
 = 
cf
->pool;

2023 
hash
.
ãmp_poﬁ
 = 
NULL
;

2025  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

2026 
	}
}

2030 
	$ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2032 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2034 
size_t
 
add
;

2035 
ngx_uæ_t
 
u
;

2036 
ngx_°r_t
 *
vÆue
, *
uæ
;

2037 
ngx_uöt_t
 
n
;

2038 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2039 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2041 i‡(
uwcf
->
up°ªam
.up°ªam || uwcf->
uwsgi_Àngths
) {

2045 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2046 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

2048 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2050 
uæ
 = &
vÆue
[1];

2052 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

2054 i‡(
n
) {

2056 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2058 
sc
.
cf
 = cf;

2059 
sc
.
sour˚
 = 
uæ
;

2060 
sc
.
Àngths
 = &
uwcf
->
uwsgi_Àngths
;

2061 
sc
.
vÆues
 = &
uwcf
->
uwsgi_vÆues
;

2062 
sc
.
v¨übÀs
 = 
n
;

2063 
sc
.
com∂ëe_Àngths
 = 1;

2064 
sc
.
com∂ëe_vÆues
 = 1;

2066 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2067  
NGX_CONF_ERROR
;

2070 #i‡(
NGX_HTTP_SSL
)

2071 
uwcf
->
s¶
 = 1;

2074  
NGX_CONF_OK
;

2077 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "uwsgi://", 8) == 0) {

2078 
add
 = 8;

2080 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "suwsgi://", 9) == 0) {

2082 #i‡(
NGX_HTTP_SSL
)

2083 
add
 = 9;

2084 
uwcf
->
s¶
 = 1;

2086 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2088  
NGX_CONF_ERROR
;

2092 
add
 = 0;

2095 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

2097 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

2098 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

2099 
u
.
no_ªsﬁve
 = 1;

2101 
uwcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

2102 i‡(
uwcf
->
up°ªam
.up°ªam =
NULL
) {

2103  
NGX_CONF_ERROR
;

2106 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

2107 
˛cf
->
auto_ªdúe˘
 = 1;

2110  
NGX_CONF_OK
;

2111 
	}
}

2115 
	$ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2117 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2119 
ngx_°r_t
 *
vÆue
;

2120 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2122 i‡(
uwcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
) {

2126 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2128 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2129 
uwcf
->
up°ªam
.
°‹e
 = 0;

2130  
NGX_CONF_OK
;

2133 #i‡(
NGX_HTTP_CACHE
)

2135 i‡(
uwcf
->
up°ªam
.
ˇche
 > 0) {

2141 
uwcf
->
up°ªam
.
°‹e
 = 1;

2143 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

2144  
NGX_CONF_OK
;

2148 
vÆue
[1].
Àn
++;

2150 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2152 
sc
.
cf
 = cf;

2153 
sc
.
sour˚
 = &
vÆue
[1];

2154 
sc
.
Àngths
 = &
uwcf
->
up°ªam
.
°‹e_Àngths
;

2155 
sc
.
vÆues
 = &
uwcf
->
up°ªam
.
°‹e_vÆues
;

2156 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

2157 
sc
.
com∂ëe_Àngths
 = 1;

2158 
sc
.
com∂ëe_vÆues
 = 1;

2160 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2161  
NGX_CONF_ERROR
;

2164  
NGX_CONF_OK
;

2165 
	}
}

2168 #i‡(
NGX_HTTP_CACHE
)

2171 
	$ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2173 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2175 
ngx_°r_t
 *
vÆue
;

2176 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

2177 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

2179 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2181 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET
) {

2185 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2186 
uwcf
->
up°ªam
.
ˇche
 = 0;

2187  
NGX_CONF_OK
;

2190 i‡(
uwcf
->
up°ªam
.
°‹e
 > 0) {

2194 
uwcf
->
up°ªam
.
ˇche
 = 1;

2196 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

2198 
ccv
.
cf
 = cf;

2199 
ccv
.
vÆue
 = &value[1];

2200 
ccv
.
com∂ex_vÆue
 = &
cv
;

2202 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

2203  
NGX_CONF_ERROR
;

2206 i‡(
cv
.
Àngths
 !
NULL
) {

2208 
uwcf
->
up°ªam
.
ˇche_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

2209 (
ngx_hâp_com∂ex_vÆue_t
));

2210 i‡(
uwcf
->
up°ªam
.
ˇche_vÆue
 =
NULL
) {

2211  
NGX_CONF_ERROR
;

2214 *
uwcf
->
up°ªam
.
ˇche_vÆue
 = 
cv
;

2216  
NGX_CONF_OK
;

2219 
uwcf
->
up°ªam
.
ˇche_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

2220 &
ngx_hâp_uwsgi_moduÀ
);

2221 i‡(
uwcf
->
up°ªam
.
ˇche_z⁄e
 =
NULL
) {

2222  
NGX_CONF_ERROR
;

2225  
NGX_CONF_OK
;

2226 
	}
}

2230 
	$ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2232 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2234 
ngx_°r_t
 *
vÆue
;

2235 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

2237 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2239 i‡(
uwcf
->
ˇche_key
.
vÆue
.
d©a
) {

2243 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

2245 
ccv
.
cf
 = cf;

2246 
ccv
.
vÆue
 = &value[1];

2247 
ccv
.
com∂ex_vÆue
 = &
uwcf
->
ˇche_key
;

2249 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

2250  
NGX_CONF_ERROR
;

2253  
NGX_CONF_OK
;

2254 
	}
}

2259 #i‡(
NGX_HTTP_SSL
)

2262 
	$ngx_hâp_uwsgi_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2264 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

2266 
ngx_°r_t
 *
vÆue
;

2268 i‡(
uwcf
->
s¶_∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

2272 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2274 
uwcf
->
s¶_∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

2276 i‡(
uwcf
->
s¶_∑ssw‹ds
 =
NULL
) {

2277  
NGX_CONF_ERROR
;

2280  
NGX_CONF_OK
;

2281 
	}
}

2284 
ngx_öt_t


2285 
	$ngx_hâp_uwsgi_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
)

2287 
ngx_poﬁ_˛ónup_t
 *
˛n
;

2289 
uwcf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

2290 i‡(
uwcf
->
up°ªam
.
s¶
 =
NULL
) {

2291  
NGX_ERROR
;

2294 
uwcf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

2296 i‡(
	`ngx_s¶_¸óã
(
uwcf
->
up°ªam
.
s¶
, uwcf->
s¶_¥Ÿocﬁs
, 
NULL
)

2297 !
NGX_OK
)

2299  
NGX_ERROR
;

2302 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

2303 i‡(
˛n
 =
NULL
) {

2304  
NGX_ERROR
;

2307 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

2308 
˛n
->
d©a
 = 
uwcf
->
up°ªam
.
s¶
;

2310 i‡(
uwcf
->
s¶_˚πifiˇã
.
Àn
) {

2312 i‡(
uwcf
->
s¶_˚πifiˇã_key
.
Àn
 == 0) {

2313 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2315 "f‹ cîtifiˇã \"%V\"", &
uwcf
->
s¶_˚πifiˇã
);

2316  
NGX_ERROR
;

2319 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, 
uwcf
->
up°ªam
.
s¶
, &uwcf->
s¶_˚πifiˇã
,

2320 &
uwcf
->
s¶_˚πifiˇã_key
, uwcf->
s¶_∑ssw‹ds
)

2321 !
NGX_OK
)

2323  
NGX_ERROR
;

2327 i‡(
	`SSL_CTX_£t_cùhî_li°
(
uwcf
->
up°ªam
.
s¶
->
˘x
,

2328 (c⁄° *Ë
uwcf
->
s¶_cùhîs
.
d©a
)

2331 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2333 &
uwcf
->
s¶_cùhîs
);

2334  
NGX_ERROR
;

2337 i‡(
uwcf
->
up°ªam
.
s¶_vîify
) {

2338 i‡(
uwcf
->
s¶_åu°ed_˚πifiˇã
.
Àn
 == 0) {

2339 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2341  
NGX_ERROR
;

2344 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, 
uwcf
->
up°ªam
.
s¶
,

2345 &
uwcf
->
s¶_åu°ed_˚πifiˇã
,

2346 
uwcf
->
s¶_vîify_dïth
)

2347 !
NGX_OK
)

2349  
NGX_ERROR
;

2352 i‡(
	`ngx_s¶_¸l
(
cf
, 
uwcf
->
up°ªam
.
s¶
, &uwcf->
s¶_¸l
Ë!
NGX_OK
) {

2353  
NGX_ERROR
;

2357  
NGX_OK
;

2358 
	}
}

	@src/http/modules/ngx_http_xslt_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<libxml/∑r£r.h
>

13 
	~<libxml/åì.h
>

14 
	~<libx¶t/x¶t.h
>

15 
	~<libx¶t/x¶tI¡î«ls.h
>

16 
	~<libx¶t/å™sf‹m.h
>

17 
	~<libx¶t/v¨übÀs.h
>

18 
	~<libx¶t/x¶tutûs.h
>

20 #i‡(
NGX_HAVE_EXSLT
)

21 
	~<libex¶t/ex¶t.h
>

25 #i‚de‡
NGX_HTTP_XSLT_REUSE_DTD


26 
	#NGX_HTTP_XSLT_REUSE_DTD
 1

	)

31 
u_ch¨
 *
	m«me
;

32 *
	md©a
;

33 } 
	tngx_hâp_x¶t_fûe_t
;

37 
ngx_¨øy_t
 
	mdtd_fûes
;

38 
ngx_¨øy_t
 
	mshìt_fûes
;

39 } 
	tngx_hâp_x¶t_fûãr_maö_c⁄f_t
;

43 
u_ch¨
 *
	m«me
;

44 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

45 
ngx_uöt_t
 
	mquŸe
;

46 } 
	tngx_hâp_x¶t_∑øm_t
;

50 
x¶tStyÀshìtPå
 
	m°yÀshìt
;

51 
ngx_¨øy_t
 
	m∑øms
;

52 } 
	tngx_hâp_x¶t_shìt_t
;

56 
xmlDtdPå
 
	mdtd
;

57 
ngx_¨øy_t
 
	mshìts
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 
ngx_¨øy_t
 *
	m∑øms
;

61 
ngx_Êag_t
 
	mœ°_modifõd
;

62 } 
	tngx_hâp_x¶t_fûãr_loc_c⁄f_t
;

66 
xmlDocPå
 
	mdoc
;

67 
xmlP¨£rCtxtPå
 
	m˘xt
;

68 
x¶tTønsf‹mC⁄ãxtPå
 
	må™sf‹m
;

69 
ngx_hâp_ªque°_t
 *
	mªque°
;

70 
ngx_¨øy_t
 
	m∑øms
;

72 
ngx_uöt_t
 
	md⁄e
;

73 } 
	tngx_hâp_x¶t_fûãr_˘x_t
;

76 
ngx_öt_t
 
ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

78 
ngx_öt_t
 
ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

82 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

83 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
);

84 
ngx_cde˛
 
ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...);

87 
ngx_buf_t
 *
ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
);

89 
ngx_öt_t
 
ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
,

90 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
);

91 
u_ch¨
 *
ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
);

92 
u_ch¨
 *
ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
);

93 
ngx_hâp_x¶t_˛ónup
(*
d©a
);

95 *
ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

96 *
c⁄f
);

97 *
ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

98 *
c⁄f
);

99 *
ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

100 *
c⁄f
);

101 
ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
);

102 
ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
);

103 *
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

104 *
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

105 *
ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

106 *
chûd
);

107 
ngx_öt_t
 
ngx_hâp_x¶t_fûãr_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

108 
ngx_öt_t
 
ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

109 
ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
);

112 
ngx_°r_t
 
	gngx_hâp_x¶t_deÁu…_ty≥s
[] = {

113 
ngx_°rög
("text/xml"),

114 
ngx_nuŒ_°rög


118 
ngx_comm™d_t
 
	gngx_hâp_x¶t_fûãr_comm™ds
[] = {

120 { 
ngx_°rög
("xml_entities"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_hâp_x¶t_ítôõs
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

125 
NULL
 },

127 { 
ngx_°rög
("xslt_stylesheet"),

128 
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

129 
ngx_hâp_x¶t_°yÀshìt
,

130 
NGX_HTTP_LOC_CONF_OFFSET
,

132 
NULL
 },

134 { 
ngx_°rög
("xslt_param"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

136 
ngx_hâp_x¶t_∑øm
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("xslt_string_param"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

143 
ngx_hâp_x¶t_∑øm
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

148 { 
ngx_°rög
("xslt_types"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

150 
ngx_hâp_ty≥s_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
, 
ty≥s_keys
),

153 &
ngx_hâp_x¶t_deÁu…_ty≥s
[0] },

155 { 
ngx_°rög
("xslt_last_modified"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

157 
ngx_c⁄f_£t_Êag_¶Ÿ
,

158 
NGX_HTTP_LOC_CONF_OFFSET
,

159 
off£tof
(
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
, 
œ°_modifõd
),

160 
NULL
 },

162 
ngx_nuŒ_comm™d


166 
ngx_hâp_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ_˘x
 = {

167 
ngx_hâp_x¶t_fûãr_¥ec⁄figuøti⁄
,

168 
ngx_hâp_x¶t_fûãr_öô
,

170 
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
,

171 
NULL
,

173 
NULL
,

174 
NULL
,

176 
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
,

177 
ngx_hâp_x¶t_fûãr_mîge_c⁄f


181 
ngx_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ
 = {

182 
NGX_MODULE_V1
,

183 &
ngx_hâp_x¶t_fûãr_moduÀ_˘x
,

184 
ngx_hâp_x¶t_fûãr_comm™ds
,

185 
NGX_HTTP_MODULE
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
ngx_hâp_x¶t_fûãr_exô
,

192 
ngx_hâp_x¶t_fûãr_exô
,

193 
NGX_MODULE_V1_PADDING


197 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

198 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

201 
ngx_öt_t


202 
	$ngx_hâp_x¶t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

204 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

205 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

207 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

210 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

211  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

214 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

216 i‡(
c⁄f
->
shìts
.
√…s
 == 0

217 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
)

219  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

222 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

224 i‡(
˘x
) {

225  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

228 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_˘x_t
));

229 i‡(
˘x
 =
NULL
) {

230  
NGX_ERROR
;

233 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

235 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

237  
NGX_OK
;

238 
	}
}

241 
ngx_öt_t


242 
	$ngx_hâp_x¶t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

244 
wñlF‹med
;

245 
ngx_chaö_t
 *
˛
;

246 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

248 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

251 i‡(
ö
 =
NULL
) {

252  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

255 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

257 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

258  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

261 
˛
 = 
ö
; cl; c»˛->
√xt
) {

263 i‡(
	`ngx_hâp_x¶t_add_chunk
(
r
, 
˘x
, 
˛
->
buf
Ë!
NGX_OK
) {

265 i‡(
˘x
->
˘xt
->
myDoc
) {

267 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

268 
˘x
->
˘xt
->
myDoc
->
extSub£t
 = 
NULL
;

270 
	`xmlFªeDoc
(
˘x
->
˘xt
->
myDoc
);

273 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

275  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

278 i‡(
˛
->
buf
->
œ°_buf
 || cl->buf->
œ°_ö_chaö
) {

280 
˘x
->
doc
 = ctx->
˘xt
->
myDoc
;

282 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

283 
˘x
->
doc
->
extSub£t
 = 
NULL
;

286 
wñlF‹med
 = 
˘x
->
˘xt
->wellFormed;

288 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

290 i‡(
wñlF‹med
) {

291  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
,

292 
	`ngx_hâp_x¶t_≠∂y_°yÀshìt
(
r
, 
˘x
));

295 
	`xmlFªeDoc
(
˘x
->
doc
);

297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

300  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

304  
NGX_OK
;

305 
	}
}

308 
ngx_öt_t


309 
	$ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

310 
ngx_buf_t
 *
b
)

312 
ngx_öt_t
 
rc
;

313 
ngx_chaö_t
 
out
;

314 
ngx_poﬁ_˛ónup_t
 *
˛n
;

315 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

317 
˘x
->
d⁄e
 = 1;

319 i‡(
b
 =
NULL
) {

320  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

321 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

324 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

326 i‡(
˛n
 =
NULL
) {

327 
	`ngx_‰ì
(
b
->
pos
);

328  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

329 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

332 i‡(
r
 =r->
maö
) {

333 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

335 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

336 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

337 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

340 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

342 i‡(!
c⁄f
->
œ°_modifõd
) {

343 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

344 
	`ngx_hâp_˛ór_ëag
(
r
);

347 
	`ngx_hâp_wók_ëag
(
r
);

351 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

353 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

354 
	`ngx_‰ì
(
b
->
pos
);

355  
rc
;

358 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup
;

359 
˛n
->
d©a
 = 
b
->
pos
;

361 
out
.
buf
 = 
b
;

362 
out
.
√xt
 = 
NULL
;

364  
	`ngx_hâp_√xt_body_fûãr
(
r
, &
out
);

365 
	}
}

368 
ngx_öt_t


369 
	$ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

370 
ngx_buf_t
 *
b
)

372 
îr
;

373 
xmlP¨£rCtxtPå
 
˘xt
;

375 i‡(
˘x
->
˘xt
 =
NULL
) {

377 
˘xt
 = 
	`xmlCª©ePushP¨£rCtxt
(
NULL
, NULL, NULL, 0, NULL);

378 i‡(
˘xt
 =
NULL
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

381  
NGX_ERROR
;

383 
	`xmlCtxtU£O±i⁄s
(
˘xt
, 
XML_PARSE_NOENT
|
XML_PARSE_DTDLOAD


384 |
XML_PARSE_NOWARNING
);

386 
˘xt
->
ßx
->
exã∫ÆSub£t
 = 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
;

387 
˘xt
->
ßx
->
£tDocumítLoˇt‹
 = 
NULL
;

388 
˘xt
->
ßx
->
îr‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

389 
˘xt
->
ßx
->
ÁèlEº‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

390 
˘xt
->
ßx
->
_¥iv©e
 = 
˘x
;

392 
˘x
->
˘xt
 = ctxt;

393 
˘x
->
ªque°
 = 
r
;

396 
îr
 = 
	`xmlP¨£Chunk
(
˘x
->
˘xt
, (*Ë
b
->
pos
, (Ë(b->
œ°
 - b->pos),

397 (
b
->
œ°_buf
Ë|| (b->
œ°_ö_chaö
));

399 i‡(
îr
 == 0) {

400 
b
->
pos
 = b->
œ°
;

401  
NGX_OK
;

404 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

405 "xmlP¨£Chunk(ËÁûed,Éº‹:%d", 
îr
);

407  
NGX_ERROR
;

408 
	}
}

412 
	$ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

413 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
)

415 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

417 
xmlDocPå
 
doc
;

418 
xmlDtdPå
 
dtd
;

419 
ngx_hâp_ªque°_t
 *
r
;

420 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

421 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

423 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

424 
r
 = 
˘x
->
ªque°
;

426 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

428 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

430 
«me
 ?Çamê: (
xmlCh¨
 *) "",

431 
exã∫ÆId
 ?Éxã∫ÆId : (
xmlCh¨
 *) "",

432 
sy°emId
 ? sy°emId : (
xmlCh¨
 *) "");

434 
doc
 = 
˘xt
->
myDoc
;

436 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

438 
dtd
 = 
c⁄f
->dtd;

442 
dtd
 = 
	`xmlC›yDtd
(
c⁄f
->dtd);

443 i‡(
dtd
 =
NULL
) {

444 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

449 i‡(
doc
->
chûdªn
 =
NULL
) {

450 
	`xmlAddChûd
((
xmlNodePå
Ë
doc
, (xmlNodePåË
dtd
);

453 
	`xmlAddPªvSiblög
(
doc
->
chûdªn
, (
xmlNodePå
Ë
dtd
);

458 
doc
->
extSub£t
 = 
dtd
;

459 
	}
}

462 
ngx_cde˛


463 
	$ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...)

465 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

467 
size_t
 
n
;

468 
va_li°
 
¨gs
;

469 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

470 
u_ch¨
 
buf
[
NGX_MAX_ERROR_STR
];

472 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

474 
buf
[0] = '\0';

476 
	`va_°¨t
(
¨gs
, 
msg
);

477 
n
 = (
size_t
Ë
	`v¢¥ötf
((*Ë
buf
, 
NGX_MAX_ERROR_STR
, 
msg
, 
¨gs
);

478 
	`va_íd
(
¨gs
);

480 --
n
 && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

482 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

483 "libxml2Éº‹: \"%*s\"", 
n
 + 1, 
buf
);

484 
	}
}

487 
ngx_buf_t
 *

488 
	$ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

489 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
)

491 
Àn
, 
rc
, 
doc_ty≥
;

492 
u_ch¨
 *
ty≥
, *
ícodög
;

493 
ngx_buf_t
 *
b
;

494 
ngx_uöt_t
 
i
;

495 
xmlCh¨
 *
buf
;

496 
xmlDocPå
 
doc
, 
ªs
;

497 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

498 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

500 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

501 
shìt
 = 
c⁄f
->
shìts
.
ñts
;

502 
doc
 = 
˘x
->doc;

506 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑øms
, 
r
->
poﬁ
, 4 * 2 + 1, (*))

507 !
NGX_OK
)

509 
	`xmlFªeDoc
(
doc
);

510  
NULL
;

513 
i
 = 0; i < 
c⁄f
->
shìts
.
√…s
; i++) {

515 
˘x
->
å™sf‹m
 = 
	`x¶tNewTønsf‹mC⁄ãxt
(
shìt
[
i
].
°yÀshìt
, 
doc
);

516 i‡(
˘x
->
å™sf‹m
 =
NULL
) {

517 
	`xmlFªeDoc
(
doc
);

518  
NULL
;

521 i‡(
c⁄f
->
∑øms


522 && 
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, 
c⁄f
->
∑øms
, 0Ë!
NGX_OK
)

524 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

525 
	`xmlFªeDoc
(
doc
);

526  
NULL
;

529 i‡(
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, &
shìt
[
i
].
∑øms
, 1Ë!
NGX_OK
) {

530 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

531 
	`xmlFªeDoc
(
doc
);

532  
NULL
;

535 
ªs
 = 
	`x¶tAµlyStyÀshìtU£r
(
shìt
[
i
].
°yÀshìt
, 
doc
,

536 
˘x
->
∑øms
.
ñts
, 
NULL
, NULL,

537 
˘x
->
å™sf‹m
);

539 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

540 
	`xmlFªeDoc
(
doc
);

542 i‡(
ªs
 =
NULL
) {

543 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

545  
NULL
;

548 
doc
 = 
ªs
;

551 
˘x
->
∑øms
.
√…s
 = 0;

556 i‡(
r
 =r->
maö
) {

557 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
shìt
[
i
 - 1].
°yÀshìt
);

560 
ty≥
 = 
NULL
;

563 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
shìt
[
i
 - 1].
°yÀshìt
);

564 
doc_ty≥
 = 
doc
->
ty≥
;

566 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

568 
doc_ty≥
, 
ty≥
 ?Åy≥ : (
u_ch¨
 *) "(null)",

569 
ícodög
 ?Éncodög : (
u_ch¨
 *) "(null)");

571 
rc
 = 
	`x¶tSaveResu…ToSåög
(&
buf
, &
Àn
, 
doc
, 
shìt
[
i
 - 1].
°yÀshìt
);

573 
	`xmlFªeDoc
(
doc
);

575 i‡(
rc
 != 0) {

576 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

578  
NULL
;

581 i‡(
Àn
 == 0) {

582 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

584  
NULL
;

587 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

588 i‡(
b
 =
NULL
) {

589 
	`ngx_‰ì
(
buf
);

590  
NULL
;

593 
b
->
pos
 = 
buf
;

594 
b
->
œ°
 = 
buf
 + 
Àn
;

595 
b
->
mem‹y
 = 1;

597 i‡(
ícodög
) {

598 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
	`ngx_°æí
(
ícodög
);

599 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
ícodög
;

602 i‡(
r
 !r->
maö
) {

603  
b
;

606 
b
->
œ°_buf
 = 1;

608 i‡(
ty≥
) {

609 
Àn
 = 
	`ngx_°æí
(
ty≥
);

611 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
Àn
;

612 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Üen;

613 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
ty≥
;

615 } i‡(
doc_ty≥
 =
XML_HTML_DOCUMENT_NODE
) {

617 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

618 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

621 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

623  
b
;

624 
	}
}

627 
ngx_öt_t


628 
	$ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

629 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
)

631 
u_ch¨
 *
p
, *
œ°
, *
vÆue
, *
d°
, *
§c
, **
s
;

632 
size_t
 
Àn
;

633 
ngx_uöt_t
 
i
;

634 
ngx_°r_t
 
°rög
;

635 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

637 
∑øm
 = 
∑øms
->
ñts
;

639 
i
 = 0; i < 
∑øms
->
√…s
; i++) {

641 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∑øm
[
i
].
vÆue
, &
°rög
Ë!
NGX_OK
) {

642  
NGX_ERROR
;

645 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

646 "x¶àfûã∏∑øm: \"%s\"", 
°rög
.
d©a
);

648 i‡(
∑øm
[
i
].
«me
) {

650 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

651 "x¶àfûã∏∑ømÇame: \"%s\"", 
∑øm
[
i
].
«me
);

653 i‡(
∑øm
[
i
].
quŸe
) {

654 i‡(
	`x¶tQuŸeO√U£rP¨am
(
˘x
->
å™sf‹m
, 
∑øm
[
i
].
«me
,

655 
°rög
.
d©a
)

658 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

660 
∑øm
[
i
].
«me
, 
°rög
.
d©a
);

661  
NGX_ERROR
;

667 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

668 i‡(
s
 =
NULL
) {

669  
NGX_ERROR
;

672 *
s
 = 
∑øm
[
i
].
«me
;

674 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

675 i‡(
s
 =
NULL
) {

676  
NGX_ERROR
;

679 *
s
 = 
°rög
.
d©a
;

689 
p
 = 
°rög
.
d©a
;

690 
œ°
 = 
°rög
.
d©a
 + såög.
Àn
;

692 
p
 && *p) {

694 
vÆue
 = 
p
;

695 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, '=');

696 i‡(
p
 =
NULL
) {

697 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

698 "övÆidÜibx¶à∑ømëî \"%s\"", 
vÆue
);

699  
NGX_ERROR
;

701 *
p
++ = '\0';

703 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

704 "x¶àfûã∏∑ømÇame: \"%s\"", 
vÆue
);

706 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

707 i‡(
s
 =
NULL
) {

708  
NGX_ERROR
;

711 *
s
 = 
vÆue
;

713 
vÆue
 = 
p
;

714 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, ':');

716 i‡(
p
) {

717 
Àn
 = 
p
 - 
vÆue
;

718 *
p
++ = '\0';

721 
Àn
 = 
œ°
 - 
vÆue
;

724 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

725 "x¶àfûã∏∑øm vÆue: \"%s\"", 
vÆue
);

727 
d°
 = 
vÆue
;

728 
§c
 = 
vÆue
;

730 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
Àn
, 0);

732 *
d°
 = '\0';

734 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

735 "x¶àfûã∏∑øm u√sˇ≥d: \"%s\"", 
vÆue
);

737 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

738 i‡(
s
 =
NULL
) {

739  
NGX_ERROR
;

742 *
s
 = 
vÆue
;

746 i‡(
föÆ
) {

747 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

748 i‡(
s
 =
NULL
) {

749  
NGX_ERROR
;

752 *
s
 = 
NULL
;

755  
NGX_OK
;

756 
	}
}

759 
u_ch¨
 *

760 
	$ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
)

762 
u_ch¨
 *
ty≥
;

764 i‡(
s
->
medüTy≥
) {

765  
s
->
medüTy≥
;

768 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

770 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
s
);

772 i‡(
ty≥
) {

773  
ty≥
;

777  
NULL
;

778 
	}
}

781 
u_ch¨
 *

782 
	$ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
)

784 
u_ch¨
 *
ícodög
;

786 i‡(
s
->
ícodög
) {

787  
s
->
ícodög
;

790 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

792 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
s
);

794 i‡(
ícodög
) {

795  
ícodög
;

799  
NULL
;

800 
	}
}

804 
	$ngx_hâp_x¶t_˛ónup
(*
d©a
)

806 
	`ngx_‰ì
(
d©a
);

807 
	}
}

811 
	$ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

813 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

815 
ngx_°r_t
 *
vÆue
;

816 
ngx_uöt_t
 
i
;

817 
ngx_poﬁ_˛ónup_t
 *
˛n
;

818 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

819 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

821 i‡(
xlcf
->
dtd
) {

825 
vÆue
 = 
cf
->
¨gs
->
ñts
;

827 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

829 
fûe
 = 
xmcf
->
dtd_fûes
.
ñts
;

830 
i
 = 0; i < 
xmcf
->
dtd_fûes
.
√…s
; i++) {

831 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

832 
xlcf
->
dtd
 = 
fûe
[
i
].
d©a
;

833  
NGX_CONF_OK
;

837 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

838 i‡(
˛n
 =
NULL
) {

839  
NGX_CONF_ERROR
;

842 
xlcf
->
dtd
 = 
	`xmlP¨£DTD
(
NULL
, (
xmlCh¨
 *Ë
vÆue
[1].
d©a
);

844 i‡(
xlcf
->
dtd
 =
NULL
) {

845 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0, "xmlParseDTD() failed");

846  
NGX_CONF_ERROR
;

849 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_dtd
;

850 
˛n
->
d©a
 = 
xlcf
->
dtd
;

852 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
dtd_fûes
);

853 i‡(
fûe
 =
NULL
) {

854  
NGX_CONF_ERROR
;

857 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

858 
fûe
->
d©a
 = 
xlcf
->
dtd
;

860  
NGX_CONF_OK
;

861 
	}
}

866 
	$ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

868 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

870 
ngx_°r_t
 *
vÆue
;

871 
ngx_uöt_t
 
i
, 
n
;

872 
ngx_poﬁ_˛ónup_t
 *
˛n
;

873 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

874 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

875 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

876 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

877 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

879 
vÆue
 = 
cf
->
¨gs
->
ñts
;

881 i‡(
xlcf
->
shìts
.
ñts
 =
NULL
) {

882 i‡(
	`ngx_¨øy_öô
(&
xlcf
->
shìts
, 
cf
->
poﬁ
, 1,

883 (
ngx_hâp_x¶t_shìt_t
))

884 !
NGX_OK
)

886  
NGX_CONF_ERROR
;

890 
shìt
 = 
	`ngx_¨øy_push
(&
xlcf
->
shìts
);

891 i‡(
shìt
 =
NULL
) {

892  
NGX_CONF_ERROR
;

895 
	`ngx_memzîo
(
shìt
, (
ngx_hâp_x¶t_shìt_t
));

897 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

898  
NGX_CONF_ERROR
;

901 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

903 
fûe
 = 
xmcf
->
shìt_fûes
.
ñts
;

904 
i
 = 0; i < 
xmcf
->
shìt_fûes
.
√…s
; i++) {

905 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

906 
shìt
->
°yÀshìt
 = 
fûe
[
i
].
d©a
;

907 
found
;

911 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

912 i‡(
˛n
 =
NULL
) {

913  
NGX_CONF_ERROR
;

916 
shìt
->
°yÀshìt
 = 
	`x¶tP¨£StyÀshìtFûe
(
vÆue
[1].
d©a
);

917 i‡(
shìt
->
°yÀshìt
 =
NULL
) {

918 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

920 
vÆue
[1].
d©a
);

921  
NGX_CONF_ERROR
;

924 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_°yÀshìt
;

925 
˛n
->
d©a
 = 
shìt
->
°yÀshìt
;

927 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
shìt_fûes
);

928 i‡(
fûe
 =
NULL
) {

929  
NGX_CONF_ERROR
;

932 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

933 
fûe
->
d©a
 = 
shìt
->
°yÀshìt
;

935 
found
:

937 
n
 = 
cf
->
¨gs
->
√…s
;

939 i‡(
n
 == 2) {

940  
NGX_CONF_OK
;

943 i‡(
	`ngx_¨øy_öô
(&
shìt
->
∑øms
, 
cf
->
poﬁ
, 
n
 - 2,

944 (
ngx_hâp_x¶t_∑øm_t
))

945 !
NGX_OK
)

947  
NGX_CONF_ERROR
;

950 
i
 = 2; i < 
n
; i++) {

952 
∑øm
 = 
	`ngx_¨øy_push
(&
shìt
->
∑øms
);

953 i‡(
∑øm
 =
NULL
) {

954  
NGX_CONF_ERROR
;

957 
	`ngx_memzîo
(
∑øm
, (
ngx_hâp_x¶t_∑øm_t
));

958 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

960 
ccv
.
cf
 = cf;

961 
ccv
.
vÆue
 = &vÆue[
i
];

962 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

963 
ccv
.
zîo
 = 1;

965 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

966  
NGX_CONF_ERROR
;

970  
NGX_CONF_OK
;

971 
	}
}

975 
	$ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

977 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

979 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

980 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

981 
ngx_°r_t
 *
vÆue
;

983 
vÆue
 = 
cf
->
¨gs
->
ñts
;

985 i‡(
xlcf
->
∑øms
 =
NULL
) {

986 
xlcf
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

987 (
ngx_hâp_x¶t_∑øm_t
));

988 i‡(
xlcf
->
∑øms
 =
NULL
) {

989  
NGX_CONF_ERROR
;

993 
∑øm
 = 
	`ngx_¨øy_push
(
xlcf
->
∑øms
);

994 i‡(
∑øm
 =
NULL
) {

995  
NGX_CONF_ERROR
;

998 
∑øm
->
«me
 = 
vÆue
[1].
d©a
;

999 
∑øm
->
quŸe
 = (
cmd
->
po°
 =
NULL
) ? 0 : 1;

1001 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1003 
ccv
.
cf
 = cf;

1004 
ccv
.
vÆue
 = &value[2];

1005 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

1006 
ccv
.
zîo
 = 1;

1008 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1009  
NGX_CONF_ERROR
;

1012  
NGX_CONF_OK
;

1013 
	}
}

1017 
	$ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
)

1019 
	`xmlFªeDtd
(
d©a
);

1020 
	}
}

1024 
	$ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
)

1026 
	`x¶tFªeStyÀshìt
(
d©a
);

1027 
	}
}

1031 
	$ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1033 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
c⁄f
;

1035 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
));

1036 i‡(
c⁄f
 =
NULL
) {

1037  
NULL
;

1040 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
dtd_fûes
, 
cf
->
poﬁ
, 1,

1041 (
ngx_hâp_x¶t_fûe_t
))

1042 !
NGX_OK
)

1044  
NULL
;

1047 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
shìt_fûes
, 
cf
->
poﬁ
, 1,

1048 (
ngx_hâp_x¶t_fûe_t
))

1049 !
NGX_OK
)

1051  
NULL
;

1054  
c⁄f
;

1055 
	}
}

1059 
	$ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1061 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

1063 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
));

1064 i‡(
c⁄f
 =
NULL
) {

1065  
NULL
;

1078 
c⁄f
->
œ°_modifõd
 = 
NGX_CONF_UNSET
;

1080  
c⁄f
;

1081 
	}
}

1085 
	$ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1087 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1088 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1090 i‡(
c⁄f
->
dtd
 =
NULL
) {

1091 
c⁄f
->
dtd
 = 
¥ev
->dtd;

1094 i‡(
c⁄f
->
shìts
.
√…s
 == 0) {

1095 
c⁄f
->
shìts
 = 
¥ev
->sheets;

1098 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1099 
c⁄f
->
∑øms
 = 
¥ev
->params;

1102 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1103 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1104 
ngx_hâp_x¶t_deÁu…_ty≥s
)

1105 !
NGX_OK
)

1107  
NGX_CONF_ERROR
;

1110 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
œ°_modifõd
, 
¥ev
->last_modified, 0);

1112  
NGX_CONF_OK
;

1113 
	}
}

1116 
ngx_öt_t


1117 
	$ngx_hâp_x¶t_fûãr_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1119 
	`xmlInôP¨£r
();

1121 #i‡(
NGX_HAVE_EXSLT
)

1122 
	`ex¶tRegi°îAŒ
();

1125  
NGX_OK
;

1126 
	}
}

1129 
ngx_öt_t


1130 
	$ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1132 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1133 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_x¶t_hódî_fûãr
;

1135 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1136 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_x¶t_body_fûãr
;

1138  
NGX_OK
;

1139 
	}
}

1143 
	$ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1145 
	`x¶tCÀ™upGlobÆs
();

1146 
	`xmlCÀ™upP¨£r
();

1147 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_≥æ_moduÀ.h
>

15 
PîlI¡î¥ëî
 *
	m≥æ
;

16 
HV
 *
	mngöx
;

17 
ngx_¨øy_t
 *
	mmoduÀs
;

18 
ngx_¨øy_t
 *
	mªquúes
;

19 } 
	tngx_hâp_≥æ_maö_c⁄f_t
;

23 
SV
 *
	msub
;

24 
ngx_°r_t
 
	mh™dÀr
;

25 } 
	tngx_hâp_≥æ_loc_c⁄f_t
;

29 
SV
 *
	msub
;

30 
ngx_°r_t
 
	mh™dÀr
;

31 } 
	tngx_hâp_≥æ_v¨übÀ_t
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_öt_t
 
ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
, 
ngx_°r_t
 **
∑øms
);

39 *
ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

40 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

41 
PîlI¡î¥ëî
 *
ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

42 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

43 
ngx_öt_t
 
ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
,

44 
ngx_log_t
 *
log
);

45 
ngx_öt_t
 
ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
,

46 
HV
 *
ngöx
, 
SV
 *
sub
, SV **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
);

47 
ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
);

49 
ngx_öt_t
 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

50 *
ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

52 *
ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

53 *
ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

54 *
chûd
);

55 *
ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

58 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

59 
ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
);

62 
ngx_öt_t
 
ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

63 
ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
);

66 
ngx_comm™d_t
 
	gngx_hâp_≥æ_comm™ds
[] = {

68 { 
ngx_°rög
("perl_modules"),

69 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

71 
NGX_HTTP_MAIN_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
moduÀs
),

73 
NULL
 },

75 { 
ngx_°rög
("perl_require"),

76 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

77 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

78 
NGX_HTTP_MAIN_CONF_OFFSET
,

79 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
ªquúes
),

80 
NULL
 },

82 { 
ngx_°rög
("perl"),

83 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

84 
ngx_hâp_≥æ
,

85 
NGX_HTTP_LOC_CONF_OFFSET
,

87 
NULL
 },

89 { 
ngx_°rög
("perl_set"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

91 
ngx_hâp_≥æ_£t
,

92 
NGX_HTTP_LOC_CONF_OFFSET
,

94 
NULL
 },

96 
ngx_nuŒ_comm™d


100 
ngx_hâp_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ_˘x
 = {

101 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
,

102 
NULL
,

104 
ngx_hâp_≥æ_¸óã_maö_c⁄f
,

105 
ngx_hâp_≥æ_öô_maö_c⁄f
,

107 
NULL
,

108 
NULL
,

110 
ngx_hâp_≥æ_¸óã_loc_c⁄f
,

111 
ngx_hâp_≥æ_mîge_loc_c⁄f


115 
ngx_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ
 = {

116 
NGX_MODULE_V1
,

117 &
ngx_hâp_≥æ_moduÀ_˘x
,

118 
ngx_hâp_≥æ_comm™ds
,

119 
NGX_HTTP_MODULE
,

120 
NULL
,

121 
NULL
,

122 
ngx_hâp_≥æ_öô_w‹kî
,

123 
NULL
,

124 
NULL
,

125 
NULL
,

126 
ngx_hâp_≥æ_exô
,

127 
NGX_MODULE_V1_PADDING


131 #i‡(
NGX_HTTP_SSI
)

133 
	#NGX_HTTP_PERL_SSI_SUB
 0

	)

134 
	#NGX_HTTP_PERL_SSI_ARG
 1

	)

137 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_≥æ_ssi_∑øms
[] = {

138 { 
ngx_°rög
("sub"), 
NGX_HTTP_PERL_SSI_SUB
, 1, 0 },

139 { 
ngx_°rög
("¨g"), 
NGX_HTTP_PERL_SSI_ARG
, 0, 1 },

140 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

143 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_≥æ_ssi_comm™d
 = {

144 
ngx_°rög
("≥æ"), 
ngx_hâp_≥æ_ssi
, 
ngx_hâp_≥æ_ssi_∑øms
, 0, 0, 1

150 
ngx_°r_t
 
	gngx_nuŒ_«me
 = 
ngx_nuŒ_°rög
;

151 
HV
 *
	gngöx_°ash
;

153 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

154 
ngx_uöt_t
 
	gngx_≥æ_ãrm
;

156 
PîlI¡î¥ëî
 *
	g≥æ
;

161 
	$ngx_hâp_≥æ_xs_öô
(
pTHX
)

163 
	`√wXS
("Dy«Lﬂdî::boŸ_Dy«Lﬂdî", 
boŸ_Dy«Lﬂdî
, 
__FILE__
);

165 
ngöx_°ash
 = 
	`gv_°ashpv
("ngöx", 
TRUE
);

166 
	}
}

169 
ngx_öt_t


170 
	$ngx_hâp_≥æ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

172 
r
->
maö
->
cou¡
++;

174 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

176  
NGX_DONE
;

177 
	}
}

181 
	$ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

183 
SV
 *
sub
;

184 
ngx_öt_t
 
rc
;

185 
ngx_°r_t
 
uri
, 
¨gs
, *
h™dÀr
;

186 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

187 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

188 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

190 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl handler");

192 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

194 i‡(
˘x
 =
NULL
) {

195 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

196 i‡(
˘x
 =
NULL
) {

197 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

201 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

204 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

208 
	`dTHXa
(
pmcf
->
≥æ
);

209 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

211 i‡(
˘x
->
√xt
 =
NULL
) {

212 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

213 
sub
 = 
∂cf
->sub;

214 
h™dÀr
 = &
∂cf
->handler;

217 
sub
 = 
˘x
->
√xt
;

218 
h™dÀr
 = &
ngx_nuŒ_«me
;

219 
˘x
->
√xt
 = 
NULL
;

222 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sub
, 
NULL
, 
h™dÀr
,

223 
NULL
);

227 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

228 "≥æ h™dÀ∏d⁄e: %i", 
rc
);

230 i‡(
rc
 =
NGX_DONE
) {

231 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

235 i‡(
rc
 > 600) {

236 
rc
 = 
NGX_OK
;

239 i‡(
˘x
->
ªdúe˘_uri
.
Àn
) {

240 
uri
 = 
˘x
->
ªdúe˘_uri
;

241 
¨gs
 = 
˘x
->
ªdúe˘_¨gs
;

244 
uri
.
Àn
 = 0;

247 
˘x
->
fûíame
.
d©a
 = 
NULL
;

248 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

250 i‡(
˘x
->
d⁄e
 || ctx->
√xt
) {

251 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

255 i‡(
uri
.
Àn
) {

256 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

257 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

261 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_HTTP_OK
) {

262 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

263 
˘x
->
d⁄e
 = 1;

266 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

267 
	}
}

271 
	$ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

273 
ngx_evít_t
 *
wev
;

275 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

278 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

280 i‡(
wev
->
timedout
) {

281 
wev
->
timedout
 = 0;

282 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

286 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

287 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

289 
	}
}

292 
ngx_öt_t


293 
	$ngx_hâp_≥æ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

294 
uöçå_t
 
d©a
)

296 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
 = (ngx_hâp_≥æ_v¨übÀ_à*Ë
d©a
;

298 
ngx_öt_t
 
rc
;

299 
ngx_°r_t
 
vÆue
;

300 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

301 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

303 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

306 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

308 i‡(
˘x
 =
NULL
) {

309 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

310 i‡(
˘x
 =
NULL
) {

311  
NGX_ERROR
;

314 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

317 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

319 
vÆue
.
d©a
 = 
NULL
;

323 
	`dTHXa
(
pmcf
->
≥æ
);

324 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

326 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
pv
->
sub
, 
NULL
,

327 &
pv
->
h™dÀr
, &
vÆue
);

331 i‡(
vÆue
.
d©a
) {

332 
v
->
Àn
 = 
vÆue
.len;

333 
v
->
vÆid
 = 1;

334 
v
->
no_ˇchóbÀ
 = 0;

335 
v
->
nŸ_found
 = 0;

336 
v
->
d©a
 = 
vÆue
.data;

339 
v
->
nŸ_found
 = 1;

342 
˘x
->
fûíame
.
d©a
 = 
NULL
;

343 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

345 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

348  
rc
;

349 
	}
}

352 #i‡(
NGX_HTTP_SSI
)

354 
ngx_öt_t


355 
	$ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
,

356 
ngx_°r_t
 **
∑øms
)

358 
SV
 *
sv
, **
asv
;

359 
ngx_öt_t
 
rc
;

360 
ngx_°r_t
 *
h™dÀr
, **
¨gs
;

361 
ngx_uöt_t
 
i
;

362 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

363 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

368 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

370 i‡(
˘x
 =
NULL
) {

371 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

372 i‡(
˘x
 =
NULL
) {

373  
NGX_ERROR
;

376 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

379 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

381 
˘x
->
ssi
 = 
ssi_˘x
;

383 
h™dÀr
 = 
∑øms
[
NGX_HTTP_PERL_SSI_SUB
];

384 
h™dÀr
->
d©a
[h™dÀr->
Àn
] = '\0';

388 
	`dTHXa
(
pmcf
->
≥æ
);

389 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

395 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 
h™dÀr
, &
sv
);

397 i‡(
sv
 =&
PL_sv_undef
) {

398 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

399 "evÆ_pv(\"%V\"ËÁûed", 
h™dÀr
);

400  
NGX_ERROR
;

403 i‡(
sv
 =
NULL
) {

404 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

409 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

411 
¨gs
 = &
∑øms
[
NGX_HTTP_PERL_SSI_ARG
];

413 i‡(
¨gs
) {

415 
i
 = 0; 
¨gs
[i]; i++) { }

417 
asv
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
i
 + 1Ë* (
SV
 *));

419 i‡(
asv
 =
NULL
) {

420 
	`SvREFCNT_dec
(
sv
);

421  
NGX_ERROR
;

424 
asv
[0] = (
SV
 *Ë(
uöçå_t
Ë
i
;

426 
i
 = 0; 
¨gs
[i]; i++) {

427 
asv
[
i
 + 1] = 
	`√wSVpvn
((*Ë
¨gs
[i]->
d©a
,árgs[i]->
Àn
);

431 
asv
 = 
NULL
;

434 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sv
, 
asv
, 
h™dÀr
,

435 
NULL
);

437 
	`SvREFCNT_dec
(
sv
);

441 
˘x
->
fûíame
.
d©a
 = 
NULL
;

442 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

443 
˘x
->
ssi
 = 
NULL
;

445 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl ssi done");

447  
rc
;

448 
	}
}

454 
	$ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

456 
ngx_°r_t
 *
m
;

457 
ngx_uöt_t
 
i
;

458 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

459 
ngx_poﬁ_˛ónup_t
 *
˛n
;

461 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

462 i‡(
˛n
 =
NULL
) {

463  
NGX_CONF_ERROR
;

468 #ifde‡
NGX_PERL_MODULES


469 i‡(
pmcf
->
moduÀs
 =
NGX_CONF_UNSET_PTR
) {

471 
pmcf
->
moduÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_°r_t
));

472 i‡(
pmcf
->
moduÀs
 =
NULL
) {

473  
NGX_CONF_ERROR
;

476 
m
 = 
	`ngx_¨øy_push
(
pmcf
->
moduÀs
);

477 i‡(
m
 =
NULL
) {

478  
NGX_CONF_ERROR
;

481 
	`ngx_°r_£t
(
m
, 
NGX_PERL_MODULES
);

485 i‡(
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
) {

486 
m
 = 
pmcf
->
moduÀs
->
ñts
;

487 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

488 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
m
[
i
], 0Ë!
NGX_OK
) {

489  
NGX_CONF_ERROR
;

494 #i‡!(
NGX_HAVE_PERL_MULTIPLICITY
)

496 i‡(
≥æ
) {

498 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

499  
NGX_CONF_ERROR
;

502 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
)

503 !
NGX_OK
)

505  
NGX_CONF_ERROR
;

508 
pmcf
->
≥æ
 =Öerl;

509 
pmcf
->
ngöx
 = 
ngöx_°ash
;

511  
NGX_CONF_OK
;

516 i‡(
ngöx_°ash
 =
NULL
) {

517 
	`PERL_SYS_INIT
(&
ngx_¨gc
, &
ngx_¨gv
);

520 
pmcf
->
≥æ
 = 
	`ngx_hâp_≥æ_¸óã_öãΩªãr
(
cf
,Ömcf);

522 i‡(
pmcf
->
≥æ
 =
NULL
) {

523  
NGX_CONF_ERROR
;

526 
pmcf
->
ngöx
 = 
ngöx_°ash
;

528 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

530 
˛n
->
h™dÀr
 = 
ngx_hâp_≥æ_˛ónup_≥æ
;

531 
˛n
->
d©a
 = 
pmcf
->
≥æ
;

535 
≥æ
 = 
pmcf
->perl;

539  
NGX_CONF_OK
;

540 
	}
}

543 
PîlI¡î¥ëî
 *

544 
	$ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

545 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

547 
n
;

548 
STRLEN
 
Àn
;

549 
SV
 *
sv
;

550 *
vî
, **
embeddög
;

551 
ngx_°r_t
 *
m
;

552 
ngx_uöt_t
 
i
;

553 
PîlI¡î¥ëî
 *
≥æ
;

555 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0, "createÖerl interpreter");

557 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

558  
NULL
;

561 
≥æ
 = 
	`≥æ_Æloc
();

562 i‡(
≥æ
 =
NULL
) {

563 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "perl_alloc() failed");

564  
NULL
;

569 
	`dTHXa
(
≥æ
);

570 
	`PERL_SET_CONTEXT
(
≥æ
);

572 
	`≥æ_c⁄°ru˘
(
≥æ
);

574 #ifde‡
PERL_EXIT_DESTRUCT_END


575 
PL_exô_Êags
 |
PERL_EXIT_DESTRUCT_END
;

578 
n
 = (
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
Ë?Ömcf->moduÀs->
√…s
 * 2 : 0;

580 
embeddög
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (5 + 
n
) * (*));

581 i‡(
embeddög
 =
NULL
) {

582 
Áû
;

585 
embeddög
[0] = "";

587 i‡(
n
++) {

588 
m
 = 
pmcf
->
moduÀs
->
ñts
;

589 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

590 
embeddög
[2 * 
i
 + 1] = "-I";

591 
embeddög
[2 * 
i
 + 2] = (*Ë
m
[i].
d©a
;

595 
embeddög
[
n
++] = "-Mnginx";

596 
embeddög
[
n
++] = "-e";

597 
embeddög
[
n
++] = "0";

598 
embeddög
[
n
] = 
NULL
;

600 
n
 = 
	`≥æ_∑r£
(
≥æ
, 
ngx_hâp_≥æ_xs_öô
,Ç, 
embeddög
, 
NULL
);

602 i‡(
n
 != 0) {

603 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "≥æ_∑r£(ËÁûed: %d", 
n
);

604 
Áû
;

607 
sv
 = 
	`gë_sv
("ngöx::VERSION", 
FALSE
);

608 
vî
 = 
	`SvPV
(
sv
, 
Àn
);

610 i‡(
	`ngx_°rcmp
(
vî
, 
NGINX_VERSION
) != 0) {

611 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

612 "vîsi⁄ " 
NGINX_VERSION
 " ofÇginx.pm isÑequired, "

613 "buà%†wa†found", 
vî
);

614 
Áû
;

617 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
Ë!
NGX_OK
) {

618 
Áû
;

623  
≥æ
;

625 
Áû
:

627 (Ë
	`≥æ_de°ru˘
(
≥æ
);

629 
	`≥æ_‰ì
(
≥æ
);

631  
NULL
;

632 
	}
}

635 
ngx_öt_t


636 
	$ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
, 
ngx_log_t
 *
log
)

638 
u_ch¨
 *
îr
;

639 
STRLEN
 
Àn
;

640 
ngx_°r_t
 *
s¸ùt
;

641 
ngx_uöt_t
 
i
;

643 i‡(
ªquúes
 =
NGX_CONF_UNSET_PTR
) {

644  
NGX_OK
;

647 
s¸ùt
 = 
ªquúes
->
ñts
;

648 
i
 = 0; i < 
ªquúes
->
√…s
; i++) {

650 
	`ªquúe_pv
((*Ë
s¸ùt
[
i
].
d©a
);

652 i‡(
	`SvTRUE
(
ERRSV
)) {

654 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

655 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

657 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

659 
s¸ùt
[
i
].
d©a
, 
Àn
 + 1, 
îr
);

661  
NGX_ERROR
;

665  
NGX_OK
;

666 
	}
}

669 
ngx_öt_t


670 
	$ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
, 
HV
 *
ngöx
, 
SV
 *
sub
,

671 
SV
 **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
)

673 
SV
 *
sv
;

674 
n
, 
°©us
;

675 *
löe
;

676 
u_ch¨
 *
îr
;

677 
STRLEN
 
Àn
, 
n_a
;

678 
ngx_uöt_t
 
i
;

679 
ngx_c⁄√˘i⁄_t
 *
c
;

681 
dSP
;

683 
°©us
 = 0;

685 
ENTER
;

686 
SAVETMPS
;

688 
	`PUSHMARK
(
•
);

690 
sv
 = 
	`sv_2m‹èl
(
	`sv_bÀss
(
	`√wRV_noöc
(
	`√wSViv
(
	`PTR2IV
(
r
))), 
ngöx
));

691 
	`XPUSHs
(
sv
);

693 i‡(
¨gs
) {

694 
	`EXTEND
(
•
, (
öçå_t
Ë
¨gs
[0]);

696 
i
 = 1; i <(
uöçå_t
Ë
¨gs
[0]; i++) {

697 
	`PUSHs
(
	`sv_2m‹èl
(
¨gs
[
i
]));

701 
PUTBACK
;

703 
c
 = 
r
->
c⁄√˘i⁄
;

705 
n
 = 
	`ˇŒ_sv
(
sub
, 
G_EVAL
);

707 
SPAGAIN
;

709 i‡(
n
) {

710 i‡(
rv
 =
NULL
) {

711 
°©us
 = 
POPi
;

713 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

714 "ˇŒ_sv: %d", 
°©us
);

717 
löe
 = 
	`SvPVx
(
POPs
, 
n_a
);

718 
rv
->
Àn
 = 
n_a
;

720 
rv
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
n_a
);

721 i‡(
rv
->
d©a
 =
NULL
) {

722  
NGX_ERROR
;

725 
	`ngx_mem˝y
(
rv
->
d©a
, 
löe
, 
n_a
);

729 
PUTBACK
;

731 
FREETMPS
;

732 
LEAVE
;

736 i‡(
	`SvTRUE
(
ERRSV
)) {

738 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

739 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

741 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

742 "ˇŒ_sv(\"%V\"ËÁûed: \"%*s\"", 
h™dÀr
, 
Àn
 + 1, 
îr
);

744 i‡(
rv
) {

745  
NGX_ERROR
;

748  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

751 i‡(
n
 != 1) {

752 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

753 "ˇŒ_sv(\"%V\"Ëªtu∫ed %dÑesu…s", 
h™dÀr
, 
n
);

754 
°©us
 = 
NGX_OK
;

757 i‡(
rv
) {

758  
NGX_OK
;

761  (
ngx_öt_t
Ë
°©us
;

762 
	}
}

766 
	$ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
)

768 
u_ch¨
 *
p
;

770 
p
 = 
h™dÀr
->
d©a
; *p;Ö++) {

771 i‡(*
p
 !' ' && *∞!'\t' && *∞!
CR
 && *∞!
LF
) {

776 i‡(
	`ngx_°∫cmp
(
p
, "sub ", 4) == 0

777 || 
	`ngx_°∫cmp
(
p
, "sub{", 4) == 0

778 || 
	`ngx_°∫cmp
(
p
, "use ", 4) == 0)

780 *
sv
 = 
	`evÆ_pv
((*Ë
p
, 
FALSE
);

787 *
sv
 = 
NULL
;

788 
	}
}

792 
	$ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

794 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

796 
pmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_maö_c⁄f_t
));

797 i‡(
pmcf
 =
NULL
) {

798  
NULL
;

801 
pmcf
->
moduÀs
 = 
NGX_CONF_UNSET_PTR
;

802 
pmcf
->
ªquúes
 = 
NGX_CONF_UNSET_PTR
;

804  
pmcf
;

805 
	}
}

809 
	$ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

811 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
 = 
c⁄f
;

813 i‡(
pmcf
->
≥æ
 =
NULL
) {

814 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

815  
NGX_CONF_ERROR
;

819  
NGX_CONF_OK
;

820 
	}
}

823 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

826 
	$ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
)

828 
PîlI¡î¥ëî
 *
≥æ
 = 
d©a
;

830 
	`PERL_SET_CONTEXT
(
≥æ
);

832 (Ë
	`≥æ_de°ru˘
(
≥æ
);

834 
	`≥æ_‰ì
(
≥æ
);

836 i‡(
ngx_≥æ_ãrm
) {

837 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0, "perlÅerm");

839 
	`PERL_SYS_TERM
();

841 
	}
}

846 
ngx_öt_t


847 
	$ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

849 #i‡(
NGX_HTTP_SSI
)

850 
ngx_öt_t
 
rc
;

851 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

853 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

855 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
ngx_hâp_≥æ_ssi_comm™d
.
«me
,

856 &
ngx_hâp_≥æ_ssi_comm™d
, 
NGX_HASH_READONLY_KEY
);

858 i‡(
rc
 !
NGX_OK
) {

859 i‡(
rc
 =
NGX_BUSY
) {

860 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

862 &
ngx_hâp_≥æ_ssi_comm™d
.
«me
);

865  
NGX_ERROR
;

869  
NGX_OK
;

870 
	}
}

874 
	$ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

876 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

878 
∂cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_loc_c⁄f_t
));

879 i‡(
∂cf
 =
NULL
) {

880  
NULL
;

889  
∂cf
;

890 
	}
}

894 
	$ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

896 
ngx_hâp_≥æ_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

897 
ngx_hâp_≥æ_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

899 i‡(
c⁄f
->
sub
 =
NULL
) {

900 
c⁄f
->
sub
 = 
¥ev
->sub;

901 
c⁄f
->
h™dÀr
 = 
¥ev
->handler;

904  
NGX_CONF_OK
;

905 
	}
}

909 
	$ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

911 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

913 
ngx_°r_t
 *
vÆue
;

914 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

915 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

917 
vÆue
 = 
cf
->
¨gs
->
ñts
;

919 i‡(
∂cf
->
h™dÀr
.
d©a
) {

920 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

921 "du∂iˇãÖî»h™dÀ∏\"%V\"", &
vÆue
[1]);

922  
NGX_CONF_ERROR
;

925 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

927 i‡(
pmcf
->
≥æ
 =
NULL
) {

928 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

929  
NGX_CONF_ERROR
;

933 
∂cf
->
h™dÀr
 = 
vÆue
[1];

937 
	`dTHXa
(
pmcf
->
≥æ
);

938 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

940 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[1], &
∂cf
->
sub
);

942 i‡(
∂cf
->
sub
 =&
PL_sv_undef
) {

943 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

944 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[1]);

945  
NGX_CONF_ERROR
;

948 i‡(
∂cf
->
sub
 =
NULL
) {

949 
∂cf
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[1].
d©a
, vÆue[1].
Àn
);

954 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

955 
˛cf
->
h™dÀr
 = 
ngx_hâp_≥æ_h™dÀr
;

957  
NGX_CONF_OK
;

958 
	}
}

962 
	$ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

964 
ngx_öt_t
 
ödex
;

965 
ngx_°r_t
 *
vÆue
;

966 
ngx_hâp_v¨übÀ_t
 *
v
;

967 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
;

968 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

970 
vÆue
 = 
cf
->
¨gs
->
ñts
;

972 i‡(
vÆue
[1].
d©a
[0] != '$') {

973 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

974 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

975  
NGX_CONF_ERROR
;

978 
vÆue
[1].
Àn
--;

979 
vÆue
[1].
d©a
++;

981 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

982 i‡(
v
 =
NULL
) {

983  
NGX_CONF_ERROR
;

986 
pv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_v¨übÀ_t
));

987 i‡(
pv
 =
NULL
) {

988  
NGX_CONF_ERROR
;

991 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

992 i‡(
ödex
 =
NGX_ERROR
) {

993  
NGX_CONF_ERROR
;

996 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

998 i‡(
pmcf
->
≥æ
 =
NULL
) {

999 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

1000  
NGX_CONF_ERROR
;

1004 
pv
->
h™dÀr
 = 
vÆue
[2];

1008 
	`dTHXa
(
pmcf
->
≥æ
);

1009 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1011 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[2], &
pv
->
sub
);

1013 i‡(
pv
->
sub
 =&
PL_sv_undef
) {

1014 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

1015 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[2]);

1016  
NGX_CONF_ERROR
;

1019 i‡(
pv
->
sub
 =
NULL
) {

1020 
pv
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[2].
d©a
, vÆue[2].
Àn
);

1025 
v
->
gë_h™dÀr
 = 
ngx_hâp_≥æ_v¨übÀ
;

1026 
v
->
d©a
 = (
uöçå_t
Ë
pv
;

1028  
NGX_CONF_OK
;

1029 
	}
}

1032 
ngx_öt_t


1033 
	$ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

1035 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

1037 
pmcf
 = 
	`ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
ngx_hâp_≥æ_moduÀ
);

1039 i‡(
pmcf
) {

1040 
	`dTHXa
(
pmcf
->
≥æ
);

1041 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1045 
	`sv_£tiv
(
	`GvSV
(
	`gv_„tchpv
("$", 
TRUE
, 
SVt_PV
)), (
I32
Ë
ngx_pid
);

1048  
NGX_OK
;

1049 
	}
}

1053 
	$ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1055 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

1062 
ngx_≥æ_ãrm
 = 1;

1066 i‡(
ngöx_°ash
) {

1067 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cy˛e
->
log
, 0, "perlÅerm");

1069 (Ë
	`≥æ_de°ru˘
(
≥æ
);

1071 
	`≥æ_‰ì
(
≥æ
);

1073 
	`PERL_SYS_TERM
();

1077 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.h

8 #i‚de‡
_NGX_HTTP_PERL_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_PERL_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

15 
	~<ngöx.h
>

17 
	~<EXTERN.h
>

18 
	~<≥æ.h
>

21 
ngx_hâp_ªque°_t
 *
	tngöx
;

24 
ngx_°r_t
 
	mfûíame
;

25 
ngx_°r_t
 
	mªdúe˘_uri
;

26 
ngx_°r_t
 
	mªdúe˘_¨gs
;

28 
SV
 *
	m√xt
;

30 
ngx_uöt_t
 
	md⁄e
;

32 
ngx_¨øy_t
 *
	mv¨übÀs
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_hâp_ssi_˘x_t
 *
	mssi
;

37 } 
	tngx_hâp_≥æ_˘x_t
;

41 
ngx_uöt_t
 
	mhash
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_°r_t
 
	mvÆue
;

44 } 
	tngx_hâp_≥æ_v¨_t
;

47 
ngx_moduÀ_t
 
ngx_hâp_≥æ_moduÀ
;

54 #i‚de‡
PERL_IMPLICIT_CONTEXT


55 #unde‡
dTHXa


56 
	#dTHXa
(
a
)

	)

60 
boŸ_Dy«Lﬂdî
(
pTHX_
 
CV
* 
cv
);

63 
ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

	@src/http/ngx_http.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 *
ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_öt_t
 
ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
,

15 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

16 
ngx_öt_t
 
ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
,

17 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

18 
ngx_öt_t
 
ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
,

19 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

21 
ngx_öt_t
 
ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
,

22 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

23 
ngx_hâp_li°í_›t_t
 *
ls›t
);

24 
ngx_öt_t
 
ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
,

25 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

26 
ngx_hâp_li°í_›t_t
 *
ls›t
);

27 
ngx_öt_t
 
ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
,

28 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

30 *
ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
,

31 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

32 
ngx_uöt_t
 
˘x_ödex
);

33 *
ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

34 
ngx_queue_t
 *
loˇti⁄s
, **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

35 
ngx_uöt_t
 
˘x_ödex
);

36 
ngx_öt_t
 
ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

38 
ngx_öt_t
 
ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

39 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

40 
ngx_öt_t
 
ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
,

41 c⁄° 
ngx_queue_t
 *
two
);

42 
ngx_öt_t
 
ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_queue_t
 *
loˇti⁄s
);

44 
ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,

45 
ngx_queue_t
 *
q
);

46 
ngx_hâp_loˇti⁄_åì_node_t
 *

47 
ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

48 
size_t
 
¥efix
);

50 
ngx_öt_t
 
ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
,

51 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_¨øy_t
 *
p‹ts
);

52 
ngx_öt_t
 
ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
,

53 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

54 
ngx_öt_t
 
ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

55 
ngx_libc_cde˛
 
ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

56 c⁄° *
two
);

58 
ngx_öt_t
 
ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
,

59 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
);

60 
ngx_li°íög_t
 *
ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
,

61 
ngx_hâp_c⁄f_addr_t
 *
addr
);

62 
ngx_öt_t
 
ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

63 
ngx_hâp_c⁄f_addr_t
 *
addr
);

64 #i‡(
NGX_HAVE_INET6
)

65 
ngx_öt_t
 
ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

66 
ngx_hâp_c⁄f_addr_t
 *
addr
);

69 
ngx_uöt_t
 
	gngx_hâp_max_moduÀ
;

72 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_t›_hódî_fûãr
;

73 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_t›_body_fûãr
;

74 
ngx_hâp_ªque°_body_fûãr_±
 
	gngx_hâp_t›_ªque°_body_fûãr
;

77 
ngx_°r_t
 
	gngx_hâp_html_deÁu…_ty≥s
[] = {

78 
ngx_°rög
("text/html"),

79 
ngx_nuŒ_°rög


83 
ngx_comm™d_t
 
	gngx_hâp_comm™ds
[] = {

85 { 
ngx_°rög
("http"),

86 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

87 
ngx_hâp_block
,

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_c‹e_moduÀ_t
 
	gngx_hâp_moduÀ_˘x
 = {

97 
ngx_°rög
("http"),

98 
NULL
,

99 
NULL


103 
ngx_moduÀ_t
 
	gngx_hâp_moduÀ
 = {

104 
NGX_MODULE_V1
,

105 &
ngx_hâp_moduÀ_˘x
,

106 
ngx_hâp_comm™ds
,

107 
NGX_CORE_MODULE
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NGX_MODULE_V1_PADDING


120 
	$ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

122 *
rv
;

123 
ngx_uöt_t
 
mi
, 
m
, 
s
;

124 
ngx_c⁄f_t
 
pcf
;

125 
ngx_hâp_moduÀ_t
 *
moduÀ
;

126 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

127 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

128 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

129 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

133 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

134 i‡(
˘x
 =
NULL
) {

135  
NGX_CONF_ERROR
;

138 *(
ngx_hâp_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

143 
ngx_hâp_max_moduÀ
 = 0;

144 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

145 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

149 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_hâp_max_moduÀ
++;

155 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

156 (*Ë* 
ngx_hâp_max_moduÀ
);

157 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

158  
NGX_CONF_ERROR
;

167 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

168 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

169  
NGX_CONF_ERROR
;

178 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

179 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

180  
NGX_CONF_ERROR
;

189 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

190 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

194 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

195 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

197 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

198 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

199 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

200  
NGX_CONF_ERROR
;

204 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

205 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

206 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

207  
NGX_CONF_ERROR
;

211 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

212 
˘x
->
loc_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

213 i‡(
˘x
->
loc_c⁄f
[
mi
] =
NULL
) {

214  
NGX_CONF_ERROR
;

219 
pcf
 = *
cf
;

220 
cf
->
˘x
 = ctx;

222 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

223 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

227 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

229 i‡(
moduÀ
->
¥ec⁄figuøti⁄
) {

230 i‡(
moduÀ
->
	`¥ec⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

231  
NGX_CONF_ERROR
;

238 
cf
->
moduÀ_ty≥
 = 
NGX_HTTP_MODULE
;

239 
cf
->
cmd_ty≥
 = 
NGX_HTTP_MAIN_CONF
;

240 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

242 i‡(
rv
 !
NGX_CONF_OK
) {

243 
Áûed
;

251 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

252 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

254 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

255 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

259 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

260 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

264 i‡(
moduÀ
->
öô_maö_c⁄f
) {

265 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

266 i‡(
rv
 !
NGX_CONF_OK
) {

267 
Áûed
;

271 
rv
 = 
	`ngx_hâp_mîge_£rvîs
(
cf
, 
cmcf
, 
moduÀ
, 
mi
);

272 i‡(
rv
 !
NGX_CONF_OK
) {

273 
Áûed
;

280 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

282 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

284 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
cscÂ
[
s
], 
˛cf
Ë!
NGX_OK
) {

285  
NGX_CONF_ERROR
;

288 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

289  
NGX_CONF_ERROR
;

294 i‡(
	`ngx_hâp_öô_pha£s
(
cf
, 
cmcf
Ë!
NGX_OK
) {

295  
NGX_CONF_ERROR
;

298 i‡(
	`ngx_hâp_öô_hódîs_ö_hash
(
cf
, 
cmcf
Ë!
NGX_OK
) {

299  
NGX_CONF_ERROR
;

303 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

304 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

308 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

310 i‡(
moduÀ
->
po°c⁄figuøti⁄
) {

311 i‡(
moduÀ
->
	`po°c⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

312  
NGX_CONF_ERROR
;

317 i‡(
	`ngx_hâp_v¨übÀs_öô_v¨s
(
cf
Ë!
NGX_OK
) {

318  
NGX_CONF_ERROR
;

326 *
cf
 = 
pcf
;

329 i‡(
	`ngx_hâp_öô_pha£_h™dÀrs
(
cf
, 
cmcf
Ë!
NGX_OK
) {

330  
NGX_CONF_ERROR
;

336 i‡(
	`ngx_hâp_›timize_£rvîs
(
cf
, 
cmcf
, cmcf->
p‹ts
Ë!
NGX_OK
) {

337  
NGX_CONF_ERROR
;

340  
NGX_CONF_OK
;

342 
Áûed
:

344 *
cf
 = 
pcf
;

346  
rv
;

347 
	}
}

350 
ngx_öt_t


351 
	$ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

353 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
,

354 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

355 !
NGX_OK
)

357  
NGX_ERROR
;

360 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
,

361 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

362 !
NGX_OK
)

364  
NGX_ERROR
;

367 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
,

368 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

369 !
NGX_OK
)

371  
NGX_ERROR
;

374 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
,

375 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

376 !
NGX_OK
)

378  
NGX_ERROR
;

381 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
,

382 
cf
->
poﬁ
, 2, (
ngx_hâp_h™dÀr_±
))

383 !
NGX_OK
)

385  
NGX_ERROR
;

388 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
,

389 
cf
->
poﬁ
, 4, (
ngx_hâp_h™dÀr_±
))

390 !
NGX_OK
)

392  
NGX_ERROR
;

395 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
,

396 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

397 !
NGX_OK
)

399  
NGX_ERROR
;

402  
NGX_OK
;

403 
	}
}

406 
ngx_öt_t


407 
	$ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

409 
ngx_¨øy_t
 
hódîs_ö
;

410 
ngx_hash_key_t
 *
hk
;

411 
ngx_hash_öô_t
 
hash
;

412 
ngx_hâp_hódî_t
 *
hódî
;

414 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

415 !
NGX_OK
)

417  
NGX_ERROR
;

420 
hódî
 = 
ngx_hâp_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

421 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

422 i‡(
hk
 =
NULL
) {

423  
NGX_ERROR
;

426 
hk
->
key
 = 
hódî
->
«me
;

427 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

428 
hk
->
vÆue
 = 
hódî
;

431 
hash
.hash = &
cmcf
->
hódîs_ö_hash
;

432 
hash
.
key
 = 
ngx_hash_key_lc
;

433 
hash
.
max_size
 = 512;

434 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

435 
hash
.
«me
 = "headers_in_hash";

436 
hash
.
poﬁ
 = 
cf
->pool;

437 
hash
.
ãmp_poﬁ
 = 
NULL
;

439 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

440  
NGX_ERROR
;

443  
NGX_OK
;

444 
	}
}

447 
ngx_öt_t


448 
	$ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

450 
ngx_öt_t
 
j
;

451 
ngx_uöt_t
 
i
, 
n
;

452 
ngx_uöt_t
 
föd_c⁄fig_ödex
, 
u£_ªwrôe
, 
u£_ac˚ss
;

453 
ngx_hâp_h™dÀr_±
 *
h
;

454 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

455 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

457 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

458 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

459 
föd_c⁄fig_ödex
 = 0;

460 
u£_ªwrôe
 = 
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

461 
u£_ac˚ss
 = 
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

463 
n
 = 
u£_ªwrôe
 + 
u£_ac˚ss
 + 
cmcf
->
åy_fûes
 + 1 ;

465 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

466 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

469 
ph
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

470 
n
 * (
ngx_hâp_pha£_h™dÀr_t
) + (*));

471 i‡(
ph
 =
NULL
) {

472  
NGX_ERROR
;

475 
cmcf
->
pha£_ígöe
.
h™dÀrs
 = 
ph
;

476 
n
 = 0;

478 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

479 
h
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
ñts
;

481 
i
) {

483 
NGX_HTTP_SERVER_REWRITE_PHASE
:

484 i‡(
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

485 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = 
n
;

487 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

491 
NGX_HTTP_FIND_CONFIG_PHASE
:

492 
föd_c⁄fig_ödex
 = 
n
;

494 
ph
->
checkî
 = 
ngx_hâp_c‹e_föd_c⁄fig_pha£
;

495 
n
++;

496 
ph
++;

500 
NGX_HTTP_REWRITE_PHASE
:

501 i‡(
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

502 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = 
n
;

504 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

508 
NGX_HTTP_POST_REWRITE_PHASE
:

509 i‡(
u£_ªwrôe
) {

510 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ªwrôe_pha£
;

511 
ph
->
√xt
 = 
föd_c⁄fig_ödex
;

512 
n
++;

513 
ph
++;

518 
NGX_HTTP_ACCESS_PHASE
:

519 
checkî
 = 
ngx_hâp_c‹e_ac˚ss_pha£
;

520 
n
++;

523 
NGX_HTTP_POST_ACCESS_PHASE
:

524 i‡(
u£_ac˚ss
) {

525 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ac˚ss_pha£
;

526 
ph
->
√xt
 = 
n
;

527 
ph
++;

532 
NGX_HTTP_TRY_FILES_PHASE
:

533 i‡(
cmcf
->
åy_fûes
) {

534 
ph
->
checkî
 = 
ngx_hâp_c‹e_åy_fûes_pha£
;

535 
n
++;

536 
ph
++;

541 
NGX_HTTP_CONTENT_PHASE
:

542 
checkî
 = 
ngx_hâp_c‹e_c⁄ã¡_pha£
;

546 
checkî
 = 
ngx_hâp_c‹e_gíîic_pha£
;

549 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

551 
j
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
 - 1; j >=0; j--) {

552 
ph
->
checkî
 = checker;

553 
ph
->
h™dÀr
 = 
h
[
j
];

554 
ph
->
√xt
 = 
n
;

555 
ph
++;

559  
NGX_OK
;

560 
	}
}

564 
	$ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

565 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

567 *
rv
;

568 
ngx_uöt_t
 
s
;

569 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

570 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

571 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

573 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

574 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

575 
ßved
 = *
˘x
;

576 
rv
 = 
NGX_CONF_OK
;

578 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

582 
˘x
->
§v_c⁄f
 = 
cscÂ
[
s
]->ctx->srv_conf;

584 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

585 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
, 
ßved
.
§v_c⁄f
[
˘x_ödex
],

586 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
˘x_ödex
]);

587 i‡(
rv
 !
NGX_CONF_OK
) {

588 
Áûed
;

592 i‡(
moduÀ
->
mîge_loc_c⁄f
) {

596 
˘x
->
loc_c⁄f
 = 
cscÂ
[
s
]->ctx->loc_conf;

598 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
ßved
.
loc_c⁄f
[
˘x_ödex
],

599 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
˘x_ödex
]);

600 i‡(
rv
 !
NGX_CONF_OK
) {

601 
Áûed
;

606 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

608 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
,

609 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
,

610 
moduÀ
, 
˘x_ödex
);

611 i‡(
rv
 !
NGX_CONF_OK
) {

612 
Áûed
;

617 
Áûed
:

619 *
˘x
 = 
ßved
;

621  
rv
;

622 
	}
}

626 
	$ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

627 **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

629 *
rv
;

630 
ngx_queue_t
 *
q
;

631 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

632 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

633 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

635 i‡(
loˇti⁄s
 =
NULL
) {

636  
NGX_CONF_OK
;

639 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

640 
ßved
 = *
˘x
;

642 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

643 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

644 
q
 = 
	`ngx_queue_√xt
(q))

646 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

648 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

649 
˘x
->
loc_c⁄f
 = 
˛cf
->loc_conf;

651 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
loc_c⁄f
[
˘x_ödex
],

652 
˛cf
->
loc_c⁄f
[
˘x_ödex
]);

653 i‡(
rv
 !
NGX_CONF_OK
) {

654  
rv
;

657 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
, clcf->
loc_c⁄f
,

658 
moduÀ
, 
˘x_ödex
);

659 i‡(
rv
 !
NGX_CONF_OK
) {

660  
rv
;

664 *
˘x
 = 
ßved
;

666  
NGX_CONF_OK
;

667 
	}
}

670 
ngx_öt_t


671 
	$ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

672 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

674 
ngx_uöt_t
 
n
;

675 
ngx_queue_t
 *
q
, *
loˇti⁄s
, *
«med
, 
èû
;

676 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

677 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

678 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

679 #i‡(
NGX_PCRE
)

680 
ngx_uöt_t
 
r
;

681 
ngx_queue_t
 *
ªgex
;

684 
loˇti⁄s
 = 
p˛cf
->locations;

686 i‡(
loˇti⁄s
 =
NULL
) {

687  
NGX_OK
;

690 
	`ngx_queue_s‹t
(
loˇti⁄s
, 
ngx_hâp_cmp_loˇti⁄s
);

692 
«med
 = 
NULL
;

693 
n
 = 0;

694 #i‡(
NGX_PCRE
)

695 
ªgex
 = 
NULL
;

696 
r
 = 0;

699 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

700 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

701 
q
 = 
	`ngx_queue_√xt
(q))

703 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

705 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

707 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
NULL
, 
˛cf
Ë!
NGX_OK
) {

708  
NGX_ERROR
;

711 #i‡(
NGX_PCRE
)

713 i‡(
˛cf
->
ªgex
) {

714 
r
++;

716 i‡(
ªgex
 =
NULL
) {

717 
ªgex
 = 
q
;

725 i‡(
˛cf
->
«med
) {

726 
n
++;

728 i‡(
«med
 =
NULL
) {

729 
«med
 = 
q
;

735 i‡(
˛cf
->
n⁄ame
) {

740 i‡(
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

741 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

744 i‡(
«med
) {

745 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

746 (
n
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 *));

747 i‡(
˛cÂ
 =
NULL
) {

748  
NGX_ERROR
;

751 
cscf
->
«med_loˇti⁄s
 = 
˛cÂ
;

753 
q
 = 
«med
;

754 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

755 
q
 = 
	`ngx_queue_√xt
(q))

757 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

759 *(
˛cÂ
++Ë
lq
->
exa˘
;

762 *
˛cÂ
 = 
NULL
;

764 
	`ngx_queue_•lô
(
loˇti⁄s
, 
«med
, &
èû
);

767 #i‡(
NGX_PCRE
)

769 i‡(
ªgex
) {

771 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

772 (
r
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 *));

773 i‡(
˛cÂ
 =
NULL
) {

774  
NGX_ERROR
;

777 
p˛cf
->
ªgex_loˇti⁄s
 = 
˛cÂ
;

779 
q
 = 
ªgex
;

780 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

781 
q
 = 
	`ngx_queue_√xt
(q))

783 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

785 *(
˛cÂ
++Ë
lq
->
exa˘
;

788 *
˛cÂ
 = 
NULL
;

790 
	`ngx_queue_•lô
(
loˇti⁄s
, 
ªgex
, &
èû
);

795  
NGX_OK
;

796 
	}
}

799 
ngx_öt_t


800 
	$ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

801 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

803 
ngx_queue_t
 *
q
, *
loˇti⁄s
;

804 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

805 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

807 
loˇti⁄s
 = 
p˛cf
->locations;

809 i‡(
loˇti⁄s
 =
NULL
) {

810  
NGX_OK
;

813 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

814  
NGX_OK
;

817 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

818 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

819 
q
 = 
	`ngx_queue_√xt
(q))

821 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

823 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

825 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

826  
NGX_ERROR
;

830 i‡(
	`ngx_hâp_joö_exa˘_loˇti⁄s
(
cf
, 
loˇti⁄s
Ë!
NGX_OK
) {

831  
NGX_ERROR
;

834 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_hód
(locations));

836 
p˛cf
->
°©ic_loˇti⁄s
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 0);

837 i‡(
p˛cf
->
°©ic_loˇti⁄s
 =
NULL
) {

838  
NGX_ERROR
;

841  
NGX_OK
;

842 
	}
}

845 
ngx_öt_t


846 
	$ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

847 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
)

849 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

851 i‡(*
loˇti⁄s
 =
NULL
) {

852 *
loˇti⁄s
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
,

853 (
ngx_hâp_loˇti⁄_queue_t
));

854 i‡(*
loˇti⁄s
 =
NULL
) {

855  
NGX_ERROR
;

858 
	`ngx_queue_öô
(*
loˇti⁄s
);

861 
lq
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
, (
ngx_hâp_loˇti⁄_queue_t
));

862 i‡(
lq
 =
NULL
) {

863  
NGX_ERROR
;

866 i‡(
˛cf
->
exa˘_m©ch


867 #i‡(
NGX_PCRE
)

868 || 
˛cf
->
ªgex


870 || 
˛cf
->
«med
 || clcf->
n⁄ame
)

872 
lq
->
exa˘
 = 
˛cf
;

873 
lq
->
ö˛usive
 = 
NULL
;

876 
lq
->
exa˘
 = 
NULL
;

877 
lq
->
ö˛usive
 = 
˛cf
;

880 
lq
->
«me
 = &
˛cf
->name;

881 
lq
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

882 
lq
->
löe
 = 
cf
->
c⁄f_fûe
->line;

884 
	`ngx_queue_öô
(&
lq
->
li°
);

886 
	`ngx_queue_ö£π_èû
(*
loˇti⁄s
, &
lq
->
queue
);

888  
NGX_OK
;

889 
	}
}

892 
ngx_öt_t


893 
	$ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
, c⁄°Çgx_queue_à*
two
)

895 
ngx_öt_t
 
rc
;

896 
ngx_hâp_c‹e_loc_c⁄f_t
 *
fú°
, *
£c⁄d
;

897 
ngx_hâp_loˇti⁄_queue_t
 *
lq1
, *
lq2
;

899 
lq1
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
⁄e
;

900 
lq2
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
two
;

902 
fú°
 = 
lq1
->
exa˘
 ?Üq1->exa˘ :Üq1->
ö˛usive
;

903 
£c⁄d
 = 
lq2
->
exa˘
 ?Üq2->exa˘ :Üq2->
ö˛usive
;

905 i‡(
fú°
->
n⁄ame
 && !
£c⁄d
->noname) {

910 i‡(!
fú°
->
n⁄ame
 && 
£c⁄d
->noname) {

915 i‡(
fú°
->
n⁄ame
 || 
£c⁄d
->noname) {

920 i‡(
fú°
->
«med
 && !
£c⁄d
->named) {

925 i‡(!
fú°
->
«med
 && 
£c⁄d
->named) {

930 i‡(
fú°
->
«med
 && 
£c⁄d
->named) {

931  
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

934 #i‡(
NGX_PCRE
)

936 i‡(
fú°
->
ªgex
 && !
£c⁄d
->regex) {

941 i‡(!
fú°
->
ªgex
 && 
£c⁄d
->regex) {

946 i‡(
fú°
->
ªgex
 || 
£c⁄d
->regex) {

953 
rc
 = 
	`ngx_fûíame_cmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data,

954 
	`ngx_mö
(
fú°
->
«me
.
Àn
, 
£c⁄d
->name.len) + 1);

956 i‡(
rc
 =0 && !
fú°
->
exa˘_m©ch
 && 
£c⁄d
->exact_match) {

961  
rc
;

962 
	}
}

965 
ngx_öt_t


966 
	$ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
)

968 
ngx_queue_t
 *
q
, *
x
;

969 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

971 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

973 
q
 !
	`ngx_queue_œ°
(
loˇti⁄s
)) {

975 
x
 = 
	`ngx_queue_√xt
(
q
);

977 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

978 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

980 i‡(
lq
->
«me
->
Àn
 =
lx
->name->len

981 && 
	`ngx_fûíame_cmp
(
lq
->
«me
->
d©a
, 
lx
->«me->d©a,Üx->«me->
Àn
)

984 i‡((
lq
->
exa˘
 && 
lx
->exa˘Ë|| (lq->
ö˛usive
 &&Üx->inclusive)) {

985 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

987 
lx
->
«me
,Üx->
fûe_«me
,Üx->
löe
);

989  
NGX_ERROR
;

992 
lq
->
ö˛usive
 = 
lx
->inclusive;

994 
	`ngx_queue_ªmove
(
x
);

999 
q
 = 
	`ngx_queue_√xt
(q);

1002  
NGX_OK
;

1003 
	}
}

1007 
	$ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,Çgx_queue_à*
q
)

1009 
u_ch¨
 *
«me
;

1010 
size_t
 
Àn
;

1011 
ngx_queue_t
 *
x
, 
èû
;

1012 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

1014 i‡(
q
 =
	`ngx_queue_œ°
(
loˇti⁄s
)) {

1018 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1020 i‡(
lq
->
ö˛usive
 =
NULL
) {

1021 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_√xt
(
q
));

1025 
Àn
 = 
lq
->
«me
->len;

1026 
«me
 = 
lq
->«me->
d©a
;

1028 
x
 = 
	`ngx_queue_√xt
(
q
);

1029 
x
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

1030 
x
 = 
	`ngx_queue_√xt
(x))

1032 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

1034 i‡(
Àn
 > 
lx
->
«me
->len

1035 || 
	`ngx_fûíame_cmp
(
«me
, 
lx
->«me->
d©a
, 
Àn
) != 0)

1041 
q
 = 
	`ngx_queue_√xt
(q);

1043 i‡(
q
 =
x
) {

1044 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1048 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1049 
	`ngx_queue_add
(&
lq
->
li°
, &
èû
);

1051 i‡(
x
 =
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

1052 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1056 
	`ngx_queue_•lô
(&
lq
->
li°
, 
x
, &
èû
);

1057 
	`ngx_queue_add
(
loˇti⁄s
, &
èû
);

1059 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1061 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1062 
	}
}

1070 
ngx_hâp_loˇti⁄_åì_node_t
 *

1071 
	$ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

1072 
size_t
 
¥efix
)

1074 
size_t
 
Àn
;

1075 
ngx_queue_t
 *
q
, 
èû
;

1076 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

1077 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
;

1079 
q
 = 
	`ngx_queue_middÀ
(
loˇti⁄s
);

1081 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1082 
Àn
 = 
lq
->
«me
->À¿- 
¥efix
;

1084 
node
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1085 
	`off£tof
(
ngx_hâp_loˇti⁄_åì_node_t
, 
«me
Ë+ 
Àn
);

1086 i‡(
node
 =
NULL
) {

1087  
NULL
;

1090 
node
->
À·
 = 
NULL
;

1091 
node
->
right
 = 
NULL
;

1092 
node
->
åì
 = 
NULL
;

1093 
node
->
exa˘
 = 
lq
->exact;

1094 
node
->
ö˛usive
 = 
lq
->inclusive;

1096 
node
->
auto_ªdúe˘
 = (
u_ch¨
Ë((
lq
->
exa˘
 &&Üq->exact->auto_redirect)

1097 || (
lq
->
ö˛usive
 &&Üq->ö˛usive->
auto_ªdúe˘
));

1099 
node
->
Àn
 = (
u_ch¨
)Üen;

1100 
	`ngx_mem˝y
(
node
->
«me
, &
lq
->«me->
d©a
[
¥efix
], 
Àn
);

1102 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1104 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

1109 
ö˛usive
;

1112 
node
->
À·
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 
¥efix
);

1113 i‡(
node
->
À·
 =
NULL
) {

1114  
NULL
;

1117 
	`ngx_queue_ªmove
(
q
);

1119 i‡(
	`ngx_queue_em±y
(&
èû
)) {

1120 
ö˛usive
;

1123 
node
->
right
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
èû
, 
¥efix
);

1124 i‡(
node
->
right
 =
NULL
) {

1125  
NULL
;

1128 
ö˛usive
:

1130 i‡(
	`ngx_queue_em±y
(&
lq
->
li°
)) {

1131  
node
;

1134 
node
->
åì
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
lq
->
li°
, 
¥efix
 + 
Àn
);

1135 i‡(
node
->
åì
 =
NULL
) {

1136  
NULL
;

1139  
node
;

1140 
	}
}

1143 
ngx_öt_t


1144 
	$ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1145 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1147 
ö_p‹t_t
 
p
;

1148 
ngx_uöt_t
 
i
;

1149 
sockaddr
 *
ß
;

1150 
sockaddr_ö
 *
sö
;

1151 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1152 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1153 #i‡(
NGX_HAVE_INET6
)

1154 
sockaddr_ö6
 *
sö6
;

1157 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1159 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1160 
cmcf
->
p‹ts
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 2,

1161 (
ngx_hâp_c⁄f_p‹t_t
));

1162 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1163  
NGX_ERROR
;

1167 
ß
 = &
ls›t
->
u
.
sockaddr
;

1169 
ß
->
ß_Ámûy
) {

1171 #i‡(
NGX_HAVE_INET6
)

1172 
AF_INET6
:

1173 
sö6
 = &
ls›t
->
u
.
sockaddr_ö6
;

1174 
p
 = 
sö6
->
sö6_p‹t
;

1178 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1179 
AF_UNIX
:

1180 
p
 = 0;

1185 
sö
 = &
ls›t
->
u
.
sockaddr_ö
;

1186 
p
 = 
sö
->
sö_p‹t
;

1190 
p‹t
 = 
cmcf
->
p‹ts
->
ñts
;

1191 
i
 = 0; i < 
cmcf
->
p‹ts
->
√…s
; i++) {

1193 i‡(
p
 !
p‹t
[
i
].p‹à|| 
ß
->
ß_Ámûy
 !p‹t[i].
Ámûy
) {

1199  
	`ngx_hâp_add_addªs£s
(
cf
, 
cscf
, &
p‹t
[
i
], 
ls›t
);

1204 
p‹t
 = 
	`ngx_¨øy_push
(
cmcf
->
p‹ts
);

1205 i‡(
p‹t
 =
NULL
) {

1206  
NGX_ERROR
;

1209 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

1210 
p‹t
->p‹à
p
;

1211 
p‹t
->
addrs
.
ñts
 = 
NULL
;

1213  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1214 
	}
}

1217 
ngx_öt_t


1218 
	$ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1219 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1221 
u_ch¨
 *
p
;

1222 
size_t
 
Àn
, 
off
;

1223 
ngx_uöt_t
 
i
, 
deÁu…_£rvî
;

1224 
sockaddr
 *
ß
;

1225 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1226 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1227 
sockaddr_un
 *
ßun
;

1229 #i‡(
NGX_HTTP_SSL
)

1230 
ngx_uöt_t
 
s¶
;

1232 #i‡(
NGX_HTTP_SPDY
)

1233 
ngx_uöt_t
 
•dy
;

1241 
ß
 = &
ls›t
->
u
.
sockaddr
;

1243 
ß
->
ß_Ámûy
) {

1245 #i‡(
NGX_HAVE_INET6
)

1246 
AF_INET6
:

1247 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

1248 
Àn
 = 16;

1252 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1253 
AF_UNIX
:

1254 
off
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

1255 
Àn
 = (
ßun
->
sun_∑th
);

1260 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

1261 
Àn
 = 4;

1265 
p
 = 
ls›t
->
u
.
sockaddr_d©a
 + 
off
;

1267 
addr
 = 
p‹t
->
addrs
.
ñts
;

1269 
i
 = 0; i < 
p‹t
->
addrs
.
√…s
; i++) {

1271 i‡(
	`ngx_memcmp
(
p
, 
addr
[
i
].
›t
.
u
.
sockaddr_d©a
 + 
off
, 
Àn
) != 0) {

1277 i‡(
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, &
addr
[
i
]Ë!
NGX_OK
) {

1278  
NGX_ERROR
;

1282 
deÁu…_£rvî
 = 
addr
[
i
].
›t
.default_server;

1284 #i‡(
NGX_HTTP_SSL
)

1285 
s¶
 = 
ls›t
->s¶ || 
addr
[
i
].
›t
.ssl;

1287 #i‡(
NGX_HTTP_SPDY
)

1288 
•dy
 = 
ls›t
->•dy || 
addr
[
i
].
›t
.spdy;

1291 i‡(
ls›t
->
£t
) {

1293 i‡(
addr
[
i
].
›t
.
£t
) {

1294 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1295 "du∂iˇãÜi°í o±i⁄†f‹ %s", 
addr
[
i
].
›t
.addr);

1296  
NGX_ERROR
;

1299 
addr
[
i
].
›t
 = *
ls›t
;

1304 i‡(
ls›t
->
deÁu…_£rvî
) {

1306 i‡(
deÁu…_£rvî
) {

1307 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1308 "®du∂iˇã deÁu… sîvî f‹ %s", 
addr
[
i
].
›t
.addr);

1309  
NGX_ERROR
;

1312 
deÁu…_£rvî
 = 1;

1313 
addr
[
i
].
deÁu…_£rvî
 = 
cscf
;

1316 
addr
[
i
].
›t
.
deÁu…_£rvî
 = default_server;

1317 #i‡(
NGX_HTTP_SSL
)

1318 
addr
[
i
].
›t
.
s¶
 = ssl;

1320 #i‡(
NGX_HTTP_SPDY
)

1321 
addr
[
i
].
›t
.
•dy
 = spdy;

1324  
NGX_OK
;

1329  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1330 
	}
}

1338 
ngx_öt_t


1339 
	$ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1340 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1342 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1344 i‡(
p‹t
->
addrs
.
ñts
 =
NULL
) {

1345 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 4,

1346 (
ngx_hâp_c⁄f_addr_t
))

1347 !
NGX_OK
)

1349  
NGX_ERROR
;

1353 #i‡(
NGX_HTTP_SPDY
 && 
NGX_HTTP_SSL
 \

1354 && !
deföed
 
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 \

1355 && !
deföed
 
TLSEXT_TYPE_√xt_¥Ÿo_√g
)

1356 i‡(
ls›t
->
•dy
 &&Üs›t->
s¶
) {

1357 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1359 "suµ‹t, SPDY i†nŸÉ«bÀd f‹ %s", 
ls›t
->
addr
);

1363 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

1364 i‡(
addr
 =
NULL
) {

1365  
NGX_ERROR
;

1368 
addr
->
›t
 = *
ls›t
;

1369 
addr
->
hash
.
buckës
 = 
NULL
;

1370 
addr
->
hash
.
size
 = 0;

1371 
addr
->
wc_hód
 = 
NULL
;

1372 
addr
->
wc_èû
 = 
NULL
;

1373 #i‡(
NGX_PCRE
)

1374 
addr
->
ƒegex
 = 0;

1375 
addr
->
ªgex
 = 
NULL
;

1377 
addr
->
deÁu…_£rvî
 = 
cscf
;

1378 
addr
->
£rvîs
.
ñts
 = 
NULL
;

1380  
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, 
addr
);

1381 
	}
}

1386 
ngx_öt_t


1387 
	$ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1388 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1390 
ngx_uöt_t
 
i
;

1391 
ngx_hâp_c‹e_§v_c⁄f_t
 **
£rvî
;

1393 i‡(
addr
->
£rvîs
.
ñts
 =
NULL
) {

1394 i‡(
	`ngx_¨øy_öô
(&
addr
->
£rvîs
, 
cf
->
ãmp_poﬁ
, 4,

1395 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

1396 !
NGX_OK
)

1398  
NGX_ERROR
;

1402 
£rvî
 = 
addr
->
£rvîs
.
ñts
;

1403 
i
 = 0; i < 
addr
->
£rvîs
.
√…s
; i++) {

1404 i‡(
£rvî
[
i
] =
cscf
) {

1405 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1406 "®du∂iˇãÜi°í %s", 
addr
->
›t
.addr);

1407  
NGX_ERROR
;

1412 
£rvî
 = 
	`ngx_¨øy_push
(&
addr
->
£rvîs
);

1413 i‡(
£rvî
 =
NULL
) {

1414  
NGX_ERROR
;

1417 *
£rvî
 = 
cscf
;

1419  
NGX_OK
;

1420 
	}
}

1423 
ngx_öt_t


1424 
	$ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1425 
ngx_¨øy_t
 *
p‹ts
)

1427 
ngx_uöt_t
 
p
, 
a
;

1428 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1429 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1431 i‡(
p‹ts
 =
NULL
) {

1432  
NGX_OK
;

1435 
p‹t
 = 
p‹ts
->
ñts
;

1436 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

1438 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

1439 (
ngx_hâp_c⁄f_addr_t
), 
ngx_hâp_cmp_c⁄f_addrs
);

1446 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

1447 
a
 = 0;á < 
p‹t
[
p
].
addrs
.
√…s
;á++) {

1449 i‡(
addr
[
a
].
£rvîs
.
√…s
 > 1

1450 #i‡(
NGX_PCRE
)

1451 || 
addr
[
a
].
deÁu…_£rvî
->
ˇ±uªs


1455 i‡(
	`ngx_hâp_£rvî_«mes
(
cf
, 
cmcf
, &
addr
[
a
]Ë!
NGX_OK
) {

1456  
NGX_ERROR
;

1461 i‡(
	`ngx_hâp_öô_li°íög
(
cf
, &
p‹t
[
p
]Ë!
NGX_OK
) {

1462  
NGX_ERROR
;

1466  
NGX_OK
;

1467 
	}
}

1470 
ngx_öt_t


1471 
	$ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1472 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1474 
ngx_öt_t
 
rc
;

1475 
ngx_uöt_t
 
n
, 
s
;

1476 
ngx_hash_öô_t
 
hash
;

1477 
ngx_hash_keys_¨øys_t
 
ha
;

1478 
ngx_hâp_£rvî_«me_t
 *
«me
;

1479 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

1480 #i‡(
NGX_PCRE
)

1481 
ngx_uöt_t
 
ªgex
, 
i
;

1483 
ªgex
 = 0;

1486 
	`ngx_memzîo
(&
ha
, (
ngx_hash_keys_¨øys_t
));

1488 
ha
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

1489 i‡(
ha
.
ãmp_poﬁ
 =
NULL
) {

1490  
NGX_ERROR
;

1493 
ha
.
poﬁ
 = 
cf
->pool;

1495 i‡(
	`ngx_hash_keys_¨øy_öô
(&
ha
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

1496 
Áûed
;

1499 
cscÂ
 = 
addr
->
£rvîs
.
ñts
;

1501 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1503 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1505 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1507 #i‡(
NGX_PCRE
)

1508 i‡(
«me
[
n
].
ªgex
) {

1509 
ªgex
++;

1514 
rc
 = 
	`ngx_hash_add_key
(&
ha
, &
«me
[
n
].«me,Çame[n].
£rvî
,

1515 
NGX_HASH_WILDCARD_KEY
);

1517 i‡(
rc
 =
NGX_ERROR
) {

1518  
NGX_ERROR
;

1521 i‡(
rc
 =
NGX_DECLINED
) {

1522 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1524 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1525  
NGX_ERROR
;

1528 i‡(
rc
 =
NGX_BUSY
) {

1529 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

1531 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1536 
hash
.
key
 = 
ngx_hash_key_lc
;

1537 
hash
.
max_size
 = 
cmcf
->
£rvî_«mes_hash_max_size
;

1538 
hash
.
buckë_size
 = 
cmcf
->
£rvî_«mes_hash_buckë_size
;

1539 
hash
.
«me
 = "server_names_hash";

1540 
hash
.
poﬁ
 = 
cf
->pool;

1542 i‡(
ha
.
keys
.
√…s
) {

1543 
hash
.hash = &
addr
->hash;

1544 
hash
.
ãmp_poﬁ
 = 
NULL
;

1546 i‡(
	`ngx_hash_öô
(&
hash
, 
ha
.
keys
.
ñts
, ha.keys.
√…s
Ë!
NGX_OK
) {

1547 
Áûed
;

1551 i‡(
ha
.
dns_wc_hód
.
√…s
) {

1553 
	`ngx_qs‹t
(
ha
.
dns_wc_hód
.
ñts
, (
size_t
Ëha.dns_wc_hód.
√…s
,

1554 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1556 
hash
.hash = 
NULL
;

1557 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1559 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_hód
.
ñts
,

1560 
ha
.
dns_wc_hód
.
√…s
)

1561 !
NGX_OK
)

1563 
Áûed
;

1566 
addr
->
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1569 i‡(
ha
.
dns_wc_èû
.
√…s
) {

1571 
	`ngx_qs‹t
(
ha
.
dns_wc_èû
.
ñts
, (
size_t
Ëha.dns_wc_èû.
√…s
,

1572 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1574 
hash
.hash = 
NULL
;

1575 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1577 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_èû
.
ñts
,

1578 
ha
.
dns_wc_èû
.
√…s
)

1579 !
NGX_OK
)

1581 
Áûed
;

1584 
addr
->
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1587 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1589 #i‡(
NGX_PCRE
)

1591 i‡(
ªgex
 == 0) {

1592  
NGX_OK
;

1595 
addr
->
ƒegex
 = 
ªgex
;

1596 
addr
->
ªgex
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñegex * (
ngx_hâp_£rvî_«me_t
));

1597 i‡(
addr
->
ªgex
 =
NULL
) {

1598  
NGX_ERROR
;

1601 
i
 = 0;

1603 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1605 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1607 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1608 i‡(
«me
[
n
].
ªgex
) {

1609 
addr
->
ªgex
[
i
++] = 
«me
[
n
];

1616  
NGX_OK
;

1618 
Áûed
:

1620 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1622  
NGX_ERROR
;

1623 
	}
}

1626 
ngx_öt_t


1627 
	$ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

1629 
ngx_hâp_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

1631 
fú°
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
⁄e
;

1632 
£c⁄d
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
two
;

1634 i‡(
fú°
->
›t
.
wûdˇrd
) {

1639 i‡(
£c⁄d
->
›t
.
wûdˇrd
) {

1644 i‡(
fú°
->
›t
.
böd
 && !
£c⁄d
->opt.bind) {

1649 i‡(!
fú°
->
›t
.
böd
 && 
£c⁄d
->opt.bind) {

1657 
	}
}

1660 
ngx_libc_cde˛


1661 
	$ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

1663 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

1665 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

1666 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

1668  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

1669 
	}
}

1672 
ngx_öt_t


1673 
	$ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
)

1675 
ngx_uöt_t
 
i
, 
œ°
, 
böd_wûdˇrd
;

1676 
ngx_li°íög_t
 *
ls
;

1677 
ngx_hâp_p‹t_t
 *
hp‹t
;

1678 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1680 
addr
 = 
p‹t
->
addrs
.
ñts
;

1681 
œ°
 = 
p‹t
->
addrs
.
√…s
;

1690 i‡(
addr
[
œ°
 - 1].
›t
.
wûdˇrd
) {

1691 
addr
[
œ°
 - 1].
›t
.
böd
 = 1;

1692 
böd_wûdˇrd
 = 1;

1695 
böd_wûdˇrd
 = 0;

1698 
i
 = 0;

1700 
i
 < 
œ°
) {

1702 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
›t
.
böd
) {

1703 
i
++;

1707 
ls
 = 
	`ngx_hâp_add_li°íög
(
cf
, &
addr
[
i
]);

1708 i‡(
ls
 =
NULL
) {

1709  
NGX_ERROR
;

1712 
hp‹t
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_p‹t_t
));

1713 i‡(
hp‹t
 =
NULL
) {

1714  
NGX_ERROR
;

1717 
ls
->
£rvîs
 = 
hp‹t
;

1719 i‡(
i
 =
œ°
 - 1) {

1720 
hp‹t
->
«ddrs
 = 
œ°
;

1723 
hp‹t
->
«ddrs
 = 1;

1724 
i
 = 0;

1727 
ls
->
sockaddr
->
ß_Ámûy
) {

1729 #i‡(
NGX_HAVE_INET6
)

1730 
AF_INET6
:

1731 i‡(
	`ngx_hâp_add_addrs6
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1732  
NGX_ERROR
;

1737 i‡(
	`ngx_hâp_add_addrs
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1738  
NGX_ERROR
;

1743 
addr
++;

1744 
œ°
--;

1747  
NGX_OK
;

1748 
	}
}

1751 
ngx_li°íög_t
 *

1752 
	$ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1754 
ngx_li°íög_t
 *
ls
;

1755 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1756 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1758 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, &
addr
->
›t
.
u
.
sockaddr
,áddr->›t.
sockÀn
);

1759 i‡(
ls
 =
NULL
) {

1760  
NULL
;

1763 
ls
->
addr_¡›
 = 1;

1765 
ls
->
h™dÀr
 = 
ngx_hâp_öô_c⁄√˘i⁄
;

1767 
cscf
 = 
addr
->
deÁu…_£rvî
;

1768 
ls
->
poﬁ_size
 = 
cscf
->
c⁄√˘i⁄_poﬁ_size
;

1769 
ls
->
po°_ac˚±_timeout
 = 
cscf
->
˛õ¡_hódî_timeout
;

1771 
˛cf
 = 
cscf
->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

1773 
ls
->
logp
 = 
˛cf
->
îr‹_log
;

1774 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

1775 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

1777 #i‡(
NGX_WIN32
)

1779 
ngx_io˝_c⁄f_t
 *
io˝cf
 = 
NULL
;

1781 i‡(
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
)) {

1782 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

1784 i‡(
io˝cf
 && io˝cf->
ac˚±ex_ªad
) {

1785 
ls
->
po°_ac˚±_buf„r_size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

1790 
ls
->
backlog
 = 
addr
->
›t
.backlog;

1791 
ls
->
rcvbuf
 = 
addr
->
›t
.rcvbuf;

1792 
ls
->
¢dbuf
 = 
addr
->
›t
.sndbuf;

1794 
ls
->
kì∑live
 = 
addr
->
›t
.
so_kì∑live
;

1795 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

1796 
ls
->
kìpidÀ
 = 
addr
->
›t
.
t˝_kìpidÀ
;

1797 
ls
->
kìpötvl
 = 
addr
->
›t
.
t˝_kìpötvl
;

1798 
ls
->
kìp˙t
 = 
addr
->
›t
.
t˝_kìp˙t
;

1801 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

1802 
ls
->
ac˚±_fûãr
 = 
addr
->
›t
.accept_filter;

1805 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

1806 
ls
->
de„ºed_ac˚±
 = 
addr
->
›t
.deferred_accept;

1809 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

1810 
ls
->
ùv6⁄ly
 = 
addr
->
›t
.ipv6only;

1813 #i‡(
NGX_HAVE_SETFIB
)

1814 
ls
->
£tfib
 = 
addr
->
›t
.setfib;

1817 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

1818 
ls
->
Á°›í
 = 
addr
->
›t
.fastopen;

1821  
ls
;

1822 
	}
}

1825 
ngx_öt_t


1826 
	$ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1827 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1829 
ngx_uöt_t
 
i
;

1830 
ngx_hâp_ö_addr_t
 *
addrs
;

1831 
sockaddr_ö
 *
sö
;

1832 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1834 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1835 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö_addr_t
));

1836 i‡(
hp‹t
->
addrs
 =
NULL
) {

1837  
NGX_ERROR
;

1840 
addrs
 = 
hp‹t
->addrs;

1842 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1844 
sö
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö
;

1845 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

1846 
addrs
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1847 #i‡(
NGX_HTTP_SSL
)

1848 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1850 #i‡(
NGX_HTTP_SPDY
)

1851 
addrs
[
i
].
c⁄f
.
•dy
 = 
addr
[i].
›t
.spdy;

1853 
addrs
[
i
].
c⁄f
.
¥oxy_¥Ÿocﬁ
 = 
addr
[i].
›t
.proxy_protocol;

1855 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1856 && (
addr
[
i
].
wc_hód
 =
NULL


1857 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1858 && (
addr
[
i
].
wc_èû
 =
NULL


1859 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1860 #i‡(
NGX_PCRE
)

1861 && 
addr
[
i
].
ƒegex
 == 0

1868 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1869 i‡(
vn
 =
NULL
) {

1870  
NGX_ERROR
;

1873 
addrs
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1875 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1876 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1877 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1878 #i‡(
NGX_PCRE
)

1879 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1880 
vn
->
ªgex
 = 
addr
[
i
].regex;

1884  
NGX_OK
;

1885 
	}
}

1888 #i‡(
NGX_HAVE_INET6
)

1890 
ngx_öt_t


1891 
	$ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1892 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1894 
ngx_uöt_t
 
i
;

1895 
ngx_hâp_ö6_addr_t
 *
addrs6
;

1896 
sockaddr_ö6
 *
sö6
;

1897 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1899 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1900 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö6_addr_t
));

1901 i‡(
hp‹t
->
addrs
 =
NULL
) {

1902  
NGX_ERROR
;

1905 
addrs6
 = 
hp‹t
->
addrs
;

1907 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1909 
sö6
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö6
;

1910 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

1911 
addrs6
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1912 #i‡(
NGX_HTTP_SSL
)

1913 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1915 #i‡(
NGX_HTTP_SPDY
)

1916 
addrs6
[
i
].
c⁄f
.
•dy
 = 
addr
[i].
›t
.spdy;

1919 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1920 && (
addr
[
i
].
wc_hód
 =
NULL


1921 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1922 && (
addr
[
i
].
wc_èû
 =
NULL


1923 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1924 #i‡(
NGX_PCRE
)

1925 && 
addr
[
i
].
ƒegex
 == 0

1932 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1933 i‡(
vn
 =
NULL
) {

1934  
NGX_ERROR
;

1937 
addrs6
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1939 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1940 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1941 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1942 #i‡(
NGX_PCRE
)

1943 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1944 
vn
->
ªgex
 = 
addr
[
i
].regex;

1948  
NGX_OK
;

1949 
	}
}

1955 
	$ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1957 *
p
 = 
c⁄f
;

1959 
ngx_¨øy_t
 **
ty≥s
;

1960 
ngx_°r_t
 *
vÆue
, *
deÁu…_ty≥
;

1961 
ngx_uöt_t
 
i
, 
n
, 
hash
;

1962 
ngx_hash_key_t
 *
ty≥
;

1964 
ty≥s
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1966 i‡(*
ty≥s
 == (*) -1) {

1967  
NGX_CONF_OK
;

1970 
deÁu…_ty≥
 = 
cmd
->
po°
;

1972 i‡(*
ty≥s
 =
NULL
) {

1973 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

1974 i‡(*
ty≥s
 =
NULL
) {

1975  
NGX_CONF_ERROR
;

1978 i‡(
deÁu…_ty≥
) {

1979 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

1980 i‡(
ty≥
 =
NULL
) {

1981  
NGX_CONF_ERROR
;

1984 
ty≥
->
key
 = *
deÁu…_ty≥
;

1985 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

1986 
deÁu…_ty≥
->
Àn
);

1987 
ty≥
->
vÆue
 = (*) 4;

1991 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1993 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1995 i‡(
vÆue
[
i
].
Àn
 =1 && vÆue[i].
d©a
[0] == '*') {

1996 *
ty≥s
 = (*) -1;

1997  
NGX_CONF_OK
;

2000 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

2001 
vÆue
[
i
].
d©a
[vÆue[i].
Àn
] = '\0';

2003 
ty≥
 = (*
ty≥s
)->
ñts
;

2004 
n
 = 0;Ç < (*
ty≥s
)->
√…s
;Ç++) {

2006 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

2007 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

2008 "du∂iˇã MIMEÅy≥ \"%V\"", &
vÆue
[
i
]);

2009 
√xt
;

2013 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2014 i‡(
ty≥
 =
NULL
) {

2015  
NGX_CONF_ERROR
;

2018 
ty≥
->
key
 = 
vÆue
[
i
];

2019 
ty≥
->
key_hash
 = 
hash
;

2020 
ty≥
->
vÆue
 = (*) 4;

2022 
√xt
:

2027  
NGX_CONF_OK
;

2028 
	}
}

2032 
	$ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
, 
ngx_hash_t
 *
ty≥s_hash
,

2033 
ngx_¨øy_t
 **
¥ev_keys
, 
ngx_hash_t
 *
¥ev_ty≥s_hash
,

2034 
ngx_°r_t
 *
deÁu…_ty≥s
)

2036 
ngx_hash_öô_t
 
hash
;

2038 i‡(*
keys
) {

2040 i‡(*
keys
 == (*) -1) {

2041  
NGX_CONF_OK
;

2044 
hash
.hash = 
ty≥s_hash
;

2045 
hash
.
key
 = 
NULL
;

2046 
hash
.
max_size
 = 2048;

2047 
hash
.
buckë_size
 = 64;

2048 
hash
.
«me
 = "test_types_hash";

2049 
hash
.
poﬁ
 = 
cf
->pool;

2050 
hash
.
ãmp_poﬁ
 = 
NULL
;

2052 i‡(
	`ngx_hash_öô
(&
hash
, (*
keys
)->
ñts
, (*keys)->
√…s
Ë!
NGX_OK
) {

2053  
NGX_CONF_ERROR
;

2056  
NGX_CONF_OK
;

2059 i‡(
¥ev_ty≥s_hash
->
buckës
 =
NULL
) {

2061 i‡(*
¥ev_keys
 =
NULL
) {

2063 i‡(
	`ngx_hâp_£t_deÁu…_ty≥s
(
cf
, 
¥ev_keys
, 
deÁu…_ty≥s
)

2064 !
NGX_OK
)

2066  
NGX_CONF_ERROR
;

2069 } i‡(*
¥ev_keys
 == (*) -1) {

2070 *
keys
 = *
¥ev_keys
;

2071  
NGX_CONF_OK
;

2074 
hash
.hash = 
¥ev_ty≥s_hash
;

2075 
hash
.
key
 = 
NULL
;

2076 
hash
.
max_size
 = 2048;

2077 
hash
.
buckë_size
 = 64;

2078 
hash
.
«me
 = "test_types_hash";

2079 
hash
.
poﬁ
 = 
cf
->pool;

2080 
hash
.
ãmp_poﬁ
 = 
NULL
;

2082 i‡(
	`ngx_hash_öô
(&
hash
, (*
¥ev_keys
)->
ñts
, (*¥ev_keys)->
√…s
)

2083 !
NGX_OK
)

2085  
NGX_CONF_ERROR
;

2089 *
ty≥s_hash
 = *
¥ev_ty≥s_hash
;

2091  
NGX_CONF_OK
;

2093 
	}
}

2096 
ngx_öt_t


2097 
	$ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

2098 
ngx_°r_t
 *
deÁu…_ty≥
)

2100 
ngx_hash_key_t
 *
ty≥
;

2102 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

2103 i‡(*
ty≥s
 =
NULL
) {

2104  
NGX_ERROR
;

2107 
deÁu…_ty≥
->
Àn
) {

2109 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2110 i‡(
ty≥
 =
NULL
) {

2111  
NGX_ERROR
;

2114 
ty≥
->
key
 = *
deÁu…_ty≥
;

2115 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

2116 
deÁu…_ty≥
->
Àn
);

2117 
ty≥
->
vÆue
 = (*) 4;

2119 
deÁu…_ty≥
++;

2122  
NGX_OK
;

2123 
	}
}

	@src/http/ngx_http.h

8 #i‚de‡
_NGX_HTTP_H_INCLUDED_


9 
	#_NGX_HTTP_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_hâp_ªque°_s
 
	tngx_hâp_ªque°_t
;

17 
ngx_hâp_up°ªam_s
 
	tngx_hâp_up°ªam_t
;

18 
ngx_hâp_ˇche_s
 
	tngx_hâp_ˇche_t
;

19 
ngx_hâp_fûe_ˇche_s
 
	tngx_hâp_fûe_ˇche_t
;

20 
ngx_hâp_log_˘x_s
 
	tngx_hâp_log_˘x_t
;

21 
ngx_hâp_chunked_s
 
	tngx_hâp_chunked_t
;

23 #i‡(
NGX_HTTP_SPDY
)

24 
ngx_hâp_•dy_°ªam_s
 
	tngx_hâp_•dy_°ªam_t
;

27 
	$ngx_öt_t
 (*
	tngx_hâp_hódî_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

28 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tngx_uöt_t
 
	toff£t
);

29 
u_ch¨
 *(*
	tngx_hâp_log_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

30 
	tngx_hâp_ªque°_t
 *
	t§
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

33 
	~<ngx_hâp_v¨übÀs.h
>

34 
	~<ngx_hâp_c⁄fig.h
>

35 
	~<ngx_hâp_ªque°.h
>

36 
	~<ngx_hâp_s¸ùt.h
>

37 
	~<ngx_hâp_up°ªam.h
>

38 
	~<ngx_hâp_up°ªam_round_robö.h
>

39 
	~<ngx_hâp_c‹e_moduÀ.h
>

41 #i‡(
NGX_HTTP_SPDY
)

42 
	~<ngx_hâp_•dy.h
>

44 #i‡(
NGX_HTTP_CACHE
)

45 
	~<ngx_hâp_ˇche.h
>

47 #i‡(
NGX_HTTP_SSI
)

48 
	~<ngx_hâp_ssi_fûãr_moduÀ.h
>

50 #i‡(
NGX_HTTP_SSL
)

51 
	~<ngx_hâp_s¶_moduÀ.h
>

55 
	sngx_hâp_log_˘x_s
 {

56 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

57 
ngx_hâp_ªque°_t
 *
ªque°
;

58 
ngx_hâp_ªque°_t
 *
cuºít_ªque°
;

62 
	sngx_hâp_chunked_s
 {

63 
ngx_uöt_t
 
°©e
;

64 
off_t
 
size
;

65 
off_t
 
Àngth
;

70 
ngx_uöt_t
 
hâp_vîsi⁄
;

71 
ngx_uöt_t
 
code
;

72 
ngx_uöt_t
 
cou¡
;

73 
u_ch¨
 *
°¨t
;

74 
u_ch¨
 *
íd
;

75 } 
	tngx_hâp_°©us_t
;

78 
	#ngx_hâp_gë_moduÀ_˘x
(
r
, 
moduÀ
Ë‘)->
˘x
[moduÀ.
˘x_ödex
]

	)

79 
	#ngx_hâp_£t_˘x
(
r
, 
c
, 
moduÀ
Ër->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

82 
ngx_öt_t
 
	`ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

83 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
);

84 
ngx_öt_t
 
	`ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

85 
ngx_hâp_li°í_›t_t
 *
ls›t
);

88 
	`ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

89 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

91 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

92 
	`ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
);

95 
ngx_öt_t
 
	`ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

96 
ngx_öt_t
 
	`ngx_hâp_∑r£_uri
(
ngx_hâp_ªque°_t
 *
r
);

97 
ngx_öt_t
 
	`ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_uöt_t
 
mîge_¶ashes
);

99 
ngx_öt_t
 
	`ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

100 
ngx_hâp_°©us_t
 *
°©us
);

101 
ngx_öt_t
 
	`ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

102 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
);

103 
ngx_öt_t
 
	`ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

104 
ngx_uöt_t
 
Ælow_undîsc‹es
);

105 
ngx_öt_t
 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
,

106 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

107 
ngx_öt_t
 
	`ngx_hâp_∑r£_£t_cookõ_löes
(
ngx_¨øy_t
 *
hódîs
,

108 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

109 
ngx_öt_t
 
	`ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
,

110 
ngx_°r_t
 *
vÆue
);

111 
	`ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

112 
ngx_°r_t
 *
¨gs
);

113 
ngx_öt_t
 
	`ngx_hâp_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

114 
ngx_hâp_chunked_t
 *
˘x
);

117 
ngx_hâp_ªque°_t
 *
	`ngx_hâp_¸óã_ªque°
(
ngx_c⁄√˘i⁄_t
 *
c
);

118 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_uri
(
ngx_hâp_ªque°_t
 *
r
);

119 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

120 
	`ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

121 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
);

122 
	`ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

123 
	`ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
);

124 
ngx_öt_t
 
	`ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_hâp_po°ed_ªque°_t
 *
¥
);

126 
	`ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

127 
	`ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

129 
	`ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
);

130 
	`ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

133 
	#NGX_HTTP_LAST
 1

	)

134 
	#NGX_HTTP_FLUSH
 2

	)

136 
ngx_öt_t
 
	`ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
);

139 
ngx_öt_t
 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

140 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

141 
ngx_öt_t
 
	`ngx_hâp_ªad_unbuf„ªd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

143 
ngx_öt_t
 
	`ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
);

144 
ngx_öt_t
 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

145 
ngx_öt_t
 
îr‹
);

146 
ngx_öt_t
 
	`ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

147 
ngx_moduÀ_t
 *
m
, 
ngx_öt_t
 
îr‹
);

148 
	`ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
);

151 
time_t
 
	`ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
);

152 
size_t
 
	`ngx_hâp_gë_time
(*
buf
, 
time_t
 
t
);

156 
ngx_öt_t
 
	`ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

157 
	`ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

158 
	`ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

159 
	`ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

162 *
	`ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

163 *
	`ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
,

164 
ngx_hash_t
 *
ty≥s_hash
, 
ngx_¨øy_t
 **
¥ev_keys
,

165 
ngx_hash_t
 *
¥ev_ty≥s_hash
, 
ngx_°r_t
 *
deÁu…_ty≥s
);

166 
ngx_öt_t
 
	`ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

167 
ngx_°r_t
 *
deÁu…_ty≥
);

169 #i‡(
NGX_HTTP_DEGRADATION
)

170 
ngx_uöt_t
 
	`ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *);

174 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

176 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[];

179 
ngx_hâp_ouçut_hódî_fûãr_±
 
ngx_hâp_t›_hódî_fûãr
;

180 
ngx_hâp_ouçut_body_fûãr_±
 
ngx_hâp_t›_body_fûãr
;

181 
ngx_hâp_ªque°_body_fûãr_±
 
ngx_hâp_t›_ªque°_body_fûãr
;

	@src/http/ngx_http_cache.h

8 #i‚de‡
_NGX_HTTP_CACHE_H_INCLUDED_


9 
	#_NGX_HTTP_CACHE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_CACHE_MISS
 1

	)

18 
	#NGX_HTTP_CACHE_BYPASS
 2

	)

19 
	#NGX_HTTP_CACHE_EXPIRED
 3

	)

20 
	#NGX_HTTP_CACHE_STALE
 4

	)

21 
	#NGX_HTTP_CACHE_UPDATING
 5

	)

22 
	#NGX_HTTP_CACHE_REVALIDATED
 6

	)

23 
	#NGX_HTTP_CACHE_HIT
 7

	)

24 
	#NGX_HTTP_CACHE_SCARCE
 8

	)

26 
	#NGX_HTTP_CACHE_KEY_LEN
 16

	)

27 
	#NGX_HTTP_CACHE_ETAG_LEN
 42

	)

28 
	#NGX_HTTP_CACHE_VARY_LEN
 42

	)

30 
	#NGX_HTTP_CACHE_VERSION
 3

	)

34 
ngx_uöt_t
 
	m°©us
;

35 
time_t
 
	mvÆid
;

36 } 
	tngx_hâp_ˇche_vÆid_t
;

40 
ngx_rbåì_node_t
 
	mnode
;

41 
ngx_queue_t
 
	mqueue
;

43 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN


44 - (
ngx_rbåì_key_t
)];

46 
	mcou¡
:20;

47 
	mu£s
:10;

48 
	mvÆid_m£c
:10;

49 
	mîr‹
:10;

50 
	mexi°s
:1;

51 
	mupd©ög
:1;

52 
	mdñëög
:1;

55 
ngx_fûe_uniq_t
 
	muniq
;

56 
time_t
 
	mexpúe
;

57 
time_t
 
	mvÆid_£c
;

58 
size_t
 
	mbody_°¨t
;

59 
off_t
 
	mfs_size
;

60 
ngx_m£c_t
 
	mlock_time
;

61 } 
	tngx_hâp_fûe_ˇche_node_t
;

64 
	sngx_hâp_ˇche_s
 {

65 
ngx_fûe_t
 
	mfûe
;

66 
ngx_¨øy_t
 
	mkeys
;

67 
uöt32_t
 
	m¸c32
;

68 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN
];

69 
u_ch¨
 
	mmaö
[
NGX_HTTP_CACHE_KEY_LEN
];

71 
ngx_fûe_uniq_t
 
	muniq
;

72 
time_t
 
	mvÆid_£c
;

73 
time_t
 
	mœ°_modifõd
;

74 
time_t
 
	md©e
;

76 
ngx_°r_t
 
	mëag
;

77 
ngx_°r_t
 
	mv¨y
;

78 
u_ch¨
 
	mv¨ü¡
[
NGX_HTTP_CACHE_KEY_LEN
];

80 
size_t
 
	mhódî_°¨t
;

81 
size_t
 
	mbody_°¨t
;

82 
off_t
 
	mÀngth
;

83 
off_t
 
	mfs_size
;

85 
ngx_uöt_t
 
	mmö_u£s
;

86 
ngx_uöt_t
 
	mîr‹
;

87 
ngx_uöt_t
 
	mvÆid_m£c
;

89 
ngx_buf_t
 *
	mbuf
;

91 
ngx_hâp_fûe_ˇche_t
 *
	mfûe_ˇche
;

92 
ngx_hâp_fûe_ˇche_node_t
 *
	mnode
;

94 #i‡(
NGX_THREADS
)

95 
ngx_thªad_èsk_t
 *
	mthªad_èsk
;

98 
ngx_m£c_t
 
	mlock_timeout
;

99 
ngx_m£c_t
 
	mlock_age
;

100 
ngx_m£c_t
 
	mlock_time
;

101 
ngx_m£c_t
 
	mwaô_time
;

103 
ngx_evít_t
 
	mwaô_evít
;

105 
	mlock
:1;

106 
	mwaôög
:1;

108 
	mupd©ed
:1;

109 
	mupd©ög
:1;

110 
	mexi°s
:1;

111 
	mãmp_fûe
:1;

112 
	mªadög
:1;

113 
	m£c⁄d¨y
:1;

118 
ngx_uöt_t
 
	mvîsi⁄
;

119 
time_t
 
	mvÆid_£c
;

120 
time_t
 
	mœ°_modifõd
;

121 
time_t
 
	md©e
;

122 
uöt32_t
 
	m¸c32
;

123 
u_sh‹t
 
	mvÆid_m£c
;

124 
u_sh‹t
 
	mhódî_°¨t
;

125 
u_sh‹t
 
	mbody_°¨t
;

126 
u_ch¨
 
	mëag_Àn
;

127 
u_ch¨
 
	mëag
[
NGX_HTTP_CACHE_ETAG_LEN
];

128 
u_ch¨
 
	mv¨y_Àn
;

129 
u_ch¨
 
	mv¨y
[
NGX_HTTP_CACHE_VARY_LEN
];

130 
u_ch¨
 
	mv¨ü¡
[
NGX_HTTP_CACHE_KEY_LEN
];

131 } 
	tngx_hâp_fûe_ˇche_hódî_t
;

135 
ngx_rbåì_t
 
	mrbåì
;

136 
ngx_rbåì_node_t
 
	m£¡öñ
;

137 
ngx_queue_t
 
	mqueue
;

138 
ngx_©omic_t
 
	mcﬁd
;

139 
ngx_©omic_t
 
	mlﬂdög
;

140 
off_t
 
	msize
;

141 } 
	tngx_hâp_fûe_ˇche_sh_t
;

144 
	sngx_hâp_fûe_ˇche_s
 {

145 
ngx_hâp_fûe_ˇche_sh_t
 *
	msh
;

146 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

148 
ngx_∑th_t
 *
	m∑th
;

149 
ngx_∑th_t
 *
	mãmp_∑th
;

151 
off_t
 
	mmax_size
;

152 
size_t
 
	mbsize
;

154 
time_t
 
	möa˘ive
;

156 
ngx_uöt_t
 
	mfûes
;

157 
ngx_uöt_t
 
	mlﬂdî_fûes
;

158 
ngx_m£c_t
 
	mœ°
;

159 
ngx_m£c_t
 
	mlﬂdî_¶ìp
;

160 
ngx_m£c_t
 
	mlﬂdî_thªshﬁd
;

162 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

166 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
);

167 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

168 
ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

169 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
);

170 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
);

171 
ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
);

172 
ngx_hâp_fûe_ˇche_upd©e_hódî
(
ngx_hâp_ªque°_t
 *
r
);

173 
ngx_öt_t
 
ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *);

174 
ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
);

175 
time_t
 
ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
);

177 *
ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

178 *
c⁄f
);

179 *
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

180 *
c⁄f
);

183 
ngx_°r_t
 
ngx_hâp_ˇche_°©us
[];

	@src/http/ngx_http_config.h

8 #i‚de‡
_NGX_HTTP_CONFIG_H_INCLUDED_


9 
	#_NGX_HTTP_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 **
	mmaö_c⁄f
;

19 **
	m§v_c⁄f
;

20 **
	mloc_c⁄f
;

21 } 
	tngx_hâp_c⁄f_˘x_t
;

25 
ngx_öt_t
 (*
¥ec⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

26 
ngx_öt_t
 (*
po°c⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

28 *(*
	m¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

29 *(*
	möô_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	mc⁄f
);

31 *(*
	m¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

32 *(*
	mmîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

34 *(*
	m¸óã_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

35 *(*
	mmîge_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

36 } 
	tngx_hâp_moduÀ_t
;

39 
	#NGX_HTTP_MODULE
 0x50545448

	)

41 
	#NGX_HTTP_MAIN_CONF
 0x02000000

	)

42 
	#NGX_HTTP_SRV_CONF
 0x04000000

	)

43 
	#NGX_HTTP_LOC_CONF
 0x08000000

	)

44 
	#NGX_HTTP_UPS_CONF
 0x10000000

	)

45 
	#NGX_HTTP_SIF_CONF
 0x20000000

	)

46 
	#NGX_HTTP_LIF_CONF
 0x40000000

	)

47 
	#NGX_HTTP_LMT_CONF
 0x80000000

	)

50 
	#NGX_HTTP_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

51 
	#NGX_HTTP_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

52 
	#NGX_HTTP_LOC_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
loc_c⁄f
)

	)

55 
	#ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
moduÀ
) \

56 (
r
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

57 
	#ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
moduÀ
Ë‘)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

58 
	#ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
moduÀ
Ë‘)->
loc_c⁄f
[moduÀ.
˘x_ödex
]

	)

61 
	#ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

62 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

63 
	#ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

64 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

65 
	#ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
moduÀ
) \

66 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
loc_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

68 
	#ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
moduÀ
) \

69 (
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
] ? \

70 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
]) \

71 ->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]: \

72 
NULL
)

	)

	@src/http/ngx_http_copy_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_bufs_t
 
	mbufs
;

15 } 
	tngx_hâp_c›y_fûãr_c⁄f_t
;

18 #i‡(
NGX_HAVE_FILE_AIO
)

19 
ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

20 
ngx_fûe_t
 *
fûe
);

21 
ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

22 #i‡(
NGX_HAVE_AIO_SENDFILE
)

23 
ssize_t
 
ngx_hâp_c›y_aio_£ndfûe_¥ñﬂd
(
ngx_buf_t
 *
fûe
);

24 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

27 #i‡(
NGX_THREADS
)

28 
ngx_öt_t
 
ngx_hâp_c›y_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
,

29 
ngx_fûe_t
 *
fûe
);

30 
ngx_hâp_c›y_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

33 *
ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

34 *
ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

35 *
∑ª¡
, *
chûd
);

36 
ngx_öt_t
 
ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

39 
ngx_comm™d_t
 
	gngx_hâp_c›y_fûãr_comm™ds
[] = {

41 { 
ngx_°rög
("output_buffers"),

42 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

43 
ngx_c⁄f_£t_bufs_¶Ÿ
,

44 
NGX_HTTP_LOC_CONF_OFFSET
,

45 
off£tof
(
ngx_hâp_c›y_fûãr_c⁄f_t
, 
bufs
),

46 
NULL
 },

48 
ngx_nuŒ_comm™d


52 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ_˘x
 = {

53 
NULL
,

54 
ngx_hâp_c›y_fûãr_öô
,

56 
NULL
,

57 
NULL
,

59 
NULL
,

60 
NULL
,

62 
ngx_hâp_c›y_fûãr_¸óã_c⁄f
,

63 
ngx_hâp_c›y_fûãr_mîge_c⁄f


67 
ngx_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ
 = {

68 
NGX_MODULE_V1
,

69 &
ngx_hâp_c›y_fûãr_moduÀ_˘x
,

70 
ngx_hâp_c›y_fûãr_comm™ds
,

71 
NGX_HTTP_MODULE
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NGX_MODULE_V1_PADDING


83 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

86 
ngx_öt_t


87 
	$ngx_hâp_c›y_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

89 
ngx_öt_t
 
rc
;

90 
ngx_c⁄√˘i⁄_t
 *
c
;

91 
ngx_ouçut_chaö_˘x_t
 *
˘x
;

92 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

93 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

95 
c
 = 
r
->
c⁄√˘i⁄
;

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

98 "hâ∞c›y fûãr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

100 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

102 i‡(
˘x
 =
NULL
) {

103 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ouçut_chaö_˘x_t
));

104 i‡(
˘x
 =
NULL
) {

105  
NGX_ERROR
;

108 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_c›y_fûãr_moduÀ
);

110 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

111 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

113 
˘x
->
£ndfûe
 = 
c
->sendfile;

114 
˘x
->
√ed_ö_mem‹y
 = 
r
->
maö_fûãr_√ed_ö_mem‹y


115 || 
r
->
fûãr_√ed_ö_mem‹y
;

116 
˘x
->
√ed_ö_ãmp
 = 
r
->
fûãr_√ed_ãmp‹¨y
;

118 
˘x
->
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

120 
˘x
->
poﬁ
 = 
r
->pool;

121 
˘x
->
bufs
 = 
c⁄f
->bufs;

122 
˘x
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_c›y_fûãr_moduÀ
;

124 
˘x
->
ouçut_fûãr
 = (
ngx_ouçut_chaö_fûãr_±
)

125 
ngx_hâp_√xt_body_fûãr
;

126 
˘x
->
fûãr_˘x
 = 
r
;

128 #i‡(
NGX_HAVE_FILE_AIO
)

129 i‡(
ngx_fûe_aio
 && 
˛cf
->
aio
 =
NGX_HTTP_AIO_ON
) {

130 
˘x
->
aio_h™dÀr
 = 
ngx_hâp_c›y_aio_h™dÀr
;

131 #i‡(
NGX_HAVE_AIO_SENDFILE
)

132 
˘x
->
aio_¥ñﬂd
 = 
ngx_hâp_c›y_aio_£ndfûe_¥ñﬂd
;

137 #i‡(
NGX_THREADS
)

138 i‡(
˛cf
->
aio
 =
NGX_HTTP_AIO_THREADS
) {

139 
˘x
->
thªad_h™dÀr
 = 
ngx_hâp_c›y_thªad_h™dÀr
;

143 i‡(
ö
 && in->
buf
 && 
	`ngx_buf_size
(in->buf)) {

144 
r
->
ªque°_ouçut
 = 1;

148 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

149 
˘x
->
aio
 = 
r
->aio;

152 
rc
 = 
	`ngx_ouçut_chaö
(
˘x
, 
ö
);

154 i‡(
˘x
->
ö
 =
NULL
) {

155 
r
->
buf„ªd
 &~
NGX_HTTP_COPY_BUFFERED
;

158 
r
->
buf„ªd
 |
NGX_HTTP_COPY_BUFFERED
;

161 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

162 "hâ∞c›y fûãr: %ò\"%V?%V\"", 
rc
, &
r
->
uri
, &r->
¨gs
);

164  
rc
;

165 
	}
}

168 #i‡(
NGX_HAVE_FILE_AIO
)

171 
	$ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_fûe_t
 *
fûe
)

173 
ngx_hâp_ªque°_t
 *
r
;

175 
r
 = 
˘x
->
fûãr_˘x
;

177 
fûe
->
aio
->
d©a
 = 
r
;

178 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_evít_h™dÀr
;

180 
r
->
maö
->
blocked
++;

181 
r
->
aio
 = 1;

182 
˘x
->
aio
 = 1;

183 
	}
}

187 
	$ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

189 
ngx_evít_aio_t
 *
aio
;

190 
ngx_hâp_ªque°_t
 *
r
;

192 
aio
 = 
ev
->
d©a
;

193 
r
 = 
aio
->
d©a
;

195 
r
->
maö
->
blocked
--;

196 
r
->
aio
 = 0;

198 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

199 
	}
}

202 #i‡(
NGX_HAVE_AIO_SENDFILE
)

204 
ssize_t


205 
	$ngx_hâp_c›y_aio_£ndfûe_¥ñﬂd
(
ngx_buf_t
 *
fûe
)

207 
ssize_t
 
n
;

208 
u_ch¨
 
buf
[1];

209 
ngx_evít_aio_t
 *
aio
;

210 
ngx_hâp_ªque°_t
 *
r
;

212 
n
 = 
	`ngx_fûe_aio_ªad
(
fûe
->fûe, 
buf
, 1, fûe->
fûe_pos
, 
NULL
);

214 i‡(
n
 =
NGX_AGAIN
) {

215 
aio
 = 
fûe
->file->aio;

216 
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
;

218 
r
 = 
aio
->
d©a
;

219 
r
->
maö
->
blocked
++;

220 
r
->
aio
 = 1;

223  
n
;

224 
	}
}

228 
	$ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

230 
ngx_evít_aio_t
 *
aio
;

231 
ngx_hâp_ªque°_t
 *
r
;

233 
aio
 = 
ev
->
d©a
;

234 
r
 = 
aio
->
d©a
;

236 
r
->
maö
->
blocked
--;

237 
r
->
aio
 = 0;

238 
ev
->
com∂ëe
 = 0;

240 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

241 
	}
}

247 #i‡(
NGX_THREADS
)

249 
ngx_öt_t


250 
	$ngx_hâp_c›y_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
, 
ngx_fûe_t
 *
fûe
)

252 
ngx_°r_t
 
«me
;

253 
ngx_thªad_poﬁ_t
 *
ç
;

254 
ngx_hâp_ªque°_t
 *
r
;

255 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

257 
r
 = 
fûe
->
thªad_˘x
;

259 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

260 
ç
 = 
˛cf
->
thªad_poﬁ
;

262 i‡(
ç
 =
NULL
) {

263 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
thªad_poﬁ_vÆue
, &
«me
)

264 !
NGX_OK
)

266  
NGX_ERROR
;

269 
ç
 = 
	`ngx_thªad_poﬁ_gë
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
«me
);

271 i‡(
ç
 =
NULL
) {

272 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

273 "thªadÖoﬁ \"%V\"ÇŸ found", &
«me
);

274  
NGX_ERROR
;

278 
èsk
->
evít
.
d©a
 = 
r
;

279 
èsk
->
evít
.
h™dÀr
 = 
ngx_hâp_c›y_thªad_evít_h™dÀr
;

281 i‡(
	`ngx_thªad_èsk_po°
(
ç
, 
èsk
Ë!
NGX_OK
) {

282  
NGX_ERROR
;

285 
r
->
maö
->
blocked
++;

286 
r
->
aio
 = 1;

288  
NGX_OK
;

289 
	}
}

293 
	$ngx_hâp_c›y_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

295 
ngx_hâp_ªque°_t
 *
r
;

297 
r
 = 
ev
->
d©a
;

299 
r
->
maö
->
blocked
--;

300 
r
->
aio
 = 0;

302 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

303 
	}
}

309 
	$ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

311 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

313 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_c›y_fûãr_c⁄f_t
));

314 i‡(
c⁄f
 =
NULL
) {

315  
NULL
;

318 
c⁄f
->
bufs
.
num
 = 0;

320  
c⁄f
;

321 
	}
}

325 
	$ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

327 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

328 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

330 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs, 1, 32768);

332  
NULL
;

333 
	}
}

336 
ngx_öt_t


337 
	$ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

339 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

340 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_c›y_fûãr
;

342  
NGX_OK
;

343 
	}
}

	@src/http/ngx_http_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 *
	m«me
;

15 
uöt32_t
 
	mmëhod
;

16 } 
	tngx_hâp_mëhod_«me_t
;

19 
	#NGX_HTTP_REQUEST_BODY_FILE_OFF
 0

	)

20 
	#NGX_HTTP_REQUEST_BODY_FILE_ON
 1

	)

21 
	#NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 2

	)

24 
ngx_öt_t
 
ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_öt_t
 
ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
);

28 
ngx_öt_t
 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

29 
ngx_öt_t
 
ngx_hâp_c‹e_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

30 *
ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 *
ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

32 *
ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

33 *
ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

34 *
∑ª¡
, *
chûd
);

35 *
ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

39 *
ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

40 *
dummy
);

41 *
ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

42 *
dummy
);

43 
ngx_öt_t
 
ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
,

44 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

46 *
ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

47 *
c⁄f
);

48 *
ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

49 *
c⁄f
);

51 *
ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

52 *
c⁄f
);

53 *
ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

54 *
c⁄f
);

55 *
ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

57 *
c⁄f
);

58 *
ngx_hâp_c‹e_£t_aio
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

59 *
c⁄f
);

60 *
ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

61 *
c⁄f
);

62 *
ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

65 *
c⁄f
);

66 *
ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

67 *
c⁄f
);

68 *
ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

69 *
c⁄f
);

70 *
ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

71 *
c⁄f
);

72 *
ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 *
ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

76 #i‡(
NGX_HTTP_GZIP
)

77 
ngx_öt_t
 
ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
);

78 
ngx_uöt_t
 
ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
);

79 *
ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

80 *
c⁄f
);

82 
ngx_öt_t
 
ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
,

84 
ªcursive
);

85 #i‡(
NGX_HAVE_OPENAT
)

86 *
ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

87 *
c⁄f
);

90 *
ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

91 *
ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

93 
ngx_c⁄f_po°_t
 
	gngx_hâp_c‹e_low©_po°
 =

94 { 
ngx_hâp_c‹e_low©_check
 };

96 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_c‹e_poﬁ_size_p
 =

97 
ngx_hâp_c‹e_poﬁ_size
;

99 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 = {

100 
ngx_c⁄f_dïªˇãd
, "optimize_server_names", "server_name_in_redirect"

103 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 = {

104 
ngx_c⁄f_dïªˇãd
, "open_file_cache_retest", "open_file_cache_valid"

107 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_ßtisfy_™y
 = {

108 
ngx_c⁄f_dïªˇãd
, "satisfy_any", "satisfy"

112 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ªque°_body_ö_fûe
[] = {

113 { 
ngx_°rög
("off"), 
NGX_HTTP_REQUEST_BODY_FILE_OFF
 },

114 { 
ngx_°rög
("⁄"), 
NGX_HTTP_REQUEST_BODY_FILE_ON
 },

115 { 
ngx_°rög
("˛ón"), 
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 },

116 { 
ngx_nuŒ_°rög
, 0 }

120 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ßtisfy
[] = {

121 { 
ngx_°rög
("Æl"), 
NGX_HTTP_SATISFY_ALL
 },

122 { 
ngx_°rög
("™y"), 
NGX_HTTP_SATISFY_ANY
 },

123 { 
ngx_nuŒ_°rög
, 0 }

127 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_lögîög_˛o£
[] = {

128 { 
ngx_°rög
("off"), 
NGX_HTTP_LINGERING_OFF
 },

129 { 
ngx_°rög
("⁄"), 
NGX_HTTP_LINGERING_ON
 },

130 { 
ngx_°rög
("Æways"), 
NGX_HTTP_LINGERING_ALWAYS
 },

131 { 
ngx_nuŒ_°rög
, 0 }

135 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_if_modifõd_sö˚
[] = {

136 { 
ngx_°rög
("off"), 
NGX_HTTP_IMS_OFF
 },

137 { 
ngx_°rög
("exa˘"), 
NGX_HTTP_IMS_EXACT
 },

138 { 
ngx_°rög
("bef‹e"), 
NGX_HTTP_IMS_BEFORE
 },

139 { 
ngx_nuŒ_°rög
, 0 }

143 
ngx_c⁄f_bômask_t
 
	gngx_hâp_c‹e_kì∑live_dißbÀ
[] = {

144 { 
ngx_°rög
("n⁄e"), 
NGX_HTTP_KEEPALIVE_DISABLE_NONE
 },

145 { 
ngx_°rög
("msõ6"), 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 },

146 { 
ngx_°rög
("ßÁri"), 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 },

147 { 
ngx_nuŒ_°rög
, 0 }

151 
ngx_∑th_öô_t
 
	gngx_hâp_˛õ¡_ãmp_∑th
 = {

152 
ngx_°rög
(
NGX_HTTP_CLIENT_TEMP_PATH
), { 0, 0, 0 }

156 #i‡(
NGX_HTTP_GZIP
)

158 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_hâp_vîsi⁄
[] = {

159 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

160 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

161 { 
ngx_nuŒ_°rög
, 0 }

165 
ngx_c⁄f_bômask_t
 
	gngx_hâp_gzù_¥oxõd_mask
[] = {

166 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_PROXIED_OFF
 },

167 { 
ngx_°rög
("expúed"), 
NGX_HTTP_GZIP_PROXIED_EXPIRED
 },

168 { 
ngx_°rög
("no-ˇche"), 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
 },

169 { 
ngx_°rög
("no-°‹e"), 
NGX_HTTP_GZIP_PROXIED_NO_STORE
 },

170 { 
ngx_°rög
("¥iv©e"), 
NGX_HTTP_GZIP_PROXIED_PRIVATE
 },

171 { 
ngx_°rög
("no_œ°_modifõd"), 
NGX_HTTP_GZIP_PROXIED_NO_LM
 },

172 { 
ngx_°rög
("no_ëag"), 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
 },

173 { 
ngx_°rög
("auth"), 
NGX_HTTP_GZIP_PROXIED_AUTH
 },

174 { 
ngx_°rög
("™y"), 
NGX_HTTP_GZIP_PROXIED_ANY
 },

175 { 
ngx_nuŒ_°rög
, 0 }

179 
ngx_°r_t
 
	gngx_hâp_gzù_no_ˇche
 = 
ngx_°rög
("no-cache");

180 
ngx_°r_t
 
	gngx_hâp_gzù_no_°‹e
 = 
ngx_°rög
("no-store");

181 
ngx_°r_t
 
	gngx_hâp_gzù_¥iv©e
 = 
ngx_°rög
("private");

186 
ngx_comm™d_t
 
	gngx_hâp_c‹e_comm™ds
[] = {

188 { 
ngx_°rög
("variables_hash_max_size"),

189 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

190 
ngx_c⁄f_£t_num_¶Ÿ
,

191 
NGX_HTTP_MAIN_CONF_OFFSET
,

192 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_max_size
),

193 
NULL
 },

195 { 
ngx_°rög
("variables_hash_bucket_size"),

196 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

197 
ngx_c⁄f_£t_num_¶Ÿ
,

198 
NGX_HTTP_MAIN_CONF_OFFSET
,

199 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_buckë_size
),

200 
NULL
 },

202 { 
ngx_°rög
("server_names_hash_max_size"),

203 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

204 
ngx_c⁄f_£t_num_¶Ÿ
,

205 
NGX_HTTP_MAIN_CONF_OFFSET
,

206 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_max_size
),

207 
NULL
 },

209 { 
ngx_°rög
("server_names_hash_bucket_size"),

210 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

211 
ngx_c⁄f_£t_num_¶Ÿ
,

212 
NGX_HTTP_MAIN_CONF_OFFSET
,

213 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_buckë_size
),

214 
NULL
 },

216 { 
ngx_°rög
("server"),

217 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

218 
ngx_hâp_c‹e_£rvî
,

221 
NULL
 },

223 { 
ngx_°rög
("connection_pool_size"),

224 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

225 
ngx_c⁄f_£t_size_¶Ÿ
,

226 
NGX_HTTP_SRV_CONF_OFFSET
,

227 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
c⁄√˘i⁄_poﬁ_size
),

228 &
ngx_hâp_c‹e_poﬁ_size_p
 },

230 { 
ngx_°rög
("request_pool_size"),

231 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

232 
ngx_c⁄f_£t_size_¶Ÿ
,

233 
NGX_HTTP_SRV_CONF_OFFSET
,

234 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ªque°_poﬁ_size
),

235 &
ngx_hâp_c‹e_poﬁ_size_p
 },

237 { 
ngx_°rög
("client_header_timeout"),

238 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

239 
ngx_c⁄f_£t_m£c_¶Ÿ
,

240 
NGX_HTTP_SRV_CONF_OFFSET
,

241 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_timeout
),

242 
NULL
 },

244 { 
ngx_°rög
("client_header_buffer_size"),

245 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

246 
ngx_c⁄f_£t_size_¶Ÿ
,

247 
NGX_HTTP_SRV_CONF_OFFSET
,

248 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_buf„r_size
),

249 
NULL
 },

251 { 
ngx_°rög
("large_client_header_buffers"),

252 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE2
,

253 
ngx_c⁄f_£t_bufs_¶Ÿ
,

254 
NGX_HTTP_SRV_CONF_OFFSET
,

255 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
œrge_˛õ¡_hódî_buf„rs
),

256 
NULL
 },

258 { 
ngx_°rög
("optimize_server_names"),

259 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

260 
ngx_c⁄f_£t_Êag_¶Ÿ
,

261 
NGX_HTTP_LOC_CONF_OFFSET
,

262 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

263 &
ngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 },

265 { 
ngx_°rög
("ignore_invalid_headers"),

266 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

267 
ngx_c⁄f_£t_Êag_¶Ÿ
,

268 
NGX_HTTP_SRV_CONF_OFFSET
,

269 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ign‹e_övÆid_hódîs
),

270 
NULL
 },

272 { 
ngx_°rög
("merge_slashes"),

273 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

274 
ngx_c⁄f_£t_Êag_¶Ÿ
,

275 
NGX_HTTP_SRV_CONF_OFFSET
,

276 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
mîge_¶ashes
),

277 
NULL
 },

279 { 
ngx_°rög
("underscores_in_headers"),

280 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

281 
ngx_c⁄f_£t_Êag_¶Ÿ
,

282 
NGX_HTTP_SRV_CONF_OFFSET
,

283 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
undîsc‹es_ö_hódîs
),

284 
NULL
 },

286 { 
ngx_°rög
("location"),

287 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

288 
ngx_hâp_c‹e_loˇti⁄
,

289 
NGX_HTTP_SRV_CONF_OFFSET
,

291 
NULL
 },

293 { 
ngx_°rög
("listen"),

294 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

295 
ngx_hâp_c‹e_li°í
,

296 
NGX_HTTP_SRV_CONF_OFFSET
,

298 
NULL
 },

300 { 
ngx_°rög
("server_name"),

301 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

302 
ngx_hâp_c‹e_£rvî_«me
,

303 
NGX_HTTP_SRV_CONF_OFFSET
,

305 
NULL
 },

307 { 
ngx_°rög
("types_hash_max_size"),

308 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

309 
ngx_c⁄f_£t_num_¶Ÿ
,

310 
NGX_HTTP_LOC_CONF_OFFSET
,

311 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_max_size
),

312 
NULL
 },

314 { 
ngx_°rög
("types_hash_bucket_size"),

315 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

316 
ngx_c⁄f_£t_num_¶Ÿ
,

317 
NGX_HTTP_LOC_CONF_OFFSET
,

318 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_buckë_size
),

319 
NULL
 },

321 { 
ngx_°rög
("types"),

322 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


323 |
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

324 
ngx_hâp_c‹e_ty≥s
,

325 
NGX_HTTP_LOC_CONF_OFFSET
,

327 
NULL
 },

329 { 
ngx_°rög
("default_type"),

330 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

331 
ngx_c⁄f_£t_°r_¶Ÿ
,

332 
NGX_HTTP_LOC_CONF_OFFSET
,

333 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
deÁu…_ty≥
),

334 
NULL
 },

336 { 
ngx_°rög
("root"),

337 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


338 |
NGX_CONF_TAKE1
,

339 
ngx_hâp_c‹e_roŸ
,

340 
NGX_HTTP_LOC_CONF_OFFSET
,

342 
NULL
 },

344 { 
ngx_°rög
("alias"),

345 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

346 
ngx_hâp_c‹e_roŸ
,

347 
NGX_HTTP_LOC_CONF_OFFSET
,

349 
NULL
 },

351 { 
ngx_°rög
("limit_except"),

352 
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

353 
ngx_hâp_c‹e_limô_ex˚±
,

354 
NGX_HTTP_LOC_CONF_OFFSET
,

356 
NULL
 },

358 { 
ngx_°rög
("client_max_body_size"),

359 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

360 
ngx_c⁄f_£t_off_¶Ÿ
,

361 
NGX_HTTP_LOC_CONF_OFFSET
,

362 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_max_body_size
),

363 
NULL
 },

365 { 
ngx_°rög
("client_body_buffer_size"),

366 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

367 
ngx_c⁄f_£t_size_¶Ÿ
,

368 
NGX_HTTP_LOC_CONF_OFFSET
,

369 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_buf„r_size
),

370 
NULL
 },

372 { 
ngx_°rög
("client_body_timeout"),

373 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

374 
ngx_c⁄f_£t_m£c_¶Ÿ
,

375 
NGX_HTTP_LOC_CONF_OFFSET
,

376 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_timeout
),

377 
NULL
 },

379 { 
ngx_°rög
("client_body_temp_path"),

380 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

381 
ngx_c⁄f_£t_∑th_¶Ÿ
,

382 
NGX_HTTP_LOC_CONF_OFFSET
,

383 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ãmp_∑th
),

384 
NULL
 },

386 { 
ngx_°rög
("client_body_in_file_only"),

387 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

388 
ngx_c⁄f_£t_íum_¶Ÿ
,

389 
NGX_HTTP_LOC_CONF_OFFSET
,

390 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_fûe_⁄ly
),

391 &
ngx_hâp_c‹e_ªque°_body_ö_fûe
 },

393 { 
ngx_°rög
("client_body_in_single_buffer"),

394 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

395 
ngx_c⁄f_£t_Êag_¶Ÿ
,

396 
NGX_HTTP_LOC_CONF_OFFSET
,

397 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_sögÀ_buf„r
),

398 
NULL
 },

400 { 
ngx_°rög
("sendfile"),

401 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


402 |
NGX_CONF_FLAG
,

403 
ngx_c⁄f_£t_Êag_¶Ÿ
,

404 
NGX_HTTP_LOC_CONF_OFFSET
,

405 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe
),

406 
NULL
 },

408 { 
ngx_°rög
("sendfile_max_chunk"),

409 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

410 
ngx_c⁄f_£t_size_¶Ÿ
,

411 
NGX_HTTP_LOC_CONF_OFFSET
,

412 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe_max_chunk
),

413 
NULL
 },

415 { 
ngx_°rög
("aio"),

416 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

417 
ngx_hâp_c‹e_£t_aio
,

418 
NGX_HTTP_LOC_CONF_OFFSET
,

420 
NULL
 },

422 { 
ngx_°rög
("read_ahead"),

423 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

424 
ngx_c⁄f_£t_size_¶Ÿ
,

425 
NGX_HTTP_LOC_CONF_OFFSET
,

426 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªad_ahód
),

427 
NULL
 },

429 { 
ngx_°rög
("directio"),

430 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

431 
ngx_hâp_c‹e_dúe˘io
,

432 
NGX_HTTP_LOC_CONF_OFFSET
,

434 
NULL
 },

436 { 
ngx_°rög
("directio_alignment"),

437 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

438 
ngx_c⁄f_£t_off_¶Ÿ
,

439 
NGX_HTTP_LOC_CONF_OFFSET
,

440 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
dúe˘io_Æignmít
),

441 
NULL
 },

443 { 
ngx_°rög
("tcp_nopush"),

444 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

445 
ngx_c⁄f_£t_Êag_¶Ÿ
,

446 
NGX_HTTP_LOC_CONF_OFFSET
,

447 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_n›ush
),

448 
NULL
 },

450 { 
ngx_°rög
("tcp_nodelay"),

451 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

452 
ngx_c⁄f_£t_Êag_¶Ÿ
,

453 
NGX_HTTP_LOC_CONF_OFFSET
,

454 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_nodñay
),

455 
NULL
 },

457 { 
ngx_°rög
("send_timeout"),

458 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

459 
ngx_c⁄f_£t_m£c_¶Ÿ
,

460 
NGX_HTTP_LOC_CONF_OFFSET
,

461 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_timeout
),

462 
NULL
 },

464 { 
ngx_°rög
("send_lowat"),

465 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

466 
ngx_c⁄f_£t_size_¶Ÿ
,

467 
NGX_HTTP_LOC_CONF_OFFSET
,

468 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_low©
),

469 &
ngx_hâp_c‹e_low©_po°
 },

471 { 
ngx_°rög
("postpone_output"),

472 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

473 
ngx_c⁄f_£t_size_¶Ÿ
,

474 
NGX_HTTP_LOC_CONF_OFFSET
,

475 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°p⁄e_ouçut
),

476 
NULL
 },

478 { 
ngx_°rög
("limit_rate"),

479 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


480 |
NGX_CONF_TAKE1
,

481 
ngx_c⁄f_£t_size_¶Ÿ
,

482 
NGX_HTTP_LOC_CONF_OFFSET
,

483 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã
),

484 
NULL
 },

486 { 
ngx_°rög
("limit_rate_after"),

487 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


488 |
NGX_CONF_TAKE1
,

489 
ngx_c⁄f_£t_size_¶Ÿ
,

490 
NGX_HTTP_LOC_CONF_OFFSET
,

491 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã_a·î
),

492 
NULL
 },

494 { 
ngx_°rög
("keepalive_timeout"),

495 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

496 
ngx_hâp_c‹e_kì∑live
,

497 
NGX_HTTP_LOC_CONF_OFFSET
,

499 
NULL
 },

501 { 
ngx_°rög
("keepalive_requests"),

502 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

503 
ngx_c⁄f_£t_num_¶Ÿ
,

504 
NGX_HTTP_LOC_CONF_OFFSET
,

505 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_ªque°s
),

506 
NULL
 },

508 { 
ngx_°rög
("keepalive_disable"),

509 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

510 
ngx_c⁄f_£t_bômask_¶Ÿ
,

511 
NGX_HTTP_LOC_CONF_OFFSET
,

512 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_dißbÀ
),

513 &
ngx_hâp_c‹e_kì∑live_dißbÀ
 },

515 { 
ngx_°rög
("satisfy"),

516 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

517 
ngx_c⁄f_£t_íum_¶Ÿ
,

518 
NGX_HTTP_LOC_CONF_OFFSET
,

519 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

520 &
ngx_hâp_c‹e_ßtisfy
 },

522 { 
ngx_°rög
("satisfy_any"),

523 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

524 
ngx_c⁄f_£t_Êag_¶Ÿ
,

525 
NGX_HTTP_LOC_CONF_OFFSET
,

526 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

527 &
ngx_c⁄f_dïªˇãd_ßtisfy_™y
 },

529 { 
ngx_°rög
("internal"),

530 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

531 
ngx_hâp_c‹e_öã∫Æ
,

532 
NGX_HTTP_LOC_CONF_OFFSET
,

534 
NULL
 },

536 { 
ngx_°rög
("lingering_close"),

537 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

538 
ngx_c⁄f_£t_íum_¶Ÿ
,

539 
NGX_HTTP_LOC_CONF_OFFSET
,

540 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_˛o£
),

541 &
ngx_hâp_c‹e_lögîög_˛o£
 },

543 { 
ngx_°rög
("lingering_time"),

544 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

545 
ngx_c⁄f_£t_m£c_¶Ÿ
,

546 
NGX_HTTP_LOC_CONF_OFFSET
,

547 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_time
),

548 
NULL
 },

550 { 
ngx_°rög
("lingering_timeout"),

551 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

552 
ngx_c⁄f_£t_m£c_¶Ÿ
,

553 
NGX_HTTP_LOC_CONF_OFFSET
,

554 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_timeout
),

555 
NULL
 },

557 { 
ngx_°rög
("reset_timedout_connection"),

558 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

559 
ngx_c⁄f_£t_Êag_¶Ÿ
,

560 
NGX_HTTP_LOC_CONF_OFFSET
,

561 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ª£t_timedout_c⁄√˘i⁄
),

562 
NULL
 },

564 { 
ngx_°rög
("server_name_in_redirect"),

565 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

566 
ngx_c⁄f_£t_Êag_¶Ÿ
,

567 
NGX_HTTP_LOC_CONF_OFFSET
,

568 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

569 
NULL
 },

571 { 
ngx_°rög
("port_in_redirect"),

572 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

573 
ngx_c⁄f_£t_Êag_¶Ÿ
,

574 
NGX_HTTP_LOC_CONF_OFFSET
,

575 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
p‹t_ö_ªdúe˘
),

576 
NULL
 },

578 { 
ngx_°rög
("msie_padding"),

579 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

580 
ngx_c⁄f_£t_Êag_¶Ÿ
,

581 
NGX_HTTP_LOC_CONF_OFFSET
,

582 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_∑ddög
),

583 
NULL
 },

585 { 
ngx_°rög
("msie_refresh"),

586 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

587 
ngx_c⁄f_£t_Êag_¶Ÿ
,

588 
NGX_HTTP_LOC_CONF_OFFSET
,

589 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_ª‰esh
),

590 
NULL
 },

592 { 
ngx_°rög
("log_not_found"),

593 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

594 
ngx_c⁄f_£t_Êag_¶Ÿ
,

595 
NGX_HTTP_LOC_CONF_OFFSET
,

596 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_nŸ_found
),

597 
NULL
 },

599 { 
ngx_°rög
("log_subrequest"),

600 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

601 
ngx_c⁄f_£t_Êag_¶Ÿ
,

602 
NGX_HTTP_LOC_CONF_OFFSET
,

603 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_subªque°
),

604 
NULL
 },

606 { 
ngx_°rög
("recursive_error_pages"),

607 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

608 
ngx_c⁄f_£t_Êag_¶Ÿ
,

609 
NGX_HTTP_LOC_CONF_OFFSET
,

610 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªcursive_îr‹_∑ges
),

611 
NULL
 },

613 { 
ngx_°rög
("server_tokens"),

614 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

615 
ngx_c⁄f_£t_Êag_¶Ÿ
,

616 
NGX_HTTP_LOC_CONF_OFFSET
,

617 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_tokís
),

618 
NULL
 },

620 { 
ngx_°rög
("if_modified_since"),

621 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

622 
ngx_c⁄f_£t_íum_¶Ÿ
,

623 
NGX_HTTP_LOC_CONF_OFFSET
,

624 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
if_modifõd_sö˚
),

625 &
ngx_hâp_c‹e_if_modifõd_sö˚
 },

627 { 
ngx_°rög
("max_ranges"),

628 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

629 
ngx_c⁄f_£t_num_¶Ÿ
,

630 
NGX_HTTP_LOC_CONF_OFFSET
,

631 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
max_ønges
),

632 
NULL
 },

634 { 
ngx_°rög
("chunked_transfer_encoding"),

635 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

636 
ngx_c⁄f_£t_Êag_¶Ÿ
,

637 
NGX_HTTP_LOC_CONF_OFFSET
,

638 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
chunked_å™s„r_ícodög
),

639 
NULL
 },

641 { 
ngx_°rög
("etag"),

642 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

643 
ngx_c⁄f_£t_Êag_¶Ÿ
,

644 
NGX_HTTP_LOC_CONF_OFFSET
,

645 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ëag
),

646 
NULL
 },

648 { 
ngx_°rög
("error_page"),

649 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


650 |
NGX_CONF_2MORE
,

651 
ngx_hâp_c‹e_îr‹_∑ge
,

652 
NGX_HTTP_LOC_CONF_OFFSET
,

654 
NULL
 },

656 { 
ngx_°rög
("try_files"),

657 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

658 
ngx_hâp_c‹e_åy_fûes
,

659 
NGX_HTTP_LOC_CONF_OFFSET
,

661 
NULL
 },

663 { 
ngx_°rög
("post_action"),

664 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


665 |
NGX_CONF_TAKE1
,

666 
ngx_c⁄f_£t_°r_¶Ÿ
,

667 
NGX_HTTP_LOC_CONF_OFFSET
,

668 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°_a˘i⁄
),

669 
NULL
 },

671 { 
ngx_°rög
("error_log"),

672 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

673 
ngx_hâp_c‹e_îr‹_log
,

674 
NGX_HTTP_LOC_CONF_OFFSET
,

676 
NULL
 },

678 { 
ngx_°rög
("open_file_cache"),

679 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

680 
ngx_hâp_c‹e_›í_fûe_ˇche
,

681 
NGX_HTTP_LOC_CONF_OFFSET
,

682 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche
),

683 
NULL
 },

685 { 
ngx_°rög
("open_file_cache_valid"),

686 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

687 
ngx_c⁄f_£t_£c_¶Ÿ
,

688 
NGX_HTTP_LOC_CONF_OFFSET
,

689 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

690 
NULL
 },

692 { 
ngx_°rög
("open_file_cache_retest"),

693 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

694 
ngx_c⁄f_£t_£c_¶Ÿ
,

695 
NGX_HTTP_LOC_CONF_OFFSET
,

696 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

697 &
ngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 },

699 { 
ngx_°rög
("open_file_cache_min_uses"),

700 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

701 
ngx_c⁄f_£t_num_¶Ÿ
,

702 
NGX_HTTP_LOC_CONF_OFFSET
,

703 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_mö_u£s
),

704 
NULL
 },

706 { 
ngx_°rög
("open_file_cache_errors"),

707 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

708 
ngx_c⁄f_£t_Êag_¶Ÿ
,

709 
NGX_HTTP_LOC_CONF_OFFSET
,

710 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_îr‹s
),

711 
NULL
 },

713 { 
ngx_°rög
("open_file_cache_events"),

714 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

715 
ngx_c⁄f_£t_Êag_¶Ÿ
,

716 
NGX_HTTP_LOC_CONF_OFFSET
,

717 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_evíts
),

718 
NULL
 },

720 { 
ngx_°rög
("resolver"),

721 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

722 
ngx_hâp_c‹e_ªsﬁvî
,

723 
NGX_HTTP_LOC_CONF_OFFSET
,

725 
NULL
 },

727 { 
ngx_°rög
("resolver_timeout"),

728 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

729 
ngx_c⁄f_£t_m£c_¶Ÿ
,

730 
NGX_HTTP_LOC_CONF_OFFSET
,

731 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªsﬁvî_timeout
),

732 
NULL
 },

734 #i‡(
NGX_HTTP_GZIP
)

736 { 
ngx_°rög
("gzip_vary"),

737 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

738 
ngx_c⁄f_£t_Êag_¶Ÿ
,

739 
NGX_HTTP_LOC_CONF_OFFSET
,

740 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_v¨y
),

741 
NULL
 },

743 { 
ngx_°rög
("gzip_http_version"),

744 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

745 
ngx_c⁄f_£t_íum_¶Ÿ
,

746 
NGX_HTTP_LOC_CONF_OFFSET
,

747 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_hâp_vîsi⁄
),

748 &
ngx_hâp_gzù_hâp_vîsi⁄
 },

750 { 
ngx_°rög
("gzip_proxied"),

751 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

752 
ngx_c⁄f_£t_bômask_¶Ÿ
,

753 
NGX_HTTP_LOC_CONF_OFFSET
,

754 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_¥oxõd
),

755 &
ngx_hâp_gzù_¥oxõd_mask
 },

757 { 
ngx_°rög
("gzip_disable"),

758 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

759 
ngx_hâp_gzù_dißbÀ
,

760 
NGX_HTTP_LOC_CONF_OFFSET
,

762 
NULL
 },

766 #i‡(
NGX_HAVE_OPENAT
)

768 { 
ngx_°rög
("disable_symlinks"),

769 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

770 
ngx_hâp_dißbÀ_symlöks
,

771 
NGX_HTTP_LOC_CONF_OFFSET
,

773 
NULL
 },

777 
ngx_nuŒ_comm™d


781 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ_˘x
 = {

782 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
,

783 
ngx_hâp_c‹e_po°c⁄figuøti⁄
,

785 
ngx_hâp_c‹e_¸óã_maö_c⁄f
,

786 
ngx_hâp_c‹e_öô_maö_c⁄f
,

788 
ngx_hâp_c‹e_¸óã_§v_c⁄f
,

789 
ngx_hâp_c‹e_mîge_§v_c⁄f
,

791 
ngx_hâp_c‹e_¸óã_loc_c⁄f
,

792 
ngx_hâp_c‹e_mîge_loc_c⁄f


796 
ngx_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ
 = {

797 
NGX_MODULE_V1
,

798 &
ngx_hâp_c‹e_moduÀ_˘x
,

799 
ngx_hâp_c‹e_comm™ds
,

800 
NGX_HTTP_MODULE
,

801 
NULL
,

802 
NULL
,

803 
NULL
,

804 
NULL
,

805 
NULL
,

806 
NULL
,

807 
NULL
,

808 
NGX_MODULE_V1_PADDING


812 
ngx_°r_t
 
	gngx_hâp_c‹e_gë_mëhod
 = { 3, (
u_ch¨
 *) "GET " };

816 
	$ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

818 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

820 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = 
NULL
;

822 
r
->
c⁄√˘i⁄
->
u√x≥˘ed_eof
 = 0;

824 i‡(!
r
->
öã∫Æ
) {

825 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
) {

827 
r
->
kì∑live
 = (r->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
);

830 
NGX_HTTP_CONNECTION_CLOSE
:

831 
r
->
kì∑live
 = 0;

834 
NGX_HTTP_CONNECTION_KEEP_ALIVE
:

835 
r
->
kì∑live
 = 1;

839 
r
->
lögîög_˛o£
 = (r->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0

840 || 
r
->
hódîs_ö
.
chunked
);

841 
r
->
pha£_h™dÀr
 = 0;

844 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

845 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
;

848 
r
->
vÆid_loˇti⁄
 = 1;

849 #i‡(
NGX_HTTP_GZIP
)

850 
r
->
gzù_ã°ed
 = 0;

851 
r
->
gzù_ok
 = 0;

852 
r
->
gzù_v¨y
 = 0;

855 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

856 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

857 
	}
}

861 
	$ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
)

863 
ngx_öt_t
 
rc
;

864 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

865 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

867 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

869 
ph
 = 
cmcf
->
pha£_ígöe
.
h™dÀrs
;

871 
ph
[
r
->
pha£_h™dÀr
].
checkî
) {

873 
rc
 = 
ph
[
r
->
pha£_h™dÀr
].
	`checkî
(r, &ph[r->phase_handler]);

875 i‡(
rc
 =
NGX_OK
) {

879 
	}
}

882 
ngx_öt_t


883 
	$ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

885 
ngx_öt_t
 
rc
;

892 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

893 "gíîi¯pha£: %ui", 
r
->
pha£_h™dÀr
);

895 
rc
 = 
ph
->
	`h™dÀr
(
r
);

897 i‡(
rc
 =
NGX_OK
) {

898 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

899  
NGX_AGAIN
;

902 i‡(
rc
 =
NGX_DECLINED
) {

903 
r
->
pha£_h™dÀr
++;

904  
NGX_AGAIN
;

907 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

908  
NGX_OK
;

913 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

915  
NGX_OK
;

916 
	}
}

919 
ngx_öt_t


920 
	$ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

922 
ngx_öt_t
 
rc
;

924 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

925 "ªwrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

927 
rc
 = 
ph
->
	`h™dÀr
(
r
);

929 i‡(
rc
 =
NGX_DECLINED
) {

930 
r
->
pha£_h™dÀr
++;

931  
NGX_AGAIN
;

934 i‡(
rc
 =
NGX_DONE
) {

935  
NGX_OK
;

940 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

942  
NGX_OK
;

943 
	}
}

946 
ngx_öt_t


947 
	$ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

948 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

950 
u_ch¨
 *
p
;

951 
size_t
 
Àn
;

952 
ngx_öt_t
 
rc
;

953 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

955 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

956 
r
->
uri_ch™ged
 = 0;

958 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

960 i‡(
rc
 =
NGX_ERROR
) {

961 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

962  
NGX_OK
;

965 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

967 i‡(!
r
->
öã∫Æ
 && 
˛cf
->internal) {

968 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

969  
NGX_OK
;

972 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

974 (
˛cf
->
n⁄ame
 ? "*" : (˛cf->
exa˘_m©ch
 ? "=" : "")),

975 &
˛cf
->
«me
);

977 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

979 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

981 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
, 
˛cf
->
˛õ¡_max_body_size
);

983 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

984 && !
r
->
disˇrd_body


985 && 
˛cf
->
˛õ¡_max_body_size


986 && 
˛cf
->
˛õ¡_max_body_size
 < 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
)

988 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

990 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

992 
r
->
ex≥˘_ã°ed
 = 1;

993 (Ë
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

994 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
);

995  
NGX_OK
;

998 i‡(
rc
 =
NGX_DONE
) {

999 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1001 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1002 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1003 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1004  
NGX_OK
;

1012 i‡(
r
->
¨gs
.
Àn
 == 0) {

1013 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
˛cf
->
«me
;

1016 
Àn
 = 
˛cf
->
«me
.À¿+ 1 + 
r
->
¨gs
.len;

1017 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1019 i‡(
p
 =
NULL
) {

1020 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1021  
NGX_OK
;

1024 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

1025 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

1027 
p
 = 
	`ngx_˝ymem
’, 
˛cf
->
«me
.
d©a
, clcf->«me.
Àn
);

1028 *
p
++ = '?';

1029 
	`ngx_mem˝y
(
p
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1032 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_MOVED_PERMANENTLY
);

1033  
NGX_OK
;

1036 
r
->
pha£_h™dÀr
++;

1037  
NGX_AGAIN
;

1038 
	}
}

1041 
ngx_öt_t


1042 
	$ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1043 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1045 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1047 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1048 "po°Ñewrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

1050 i‡(!
r
->
uri_ch™ged
) {

1051 
r
->
pha£_h™dÀr
++;

1052  
NGX_AGAIN
;

1055 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1056 "uròch™ges: %d", 
r
->
uri_ch™ges
);

1065 
r
->
uri_ch™ges
--;

1067 i‡(
r
->
uri_ch™ges
 == 0) {

1068 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1070 "whûê¥o˚ssög \"%V\"", &
r
->
uri
);

1072 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1073  
NGX_OK
;

1076 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1078 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1079 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

1081  
NGX_AGAIN
;

1082 
	}
}

1085 
ngx_öt_t


1086 
	$ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1088 
ngx_öt_t
 
rc
;

1089 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1091 i‡(
r
 !r->
maö
) {

1092 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1093  
NGX_AGAIN
;

1096 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1097 "ac˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1099 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1101 i‡(
rc
 =
NGX_DECLINED
) {

1102 
r
->
pha£_h™dÀr
++;

1103  
NGX_AGAIN
;

1106 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

1107  
NGX_OK
;

1110 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1112 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

1114 i‡(
rc
 =
NGX_OK
) {

1115 
r
->
pha£_h™dÀr
++;

1116  
NGX_AGAIN
;

1120 i‡(
rc
 =
NGX_OK
) {

1121 
r
->
ac˚ss_code
 = 0;

1123 i‡(
r
->
hódîs_out
.
www_authítiˇã
) {

1124 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 0;

1127 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1128  
NGX_AGAIN
;

1131 i‡(
rc
 =
NGX_HTTP_FORBIDDEN
 ||Ñ¯=
NGX_HTTP_UNAUTHORIZED
) {

1132 i‡(
r
->
ac˚ss_code
 !
NGX_HTTP_UNAUTHORIZED
) {

1133 
r
->
ac˚ss_code
 = 
rc
;

1136 
r
->
pha£_h™dÀr
++;

1137  
NGX_AGAIN
;

1143 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1144  
NGX_OK
;

1145 
	}
}

1148 
ngx_öt_t


1149 
	$ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1150 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1152 
ngx_öt_t
 
ac˚ss_code
;

1154 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1155 "po°ác˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1157 
ac˚ss_code
 = 
r
->access_code;

1159 i‡(
ac˚ss_code
) {

1160 i‡(
ac˚ss_code
 =
NGX_HTTP_FORBIDDEN
) {

1161 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1165 
r
->
ac˚ss_code
 = 0;

1166 
	`ngx_hâp_föÆize_ªque°
(
r
, 
ac˚ss_code
);

1167  
NGX_OK
;

1170 
r
->
pha£_h™dÀr
++;

1171  
NGX_AGAIN
;

1172 
	}
}

1175 
ngx_öt_t


1176 
	$ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1177 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1179 
size_t
 
Àn
, 
roŸ
, 
Æüs
, 
ª£rve
, 
Æloˇãd
;

1180 
u_ch¨
 *
p
, *
«me
;

1181 
ngx_°r_t
 
∑th
, 
¨gs
;

1182 
ngx_uöt_t
 
ã°_dú
;

1183 
ngx_hâp_åy_fûe_t
 *
tf
;

1184 
ngx_›í_fûe_öfo_t
 
of
;

1185 
ngx_hâp_s¸ùt_code_±
 
code
;

1186 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

1187 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1188 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1190 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1191 "åy fûe†pha£: %ui", 
r
->
pha£_h™dÀr
);

1193 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1195 i‡(
˛cf
->
åy_fûes
 =
NULL
) {

1196 
r
->
pha£_h™dÀr
++;

1197  
NGX_AGAIN
;

1200 
Æloˇãd
 = 0;

1201 
roŸ
 = 0;

1202 
«me
 = 
NULL
;

1204 
∑th
.
d©a
 = 
NULL
;

1206 
tf
 = 
˛cf
->
åy_fûes
;

1208 
Æüs
 = 
˛cf
->alias;

1212 i‡(
tf
->
Àngths
) {

1213 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1215 
e
.
ù
 = 
tf
->
Àngths
->
ñts
;

1216 
e
.
ªque°
 = 
r
;

1219 
Àn
 = 1;

1221 *(
uöçå_t
 *Ë
e
.
ù
) {

1222 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

1223 
Àn
 +
	`lcode
(&
e
);

1227 
Àn
 = 
tf
->
«me
.len;

1230 i‡(!
Æüs
) {

1231 
ª£rve
 = 
Àn
 > 
r
->
uri
.len ?Üen -Ñ->uri.len : 0;

1233 } i‡(
Æüs
 =
NGX_MAX_SIZE_T_VALUE
) {

1234 
ª£rve
 = 
Àn
;

1237 
ª£rve
 = 
Àn
 > 
r
->
uri
.À¿- 
Æüs
 ?Üen - (r->uri.len -álias) : 0;

1240 i‡(
ª£rve
 > 
Æloˇãd
 || !allocated) {

1243 
Æloˇãd
 = 
ª£rve
 + 16;

1245 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Æloˇãd
Ë=
NULL
) {

1246 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1247  
NGX_OK
;

1250 
«me
 = 
∑th
.
d©a
 + 
roŸ
;

1253 i‡(
tf
->
vÆues
 =
NULL
) {

1257 
	`ngx_mem˝y
(
«me
, 
tf
->«me.
d©a
,Åf->«me.
Àn
);

1259 
∑th
.
Àn
 = (
«me
 + 
tf
->«me.À¿- 1Ë-Ö©h.
d©a
;

1262 
e
.
ù
 = 
tf
->
vÆues
->
ñts
;

1263 
e
.
pos
 = 
«me
;

1264 
e
.
Êushed
 = 1;

1266 *(
uöçå_t
 *Ë
e
.
ù
) {

1267 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1268 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1271 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

1273 *
e
.
pos
 = '\0';

1275 i‡(
Æüs
 && 
	`ngx_°∫cmp
(
«me
, 
˛cf
->«me.
d©a
,álias) == 0) {

1276 
	`ngx_memmove
(
«me
,Çamê+ 
Æüs
, 
Àn
 -álias);

1277 
∑th
.
Àn
 -
Æüs
;

1281 
ã°_dú
 = 
tf
->test_dir;

1283 
tf
++;

1285 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1287 
ã°_dú
 ? "dú" : "fûe", 
«me
, 
∑th
.
d©a
);

1289 i‡(
tf
->
Àngths
 =
NULL
 &&Åf->
«me
.
Àn
 == 0) {

1291 i‡(
tf
->
code
) {

1292 
	`ngx_hâp_föÆize_ªque°
(
r
, 
tf
->
code
);

1293  
NGX_OK
;

1296 
∑th
.
Àn
 -
roŸ
;

1297 
∑th
.
d©a
 +
roŸ
;

1299 i‡(
∑th
.
d©a
[0] == '@') {

1300 (Ë
	`ngx_hâp_«med_loˇti⁄
(
r
, &
∑th
);

1303 
	`ngx_hâp_•lô_¨gs
(
r
, &
∑th
, &
¨gs
);

1305 (Ë
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
∑th
, &
¨gs
);

1308 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

1309  
NGX_OK
;

1312 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1314 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1315 
of
.
dúe˘io
 = 
˛cf
->directio;

1316 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1317 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1318 
of
.
ã°_⁄ly
 = 1;

1319 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1320 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1322 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

1323 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1324  
NGX_OK
;

1327 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1328 !
NGX_OK
)

1330 i‡(
of
.
îr
 !
NGX_ENOENT


1331 && 
of
.
îr
 !
NGX_ENOTDIR


1332 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1334 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1335 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

1341 i‡(
of
.
is_dú
 !
ã°_dú
) {

1345 
∑th
.
Àn
 -
roŸ
;

1346 
∑th
.
d©a
 +
roŸ
;

1348 i‡(!
Æüs
) {

1349 
r
->
uri
 = 
∑th
;

1351 } i‡(
Æüs
 =
NGX_MAX_SIZE_T_VALUE
) {

1352 i‡(!
ã°_dú
) {

1353 
r
->
uri
 = 
∑th
;

1354 
r
->
add_uri_to_Æüs
 = 1;

1358 
r
->
uri
.
Àn
 = 
Æüs
 + 
∑th
.len;

1359 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
);

1360 i‡(
r
->
uri
.
d©a
 =
NULL
) {

1361 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1362  
NGX_OK
;

1365 
p
 = 
	`ngx_c›y
(
r
->
uri
.
d©a
, 
˛cf
->
«me
.d©a, 
Æüs
);

1366 
	`ngx_mem˝y
(
p
, 
«me
, 
∑th
.
Àn
);

1369 
	`ngx_hâp_£t_exãn
(
r
);

1371 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1372 "åy fûêuri: \"%V\"", &
r
->
uri
);

1374 
r
->
pha£_h™dÀr
++;

1375  
NGX_AGAIN
;

1379 
	}
}

1382 
ngx_öt_t


1383 
	$ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1384 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1386 
size_t
 
roŸ
;

1387 
ngx_öt_t
 
rc
;

1388 
ngx_°r_t
 
∑th
;

1390 i‡(
r
->
c⁄ã¡_h™dÀr
) {

1391 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

1392 
	`ngx_hâp_föÆize_ªque°
(
r
,Ñ->
	`c⁄ã¡_h™dÀr
(r));

1393  
NGX_OK
;

1396 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1397 "c⁄ã¡Öha£: %ui", 
r
->
pha£_h™dÀr
);

1399 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1401 i‡(
rc
 !
NGX_DECLINED
) {

1402 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1403  
NGX_OK
;

1408 
ph
++;

1410 i‡(
ph
->
checkî
) {

1411 
r
->
pha£_h™dÀr
++;

1412  
NGX_AGAIN
;

1417 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

1419 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë!
NULL
) {

1420 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1421 "dúe˘‹y index o‡\"%s\" i†f‹biddí", 
∑th
.
d©a
);

1424 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_FORBIDDEN
);

1425  
NGX_OK
;

1428 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "no handler found");

1430 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

1431  
NGX_OK
;

1432 
	}
}

1436 
	$ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
)

1438 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1440 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1442 i‡(
r
->
mëhod
 & 
˛cf
->
limô_ex˚±
) {

1443 
r
->
loc_c⁄f
 = 
˛cf
->
limô_ex˚±_loc_c⁄f
;

1444 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1447 i‡(
r
 =r->
maö
) {

1448 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

1451 i‡((
ngx_io
.
Êags
 & 
NGX_IO_SENDFILE
Ë&& 
˛cf
->
£ndfûe
) {

1452 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 1;

1455 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 0;

1458 i‡(
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
) {

1459 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

1460 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

1461 
r
->
ªque°_body_ö_˛ón_fûe
 =

1462 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 =
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
;

1463 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_NOTICE
;

1466 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_WARN
;

1469 
r
->
ªque°_body_ö_sögÀ_buf
 = 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
;

1471 i‡(
r
->
kì∑live
) {

1472 i‡(
˛cf
->
kì∑live_timeout
 == 0) {

1473 
r
->
kì∑live
 = 0;

1475 } i‡(
r
->
c⁄√˘i⁄
->
ªque°s
 >
˛cf
->
kì∑live_ªque°s
) {

1476 
r
->
kì∑live
 = 0;

1478 } i‡(
r
->
hódîs_ö
.
msõ6


1479 && 
r
->
mëhod
 =
NGX_HTTP_POST


1480 && (
˛cf
->
kì∑live_dißbÀ


1481 & 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
))

1487 
r
->
kì∑live
 = 0;

1489 } i‡(
r
->
hódîs_ö
.
ßÁri


1490 && (
˛cf
->
kì∑live_dißbÀ


1491 & 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
))

1498 
r
->
kì∑live
 = 0;

1502 i‡(!
˛cf
->
t˝_n›ush
) {

1504 
r
->
c⁄√˘i⁄
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

1507 i‡(
r
->
limô_øã
 == 0) {

1508 
r
->
limô_øã
 = 
˛cf
->limit_rate;

1511 i‡(
˛cf
->
h™dÀr
) {

1512 
r
->
c⁄ã¡_h™dÀr
 = 
˛cf
->
h™dÀr
;

1514 
	}
}

1525 
ngx_öt_t


1526 
	$ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
)

1528 
ngx_öt_t
 
rc
;

1529 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
;

1530 #i‡(
NGX_PCRE
)

1531 
ngx_öt_t
 
n
;

1532 
ngx_uöt_t
 
n‹egex
;

1533 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, **
˛cÂ
;

1535 
n‹egex
 = 0;

1538 
p˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1540 
rc
 = 
	`ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
r
, 
p˛cf
->
°©ic_loˇti⁄s
);

1542 i‡(
rc
 =
NGX_AGAIN
) {

1544 #i‡(
NGX_PCRE
)

1545 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1547 
n‹egex
 = 
˛cf
->noregex;

1552 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1555 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_DONE
) {

1556  
rc
;

1561 #i‡(
NGX_PCRE
)

1563 i‡(
n‹egex
 =0 && 
p˛cf
->
ªgex_loˇti⁄s
) {

1565 
˛cÂ
 = 
p˛cf
->
ªgex_loˇti⁄s
; *clcfp; clcfp++) {

1567 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1568 "ã°Üoˇti⁄: ~ \"%V\"", &(*
˛cÂ
)->
«me
);

1570 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, (*
˛cÂ
)->
ªgex
, &r->
uri
);

1572 i‡(
n
 =
NGX_OK
) {

1573 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

1577 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1579  (
rc
 =
NGX_ERROR
Ë?Ñ¯: 
NGX_OK
;

1582 i‡(
n
 =
NGX_DECLINED
) {

1586  
NGX_ERROR
;

1591  
rc
;

1592 
	}
}

1602 
ngx_öt_t


1603 
	$ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1604 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
)

1606 
u_ch¨
 *
uri
;

1607 
size_t
 
Àn
, 
n
;

1608 
ngx_öt_t
 
rc
, 
rv
;

1610 
Àn
 = 
r
->
uri
.len;

1611 
uri
 = 
r
->uri.
d©a
;

1613 
rv
 = 
NGX_DECLINED
;

1617 i‡(
node
 =
NULL
) {

1618  
rv
;

1621 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1622 "ã°Üoˇti⁄: \"%*s\"", 
node
->
Àn
,Çode->
«me
);

1624 
n
 = (
Àn
 <(
size_t
Ë
node
->len) ?Üen :Çode->len;

1626 
rc
 = 
	`ngx_fûíame_cmp
(
uri
, 
node
->
«me
, 
n
);

1628 i‡(
rc
 != 0) {

1629 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1634 i‡(
Àn
 > (
size_t
Ë
node
->len) {

1636 i‡(
node
->
ö˛usive
) {

1638 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1639 
rv
 = 
NGX_AGAIN
;

1641 
node
 =Çode->
åì
;

1642 
uri
 +
n
;

1643 
Àn
 -
n
;

1650 
node
 =Çode->
right
;

1655 i‡(
Àn
 =(
size_t
Ë
node
->len) {

1657 i‡(
node
->
exa˘
) {

1658 
r
->
loc_c⁄f
 = 
node
->
exa˘
->loc_conf;

1659  
NGX_OK
;

1662 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1663  
NGX_AGAIN
;

1669 i‡(
Àn
 + 1 =(
size_t
Ë
node
->À¿&&Çode->
auto_ªdúe˘
) {

1671 
r
->
loc_c⁄f
 = (
node
->
exa˘
) ?Çode->exact->loc_conf:

1672 
node
->
ö˛usive
->
loc_c⁄f
;

1673 
rv
 = 
NGX_DONE
;

1676 
node
 =Çode->
À·
;

1678 
	}
}

1682 
	$ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
)

1684 
u_ch¨
 
c
, *
lowˇ£
;

1685 
size_t
 
Àn
;

1686 
ngx_uöt_t
 
i
, 
hash
;

1688 i‡(
ty≥s_hash
->
size
 == 0) {

1692 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

1693  
NULL
;

1696 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

1698 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 =
NULL
) {

1700 
lowˇ£
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1701 i‡(
lowˇ£
 =
NULL
) {

1702  
NULL
;

1705 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
lowˇ£
;

1707 
hash
 = 0;

1709 
i
 = 0; i < 
Àn
; i++) {

1710 
c
 = 
	`ngx_tﬁowî
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
[
i
]);

1711 
hash
 = 
	`ngx_hash
(hash, 
c
);

1712 
lowˇ£
[
i
] = 
c
;

1715 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
 = 
hash
;

1718  
	`ngx_hash_föd
(
ty≥s_hash
, 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
,

1719 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
, 
Àn
);

1720 
	}
}

1723 
ngx_öt_t


1724 
	$ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
)

1726 
u_ch¨
 
c
, *
exãn
;

1727 
ngx_°r_t
 *
ty≥
;

1728 
ngx_uöt_t
 
i
, 
hash
;

1729 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1731 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1732  
NGX_OK
;

1735 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1737 i‡(
r
->
exãn
.
Àn
) {

1739 
hash
 = 0;

1741 
i
 = 0; i < 
r
->
exãn
.
Àn
; i++) {

1742 
c
 = 
r
->
exãn
.
d©a
[
i
];

1744 i‡(
c
 >= 'A' && c <= 'Z') {

1746 
exãn
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->exãn.
Àn
);

1747 i‡(
exãn
 =
NULL
) {

1748  
NGX_ERROR
;

1751 
hash
 = 
	`ngx_hash_°æow
(
exãn
, 
r
->exãn.
d©a
,Ñ->exãn.
Àn
);

1753 
r
->
exãn
.
d©a
 =Éxten;

1758 
hash
 = 
	`ngx_hash
(hash, 
c
);

1761 
ty≥
 = 
	`ngx_hash_föd
(&
˛cf
->
ty≥s_hash
, 
hash
,

1762 
r
->
exãn
.
d©a
,Ñ->exãn.
Àn
);

1764 i‡(
ty≥
) {

1765 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
ty≥
->
Àn
;

1766 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
ty≥
;

1768  
NGX_OK
;

1772 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˛cf
->
deÁu…_ty≥
.
Àn
;

1773 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
˛cf
->
deÁu…_ty≥
;

1775  
NGX_OK
;

1776 
	}
}

1780 
	$ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
)

1782 
ngx_öt_t
 
i
;

1784 
	`ngx_°r_nuŒ
(&
r
->
exãn
);

1786 
i
 = 
r
->
uri
.
Àn
 - 1; i > 1; i--) {

1787 i‡(
r
->
uri
.
d©a
[
i
] == '.' &&Ñ->uri.data[i - 1] != '/') {

1789 
r
->
exãn
.
Àn
 =Ñ->
uri
.À¿- 
i
 - 1;

1790 
r
->
exãn
.
d©a
 = &r->
uri
.d©a[
i
 + 1];

1794 } i‡(
r
->
uri
.
d©a
[
i
] == '/') {

1800 
	}
}

1803 
ngx_öt_t


1804 
	$ngx_hâp_£t_ëag
(
ngx_hâp_ªque°_t
 *
r
)

1806 
ngx_èbÀ_ñt_t
 *
ëag
;

1807 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1809 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1811 i‡(!
˛cf
->
ëag
) {

1812  
NGX_OK
;

1815 
ëag
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

1816 i‡(
ëag
 =
NULL
) {

1817  
NGX_ERROR
;

1820 
ëag
->
hash
 = 1;

1821 
	`ngx_°r_£t
(&
ëag
->
key
, "ETag");

1823 
ëag
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
 + 
NGX_TIME_T_LEN
 + 3);

1824 i‡(
ëag
->
vÆue
.
d©a
 =
NULL
) {

1825 
ëag
->
hash
 = 0;

1826  
NGX_ERROR
;

1829 
ëag
->
vÆue
.
Àn
 = 
	`ngx_•rötf
”èg->vÆue.
d©a
, "\"%xT-%xO\"",

1830 
r
->
hódîs_out
.
œ°_modifõd_time
,

1831 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

1832 - 
ëag
->
vÆue
.
d©a
;

1834 
r
->
hódîs_out
.
ëag
 =Étag;

1836  
NGX_OK
;

1837 
	}
}

1841 
	$ngx_hâp_wók_ëag
(
ngx_hâp_ªque°_t
 *
r
)

1843 
size_t
 
Àn
;

1844 
u_ch¨
 *
p
;

1845 
ngx_èbÀ_ñt_t
 *
ëag
;

1847 
ëag
 = 
r
->
hódîs_out
.etag;

1849 i‡(
ëag
 =
NULL
) {

1853 i‡(
ëag
->
vÆue
.
Àn
 > 2

1854 && 
ëag
->
vÆue
.
d©a
[0] == 'W'

1855 && 
ëag
->
vÆue
.
d©a
[1] == '/')

1860 i‡(
ëag
->
vÆue
.
Àn
 < 1 ||Éèg->vÆue.
d©a
[0] != '"') {

1861 
r
->
hódîs_out
.
ëag
->
hash
 = 0;

1862 
r
->
hódîs_out
.
ëag
 = 
NULL
;

1866 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ëag
->
vÆue
.
Àn
 + 2);

1867 i‡(
p
 =
NULL
) {

1868 
r
->
hódîs_out
.
ëag
->
hash
 = 0;

1869 
r
->
hódîs_out
.
ëag
 = 
NULL
;

1873 
Àn
 = 
	`ngx_•rötf
(
p
, "W/%V", &
ëag
->
vÆue
) -Ö;

1875 
ëag
->
vÆue
.
d©a
 = 
p
;

1876 
ëag
->
vÆue
.
Àn
 =Üen;

1877 
	}
}

1880 
ngx_öt_t


1881 
	$ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

1882 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
)

1884 
ngx_öt_t
 
rc
;

1885 
ngx_°r_t
 
vÆ
;

1886 
ngx_buf_t
 *
b
;

1887 
ngx_chaö_t
 
out
;

1889 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

1890  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1893 
r
->
hódîs_out
.
°©us
 = status;

1895 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1896  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1899 i‡(
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


1900 || 
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY


1901 || 
°©us
 =
NGX_HTTP_SEE_OTHER


1902 || 
°©us
 =
NGX_HTTP_TEMPORARY_REDIRECT
)

1904 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1906 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1907 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1908  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1911 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1912 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1913 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
vÆ
;

1915  
°©us
;

1918 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
vÆ
.
Àn
;

1920 i‡(
˘
) {

1921 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

1922 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

1925 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

1926  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1930 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
 || (∏!r->
maö
 && 
vÆ
.
Àn
 == 0)) {

1931  
	`ngx_hâp_£nd_hódî
(
r
);

1934 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

1935 i‡(
b
 =
NULL
) {

1936  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1939 
b
->
pos
 = 
vÆ
.
d©a
;

1940 
b
->
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

1941 
b
->
mem‹y
 = 
vÆ
.
Àn
 ? 1 : 0;

1942 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

1943 
b
->
œ°_ö_chaö
 = 1;

1945 
out
.
buf
 = 
b
;

1946 
out
.
√xt
 = 
NULL
;

1948 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1950 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1951  
rc
;

1954  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1955 
	}
}

1958 
ngx_öt_t


1959 
	$ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1961 i‡(
r
->
po°_a˘i⁄
) {

1962  
NGX_OK
;

1965 i‡(
r
->
hódî_£¡
) {

1966 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1968  
NGX_ERROR
;

1971 i‡(
r
->
îr_°©us
) {

1972 
r
->
hódîs_out
.
°©us
 =Ñ->
îr_°©us
;

1973 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

1976  
	`ngx_hâp_t›_hódî_fûãr
(
r
);

1977 
	}
}

1980 
ngx_öt_t


1981 
	$ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1983 
ngx_öt_t
 
rc
;

1984 
ngx_c⁄√˘i⁄_t
 *
c
;

1986 
c
 = 
r
->
c⁄√˘i⁄
;

1988 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1989 "hâ∞ouçuàfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1991 
rc
 = 
	`ngx_hâp_t›_body_fûãr
(
r
, 
ö
);

1993 i‡(
rc
 =
NGX_ERROR
) {

1995 
c
->
îr‹
 = 1;

1998  
rc
;

1999 
	}
}

2002 
u_ch¨
 *

2003 
	$ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
,

2004 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
)

2006 
u_ch¨
 *
œ°
;

2007 
size_t
 
Æüs
;

2008 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2010 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2012 
Æüs
 = 
˛cf
->alias;

2014 i‡(
Æüs
 && !
r
->
vÆid_loˇti⁄
) {

2015 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2017 "whîêURI wa†ªwrôãn", &
˛cf
->
«me
);

2018  
NULL
;

2021 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

2023 *
roŸ_Àngth
 = 
˛cf
->
roŸ
.
Àn
;

2025 
∑th
->
Àn
 = 
˛cf
->
roŸ
.À¿+ 
ª£rved
 + 
r
->
uri
.À¿- 
Æüs
 + 1;

2027 
∑th
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ö©h->
Àn
);

2028 i‡(
∑th
->
d©a
 =
NULL
) {

2029  
NULL
;

2032 
œ°
 = 
	`ngx_c›y
(
∑th
->
d©a
, 
˛cf
->
roŸ
.d©a, clcf->roŸ.
Àn
);

2036 i‡(
Æüs
 =
NGX_MAX_SIZE_T_VALUE
) {

2037 
ª£rved
 +
r
->
add_uri_to_Æüs
 ?Ñ->
uri
.
Àn
 + 1 : 1;

2040 
ª£rved
 +
r
->
uri
.
Àn
 - 
Æüs
 + 1;

2043 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, 
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 
ª£rved
,

2044 
˛cf
->
roŸ_vÆues
->
ñts
)

2045 =
NULL
)

2047  
NULL
;

2050 i‡(
	`ngx_gë_fuŒ_«me
(
r
->
poﬁ
, (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
, 
∑th
)

2051 !
NGX_OK
)

2053  
NULL
;

2056 *
roŸ_Àngth
 = 
∑th
->
Àn
 - 
ª£rved
;

2057 
œ°
 = 
∑th
->
d©a
 + *
roŸ_Àngth
;

2059 i‡(
Æüs
 =
NGX_MAX_SIZE_T_VALUE
) {

2060 i‡(!
r
->
add_uri_to_Æüs
) {

2061 *
œ°
 = '\0';

2062  
œ°
;

2065 
Æüs
 = 0;

2069 
œ°
 = 
	`ngx_˝y°∫
÷a°, 
r
->
uri
.
d©a
 + 
Æüs
,Ñ->uri.
Àn
 -álias + 1);

2071  
œ°
;

2072 
	}
}

2075 
ngx_öt_t


2076 
	$ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
)

2078 
ngx_°r_t
 
auth
, 
ícoded
;

2079 
ngx_uöt_t
 
Àn
;

2081 i‡(
r
->
hódîs_ö
.
u£r
.
Àn
 =0 &&Ñ->hódîs_ö.u£r.
d©a
 !
NULL
) {

2082  
NGX_DECLINED
;

2085 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 =
NULL
) {

2086 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2087  
NGX_DECLINED
;

2090 
ícoded
 = 
r
->
hódîs_ö
.
auth‹iz©i⁄
->
vÆue
;

2092 i‡(
ícoded
.
Àn
 < ("Basic ") - 1

2093 || 
	`ngx_°∫ˇ£cmp
(
ícoded
.
d©a
, (
u_ch¨
 *) "Basic ",

2097 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2098  
NGX_DECLINED
;

2101 
ícoded
.
Àn
 -= ("Basic ") - 1;

2102 
ícoded
.
d©a
 += ("Basic ") - 1;

2104 
ícoded
.
Àn
 &&Éncoded.
d©a
[0] == ' ') {

2105 
ícoded
.
Àn
--;

2106 
ícoded
.
d©a
++;

2109 i‡(
ícoded
.
Àn
 == 0) {

2110 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2111  
NGX_DECLINED
;

2114 
auth
.
Àn
 = 
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len);

2115 
auth
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,áuth.
Àn
 + 1);

2116 i‡(
auth
.
d©a
 =
NULL
) {

2117  
NGX_ERROR
;

2120 i‡(
	`ngx_decode_ba£64
(&
auth
, &
ícoded
Ë!
NGX_OK
) {

2121 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2122  
NGX_DECLINED
;

2125 
auth
.
d©a
[auth.
Àn
] = '\0';

2127 
Àn
 = 0;Üí < 
auth
.len;Üen++) {

2128 i‡(
auth
.
d©a
[
Àn
] == ':') {

2133 i‡(
Àn
 =0 ||Üí =
auth
.len) {

2134 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2135  
NGX_DECLINED
;

2138 
r
->
hódîs_ö
.
u£r
.
Àn
 =Üen;

2139 
r
->
hódîs_ö
.
u£r
.
d©a
 = 
auth
.data;

2140 
r
->
hódîs_ö
.
∑sswd
.
Àn
 = 
auth
.len -Üen - 1;

2141 
r
->
hódîs_ö
.
∑sswd
.
d©a
 = &
auth
.d©a[
Àn
 + 1];

2143  
NGX_OK
;

2144 
	}
}

2147 #i‡(
NGX_HTTP_GZIP
)

2149 
ngx_öt_t


2150 
	$ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
)

2152 
time_t
 
d©e
, 
expúes
;

2153 
ngx_uöt_t
 
p
;

2154 
ngx_¨øy_t
 *
cc
;

2155 
ngx_èbÀ_ñt_t
 *
e
, *
d
, *
´
;

2156 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2158 
r
->
gzù_ã°ed
 = 1;

2160 i‡(
r
 !r->
maö
) {

2161  
NGX_DECLINED
;

2164 #i‡(
NGX_HTTP_SPDY
)

2165 i‡(
r
->
•dy_°ªam
) {

2166 
r
->
gzù_ok
 = 1;

2167  
NGX_OK
;

2171 
´
 = 
r
->
hódîs_ö
.
ac˚±_ícodög
;

2172 i‡(
´
 =
NULL
) {

2173  
NGX_DECLINED
;

2176 i‡(
´
->
vÆue
.
Àn
 < ("gzip") - 1) {

2177  
NGX_DECLINED
;

2189 i‡(
	`ngx_memcmp
(
´
->
vÆue
.
d©a
, "gzip,", 5) != 0

2190 && 
	`ngx_hâp_gzù_ac˚±_ícodög
(&
´
->
vÆue
Ë!
NGX_OK
)

2192  
NGX_DECLINED
;

2195 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2197 i‡(
r
->
hódîs_ö
.
msõ6
 && 
˛cf
->
gzù_dißbÀ_msõ6
) {

2198  
NGX_DECLINED
;

2201 i‡(
r
->
hâp_vîsi⁄
 < 
˛cf
->
gzù_hâp_vîsi⁄
) {

2202  
NGX_DECLINED
;

2205 i‡(
r
->
hódîs_ö
.
vü
 =
NULL
) {

2206 
ok
;

2209 
p
 = 
˛cf
->
gzù_¥oxõd
;

2211 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_OFF
) {

2212  
NGX_DECLINED
;

2215 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_ANY
) {

2216 
ok
;

2219 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 && (
p
 & 
NGX_HTTP_GZIP_PROXIED_AUTH
)) {

2220 
ok
;

2223 
e
 = 
r
->
hódîs_out
.
expúes
;

2225 i‡(
e
) {

2227 i‡(!(
p
 & 
NGX_HTTP_GZIP_PROXIED_EXPIRED
)) {

2228  
NGX_DECLINED
;

2231 
expúes
 = 
	`ngx_hâp_∑r£_time
(
e
->
vÆue
.
d©a
,É->vÆue.
Àn
);

2232 i‡(
expúes
 =
NGX_ERROR
) {

2233  
NGX_DECLINED
;

2236 
d
 = 
r
->
hódîs_out
.
d©e
;

2238 i‡(
d
) {

2239 
d©e
 = 
	`ngx_hâp_∑r£_time
(
d
->
vÆue
.
d©a
, d->vÆue.
Àn
);

2240 i‡(
d©e
 =
NGX_ERROR
) {

2241  
NGX_DECLINED
;

2245 
d©e
 = 
	`ngx_time
();

2248 i‡(
expúes
 < 
d©e
) {

2249 
ok
;

2252  
NGX_DECLINED
;

2255 
cc
 = &
r
->
hódîs_out
.
ˇche_c⁄åﬁ
;

2257 i‡(
cc
->
ñts
) {

2259 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
)

2260 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_ˇche
,

2261 
NULL
)

2264 
ok
;

2267 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_STORE
)

2268 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_°‹e
,

2269 
NULL
)

2272 
ok
;

2275 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_PRIVATE
)

2276 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_¥iv©e
,

2277 
NULL
)

2280 
ok
;

2283  
NGX_DECLINED
;

2286 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_LM
Ë&& 
r
->
hódîs_out
.
œ°_modifõd
) {

2287  
NGX_DECLINED
;

2290 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
Ë&& 
r
->
hódîs_out
.
ëag
) {

2291  
NGX_DECLINED
;

2294 
ok
:

2296 #i‡(
NGX_PCRE
)

2298 i‡(
˛cf
->
gzù_dißbÀ
 && 
r
->
hódîs_ö
.
u£r_agít
) {

2300 i‡(
	`ngx_ªgex_exec_¨øy
(
˛cf
->
gzù_dißbÀ
,

2301 &
r
->
hódîs_ö
.
u£r_agít
->
vÆue
,

2302 
r
->
c⁄√˘i⁄
->
log
)

2303 !
NGX_DECLINED
)

2305  
NGX_DECLINED
;

2311 
r
->
gzù_ok
 = 1;

2313  
NGX_OK
;

2314 
	}
}

2324 
ngx_öt_t


2325 
	$ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
)

2327 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

2329 
°¨t
 = 
´
->
d©a
;

2330 
œ°
 = 
°¨t
 + 
´
->
Àn
;

2333 
p
 = 
	`ngx_°rˇ£°∫
(
°¨t
, "gzip", 4 - 1);

2334 i‡(
p
 =
NULL
) {

2335  
NGX_DECLINED
;

2338 i‡(
p
 =
°¨t
 || (*(p - 1) == ',' || *(p - 1) == ' ')) {

2342 
°¨t
 = 
p
 + 4;

2345 
p
 += 4;

2347 
p
 < 
œ°
) {

2348 *
p
++) {

2350  
NGX_OK
;

2352 
qu™tôy
;

2356  
NGX_DECLINED
;

2360  
NGX_OK
;

2362 
qu™tôy
:

2364 
p
 < 
œ°
) {

2365 *
p
++) {

2368 
equÆ
;

2372  
NGX_DECLINED
;

2376  
NGX_OK
;

2378 
equÆ
:

2380 i‡(
p
 + 2 > 
œ°
 || *p++ != '=') {

2381  
NGX_DECLINED
;

2384 i‡(
	`ngx_hâp_gzù_qu™tôy
(
p
, 
œ°
) == 0) {

2385  
NGX_DECLINED
;

2388  
NGX_OK
;

2389 
	}
}

2392 
ngx_uöt_t


2393 
	$ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
)

2395 
u_ch¨
 
c
;

2396 
ngx_uöt_t
 
n
, 
q
;

2398 
c
 = *
p
++;

2400 i‡(
c
 != '0' && c != '1') {

2404 
q
 = (
c
 - '0') * 100;

2406 i‡(
p
 =
œ°
) {

2407  
q
;

2410 
c
 = *
p
++;

2412 i‡(
c
 == ',' || c == ' ') {

2413  
q
;

2416 i‡(
c
 != '.') {

2420 
n
 = 0;

2422 
p
 < 
œ°
) {

2423 
c
 = *
p
++;

2425 i‡(
c
 == ',' || c == ' ') {

2429 i‡(
c
 >= '0' && c <= '9') {

2430 
q
 +
c
 - '0';

2431 
n
++;

2438 i‡(
q
 > 100 || 
n
 > 3) {

2442  
q
;

2443 
	}
}

2448 
ngx_öt_t


2449 
	$ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

2450 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
p§
,

2451 
ngx_hâp_po°_subªque°_t
 *
ps
, 
ngx_uöt_t
 
Êags
)

2453 
ngx_time_t
 *
ç
;

2454 
ngx_c⁄√˘i⁄_t
 *
c
;

2455 
ngx_hâp_ªque°_t
 *
§
;

2456 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2457 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, *
p
;

2459 
r
->
maö
->
subªque°s
--;

2461 i‡(
r
->
maö
->
subªque°s
 == 0) {

2462 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2463 "subªque°†cy˛êwhûê¥o˚ssög \"%V\"", 
uri
);

2464 
r
->
maö
->
subªque°s
 = 1;

2465  
NGX_ERROR
;

2468 
§
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_t
));

2469 i‡(
§
 =
NULL
) {

2470  
NGX_ERROR
;

2473 
§
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

2475 
c
 = 
r
->
c⁄√˘i⁄
;

2476 
§
->
c⁄√˘i⁄
 = 
c
;

2478 
§
->
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2479 i‡(
§
->
˘x
 =
NULL
) {

2480  
NGX_ERROR
;

2483 i‡(
	`ngx_li°_öô
(&
§
->
hódîs_out
.
hódîs
, 
r
->
poﬁ
, 20,

2484 (
ngx_èbÀ_ñt_t
))

2485 !
NGX_OK
)

2487  
NGX_ERROR
;

2490 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2491 
§
->
maö_c⁄f
 = 
cscf
->
˘x
->main_conf;

2492 
§
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2493 
§
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2495 
§
->
poﬁ
 = 
r
->pool;

2497 
§
->
hódîs_ö
 = 
r
->headers_in;

2499 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
§
);

2500 
	`ngx_hâp_˛ór_ac˚±_ønges
(
§
);

2501 
	`ngx_hâp_˛ór_œ°_modifõd
(
§
);

2503 
§
->
ªque°_body
 = 
r
->request_body;

2505 #i‡(
NGX_HTTP_SPDY
)

2506 
§
->
•dy_°ªam
 = 
r
->spdy_stream;

2509 
§
->
mëhod
 = 
NGX_HTTP_GET
;

2510 
§
->
hâp_vîsi⁄
 = 
r
->http_version;

2512 
§
->
ªque°_löe
 = 
r
->request_line;

2513 
§
->
uri
 = *uri;

2515 i‡(
¨gs
) {

2516 
§
->
¨gs
 = *args;

2519 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2520 "hâ∞subªque° \"%V?%V\"", 
uri
, &
§
->
¨gs
);

2522 
§
->
subªque°_ö_mem‹y
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_IN_MEMORY
) != 0;

2523 
§
->
waôed
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_WAITED
) != 0;

2525 
§
->
u≈¨£d_uri
 = 
r
->unparsed_uri;

2526 
§
->
mëhod_«me
 = 
ngx_hâp_c‹e_gë_mëhod
;

2527 
§
->
hâp_¥Ÿocﬁ
 = 
r
->http_protocol;

2529 
	`ngx_hâp_£t_exãn
(
§
);

2531 
§
->
maö
 = 
r
->main;

2532 
§
->
∑ª¡
 = 
r
;

2533 
§
->
po°_subªque°
 = 
ps
;

2534 
§
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2535 
§
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_h™dÀr
;

2537 i‡(
c
->
d©a
 =
r
 &&Ñ->
po°p⁄ed
 =
NULL
) {

2538 
c
->
d©a
 = 
§
;

2541 
§
->
v¨übÀs
 = 
r
->variables;

2543 
§
->
log_h™dÀr
 = 
r
->log_handler;

2545 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

2546 i‡(
¥
 =
NULL
) {

2547  
NGX_ERROR
;

2550 
¥
->
ªque°
 = 
§
;

2551 
¥
->
out
 = 
NULL
;

2552 
¥
->
√xt
 = 
NULL
;

2554 i‡(
r
->
po°p⁄ed
) {

2555 
p
 = 
r
->
po°p⁄ed
;Ö->
√xt
;Ö =Ö->next) { }

2556 
p
->
√xt
 = 
¥
;

2559 
r
->
po°p⁄ed
 = 
¥
;

2562 
§
->
öã∫Æ
 = 1;

2564 
§
->
disˇrd_body
 = 
r
->discard_body;

2565 
§
->
ex≥˘_ã°ed
 = 1;

2566 
§
->
maö_fûãr_√ed_ö_mem‹y
 = 
r
->main_filter_need_in_memory;

2568 
§
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

2570 
ç
 = 
	`ngx_timeofday
();

2571 
§
->
°¨t_£c
 = 
ç
->
£c
;

2572 
§
->
°¨t_m£c
 = 
ç
->
m£c
;

2574 
r
->
maö
->
cou¡
++;

2576 *
p§
 = 
§
;

2578  
	`ngx_hâp_po°_ªque°
(
§
, 
NULL
);

2579 
	}
}

2582 
ngx_öt_t


2583 
	$ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

2584 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

2586 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2588 
r
->
uri_ch™ges
--;

2590 i‡(
r
->
uri_ch™ges
 == 0) {

2591 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2593 "whûêöã∫ÆlyÑedúe˘ögÅÿ\"%V\"", 
uri
);

2595 
r
->
maö
->
cou¡
++;

2596 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2597  
NGX_DONE
;

2600 
r
->
uri
 = *uri;

2602 i‡(
¨gs
) {

2603 
r
->
¨gs
 = *args;

2606 
	`ngx_°r_nuŒ
(&
r
->
¨gs
);

2609 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2610 "öã∫ÆÑedúe˘: \"%V?%V\"", 
uri
, &
r
->
¨gs
);

2612 
	`ngx_hâp_£t_exãn
(
r
);

2615 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2617 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2618 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2620 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2622 #i‡(
NGX_HTTP_CACHE
)

2623 
r
->
ˇche
 = 
NULL
;

2626 
r
->
öã∫Æ
 = 1;

2627 
r
->
vÆid_u≈¨£d_uri
 = 0;

2628 
r
->
add_uri_to_Æüs
 = 0;

2629 
r
->
maö
->
cou¡
++;

2631 
	`ngx_hâp_h™dÀr
(
r
);

2633  
NGX_DONE
;

2634 
	}
}

2637 
ngx_öt_t


2638 
	$ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

2640 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2641 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

2642 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2644 
r
->
maö
->
cou¡
++;

2645 
r
->
uri_ch™ges
--;

2647 i‡(
r
->
uri_ch™ges
 == 0) {

2648 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2650 "whûêªdúe˘Åÿ«medÜoˇti⁄ \"%V\"", 
«me
);

2652 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2653  
NGX_DONE
;

2656 i‡(
r
->
uri
.
Àn
 == 0) {

2657 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2658 "em±y URI i¿ªdúe˘Åÿ«medÜoˇti⁄ \"%V\"", 
«me
);

2660 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2661  
NGX_DONE
;

2664 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2666 i‡(
cscf
->
«med_loˇti⁄s
) {

2668 
˛cÂ
 = 
cscf
->
«med_loˇti⁄s
; *clcfp; clcfp++) {

2670 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2671 "ã°Üoˇti⁄: \"%V\"", &(*
˛cÂ
)->
«me
);

2673 i‡(
«me
->
Àn
 !(*
˛cÂ
)->name.len

2674 || 
	`ngx_°∫cmp
(
«me
->
d©a
, (*
˛cÂ
)->«me.d©a,Çame->
Àn
) != 0)

2679 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2681 
«me
, &
r
->
uri
, &r->
¨gs
);

2683 
r
->
öã∫Æ
 = 1;

2684 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2685 
r
->
uri_ch™ged
 = 0;

2686 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

2689 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2691 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2693 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2695 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

2697 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2698 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2700  
NGX_DONE
;

2704 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2705 "couldÇŸ födÇamedÜoˇti⁄ \"%V\"", 
«me
);

2707 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2709  
NGX_DONE
;

2710 
	}
}

2713 
ngx_hâp_˛ónup_t
 *

2714 
	$ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
)

2716 
ngx_hâp_˛ónup_t
 *
˛n
;

2718 
r
 =Ñ->
maö
;

2720 
˛n
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_˛ónup_t
));

2721 i‡(
˛n
 =
NULL
) {

2722  
NULL
;

2725 i‡(
size
) {

2726 
˛n
->
d©a
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
size
);

2727 i‡(
˛n
->
d©a
 =
NULL
) {

2728  
NULL
;

2732 
˛n
->
d©a
 = 
NULL
;

2735 
˛n
->
h™dÀr
 = 
NULL
;

2736 
˛n
->
√xt
 = 
r
->
˛ónup
;

2738 
r
->
˛ónup
 = 
˛n
;

2740 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2741 "hâ∞˛ónu∞add: %p", 
˛n
);

2743  
˛n
;

2744 
	}
}

2747 
ngx_öt_t


2748 
	$ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

2749 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
)

2751 #i‡(
NGX_HAVE_OPENAT
)

2752 
u_ch¨
 *
p
;

2753 
ngx_°r_t
 
‰om
;

2755 
of
->
dißbÀ_symlöks
 = 
˛cf
->disable_symlinks;

2757 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NULL
) {

2758  
NGX_OK
;

2761 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
dißbÀ_symlöks_‰om
, &
‰om
)

2762 !
NGX_OK
)

2764  
NGX_ERROR
;

2767 i‡(
‰om
.
Àn
 == 0

2768 || 
‰om
.
Àn
 > 
∑th
->len

2769 || 
	`ngx_memcmp
(
∑th
->
d©a
, 
‰om
.d©a, from.
Àn
) != 0)

2771  
NGX_OK
;

2774 i‡(
‰om
.
Àn
 =
∑th
->len) {

2775 
of
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

2776  
NGX_OK
;

2779 
p
 = 
∑th
->
d©a
 + 
‰om
.
Àn
;

2781 i‡(*
p
 == '/') {

2782 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
;

2783  
NGX_OK
;

2786 
p
--;

2788 i‡(*
p
 == '/') {

2789 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
 - 1;

2793  
NGX_OK
;

2794 
	}
}

2797 
ngx_öt_t


2798 
	$ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

2799 
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
vÆue
,Çgx_¨øy_à*
¥oxõs
,

2800 
ªcursive
)

2802 
ngx_öt_t
 
rc
;

2803 
ngx_uöt_t
 
i
, 
found
;

2804 
ngx_èbÀ_ñt_t
 **
h
;

2806 i‡(
hódîs
 =
NULL
) {

2807  
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
vÆue
->
d©a
,

2808 
vÆue
->
Àn
, 
¥oxõs
,

2809 
ªcursive
);

2812 
i
 = 
hódîs
->
√…s
;

2813 
h
 = 
hódîs
->
ñts
;

2815 
rc
 = 
NGX_DECLINED
;

2817 
found
 = 0;

2819 
i
-- > 0) {

2820 
rc
 = 
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
h
[
i
]->
vÆue
.
d©a
,

2821 
h
[
i
]->
vÆue
.
Àn
, 
¥oxõs
,

2822 
ªcursive
);

2824 i‡(!
ªcursive
) {

2828 i‡(
rc
 =
NGX_DECLINED
 && 
found
) {

2829 
rc
 = 
NGX_DONE
;

2833 i‡(
rc
 !
NGX_OK
) {

2837 
found
 = 1;

2840  
rc
;

2841 
	}
}

2844 
ngx_öt_t


2845 
	$ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

2846 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
, 
ªcursive
)

2848 
u_ch¨
 *
p
;

2849 
ö_addr_t
 
öaddr
;

2850 
ngx_öt_t
 
rc
;

2851 
ngx_addr_t
 
∑ddr
;

2852 
ngx_cidr_t
 *
cidr
;

2853 
ngx_uöt_t
 
Ámûy
, 
i
;

2854 #i‡(
NGX_HAVE_INET6
)

2855 
ngx_uöt_t
 
n
;

2856 
ö6_addr
 *
öaddr6
;

2859 #i‡(
NGX_SUPPRESS_WARN
)

2860 
öaddr
 = 0;

2861 #i‡(
NGX_HAVE_INET6
)

2862 
öaddr6
 = 
NULL
;

2866 
Ámûy
 = 
addr
->
sockaddr
->
ß_Ámûy
;

2868 i‡(
Ámûy
 =
AF_INET
) {

2869 
öaddr
 = ((
sockaddr_ö
 *Ë
addr
->
sockaddr
)->
sö_addr
.
s_addr
;

2872 #i‡(
NGX_HAVE_INET6
)

2873 i‡(
Ámûy
 =
AF_INET6
) {

2874 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
->
sockaddr
)->
sö6_addr
;

2876 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

2877 
Ámûy
 = 
AF_INET
;

2879 
p
 = 
öaddr6
->
s6_addr
;

2881 
öaddr
 = 
p
[12] << 24;

2882 
öaddr
 +
p
[13] << 16;

2883 
öaddr
 +
p
[14] << 8;

2884 
öaddr
 +
p
[15];

2886 
öaddr
 = 
	`ht⁄l
(inaddr);

2891 
cidr
 = 
¥oxõs
->
ñts
, 
i
 = 0; i <Öroxõs->
√…s
; i++) {

2892 i‡(
cidr
[
i
].
Ámûy
 != family) {

2893 
√xt
;

2896 
Ámûy
) {

2898 #i‡(
NGX_HAVE_INET6
)

2899 
AF_INET6
:

2900 
n
 = 0;Ç < 16;Ç++) {

2901 i‡((
öaddr6
->
s6_addr
[
n
] & 
cidr
[
i
].
u
.
ö6
.
mask
.s6_addr[n])

2902 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

2904 
√xt
;

2910 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

2911 
AF_UNIX
:

2916 i‡((
öaddr
 & 
cidr
[
i
].
u
.
ö
.
mask
Ë!cidr[i].u.ö.
addr
) {

2917 
√xt
;

2922 
p
 = 
xff
 + 
xfÊí
 - 1;Ö > xff;Ö--, xfflen--) {

2923 i‡(*
p
 != ' ' && *p != ',') {

2928  ; 
p
 > 
xff
;Ö--) {

2929 i‡(*
p
 == ' ' || *p == ',') {

2930 
p
++;

2935 i‡(
	`ngx_∑r£_addr
(
r
->
poﬁ
, &
∑ddr
, 
p
, 
xfÊí
 - (∞- 
xff
)Ë!
NGX_OK
) {

2936  
NGX_DECLINED
;

2939 *
addr
 = 
∑ddr
;

2941 i‡(
ªcursive
 && 
p
 > 
xff
) {

2942 
rc
 = 
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
xff
, 
p
 - 1 - xff,

2943 
¥oxõs
, 1);

2945 i‡(
rc
 =
NGX_DECLINED
) {

2946  
NGX_DONE
;

2950  
rc
;

2953  
NGX_OK
;

2955 
√xt
:

2959  
NGX_DECLINED
;

2960 
	}
}

2964 
	$ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

2966 *
rv
;

2967 *
mc⁄f
;

2968 
ngx_uöt_t
 
i
;

2969 
ngx_c⁄f_t
 
pcf
;

2970 
ngx_hâp_moduÀ_t
 *
moduÀ
;

2971 
sockaddr_ö
 *
sö
;

2972 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

2973 
ngx_hâp_li°í_›t_t
 
ls›t
;

2974 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

2975 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2977 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

2978 i‡(
˘x
 =
NULL
) {

2979  
NGX_CONF_ERROR
;

2982 
hâp_˘x
 = 
cf
->
˘x
;

2983 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

2987 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2988 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

2989  
NGX_CONF_ERROR
;

2994 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2995 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

2996  
NGX_CONF_ERROR
;

2999 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

3000 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

3004 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

3006 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

3007 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

3008 i‡(
mc⁄f
 =
NULL
) {

3009  
NGX_CONF_ERROR
;

3012 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

3015 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

3016 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

3017 i‡(
mc⁄f
 =
NULL
) {

3018  
NGX_CONF_ERROR
;

3021 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

3028 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3029 
cscf
->
˘x
 = ctx;

3032 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3034 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

3035 i‡(
cscÂ
 =
NULL
) {

3036  
NGX_CONF_ERROR
;

3039 *
cscÂ
 = 
cscf
;

3044 
pcf
 = *
cf
;

3045 
cf
->
˘x
 = ctx;

3046 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SRV_CONF
;

3048 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3050 *
cf
 = 
pcf
;

3052 i‡(
rv
 =
NGX_CONF_OK
 && !
cscf
->
li°í
) {

3053 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

3055 
sö
 = &
ls›t
.
u
.
sockaddr_ö
;

3057 
sö
->
sö_Ámûy
 = 
AF_INET
;

3058 #i‡(
NGX_WIN32
)

3059 
sö
->
sö_p‹t
 = 
	`ht⁄s
(80);

3061 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
	`gëuid
() == 0) ? 80 : 8000);

3063 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

3065 
ls›t
.
sockÀn
 = (
sockaddr_ö
);

3067 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

3068 
ls›t
.
rcvbuf
 = -1;

3069 
ls›t
.
¢dbuf
 = -1;

3070 #i‡(
NGX_HAVE_SETFIB
)

3071 
ls›t
.
£tfib
 = -1;

3073 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

3074 
ls›t
.
Á°›í
 = -1;

3076 
ls›t
.
wûdˇrd
 = 1;

3078 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
sockÀn
,Üs›t.
addr
,

3079 
NGX_SOCKADDR_STRLEN
, 1);

3081 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë!
NGX_OK
) {

3082  
NGX_CONF_ERROR
;

3086  
rv
;

3087 
	}
}

3091 
	$ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

3093 *
rv
;

3094 
u_ch¨
 *
mod
;

3095 
size_t
 
Àn
;

3096 
ngx_°r_t
 *
vÆue
, *
«me
;

3097 
ngx_uöt_t
 
i
;

3098 
ngx_c⁄f_t
 
ßve
;

3099 
ngx_hâp_moduÀ_t
 *
moduÀ
;

3100 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

3101 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

3103 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

3104 i‡(
˘x
 =
NULL
) {

3105  
NGX_CONF_ERROR
;

3108 
p˘x
 = 
cf
->
˘x
;

3109 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

3110 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

3112 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

3113 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

3114  
NGX_CONF_ERROR
;

3117 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

3118 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

3122 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

3124 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

3125 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =

3126 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

3127 i‡(
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

3128  
NGX_CONF_ERROR
;

3133 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3134 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

3136 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3138 i‡(
cf
->
¨gs
->
√…s
 == 3) {

3140 
Àn
 = 
vÆue
[1].len;

3141 
mod
 = 
vÆue
[1].
d©a
;

3142 
«me
 = &
vÆue
[2];

3144 i‡(
Àn
 =1 && 
mod
[0] == '=') {

3146 
˛cf
->
«me
 = *name;

3147 
˛cf
->
exa˘_m©ch
 = 1;

3149 } i‡(
Àn
 =2 && 
mod
[0] == '^' && mod[1] == '~') {

3151 
˛cf
->
«me
 = *name;

3152 
˛cf
->
n‹egex
 = 1;

3154 } i‡(
Àn
 =1 && 
mod
[0] == '~') {

3156 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

3157  
NGX_CONF_ERROR
;

3160 } i‡(
Àn
 =2 && 
mod
[0] == '~' && mod[1] == '*') {

3162 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

3163  
NGX_CONF_ERROR
;

3167 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3168 "övÆidÜoˇti⁄ modifõ∏\"%V\"", &
vÆue
[1]);

3169  
NGX_CONF_ERROR
;

3174 
«me
 = &
vÆue
[1];

3176 i‡(
«me
->
d©a
[0] == '=') {

3178 
˛cf
->
«me
.
Àn
 =Çame->len - 1;

3179 
˛cf
->
«me
.
d©a
 =Çame->data + 1;

3180 
˛cf
->
exa˘_m©ch
 = 1;

3182 } i‡(
«me
->
d©a
[0] == '^' &&Çame->data[1] == '~') {

3184 
˛cf
->
«me
.
Àn
 =Çame->len - 2;

3185 
˛cf
->
«me
.
d©a
 =Çame->data + 2;

3186 
˛cf
->
n‹egex
 = 1;

3188 } i‡(
«me
->
d©a
[0] == '~') {

3190 
«me
->
Àn
--;

3191 
«me
->
d©a
++;

3193 i‡(
«me
->
d©a
[0] == '*') {

3195 
«me
->
Àn
--;

3196 
«me
->
d©a
++;

3198 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

3199  
NGX_CONF_ERROR
;

3203 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

3204  
NGX_CONF_ERROR
;

3210 
˛cf
->
«me
 = *name;

3212 i‡(
«me
->
d©a
[0] == '@') {

3213 
˛cf
->
«med
 = 1;

3218 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3220 i‡(
p˛cf
->
«me
.
Àn
) {

3225 
˛cf
->
¥ev_loˇti⁄
 = 
p˛cf
;

3228 i‡(
p˛cf
->
exa˘_m©ch
) {

3229 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3232 &
˛cf
->
«me
, &
p˛cf
->name);

3233  
NGX_CONF_ERROR
;

3236 i‡(
p˛cf
->
«med
) {

3237 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3240 &
˛cf
->
«me
, &
p˛cf
->name);

3241  
NGX_CONF_ERROR
;

3244 i‡(
˛cf
->
«med
) {

3245 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3248 &
˛cf
->
«me
);

3249  
NGX_CONF_ERROR
;

3252 
Àn
 = 
p˛cf
->
«me
.len;

3254 #i‡(
NGX_PCRE
)

3255 i‡(
˛cf
->
ªgex
 =
NULL


3256 && 
	`ngx_fûíame_cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3258 i‡(
	`ngx_fûíame_cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3261 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3263 &
˛cf
->
«me
, &
p˛cf
->name);

3264  
NGX_CONF_ERROR
;

3268 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

3269  
NGX_CONF_ERROR
;

3272 
ßve
 = *
cf
;

3273 
cf
->
˘x
 = ctx;

3274 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LOC_CONF
;

3276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3278 *
cf
 = 
ßve
;

3280  
rv
;

3281 
	}
}

3284 
ngx_öt_t


3285 
	$ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

3286 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

3288 #i‡(
NGX_PCRE
)

3289 
ngx_ªgex_compûe_t
 
rc
;

3290 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3292 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3294 
rc
.
∑âîn
 = *
ªgex
;

3295 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3296 
rc
.
îr
.
d©a
 = 
îr°r
;

3298 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

3299 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

3301 
rc
.
›ti⁄s
 = 
ˇ£Àss
 ? 
NGX_REGEX_CASELESS
 : 0;

3304 
˛cf
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

3305 i‡(
˛cf
->
ªgex
 =
NULL
) {

3306  
NGX_ERROR
;

3309 
˛cf
->
«me
 = *
ªgex
;

3311  
NGX_OK
;

3315 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3317 
ªgex
);

3318  
NGX_ERROR
;

3321 
	}
}

3325 
	$ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3327 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3329 *
rv
;

3330 
ngx_c⁄f_t
 
ßve
;

3332 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3333 
˛cf
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, (
ngx_hash_key_t
));

3334 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3335  
NGX_CONF_ERROR
;

3339 
ßve
 = *
cf
;

3340 
cf
->
h™dÀr
 = 
ngx_hâp_c‹e_ty≥
;

3341 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

3343 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3345 *
cf
 = 
ßve
;

3347  
rv
;

3348 
	}
}

3352 
	$ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

3354 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3356 
ngx_°r_t
 *
vÆue
, *
c⁄ã¡_ty≥
, *
ﬁd
;

3357 
ngx_uöt_t
 
i
, 
n
, 
hash
;

3358 
ngx_hash_key_t
 *
ty≥
;

3360 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3362 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

3363 i‡(
cf
->
¨gs
->
√…s
 != 2) {

3364 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3367  
NGX_CONF_ERROR
;

3370  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

3373 
c⁄ã¡_ty≥
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

3374 i‡(
c⁄ã¡_ty≥
 =
NULL
) {

3375  
NGX_CONF_ERROR
;

3378 *
c⁄ã¡_ty≥
 = 
vÆue
[0];

3380 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

3382 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

3384 
ty≥
 = 
˛cf
->
ty≥s
->
ñts
;

3385 
n
 = 0;Ç < 
˛cf
->
ty≥s
->
√…s
;Ç++) {

3386 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

3387 
ﬁd
 = 
ty≥
[
n
].
vÆue
;

3388 
ty≥
[
n
].
vÆue
 = 
c⁄ã¡_ty≥
;

3390 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3394 &
vÆue
[
i
], 
c⁄ã¡_ty≥
, 
ﬁd
);

3395 
√xt
;

3400 
ty≥
 = 
	`ngx_¨øy_push
(
˛cf
->
ty≥s
);

3401 i‡(
ty≥
 =
NULL
) {

3402  
NGX_CONF_ERROR
;

3405 
ty≥
->
key
 = 
vÆue
[
i
];

3406 
ty≥
->
key_hash
 = 
hash
;

3407 
ty≥
->
vÆue
 = 
c⁄ã¡_ty≥
;

3409 
√xt
:

3413  
NGX_CONF_OK
;

3414 
	}
}

3417 
ngx_öt_t


3418 
	$ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

3420  
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
cf
);

3421 
	}
}

3424 
ngx_öt_t


3425 
	$ngx_hâp_c‹e_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

3427 
ngx_hâp_t›_ªque°_body_fûãr
 = 
ngx_hâp_ªque°_body_ßve_fûãr
;

3429  
NGX_OK
;

3430 
	}
}

3434 
	$ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3436 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3438 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_maö_c⁄f_t
));

3439 i‡(
cmcf
 =
NULL
) {

3440  
NULL
;

3443 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

3444 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

3445 !
NGX_OK
)

3447  
NULL
;

3450 
cmcf
->
£rvî_«mes_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3451 
cmcf
->
£rvî_«mes_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3453 
cmcf
->
v¨übÀs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3454 
cmcf
->
v¨übÀs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3456  
cmcf
;

3457 
	}
}

3461 
	$ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

3463 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
 = 
c⁄f
;

3465 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
£rvî_«mes_hash_max_size
, 512);

3466 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
£rvî_«mes_hash_buckë_size
,

3467 
ngx_ˇchñöe_size
);

3469 
cmcf
->
£rvî_«mes_hash_buckë_size
 =

3470 
	`ngx_Æign
(
cmcf
->
£rvî_«mes_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3473 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
v¨übÀs_hash_max_size
, 1024);

3474 
	`ngx_c⁄f_öô_uöt_vÆue
(
cmcf
->
v¨übÀs_hash_buckë_size
, 64);

3476 
cmcf
->
v¨übÀs_hash_buckë_size
 =

3477 
	`ngx_Æign
(
cmcf
->
v¨übÀs_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3479 i‡(
cmcf
->
nˇ±uªs
) {

3480 
cmcf
->
nˇ±uªs
 = (cmcf->ncaptures + 1) * 3;

3483  
NGX_CONF_OK
;

3484 
	}
}

3488 
	$ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3490 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3492 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_§v_c⁄f_t
));

3493 i‡(
cscf
 =
NULL
) {

3494  
NULL
;

3503 i‡(
	`ngx_¨øy_öô
(&
cscf
->
£rvî_«mes
, 
cf
->
ãmp_poﬁ
, 4,

3504 (
ngx_hâp_£rvî_«me_t
))

3505 !
NGX_OK
)

3507  
NULL
;

3510 
cscf
->
c⁄√˘i⁄_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3511 
cscf
->
ªque°_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3512 
cscf
->
˛õ¡_hódî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3513 
cscf
->
˛õ¡_hódî_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3514 
cscf
->
ign‹e_övÆid_hódîs
 = 
NGX_CONF_UNSET
;

3515 
cscf
->
mîge_¶ashes
 = 
NGX_CONF_UNSET
;

3516 
cscf
->
undîsc‹es_ö_hódîs
 = 
NGX_CONF_UNSET
;

3518  
cscf
;

3519 
	}
}

3523 
	$ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3525 
ngx_hâp_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3526 
ngx_hâp_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

3528 
ngx_°r_t
 
«me
;

3529 
ngx_hâp_£rvî_«me_t
 *
¢
;

3533 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
c⁄√˘i⁄_poﬁ_size
,

3534 
¥ev
->
c⁄√˘i⁄_poﬁ_size
, 256);

3535 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªque°_poﬁ_size
,

3536 
¥ev
->
ªque°_poﬁ_size
, 4096);

3537 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_hódî_timeout
,

3538 
¥ev
->
˛õ¡_hódî_timeout
, 60000);

3539 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_hódî_buf„r_size
,

3540 
¥ev
->
˛õ¡_hódî_buf„r_size
, 1024);

3541 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
,

3542 
¥ev
->
œrge_˛õ¡_hódî_buf„rs
,

3545 i‡(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
.
size
 < c⁄f->
c⁄√˘i⁄_poﬁ_size
) {

3546 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3549  
NGX_CONF_ERROR
;

3552 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_övÆid_hódîs
,

3553 
¥ev
->
ign‹e_övÆid_hódîs
, 1);

3555 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mîge_¶ashes
, 
¥ev
->merge_slashes, 1);

3557 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
undîsc‹es_ö_hódîs
,

3558 
¥ev
->
undîsc‹es_ö_hódîs
, 0);

3560 i‡(
c⁄f
->
£rvî_«mes
.
√…s
 == 0) {

3562 
¢
 = 
	`ngx_¨øy_push
(&
c⁄f
->
£rvî_«mes
);

3563 #i‡(
NGX_PCRE
)

3564 
¢
->
ªgex
 = 
NULL
;

3566 
¢
->
£rvî
 = 
c⁄f
;

3567 
	`ngx_°r_£t
(&
¢
->
«me
, "");

3570 
¢
 = 
c⁄f
->
£rvî_«mes
.
ñts
;

3571 
«me
 = 
¢
[0].name;

3573 #i‡(
NGX_PCRE
)

3574 i‡(
¢
->
ªgex
) {

3575 
«me
.
Àn
++;

3576 
«me
.
d©a
--;

3580 i‡(
«me
.
d©a
[0] == '.') {

3581 
«me
.
Àn
--;

3582 
«me
.
d©a
++;

3585 
c⁄f
->
£rvî_«me
.
Àn
 = 
«me
.len;

3586 
c⁄f
->
£rvî_«me
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

3587 i‡(
c⁄f
->
£rvî_«me
.
d©a
 =
NULL
) {

3588  
NGX_CONF_ERROR
;

3591  
NGX_CONF_OK
;

3592 
	}
}

3596 
	$ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3598 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3600 
˛cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_loc_c⁄f_t
));

3601 i‡(
˛cf
 =
NULL
) {

3602  
NULL
;

3625 
˛cf
->
˛õ¡_max_body_size
 = 
NGX_CONF_UNSET
;

3626 
˛cf
->
˛õ¡_body_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3627 
˛cf
->
˛õ¡_body_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3628 
˛cf
->
ßtisfy
 = 
NGX_CONF_UNSET_UINT
;

3629 
˛cf
->
if_modifõd_sö˚
 = 
NGX_CONF_UNSET_UINT
;

3630 
˛cf
->
max_ønges
 = 
NGX_CONF_UNSET_UINT
;

3631 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 = 
NGX_CONF_UNSET_UINT
;

3632 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
 = 
NGX_CONF_UNSET
;

3633 
˛cf
->
öã∫Æ
 = 
NGX_CONF_UNSET
;

3634 
˛cf
->
£ndfûe
 = 
NGX_CONF_UNSET
;

3635 
˛cf
->
£ndfûe_max_chunk
 = 
NGX_CONF_UNSET_SIZE
;

3636 
˛cf
->
aio
 = 
NGX_CONF_UNSET
;

3637 #i‡(
NGX_THREADS
)

3638 
˛cf
->
thªad_poﬁ
 = 
NGX_CONF_UNSET_PTR
;

3639 
˛cf
->
thªad_poﬁ_vÆue
 = 
NGX_CONF_UNSET_PTR
;

3641 
˛cf
->
ªad_ahód
 = 
NGX_CONF_UNSET_SIZE
;

3642 
˛cf
->
dúe˘io
 = 
NGX_CONF_UNSET
;

3643 
˛cf
->
dúe˘io_Æignmít
 = 
NGX_CONF_UNSET
;

3644 
˛cf
->
t˝_n›ush
 = 
NGX_CONF_UNSET
;

3645 
˛cf
->
t˝_nodñay
 = 
NGX_CONF_UNSET
;

3646 
˛cf
->
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3647 
˛cf
->
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

3648 
˛cf
->
po°p⁄e_ouçut
 = 
NGX_CONF_UNSET_SIZE
;

3649 
˛cf
->
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

3650 
˛cf
->
limô_øã_a·î
 = 
NGX_CONF_UNSET_SIZE
;

3651 
˛cf
->
kì∑live_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3652 
˛cf
->
kì∑live_hódî
 = 
NGX_CONF_UNSET
;

3653 
˛cf
->
kì∑live_ªque°s
 = 
NGX_CONF_UNSET_UINT
;

3654 
˛cf
->
lögîög_˛o£
 = 
NGX_CONF_UNSET_UINT
;

3655 
˛cf
->
lögîög_time
 = 
NGX_CONF_UNSET_MSEC
;

3656 
˛cf
->
lögîög_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3657 
˛cf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3658 
˛cf
->
ª£t_timedout_c⁄√˘i⁄
 = 
NGX_CONF_UNSET
;

3659 
˛cf
->
£rvî_«me_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3660 
˛cf
->
p‹t_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3661 
˛cf
->
msõ_∑ddög
 = 
NGX_CONF_UNSET
;

3662 
˛cf
->
msõ_ª‰esh
 = 
NGX_CONF_UNSET
;

3663 
˛cf
->
log_nŸ_found
 = 
NGX_CONF_UNSET
;

3664 
˛cf
->
log_subªque°
 = 
NGX_CONF_UNSET
;

3665 
˛cf
->
ªcursive_îr‹_∑ges
 = 
NGX_CONF_UNSET
;

3666 
˛cf
->
£rvî_tokís
 = 
NGX_CONF_UNSET
;

3667 
˛cf
->
chunked_å™s„r_ícodög
 = 
NGX_CONF_UNSET
;

3668 
˛cf
->
ëag
 = 
NGX_CONF_UNSET
;

3669 
˛cf
->
ty≥s_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3670 
˛cf
->
ty≥s_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3672 
˛cf
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

3673 
˛cf
->
›í_fûe_ˇche_vÆid
 = 
NGX_CONF_UNSET
;

3674 
˛cf
->
›í_fûe_ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

3675 
˛cf
->
›í_fûe_ˇche_îr‹s
 = 
NGX_CONF_UNSET
;

3676 
˛cf
->
›í_fûe_ˇche_evíts
 = 
NGX_CONF_UNSET
;

3678 #i‡(
NGX_HTTP_GZIP
)

3679 
˛cf
->
gzù_v¨y
 = 
NGX_CONF_UNSET
;

3680 
˛cf
->
gzù_hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

3681 #i‡(
NGX_PCRE
)

3682 
˛cf
->
gzù_dißbÀ
 = 
NGX_CONF_UNSET_PTR
;

3684 
˛cf
->
gzù_dißbÀ_msõ6
 = 3;

3685 #i‡(
NGX_HTTP_DEGRADATION
)

3686 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 3;

3690 #i‡(
NGX_HAVE_OPENAT
)

3691 
˛cf
->
dißbÀ_symlöks
 = 
NGX_CONF_UNSET_UINT
;

3692 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NGX_CONF_UNSET_PTR
;

3695  
˛cf
;

3696 
	}
}

3699 
ngx_°r_t
 
	gngx_hâp_c‹e_ãxt_html_ty≥
 = 
ngx_°rög
("text/html");

3700 
ngx_°r_t
 
	gngx_hâp_c‹e_image_gif_ty≥
 = 
ngx_°rög
("image/gif");

3701 
ngx_°r_t
 
	gngx_hâp_c‹e_image_j≥g_ty≥
 = 
ngx_°rög
("image/jpeg");

3703 
ngx_hash_key_t
 
	gngx_hâp_c‹e_deÁu…_ty≥s
[] = {

3704 { 
ngx_°rög
("html"), 0, &
ngx_hâp_c‹e_ãxt_html_ty≥
 },

3705 { 
ngx_°rög
("gif"), 0, &
ngx_hâp_c‹e_image_gif_ty≥
 },

3706 { 
ngx_°rög
("jpg"), 0, &
ngx_hâp_c‹e_image_j≥g_ty≥
 },

3707 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

3712 
	$ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3714 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3715 
ngx_hâp_c‹e_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

3717 
ngx_uöt_t
 
i
;

3718 
ngx_hash_key_t
 *
ty≥
;

3719 
ngx_hash_öô_t
 
ty≥s_hash
;

3721 i‡(
c⁄f
->
roŸ
.
d©a
 =
NULL
) {

3723 
c⁄f
->
Æüs
 = 
¥ev
->alias;

3724 
c⁄f
->
roŸ
 = 
¥ev
->root;

3725 
c⁄f
->
roŸ_Àngths
 = 
¥ev
->root_lengths;

3726 
c⁄f
->
roŸ_vÆues
 = 
¥ev
->root_values;

3728 i‡(
¥ev
->
roŸ
.
d©a
 =
NULL
) {

3729 
	`ngx_°r_£t
(&
c⁄f
->
roŸ
, "html");

3731 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
c⁄f
->
roŸ
, 0Ë!
NGX_OK
) {

3732  
NGX_CONF_ERROR
;

3737 i‡(
c⁄f
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3738 
c⁄f
->
po°_a˘i⁄
 = 
¥ev
->post_action;

3741 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_max_size
,

3742 
¥ev
->
ty≥s_hash_max_size
, 1024);

3744 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_buckë_size
,

3745 
¥ev
->
ty≥s_hash_buckë_size
, 64);

3747 
c⁄f
->
ty≥s_hash_buckë_size
 = 
	`ngx_Æign
(conf->types_hash_bucket_size,

3748 
ngx_ˇchñöe_size
);

3755 i‡(
¥ev
->
ty≥s
 &&Öªv->
ty≥s_hash
.
buckës
 =
NULL
) {

3757 
ty≥s_hash
.
hash
 = &
¥ev
->types_hash;

3758 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3759 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3760 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3761 
ty≥s_hash
.
«me
 = "types_hash";

3762 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3763 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3765 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
¥ev
->
ty≥s
->
ñts
,Öªv->ty≥s->
√…s
)

3766 !
NGX_OK
)

3768  
NGX_CONF_ERROR
;

3772 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3773 
c⁄f
->
ty≥s
 = 
¥ev
->types;

3774 
c⁄f
->
ty≥s_hash
 = 
¥ev
->types_hash;

3777 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3778 
c⁄f
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 3, (
ngx_hash_key_t
));

3779 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3780  
NGX_CONF_ERROR
;

3783 
i
 = 0; 
ngx_hâp_c‹e_deÁu…_ty≥s
[i].
key
.
Àn
; i++) {

3784 
ty≥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ty≥s
);

3785 i‡(
ty≥
 =
NULL
) {

3786  
NGX_CONF_ERROR
;

3789 
ty≥
->
key
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].key;

3790 
ty≥
->
key_hash
 =

3791 
	`ngx_hash_key_lc
(
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
d©a
,

3792 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
Àn
);

3793 
ty≥
->
vÆue
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].value;

3797 i‡(
c⁄f
->
ty≥s_hash
.
buckës
 =
NULL
) {

3799 
ty≥s_hash
.
hash
 = &
c⁄f
->types_hash;

3800 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3801 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3802 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3803 
ty≥s_hash
.
«me
 = "types_hash";

3804 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3805 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3807 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
c⁄f
->
ty≥s
->
ñts
, c⁄f->ty≥s->
√…s
)

3808 !
NGX_OK
)

3810  
NGX_CONF_ERROR
;

3814 i‡(
c⁄f
->
îr‹_log
 =
NULL
) {

3815 i‡(
¥ev
->
îr‹_log
) {

3816 
c⁄f
->
îr‹_log
 = 
¥ev
->error_log;

3818 
c⁄f
->
îr‹_log
 = &
cf
->
cy˛e
->
√w_log
;

3822 i‡(
c⁄f
->
îr‹_∑ges
 =
NULL
 && 
¥ev
->error_pages) {

3823 
c⁄f
->
îr‹_∑ges
 = 
¥ev
->error_pages;

3826 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
deÁu…_ty≥
,

3827 
¥ev
->
deÁu…_ty≥
, "text/plain");

3829 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
˛õ¡_max_body_size
,

3830 
¥ev
->
˛õ¡_max_body_size
, 1 * 1024 * 1024);

3831 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_body_buf„r_size
,

3832 
¥ev
->
˛õ¡_body_buf„r_size
,

3833 (
size_t
Ë2 * 
ngx_∑gesize
);

3834 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_body_timeout
,

3835 
¥ev
->
˛õ¡_body_timeout
, 60000);

3837 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
kì∑live_dißbÀ
,

3838 
¥ev
->
kì∑live_dißbÀ
,

3839 (
NGX_CONF_BITMASK_SET


3840 |
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
));

3841 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ßtisfy
, 
¥ev
->satisfy,

3842 
NGX_HTTP_SATISFY_ALL
);

3843 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
if_modifõd_sö˚
, 
¥ev
->if_modified_since,

3844 
NGX_HTTP_IMS_EXACT
);

3845 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
max_ønges
, 
¥ev
->max_ranges,

3846 
NGX_MAX_INT32_VALUE
);

3847 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
˛õ¡_body_ö_fûe_⁄ly
,

3848 
¥ev
->
˛õ¡_body_ö_fûe_⁄ly
,

3849 
NGX_HTTP_REQUEST_BODY_FILE_OFF
);

3850 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
˛õ¡_body_ö_sögÀ_buf„r
,

3851 
¥ev
->
˛õ¡_body_ö_sögÀ_buf„r
, 0);

3852 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öã∫Æ
, 
¥ev
->internal, 0);

3853 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ndfûe
, 
¥ev
->sendfile, 0);

3854 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£ndfûe_max_chunk
,

3855 
¥ev
->
£ndfûe_max_chunk
, 0);

3856 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

3857 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
aio
, 
¥ev
->aio, 
NGX_HTTP_AIO_OFF
);

3859 #i‡(
NGX_THREADS
)

3860 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
thªad_poﬁ
, 
¥ev
->thªad_poﬁ, 
NULL
);

3861 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
thªad_poﬁ_vÆue
, 
¥ev
->thread_pool_value,

3862 
NULL
);

3864 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªad_ahód
, 
¥ev
->read_ahead, 0);

3865 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io
, 
¥ev
->directio,

3866 
NGX_OPEN_FILE_DIRECTIO_OFF
);

3867 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io_Æignmít
, 
¥ev
->directio_alignment,

3869 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_n›ush
, 
¥ev
->tcp_nopush, 0);

3870 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_nodñay
, 
¥ev
->tcp_nodelay, 1);

3872 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
£nd_timeout
, 
¥ev
->send_timeout, 60000);

3873 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£nd_low©
, 
¥ev
->send_lowat, 0);

3874 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_ouçut
, 
¥ev
->postpone_output,

3876 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã
, 
¥ev
->limit_rate, 0);

3877 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã_a·î
, 
¥ev
->limit_rate_after,

3879 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
kì∑live_timeout
,

3880 
¥ev
->
kì∑live_timeout
, 75000);

3881 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
kì∑live_hódî
,

3882 
¥ev
->
kì∑live_hódî
, 0);

3883 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
kì∑live_ªque°s
,

3884 
¥ev
->
kì∑live_ªque°s
, 100);

3885 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
lögîög_˛o£
,

3886 
¥ev
->
lögîög_˛o£
, 
NGX_HTTP_LINGERING_ON
);

3887 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_time
,

3888 
¥ev
->
lögîög_time
, 30000);

3889 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_timeout
,

3890 
¥ev
->
lögîög_timeout
, 5000);

3891 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
,

3892 
¥ev
->
ªsﬁvî_timeout
, 30000);

3894 i‡(
c⁄f
->
ªsﬁvî
 =
NULL
) {

3896 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3903 
¥ev
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, 
NULL
, 0);

3904 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3905  
NGX_CONF_ERROR
;

3909 
c⁄f
->
ªsﬁvî
 = 
¥ev
->resolver;

3912 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
˛õ¡_body_ãmp_∑th
,

3913 
¥ev
->
˛õ¡_body_ãmp_∑th
,

3914 &
ngx_hâp_˛õ¡_ãmp_∑th
)

3915 !
NGX_OK
)

3917  
NGX_CONF_ERROR
;

3920 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ª£t_timedout_c⁄√˘i⁄
,

3921 
¥ev
->
ª£t_timedout_c⁄√˘i⁄
, 0);

3922 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_«me_ö_ªdúe˘
,

3923 
¥ev
->
£rvî_«me_ö_ªdúe˘
, 0);

3924 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
p‹t_ö_ªdúe˘
, 
¥ev
->port_in_redirect, 1);

3925 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_∑ddög
, 
¥ev
->msie_padding, 1);

3926 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_ª‰esh
, 
¥ev
->msie_refresh, 0);

3927 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_nŸ_found
, 
¥ev
->log_not_found, 1);

3928 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_subªque°
, 
¥ev
->log_subrequest, 0);

3929 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive_îr‹_∑ges
,

3930 
¥ev
->
ªcursive_îr‹_∑ges
, 0);

3931 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_tokís
, 
¥ev
->server_tokens, 1);

3932 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
chunked_å™s„r_ícodög
,

3933 
¥ev
->
chunked_å™s„r_ícodög
, 1);

3934 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ëag
, 
¥ev
->etag, 1);

3936 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
›í_fûe_ˇche
,

3937 
¥ev
->
›í_fûe_ˇche
, 
NULL
);

3939 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_vÆid
,

3940 
¥ev
->
›í_fûe_ˇche_vÆid
, 60);

3942 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
›í_fûe_ˇche_mö_u£s
,

3943 
¥ev
->
›í_fûe_ˇche_mö_u£s
, 1);

3945 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_îr‹s
,

3946 
¥ev
->
›í_fûe_ˇche_îr‹s
, 0);

3948 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_evíts
,

3949 
¥ev
->
›í_fûe_ˇche_evíts
, 0);

3950 #i‡(
NGX_HTTP_GZIP
)

3952 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
gzù_v¨y
, 
¥ev
->gzip_vary, 0);

3953 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_hâp_vîsi⁄
, 
¥ev
->gzip_http_version,

3954 
NGX_HTTP_VERSION_11
);

3955 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
gzù_¥oxõd
, 
¥ev
->gzip_proxied,

3956 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_GZIP_PROXIED_OFF
));

3958 #i‡(
NGX_PCRE
)

3959 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
gzù_dißbÀ
, 
¥ev
->gzù_dißbÀ, 
NULL
);

3962 i‡(
c⁄f
->
gzù_dißbÀ_msõ6
 == 3) {

3963 
c⁄f
->
gzù_dißbÀ_msõ6
 =

3964 (
¥ev
->
gzù_dißbÀ_msõ6
 == 3) ? 0 :Örev->gzip_disable_msie6;

3967 #i‡(
NGX_HTTP_DEGRADATION
)

3969 i‡(
c⁄f
->
gzù_dißbÀ_degød©i⁄
 == 3) {

3970 
c⁄f
->
gzù_dißbÀ_degød©i⁄
 =

3971 (
¥ev
->
gzù_dißbÀ_degød©i⁄
 == 3) ?

3972 0 : 
¥ev
->
gzù_dißbÀ_degød©i⁄
;

3978 #i‡(
NGX_HAVE_OPENAT
)

3979 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
dißbÀ_symlöks
, 
¥ev
->disable_symlinks,

3980 
NGX_DISABLE_SYMLINKS_OFF
);

3981 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
dißbÀ_symlöks_‰om
,

3982 
¥ev
->
dißbÀ_symlöks_‰om
, 
NULL
);

3985  
NGX_CONF_OK
;

3986 
	}
}

3990 
	$ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3992 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

3994 
ngx_°r_t
 *
vÆue
, 
size
;

3995 
ngx_uæ_t
 
u
;

3996 
ngx_uöt_t
 
n
;

3997 
ngx_hâp_li°í_›t_t
 
ls›t
;

3999 
cscf
->
li°í
 = 1;

4001 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4003 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4005 
u
.
uæ
 = 
vÆue
[1];

4006 
u
.
li°í
 = 1;

4007 
u
.
deÁu…_p‹t
 = 80;

4009 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

4010 i‡(
u
.
îr
) {

4011 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4013 
u
.
îr
, &u.
uæ
);

4016  
NGX_CONF_ERROR
;

4019 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

4021 
	`ngx_mem˝y
(&
ls›t
.
u
.
sockaddr
, u.sockaddr, u.
sockÀn
);

4023 
ls›t
.
sockÀn
 = 
u
.socklen;

4024 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

4025 
ls›t
.
rcvbuf
 = -1;

4026 
ls›t
.
¢dbuf
 = -1;

4027 #i‡(
NGX_HAVE_SETFIB
)

4028 
ls›t
.
£tfib
 = -1;

4030 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

4031 
ls›t
.
Á°›í
 = -1;

4033 
ls›t
.
wûdˇrd
 = 
u
.wildcard;

4034 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

4035 
ls›t
.
ùv6⁄ly
 = 1;

4038 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
sockÀn
,Üs›t.
addr
,

4039 
NGX_SOCKADDR_STRLEN
, 1);

4041 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

4043 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default_server") == 0

4044 || 
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default") == 0)

4046 
ls›t
.
deÁu…_£rvî
 = 1;

4050 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "bind") == 0) {

4051 
ls›t
.
£t
 = 1;

4052 
ls›t
.
böd
 = 1;

4056 #i‡(
NGX_HAVE_SETFIB
)

4057 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "setfib=", 7) == 0) {

4058 
ls›t
.
£tfib
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 7, vÆue[n].
Àn
 - 7);

4059 
ls›t
.
£t
 = 1;

4060 
ls›t
.
böd
 = 1;

4062 i‡(
ls›t
.
£tfib
 =
NGX_ERROR
) {

4063 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4064 "övÆid sëfib \"%V\"", &
vÆue
[
n
]);

4065  
NGX_CONF_ERROR
;

4072 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

4073 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "fastopen=", 9) == 0) {

4074 
ls›t
.
Á°›í
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 9, vÆue[n].
Àn
 - 9);

4075 
ls›t
.
£t
 = 1;

4076 
ls›t
.
böd
 = 1;

4078 i‡(
ls›t
.
Á°›í
 =
NGX_ERROR
) {

4079 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4080 "övÆid fa°›í \"%V\"", &
vÆue
[
n
]);

4081  
NGX_CONF_ERROR
;

4088 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "backlog=", 8) == 0) {

4089 
ls›t
.
backlog
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 8, vÆue[n].
Àn
 - 8);

4090 
ls›t
.
£t
 = 1;

4091 
ls›t
.
böd
 = 1;

4093 i‡(
ls›t
.
backlog
 =
NGX_ERROR
 ||Üsopt.backlog == 0) {

4094 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4095 "övÆid backlog \"%V\"", &
vÆue
[
n
]);

4096  
NGX_CONF_ERROR
;

4102 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "rcvbuf=", 7) == 0) {

4103 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

4104 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

4106 
ls›t
.
rcvbuf
 = 
	`ngx_∑r£_size
(&
size
);

4107 
ls›t
.
£t
 = 1;

4108 
ls›t
.
böd
 = 1;

4110 i‡(
ls›t
.
rcvbuf
 =
NGX_ERROR
) {

4111 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4112 "övÆidÑcvbu‡\"%V\"", &
vÆue
[
n
]);

4113  
NGX_CONF_ERROR
;

4119 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "sndbuf=", 7) == 0) {

4120 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

4121 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

4123 
ls›t
.
¢dbuf
 = 
	`ngx_∑r£_size
(&
size
);

4124 
ls›t
.
£t
 = 1;

4125 
ls›t
.
böd
 = 1;

4127 i‡(
ls›t
.
¢dbuf
 =
NGX_ERROR
) {

4128 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4129 "övÆid sndbu‡\"%V\"", &
vÆue
[
n
]);

4130  
NGX_CONF_ERROR
;

4136 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "accept_filter=", 14) == 0) {

4137 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

4138 
ls›t
.
ac˚±_fûãr
 = (*Ë&
vÆue
[
n
].
d©a
[14];

4139 
ls›t
.
£t
 = 1;

4140 
ls›t
.
böd
 = 1;

4142 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4145 &
vÆue
[
n
]);

4150 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "deferred") == 0) {

4151 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

4152 
ls›t
.
de„ºed_ac˚±
 = 1;

4153 
ls›t
.
£t
 = 1;

4154 
ls›t
.
böd
 = 1;

4156 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4163 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "ipv6only=o", 10) == 0) {

4164 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

4165 
sockaddr
 *
ß
;

4167 
ß
 = &
ls›t
.
u
.
sockaddr
;

4169 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

4171 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "n") == 0) {

4172 
ls›t
.
ùv6⁄ly
 = 1;

4174 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "ff") == 0) {

4175 
ls›t
.
ùv6⁄ly
 = 0;

4178 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4180 &
vÆue
[
n
].
d©a
[9]);

4181  
NGX_CONF_ERROR
;

4184 
ls›t
.
£t
 = 1;

4185 
ls›t
.
böd
 = 1;

4188 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4190 "⁄ádd∏\"%s\", ign‹ed", 
ls›t
.
addr
);

4195 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4198  
NGX_CONF_ERROR
;

4202 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "ssl") == 0) {

4203 #i‡(
NGX_HTTP_SSL
)

4204 
ls›t
.
s¶
 = 1;

4207 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4210  
NGX_CONF_ERROR
;

4214 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "spdy") == 0) {

4215 #i‡(
NGX_HTTP_SPDY
)

4216 
ls›t
.
•dy
 = 1;

4219 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4222  
NGX_CONF_ERROR
;

4226 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "so_keepalive=", 13) == 0) {

4228 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "on") == 0) {

4229 
ls›t
.
so_kì∑live
 = 1;

4231 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "off") == 0) {

4232 
ls›t
.
so_kì∑live
 = 2;

4236 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4237 
u_ch¨
 *
p
, *
íd
;

4238 
ngx_°r_t
 
s
;

4240 
íd
 = 
vÆue
[
n
].
d©a
 + vÆue[n].
Àn
;

4241 
s
.
d©a
 = 
vÆue
[
n
].data + 13;

4243 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4244 i‡(
p
 =
NULL
) {

4245 
p
 = 
íd
;

4248 i‡(
p
 > 
s
.
d©a
) {

4249 
s
.
Àn
 = 
p
 - s.
d©a
;

4251 
ls›t
.
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

4252 i‡(
ls›t
.
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

4253 
övÆid_so_kì∑live
;

4257 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4259 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4260 i‡(
p
 =
NULL
) {

4261 
p
 = 
íd
;

4264 i‡(
p
 > 
s
.
d©a
) {

4265 
s
.
Àn
 = 
p
 - s.
d©a
;

4267 
ls›t
.
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

4268 i‡(
ls›t
.
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

4269 
övÆid_so_kì∑live
;

4273 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4275 i‡(
s
.
d©a
 < 
íd
) {

4276 
s
.
Àn
 = 
íd
 - s.
d©a
;

4278 
ls›t
.
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

4279 i‡(
ls›t
.
t˝_kìp˙t
 =
NGX_ERROR
) {

4280 
övÆid_so_kì∑live
;

4284 i‡(
ls›t
.
t˝_kìpidÀ
 =0 &&Üs›t.
t˝_kìpötvl
 == 0

4285 && 
ls›t
.
t˝_kìp˙t
 == 0)

4287 
övÆid_so_kì∑live
;

4290 
ls›t
.
so_kì∑live
 = 1;

4294 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4297  
NGX_CONF_ERROR
;

4302 
ls›t
.
£t
 = 1;

4303 
ls›t
.
böd
 = 1;

4307 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4308 
övÆid_so_kì∑live
:

4310 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4312 &
vÆue
[
n
].
d©a
[13]);

4313  
NGX_CONF_ERROR
;

4317 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "proxy_protocol") == 0) {

4318 
ls›t
.
¥oxy_¥Ÿocﬁ
 = 1;

4322 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4323 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
n
]);

4324  
NGX_CONF_ERROR
;

4327 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë=
NGX_OK
) {

4328  
NGX_CONF_OK
;

4331  
NGX_CONF_ERROR
;

4332 
	}
}

4336 
	$ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4338 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

4340 
u_ch¨
 
ch
;

4341 
ngx_°r_t
 *
vÆue
;

4342 
ngx_uöt_t
 
i
;

4343 
ngx_hâp_£rvî_«me_t
 *
¢
;

4345 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4347 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4349 
ch
 = 
vÆue
[
i
].
d©a
[0];

4351 i‡((
ch
 ='*' && (
vÆue
[
i
].
Àn
 < 3 || vÆue[i].
d©a
[1] != '.'))

4352 || (
ch
 ='.' && 
vÆue
[
i
].
Àn
 < 2))

4354 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4355 "£rvîÇamê\"%V\" i†övÆid", &
vÆue
[
i
]);

4356  
NGX_CONF_ERROR
;

4359 i‡(
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/')) {

4360 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4362 &
vÆue
[
i
]);

4365 
¢
 = 
	`ngx_¨øy_push
(&
cscf
->
£rvî_«mes
);

4366 i‡(
¢
 =
NULL
) {

4367  
NGX_CONF_ERROR
;

4370 #i‡(
NGX_PCRE
)

4371 
¢
->
ªgex
 = 
NULL
;

4373 
¢
->
£rvî
 = 
cscf
;

4375 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, (
u_ch¨
 *) "$hostname") == 0) {

4376 
¢
->
«me
 = 
cf
->
cy˛e
->
ho°«me
;

4379 
¢
->
«me
 = 
vÆue
[
i
];

4382 i‡(
vÆue
[
i
].
d©a
[0] != '~') {

4383 
	`ngx_°æow
(
¢
->
«me
.
d©a
, sn->«me.d©a, sn->«me.
Àn
);

4387 #i‡(
NGX_PCRE
)

4389 
u_ch¨
 *
p
;

4390 
ngx_ªgex_compûe_t
 
rc
;

4391 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4393 i‡(
vÆue
[
i
].
Àn
 == 1) {

4394 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4395 "em±yÑegex i¿£rvîÇamê\"%V\"", &
vÆue
[
i
]);

4396  
NGX_CONF_ERROR
;

4399 
vÆue
[
i
].
Àn
--;

4400 
vÆue
[
i
].
d©a
++;

4402 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4404 
rc
.
∑âîn
 = 
vÆue
[
i
];

4405 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4406 
rc
.
îr
.
d©a
 = 
îr°r
;

4408 
p
 = 
vÆue
[
i
].
d©a
;Ö < vÆue[i].d©®+ vÆue[i].
Àn
;Ö++) {

4409 i‡(*
p
 >= 'A' && *p <= 'Z') {

4410 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4415 
¢
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

4416 i‡(
¢
->
ªgex
 =
NULL
) {

4417  
NGX_CONF_ERROR
;

4420 
¢
->
«me
 = 
vÆue
[
i
];

4421 
cscf
->
ˇ±uªs
 = (
rc
.captures > 0);

4424 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4426 "ªquúe†PCREÜibøry", &
vÆue
[
i
]);

4428  
NGX_CONF_ERROR
;

4432  
NGX_CONF_OK
;

4433 
	}
}

4437 
	$ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4439 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4441 
ngx_°r_t
 *
vÆue
;

4442 
ngx_öt_t
 
Æüs
;

4443 
ngx_uöt_t
 
n
;

4444 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4446 
Æüs
 = (
cmd
->
«me
.
Àn
 == ("alias") - 1) ? 1 : 0;

4448 i‡(
˛cf
->
roŸ
.
d©a
) {

4450 i‡((
˛cf
->
Æüs
 != 0) ==álias) {

4451 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4453 &
cmd
->
«me
);

4455 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4458 &
cmd
->
«me
, 
˛cf
->
Æüs
 ? "alias" : "root");

4461  
NGX_CONF_ERROR
;

4464 i‡(
˛cf
->
«med
 && 
Æüs
) {

4465 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4469  
NGX_CONF_ERROR
;

4472 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4474 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$document_root")

4475 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${document_root}"))

4477 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4480 &
cmd
->
«me
);

4482  
NGX_CONF_ERROR
;

4485 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$realpath_root")

4486 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${realpath_root}"))

4488 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4491 &
cmd
->
«me
);

4493  
NGX_CONF_ERROR
;

4496 
˛cf
->
Æüs
 =álü†? clcf->
«me
.
Àn
 : 0;

4497 
˛cf
->
roŸ
 = 
vÆue
[1];

4499 i‡(!
Æüs
 && 
˛cf
->
roŸ
.
d©a
[˛cf->roŸ.
Àn
 - 1] == '/') {

4500 
˛cf
->
roŸ
.
Àn
--;

4503 i‡(
˛cf
->
roŸ
.
d©a
[0] != '$') {

4504 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
˛cf
->
roŸ
, 0Ë!
NGX_OK
) {

4505  
NGX_CONF_ERROR
;

4509 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
˛cf
->
roŸ
);

4511 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4512 
sc
.
v¨übÀs
 = 
n
;

4514 #i‡(
NGX_PCRE
)

4515 i‡(
Æüs
 && 
˛cf
->
ªgex
) {

4516 
˛cf
->
Æüs
 = 
NGX_MAX_SIZE_T_VALUE
;

4517 
n
 = 1;

4521 i‡(
n
) {

4522 
sc
.
cf
 = cf;

4523 
sc
.
sour˚
 = &
˛cf
->
roŸ
;

4524 
sc
.
Àngths
 = &
˛cf
->
roŸ_Àngths
;

4525 
sc
.
vÆues
 = &
˛cf
->
roŸ_vÆues
;

4526 
sc
.
com∂ëe_Àngths
 = 1;

4527 
sc
.
com∂ëe_vÆues
 = 1;

4529 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4530  
NGX_CONF_ERROR
;

4534  
NGX_CONF_OK
;

4535 
	}
}

4538 
ngx_hâp_mëhod_«me_t
 
	gngx_mëhods_«mes
[] = {

4539 { (
u_ch¨
 *Ë"GET", (
uöt32_t
Ë~
NGX_HTTP_GET
 },

4540 { (
u_ch¨
 *Ë"HEAD", (
uöt32_t
Ë~
NGX_HTTP_HEAD
 },

4541 { (
u_ch¨
 *Ë"POST", (
uöt32_t
Ë~
NGX_HTTP_POST
 },

4542 { (
u_ch¨
 *Ë"PUT", (
uöt32_t
Ë~
NGX_HTTP_PUT
 },

4543 { (
u_ch¨
 *Ë"DELETE", (
uöt32_t
Ë~
NGX_HTTP_DELETE
 },

4544 { (
u_ch¨
 *Ë"MKCOL", (
uöt32_t
Ë~
NGX_HTTP_MKCOL
 },

4545 { (
u_ch¨
 *Ë"COPY", (
uöt32_t
Ë~
NGX_HTTP_COPY
 },

4546 { (
u_ch¨
 *Ë"MOVE", (
uöt32_t
Ë~
NGX_HTTP_MOVE
 },

4547 { (
u_ch¨
 *Ë"OPTIONS", (
uöt32_t
Ë~
NGX_HTTP_OPTIONS
 },

4548 { (
u_ch¨
 *Ë"PROPFIND", (
uöt32_t
Ë~
NGX_HTTP_PROPFIND
 },

4549 { (
u_ch¨
 *Ë"PROPPATCH", (
uöt32_t
Ë~
NGX_HTTP_PROPPATCH
 },

4550 { (
u_ch¨
 *Ë"LOCK", (
uöt32_t
Ë~
NGX_HTTP_LOCK
 },

4551 { (
u_ch¨
 *Ë"UNLOCK", (
uöt32_t
Ë~
NGX_HTTP_UNLOCK
 },

4552 { (
u_ch¨
 *Ë"PATCH", (
uöt32_t
Ë~
NGX_HTTP_PATCH
 },

4553 { 
NULL
, 0 }

4558 
	$ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4560 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
 = 
c⁄f
;

4562 *
rv
;

4563 *
mc⁄f
;

4564 
ngx_°r_t
 *
vÆue
;

4565 
ngx_uöt_t
 
i
;

4566 
ngx_c⁄f_t
 
ßve
;

4567 
ngx_hâp_moduÀ_t
 *
moduÀ
;

4568 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

4569 
ngx_hâp_mëhod_«me_t
 *
«me
;

4570 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4572 i‡(
p˛cf
->
limô_ex˚±
) {

4576 
p˛cf
->
limô_ex˚±
 = 0xffffffff;

4578 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4580 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4581 
«me
 = 
ngx_mëhods_«mes
;Çame->name;Çame++) {

4583 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, 
«me
->name) == 0) {

4584 
p˛cf
->
limô_ex˚±
 &
«me
->
mëhod
;

4585 
√xt
;

4589 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4590 "övÆid mëhod \"%V\"", &
vÆue
[
i
]);

4591  
NGX_CONF_ERROR
;

4593 
√xt
:

4597 i‡(!(
p˛cf
->
limô_ex˚±
 & 
NGX_HTTP_GET
)) {

4598 
p˛cf
->
limô_ex˚±
 &(
uöt32_t
Ë~
NGX_HTTP_HEAD
;

4601 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

4602 i‡(
˘x
 =
NULL
) {

4603  
NGX_CONF_ERROR
;

4606 
p˘x
 = 
cf
->
˘x
;

4607 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

4608 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

4610 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4611 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4612  
NGX_CONF_ERROR
;

4615 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

4616 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4620 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

4622 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4624 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4625 i‡(
mc⁄f
 =
NULL
) {

4626  
NGX_CONF_ERROR
;

4629 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

4634 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

4635 
p˛cf
->
limô_ex˚±_loc_c⁄f
 = 
˘x
->
loc_c⁄f
;

4636 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

4637 
˛cf
->
«me
 = 
p˛cf
->name;

4638 
˛cf
->
n⁄ame
 = 1;

4639 
˛cf
->
lmt_ex˝t
 = 1;

4641 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

4642  
NGX_CONF_ERROR
;

4645 
ßve
 = *
cf
;

4646 
cf
->
˘x
 = ctx;

4647 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LMT_CONF
;

4649 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4651 *
cf
 = 
ßve
;

4653  
rv
;

4654 
	}
}

4658 
	$ngx_hâp_c‹e_£t_aio
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4660 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4662 
ngx_°r_t
 *
vÆue
;

4664 i‡(
˛cf
->
aio
 !
NGX_CONF_UNSET
) {

4668 #i‡(
NGX_THREADS
)

4669 
˛cf
->
thªad_poﬁ
 = 
NULL
;

4670 
˛cf
->
thªad_poﬁ_vÆue
 = 
NULL
;

4673 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4675 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4676 
˛cf
->
aio
 = 
NGX_HTTP_AIO_OFF
;

4677  
NGX_CONF_OK
;

4680 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

4681 #i‡(
NGX_HAVE_FILE_AIO
)

4682 
˛cf
->
aio
 = 
NGX_HTTP_AIO_ON
;

4683  
NGX_CONF_OK
;

4685 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4688  
NGX_CONF_ERROR
;

4692 #i‡(
NGX_HAVE_AIO_SENDFILE
)

4694 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "sendfile") == 0) {

4695 
˛cf
->
aio
 = 
NGX_HTTP_AIO_ON
;

4697 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4700  
NGX_CONF_OK
;

4705 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "threads", 7) == 0

4706 && (
vÆue
[1].
Àn
 =7 || vÆue[1].
d©a
[7] == '='))

4708 #i‡(
NGX_THREADS
)

4709 
ngx_°r_t
 
«me
;

4710 
ngx_thªad_poﬁ_t
 *
ç
;

4711 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4712 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4714 
˛cf
->
aio
 = 
NGX_HTTP_AIO_THREADS
;

4716 i‡(
vÆue
[1].
Àn
 >= 8) {

4717 
«me
.
Àn
 = 
vÆue
[1].len - 8;

4718 
«me
.
d©a
 = 
vÆue
[1].data + 8;

4720 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4722 
ccv
.
cf
 = cf;

4723 
ccv
.
vÆue
 = &
«me
;

4724 
ccv
.
com∂ex_vÆue
 = &
cv
;

4726 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4727  
NGX_CONF_ERROR
;

4730 i‡(
cv
.
Àngths
 !
NULL
) {

4731 
˛cf
->
thªad_poﬁ_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

4732 (
ngx_hâp_com∂ex_vÆue_t
));

4733 i‡(
˛cf
->
thªad_poﬁ_vÆue
 =
NULL
) {

4734  
NGX_CONF_ERROR
;

4737 *
˛cf
->
thªad_poﬁ_vÆue
 = 
cv
;

4739  
NGX_CONF_OK
;

4742 
ç
 = 
	`ngx_thªad_poﬁ_add
(
cf
, &
«me
);

4745 
ç
 = 
	`ngx_thªad_poﬁ_add
(
cf
, 
NULL
);

4748 i‡(
ç
 =
NULL
) {

4749  
NGX_CONF_ERROR
;

4752 
˛cf
->
thªad_poﬁ
 = 
ç
;

4754  
NGX_CONF_OK
;

4756 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4759  
NGX_CONF_ERROR
;

4764 
	}
}

4768 
	$ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4770 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4772 
ngx_°r_t
 *
vÆue
;

4774 i‡(
˛cf
->
dúe˘io
 !
NGX_CONF_UNSET
) {

4778 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4780 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4781 
˛cf
->
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

4782  
NGX_CONF_OK
;

4785 
˛cf
->
dúe˘io
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

4786 i‡(
˛cf
->
dúe˘io
 =(
off_t
Ë
NGX_ERROR
) {

4790  
NGX_CONF_OK
;

4791 
	}
}

4795 
	$ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4797 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4799 
u_ch¨
 *
p
;

4800 
ngx_öt_t
 
ovîwrôe
;

4801 
ngx_°r_t
 *
vÆue
, 
uri
, 
¨gs
;

4802 
ngx_uöt_t
 
i
, 
n
;

4803 
ngx_hâp_îr_∑ge_t
 *
îr
;

4804 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4805 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4807 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4808 
˛cf
->
îr‹_∑ges
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4809 (
ngx_hâp_îr_∑ge_t
));

4810 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4811  
NGX_CONF_ERROR
;

4815 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4817 
i
 = 
cf
->
¨gs
->
√…s
 - 2;

4819 i‡(
vÆue
[
i
].
d©a
[0] == '=') {

4820 i‡(
i
 == 1) {

4821 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4822 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4823  
NGX_CONF_ERROR
;

4826 i‡(
vÆue
[
i
].
Àn
 > 1) {

4827 
ovîwrôe
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[1], vÆue[i].
Àn
 - 1);

4829 i‡(
ovîwrôe
 =
NGX_ERROR
) {

4830 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4831 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4832  
NGX_CONF_ERROR
;

4836 
ovîwrôe
 = 0;

4839 
n
 = 2;

4842 
ovîwrôe
 = -1;

4843 
n
 = 1;

4846 
uri
 = 
vÆue
[
cf
->
¨gs
->
√…s
 - 1];

4848 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4850 
ccv
.
cf
 = cf;

4851 
ccv
.
vÆue
 = &
uri
;

4852 
ccv
.
com∂ex_vÆue
 = &
cv
;

4854 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4855  
NGX_CONF_ERROR
;

4858 
	`ngx_°r_nuŒ
(&
¨gs
);

4860 i‡(
cv
.
Àngths
 =
NULL
 && 
uri
.
Àn
 && uri.
d©a
[0] == '/') {

4861 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
uri
.
d©a
, '?');

4863 i‡(
p
) {

4864 
cv
.
vÆue
.
Àn
 = 
p
 - 
uri
.
d©a
;

4865 
cv
.
vÆue
.
d©a
 = 
uri
.data;

4866 
p
++;

4867 
¨gs
.
Àn
 = (
uri
.
d©a
 + uri.ÀnË- 
p
;

4868 
¨gs
.
d©a
 = 
p
;

4872 
i
 = 1; i < 
cf
->
¨gs
->
√…s
 - 
n
; i++) {

4873 
îr
 = 
	`ngx_¨øy_push
(
˛cf
->
îr‹_∑ges
);

4874 i‡(
îr
 =
NULL
) {

4875  
NGX_CONF_ERROR
;

4878 
îr
->
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

4880 i‡(
îr
->
°©us
 =
NGX_ERROR
 ||Érr->status == 499) {

4881 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4882 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4883  
NGX_CONF_ERROR
;

4886 i‡(
îr
->
°©us
 < 300 ||Érr->status > 599) {

4887 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4889 &
vÆue
[
i
]);

4890  
NGX_CONF_ERROR
;

4893 
îr
->
ovîwrôe
 = overwrite;

4895 i‡(
ovîwrôe
 == -1) {

4896 
îr
->
°©us
) {

4897 
NGX_HTTP_TO_HTTPS
:

4898 
NGX_HTTPS_CERT_ERROR
:

4899 
NGX_HTTPS_NO_CERT
:

4900 
îr
->
ovîwrôe
 = 
NGX_HTTP_BAD_REQUEST
;

4906 
îr
->
vÆue
 = 
cv
;

4907 
îr
->
¨gs
 =árgs;

4910  
NGX_CONF_OK
;

4911 
	}
}

4915 
	$ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4917 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4919 
ngx_°r_t
 *
vÆue
;

4920 
ngx_öt_t
 
code
;

4921 
ngx_uöt_t
 
i
, 
n
;

4922 
ngx_hâp_åy_fûe_t
 *
tf
;

4923 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4924 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

4926 i‡(
˛cf
->
åy_fûes
) {

4930 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

4932 
cmcf
->
åy_fûes
 = 1;

4934 
tf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, cf->
¨gs
->
√…s
 * (
ngx_hâp_åy_fûe_t
));

4935 i‡(
tf
 =
NULL
) {

4936  
NGX_CONF_ERROR
;

4939 
˛cf
->
åy_fûes
 = 
tf
;

4941 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4943 
i
 = 0; i < 
cf
->
¨gs
->
√…s
 - 1; i++) {

4945 
tf
[
i
].
«me
 = 
vÆue
[i + 1];

4947 i‡(
tf
[
i
].
«me
.
Àn
 > 0

4948 && 
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
 - 1] == '/'

4949 && 
i
 + 2 < 
cf
->
¨gs
->
√…s
)

4951 
tf
[
i
].
ã°_dú
 = 1;

4952 
tf
[
i
].
«me
.
Àn
--;

4953 
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
] = '\0';

4956 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
tf
[
i
].
«me
);

4958 i‡(
n
) {

4959 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4961 
sc
.
cf
 = cf;

4962 
sc
.
sour˚
 = &
tf
[
i
].
«me
;

4963 
sc
.
Àngths
 = &
tf
[
i
].lengths;

4964 
sc
.
vÆues
 = &
tf
[
i
].values;

4965 
sc
.
v¨übÀs
 = 
n
;

4966 
sc
.
com∂ëe_Àngths
 = 1;

4967 
sc
.
com∂ëe_vÆues
 = 1;

4969 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4970  
NGX_CONF_ERROR
;

4975 
tf
[
i
].
«me
.
Àn
++;

4979 i‡(
tf
[
i
 - 1].
«me
.
d©a
[0] == '=') {

4981 
code
 = 
	`ngx_©oi
(
tf
[
i
 - 1].
«me
.
d©a
 + 1,Åf[ò- 1].«me.
Àn
 - 2);

4983 i‡(
code
 =
NGX_ERROR
 || code > 999) {

4984 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4986 
tf
[
i
 - 1].
«me
.
Àn
 - 1,Åf[ò- 1].«me.
d©a
);

4987  
NGX_CONF_ERROR
;

4990 
tf
[
i
].
code
 = code;

4993  
NGX_CONF_OK
;

4994 
	}
}

4998 
	$ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5000 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5002 
time_t
 
öa˘ive
;

5003 
ngx_°r_t
 *
vÆue
, 
s
;

5004 
ngx_öt_t
 
max
;

5005 
ngx_uöt_t
 
i
;

5007 i‡(
˛cf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

5011 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5013 
max
 = 0;

5014 
öa˘ive
 = 60;

5016 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5018 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

5020 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

5021 i‡(
max
 <= 0) {

5022 
Áûed
;

5028 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

5030 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

5031 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

5033 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

5034 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

5035 
Áûed
;

5041 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

5043 
˛cf
->
›í_fûe_ˇche
 = 
NULL
;

5048 
Áûed
:

5050 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5052 &
vÆue
[
i
]);

5053  
NGX_CONF_ERROR
;

5056 i‡(
˛cf
->
›í_fûe_ˇche
 =
NULL
) {

5057  
NGX_CONF_OK
;

5060 i‡(
max
 == 0) {

5061 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5063  
NGX_CONF_ERROR
;

5066 
˛cf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

5067 i‡(
˛cf
->
›í_fûe_ˇche
) {

5068  
NGX_CONF_OK
;

5071  
NGX_CONF_ERROR
;

5072 
	}
}

5076 
	$ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5078 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5080  
	`ngx_log_£t_log
(
cf
, &
˛cf
->
îr‹_log
);

5081 
	}
}

5085 
	$ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5087 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5089 
ngx_°r_t
 *
vÆue
;

5091 i‡(
˛cf
->
kì∑live_timeout
 !
NGX_CONF_UNSET_MSEC
) {

5095 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5097 
˛cf
->
kì∑live_timeout
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

5099 i‡(
˛cf
->
kì∑live_timeout
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

5103 i‡(
cf
->
¨gs
->
√…s
 == 2) {

5104  
NGX_CONF_OK
;

5107 
˛cf
->
kì∑live_hódî
 = 
	`ngx_∑r£_time
(&
vÆue
[2], 1);

5109 i‡(
˛cf
->
kì∑live_hódî
 =(
time_t
Ë
NGX_ERROR
) {

5113  
NGX_CONF_OK
;

5114 
	}
}

5118 
	$ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5120 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5122 i‡(
˛cf
->
öã∫Æ
 !
NGX_CONF_UNSET
) {

5126 
˛cf
->
öã∫Æ
 = 1;

5128  
NGX_CONF_OK
;

5129 
	}
}

5133 
	$ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5135 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5137 
ngx_°r_t
 *
vÆue
;

5139 i‡(
˛cf
->
ªsﬁvî
) {

5143 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5145 
˛cf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

5146 i‡(
˛cf
->
ªsﬁvî
 =
NULL
) {

5147  
NGX_CONF_ERROR
;

5150  
NGX_CONF_OK
;

5151 
	}
}

5154 #i‡(
NGX_HTTP_GZIP
)

5157 
	$ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5159 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5161 #i‡(
NGX_PCRE
)

5163 
ngx_°r_t
 *
vÆue
;

5164 
ngx_uöt_t
 
i
;

5165 
ngx_ªgex_ñt_t
 *
ª
;

5166 
ngx_ªgex_compûe_t
 
rc
;

5167 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

5169 i‡(
˛cf
->
gzù_dißbÀ
 =
NGX_CONF_UNSET_PTR
) {

5170 
˛cf
->
gzù_dißbÀ
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

5171 (
ngx_ªgex_ñt_t
));

5172 i‡(
˛cf
->
gzù_dißbÀ
 =
NULL
) {

5173  
NGX_CONF_ERROR
;

5177 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5179 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

5181 
rc
.
poﬁ
 = 
cf
->pool;

5182 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

5183 
rc
.
îr
.
d©a
 = 
îr°r
;

5185 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5187 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

5188 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

5192 #i‡(
NGX_HTTP_DEGRADATION
)

5194 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

5195 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

5201 
ª
 = 
	`ngx_¨øy_push
(
˛cf
->
gzù_dißbÀ
);

5202 i‡(
ª
 =
NULL
) {

5203  
NGX_CONF_ERROR
;

5206 
rc
.
∑âîn
 = 
vÆue
[
i
];

5207 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

5209 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

5210 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

5211  
NGX_CONF_ERROR
;

5214 
ª
->
ªgex
 = 
rc
.regex;

5215 
ª
->
«me
 = 
vÆue
[
i
].
d©a
;

5218  
NGX_CONF_OK
;

5221 
ngx_°r_t
 *
vÆue
;

5222 
ngx_uöt_t
 
i
;

5224 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5226 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5227 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

5228 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

5232 #i‡(
NGX_HTTP_DEGRADATION
)

5234 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

5235 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

5241 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5245  
NGX_CONF_ERROR
;

5248  
NGX_CONF_OK
;

5251 
	}
}

5256 #i‡(
NGX_HAVE_OPENAT
)

5259 
	$ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5261 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5263 
ngx_°r_t
 *
vÆue
;

5264 
ngx_uöt_t
 
i
;

5265 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

5267 i‡(
˛cf
->
dißbÀ_symlöks
 !
NGX_CONF_UNSET_UINT
) {

5271 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5273 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5275 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

5276 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

5280 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "if_not_owner") == 0) {

5281 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_NOTOWNER
;

5285 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "on") == 0) {

5286 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_ON
;

5290 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "from=", 5) == 0) {

5291 
vÆue
[
i
].
Àn
 -= 5;

5292 
vÆue
[
i
].
d©a
 += 5;

5294 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

5296 
ccv
.
cf
 = cf;

5297 
ccv
.
vÆue
 = &vÆue[
i
];

5298 
ccv
.
com∂ex_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

5299 (
ngx_hâp_com∂ex_vÆue_t
));

5300 i‡(
ccv
.
com∂ex_vÆue
 =
NULL
) {

5301  
NGX_CONF_ERROR
;

5304 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

5305  
NGX_CONF_ERROR
;

5308 
˛cf
->
dißbÀ_symlöks_‰om
 = 
ccv
.
com∂ex_vÆue
;

5313 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5314 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

5315  
NGX_CONF_ERROR
;

5318 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_CONF_UNSET_UINT
) {

5319 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5322 &
cmd
->
«me
);

5323  
NGX_CONF_ERROR
;

5326 i‡(
cf
->
¨gs
->
√…s
 == 2) {

5327 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NULL
;

5328  
NGX_CONF_OK
;

5331 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NGX_CONF_UNSET_PTR
) {

5332 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5334 &
vÆue
[1], &value[2]);

5335  
NGX_CONF_ERROR
;

5338 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

5339 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5341  
NGX_CONF_ERROR
;

5344  
NGX_CONF_OK
;

5345 
	}
}

5351 
	$ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5353 #i‡(
NGX_FREEBSD
)

5354 
ssize_t
 *
≈
 = 
d©a
;

5356 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

5357 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5360 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

5362  
NGX_CONF_ERROR
;

5365 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

5366 
ssize_t
 *
≈
 = 
d©a
;

5368 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

5371 *
≈
 = 0;

5375  
NGX_CONF_OK
;

5376 
	}
}

5380 
	$ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5382 
size_t
 *
•
 = 
d©a
;

5384 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

5385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5387 
NGX_MIN_POOL_SIZE
);

5388  
NGX_CONF_ERROR
;

5391 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

5392 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5394 
NGX_POOL_ALIGNMENT
);

5395  
NGX_CONF_ERROR
;

5398  
NGX_CONF_OK
;

5399 
	}
}

	@src/http/ngx_http_core_module.h

8 #i‚de‡
_NGX_HTTP_CORE_H_INCLUDED_


9 
	#_NGX_HTTP_CORE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

16 #i‡(
NGX_THREADS
)

17 
	~<ngx_thªad_poﬁ.h
>

21 
	#NGX_HTTP_GZIP_PROXIED_OFF
 0x0002

	)

22 
	#NGX_HTTP_GZIP_PROXIED_EXPIRED
 0x0004

	)

23 
	#NGX_HTTP_GZIP_PROXIED_NO_CACHE
 0x0008

	)

24 
	#NGX_HTTP_GZIP_PROXIED_NO_STORE
 0x0010

	)

25 
	#NGX_HTTP_GZIP_PROXIED_PRIVATE
 0x0020

	)

26 
	#NGX_HTTP_GZIP_PROXIED_NO_LM
 0x0040

	)

27 
	#NGX_HTTP_GZIP_PROXIED_NO_ETAG
 0x0080

	)

28 
	#NGX_HTTP_GZIP_PROXIED_AUTH
 0x0100

	)

29 
	#NGX_HTTP_GZIP_PROXIED_ANY
 0x0200

	)

32 
	#NGX_HTTP_AIO_OFF
 0

	)

33 
	#NGX_HTTP_AIO_ON
 1

	)

34 
	#NGX_HTTP_AIO_THREADS
 2

	)

37 
	#NGX_HTTP_SATISFY_ALL
 0

	)

38 
	#NGX_HTTP_SATISFY_ANY
 1

	)

41 
	#NGX_HTTP_LINGERING_OFF
 0

	)

42 
	#NGX_HTTP_LINGERING_ON
 1

	)

43 
	#NGX_HTTP_LINGERING_ALWAYS
 2

	)

46 
	#NGX_HTTP_IMS_OFF
 0

	)

47 
	#NGX_HTTP_IMS_EXACT
 1

	)

48 
	#NGX_HTTP_IMS_BEFORE
 2

	)

51 
	#NGX_HTTP_KEEPALIVE_DISABLE_NONE
 0x0002

	)

52 
	#NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 0x0004

	)

53 
	#NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 0x0008

	)

56 
ngx_hâp_loˇti⁄_åì_node_s
 
	tngx_hâp_loˇti⁄_åì_node_t
;

57 
ngx_hâp_c‹e_loc_c⁄f_s
 
	tngx_hâp_c‹e_loc_c⁄f_t
;

62 
sockaddr
 
	msockaddr
;

63 
sockaddr_ö
 
	msockaddr_ö
;

64 #i‡(
NGX_HAVE_INET6
)

65 
sockaddr_ö6
 
	msockaddr_ö6
;

67 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

68 
sockaddr_un
 
	msockaddr_un
;

70 
u_ch¨
 
	msockaddr_d©a
[
NGX_SOCKADDRLEN
];

71 } 
	mu
;

73 
sockÀn_t
 
	msockÀn
;

75 
	m£t
:1;

76 
	mdeÁu…_£rvî
:1;

77 
	mböd
:1;

78 
	mwûdˇrd
:1;

79 #i‡(
NGX_HTTP_SSL
)

80 
	ms¶
:1;

82 #i‡(
NGX_HTTP_SPDY
)

83 
	m•dy
:1;

85 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

86 
	mùv6⁄ly
:1;

88 
	mso_kì∑live
:2;

89 
	m¥oxy_¥Ÿocﬁ
:1;

91 
	mbacklog
;

92 
	mrcvbuf
;

93 
	m¢dbuf
;

94 #i‡(
NGX_HAVE_SETFIB
)

95 
	m£tfib
;

97 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

98 
	mÁ°›í
;

100 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

101 
	mt˝_kìpidÀ
;

102 
	mt˝_kìpötvl
;

103 
	mt˝_kìp˙t
;

106 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

107 *
	mac˚±_fûãr
;

109 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

110 
ngx_uöt_t
 
	mde„ºed_ac˚±
;

113 
u_ch¨
 
	maddr
[
NGX_SOCKADDR_STRLEN
 + 1];

114 } 
	tngx_hâp_li°í_›t_t
;

118 
	mNGX_HTTP_POST_READ_PHASE
 = 0,

120 
	mNGX_HTTP_SERVER_REWRITE_PHASE
,

122 
	mNGX_HTTP_FIND_CONFIG_PHASE
,

123 
	mNGX_HTTP_REWRITE_PHASE
,

124 
	mNGX_HTTP_POST_REWRITE_PHASE
,

126 
	mNGX_HTTP_PREACCESS_PHASE
,

128 
	mNGX_HTTP_ACCESS_PHASE
,

129 
	mNGX_HTTP_POST_ACCESS_PHASE
,

131 
	mNGX_HTTP_TRY_FILES_PHASE
,

132 
	mNGX_HTTP_CONTENT_PHASE
,

134 
	mNGX_HTTP_LOG_PHASE


135 } 
	tngx_hâp_pha£s
;

137 
ngx_hâp_pha£_h™dÀr_s
 
	tngx_hâp_pha£_h™dÀr_t
;

139 
	$ngx_öt_t
 (*
	tngx_hâp_pha£_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

140 
	tngx_hâp_pha£_h™dÀr_t
 *
	tph
);

142 
	sngx_hâp_pha£_h™dÀr_s
 {

143 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

144 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

145 
ngx_uöt_t
 
√xt
;

150 
ngx_hâp_pha£_h™dÀr_t
 *
h™dÀrs
;

151 
ngx_uöt_t
 
£rvî_ªwrôe_ödex
;

152 
ngx_uöt_t
 
loˇti⁄_ªwrôe_ödex
;

153 } 
	tngx_hâp_pha£_ígöe_t
;

157 
ngx_¨øy_t
 
h™dÀrs
;

158 } 
	tngx_hâp_pha£_t
;

162 
ngx_¨øy_t
 
£rvîs
;

164 
ngx_hâp_pha£_ígöe_t
 
pha£_ígöe
;

166 
ngx_hash_t
 
hódîs_ö_hash
;

168 
ngx_hash_t
 
v¨übÀs_hash
;

170 
ngx_¨øy_t
 
v¨übÀs
;

171 
ngx_uöt_t
 
nˇ±uªs
;

173 
ngx_uöt_t
 
£rvî_«mes_hash_max_size
;

174 
ngx_uöt_t
 
£rvî_«mes_hash_buckë_size
;

176 
ngx_uöt_t
 
v¨übÀs_hash_max_size
;

177 
ngx_uöt_t
 
v¨übÀs_hash_buckë_size
;

179 
ngx_hash_keys_¨øys_t
 *
v¨übÀs_keys
;

181 
ngx_¨øy_t
 *
p‹ts
;

183 
ngx_uöt_t
 
åy_fûes
;

185 
ngx_hâp_pha£_t
 
pha£s
[
NGX_HTTP_LOG_PHASE
 + 1];

186 } 
	tngx_hâp_c‹e_maö_c⁄f_t
;

191 
ngx_¨øy_t
 
£rvî_«mes
;

194 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

196 
ngx_°r_t
 
£rvî_«me
;

198 
size_t
 
c⁄√˘i⁄_poﬁ_size
;

199 
size_t
 
ªque°_poﬁ_size
;

200 
size_t
 
˛õ¡_hódî_buf„r_size
;

202 
ngx_bufs_t
 
œrge_˛õ¡_hódî_buf„rs
;

204 
ngx_m£c_t
 
˛õ¡_hódî_timeout
;

206 
ngx_Êag_t
 
ign‹e_övÆid_hódîs
;

207 
ngx_Êag_t
 
mîge_¶ashes
;

208 
ngx_Êag_t
 
undîsc‹es_ö_hódîs
;

210 
li°í
:1;

211 #i‡(
NGX_PCRE
)

212 
ˇ±uªs
:1;

215 
ngx_hâp_c‹e_loc_c⁄f_t
 **
«med_loˇti⁄s
;

216 } 
	tngx_hâp_c‹e_§v_c⁄f_t
;

223 #i‡(
NGX_PCRE
)

224 
ngx_hâp_ªgex_t
 *
ªgex
;

226 
ngx_hâp_c‹e_§v_c⁄f_t
 *
£rvî
;

227 
ngx_°r_t
 
«me
;

228 } 
	tngx_hâp_£rvî_«me_t
;

232 
ngx_hash_comböed_t
 
«mes
;

234 
ngx_uöt_t
 
ƒegex
;

235 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

236 } 
	tngx_hâp_vútuÆ_«mes_t
;

239 
	sngx_hâp_addr_c⁄f_s
 {

241 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

243 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
;

245 #i‡(
NGX_HTTP_SSL
)

246 
s¶
:1;

248 #i‡(
NGX_HTTP_SPDY
)

249 
•dy
:1;

251 
¥oxy_¥Ÿocﬁ
:1;

256 
ö_addr_t
 
addr
;

257 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

258 } 
	tngx_hâp_ö_addr_t
;

261 #i‡(
NGX_HAVE_INET6
)

264 
ö6_addr
 
addr6
;

265 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

266 } 
	tngx_hâp_ö6_addr_t
;

273 *
addrs
;

274 
ngx_uöt_t
 
«ddrs
;

275 } 
	tngx_hâp_p‹t_t
;

279 
ngx_öt_t
 
Ámûy
;

280 
ö_p‹t_t
 
p‹t
;

281 
ngx_¨øy_t
 
addrs
;

282 } 
	tngx_hâp_c⁄f_p‹t_t
;

286 
ngx_hâp_li°í_›t_t
 
›t
;

288 
ngx_hash_t
 
hash
;

289 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

290 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

292 #i‡(
NGX_PCRE
)

293 
ngx_uöt_t
 
ƒegex
;

294 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

298 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

299 
ngx_¨øy_t
 
£rvîs
;

300 } 
	tngx_hâp_c⁄f_addr_t
;

304 
ngx_öt_t
 
°©us
;

305 
ngx_öt_t
 
ovîwrôe
;

306 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

307 
ngx_°r_t
 
¨gs
;

308 } 
	tngx_hâp_îr_∑ge_t
;

312 
ngx_¨øy_t
 *
Àngths
;

313 
ngx_¨øy_t
 *
vÆues
;

314 
ngx_°r_t
 
«me
;

316 
code
:10;

317 
ã°_dú
:1;

318 } 
	tngx_hâp_åy_fûe_t
;

321 
	sngx_hâp_c‹e_loc_c⁄f_s
 {

322 
ngx_°r_t
 
«me
;

324 #i‡(
NGX_PCRE
)

325 
ngx_hâp_ªgex_t
 *
ªgex
;

328 
n⁄ame
:1;

329 
lmt_ex˝t
:1;

330 
«med
:1;

332 
exa˘_m©ch
:1;

333 
n‹egex
:1;

335 
auto_ªdúe˘
:1;

336 #i‡(
NGX_HTTP_GZIP
)

337 
gzù_dißbÀ_msõ6
:2;

338 #i‡(
NGX_HTTP_DEGRADATION
)

339 
gzù_dißbÀ_degød©i⁄
:2;

343 
ngx_hâp_loˇti⁄_åì_node_t
 *
°©ic_loˇti⁄s
;

344 #i‡(
NGX_PCRE
)

345 
ngx_hâp_c‹e_loc_c⁄f_t
 **
ªgex_loˇti⁄s
;

349 **
loc_c⁄f
;

351 
uöt32_t
 
limô_ex˚±
;

352 **
limô_ex˚±_loc_c⁄f
;

354 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

357 
size_t
 
Æüs
;

358 
ngx_°r_t
 
roŸ
;

359 
ngx_°r_t
 
po°_a˘i⁄
;

361 
ngx_¨øy_t
 *
roŸ_Àngths
;

362 
ngx_¨øy_t
 *
roŸ_vÆues
;

364 
ngx_¨øy_t
 *
ty≥s
;

365 
ngx_hash_t
 
ty≥s_hash
;

366 
ngx_°r_t
 
deÁu…_ty≥
;

368 
off_t
 
˛õ¡_max_body_size
;

369 
off_t
 
dúe˘io
;

370 
off_t
 
dúe˘io_Æignmít
;

372 
size_t
 
˛õ¡_body_buf„r_size
;

373 
size_t
 
£nd_low©
;

374 
size_t
 
po°p⁄e_ouçut
;

375 
size_t
 
limô_øã
;

376 
size_t
 
limô_øã_a·î
;

377 
size_t
 
£ndfûe_max_chunk
;

378 
size_t
 
ªad_ahód
;

380 
ngx_m£c_t
 
˛õ¡_body_timeout
;

381 
ngx_m£c_t
 
£nd_timeout
;

382 
ngx_m£c_t
 
kì∑live_timeout
;

383 
ngx_m£c_t
 
lögîög_time
;

384 
ngx_m£c_t
 
lögîög_timeout
;

385 
ngx_m£c_t
 
ªsﬁvî_timeout
;

387 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

389 
time_t
 
kì∑live_hódî
;

391 
ngx_uöt_t
 
kì∑live_ªque°s
;

392 
ngx_uöt_t
 
kì∑live_dißbÀ
;

393 
ngx_uöt_t
 
ßtisfy
;

394 
ngx_uöt_t
 
lögîög_˛o£
;

395 
ngx_uöt_t
 
if_modifõd_sö˚
;

396 
ngx_uöt_t
 
max_ønges
;

397 
ngx_uöt_t
 
˛õ¡_body_ö_fûe_⁄ly
;

399 
ngx_Êag_t
 
˛õ¡_body_ö_sögÀ_buf„r
;

401 
ngx_Êag_t
 
öã∫Æ
;

402 
ngx_Êag_t
 
£ndfûe
;

403 
ngx_Êag_t
 
aio
;

404 
ngx_Êag_t
 
t˝_n›ush
;

405 
ngx_Êag_t
 
t˝_nodñay
;

406 
ngx_Êag_t
 
ª£t_timedout_c⁄√˘i⁄
;

407 
ngx_Êag_t
 
£rvî_«me_ö_ªdúe˘
;

408 
ngx_Êag_t
 
p‹t_ö_ªdúe˘
;

409 
ngx_Êag_t
 
msõ_∑ddög
;

410 
ngx_Êag_t
 
msõ_ª‰esh
;

411 
ngx_Êag_t
 
log_nŸ_found
;

412 
ngx_Êag_t
 
log_subªque°
;

413 
ngx_Êag_t
 
ªcursive_îr‹_∑ges
;

414 
ngx_Êag_t
 
£rvî_tokís
;

415 
ngx_Êag_t
 
chunked_å™s„r_ícodög
;

416 
ngx_Êag_t
 
ëag
;

418 #i‡(
NGX_HTTP_GZIP
)

419 
ngx_Êag_t
 
gzù_v¨y
;

421 
ngx_uöt_t
 
gzù_hâp_vîsi⁄
;

422 
ngx_uöt_t
 
gzù_¥oxõd
;

424 #i‡(
NGX_PCRE
)

425 
ngx_¨øy_t
 *
gzù_dißbÀ
;

429 #i‡(
NGX_THREADS
)

430 
ngx_thªad_poﬁ_t
 *
thªad_poﬁ
;

431 
ngx_hâp_com∂ex_vÆue_t
 *
thªad_poﬁ_vÆue
;

434 #i‡(
NGX_HAVE_OPENAT
)

435 
ngx_uöt_t
 
dißbÀ_symlöks
;

436 
ngx_hâp_com∂ex_vÆue_t
 *
dißbÀ_symlöks_‰om
;

439 
ngx_¨øy_t
 *
îr‹_∑ges
;

440 
ngx_hâp_åy_fûe_t
 *
åy_fûes
;

442 
ngx_∑th_t
 *
˛õ¡_body_ãmp_∑th
;

444 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

445 
time_t
 
›í_fûe_ˇche_vÆid
;

446 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

447 
ngx_Êag_t
 
›í_fûe_ˇche_îr‹s
;

448 
ngx_Êag_t
 
›í_fûe_ˇche_evíts
;

450 
ngx_log_t
 *
îr‹_log
;

452 
ngx_uöt_t
 
ty≥s_hash_max_size
;

453 
ngx_uöt_t
 
ty≥s_hash_buckë_size
;

455 
ngx_queue_t
 *
loˇti⁄s
;

458 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev_loˇti⁄
;

464 
ngx_queue_t
 
queue
;

465 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

466 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

467 
ngx_°r_t
 *
«me
;

468 
u_ch¨
 *
fûe_«me
;

469 
ngx_uöt_t
 
löe
;

470 
ngx_queue_t
 
li°
;

471 } 
	tngx_hâp_loˇti⁄_queue_t
;

474 
	sngx_hâp_loˇti⁄_åì_node_s
 {

475 
ngx_hâp_loˇti⁄_åì_node_t
 *
À·
;

476 
ngx_hâp_loˇti⁄_åì_node_t
 *
right
;

477 
ngx_hâp_loˇti⁄_åì_node_t
 *
åì
;

479 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

480 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

482 
u_ch¨
 
auto_ªdúe˘
;

483 
u_ch¨
 
Àn
;

484 
u_ch¨
 
«me
[1];

488 
	`ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
);

489 
ngx_öt_t
 
	`ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
,

490 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

491 
ngx_öt_t
 
	`ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

492 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

493 
ngx_öt_t
 
	`ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

494 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

495 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

496 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

497 
ngx_öt_t
 
	`ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

498 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

499 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

500 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

501 
ngx_öt_t
 
	`ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

502 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

503 
ngx_öt_t
 
	`ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

504 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

507 *
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
);

508 
ngx_öt_t
 
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
);

509 
	`ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
);

510 
ngx_öt_t
 
	`ngx_hâp_£t_ëag
(
ngx_hâp_ªque°_t
 *
r
);

511 
	`ngx_hâp_wók_ëag
(
ngx_hâp_ªque°_t
 *
r
);

512 
ngx_öt_t
 
	`ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

513 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
);

514 
u_ch¨
 *
	`ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

515 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
);

516 
ngx_öt_t
 
	`ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
);

517 #i‡(
NGX_HTTP_GZIP
)

518 
ngx_öt_t
 
	`ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
);

522 
ngx_öt_t
 
	`ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

523 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
§
,

524 
ngx_hâp_po°_subªque°_t
 *
p§
, 
ngx_uöt_t
 
Êags
);

525 
ngx_öt_t
 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

526 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
);

527 
ngx_öt_t
 
	`ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

530 
ngx_hâp_˛ónup_t
 *
	`ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
);

533 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_hódî_fûãr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

534 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_body_fûãr_±
)

535 (
	tngx_hâp_ªque°_t
 *
	tr
, 
	tngx_chaö_t
 *
	tchaö
);

536 
	$ngx_öt_t
 (*
	tngx_hâp_ªque°_body_fûãr_±
)

537 (
	tngx_hâp_ªque°_t
 *
	tr
, 
	tngx_chaö_t
 *
	tchaö
);

540 
ngx_öt_t
 
	`ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

541 
ngx_öt_t
 
	`ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

542 
ngx_öt_t
 
	`ngx_hâp_ªque°_body_ßve_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

543 
ngx_chaö_t
 *
chaö
);

546 
ngx_öt_t
 
	`ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

547 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
);

549 
ngx_öt_t
 
	`ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

550 
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
vÆue
,Çgx_¨øy_à*
¥oxõs
,

551 
ªcursive
);

554 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

556 
ngx_uöt_t
 
ngx_hâp_max_moduÀ
;

558 
ngx_°r_t
 
ngx_hâp_c‹e_gë_mëhod
;

561 
	#ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
) \

563 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1; \

564 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) { \

565 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0; \

566 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
; \

567 
	}

	)
}

569 
	#ngx_hâp_˛ór_ac˚±_ønges
(
r
) \

571 
r
->
Ælow_ønges
 = 0; \

572 i‡(
r
->
hódîs_out
.
ac˚±_ønges
) { \

573 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 0; \

574 
r
->
hódîs_out
.
ac˚±_ønges
 = 
NULL
; \

575 }

	)

577 
	#ngx_hâp_˛ór_œ°_modifõd
(
r
) \

579 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1; \

580 i‡(
r
->
hódîs_out
.
œ°_modifõd
) { \

581 
r
->
hódîs_out
.
œ°_modifõd
->
hash
 = 0; \

582 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
; \

583 }

	)

585 
	#ngx_hâp_˛ór_loˇti⁄
(
r
) \

587 i‡(
r
->
hódîs_out
.
loˇti⁄
) { \

588 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0; \

589 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
; \

590 }

	)

592 
	#ngx_hâp_˛ór_ëag
(
r
) \

594 i‡(
r
->
hódîs_out
.
ëag
) { \

595 
r
->
hódîs_out
.
ëag
->
hash
 = 0; \

596 
r
->
hódîs_out
.
ëag
 = 
NULL
; \

597 }

	)

	@src/http/ngx_http_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

14 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_ˇche_t
 *
c
);

16 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
);

17 
ngx_hâp_fûe_ˇche_lock_waô
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_hâp_ˇche_t
 *
c
);

19 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
,

20 
ngx_hâp_ˇche_t
 *
c
);

21 
ssize_t
 
ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_hâp_ˇche_t
 *
c
);

23 #i‡(
NGX_HAVE_FILE_AIO
)

24 
ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

26 #i‡(
NGX_THREADS
)

27 
ngx_öt_t
 
ngx_hâp_ˇche_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
,

28 
ngx_fûe_t
 *
fûe
);

29 
ngx_hâp_ˇche_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

31 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

32 
ngx_hâp_ˇche_t
 *
c
);

33 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
,

34 
ngx_∑th_t
 *
∑th
);

35 
ngx_hâp_fûe_ˇche_node_t
 *

36 
ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
);

37 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

38 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

39 
ngx_hâp_fûe_ˇche_v¨y
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
v¨y
,

40 
size_t
 
Àn
, 
u_ch¨
 *
hash
);

41 
ngx_hâp_fûe_ˇche_v¨y_hódî
(
ngx_hâp_ªque°_t
 *
r
,

42 
ngx_md5_t
 *
md5
, 
ngx_°r_t
 *
«me
);

43 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_ª›í
(
ngx_hâp_ªque°_t
 *
r
,

44 
ngx_hâp_ˇche_t
 *
c
);

45 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_upd©e_v¨ü¡
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_ˇche_t
 *
c
);

47 
ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
);

48 
time_t
 
ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

49 
time_t
 
ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

50 
ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

51 
ngx_queue_t
 *
q
, 
u_ch¨
 *
«me
);

52 
ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

53 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
,

54 
ngx_°r_t
 *
∑th
);

55 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
,

56 
ngx_°r_t
 *
∑th
);

57 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_m™age_dúe˘‹y
(
ngx_åì_˘x_t
 *
˘x
,

58 
ngx_°r_t
 *
∑th
);

59 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
,

60 
ngx_°r_t
 *
∑th
);

61 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

62 
ngx_hâp_ˇche_t
 *
c
);

63 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
,

64 
ngx_°r_t
 *
∑th
);

67 
ngx_°r_t
 
	gngx_hâp_ˇche_°©us
[] = {

68 
ngx_°rög
("MISS"),

69 
ngx_°rög
("BYPASS"),

70 
ngx_°rög
("EXPIRED"),

71 
ngx_°rög
("STALE"),

72 
ngx_°rög
("UPDATING"),

73 
ngx_°rög
("REVALIDATED"),

74 
ngx_°rög
("HIT")

78 
u_ch¨
 
	gngx_hâp_fûe_ˇche_key
[] = { 
LF
, 'K', 'E', 'Y', ':', ' ' };

81 
ngx_öt_t


82 
	$ngx_hâp_fûe_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

84 
ngx_hâp_fûe_ˇche_t
 *
oˇche
 = 
d©a
;

86 
size_t
 
Àn
;

87 
ngx_uöt_t
 
n
;

88 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

90 
ˇche
 = 
shm_z⁄e
->
d©a
;

92 i‡(
oˇche
) {

93 i‡(
	`ngx_°rcmp
(
ˇche
->
∑th
->
«me
.
d©a
, 
oˇche
->path->name.data) != 0) {

94 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

97 &
shm_z⁄e
->
shm
.
«me
, &
ˇche
->
∑th
->name,

98 &
oˇche
->
∑th
->
«me
);

100  
NGX_ERROR
;

103 
n
 = 0;Ç < 3;Ç++) {

104 i‡(
ˇche
->
∑th
->
Àvñ
[
n
] !
oˇche
->path->level[n]) {

105 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

107 &
shm_z⁄e
->
shm
.
«me
);

108  
NGX_ERROR
;

112 
ˇche
->
sh
 = 
oˇche
->sh;

114 
ˇche
->
shpoﬁ
 = 
oˇche
->shpool;

115 
ˇche
->
bsize
 = 
oˇche
->bsize;

117 
ˇche
->
max_size
 /ˇche->
bsize
;

119 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

120 
ˇche
->
∑th
->
lﬂdî
 = 
NULL
;

123  
NGX_OK
;

126 
ˇche
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

128 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

129 
ˇche
->
sh
 = cache->
shpoﬁ
->
d©a
;

130 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

132  
NGX_OK
;

135 
ˇche
->
sh
 = 
	`ngx_¶ab_Æloc
(ˇche->
shpoﬁ
, (
ngx_hâp_fûe_ˇche_sh_t
));

136 i‡(
ˇche
->
sh
 =
NULL
) {

137  
NGX_ERROR
;

140 
ˇche
->
shpoﬁ
->
d©a
 = cache->
sh
;

142 
	`ngx_rbåì_öô
(&
ˇche
->
sh
->
rbåì
, &ˇche->sh->
£¡öñ
,

143 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
);

145 
	`ngx_queue_öô
(&
ˇche
->
sh
->
queue
);

147 
ˇche
->
sh
->
cﬁd
 = 1;

148 
ˇche
->
sh
->
lﬂdög
 = 0;

149 
ˇche
->
sh
->
size
 = 0;

151 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

153 
ˇche
->
max_size
 /ˇche->
bsize
;

155 
Àn
 = (" i¿ˇchêkey†z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

157 
ˇche
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(ˇche->shpoﬁ, 
Àn
);

158 i‡(
ˇche
->
shpoﬁ
->
log_˘x
 =
NULL
) {

159  
NGX_ERROR
;

162 
	`ngx_•rötf
(
ˇche
->
shpoﬁ
->
log_˘x
, " in cache keys zone \"%V\"%Z",

163 &
shm_z⁄e
->
shm
.
«me
);

165 
ˇche
->
shpoﬁ
->
log_nomem
 = 0;

167  
NGX_OK
;

168 
	}
}

171 
ngx_öt_t


172 
	$ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
)

174 
ngx_hâp_ˇche_t
 *
c
;

176 
c
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ˇche_t
));

177 i‡(
c
 =
NULL
) {

178  
NGX_ERROR
;

181 i‡(
	`ngx_¨øy_öô
(&
c
->
keys
, 
r
->
poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
) {

182  
NGX_ERROR
;

185 
r
->
ˇche
 = 
c
;

186 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

187 
c
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

189  
NGX_OK
;

190 
	}
}

193 
ngx_öt_t


194 
	$ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

196 
ngx_hâp_ˇche_t
 *
c
;

197 
ngx_poﬁ_˛ónup_t
 *
˛n
;

198 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

200 
c
 = 
r
->
ˇche
;

201 
ˇche
 = 
c
->
fûe_ˇche
;

203 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

204 i‡(
˛n
 =
NULL
) {

205  
NGX_ERROR
;

208 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

209 
˛n
->
d©a
 = 
c
;

211 i‡(
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
Ë=
NGX_ERROR
) {

212  
NGX_ERROR
;

215 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

216  
NGX_ERROR
;

219  
NGX_OK
;

220 
	}
}

224 
	$ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

226 
size_t
 
Àn
;

227 
ngx_°r_t
 *
key
;

228 
ngx_uöt_t
 
i
;

229 
ngx_md5_t
 
md5
;

230 
ngx_hâp_ˇche_t
 *
c
;

232 
c
 = 
r
->
ˇche
;

234 
Àn
 = 0;

236 
	`ngx_¸c32_öô
(
c
->
¸c32
);

237 
	`ngx_md5_öô
(&
md5
);

239 
key
 = 
c
->
keys
.
ñts
;

240 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

241 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

242 "hâ∞ˇchêkey: \"%V\"", &
key
[
i
]);

244 
Àn
 +
key
[
i
].len;

246 
	`ngx_¸c32_upd©e
(&
c
->
¸c32
, 
key
[
i
].
d©a
, key[i].
Àn
);

247 
	`ngx_md5_upd©e
(&
md5
, 
key
[
i
].
d©a
, key[i].
Àn
);

250 
c
->
hódî_°¨t
 = (
ngx_hâp_fûe_ˇche_hódî_t
)

251 + (
ngx_hâp_fûe_ˇche_key
Ë+ 
Àn
 + 1;

253 
	`ngx_¸c32_föÆ
(
c
->
¸c32
);

254 
	`ngx_md5_föÆ
(
c
->
key
, &
md5
);

256 
	`ngx_mem˝y
(
c
->
maö
, c->
key
, 
NGX_HTTP_CACHE_KEY_LEN
);

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
)

263 
ngx_öt_t
 
rc
, 
rv
;

264 
ngx_uöt_t
 
ã°
;

265 
ngx_hâp_ˇche_t
 *
c
;

266 
ngx_poﬁ_˛ónup_t
 *
˛n
;

267 
ngx_›í_fûe_öfo_t
 
of
;

268 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

269 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

271 
c
 = 
r
->
ˇche
;

273 i‡(
c
->
waôög
) {

274  
NGX_AGAIN
;

277 i‡(
c
->
ªadög
) {

278  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

281 
ˇche
 = 
c
->
fûe_ˇche
;

283 i‡(
c
->
node
 =
NULL
) {

284 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

285 i‡(
˛n
 =
NULL
) {

286  
NGX_ERROR
;

289 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

290 
˛n
->
d©a
 = 
c
;

293 
rc
 = 
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
);

295 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

296 "hâ∞fûêˇchêexi°s: %òe:%d", 
rc
, 
c
->
exi°s
);

298 i‡(
rc
 =
NGX_ERROR
) {

299  
rc
;

302 i‡(
rc
 =
NGX_AGAIN
) {

303  
NGX_HTTP_CACHE_SCARCE
;

306 i‡(
rc
 =
NGX_OK
) {

308 i‡(
c
->
îr‹
) {

309  
c
->
îr‹
;

312 
c
->
ãmp_fûe
 = 1;

313 
ã°
 = 
c
->
exi°s
 ? 1 : 0;

314 
rv
 = 
NGX_DECLINED
;

318 
ã°
 = 
ˇche
->
sh
->
cﬁd
 ? 1 : 0;

320 i‡(
c
->
mö_u£s
 > 1) {

322 i‡(!
ã°
) {

323  
NGX_HTTP_CACHE_SCARCE
;

326 
rv
 = 
NGX_HTTP_CACHE_SCARCE
;

329 
c
->
ãmp_fûe
 = 1;

330 
rv
 = 
NGX_DECLINED
;

334 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

335  
NGX_ERROR
;

338 i‡(!
ã°
) {

339 
d⁄e
;

342 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

344 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

346 
of
.
uniq
 = 
c
->uniq;

347 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

348 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

349 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

350 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

351 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

353 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
c
->
fûe
.
«me
, &
of
, 
r
->
poﬁ
)

354 !
NGX_OK
)

356 
of
.
îr
) {

359  
NGX_ERROR
;

361 
NGX_ENOENT
:

362 
NGX_ENOTDIR
:

363 
d⁄e
;

366 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

367 
ngx_›í_fûe_n
 " \"%s\" faûed", 
c
->
fûe
.
«me
.
d©a
);

368  
NGX_ERROR
;

372 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

373 "hâ∞fûêˇchêfd: %d", 
of
.
fd
);

375 
c
->
fûe
.
fd
 = 
of
.fd;

376 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

377 
c
->
uniq
 = 
of
.uniq;

378 
c
->
Àngth
 = 
of
.
size
;

379 
c
->
fs_size
 = (
of
.fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

381 
c
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, c->
body_°¨t
);

382 i‡(
c
->
buf
 =
NULL
) {

383  
NGX_ERROR
;

386  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

388 
d⁄e
:

390 i‡(
rv
 =
NGX_DECLINED
) {

391  
	`ngx_hâp_fûe_ˇche_lock
(
r
, 
c
);

394  
rv
;

395 
	}
}

398 
ngx_öt_t


399 
	$ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

401 
ngx_m£c_t
 
now
, 
timî
;

402 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

404 i‡(!
c
->
lock
) {

405  
NGX_DECLINED
;

408 
now
 = 
ngx_cuºít_m£c
;

410 
ˇche
 = 
c
->
fûe_ˇche
;

412 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

414 
timî
 = 
c
->
node
->
lock_time
 - 
now
;

416 i‡(!
c
->
node
->
upd©ög
 || (
ngx_m£c_öt_t
Ë
timî
 <= 0) {

417 
c
->
node
->
upd©ög
 = 1;

418 
c
->
node
->
lock_time
 = 
now
 + c->
lock_age
;

419 
c
->
upd©ög
 = 1;

420 
c
->
lock_time
 = c->
node
->lock_time;

423 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

425 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

427 
c
->
upd©ög
, c->
waô_time
);

429 i‡(
c
->
upd©ög
) {

430  
NGX_DECLINED
;

433 i‡(
c
->
lock_timeout
 == 0) {

434  
NGX_HTTP_CACHE_SCARCE
;

437 
c
->
waôög
 = 1;

439 i‡(
c
->
waô_time
 == 0) {

440 
c
->
waô_time
 = 
now
 + c->
lock_timeout
;

442 
c
->
waô_evít
.
h™dÀr
 = 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
;

443 
c
->
waô_evít
.
d©a
 = 
r
;

444 
c
->
waô_evít
.
log
 = 
r
->
c⁄√˘i⁄
->log;

447 
timî
 = 
c
->
waô_time
 - 
now
;

449 
	`ngx_add_timî
(&
c
->
waô_evít
, (
timî
 > 500) ? 500 :Åimer);

451 
r
->
maö
->
blocked
++;

453  
NGX_AGAIN
;

454 
	}
}

458 
	$ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
)

460 
ngx_c⁄√˘i⁄_t
 *
c
;

461 
ngx_hâp_ªque°_t
 *
r
;

463 
r
 = 
ev
->
d©a
;

464 
c
 = 
r
->
c⁄√˘i⁄
;

466 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

468 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

469 "hâ∞fûêˇchêwaô: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

471 
	`ngx_hâp_fûe_ˇche_lock_waô
(
r
,Ñ->
ˇche
);

473 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

474 
	}
}

478 
	$ngx_hâp_fûe_ˇche_lock_waô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

480 
ngx_uöt_t
 
waô
;

481 
ngx_m£c_t
 
now
, 
timî
;

482 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

484 
now
 = 
ngx_cuºít_m£c
;

486 
timî
 = 
c
->
waô_time
 - 
now
;

488 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

489 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

491 
c
->
lock_timeout
 = 0;

492 
wakeup
;

495 
ˇche
 = 
c
->
fûe_ˇche
;

496 
waô
 = 0;

498 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

500 
timî
 = 
c
->
node
->
lock_time
 - 
now
;

502 i‡(
c
->
node
->
upd©ög
 && (
ngx_m£c_öt_t
Ë
timî
 > 0) {

503 
waô
 = 1;

506 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

508 i‡(
waô
) {

509 
	`ngx_add_timî
(&
c
->
waô_evít
, (
timî
 > 500) ? 500 :Åimer);

513 
wakeup
:

515 
c
->
waôög
 = 0;

516 
r
->
maö
->
blocked
--;

517 
r
->
	`wrôe_evít_h™dÀr
(r);

518 
	}
}

521 
ngx_öt_t


522 
	$ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

524 
time_t
 
now
;

525 
ssize_t
 
n
;

526 
ngx_öt_t
 
rc
;

527 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

528 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
;

530 
n
 = 
	`ngx_hâp_fûe_ˇche_aio_ªad
(
r
, 
c
);

532 i‡(
n
 < 0) {

533  
n
;

536 i‡((
size_t
Ë
n
 < 
c
->
hódî_°¨t
) {

537 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

538 "ˇchêfûê\"%s\" i†toÿsmÆl", 
c
->
fûe
.
«me
.
d©a
);

539  
NGX_DECLINED
;

542 
h
 = (
ngx_hâp_fûe_ˇche_hódî_t
 *Ë
c
->
buf
->
pos
;

544 i‡(
h
->
vîsi⁄
 !
NGX_HTTP_CACHE_VERSION
) {

545 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

546 "ˇchêfûê\"%s\" vîsi⁄ mism©ch", 
c
->
fûe
.
«me
.
d©a
);

547  
NGX_DECLINED
;

550 i‡(
h
->
¸c32
 !
c
->crc32) {

551 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

552 "ˇchêfûê\"%s\" ha†md5 cﬁlisi⁄", 
c
->
fûe
.
«me
.
d©a
);

553  
NGX_DECLINED
;

556 i‡((
size_t
Ë
h
->
body_°¨t
 > 
c
->body_start) {

557 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

559 
c
->
fûe
.
«me
.
d©a
);

560  
NGX_DECLINED
;

563 i‡(
h
->
v¨y_Àn
 > 
NGX_HTTP_CACHE_VARY_LEN
) {

564 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

566 
c
->
fûe
.
«me
.
d©a
);

567  
NGX_DECLINED
;

570 i‡(
h
->
v¨y_Àn
) {

571 
	`ngx_hâp_fûe_ˇche_v¨y
(
r
, 
h
->
v¨y
, h->
v¨y_Àn
, 
c
->
v¨ü¡
);

573 i‡(
	`ngx_memcmp
(
c
->
v¨ü¡
, 
h
->v¨ü¡, 
NGX_HTTP_CACHE_KEY_LEN
) != 0) {

574 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

576  
	`ngx_hâp_fûe_ˇche_ª›í
(
r
, 
c
);

580 
c
->
buf
->
œ°
 +
n
;

582 
c
->
vÆid_£c
 = 
h
->valid_sec;

583 
c
->
œ°_modifõd
 = 
h
->last_modified;

584 
c
->
d©e
 = 
h
->date;

585 
c
->
vÆid_m£c
 = 
h
->valid_msec;

586 
c
->
hódî_°¨t
 = 
h
->header_start;

587 
c
->
body_°¨t
 = 
h
->body_start;

588 
c
->
ëag
.
Àn
 = 
h
->
ëag_Àn
;

589 
c
->
ëag
.
d©a
 = 
h
->etag;

591 
r
->
ˇched
 = 1;

593 
ˇche
 = 
c
->
fûe_ˇche
;

595 i‡(
ˇche
->
sh
->
cﬁd
) {

597 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

599 i‡(!
c
->
node
->
exi°s
) {

600 
c
->
node
->
u£s
 = 1;

601 
c
->
node
->
body_°¨t
 = c->body_start;

602 
c
->
node
->
exi°s
 = 1;

603 
c
->
node
->
uniq
 = c->uniq;

604 
c
->
node
->
fs_size
 = c->fs_size;

606 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

609 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

612 
now
 = 
	`ngx_time
();

614 i‡(
c
->
vÆid_£c
 < 
now
) {

616 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

618 i‡(
c
->
node
->
upd©ög
) {

619 
rc
 = 
NGX_HTTP_CACHE_UPDATING
;

622 
c
->
node
->
upd©ög
 = 1;

623 
c
->
upd©ög
 = 1;

624 
c
->
lock_time
 = c->
node
->lock_time;

625 
rc
 = 
NGX_HTTP_CACHE_STALE
;

628 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

630 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

632 
rc
, 
c
->
vÆid_£c
, 
now
);

634  
rc
;

637  
NGX_OK
;

638 
	}
}

641 
ssize_t


642 
	$ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

644 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_THREADS
)

645 
ssize_t
 
n
;

646 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

648 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

651 #i‡(
NGX_HAVE_FILE_AIO
)

653 i‡(
˛cf
->
aio
 =
NGX_HTTP_AIO_ON
 && 
ngx_fûe_aio
) {

654 
n
 = 
	`ngx_fûe_aio_ªad
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0, 
r
->
poﬁ
);

656 i‡(
n
 !
NGX_AGAIN
) {

657 
c
->
ªadög
 = 0;

658  
n
;

661 
c
->
ªadög
 = 1;

663 
c
->
fûe
.
aio
->
d©a
 = 
r
;

664 
c
->
fûe
.
aio
->
h™dÀr
 = 
ngx_hâp_ˇche_aio_evít_h™dÀr
;

666 
r
->
maö
->
blocked
++;

667 
r
->
aio
 = 1;

669  
NGX_AGAIN
;

674 #i‡(
NGX_THREADS
)

676 i‡(
˛cf
->
aio
 =
NGX_HTTP_AIO_THREADS
) {

677 
c
->
fûe
.
thªad_h™dÀr
 = 
ngx_hâp_ˇche_thªad_h™dÀr
;

678 
c
->
fûe
.
thªad_˘x
 = 
r
;

680 
n
 = 
	`ngx_thªad_ªad
(&
c
->
thªad_èsk
, &c->
fûe
, c->
buf
->
pos
,

681 
c
->
body_°¨t
, 0, 
r
->
poﬁ
);

683 
c
->
ªadög
 = (
n
 =
NGX_AGAIN
);

685  
n
;

690  
	`ngx_ªad_fûe
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0);

691 
	}
}

694 #i‡(
NGX_HAVE_FILE_AIO
)

697 
	$ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

699 
ngx_evít_aio_t
 *
aio
;

700 
ngx_c⁄√˘i⁄_t
 *
c
;

701 
ngx_hâp_ªque°_t
 *
r
;

703 
aio
 = 
ev
->
d©a
;

704 
r
 = 
aio
->
d©a
;

705 
c
 = 
r
->
c⁄√˘i⁄
;

707 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

709 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

710 "hâ∞fûêˇchêaio: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

712 
r
->
maö
->
blocked
--;

713 
r
->
aio
 = 0;

715 
r
->
	`wrôe_evít_h™dÀr
(r);

717 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

718 
	}
}

723 #i‡(
NGX_THREADS
)

725 
ngx_öt_t


726 
	$ngx_hâp_ˇche_thªad_h™dÀr
(
ngx_thªad_èsk_t
 *
èsk
, 
ngx_fûe_t
 *
fûe
)

728 
ngx_°r_t
 
«me
;

729 
ngx_thªad_poﬁ_t
 *
ç
;

730 
ngx_hâp_ªque°_t
 *
r
;

731 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

733 
r
 = 
fûe
->
thªad_˘x
;

735 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

736 
ç
 = 
˛cf
->
thªad_poﬁ
;

738 i‡(
ç
 =
NULL
) {

739 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
thªad_poﬁ_vÆue
, &
«me
)

740 !
NGX_OK
)

742  
NGX_ERROR
;

745 
ç
 = 
	`ngx_thªad_poﬁ_gë
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
«me
);

747 i‡(
ç
 =
NULL
) {

748 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

749 "thªadÖoﬁ \"%V\"ÇŸ found", &
«me
);

750  
NGX_ERROR
;

754 
èsk
->
evít
.
d©a
 = 
r
;

755 
èsk
->
evít
.
h™dÀr
 = 
ngx_hâp_ˇche_thªad_evít_h™dÀr
;

757 i‡(
	`ngx_thªad_èsk_po°
(
ç
, 
èsk
Ë!
NGX_OK
) {

758  
NGX_ERROR
;

761 
r
->
maö
->
blocked
++;

762 
r
->
aio
 = 1;

764  
NGX_OK
;

765 
	}
}

769 
	$ngx_hâp_ˇche_thªad_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

771 
ngx_c⁄√˘i⁄_t
 *
c
;

772 
ngx_hâp_ªque°_t
 *
r
;

774 
r
 = 
ev
->
d©a
;

775 
c
 = 
r
->
c⁄√˘i⁄
;

777 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

779 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

780 "hâ∞fûêˇchêthªad: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

782 
r
->
maö
->
blocked
--;

783 
r
->
aio
 = 0;

785 
r
->
	`wrôe_evít_h™dÀr
(r);

787 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

788 
	}
}

793 
ngx_öt_t


794 
	$ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

796 
ngx_öt_t
 
rc
;

797 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

799 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

801 
f˙
 = 
c
->
node
;

803 i‡(
f˙
 =
NULL
) {

804 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

807 i‡(
f˙
) {

808 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

810 i‡(
c
->
node
 =
NULL
) {

811 
f˙
->
u£s
++;

812 
f˙
->
cou¡
++;

815 i‡(
f˙
->
îr‹
) {

817 i‡(
f˙
->
vÆid_£c
 < 
	`ngx_time
()) {

818 
ª√w
;

821 
rc
 = 
NGX_OK
;

823 
d⁄e
;

826 i‡(
f˙
->
exi°s
 || f˙->
u£s
 >
c
->
mö_u£s
) {

828 
c
->
exi°s
 = 
f˙
->exists;

829 i‡(
f˙
->
body_°¨t
) {

830 
c
->
body_°¨t
 = 
f˙
->body_start;

833 
rc
 = 
NGX_OK
;

835 
d⁄e
;

838 
rc
 = 
NGX_AGAIN
;

840 
d⁄e
;

843 
f˙
 = 
	`ngx_¶ab_ˇŒoc_locked
(
ˇche
->
shpoﬁ
,

844 (
ngx_hâp_fûe_ˇche_node_t
));

845 i‡(
f˙
 =
NULL
) {

846 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

848 (Ë
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

850 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

852 
f˙
 = 
	`ngx_¶ab_ˇŒoc_locked
(
ˇche
->
shpoﬁ
,

853 (
ngx_hâp_fûe_ˇche_node_t
));

854 i‡(
f˙
 =
NULL
) {

855 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

856 "couldÇŸáŒoˇãÇode%s", 
ˇche
->
shpoﬁ
->
log_˘x
);

857 
rc
 = 
NGX_ERROR
;

858 
Áûed
;

862 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

864 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

865 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

867 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

869 
f˙
->
u£s
 = 1;

870 
f˙
->
cou¡
 = 1;

872 
ª√w
:

874 
rc
 = 
NGX_DECLINED
;

876 
f˙
->
vÆid_m£c
 = 0;

877 
f˙
->
îr‹
 = 0;

878 
f˙
->
exi°s
 = 0;

879 
f˙
->
vÆid_£c
 = 0;

880 
f˙
->
uniq
 = 0;

881 
f˙
->
body_°¨t
 = 0;

882 
f˙
->
fs_size
 = 0;

884 
d⁄e
:

886 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

888 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

890 
c
->
uniq
 = 
f˙
->uniq;

891 
c
->
îr‹
 = 
f˙
->error;

892 
c
->
node
 = 
f˙
;

894 
Áûed
:

896 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

898  
rc
;

899 
	}
}

902 
ngx_öt_t


903 
	$ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_∑th_t
 *
∑th
)

905 
u_ch¨
 *
p
;

906 
ngx_hâp_ˇche_t
 *
c
;

908 
c
 = 
r
->
ˇche
;

910 i‡(
c
->
fûe
.
«me
.
Àn
) {

911  
NGX_OK
;

914 
c
->
fûe
.
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len

915 + 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

917 
c
->
fûe
.
«me
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, c->fûe.«me.
Àn
 + 1);

918 i‡(
c
->
fûe
.
«me
.
d©a
 =
NULL
) {

919  
NGX_ERROR
;

922 
	`ngx_mem˝y
(
c
->
fûe
.
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

924 
p
 = 
c
->
fûe
.
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

925 
p
 = 
	`ngx_hex_dump
’, 
c
->
key
, 
NGX_HTTP_CACHE_KEY_LEN
);

926 *
p
 = '\0';

928 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
c
->
fûe
.
«me
.
d©a
, c->fûe.«me.
Àn
);

930 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

931 "ˇchêfûe: \"%s\"", 
c
->
fûe
.
«me
.
d©a
);

933  
NGX_OK
;

934 
	}
}

937 
ngx_hâp_fûe_ˇche_node_t
 *

938 
	$ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
)

940 
ngx_öt_t
 
rc
;

941 
ngx_rbåì_key_t
 
node_key
;

942 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

943 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

945 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
node_key
, 
key
, (
ngx_rbåì_key_t
));

947 
node
 = 
ˇche
->
sh
->
rbåì
.
roŸ
;

948 
£¡öñ
 = 
ˇche
->
sh
->
rbåì
.sentinel;

950 
node
 !
£¡öñ
) {

952 i‡(
node_key
 < 
node
->
key
) {

953 
node
 =Çode->
À·
;

957 i‡(
node_key
 > 
node
->
key
) {

958 
node
 =Çode->
right
;

964 
f˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

966 
rc
 = 
	`ngx_memcmp
(&
key
[(
ngx_rbåì_key_t
)], 
f˙
->key,

967 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

969 i‡(
rc
 == 0) {

970  
f˙
;

973 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

978  
NULL
;

979 
	}
}

983 
	$ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

984 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

986 
ngx_rbåì_node_t
 **
p
;

987 
ngx_hâp_fûe_ˇche_node_t
 *
˙
, *
˙t
;

991 i‡(
node
->
key
 < 
ãmp
->key) {

993 
p
 = &
ãmp
->
À·
;

995 } i‡(
node
->
key
 > 
ãmp
->key) {

997 
p
 = &
ãmp
->
right
;

1001 
˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

1002 
˙t
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
ãmp
;

1004 
p
 = (
	`ngx_memcmp
(
˙
->
key
, 
˙t
->key,

1005 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
))

1007 ? &
ãmp
->
À·
 : &ãmp->
right
;

1010 i‡(*
p
 =
£¡öñ
) {

1014 
ãmp
 = *
p
;

1017 *
p
 = 
node
;

1018 
node
->
∑ª¡
 = 
ãmp
;

1019 
node
->
À·
 = 
£¡öñ
;

1020 
node
->
right
 = 
£¡öñ
;

1021 
	`ngx_rbt_ªd
(
node
);

1022 
	}
}

1026 
	$ngx_hâp_fûe_ˇche_v¨y
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
v¨y
, 
size_t
 
Àn
,

1027 
u_ch¨
 *
hash
)

1029 
u_ch¨
 *
p
, *
œ°
;

1030 
ngx_°r_t
 
«me
;

1031 
ngx_md5_t
 
md5
;

1032 
u_ch¨
 
buf
[
NGX_HTTP_CACHE_VARY_LEN
];

1034 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1035 "hâ∞fûêˇchêv¨y: \"%*s\"", 
Àn
, 
v¨y
);

1037 
	`ngx_md5_öô
(&
md5
);

1038 
	`ngx_md5_upd©e
(&
md5
, 
r
->
ˇche
->
maö
, 
NGX_HTTP_CACHE_KEY_LEN
);

1040 
	`ngx_°æow
(
buf
, 
v¨y
, 
Àn
);

1042 
p
 = 
buf
;

1043 
œ°
 = 
buf
 + 
Àn
;

1045 
p
 < 
œ°
) {

1047 
p
 < 
œ°
 && (*p == ' ' || *p == ',')) {Ö++; }

1049 
«me
.
d©a
 = 
p
;

1051 
p
 < 
œ°
 && *p != ',' && *p != ' ') {Ö++; }

1053 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

1055 i‡(
«me
.
Àn
 == 0) {

1059 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1060 "hâ∞fûêˇchêv¨y: %V", &
«me
);

1062 
	`ngx_md5_upd©e
(&
md5
, 
«me
.
d©a
,Çame.
Àn
);

1063 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *) ":", (":") - 1);

1065 
	`ngx_hâp_fûe_ˇche_v¨y_hódî
(
r
, &
md5
, &
«me
);

1067 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *Ë
CRLF
, (CRLF) - 1);

1070 
	`ngx_md5_föÆ
(
hash
, &
md5
);

1071 
	}
}

1075 
	$ngx_hâp_fûe_ˇche_v¨y_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_md5_t
 *
md5
,

1076 
ngx_°r_t
 *
«me
)

1078 
size_t
 
Àn
;

1079 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

1080 
ngx_uöt_t
 
i
, 
mu…ùÀ
, 
n‹mÆize
;

1081 
ngx_li°_∑π_t
 *
∑π
;

1082 
ngx_èbÀ_ñt_t
 *
hódî
;

1084 
mu…ùÀ
 = 0;

1085 
n‹mÆize
 = 0;

1087 i‡(
«me
->
Àn
 == ("Accept-Charset") - 1

1088 && 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "Accept-Charset",

1091 
n‹mÆize
 = 1;

1093 } i‡(
«me
->
Àn
 == ("Accept-Encoding") - 1

1094 && 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "Accept-Encoding",

1097 
n‹mÆize
 = 1;

1099 } i‡(
«me
->
Àn
 == ("Accept-Language") - 1

1100 && 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "Accept-Language",

1103 
n‹mÆize
 = 1;

1106 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1107 
hódî
 = 
∑π
->
ñts
;

1109 
i
 = 0; ; i++) {

1111 i‡(
i
 >
∑π
->
√…s
) {

1112 i‡(
∑π
->
√xt
 =
NULL
) {

1116 
∑π
 =Ö¨t->
√xt
;

1117 
hódî
 = 
∑π
->
ñts
;

1118 
i
 = 0;

1121 i‡(
hódî
[
i
].
hash
 == 0) {

1125 i‡(
hódî
[
i
].
key
.
Àn
 !
«me
->len) {

1129 i‡(
	`ngx_°∫ˇ£cmp
(
hódî
[
i
].
key
.
d©a
, 
«me
->d©a,Çame->
Àn
) != 0) {

1133 i‡(!
n‹mÆize
) {

1135 i‡(
mu…ùÀ
) {

1136 
	`ngx_md5_upd©e
(
md5
, (
u_ch¨
 *) ",", (",") - 1);

1139 
	`ngx_md5_upd©e
(
md5
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

1141 
mu…ùÀ
 = 1;

1148 
p
 = 
hódî
[
i
].
vÆue
.
d©a
;

1149 
œ°
 = 
p
 + 
hódî
[
i
].
vÆue
.
Àn
;

1151 
p
 < 
œ°
) {

1153 
p
 < 
œ°
 && (*p == ' ' || *p == ',')) {Ö++; }

1155 
°¨t
 = 
p
;

1157 
p
 < 
œ°
 && *p != ',' && *p != ' ') {Ö++; }

1159 
Àn
 = 
p
 - 
°¨t
;

1161 i‡(
Àn
 == 0) {

1165 i‡(
mu…ùÀ
) {

1166 
	`ngx_md5_upd©e
(
md5
, (
u_ch¨
 *) ",", (",") - 1);

1169 
	`ngx_md5_upd©e
(
md5
, 
°¨t
, 
Àn
);

1171 
mu…ùÀ
 = 1;

1174 
	}
}

1177 
ngx_öt_t


1178 
	$ngx_hâp_fûe_ˇche_ª›í
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

1180 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1182 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1185 i‡(
c
->
£c⁄d¨y
) {

1186 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1188 
c
->
fûe
.
«me
.
d©a
);

1189  
NGX_DECLINED
;

1192 
ˇche
 = 
c
->
fûe_ˇche
;

1194 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1196 
c
->
node
->
cou¡
--;

1197 
c
->
node
 = 
NULL
;

1199 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1201 
c
->
£c⁄d¨y
 = 1;

1202 
c
->
fûe
.
«me
.
Àn
 = 0;

1203 
c
->
body_°¨t
 = c->
buf
->
íd
 - c->buf->
°¨t
;

1205 
	`ngx_mem˝y
(
c
->
key
, c->
v¨ü¡
, 
NGX_HTTP_CACHE_KEY_LEN
);

1207  
	`ngx_hâp_fûe_ˇche_›í
(
r
);

1208 
	}
}

1211 
ngx_öt_t


1212 
	$ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
)

1214 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
 = (ngx_hâp_fûe_ˇche_hódî_à*Ë
buf
;

1216 
u_ch¨
 *
p
;

1217 
ngx_°r_t
 *
key
;

1218 
ngx_uöt_t
 
i
;

1219 
ngx_hâp_ˇche_t
 *
c
;

1221 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1224 
c
 = 
r
->
ˇche
;

1226 
	`ngx_memzîo
(
h
, (
ngx_hâp_fûe_ˇche_hódî_t
));

1228 
h
->
vîsi⁄
 = 
NGX_HTTP_CACHE_VERSION
;

1229 
h
->
vÆid_£c
 = 
c
->valid_sec;

1230 
h
->
œ°_modifõd
 = 
c
->last_modified;

1231 
h
->
d©e
 = 
c
->date;

1232 
h
->
¸c32
 = 
c
->crc32;

1233 
h
->
vÆid_m£c
 = (
u_sh‹t
Ë
c
->valid_msec;

1234 
h
->
hódî_°¨t
 = (
u_sh‹t
Ë
c
->header_start;

1235 
h
->
body_°¨t
 = (
u_sh‹t
Ë
c
->body_start;

1237 i‡(
c
->
ëag
.
Àn
 <
NGX_HTTP_CACHE_ETAG_LEN
) {

1238 
h
->
ëag_Àn
 = (
u_ch¨
Ë
c
->
ëag
.
Àn
;

1239 
	`ngx_mem˝y
(
h
->
ëag
, 
c
->ëag.
d©a
, c->ëag.
Àn
);

1242 i‡(
c
->
v¨y
.
Àn
) {

1243 i‡(
c
->
v¨y
.
Àn
 > 
NGX_HTTP_CACHE_VARY_LEN
) {

1245 
c
->
v¨y
.
Àn
 = 
NGX_HTTP_CACHE_VARY_LEN
;

1248 
h
->
v¨y_Àn
 = (
u_ch¨
Ë
c
->
v¨y
.
Àn
;

1249 
	`ngx_mem˝y
(
h
->
v¨y
, 
c
->v¨y.
d©a
, c->v¨y.
Àn
);

1251 
	`ngx_hâp_fûe_ˇche_v¨y
(
r
, 
c
->
v¨y
.
d©a
, c->v¨y.
Àn
, c->
v¨ü¡
);

1252 
	`ngx_mem˝y
(
h
->
v¨ü¡
, 
c
->v¨ü¡, 
NGX_HTTP_CACHE_KEY_LEN
);

1255 i‡(
	`ngx_hâp_fûe_ˇche_upd©e_v¨ü¡
(
r
, 
c
Ë!
NGX_OK
) {

1256  
NGX_ERROR
;

1259 
p
 = 
buf
 + (
ngx_hâp_fûe_ˇche_hódî_t
);

1261 
p
 = 
	`ngx_˝ymem
’, 
ngx_hâp_fûe_ˇche_key
, (ngx_http_file_cache_key));

1263 
key
 = 
c
->
keys
.
ñts
;

1264 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

1265 
p
 = 
	`ngx_c›y
’, 
key
[
i
].
d©a
, key[i].
Àn
);

1268 *
p
 = 
LF
;

1270  
NGX_OK
;

1271 
	}
}

1274 
ngx_öt_t


1275 
	$ngx_hâp_fûe_ˇche_upd©e_v¨ü¡
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

1277 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1279 i‡(!
c
->
£c⁄d¨y
) {

1280  
NGX_OK
;

1283 i‡(
c
->
v¨y
.
Àn


1284 && 
	`ngx_memcmp
(
c
->
v¨ü¡
, c->
key
, 
NGX_HTTP_CACHE_KEY_LEN
) == 0)

1286  
NGX_OK
;

1294 
ˇche
 = 
c
->
fûe_ˇche
;

1296 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1299 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1301 
c
->
node
->
cou¡
--;

1302 
c
->
node
->
upd©ög
 = 0;

1303 
c
->
node
 = 
NULL
;

1305 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1307 
c
->
fûe
.
«me
.
Àn
 = 0;

1309 
	`ngx_mem˝y
(
c
->
key
, c->
maö
, 
NGX_HTTP_CACHE_KEY_LEN
);

1311 i‡(
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
Ë=
NGX_ERROR
) {

1312  
NGX_ERROR
;

1315 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

1316  
NGX_ERROR
;

1319  
NGX_OK
;

1320 
	}
}

1324 
	$ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
)

1326 
off_t
 
fs_size
;

1327 
ngx_öt_t
 
rc
;

1328 
ngx_fûe_uniq_t
 
uniq
;

1329 
ngx_fûe_öfo_t
 
fi
;

1330 
ngx_hâp_ˇche_t
 *
c
;

1331 
ngx_ext_ª«me_fûe_t
 
ext
;

1332 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1334 
c
 = 
r
->
ˇche
;

1336 i‡(
c
->
upd©ed
) {

1340 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1343 
ˇche
 = 
c
->
fûe_ˇche
;

1345 
c
->
upd©ed
 = 1;

1346 
c
->
upd©ög
 = 0;

1348 
uniq
 = 0;

1349 
fs_size
 = 0;

1351 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1353 
tf
->
fûe
.
«me
.
d©a
, 
c
->file.name.data);

1355 
ext
.
ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

1356 
ext
.
∑th_ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

1357 
ext
.
time
 = -1;

1358 
ext
.
¸óã_∑th
 = 1;

1359 
ext
.
dñëe_fûe
 = 1;

1360 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

1362 
rc
 = 
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
c
->fûe.«me, &
ext
);

1364 i‡(
rc
 =
NGX_OK
) {

1366 i‡(
	`ngx_fd_öfo
(
tf
->
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1367 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1368 
ngx_fd_öfo_n
 " \"%s\" faûed", 
tf
->
fûe
.
«me
.
d©a
);

1370 
rc
 = 
NGX_ERROR
;

1373 
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

1374 
fs_size
 = (
	`ngx_fûe_fs_size
(&
fi
Ë+ 
ˇche
->
bsize
 - 1) / cache->bsize;

1378 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1380 
c
->
node
->
cou¡
--;

1381 
c
->
node
->
uniq
 = uniq;

1382 
c
->
node
->
body_°¨t
 = c->body_start;

1384 
ˇche
->
sh
->
size
 +
fs_size
 - 
c
->
node
->fs_size;

1385 
c
->
node
->
fs_size
 = fs_size;

1387 i‡(
rc
 =
NGX_OK
) {

1388 
c
->
node
->
exi°s
 = 1;

1391 
c
->
node
->
upd©ög
 = 0;

1393 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1394 
	}
}

1398 
	$ngx_hâp_fûe_ˇche_upd©e_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1400 
ssize_t
 
n
;

1401 
ngx_îr_t
 
îr
;

1402 
ngx_fûe_t
 
fûe
;

1403 
ngx_fûe_öfo_t
 
fi
;

1404 
ngx_hâp_ˇche_t
 *
c
;

1405 
ngx_hâp_fûe_ˇche_hódî_t
 
h
;

1407 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1410 
c
 = 
r
->
ˇche
;

1412 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1414 
fûe
.
«me
 = 
c
->file.name;

1415 
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

1416 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDWR
, 
NGX_FILE_OPEN
, 0);

1418 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1419 
îr
 = 
ngx_î∫o
;

1423 i‡(
îr
 =
NGX_ENOENT
) {

1424 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1426 
fûe
.
«me
.
d©a
);

1430 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

1431 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1440 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1441 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1442 
ngx_fd_öfo_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1443 
d⁄e
;

1446 i‡(
c
->
uniq
 !
	`ngx_fûe_uniq
(&
fi
)

1447 || 
c
->
Àngth
 !
	`ngx_fûe_size
(&
fi
))

1449 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1451 
fûe
.
«me
.
d©a
);

1452 
d⁄e
;

1455 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, (
u_ch¨
 *Ë&
h
,

1456 (
ngx_hâp_fûe_ˇche_hódî_t
), 0);

1458 i‡(
n
 =
NGX_ERROR
) {

1459 
d⁄e
;

1462 i‡((
size_t
Ë
n
 !(
ngx_hâp_fûe_ˇche_hódî_t
)) {

1463 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1464 
ngx_ªad_fûe_n
 "Ñead only %z of %z from \"%s\"",

1465 
n
, (
ngx_hâp_fûe_ˇche_hódî_t
), 
fûe
.
«me
.
d©a
);

1466 
d⁄e
;

1469 i‡(
h
.
vîsi⁄
 !
NGX_HTTP_CACHE_VERSION


1470 || 
h
.
œ°_modifõd
 !
c
->last_modified

1471 || 
h
.
¸c32
 !
c
->crc32

1472 || 
h
.
hódî_°¨t
 !
c
->header_start

1473 || 
h
.
body_°¨t
 !
c
->body_start)

1475 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1477 
fûe
.
«me
.
d©a
);

1478 
d⁄e
;

1486 
	`ngx_memzîo
(&
h
, (
ngx_hâp_fûe_ˇche_hódî_t
));

1488 
h
.
vîsi⁄
 = 
NGX_HTTP_CACHE_VERSION
;

1489 
h
.
vÆid_£c
 = 
c
->valid_sec;

1490 
h
.
œ°_modifõd
 = 
c
->last_modified;

1491 
h
.
d©e
 = 
c
->date;

1492 
h
.
¸c32
 = 
c
->crc32;

1493 
h
.
vÆid_m£c
 = (
u_sh‹t
Ë
c
->valid_msec;

1494 
h
.
hódî_°¨t
 = (
u_sh‹t
Ë
c
->header_start;

1495 
h
.
body_°¨t
 = (
u_sh‹t
Ë
c
->body_start;

1497 i‡(
c
->
ëag
.
Àn
 <
NGX_HTTP_CACHE_ETAG_LEN
) {

1498 
h
.
ëag_Àn
 = (
u_ch¨
Ë
c
->
ëag
.
Àn
;

1499 
	`ngx_mem˝y
(
h
.
ëag
, 
c
->ëag.
d©a
, c->ëag.
Àn
);

1502 i‡(
c
->
v¨y
.
Àn
) {

1503 i‡(
c
->
v¨y
.
Àn
 > 
NGX_HTTP_CACHE_VARY_LEN
) {

1505 
c
->
v¨y
.
Àn
 = 
NGX_HTTP_CACHE_VARY_LEN
;

1508 
h
.
v¨y_Àn
 = (
u_ch¨
Ë
c
->
v¨y
.
Àn
;

1509 
	`ngx_mem˝y
(
h
.
v¨y
, 
c
->v¨y.
d©a
, c->v¨y.
Àn
);

1511 
	`ngx_hâp_fûe_ˇche_v¨y
(
r
, 
c
->
v¨y
.
d©a
, c->v¨y.
Àn
, c->
v¨ü¡
);

1512 
	`ngx_mem˝y
(
h
.
v¨ü¡
, 
c
->v¨ü¡, 
NGX_HTTP_CACHE_KEY_LEN
);

1515 (Ë
	`ngx_wrôe_fûe
(&
fûe
, (
u_ch¨
 *Ë&
h
,

1516 (
ngx_hâp_fûe_ˇche_hódî_t
), 0);

1518 
d⁄e
:

1520 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1521 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1522 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1524 
	}
}

1527 
ngx_öt_t


1528 
	$ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
)

1530 
ngx_öt_t
 
rc
;

1531 
ngx_buf_t
 *
b
;

1532 
ngx_chaö_t
 
out
;

1533 
ngx_hâp_ˇche_t
 *
c
;

1535 
c
 = 
r
->
ˇche
;

1537 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1538 "hâ∞fûêˇchê£nd: %s", 
c
->
fûe
.
«me
.
d©a
);

1540 i‡(
r
 !r->
maö
 && 
c
->
Àngth
 - c->
body_°¨t
 == 0) {

1541  
	`ngx_hâp_£nd_hódî
(
r
);

1546 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

1547 i‡(
b
 =
NULL
) {

1548  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1551 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

1552 i‡(
b
->
fûe
 =
NULL
) {

1553  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1556 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1558 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1559  
rc
;

1562 
b
->
fûe_pos
 = 
c
->
body_°¨t
;

1563 
b
->
fûe_œ°
 = 
c
->
Àngth
;

1565 
b
->
ö_fûe
 = (
c
->
Àngth
 - c->
body_°¨t
) ? 1: 0;

1566 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

1567 
b
->
œ°_ö_chaö
 = 1;

1569 
b
->
fûe
->
fd
 = 
c
->file.fd;

1570 
b
->
fûe
->
«me
 = 
c
->file.name;

1571 
b
->
fûe
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1573 
out
.
buf
 = 
b
;

1574 
out
.
√xt
 = 
NULL
;

1576  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1577 
	}
}

1581 
	$ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
)

1583 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1584 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1586 i‡(
c
->
upd©ed
 || c->
node
 =
NULL
) {

1590 
ˇche
 = 
c
->
fûe_ˇche
;

1592 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1593 "hâ∞fûêˇchê‰ì, fd: %d", 
c
->
fûe
.
fd
);

1595 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1597 
f˙
 = 
c
->
node
;

1598 
f˙
->
cou¡
--;

1600 i‡(
c
->
upd©ög
 && 
f˙
->
lock_time
 == c->lock_time) {

1601 
f˙
->
upd©ög
 = 0;

1604 i‡(
c
->
îr‹
) {

1605 
f˙
->
îr‹
 = 
c
->error;

1607 i‡(
c
->
vÆid_£c
) {

1608 
f˙
->
vÆid_£c
 = 
c
->valid_sec;

1609 
f˙
->
vÆid_m£c
 = 
c
->valid_msec;

1612 } i‡(!
f˙
->
exi°s
 && f˙->
cou¡
 =0 && 
c
->
mö_u£s
 == 1) {

1613 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

1614 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1615 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1616 
c
->
node
 = 
NULL
;

1619 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1621 
c
->
upd©ed
 = 1;

1622 
c
->
upd©ög
 = 0;

1624 i‡(
c
->
ãmp_fûe
) {

1625 i‡(
tf
 &&Åf->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

1626 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1628 
tf
->
fûe
.
«me
.
d©a
);

1630 i‡(
	`ngx_dñëe_fûe
(
tf
->
fûe
.
«me
.
d©a
Ë=
NGX_FILE_ERROR
) {

1631 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
fûe
.
log
, 
ngx_î∫o
,

1632 
ngx_dñëe_fûe_n
 " \"%s\" failed",

1633 
tf
->
fûe
.
«me
.
d©a
);

1638 i‡(
c
->
waô_evít
.
timî_£t
) {

1639 
	`ngx_dñ_timî
(&
c
->
waô_evít
);

1641 
	}
}

1645 
	$ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
)

1647 
ngx_hâp_ˇche_t
 *
c
 = 
d©a
;

1649 i‡(
c
->
upd©ed
) {

1653 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1656 i‡(
c
->
upd©ög
) {

1657 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
fûe
.
log
, 0,

1658 "°ÆÀd cachêupd©ög,Éº‹:%ui", 
c
->
îr‹
);

1661 
	`ngx_hâp_fûe_ˇche_‰ì
(
c
, 
NULL
);

1662 
	}
}

1665 
time_t


1666 
	$ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1668 
u_ch¨
 *
«me
;

1669 
size_t
 
Àn
;

1670 
time_t
 
waô
;

1671 
ngx_uöt_t
 
åõs
;

1672 
ngx_∑th_t
 *
∑th
;

1673 
ngx_queue_t
 *
q
;

1674 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1676 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1679 
∑th
 = 
ˇche
->path;

1680 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1682 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1683 i‡(
«me
 =
NULL
) {

1687 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1689 
waô
 = 10;

1690 
åõs
 = 20;

1692 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1694 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1695 
q
 !
	`ngx_queue_£¡öñ
(&
ˇche
->
sh
->
queue
);

1696 
q
 = 
	`ngx_queue_¥ev
(q))

1698 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1700 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1702 
f˙
->
cou¡
, f˙->
exi°s
,

1703 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1705 i‡(
f˙
->
cou¡
 == 0) {

1706 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1707 
waô
 = 0;

1710 i‡(--
åõs
) {

1714 
waô
 = 1;

1720 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1722 
	`ngx_‰ì
(
«me
);

1724  
waô
;

1725 
	}
}

1728 
time_t


1729 
	$ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1731 
u_ch¨
 *
«me
, *
p
;

1732 
size_t
 
Àn
;

1733 
time_t
 
now
, 
waô
;

1734 
ngx_∑th_t
 *
∑th
;

1735 
ngx_queue_t
 *
q
;

1736 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1737 
u_ch¨
 
key
[2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1739 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1742 
∑th
 = 
ˇche
->path;

1743 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1745 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1746 i‡(
«me
 =
NULL
) {

1750 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1752 
now
 = 
	`ngx_time
();

1754 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1758 i‡(
ngx_quô
 || 
ngx_ãrmö©e
) {

1759 
waô
 = 1;

1763 i‡(
	`ngx_queue_em±y
(&
ˇche
->
sh
->
queue
)) {

1764 
waô
 = 10;

1768 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1770 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1772 
waô
 = 
f˙
->
expúe
 - 
now
;

1774 i‡(
waô
 > 0) {

1775 
waô
 = wait > 10 ? 10 : wait;

1779 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1781 
f˙
->
cou¡
, f˙->
exi°s
,

1782 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1784 i‡(
f˙
->
cou¡
 == 0) {

1785 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1789 i‡(
f˙
->
dñëög
) {

1790 
waô
 = 1;

1794 
p
 = 
	`ngx_hex_dump
(
key
, (
u_ch¨
 *Ë&
f˙
->
node
.key,

1795 (
ngx_rbåì_key_t
));

1796 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1797 (Ë
	`ngx_hex_dump
(
p
, 
f˙
->
key
, 
Àn
);

1805 
	`ngx_queue_ªmove
(
q
);

1806 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1807 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1809 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

1811 2 * 
NGX_HTTP_CACHE_KEY_LEN
, 
key
, 
f˙
->
cou¡
);

1814 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1816 
	`ngx_‰ì
(
«me
);

1818  
waô
;

1819 
	}
}

1823 
	$ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_queue_t
 *
q
,

1824 
u_ch¨
 *
«me
)

1826 
u_ch¨
 *
p
;

1827 
size_t
 
Àn
;

1828 
ngx_∑th_t
 *
∑th
;

1829 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1831 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1833 i‡(
f˙
->
exi°s
) {

1834 
ˇche
->
sh
->
size
 -
f˙
->
fs_size
;

1836 
∑th
 = 
ˇche
->path;

1837 
p
 = 
«me
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

1838 
p
 = 
	`ngx_hex_dump
’, (
u_ch¨
 *Ë&
f˙
->
node
.
key
,

1839 (
ngx_rbåì_key_t
));

1840 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1841 
p
 = 
	`ngx_hex_dump
’, 
f˙
->
key
, 
Àn
);

1842 *
p
 = '\0';

1844 
f˙
->
cou¡
++;

1845 
f˙
->
dñëög
 = 1;

1846 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1848 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1849 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
«me
, 
Àn
);

1851 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1852 "hâ∞fûêˇchêexpúe: \"%s\"", 
«me
);

1854 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1855 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1856 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1859 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1860 
f˙
->
cou¡
--;

1861 
f˙
->
dñëög
 = 0;

1864 i‡(
f˙
->
cou¡
 == 0) {

1865 
	`ngx_queue_ªmove
(
q
);

1866 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1867 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1869 
	}
}

1872 
time_t


1873 
	$ngx_hâp_fûe_ˇche_m™agî
(*
d©a
)

1875 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1877 
off_t
 
size
;

1878 
time_t
 
√xt
, 
waô
;

1880 
√xt
 = 
	`ngx_hâp_fûe_ˇche_expúe
(
ˇche
);

1882 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1883 
ˇche
->
fûes
 = 0;

1886 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1888 
size
 = 
ˇche
->
sh
->size;

1890 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1892 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1893 "hâ∞fûêˇchêsize: %O", 
size
);

1895 i‡(
size
 < 
ˇche
->
max_size
) {

1896  
√xt
;

1899 
waô
 = 
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

1901 i‡(
waô
 > 0) {

1902  
waô
;

1905 i‡(
ngx_quô
 || 
ngx_ãrmö©e
) {

1906  
√xt
;

1909 
	}
}

1913 
	$ngx_hâp_fûe_ˇche_lﬂdî
(*
d©a
)

1915 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1917 
ngx_åì_˘x_t
 
åì
;

1919 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

1923 i‡(!
	`ngx_©omic_cmp_£t
(&
ˇche
->
sh
->
lﬂdög
, 0, 
ngx_pid
)) {

1927 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1930 
åì
.
öô_h™dÀr
 = 
NULL
;

1931 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_fûe_ˇche_m™age_fûe
;

1932 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_m™age_dúe˘‹y
;

1933 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

1934 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_fûe_ˇche_dñëe_fûe
;

1935 
åì
.
d©a
 = 
ˇche
;

1936 
åì
.
Æloc
 = 0;

1937 
åì
.
log
 = 
ngx_cy˛e
->log;

1939 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1940 
ˇche
->
fûes
 = 0;

1942 i‡(
	`ngx_wÆk_åì
(&
åì
, &
ˇche
->
∑th
->
«me
Ë=
NGX_ABORT
) {

1943 
ˇche
->
sh
->
lﬂdög
 = 0;

1947 
ˇche
->
sh
->
cﬁd
 = 0;

1948 
ˇche
->
sh
->
lﬂdög
 = 0;

1950 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

1952 &
ˇche
->
∑th
->
«me
,

1953 ((Ë
ˇche
->
sh
->
size
 * cache->
bsize
) / (1024 * 1024),

1954 
ˇche
->
bsize
);

1955 
	}
}

1958 
ngx_öt_t


1959 
	$ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1961  
NGX_OK
;

1962 
	}
}

1965 
ngx_öt_t


1966 
	$ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1968 
ngx_m£c_t
 
ñ≠£d
;

1969 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1971 
ˇche
 = 
˘x
->
d©a
;

1973 i‡(
	`ngx_hâp_fûe_ˇche_add_fûe
(
˘x
, 
∑th
Ë!
NGX_OK
) {

1974 (Ë
	`ngx_hâp_fûe_ˇche_dñëe_fûe
(
˘x
, 
∑th
);

1977 i‡(++
ˇche
->
fûes
 >ˇche->
lﬂdî_fûes
) {

1978 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

1981 
	`ngx_time_upd©e
();

1983 
ñ≠£d
 = 
	`ngx_abs
((
ngx_m£c_öt_t
Ë(
ngx_cuºít_m£c
 - 
ˇche
->
œ°
));

1985 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1986 "hâ∞fûêˇchêlﬂdîÅimêñ≠£d: %M", 
ñ≠£d
);

1988 i‡(
ñ≠£d
 >
ˇche
->
lﬂdî_thªshﬁd
) {

1989 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

1993  (
ngx_quô
 || 
ngx_ãrmö©e
Ë? 
NGX_ABORT
 : 
NGX_OK
;

1994 
	}
}

1997 
ngx_öt_t


1998 
	$ngx_hâp_fûe_ˇche_m™age_dúe˘‹y
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

2000 i‡(
∑th
->
Àn
 >= 5

2001 && 
	`ngx_°∫cmp
(
∑th
->
d©a
 +Ö©h->
Àn
 - 5, "/temp", 5) == 0)

2003  
NGX_DECLINED
;

2006  
NGX_OK
;

2007 
	}
}

2011 
	$ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

2013 
	`ngx_m¶ìp
(
ˇche
->
lﬂdî_¶ìp
);

2015 
	`ngx_time_upd©e
();

2017 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

2018 
ˇche
->
fûes
 = 0;

2019 
	}
}

2022 
ngx_öt_t


2023 
	$ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
)

2025 
u_ch¨
 *
p
;

2026 
ngx_öt_t
 
n
;

2027 
ngx_uöt_t
 
i
;

2028 
ngx_hâp_ˇche_t
 
c
;

2029 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

2031 i‡(
«me
->
Àn
 < 2 * 
NGX_HTTP_CACHE_KEY_LEN
) {

2032  
NGX_ERROR
;

2035 i‡(
˘x
->
size
 < (
off_t
Ë(
ngx_hâp_fûe_ˇche_hódî_t
)) {

2036 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

2037 "ˇchêfûê\"%s\" i†toÿsmÆl", 
«me
->
d©a
);

2038  
NGX_ERROR
;

2041 
	`ngx_memzîo
(&
c
, (
ngx_hâp_ˇche_t
));

2042 
ˇche
 = 
˘x
->
d©a
;

2044 
c
.
Àngth
 = 
˘x
->
size
;

2045 
c
.
fs_size
 = (
˘x
->fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

2047 
p
 = &
«me
->
d©a
[«me->
Àn
 - 2 * 
NGX_HTTP_CACHE_KEY_LEN
];

2049 
i
 = 0; i < 
NGX_HTTP_CACHE_KEY_LEN
; i++) {

2050 
n
 = 
	`ngx_hextoi
(
p
, 2);

2052 i‡(
n
 =
NGX_ERROR
) {

2053  
NGX_ERROR
;

2056 
p
 += 2;

2058 
c
.
key
[
i
] = (
u_ch¨
Ë
n
;

2061  
	`ngx_hâp_fûe_ˇche_add
(
ˇche
, &
c
);

2062 
	}
}

2065 
ngx_öt_t


2066 
	$ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

2068 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

2070 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

2072 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

2074 i‡(
f˙
 =
NULL
) {

2076 
f˙
 = 
	`ngx_¶ab_ˇŒoc_locked
(
ˇche
->
shpoﬁ
,

2077 (
ngx_hâp_fûe_ˇche_node_t
));

2078 i‡(
f˙
 =
NULL
) {

2079 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

2080  
NGX_ERROR
;

2083 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

2085 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

2086 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

2088 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

2090 
f˙
->
u£s
 = 1;

2091 
f˙
->
exi°s
 = 1;

2092 
f˙
->
fs_size
 = 
c
->fs_size;

2094 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

2097 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

2100 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

2102 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

2104 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

2106  
NGX_OK
;

2107 
	}
}

2110 
ngx_öt_t


2111 
	$ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

2113 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

2114 "hâ∞fûêˇchêdñëe: \"%s\"", 
∑th
->
d©a
);

2116 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

2117 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

2118 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
∑th
->
d©a
);

2121  
NGX_OK
;

2122 
	}
}

2125 
time_t


2126 
	$ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
)

2128 
ngx_uöt_t
 
i
;

2129 
ngx_hâp_ˇche_vÆid_t
 *
vÆid
;

2131 i‡(
ˇche_vÆid
 =
NULL
) {

2135 
vÆid
 = 
ˇche_vÆid
->
ñts
;

2136 
i
 = 0; i < 
ˇche_vÆid
->
√…s
; i++) {

2138 i‡(
vÆid
[
i
].
°©us
 == 0) {

2139  
vÆid
[
i
].valid;

2142 i‡(
vÆid
[
i
].
°©us
 == status) {

2143  
vÆid
[
i
].valid;

2148 
	}
}

2152 
	$ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2154 *
c⁄Â
 = 
c⁄f
;

2156 
off_t
 
max_size
;

2157 
u_ch¨
 *
œ°
, *
p
;

2158 
time_t
 
öa˘ive
;

2159 
size_t
 
Àn
;

2160 
ssize_t
 
size
;

2161 
ngx_°r_t
 
s
, 
«me
, *
vÆue
;

2162 
ngx_öt_t
 
lﬂdî_fûes
;

2163 
ngx_m£c_t
 
lﬂdî_¶ìp
, 
lﬂdî_thªshﬁd
;

2164 
ngx_uöt_t
 
i
, 
n
, 
u£_ãmp_∑th
;

2165 
ngx_¨øy_t
 *
ˇches
;

2166 
ngx_hâp_fûe_ˇche_t
 *
ˇche
, **
˚
;

2168 
ˇche
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_fûe_ˇche_t
));

2169 i‡(
ˇche
 =
NULL
) {

2170  
NGX_CONF_ERROR
;

2173 
ˇche
->
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

2174 i‡(
ˇche
->
∑th
 =
NULL
) {

2175  
NGX_CONF_ERROR
;

2178 
u£_ãmp_∑th
 = 1;

2180 
öa˘ive
 = 600;

2181 
lﬂdî_fûes
 = 100;

2182 
lﬂdî_¶ìp
 = 50;

2183 
lﬂdî_thªshﬁd
 = 200;

2185 
«me
.
Àn
 = 0;

2186 
size
 = 0;

2187 
max_size
 = 
NGX_MAX_OFF_T_VALUE
;

2189 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2191 
ˇche
->
∑th
->
«me
 = 
vÆue
[1];

2193 i‡(
ˇche
->
∑th
->
«me
.
d©a
[ˇche->∑th->«me.
Àn
 - 1] == '/') {

2194 
ˇche
->
∑th
->
«me
.
Àn
--;

2197 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
ˇche
->
∑th
->
«me
, 0Ë!
NGX_OK
) {

2198  
NGX_CONF_ERROR
;

2201 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

2203 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "levels=", 7) == 0) {

2205 
p
 = 
vÆue
[
i
].
d©a
 + 7;

2206 
œ°
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

2208 
n
 = 0;Ç < 3 && 
p
 < 
œ°
;Ç++) {

2210 i‡(*
p
 > '0' && *p < '3') {

2212 
ˇche
->
∑th
->
Àvñ
[
n
] = *
p
++ - '0';

2213 
ˇche
->
∑th
->
Àn
 +ˇche->∑th->
Àvñ
[
n
] + 1;

2215 i‡(
p
 =
œ°
) {

2219 i‡(*
p
++ =':' && 
n
 < 2 &&Ö !
œ°
) {

2223 
övÆid_Àvñs
;

2226 
övÆid_Àvñs
;

2229 i‡(
ˇche
->
∑th
->
Àn
 < 10 + 3) {

2233 
övÆid_Àvñs
:

2235 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2236 "övÆid \"Àvñs\" \"%V\"", &
vÆue
[
i
]);

2237  
NGX_CONF_ERROR
;

2240 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "use_temp_path=", 14) == 0) {

2242 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[14], "on") == 0) {

2243 
u£_ãmp_∑th
 = 1;

2245 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[14], "off") == 0) {

2246 
u£_ãmp_∑th
 = 0;

2249 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2252 &
vÆue
[
i
]);

2253  
NGX_CONF_ERROR
;

2259 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "keys_zone=", 10) == 0) {

2261 
«me
.
d©a
 = 
vÆue
[
i
].data + 10;

2263 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

2265 i‡(
p
) {

2266 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

2268 
p
++;

2270 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + vÆue[i].À¿- 
p
;

2271 
s
.
d©a
 = 
p
;

2273 
size
 = 
	`ngx_∑r£_size
(&
s
);

2274 i‡(
size
 > 8191) {

2279 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2280 "övÆid key†z⁄êsizê\"%V\"", &
vÆue
[
i
]);

2281  
NGX_CONF_ERROR
;

2284 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

2286 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

2287 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

2289 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

2290 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

2291 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2292 "övÆid i«˘ivêvÆuê\"%V\"", &
vÆue
[
i
]);

2293  
NGX_CONF_ERROR
;

2299 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_size=", 9) == 0) {

2301 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

2302 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

2304 
max_size
 = 
	`ngx_∑r£_off£t
(&
s
);

2305 i‡(
max_size
 < 0) {

2306 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2307 "övÆid max_sizêvÆuê\"%V\"", &
vÆue
[
i
]);

2308  
NGX_CONF_ERROR
;

2314 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_files=", 13) == 0) {

2316 
lﬂdî_fûes
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 13, vÆue[i].
Àn
 - 13);

2317 i‡(
lﬂdî_fûes
 =
NGX_ERROR
) {

2318 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2319 "övÆidÜﬂdî_fûe†vÆuê\"%V\"", &
vÆue
[
i
]);

2320  
NGX_CONF_ERROR
;

2326 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_sleep=", 13) == 0) {

2328 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

2329 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

2331 
lﬂdî_¶ìp
 = 
	`ngx_∑r£_time
(&
s
, 0);

2332 i‡(
lﬂdî_¶ìp
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

2333 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2334 "övÆidÜﬂdî_¶ì∞vÆuê\"%V\"", &
vÆue
[
i
]);

2335  
NGX_CONF_ERROR
;

2341 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_threshold=", 17) == 0) {

2343 
s
.
Àn
 = 
vÆue
[
i
].len - 17;

2344 
s
.
d©a
 = 
vÆue
[
i
].data + 17;

2346 
lﬂdî_thªshﬁd
 = 
	`ngx_∑r£_time
(&
s
, 0);

2347 i‡(
lﬂdî_thªshﬁd
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

2348 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2349 "övÆidÜﬂdî_thªshﬁd vÆuê\"%V\"", &
vÆue
[
i
]);

2350  
NGX_CONF_ERROR
;

2356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2357 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

2358  
NGX_CONF_ERROR
;

2361 i‡(
«me
.
Àn
 =0 || 
size
 == 0) {

2362 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2364 &
cmd
->
«me
);

2365  
NGX_CONF_ERROR
;

2368 
ˇche
->
∑th
->
m™agî
 = 
ngx_hâp_fûe_ˇche_m™agî
;

2369 
ˇche
->
∑th
->
lﬂdî
 = 
ngx_hâp_fûe_ˇche_lﬂdî
;

2370 
ˇche
->
∑th
->
d©a
 = cache;

2371 
ˇche
->
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

2372 
ˇche
->
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

2373 
ˇche
->
lﬂdî_fûes
 =Üoader_files;

2374 
ˇche
->
lﬂdî_¶ìp
 =Üoader_sleep;

2375 
ˇche
->
lﬂdî_thªshﬁd
 =Üoader_threshold;

2377 i‡(
	`ngx_add_∑th
(
cf
, &
ˇche
->
∑th
Ë!
NGX_OK
) {

2378  
NGX_CONF_ERROR
;

2381 i‡(!
u£_ãmp_∑th
) {

2382 
ˇche
->
ãmp_∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

2383 i‡(
ˇche
->
ãmp_∑th
 =
NULL
) {

2384  
NGX_CONF_ERROR
;

2387 
Àn
 = 
ˇche
->
∑th
->
«me
.len + ("/temp") - 1;

2389 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
 + 1);

2390 i‡(
p
 =
NULL
) {

2391  
NGX_CONF_ERROR
;

2394 
ˇche
->
ãmp_∑th
->
«me
.
Àn
 =Üen;

2395 
ˇche
->
ãmp_∑th
->
«me
.
d©a
 = 
p
;

2397 
p
 = 
	`ngx_˝ymem
’, 
ˇche
->
∑th
->
«me
.
d©a
, cache->∑th->«me.
Àn
);

2398 
	`ngx_mem˝y
(
p
, "/temp", ("/temp"));

2400 
	`ngx_mem˝y
(&
ˇche
->
ãmp_∑th
->
Àvñ
, &ˇche->
∑th
->level,

2401 3 * (
size_t
));

2403 
ˇche
->
ãmp_∑th
->
Àn
 = cache->
∑th
->len;

2404 
ˇche
->
ãmp_∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

2405 
ˇche
->
ãmp_∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

2407 i‡(
	`ngx_add_∑th
(
cf
, &
ˇche
->
ãmp_∑th
Ë!
NGX_OK
) {

2408  
NGX_CONF_ERROR
;

2412 
ˇche
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
, 
cmd
->
po°
);

2413 i‡(
ˇche
->
shm_z⁄e
 =
NULL
) {

2414  
NGX_CONF_ERROR
;

2417 i‡(
ˇche
->
shm_z⁄e
->
d©a
) {

2418 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2419 "du∂iˇã z⁄ê\"%V\"", &
«me
);

2420  
NGX_CONF_ERROR
;

2424 
ˇche
->
shm_z⁄e
->
öô
 = 
ngx_hâp_fûe_ˇche_öô
;

2425 
ˇche
->
shm_z⁄e
->
d©a
 = cache;

2427 
ˇche
->
öa˘ive
 = inactive;

2428 
ˇche
->
max_size
 = max_size;

2430 
ˇches
 = (
ngx_¨øy_t
 *Ë(
c⁄Â
 + 
cmd
->
off£t
);

2432 
˚
 = 
	`ngx_¨øy_push
(
ˇches
);

2433 i‡(
˚
 =
NULL
) {

2434  
NGX_CONF_ERROR
;

2437 *
˚
 = 
ˇche
;

2439  
NGX_CONF_OK
;

2440 
	}
}

2444 
	$ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

2445 *
c⁄f
)

2447 *
p
 = 
c⁄f
;

2449 
time_t
 
vÆid
;

2450 
ngx_°r_t
 *
vÆue
;

2451 
ngx_uöt_t
 
i
, 
n
, 
°©us
;

2452 
ngx_¨øy_t
 **
a
;

2453 
ngx_hâp_ˇche_vÆid_t
 *
v
;

2454 
ngx_uöt_t
 
°©u£s
[] = { 200, 301, 302 };

2456 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

2458 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

2459 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ˇche_vÆid_t
));

2460 i‡(*
a
 =
NULL
) {

2461  
NGX_CONF_ERROR
;

2465 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2466 
n
 = 
cf
->
¨gs
->
√…s
 - 1;

2468 
vÆid
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

2469 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

2470 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2471 "övÆidÅimêvÆuê\"%V\"", &
vÆue
[
n
]);

2472  
NGX_CONF_ERROR
;

2475 i‡(
n
 == 1) {

2477 
i
 = 0; i < 3; i++) {

2478 
v
 = 
	`ngx_¨øy_push
(*
a
);

2479 i‡(
v
 =
NULL
) {

2480  
NGX_CONF_ERROR
;

2483 
v
->
°©us
 = 
°©u£s
[
i
];

2484 
v
->
vÆid
 = valid;

2487  
NGX_CONF_OK
;

2490 
i
 = 1; i < 
n
; i++) {

2492 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "any") == 0) {

2494 
°©us
 = 0;

2498 
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

2499 i‡(
°©us
 < 100) {

2500 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2501 "övÆid sètu†\"%V\"", &
vÆue
[
i
]);

2502  
NGX_CONF_ERROR
;

2506 
v
 = 
	`ngx_¨øy_push
(*
a
);

2507 i‡(
v
 =
NULL
) {

2508  
NGX_CONF_ERROR
;

2511 
v
->
°©us
 = status;

2512 
v
->
vÆid
 = valid;

2515  
NGX_CONF_OK
;

2516 
	}
}

	@src/http/ngx_http_header_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_öt_t
 
ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_hódî_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL
,

33 
ngx_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_hódî_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
	gngx_hâp_£rvî_°rög
[] = "Sîvî:Çgöx" 
CRLF
;

50 
	gngx_hâp_£rvî_fuŒ_°rög
[] = "Sîvî: " 
NGINX_VER
 
CRLF
;

53 
ngx_°r_t
 
	gngx_hâp_°©us_löes
[] = {

55 
ngx_°rög
("200 OK"),

56 
ngx_°rög
("201 Created"),

57 
ngx_°rög
("202 Accepted"),

58 
ngx_nuŒ_°rög
,

59 
ngx_°rög
("204 No Content"),

60 
ngx_nuŒ_°rög
,

61 
ngx_°rög
("206 Partial Content"),

65 
	#NGX_HTTP_LAST_2XX
 207

	)

66 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 200)

	)

70 
ngx_°rög
("301 Moved Permanently"),

71 
ngx_°rög
("302 Moved Temporarily"),

72 
ngx_°rög
("303 See Other"),

73 
ngx_°rög
("304 Not Modified"),

74 
ngx_nuŒ_°rög
,

75 
ngx_nuŒ_°rög
,

76 
ngx_°rög
("307 Temporary Redirect"),

78 
	#NGX_HTTP_LAST_3XX
 308

	)

79 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

81 
ngx_°rög
("400 Bad Request"),

82 
ngx_°rög
("401 Unauthorized"),

83 
ngx_°rög
("402 Payment Required"),

84 
ngx_°rög
("403 Forbidden"),

85 
ngx_°rög
("404 Not Found"),

86 
ngx_°rög
("405 Not Allowed"),

87 
ngx_°rög
("406 Not Acceptable"),

88 
ngx_nuŒ_°rög
,

89 
ngx_°rög
("408 Request Time-out"),

90 
ngx_°rög
("409 Conflict"),

91 
ngx_°rög
("410 Gone"),

92 
ngx_°rög
("411 Length Required"),

93 
ngx_°rög
("412 Precondition Failed"),

94 
ngx_°rög
("413 Request Entity Too Large"),

95 
ngx_°rög
("414 Request-URI Too Large"),

96 
ngx_°rög
("415 Unsupported Media Type"),

97 
ngx_°rög
("416 Requested Range Not Satisfiable"),

108 
	#NGX_HTTP_LAST_4XX
 417

	)

109 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

111 
ngx_°rög
("500 Internal Server Error"),

112 
ngx_°rög
("501 Not Implemented"),

113 
ngx_°rög
("502 Bad Gateway"),

114 
ngx_°rög
("503 Service Temporarily Unavailable"),

115 
ngx_°rög
("504 Gateway Time-out"),

117 
ngx_nuŒ_°rög
,

118 
ngx_nuŒ_°rög
,

119 
ngx_°rög
("507 Insufficient Storage"),

124 
	#NGX_HTTP_LAST_5XX
 508

	)

129 
ngx_hâp_hódî_out_t
 
	gngx_hâp_hódîs_out
[] = {

130 { 
ngx_°rög
("Sîvî"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
) },

131 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
) },

132 { 
ngx_°rög
("Content-Length"),

133 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_Àngth
) },

134 { 
ngx_°rög
("Content-Encoding"),

135 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_ícodög
) },

136 { 
ngx_°rög
("Loˇti⁄"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
loˇti⁄
) },

137 { 
ngx_°rög
("Last-Modified"),

138 
off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
) },

139 { 
ngx_°rög
("Accept-Ranges"),

140 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
) },

141 { 
ngx_°rög
("Expúes"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
) },

142 { 
ngx_°rög
("Cache-Control"),

143 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
) },

144 { 
ngx_°rög
("ETag"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
) },

146 { 
ngx_nuŒ_°rög
, 0 }

150 
ngx_öt_t


151 
	$ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

153 
u_ch¨
 *
p
;

154 
size_t
 
Àn
;

155 
ngx_°r_t
 
ho°
, *
°©us_löe
;

156 
ngx_buf_t
 *
b
;

157 
ngx_uöt_t
 
°©us
, 
i
, 
p‹t
;

158 
ngx_chaö_t
 
out
;

159 
ngx_li°_∑π_t
 *
∑π
;

160 
ngx_èbÀ_ñt_t
 *
hódî
;

161 
ngx_c⁄√˘i⁄_t
 *
c
;

162 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

163 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

164 
sockaddr_ö
 *
sö
;

165 #i‡(
NGX_HAVE_INET6
)

166 
sockaddr_ö6
 *
sö6
;

168 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

170 i‡(
r
->
hódî_£¡
) {

171  
NGX_OK
;

174 
r
->
hódî_£¡
 = 1;

176 i‡(
r
 !r->
maö
) {

177  
NGX_OK
;

180 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

181  
NGX_OK
;

184 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

185 
r
->
hódî_⁄ly
 = 1;

188 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 != -1) {

189 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


190 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


191 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED
)

193 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

194 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

198 
Àn
 = ("HTTP/1.x "Ë- 1 + (
CRLF
) - 1

200 + (
CRLF
) - 1;

204 i‡(
r
->
hódîs_out
.
°©us_löe
.
Àn
) {

205 
Àn
 +
r
->
hódîs_out
.
°©us_löe
.len;

206 
°©us_löe
 = &
r
->
hódîs_out
.status_line;

207 #i‡(
NGX_SUPPRESS_WARN
)

208 
°©us
 = 0;

213 
°©us
 = 
r
->
hódîs_out
.status;

215 i‡(
°©us
 >
NGX_HTTP_OK


216 && 
°©us
 < 
NGX_HTTP_LAST_2XX
)

220 i‡(
°©us
 =
NGX_HTTP_NO_CONTENT
) {

221 
r
->
hódî_⁄ly
 = 1;

222 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

223 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

224 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

225 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

226 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

229 
°©us
 -
NGX_HTTP_OK
;

230 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

231 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

233 } i‡(
°©us
 >
NGX_HTTP_MOVED_PERMANENTLY


234 && 
°©us
 < 
NGX_HTTP_LAST_3XX
)

238 i‡(
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

239 
r
->
hódî_⁄ly
 = 1;

242 
°©us
 = sètu†- 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

243 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

244 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

246 } i‡(
°©us
 >
NGX_HTTP_BAD_REQUEST


247 && 
°©us
 < 
NGX_HTTP_LAST_4XX
)

250 
°©us
 = sètu†- 
NGX_HTTP_BAD_REQUEST


251 + 
NGX_HTTP_OFF_4XX
;

253 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

254 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

256 } i‡(
°©us
 >
NGX_HTTP_INTERNAL_SERVER_ERROR


257 && 
°©us
 < 
NGX_HTTP_LAST_5XX
)

260 
°©us
 = sètu†- 
NGX_HTTP_INTERNAL_SERVER_ERROR


261 + 
NGX_HTTP_OFF_5XX
;

263 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

264 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

267 
Àn
 +
NGX_INT_T_LEN
 + 1 ;

268 
°©us_löe
 = 
NULL
;

271 i‡(
°©us_löe
 && sètus_löe->
Àn
 == 0) {

272 
°©us
 = 
r
->
hódîs_out
.status;

273 
Àn
 +
NGX_INT_T_LEN
 + 1 ;

274 
°©us_löe
 = 
NULL
;

278 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

280 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

281 
Àn
 +
˛cf
->
£rvî_tokís
 ? (
ngx_hâp_£rvî_fuŒ_°rög
) - 1:

282 (
ngx_hâp_£rvî_°rög
) - 1;

285 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

286 
Àn
 +("D©e: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

289 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

290 
Àn
 += ("Content-Type: ") - 1

291 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 + 2;

293 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


294 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

296 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

300 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


301 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

303 
Àn
 +("C⁄ã¡-Lígth: "Ë- 1 + 
NGX_OFF_T_LEN
 + 2;

306 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


307 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

309 
Àn
 +("La°-Modifõd: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

312 
c
 = 
r
->
c⁄√˘i⁄
;

314 i‡(
r
->
hódîs_out
.
loˇti⁄


315 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn


316 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/')

318 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

320 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

321 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

322 
ho°
 = 
cscf
->
£rvî_«me
;

324 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

325 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

328 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

329 
ho°
.
d©a
 = 
addr
;

331 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, &
ho°
, 0Ë!
NGX_OK
) {

332  
NGX_ERROR
;

336 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

338 #i‡(
NGX_HAVE_INET6
)

339 
AF_INET6
:

340 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

341 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

344 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

345 
AF_UNIX
:

346 
p‹t
 = 0;

350 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

351 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

355 
Àn
 += ("Location: https://") - 1

356 + 
ho°
.
Àn


357 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 + 2;

359 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

361 #i‡(
NGX_HTTP_SSL
)

362 i‡(
c
->
s¶
)

363 
p‹t
 = (port == 443) ? 0 :Öort;

366 
p‹t
 = (port == 80) ? 0 :Öort;

369 
p‹t
 = 0;

372 i‡(
p‹t
) {

373 
Àn
 += (":65535") - 1;

377 
	`ngx_°r_nuŒ
(&
ho°
);

378 
p‹t
 = 0;

381 i‡(
r
->
chunked
) {

382 
Àn
 +("Tøns„r-Encodög: chunked" 
CRLF
) - 1;

385 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

386 
Àn
 +("C⁄√˘i⁄: upgøde" 
CRLF
) - 1;

388 } i‡(
r
->
kì∑live
) {

389 
Àn
 +("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1;

399 i‡(
˛cf
->
kì∑live_hódî
) {

400 
Àn
 +("Kìp-Alive:Åimeout="Ë- 1 + 
NGX_TIME_T_LEN
 + 2;

404 
Àn
 +("C⁄√˘i⁄: clo£" 
CRLF
) - 1;

407 #i‡(
NGX_HTTP_GZIP
)

408 i‡(
r
->
gzù_v¨y
) {

409 i‡(
˛cf
->
gzù_v¨y
) {

410 
Àn
 +("V¨y: Ac˚±-Encodög" 
CRLF
) - 1;

413 
r
->
gzù_v¨y
 = 0;

418 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

419 
hódî
 = 
∑π
->
ñts
;

421 
i
 = 0; ; i++) {

423 i‡(
i
 >
∑π
->
√…s
) {

424 i‡(
∑π
->
√xt
 =
NULL
) {

428 
∑π
 =Ö¨t->
√xt
;

429 
hódî
 = 
∑π
->
ñts
;

430 
i
 = 0;

433 i‡(
hódî
[
i
].
hash
 == 0) {

437 
Àn
 +
hódî
[
i
].
key
.À¿+ (": "Ë- 1 + hódî[i].
vÆue
.len

438 + (
CRLF
) - 1;

441 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

442 i‡(
b
 =
NULL
) {

443  
NGX_ERROR
;

447 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP/1.1 ", ("HTTP/1.x ") - 1);

450 i‡(
°©us_löe
) {

451 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
°©us_löe
->
d©a
, sètus_löe->
Àn
);

454 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%03uò", 
°©us
);

456 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

458 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

459 i‡(
˛cf
->
£rvî_tokís
) {

460 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_fuŒ_°rög
;

461 
Àn
 = (
ngx_hâp_£rvî_fuŒ_°rög
) - 1;

464 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_°rög
;

465 
Àn
 = (
ngx_hâp_£rvî_°rög
) - 1;

468 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
p
, 
Àn
);

471 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

472 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Date: ", ("Date: ") - 1);

473 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_ˇched_hâp_time
.
d©a
,

474 
ngx_ˇched_hâp_time
.
Àn
);

476 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

479 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

480 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Content-Type: ",

482 
p
 = 
b
->
œ°
;

483 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

484 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

486 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


487 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

489 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "; charset=",

491 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

492 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

496 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 
b
->
œ°
 - 
p
;

497 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
;

500 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

503 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


504 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

506 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "C⁄ã¡-Lígth: %O" 
CRLF
,

507 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

510 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


511 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

513 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Last-Modified: ",

515 
b
->
œ°
 = 
	`ngx_hâp_time
(b->œ°, 
r
->
hódîs_out
.
œ°_modifõd_time
);

517 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

520 i‡(
ho°
.
d©a
) {

522 
p
 = 
b
->
œ°
 + ("Location: ") - 1;

524 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Location: http",

527 #i‡(
NGX_HTTP_SSL
)

528 i‡(
c
->
s¶
) {

529 *
b
->
œ°
++ ='s';

533 *
b
->
œ°
++ = ':'; *b->last++ = '/'; *b->last++ = '/';

534 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ho°
.
d©a
, ho°.
Àn
);

536 i‡(
p‹t
) {

537 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, ":%ui", 
p‹t
);

540 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

541 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

545 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
b
->
œ°
 - 
p
;

546 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

547 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

549 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

552 i‡(
r
->
chunked
) {

553 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "Tøns„r-Encodög: chunked" 
CRLF
,

554 ("Tøns„r-Encodög: chunked" 
CRLF
) - 1);

557 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

558 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: upgøde" 
CRLF
,

559 ("C⁄√˘i⁄: upgøde" 
CRLF
) - 1);

561 } i‡(
r
->
kì∑live
) {

562 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: kìp-Æive" 
CRLF
,

563 ("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1);

565 i‡(
˛cf
->
kì∑live_hódî
) {

566 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Kìp-Alive:Åimeout=%T" 
CRLF
,

567 
˛cf
->
kì∑live_hódî
);

571 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: clo£" 
CRLF
,

572 ("C⁄√˘i⁄: clo£" 
CRLF
) - 1);

575 #i‡(
NGX_HTTP_GZIP
)

576 i‡(
r
->
gzù_v¨y
) {

577 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "V¨y: Ac˚±-Encodög" 
CRLF
,

578 ("V¨y: Ac˚±-Encodög" 
CRLF
) - 1);

582 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

583 
hódî
 = 
∑π
->
ñts
;

585 
i
 = 0; ; i++) {

587 i‡(
i
 >
∑π
->
√…s
) {

588 i‡(
∑π
->
√xt
 =
NULL
) {

592 
∑π
 =Ö¨t->
√xt
;

593 
hódî
 = 
∑π
->
ñts
;

594 
i
 = 0;

597 i‡(
hódî
[
i
].
hash
 == 0) {

601 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

602 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

604 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

605 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

608 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

609 "%*s", (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

612 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

614 
r
->
hódî_size
 = 
b
->
œ°
 - b->
pos
;

616 i‡(
r
->
hódî_⁄ly
) {

617 
b
->
œ°_buf
 = 1;

620 
out
.
buf
 = 
b
;

621 
out
.
√xt
 = 
NULL
;

623  
	`ngx_hâp_wrôe_fûãr
(
r
, &
out
);

624 
	}
}

627 
ngx_öt_t


628 
	$ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

630 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódî_fûãr
;

632  
NGX_OK
;

633 
	}
}

	@src/http/ngx_http_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
uöt32_t
 
	gusuÆ
[] = {

20 #i‡(
NGX_WIN32
)

36 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

38 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

39 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

41 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

42 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

44 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

45 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

47 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

48 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

49 && 
m
[4] =
c4


	)

51 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

52 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

53 && (((
uöt32_t
 *Ë
m
)[1] & 0xffffË=((
c5
 << 8Ë| 
c4
)

	)

55 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

56 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

57 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

59 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

60 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

61 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

63 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

64 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

65 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
) \

66 && 
m
[8] =
c8


	)

70 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

71 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2


	)

73 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

74 
m
[0] =
c0
 && m[2] =
c2
 && m[3] =
c3


	)

76 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

77 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3


	)

79 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

80 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 && m[4] =
c4


	)

82 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

83 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

84 && 
m
[4] =
c4
 && m[5] =
c5


	)

86 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

87 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

88 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6


	)

90 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

91 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

92 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7


	)

94 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

95 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

96 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7
 && m[8] =
c8


	)

103 
ngx_öt_t


104 
	$ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

106 
u_ch¨
 
c
, 
ch
, *
p
, *
m
;

108 
sw_°¨t
 = 0,

109 
sw_mëhod
,

110 
sw_•a˚s_bef‹e_uri
,

111 
sw_schema
,

112 
sw_schema_¶ash
,

113 
sw_schema_¶ash_¶ash
,

114 
sw_ho°_°¨t
,

115 
sw_ho°
,

116 
sw_ho°_íd
,

117 
sw_ho°_ù_lôîÆ
,

118 
sw_p‹t
,

119 
sw_ho°_hâp_09
,

120 
sw_a·î_¶ash_ö_uri
,

121 
sw_check_uri
,

122 
sw_check_uri_hâp_09
,

123 
sw_uri
,

124 
sw_hâp_09
,

125 
sw_hâp_H
,

126 
sw_hâp_HT
,

127 
sw_hâp_HTT
,

128 
sw_hâp_HTTP
,

129 
sw_fú°_maj‹_digô
,

130 
sw_maj‹_digô
,

131 
sw_fú°_mö‹_digô
,

132 
sw_mö‹_digô
,

133 
sw_•a˚s_a·î_digô
,

134 
sw_Æmo°_d⁄e


135 } 
°©e
;

137 
°©e
 = 
r
->state;

139 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

140 
ch
 = *
p
;

142 
°©e
) {

145 
sw_°¨t
:

146 
r
->
ªque°_°¨t
 = 
p
;

148 i‡(
ch
 =
CR
 || ch =
LF
) {

152 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

153  
NGX_HTTP_PARSE_INVALID_METHOD
;

156 
°©e
 = 
sw_mëhod
;

159 
sw_mëhod
:

160 i‡(
ch
 == ' ') {

161 
r
->
mëhod_íd
 = 
p
 - 1;

162 
m
 = 
r
->
ªque°_°¨t
;

164 
p
 - 
m
) {

167 i‡(
	`ngx_°r3_cmp
(
m
, 'G', 'E', 'T', ' ')) {

168 
r
->
mëhod
 = 
NGX_HTTP_GET
;

172 i‡(
	`ngx_°r3_cmp
(
m
, 'P', 'U', 'T', ' ')) {

173 
r
->
mëhod
 = 
NGX_HTTP_PUT
;

180 i‡(
m
[1] == 'O') {

182 i‡(
	`ngx_°r3Ocmp
(
m
, 'P', 'O', 'S', 'T')) {

183 
r
->
mëhod
 = 
NGX_HTTP_POST
;

187 i‡(
	`ngx_°r3Ocmp
(
m
, 'C', 'O', 'P', 'Y')) {

188 
r
->
mëhod
 = 
NGX_HTTP_COPY
;

192 i‡(
	`ngx_°r3Ocmp
(
m
, 'M', 'O', 'V', 'E')) {

193 
r
->
mëhod
 = 
NGX_HTTP_MOVE
;

197 i‡(
	`ngx_°r3Ocmp
(
m
, 'L', 'O', 'C', 'K')) {

198 
r
->
mëhod
 = 
NGX_HTTP_LOCK
;

204 i‡(
	`ngx_°r4cmp
(
m
, 'H', 'E', 'A', 'D')) {

205 
r
->
mëhod
 = 
NGX_HTTP_HEAD
;

213 i‡(
	`ngx_°r5cmp
(
m
, 'M', 'K', 'C', 'O', 'L')) {

214 
r
->
mëhod
 = 
NGX_HTTP_MKCOL
;

218 i‡(
	`ngx_°r5cmp
(
m
, 'P', 'A', 'T', 'C', 'H')) {

219 
r
->
mëhod
 = 
NGX_HTTP_PATCH
;

223 i‡(
	`ngx_°r5cmp
(
m
, 'T', 'R', 'A', 'C', 'E')) {

224 
r
->
mëhod
 = 
NGX_HTTP_TRACE
;

231 i‡(
	`ngx_°r6cmp
(
m
, 'D', 'E', 'L', 'E', 'T', 'E')) {

232 
r
->
mëhod
 = 
NGX_HTTP_DELETE
;

236 i‡(
	`ngx_°r6cmp
(
m
, 'U', 'N', 'L', 'O', 'C', 'K')) {

237 
r
->
mëhod
 = 
NGX_HTTP_UNLOCK
;

244 i‡(
	`ngx_°r7_cmp
(
m
, 'O', 'P', 'T', 'I', 'O', 'N', 'S', ' '))

246 
r
->
mëhod
 = 
NGX_HTTP_OPTIONS
;

252 i‡(
	`ngx_°r8cmp
(
m
, 'P', 'R', 'O', 'P', 'F', 'I', 'N', 'D'))

254 
r
->
mëhod
 = 
NGX_HTTP_PROPFIND
;

260 i‡(
	`ngx_°r9cmp
(
m
,

263 
r
->
mëhod
 = 
NGX_HTTP_PROPPATCH
;

269 
°©e
 = 
sw_•a˚s_bef‹e_uri
;

273 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

274  
NGX_HTTP_PARSE_INVALID_METHOD
;

280 
sw_•a˚s_bef‹e_uri
:

282 i‡(
ch
 == '/') {

283 
r
->
uri_°¨t
 = 
p
;

284 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

288 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

289 i‡(
c
 >= 'a' && c <= 'z') {

290 
r
->
schema_°¨t
 = 
p
;

291 
°©e
 = 
sw_schema
;

295 
ch
) {

299  
NGX_HTTP_PARSE_INVALID_REQUEST
;

303 
sw_schema
:

305 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

306 i‡(
c
 >= 'a' && c <= 'z') {

310 
ch
) {

312 
r
->
schema_íd
 = 
p
;

313 
°©e
 = 
sw_schema_¶ash
;

316  
NGX_HTTP_PARSE_INVALID_REQUEST
;

320 
sw_schema_¶ash
:

321 
ch
) {

323 
°©e
 = 
sw_schema_¶ash_¶ash
;

326  
NGX_HTTP_PARSE_INVALID_REQUEST
;

330 
sw_schema_¶ash_¶ash
:

331 
ch
) {

333 
°©e
 = 
sw_ho°_°¨t
;

336  
NGX_HTTP_PARSE_INVALID_REQUEST
;

340 
sw_ho°_°¨t
:

342 
r
->
ho°_°¨t
 = 
p
;

344 i‡(
ch
 == '[') {

345 
°©e
 = 
sw_ho°_ù_lôîÆ
;

349 
°©e
 = 
sw_ho°
;

353 
sw_ho°
:

355 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

356 i‡(
c
 >= 'a' && c <= 'z') {

360 i‡((
ch
 >= '0' && ch <= '9') || ch == '.' || ch == '-') {

366 
sw_ho°_íd
:

368 
r
->
ho°_íd
 = 
p
;

370 
ch
) {

372 
°©e
 = 
sw_p‹t
;

375 
r
->
uri_°¨t
 = 
p
;

376 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

383 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

384 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

385 
°©e
 = 
sw_ho°_hâp_09
;

388  
NGX_HTTP_PARSE_INVALID_REQUEST
;

392 
sw_ho°_ù_lôîÆ
:

394 i‡(
ch
 >= '0' && ch <= '9') {

398 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

399 i‡(
c
 >= 'a' && c <= 'z') {

403 
ch
) {

407 
°©e
 = 
sw_ho°_íd
;

429  
NGX_HTTP_PARSE_INVALID_REQUEST
;

433 
sw_p‹t
:

434 i‡(
ch
 >= '0' && ch <= '9') {

438 
ch
) {

440 
r
->
p‹t_íd
 = 
p
;

441 
r
->
uri_°¨t
 = 
p
;

442 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

445 
r
->
p‹t_íd
 = 
p
;

450 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

451 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

452 
°©e
 = 
sw_ho°_hâp_09
;

455  
NGX_HTTP_PARSE_INVALID_REQUEST
;

460 
sw_ho°_hâp_09
:

461 
ch
) {

464 
CR
:

465 
r
->
hâp_mö‹
 = 9;

466 
°©e
 = 
sw_Æmo°_d⁄e
;

468 
LF
:

469 
r
->
hâp_mö‹
 = 9;

470 
d⁄e
;

472 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

473 
°©e
 = 
sw_hâp_H
;

476  
NGX_HTTP_PARSE_INVALID_REQUEST
;

482 
sw_a·î_¶ash_ö_uri
:

484 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

485 
°©e
 = 
sw_check_uri
;

489 
ch
) {

491 
r
->
uri_íd
 = 
p
;

492 
°©e
 = 
sw_check_uri_hâp_09
;

494 
CR
:

495 
r
->
uri_íd
 = 
p
;

496 
r
->
hâp_mö‹
 = 9;

497 
°©e
 = 
sw_Æmo°_d⁄e
;

499 
LF
:

500 
r
->
uri_íd
 = 
p
;

501 
r
->
hâp_mö‹
 = 9;

502 
d⁄e
;

504 
r
->
com∂ex_uri
 = 1;

505 
°©e
 = 
sw_uri
;

508 
r
->
quŸed_uri
 = 1;

509 
°©e
 = 
sw_uri
;

512 
r
->
com∂ex_uri
 = 1;

513 
°©e
 = 
sw_uri
;

515 #i‡(
NGX_WIN32
)

517 
r
->
com∂ex_uri
 = 1;

518 
°©e
 = 
sw_uri
;

522 
r
->
¨gs_°¨t
 = 
p
 + 1;

523 
°©e
 = 
sw_uri
;

526 
r
->
com∂ex_uri
 = 1;

527 
°©e
 = 
sw_uri
;

530 
r
->
∂us_ö_uri
 = 1;

533  
NGX_HTTP_PARSE_INVALID_REQUEST
;

535 
°©e
 = 
sw_check_uri
;

541 
sw_check_uri
:

543 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

547 
ch
) {

549 #i‡(
NGX_WIN32
)

550 i‡(
r
->
uri_ext
 =
p
) {

551 
r
->
com∂ex_uri
 = 1;

552 
°©e
 = 
sw_uri
;

556 
r
->
uri_ext
 = 
NULL
;

557 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

560 
r
->
uri_ext
 = 
p
 + 1;

563 
r
->
uri_íd
 = 
p
;

564 
°©e
 = 
sw_check_uri_hâp_09
;

566 
CR
:

567 
r
->
uri_íd
 = 
p
;

568 
r
->
hâp_mö‹
 = 9;

569 
°©e
 = 
sw_Æmo°_d⁄e
;

571 
LF
:

572 
r
->
uri_íd
 = 
p
;

573 
r
->
hâp_mö‹
 = 9;

574 
d⁄e
;

575 #i‡(
NGX_WIN32
)

577 
r
->
com∂ex_uri
 = 1;

578 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

582 
r
->
quŸed_uri
 = 1;

583 
°©e
 = 
sw_uri
;

586 
r
->
¨gs_°¨t
 = 
p
 + 1;

587 
°©e
 = 
sw_uri
;

590 
r
->
com∂ex_uri
 = 1;

591 
°©e
 = 
sw_uri
;

594 
r
->
∂us_ö_uri
 = 1;

597  
NGX_HTTP_PARSE_INVALID_REQUEST
;

602 
sw_check_uri_hâp_09
:

603 
ch
) {

606 
CR
:

607 
r
->
hâp_mö‹
 = 9;

608 
°©e
 = 
sw_Æmo°_d⁄e
;

610 
LF
:

611 
r
->
hâp_mö‹
 = 9;

612 
d⁄e
;

614 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

615 
°©e
 = 
sw_hâp_H
;

618 
r
->
•a˚_ö_uri
 = 1;

619 
°©e
 = 
sw_check_uri
;

620 
p
--;

627 
sw_uri
:

629 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

633 
ch
) {

635 
r
->
uri_íd
 = 
p
;

636 
°©e
 = 
sw_hâp_09
;

638 
CR
:

639 
r
->
uri_íd
 = 
p
;

640 
r
->
hâp_mö‹
 = 9;

641 
°©e
 = 
sw_Æmo°_d⁄e
;

643 
LF
:

644 
r
->
uri_íd
 = 
p
;

645 
r
->
hâp_mö‹
 = 9;

646 
d⁄e
;

648 
r
->
com∂ex_uri
 = 1;

651  
NGX_HTTP_PARSE_INVALID_REQUEST
;

656 
sw_hâp_09
:

657 
ch
) {

660 
CR
:

661 
r
->
hâp_mö‹
 = 9;

662 
°©e
 = 
sw_Æmo°_d⁄e
;

664 
LF
:

665 
r
->
hâp_mö‹
 = 9;

666 
d⁄e
;

668 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

669 
°©e
 = 
sw_hâp_H
;

672 
r
->
•a˚_ö_uri
 = 1;

673 
°©e
 = 
sw_uri
;

674 
p
--;

679 
sw_hâp_H
:

680 
ch
) {

682 
°©e
 = 
sw_hâp_HT
;

685  
NGX_HTTP_PARSE_INVALID_REQUEST
;

689 
sw_hâp_HT
:

690 
ch
) {

692 
°©e
 = 
sw_hâp_HTT
;

695  
NGX_HTTP_PARSE_INVALID_REQUEST
;

699 
sw_hâp_HTT
:

700 
ch
) {

702 
°©e
 = 
sw_hâp_HTTP
;

705  
NGX_HTTP_PARSE_INVALID_REQUEST
;

709 
sw_hâp_HTTP
:

710 
ch
) {

712 
°©e
 = 
sw_fú°_maj‹_digô
;

715  
NGX_HTTP_PARSE_INVALID_REQUEST
;

720 
sw_fú°_maj‹_digô
:

721 i‡(
ch
 < '1' || ch > '9') {

722  
NGX_HTTP_PARSE_INVALID_REQUEST
;

725 
r
->
hâp_maj‹
 = 
ch
 - '0';

726 
°©e
 = 
sw_maj‹_digô
;

730 
sw_maj‹_digô
:

731 i‡(
ch
 == '.') {

732 
°©e
 = 
sw_fú°_mö‹_digô
;

736 i‡(
ch
 < '0' || ch > '9') {

737  
NGX_HTTP_PARSE_INVALID_REQUEST
;

740 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

744 
sw_fú°_mö‹_digô
:

745 i‡(
ch
 < '0' || ch > '9') {

746  
NGX_HTTP_PARSE_INVALID_REQUEST
;

749 
r
->
hâp_mö‹
 = 
ch
 - '0';

750 
°©e
 = 
sw_mö‹_digô
;

754 
sw_mö‹_digô
:

755 i‡(
ch
 =
CR
) {

756 
°©e
 = 
sw_Æmo°_d⁄e
;

760 i‡(
ch
 =
LF
) {

761 
d⁄e
;

764 i‡(
ch
 == ' ') {

765 
°©e
 = 
sw_•a˚s_a·î_digô
;

769 i‡(
ch
 < '0' || ch > '9') {

770  
NGX_HTTP_PARSE_INVALID_REQUEST
;

773 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

776 
sw_•a˚s_a·î_digô
:

777 
ch
) {

780 
CR
:

781 
°©e
 = 
sw_Æmo°_d⁄e
;

783 
LF
:

784 
d⁄e
;

786  
NGX_HTTP_PARSE_INVALID_REQUEST
;

791 
sw_Æmo°_d⁄e
:

792 
r
->
ªque°_íd
 = 
p
 - 1;

793 
ch
) {

794 
LF
:

795 
d⁄e
;

797  
NGX_HTTP_PARSE_INVALID_REQUEST
;

802 
b
->
pos
 = 
p
;

803 
r
->
°©e
 = state;

805  
NGX_AGAIN
;

807 
d⁄e
:

809 
b
->
pos
 = 
p
 + 1;

811 i‡(
r
->
ªque°_íd
 =
NULL
) {

812 
r
->
ªque°_íd
 = 
p
;

815 
r
->
hâp_vîsi⁄
 =Ñ->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

816 
r
->
°©e
 = 
sw_°¨t
;

818 i‡(
r
->
hâp_vîsi⁄
 =9 &&Ñ->
mëhod
 !
NGX_HTTP_GET
) {

819  
NGX_HTTP_PARSE_INVALID_09_METHOD
;

822  
NGX_OK
;

823 
	}
}

826 
ngx_öt_t


827 
	$ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

828 
ngx_uöt_t
 
Ælow_undîsc‹es
)

830 
u_ch¨
 
c
, 
ch
, *
p
;

831 
ngx_uöt_t
 
hash
, 
i
;

833 
sw_°¨t
 = 0,

834 
sw_«me
,

835 
sw_•a˚_bef‹e_vÆue
,

836 
sw_vÆue
,

837 
sw_•a˚_a·î_vÆue
,

838 
sw_ign‹e_löe
,

839 
sw_Æmo°_d⁄e
,

840 
sw_hódî_Æmo°_d⁄e


841 } 
°©e
;

845 
u_ch¨
 
lowˇ£
[] =

855 
°©e
 = 
r
->state;

856 
hash
 = 
r
->
hódî_hash
;

857 
i
 = 
r
->
lowˇ£_ödex
;

859 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

860 
ch
 = *
p
;

862 
°©e
) {

865 
sw_°¨t
:

866 
r
->
hódî_«me_°¨t
 = 
p
;

867 
r
->
övÆid_hódî
 = 0;

869 
ch
) {

870 
CR
:

871 
r
->
hódî_íd
 = 
p
;

872 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

874 
LF
:

875 
r
->
hódî_íd
 = 
p
;

876 
hódî_d⁄e
;

878 
°©e
 = 
sw_«me
;

880 
c
 = 
lowˇ£
[
ch
];

882 i‡(
c
) {

883 
hash
 = 
	`ngx_hash
(0, 
c
);

884 
r
->
lowˇ£_hódî
[0] = 
c
;

885 
i
 = 1;

889 i‡(
ch
 == '_') {

890 i‡(
Ælow_undîsc‹es
) {

891 
hash
 = 
	`ngx_hash
(0, 
ch
);

892 
r
->
lowˇ£_hódî
[0] = 
ch
;

893 
i
 = 1;

896 
r
->
övÆid_hódî
 = 1;

902 i‡(
ch
 == '\0') {

903  
NGX_HTTP_PARSE_INVALID_HEADER
;

906 
r
->
övÆid_hódî
 = 1;

914 
sw_«me
:

915 
c
 = 
lowˇ£
[
ch
];

917 i‡(
c
) {

918 
hash
 = 
	`ngx_hash
(hash, 
c
);

919 
r
->
lowˇ£_hódî
[
i
++] = 
c
;

920 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

924 i‡(
ch
 == '_') {

925 i‡(
Ælow_undîsc‹es
) {

926 
hash
 = 
	`ngx_hash
(hash, 
ch
);

927 
r
->
lowˇ£_hódî
[
i
++] = 
ch
;

928 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

931 
r
->
övÆid_hódî
 = 1;

937 i‡(
ch
 == ':') {

938 
r
->
hódî_«me_íd
 = 
p
;

939 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

943 i‡(
ch
 =
CR
) {

944 
r
->
hódî_«me_íd
 = 
p
;

945 
r
->
hódî_°¨t
 = 
p
;

946 
r
->
hódî_íd
 = 
p
;

947 
°©e
 = 
sw_Æmo°_d⁄e
;

951 i‡(
ch
 =
LF
) {

952 
r
->
hódî_«me_íd
 = 
p
;

953 
r
->
hódî_°¨t
 = 
p
;

954 
r
->
hódî_íd
 = 
p
;

955 
d⁄e
;

959 i‡(
ch
 == '/'

960 && 
r
->
up°ªam


961 && 
p
 - 
r
->
hódî_«me_°¨t
 == 4

962 && 
	`ngx_°∫cmp
(
r
->
hódî_«me_°¨t
, "HTTP", 4) == 0)

964 
°©e
 = 
sw_ign‹e_löe
;

968 i‡(
ch
 == '\0') {

969  
NGX_HTTP_PARSE_INVALID_HEADER
;

972 
r
->
övÆid_hódî
 = 1;

977 
sw_•a˚_bef‹e_vÆue
:

978 
ch
) {

981 
CR
:

982 
r
->
hódî_°¨t
 = 
p
;

983 
r
->
hódî_íd
 = 
p
;

984 
°©e
 = 
sw_Æmo°_d⁄e
;

986 
LF
:

987 
r
->
hódî_°¨t
 = 
p
;

988 
r
->
hódî_íd
 = 
p
;

989 
d⁄e
;

991  
NGX_HTTP_PARSE_INVALID_HEADER
;

993 
r
->
hódî_°¨t
 = 
p
;

994 
°©e
 = 
sw_vÆue
;

1000 
sw_vÆue
:

1001 
ch
) {

1003 
r
->
hódî_íd
 = 
p
;

1004 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1006 
CR
:

1007 
r
->
hódî_íd
 = 
p
;

1008 
°©e
 = 
sw_Æmo°_d⁄e
;

1010 
LF
:

1011 
r
->
hódî_íd
 = 
p
;

1012 
d⁄e
;

1014  
NGX_HTTP_PARSE_INVALID_HEADER
;

1019 
sw_•a˚_a·î_vÆue
:

1020 
ch
) {

1023 
CR
:

1024 
°©e
 = 
sw_Æmo°_d⁄e
;

1026 
LF
:

1027 
d⁄e
;

1029  
NGX_HTTP_PARSE_INVALID_HEADER
;

1031 
°©e
 = 
sw_vÆue
;

1037 
sw_ign‹e_löe
:

1038 
ch
) {

1039 
LF
:

1040 
°©e
 = 
sw_°¨t
;

1048 
sw_Æmo°_d⁄e
:

1049 
ch
) {

1050 
LF
:

1051 
d⁄e
;

1052 
CR
:

1055  
NGX_HTTP_PARSE_INVALID_HEADER
;

1060 
sw_hódî_Æmo°_d⁄e
:

1061 
ch
) {

1062 
LF
:

1063 
hódî_d⁄e
;

1065  
NGX_HTTP_PARSE_INVALID_HEADER
;

1070 
b
->
pos
 = 
p
;

1071 
r
->
°©e
 = state;

1072 
r
->
hódî_hash
 = 
hash
;

1073 
r
->
lowˇ£_ödex
 = 
i
;

1075  
NGX_AGAIN
;

1077 
d⁄e
:

1079 
b
->
pos
 = 
p
 + 1;

1080 
r
->
°©e
 = 
sw_°¨t
;

1081 
r
->
hódî_hash
 = 
hash
;

1082 
r
->
lowˇ£_ödex
 = 
i
;

1084  
NGX_OK
;

1086 
hódî_d⁄e
:

1088 
b
->
pos
 = 
p
 + 1;

1089 
r
->
°©e
 = 
sw_°¨t
;

1091  
NGX_HTTP_PARSE_HEADER_DONE
;

1092 
	}
}

1095 
ngx_öt_t


1096 
	$ngx_hâp_∑r£_uri
(
ngx_hâp_ªque°_t
 *
r
)

1098 
u_ch¨
 *
p
, 
ch
;

1100 
sw_°¨t
 = 0,

1101 
sw_a·î_¶ash_ö_uri
,

1102 
sw_check_uri
,

1103 
sw_uri


1104 } 
°©e
;

1106 
°©e
 = 
sw_°¨t
;

1108 
p
 = 
r
->
uri_°¨t
;Ö !r->
uri_íd
;Ö++) {

1110 
ch
 = *
p
;

1112 
°©e
) {

1114 
sw_°¨t
:

1116 i‡(
ch
 != '/') {

1117  
NGX_ERROR
;

1120 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1124 
sw_a·î_¶ash_ö_uri
:

1126 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1127 
°©e
 = 
sw_check_uri
;

1131 
ch
) {

1133 
r
->
•a˚_ö_uri
 = 1;

1134 
°©e
 = 
sw_check_uri
;

1137 
r
->
com∂ex_uri
 = 1;

1138 
°©e
 = 
sw_uri
;

1141 
r
->
quŸed_uri
 = 1;

1142 
°©e
 = 
sw_uri
;

1145 
r
->
com∂ex_uri
 = 1;

1146 
°©e
 = 
sw_uri
;

1148 #i‡(
NGX_WIN32
)

1150 
r
->
com∂ex_uri
 = 1;

1151 
°©e
 = 
sw_uri
;

1155 
r
->
¨gs_°¨t
 = 
p
 + 1;

1156 
°©e
 = 
sw_uri
;

1159 
r
->
com∂ex_uri
 = 1;

1160 
°©e
 = 
sw_uri
;

1163 
r
->
∂us_ö_uri
 = 1;

1166 
°©e
 = 
sw_check_uri
;

1172 
sw_check_uri
:

1174 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1178 
ch
) {

1180 #i‡(
NGX_WIN32
)

1181 i‡(
r
->
uri_ext
 =
p
) {

1182 
r
->
com∂ex_uri
 = 1;

1183 
°©e
 = 
sw_uri
;

1187 
r
->
uri_ext
 = 
NULL
;

1188 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1191 
r
->
uri_ext
 = 
p
 + 1;

1194 
r
->
•a˚_ö_uri
 = 1;

1196 #i‡(
NGX_WIN32
)

1198 
r
->
com∂ex_uri
 = 1;

1199 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1203 
r
->
quŸed_uri
 = 1;

1204 
°©e
 = 
sw_uri
;

1207 
r
->
¨gs_°¨t
 = 
p
 + 1;

1208 
°©e
 = 
sw_uri
;

1211 
r
->
com∂ex_uri
 = 1;

1212 
°©e
 = 
sw_uri
;

1215 
r
->
∂us_ö_uri
 = 1;

1221 
sw_uri
:

1223 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1227 
ch
) {

1229 
r
->
•a˚_ö_uri
 = 1;

1232 
r
->
com∂ex_uri
 = 1;

1239  
NGX_OK
;

1240 
	}
}

1243 
ngx_öt_t


1244 
	$ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
mîge_¶ashes
)

1246 
u_ch¨
 
c
, 
ch
, 
decoded
, *
p
, *
u
;

1248 
sw_usuÆ
 = 0,

1249 
sw_¶ash
,

1250 
sw_dŸ
,

1251 
sw_dŸ_dŸ
,

1252 
sw_quŸed
,

1253 
sw_quŸed_£c⁄d


1254 } 
°©e
, 
quŸed_°©e
;

1256 #i‡(
NGX_SUPPRESS_WARN
)

1257 
decoded
 = '\0';

1258 
quŸed_°©e
 = 
sw_usuÆ
;

1261 
°©e
 = 
sw_usuÆ
;

1262 
p
 = 
r
->
uri_°¨t
;

1263 
u
 = 
r
->
uri
.
d©a
;

1264 
r
->
uri_ext
 = 
NULL
;

1265 
r
->
¨gs_°¨t
 = 
NULL
;

1267 
ch
 = *
p
++;

1269 
p
 <
r
->
uri_íd
) {

1277 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1278 "s:%d in:'%Xd:%c'", 
°©e
, 
ch
, ch);

1280 
°©e
) {

1282 
sw_usuÆ
:

1284 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1285 *
u
++ = 
ch
;

1286 
ch
 = *
p
++;

1290 
ch
) {

1291 #i‡(
NGX_WIN32
)

1293 i‡(
u
 - 2 >
r
->
uri
.
d©a


1294 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1296 
u
--;

1299 
r
->
uri_ext
 = 
NULL
;

1301 i‡(
p
 =
r
->
uri_°¨t
 +Ñ->
uri
.
Àn
) {

1311 
°©e
 = 
sw_¶ash
;

1312 *
u
++ = '/';

1316 #i‡(
NGX_WIN32
)

1317 i‡(
u
 - 2 >
r
->
uri
.
d©a


1318 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1320 
u
--;

1323 
r
->
uri_ext
 = 
NULL
;

1324 
°©e
 = 
sw_¶ash
;

1325 *
u
++ = 
ch
;

1328 
quŸed_°©e
 = 
°©e
;

1329 
°©e
 = 
sw_quŸed
;

1332 
r
->
¨gs_°¨t
 = 
p
;

1333 
¨gs
;

1335 
d⁄e
;

1337 
r
->
uri_ext
 = 
u
 + 1;

1338 *
u
++ = 
ch
;

1341 
r
->
∂us_ö_uri
 = 1;

1344 *
u
++ = 
ch
;

1348 
ch
 = *
p
++;

1351 
sw_¶ash
:

1353 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1354 
°©e
 = 
sw_usuÆ
;

1355 *
u
++ = 
ch
;

1356 
ch
 = *
p
++;

1360 
ch
) {

1361 #i‡(
NGX_WIN32
)

1366 i‡(!
mîge_¶ashes
) {

1367 *
u
++ = 
ch
;

1371 
°©e
 = 
sw_dŸ
;

1372 *
u
++ = 
ch
;

1375 
quŸed_°©e
 = 
°©e
;

1376 
°©e
 = 
sw_quŸed
;

1379 
r
->
¨gs_°¨t
 = 
p
;

1380 
¨gs
;

1382 
d⁄e
;

1384 
r
->
∂us_ö_uri
 = 1;

1386 
°©e
 = 
sw_usuÆ
;

1387 *
u
++ = 
ch
;

1391 
ch
 = *
p
++;

1394 
sw_dŸ
:

1396 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1397 
°©e
 = 
sw_usuÆ
;

1398 *
u
++ = 
ch
;

1399 
ch
 = *
p
++;

1403 
ch
) {

1404 #i‡(
NGX_WIN32
)

1408 
°©e
 = 
sw_¶ash
;

1409 
u
--;

1412 
°©e
 = 
sw_dŸ_dŸ
;

1413 *
u
++ = 
ch
;

1416 
quŸed_°©e
 = 
°©e
;

1417 
°©e
 = 
sw_quŸed
;

1420 
r
->
¨gs_°¨t
 = 
p
;

1421 
¨gs
;

1423 
d⁄e
;

1425 
r
->
∂us_ö_uri
 = 1;

1427 
°©e
 = 
sw_usuÆ
;

1428 *
u
++ = 
ch
;

1432 
ch
 = *
p
++;

1435 
sw_dŸ_dŸ
:

1437 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1438 
°©e
 = 
sw_usuÆ
;

1439 *
u
++ = 
ch
;

1440 
ch
 = *
p
++;

1444 
ch
) {

1445 #i‡(
NGX_WIN32
)

1449 
°©e
 = 
sw_¶ash
;

1450 
u
 -= 5;

1452 i‡(
u
 < 
r
->
uri
.
d©a
) {

1453  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1455 i‡(*
u
 == '/') {

1456 
u
++;

1459 
u
--;

1463 
quŸed_°©e
 = 
°©e
;

1464 
°©e
 = 
sw_quŸed
;

1467 
r
->
¨gs_°¨t
 = 
p
;

1468 
¨gs
;

1470 
d⁄e
;

1472 
r
->
∂us_ö_uri
 = 1;

1474 
°©e
 = 
sw_usuÆ
;

1475 *
u
++ = 
ch
;

1479 
ch
 = *
p
++;

1482 
sw_quŸed
:

1483 
r
->
quŸed_uri
 = 1;

1485 i‡(
ch
 >= '0' && ch <= '9') {

1486 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1487 
°©e
 = 
sw_quŸed_£c⁄d
;

1488 
ch
 = *
p
++;

1492 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1493 i‡(
c
 >= 'a' && c <= 'f') {

1494 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1495 
°©e
 = 
sw_quŸed_£c⁄d
;

1496 
ch
 = *
p
++;

1500  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1502 
sw_quŸed_£c⁄d
:

1503 i‡(
ch
 >= '0' && ch <= '9') {

1504 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1506 i‡(
ch
 == '%' || ch == '#') {

1507 
°©e
 = 
sw_usuÆ
;

1508 *
u
++ = 
ch
;

1509 
ch
 = *
p
++;

1512 } i‡(
ch
 == '\0') {

1513  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1516 
°©e
 = 
quŸed_°©e
;

1520 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1521 i‡(
c
 >= 'a' && c <= 'f') {

1522 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1524 i‡(
ch
 == '?') {

1525 
°©e
 = 
sw_usuÆ
;

1526 *
u
++ = 
ch
;

1527 
ch
 = *
p
++;

1530 } i‡(
ch
 == '+') {

1531 
r
->
∂us_ö_uri
 = 1;

1534 
°©e
 = 
quŸed_°©e
;

1538  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1542 
d⁄e
:

1544 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1546 i‡(
r
->
uri_ext
) {

1547 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1548 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1551 
r
->
uri_ext
 = 
NULL
;

1553  
NGX_OK
;

1555 
¨gs
:

1557 
p
 < 
r
->
uri_íd
) {

1558 i‡(*
p
++ != '#') {

1562 
r
->
¨gs
.
Àn
 = 
p
 - 1 -Ñ->
¨gs_°¨t
;

1563 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1564 
r
->
¨gs_°¨t
 = 
NULL
;

1569 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1571 i‡(
r
->
uri_ext
) {

1572 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1573 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1576 
r
->
uri_ext
 = 
NULL
;

1578  
NGX_OK
;

1579 
	}
}

1582 
ngx_öt_t


1583 
	$ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

1584 
ngx_hâp_°©us_t
 *
°©us
)

1586 
u_ch¨
 
ch
;

1587 
u_ch¨
 *
p
;

1589 
sw_°¨t
 = 0,

1590 
sw_H
,

1591 
sw_HT
,

1592 
sw_HTT
,

1593 
sw_HTTP
,

1594 
sw_fú°_maj‹_digô
,

1595 
sw_maj‹_digô
,

1596 
sw_fú°_mö‹_digô
,

1597 
sw_mö‹_digô
,

1598 
sw_°©us
,

1599 
sw_•a˚_a·î_°©us
,

1600 
sw_°©us_ãxt
,

1601 
sw_Æmo°_d⁄e


1602 } 
°©e
;

1604 
°©e
 = 
r
->state;

1606 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1607 
ch
 = *
p
;

1609 
°©e
) {

1612 
sw_°¨t
:

1613 
ch
) {

1615 
°©e
 = 
sw_H
;

1618  
NGX_ERROR
;

1622 
sw_H
:

1623 
ch
) {

1625 
°©e
 = 
sw_HT
;

1628  
NGX_ERROR
;

1632 
sw_HT
:

1633 
ch
) {

1635 
°©e
 = 
sw_HTT
;

1638  
NGX_ERROR
;

1642 
sw_HTT
:

1643 
ch
) {

1645 
°©e
 = 
sw_HTTP
;

1648  
NGX_ERROR
;

1652 
sw_HTTP
:

1653 
ch
) {

1655 
°©e
 = 
sw_fú°_maj‹_digô
;

1658  
NGX_ERROR
;

1663 
sw_fú°_maj‹_digô
:

1664 i‡(
ch
 < '1' || ch > '9') {

1665  
NGX_ERROR
;

1668 
r
->
hâp_maj‹
 = 
ch
 - '0';

1669 
°©e
 = 
sw_maj‹_digô
;

1673 
sw_maj‹_digô
:

1674 i‡(
ch
 == '.') {

1675 
°©e
 = 
sw_fú°_mö‹_digô
;

1679 i‡(
ch
 < '0' || ch > '9') {

1680  
NGX_ERROR
;

1683 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

1687 
sw_fú°_mö‹_digô
:

1688 i‡(
ch
 < '0' || ch > '9') {

1689  
NGX_ERROR
;

1692 
r
->
hâp_mö‹
 = 
ch
 - '0';

1693 
°©e
 = 
sw_mö‹_digô
;

1697 
sw_mö‹_digô
:

1698 i‡(
ch
 == ' ') {

1699 
°©e
 = 
sw_°©us
;

1703 i‡(
ch
 < '0' || ch > '9') {

1704  
NGX_ERROR
;

1707 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

1711 
sw_°©us
:

1712 i‡(
ch
 == ' ') {

1716 i‡(
ch
 < '0' || ch > '9') {

1717  
NGX_ERROR
;

1720 
°©us
->
code
 = sètus->codê* 10 + 
ch
 - '0';

1722 i‡(++
°©us
->
cou¡
 == 3) {

1723 
°©e
 = 
sw_•a˚_a·î_°©us
;

1724 
°©us
->
°¨t
 = 
p
 - 2;

1730 
sw_•a˚_a·î_°©us
:

1731 
ch
) {

1733 
°©e
 = 
sw_°©us_ãxt
;

1736 
°©e
 = 
sw_°©us_ãxt
;

1738 
CR
:

1739 
°©e
 = 
sw_Æmo°_d⁄e
;

1741 
LF
:

1742 
d⁄e
;

1744  
NGX_ERROR
;

1749 
sw_°©us_ãxt
:

1750 
ch
) {

1751 
CR
:

1752 
°©e
 = 
sw_Æmo°_d⁄e
;

1755 
LF
:

1756 
d⁄e
;

1761 
sw_Æmo°_d⁄e
:

1762 
°©us
->
íd
 = 
p
 - 1;

1763 
ch
) {

1764 
LF
:

1765 
d⁄e
;

1767  
NGX_ERROR
;

1772 
b
->
pos
 = 
p
;

1773 
r
->
°©e
 = state;

1775  
NGX_AGAIN
;

1777 
d⁄e
:

1779 
b
->
pos
 = 
p
 + 1;

1781 i‡(
°©us
->
íd
 =
NULL
) {

1782 
°©us
->
íd
 = 
p
;

1785 
°©us
->
hâp_vîsi⁄
 = 
r
->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

1786 
r
->
°©e
 = 
sw_°¨t
;

1788  
NGX_OK
;

1789 
	}
}

1792 
ngx_öt_t


1793 
	$ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

1794 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
)

1796 
u_ch¨
 
ch
, *
p
, *
§c
, *
d°
;

1797 
size_t
 
Àn
;

1798 
ngx_uöt_t
 
quŸed
;

1800 
Àn
 = 
uri
->len;

1801 
p
 = 
uri
->
d©a
;

1802 
quŸed
 = 0;

1804 i‡(
Àn
 =0 || 
p
[0] == '?') {

1805 
unß„
;

1808 i‡(
p
[0] ='.' && 
Àn
 > 1 &&Ö[1] == '.'

1809 && (
Àn
 =2 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1811 
unß„
;

1814  ; 
Àn
;Üen--) {

1816 
ch
 = *
p
++;

1818 i‡(
ch
 == '%') {

1819 
quŸed
 = 1;

1823 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1827 i‡(
ch
 == '?') {

1828 
¨gs
->
Àn
 =Üen - 1;

1829 
¨gs
->
d©a
 = 
p
;

1830 
uri
->
Àn
 -=Üen;

1835 i‡(
ch
 == '\0') {

1836 
unß„
;

1839 i‡(
	`ngx_∑th_£∑øt‹
(
ch
Ë&& 
Àn
 > 2) {

1843 i‡(
p
[0] == '.' &&Ö[1] == '.'

1844 && (
Àn
 =3 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1846 
unß„
;

1851 i‡(
quŸed
) {

1852 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1853 "esˇ≥d URI: \"%V\"", 
uri
);

1855 
§c
 = 
uri
->
d©a
;

1857 
d°
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
uri
->
Àn
);

1858 i‡(
d°
 =
NULL
) {

1859  
NGX_ERROR
;

1862 
uri
->
d©a
 = 
d°
;

1864 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
uri
->
Àn
, 0);

1866 
uri
->
Àn
 = 
d°
 - uri->
d©a
;

1868 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1869 "u√sˇ≥d URI: \"%V\"", 
uri
);

1871 
Àn
 = 
uri
->len;

1872 
p
 = 
uri
->
d©a
;

1874 i‡(
p
[0] ='.' && 
Àn
 > 1 &&Ö[1] == '.'

1875 && (
Àn
 =2 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1877 
unß„
;

1880  ; 
Àn
;Üen--) {

1882 
ch
 = *
p
++;

1884 i‡(
ch
 == '\0') {

1885 
unß„
;

1888 i‡(
	`ngx_∑th_£∑øt‹
(
ch
Ë&& 
Àn
 > 2) {

1892 i‡(
p
[0] == '.' &&Ö[1] == '.'

1893 && (
Àn
 =3 || 
	`ngx_∑th_£∑øt‹
(
p
[2])))

1895 
unß„
;

1901  
NGX_OK
;

1903 
unß„
:

1905 i‡(*
Êags
 & 
NGX_HTTP_LOG_UNSAFE
) {

1906 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1907 "unß„ URI \"%V\" wa†dëe˘ed", 
uri
);

1910  
NGX_ERROR
;

1911 
	}
}

1914 
ngx_öt_t


1915 
	$ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
«me
,

1916 
ngx_°r_t
 *
vÆue
)

1918 
ngx_uöt_t
 
i
;

1919 
u_ch¨
 *
°¨t
, *
œ°
, *
íd
, 
ch
;

1920 
ngx_èbÀ_ñt_t
 **
h
;

1922 
h
 = 
hódîs
->
ñts
;

1924 
i
 = 0; i < 
hódîs
->
√…s
; i++) {

1926 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
hódîs
->
poﬁ
->
log
, 0,

1927 "∑r£ hódî: \"%V: %V\"", &
h
[
i
]->
key
, &h[i]->
vÆue
);

1929 i‡(
«me
->
Àn
 > 
h
[
i
]->
vÆue
.len) {

1933 
°¨t
 = 
h
[
i
]->
vÆue
.
d©a
;

1934 
íd
 = 
h
[
i
]->
vÆue
.
d©a
 + h[i]->vÆue.
Àn
;

1936 
°¨t
 < 
íd
) {

1938 i‡(
	`ngx_°∫ˇ£cmp
(
°¨t
, 
«me
->
d©a
,Çame->
Àn
) != 0) {

1939 
skù
;

1942 
°¨t
 +
«me
->
Àn
; sèπ < 
íd
 && *start == ' '; start++) {

1946 i‡(
vÆue
 =
NULL
) {

1947 i‡(
°¨t
 =
íd
 || *start == ',') {

1948  
i
;

1951 
skù
;

1954 i‡(
°¨t
 =
íd
 || *start++ != '=') {

1956 
skù
;

1959 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1961 
œ°
 = 
°¨t
;Üa° < 
íd
 && *last != ';';Üast++) {

1965 
vÆue
->
Àn
 = 
œ°
 - 
°¨t
;

1966 
vÆue
->
d©a
 = 
°¨t
;

1968  
i
;

1970 
skù
:

1972 
°¨t
 < 
íd
) {

1973 
ch
 = *
°¨t
++;

1974 i‡(
ch
 == ';' || ch == ',') {

1979 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1983  
NGX_DECLINED
;

1984 
	}
}

1987 
ngx_öt_t


1988 
	$ngx_hâp_∑r£_£t_cookõ_löes
(
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
«me
,

1989 
ngx_°r_t
 *
vÆue
)

1991 
ngx_uöt_t
 
i
;

1992 
u_ch¨
 *
°¨t
, *
œ°
, *
íd
;

1993 
ngx_èbÀ_ñt_t
 **
h
;

1995 
h
 = 
hódîs
->
ñts
;

1997 
i
 = 0; i < 
hódîs
->
√…s
; i++) {

1999 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
hódîs
->
poﬁ
->
log
, 0,

2000 "∑r£ hódî: \"%V: %V\"", &
h
[
i
]->
key
, &h[i]->
vÆue
);

2002 i‡(
«me
->
Àn
 >
h
[
i
]->
vÆue
.len) {

2006 
°¨t
 = 
h
[
i
]->
vÆue
.
d©a
;

2007 
íd
 = 
h
[
i
]->
vÆue
.
d©a
 + h[i]->vÆue.
Àn
;

2009 i‡(
	`ngx_°∫ˇ£cmp
(
°¨t
, 
«me
->
d©a
,Çame->
Àn
) != 0) {

2013 
°¨t
 +
«me
->
Àn
; sèπ < 
íd
 && *start == ' '; start++) {

2017 i‡(
°¨t
 =
íd
 || *start++ != '=') {

2022 
°¨t
 < 
íd
 && *start == ' ') { start++; }

2024 
œ°
 = 
°¨t
;Üa° < 
íd
 && *last != ';';Üast++) {

2028 
vÆue
->
Àn
 = 
œ°
 - 
°¨t
;

2029 
vÆue
->
d©a
 = 
°¨t
;

2031  
i
;

2034  
NGX_DECLINED
;

2035 
	}
}

2038 
ngx_öt_t


2039 
	$ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
, 
ngx_°r_t
 *
vÆue
)

2041 
u_ch¨
 *
p
, *
œ°
;

2043 i‡(
r
->
¨gs
.
Àn
 == 0) {

2044  
NGX_DECLINED
;

2047 
p
 = 
r
->
¨gs
.
d©a
;

2048 
œ°
 = 
p
 + 
r
->
¨gs
.
Àn
;

2050  ; 
p
 < 
œ°
;Ö++) {

2054 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
 - 1, 
«me
, 
Àn
 - 1);

2056 i‡(
p
 =
NULL
) {

2057  
NGX_DECLINED
;

2060 i‡((
p
 =
r
->
¨gs
.
d©a
 || *’ - 1Ë='&'Ë&& *’ + 
Àn
) == '=') {

2062 
vÆue
->
d©a
 = 
p
 + 
Àn
 + 1;

2064 
p
 = 
	`ngx_°æchr
’, 
œ°
, '&');

2066 i‡(
p
 =
NULL
) {

2067 
p
 = 
r
->
¨gs
.
d©a
 +Ñ->¨gs.
Àn
;

2070 
vÆue
->
Àn
 = 
p
 - vÆue->
d©a
;

2072  
NGX_OK
;

2076  
NGX_DECLINED
;

2077 
	}
}

2081 
	$ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

2083 
u_ch¨
 *
p
, *
œ°
;

2085 
œ°
 = 
uri
->
d©a
 + uri->
Àn
;

2087 
p
 = 
	`ngx_°æchr
(
uri
->
d©a
, 
œ°
, '?');

2089 i‡(
p
) {

2090 
uri
->
Àn
 = 
p
 - uri->
d©a
;

2091 
p
++;

2092 
¨gs
->
Àn
 = 
œ°
 - 
p
;

2093 
¨gs
->
d©a
 = 
p
;

2096 
¨gs
->
Àn
 = 0;

2098 
	}
}

2101 
ngx_öt_t


2102 
	$ngx_hâp_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

2103 
ngx_hâp_chunked_t
 *
˘x
)

2105 
u_ch¨
 *
pos
, 
ch
, 
c
;

2106 
ngx_öt_t
 
rc
;

2108 
sw_chunk_°¨t
 = 0,

2109 
sw_chunk_size
,

2110 
sw_chunk_exãnsi⁄
,

2111 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
,

2112 
sw_chunk_d©a
,

2113 
sw_a·î_d©a
,

2114 
sw_a·î_d©a_Æmo°_d⁄e
,

2115 
sw_œ°_chunk_exãnsi⁄
,

2116 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
,

2117 
sw_åaûî
,

2118 
sw_åaûî_Æmo°_d⁄e
,

2119 
sw_åaûî_hódî
,

2120 
sw_åaûî_hódî_Æmo°_d⁄e


2121 } 
°©e
;

2123 
°©e
 = 
˘x
->state;

2125 i‡(
°©e
 =
sw_chunk_d©a
 && 
˘x
->
size
 == 0) {

2126 
°©e
 = 
sw_a·î_d©a
;

2129 
rc
 = 
NGX_AGAIN
;

2131 
pos
 = 
b
->pos;Öo†< b->
œ°
;Öos++) {

2133 
ch
 = *
pos
;

2135 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2136 "hâ∞chunked byã: %02Xd s:%d", 
ch
, 
°©e
);

2138 
°©e
) {

2140 
sw_chunk_°¨t
:

2141 i‡(
ch
 >= '0' && ch <= '9') {

2142 
°©e
 = 
sw_chunk_size
;

2143 
˘x
->
size
 = 
ch
 - '0';

2147 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

2149 i‡(
c
 >= 'a' && c <= 'f') {

2150 
°©e
 = 
sw_chunk_size
;

2151 
˘x
->
size
 = 
c
 - 'a' + 10;

2155 
övÆid
;

2157 
sw_chunk_size
:

2158 i‡(
˘x
->
size
 > 
NGX_MAX_OFF_T_VALUE
 / 16) {

2159 
övÆid
;

2162 i‡(
ch
 >= '0' && ch <= '9') {

2163 
˘x
->
size
 = ctx->sizê* 16 + (
ch
 - '0');

2167 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

2169 i‡(
c
 >= 'a' && c <= 'f') {

2170 
˘x
->
size
 = ctx->sizê* 16 + (
c
 - 'a' + 10);

2174 i‡(
˘x
->
size
 == 0) {

2176 
ch
) {

2177 
CR
:

2178 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

2180 
LF
:

2181 
°©e
 = 
sw_åaûî
;

2186 
°©e
 = 
sw_œ°_chunk_exãnsi⁄
;

2189 
övÆid
;

2195 
ch
) {

2196 
CR
:

2197 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

2199 
LF
:

2200 
°©e
 = 
sw_chunk_d©a
;

2205 
°©e
 = 
sw_chunk_exãnsi⁄
;

2208 
övÆid
;

2213 
sw_chunk_exãnsi⁄
:

2214 
ch
) {

2215 
CR
:

2216 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

2218 
LF
:

2219 
°©e
 = 
sw_chunk_d©a
;

2223 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

2224 i‡(
ch
 =
LF
) {

2225 
°©e
 = 
sw_chunk_d©a
;

2228 
övÆid
;

2230 
sw_chunk_d©a
:

2231 
rc
 = 
NGX_OK
;

2232 
d©a
;

2234 
sw_a·î_d©a
:

2235 
ch
) {

2236 
CR
:

2237 
°©e
 = 
sw_a·î_d©a_Æmo°_d⁄e
;

2239 
LF
:

2240 
°©e
 = 
sw_chunk_°¨t
;

2244 
sw_a·î_d©a_Æmo°_d⁄e
:

2245 i‡(
ch
 =
LF
) {

2246 
°©e
 = 
sw_chunk_°¨t
;

2249 
övÆid
;

2251 
sw_œ°_chunk_exãnsi⁄
:

2252 
ch
) {

2253 
CR
:

2254 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

2256 
LF
:

2257 
°©e
 = 
sw_åaûî
;

2261 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

2262 i‡(
ch
 =
LF
) {

2263 
°©e
 = 
sw_åaûî
;

2266 
övÆid
;

2268 
sw_åaûî
:

2269 
ch
) {

2270 
CR
:

2271 
°©e
 = 
sw_åaûî_Æmo°_d⁄e
;

2273 
LF
:

2274 
d⁄e
;

2276 
°©e
 = 
sw_åaûî_hódî
;

2280 
sw_åaûî_Æmo°_d⁄e
:

2281 i‡(
ch
 =
LF
) {

2282 
d⁄e
;

2284 
övÆid
;

2286 
sw_åaûî_hódî
:

2287 
ch
) {

2288 
CR
:

2289 
°©e
 = 
sw_åaûî_hódî_Æmo°_d⁄e
;

2291 
LF
:

2292 
°©e
 = 
sw_åaûî
;

2296 
sw_åaûî_hódî_Æmo°_d⁄e
:

2297 i‡(
ch
 =
LF
) {

2298 
°©e
 = 
sw_åaûî
;

2301 
övÆid
;

2306 
d©a
:

2308 
˘x
->
°©e
 = state;

2309 
b
->
pos
 =Öos;

2311 i‡(
˘x
->
size
 > 
NGX_MAX_OFF_T_VALUE
 - 5) {

2312 
övÆid
;

2315 
°©e
) {

2317 
sw_chunk_°¨t
:

2318 
˘x
->
Àngth
 = 3 ;

2320 
sw_chunk_size
:

2321 
˘x
->
Àngth
 = 1

2322 + (
˘x
->
size
 ? ctx->size + 4

2325 
sw_chunk_exãnsi⁄
:

2326 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

2327 
˘x
->
Àngth
 = 1 + ctx->
size
 + 4 ;

2329 
sw_chunk_d©a
:

2330 
˘x
->
Àngth
 = ctx->
size
 + 4 ;

2332 
sw_a·î_d©a
:

2333 
sw_a·î_d©a_Æmo°_d⁄e
:

2334 
˘x
->
Àngth
 = 4 ;

2336 
sw_œ°_chunk_exãnsi⁄
:

2337 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

2338 
˘x
->
Àngth
 = 2 ;

2340 
sw_åaûî
:

2341 
sw_åaûî_Æmo°_d⁄e
:

2342 
˘x
->
Àngth
 = 1 ;

2344 
sw_åaûî_hódî
:

2345 
sw_åaûî_hódî_Æmo°_d⁄e
:

2346 
˘x
->
Àngth
 = 2 ;

2351  
rc
;

2353 
d⁄e
:

2355 
˘x
->
°©e
 = 0;

2356 
b
->
pos
 =Öos + 1;

2358  
NGX_DONE
;

2360 
övÆid
:

2362  
NGX_ERROR
;

2363 
	}
}

	@src/http/ngx_http_parse_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_uöt_t
 
	gmday
[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

15 
time_t


16 
	$ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
)

18 
u_ch¨
 *
p
, *
íd
;

19 
ngx_öt_t
 
m⁄th
;

20 
ngx_uöt_t
 
day
, 
yór
, 
hour
, 
mö
, 
£c
;

21 
uöt64_t
 
time
;

23 
no
 = 0,

24 
rfc822
,

25 
rfc850
,

26 
isoc


27 } 
fmt
;

29 
fmt
 = 0;

30 
íd
 = 
vÆue
 + 
Àn
;

32 #i‡(
NGX_SUPPRESS_WARN
)

33 
day
 = 32;

34 
yór
 = 2038;

37 
p
 = 
vÆue
;Ö < 
íd
;Ö++) {

38 i‡(*
p
 == ',') {

42 i‡(*
p
 == ' ') {

43 
fmt
 = 
isoc
;

48 
p
++;Ö < 
íd
;Ö++)

49 i‡(*
p
 != ' ') {

53 i‡(
íd
 - 
p
 < 18) {

54  
NGX_ERROR
;

57 i‡(
fmt
 !
isoc
) {

58 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

59  
NGX_ERROR
;

62 
day
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

63 
p
 += 2;

65 i‡(*
p
 == ' ') {

66 i‡(
íd
 - 
p
 < 18) {

67  
NGX_ERROR
;

69 
fmt
 = 
rfc822
;

71 } i‡(*
p
 == '-') {

72 
fmt
 = 
rfc850
;

75  
NGX_ERROR
;

78 
p
++;

81 *
p
) {

84 
m⁄th
 = *(
p
 + 1) == 'a' ? 0 : *(p + 2) == 'n' ? 5 : 6;

88 
m⁄th
 = 1;

92 
m⁄th
 = *(
p
 + 2) == 'r' ? 2 : 4;

96 
m⁄th
 = *(
p
 + 1) == 'p' ? 3 : 7;

100 
m⁄th
 = 8;

104 
m⁄th
 = 9;

108 
m⁄th
 = 10;

112 
m⁄th
 = 11;

116  
NGX_ERROR
;

119 
p
 += 3;

121 i‡((
fmt
 =
rfc822
 && *
p
 !' 'Ë|| (fmà=
rfc850
 && *p != '-')) {

122  
NGX_ERROR
;

125 
p
++;

127 i‡(
fmt
 =
rfc822
) {

128 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

129 || *(
p
 + 2) < '0' || *(p + 2) > '9'

130 || *(
p
 + 3) < '0' || *(p + 3) > '9')

132  
NGX_ERROR
;

135 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

136 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

137 
p
 += 4;

139 } i‡(
fmt
 =
rfc850
) {

140 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

141  
NGX_ERROR
;

144 
yór
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

145 
yór
 += (year < 70) ? 2000 : 1900;

146 
p
 += 2;

149 i‡(
fmt
 =
isoc
) {

150 i‡(*
p
 == ' ') {

151 
p
++;

154 i‡(*
p
 < '0' || *p > '9') {

155  
NGX_ERROR
;

158 
day
 = *
p
++ - '0';

160 i‡(*
p
 != ' ') {

161 i‡(*
p
 < '0' || *p > '9') {

162  
NGX_ERROR
;

165 
day
 = day * 10 + *
p
++ - '0';

168 i‡(
íd
 - 
p
 < 14) {

169  
NGX_ERROR
;

173 i‡(*
p
++ != ' ') {

174  
NGX_ERROR
;

177 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

178  
NGX_ERROR
;

181 
hour
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

182 
p
 += 2;

184 i‡(*
p
++ != ':') {

185  
NGX_ERROR
;

188 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

189  
NGX_ERROR
;

192 
mö
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

193 
p
 += 2;

195 i‡(*
p
++ != ':') {

196  
NGX_ERROR
;

199 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

200  
NGX_ERROR
;

203 
£c
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

205 i‡(
fmt
 =
isoc
) {

206 
p
 += 2;

208 i‡(*
p
++ != ' ') {

209  
NGX_ERROR
;

212 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

213 || *(
p
 + 2) < '0' || *(p + 2) > '9'

214 || *(
p
 + 3) < '0' || *(p + 3) > '9')

216  
NGX_ERROR
;

219 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

220 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

223 i‡(
hour
 > 23 || 
mö
 > 59 || 
£c
 > 59) {

224  
NGX_ERROR
;

227 i‡(
day
 =29 && 
m⁄th
 == 1) {

228 i‡((
yór
 & 3) || ((year % 100 == 0) && (year % 400) != 0)) {

229  
NGX_ERROR
;

232 } i‡(
day
 > 
mday
[
m⁄th
]) {

233  
NGX_ERROR
;

241 i‡(--
m⁄th
 <= 0) {

242 
m⁄th
 += 12;

243 
yór
 -= 1;

248 
time
 = (
uöt64_t
) (

251 365 * 
yór
 + year / 4 - year / 100 + year / 400

255 + 367 * 
m⁄th
 / 12 - 30

259 + 
day
 - 1

266 - 719527 + 31 + 28Ë* 86400 + 
hour
 * 3600 + 
mö
 * 60 + 
£c
;

268 #i‡(
NGX_TIME_T_SIZE
 <= 4)

270 i‡(
time
 > 0x7fffffff) {

271  
NGX_ERROR
;

276  (
time_t
Ë
time
;

277 
	}
}

	@src/http/ngx_http_postpone_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
,

14 
ngx_chaö_t
 *
ö
);

15 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_po°p⁄e_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL


33 
ngx_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

52 
ngx_öt_t


53 
	$ngx_hâp_po°p⁄e_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

55 
ngx_c⁄√˘i⁄_t
 *
c
;

56 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
;

58 
c
 = 
r
->
c⁄√˘i⁄
;

60 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

61 "hâ∞po°p⁄êfûã∏\"%V?%V\" %p", &
r
->
uri
, &r->
¨gs
, 
ö
);

63 i‡(
r
 !
c
->
d©a
) {

65 i‡(
ö
) {

66 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

67  
NGX_OK
;

72 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

76  
NGX_OK
;

79 i‡(
r
->
po°p⁄ed
 =
NULL
) {

81 i‡(
ö
 || 
c
->
buf„ªd
) {

82  
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
ö
);

85  
NGX_OK
;

88 i‡(
ö
) {

89 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

93 
¥
 = 
r
->
po°p⁄ed
;

95 i‡(
¥
->
ªque°
) {

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

99 &
¥
->
ªque°
->
uri
, &¥->ªque°->
¨gs
);

101 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

103 
c
->
d©a
 = 
¥
->
ªque°
;

105  
	`ngx_hâp_po°_ªque°
(
¥
->
ªque°
, 
NULL
);

108 i‡(
¥
->
out
 =
NULL
) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

113 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

115 &
r
->
uri
, &r->
¨gs
);

117 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
¥
->
out
Ë=
NGX_ERROR
) {

118  
NGX_ERROR
;

122 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

124 } 
r
->
po°p⁄ed
);

126  
NGX_OK
;

127 
	}
}

130 
ngx_öt_t


131 
	$ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

133 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, **
µr
;

135 i‡(
r
->
po°p⁄ed
) {

136 
¥
 = 
r
->
po°p⁄ed
;Ör->
√xt
;Ör =Ör->next) { }

138 i‡(
¥
->
ªque°
 =
NULL
) {

139 
found
;

142 
µr
 = &
¥
->
√xt
;

145 
µr
 = &
r
->
po°p⁄ed
;

148 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

149 i‡(
¥
 =
NULL
) {

150  
NGX_ERROR
;

153 *
µr
 = 
¥
;

155 
¥
->
ªque°
 = 
NULL
;

156 
¥
->
out
 = 
NULL
;

157 
¥
->
√xt
 = 
NULL
;

159 
found
:

161 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
¥
->
out
, 
ö
Ë=
NGX_OK
) {

162  
NGX_OK
;

165  
NGX_ERROR
;

166 
	}
}

169 
ngx_öt_t


170 
	$ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

172 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

173 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_po°p⁄e_fûãr
;

175  
NGX_OK
;

176 
	}
}

	@src/http/ngx_http_request.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_waô_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

14 
ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
);

15 
ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
);

16 
ssize_t
 
ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_uöt_t
 
ªque°_löe
);

20 
ngx_öt_t
 
ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

22 
ngx_öt_t
 
ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

24 
ngx_öt_t
 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

26 
ngx_öt_t
 
ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

28 
ngx_öt_t
 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

30 
ngx_öt_t
 
ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

33 
ngx_öt_t
 
ngx_hâp_vÆid©e_ho°
(
ngx_°r_t
 *
ho°
, 
ngx_poﬁ_t
 *
poﬁ
,

34 
ngx_uöt_t
 
Æloc
);

35 
ngx_öt_t
 
ngx_hâp_£t_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_°r_t
 *
ho°
);

37 
ngx_öt_t
 
ngx_hâp_föd_vútuÆ_£rvî
(
ngx_c⁄√˘i⁄_t
 *
c
,

38 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
, 
ngx_°r_t
 *
ho°
,

39 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
);

41 
ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

42 
ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

43 
ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_öt_t
 
ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

46 
ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
);

47 
ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ev
);

51 
ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

53 
ngx_öt_t
 
ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

54 
ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
);

55 
ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

57 
u_ch¨
 *
ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

58 
u_ch¨
 *
ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_ªque°_t
 *
§
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

61 #i‡(
NGX_HTTP_SSL
)

62 
ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
);

63 
ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

67 *
	gngx_hâp_˛õ¡_îr‹s
[] = {

80 
ngx_hâp_hódî_t
 
	gngx_hâp_hódîs_ö
[] = {

81 { 
ngx_°rög
("Ho°"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ho°
),

82 
ngx_hâp_¥o˚ss_ho°
 },

84 { 
ngx_°rög
("C⁄√˘i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄√˘i⁄
),

85 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
 },

87 { 
ngx_°rög
("If-Modified-Since"),

88 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_modifõd_sö˚
),

89 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

91 { 
ngx_°rög
("If-Unmodified-Since"),

92 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_unmodifõd_sö˚
),

93 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

95 { 
ngx_°rög
("If-Match"),

96 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_m©ch
),

97 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

99 { 
ngx_°rög
("If-None-Match"),

100 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_n⁄e_m©ch
),

101 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

103 { 
ngx_°rög
("U£r-Agít"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
u£r_agít
),

104 
ngx_hâp_¥o˚ss_u£r_agít
 },

106 { 
ngx_°rög
("Re„ªr"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ª„ªr
),

107 
ngx_hâp_¥o˚ss_hódî_löe
 },

109 { 
ngx_°rög
("Content-Length"),

110 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

111 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

113 { 
ngx_°rög
("Content-Type"),

114 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

115 
ngx_hâp_¥o˚ss_hódî_löe
 },

117 { 
ngx_°rög
("R™ge"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ønge
),

118 
ngx_hâp_¥o˚ss_hódî_löe
 },

120 { 
ngx_°rög
("If-Range"),

121 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_ønge
),

122 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

124 { 
ngx_°rög
("Transfer-Encoding"),

125 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
å™s„r_ícodög
),

126 
ngx_hâp_¥o˚ss_hódî_löe
 },

128 { 
ngx_°rög
("Expect"),

129 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ex≥˘
),

130 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

132 { 
ngx_°rög
("Upgrade"),

133 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
upgøde
),

134 
ngx_hâp_¥o˚ss_hódî_löe
 },

136 #i‡(
NGX_HTTP_GZIP
)

137 { 
ngx_°rög
("Accept-Encoding"),

138 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_ícodög
),

139 
ngx_hâp_¥o˚ss_hódî_löe
 },

141 { 
ngx_°rög
("Vü"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
vü
),

142 
ngx_hâp_¥o˚ss_hódî_löe
 },

145 { 
ngx_°rög
("Authorization"),

146 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
auth‹iz©i⁄
),

147 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

149 { 
ngx_°rög
("Kìp-Alive"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
kìp_Æive
),

150 
ngx_hâp_¥o˚ss_hódî_löe
 },

152 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

153 { 
ngx_°rög
("X-Forwarded-For"),

154 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_f‹w¨ded_f‹
),

155 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
 },

158 #i‡(
NGX_HTTP_REALIP
)

159 { 
ngx_°rög
("X-Real-IP"),

160 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_ªÆ_ù
),

161 
ngx_hâp_¥o˚ss_hódî_löe
 },

164 #i‡(
NGX_HTTP_HEADERS
)

165 { 
ngx_°rög
("Ac˚±"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±
),

166 
ngx_hâp_¥o˚ss_hódî_löe
 },

168 { 
ngx_°rög
("Accept-Language"),

169 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_œnguage
),

170 
ngx_hâp_¥o˚ss_hódî_löe
 },

173 #i‡(
NGX_HTTP_DAV
)

174 { 
ngx_°rög
("Dïth"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
dïth
),

175 
ngx_hâp_¥o˚ss_hódî_löe
 },

177 { 
ngx_°rög
("De°ö©i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
de°ö©i⁄
),

178 
ngx_hâp_¥o˚ss_hódî_löe
 },

180 { 
ngx_°rög
("Ovîwrôe"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ovîwrôe
),

181 
ngx_hâp_¥o˚ss_hódî_löe
 },

183 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
d©e
),

184 
ngx_hâp_¥o˚ss_hódî_löe
 },

187 { 
ngx_°rög
("Cookõ"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
cookõs
),

188 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
 },

190 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

195 
	$ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

197 
ngx_uöt_t
 
i
;

198 
ngx_evít_t
 *
ªv
;

199 
sockaddr_ö
 *
sö
;

200 
ngx_hâp_p‹t_t
 *
p‹t
;

201 
ngx_hâp_ö_addr_t
 *
addr
;

202 
ngx_hâp_log_˘x_t
 *
˘x
;

203 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

204 #i‡(
NGX_HAVE_INET6
)

205 
sockaddr_ö6
 *
sö6
;

206 
ngx_hâp_ö6_addr_t
 *
addr6
;

209 
hc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_c⁄√˘i⁄_t
));

210 i‡(
hc
 =
NULL
) {

211 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

215 
c
->
d©a
 = 
hc
;

219 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

221 i‡(
p‹t
->
«ddrs
 > 1) {

229 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

230 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

234 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

236 #i‡(
NGX_HAVE_INET6
)

237 
AF_INET6
:

238 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

240 
addr6
 = 
p‹t
->
addrs
;

244 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

245 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

250 
hc
->
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

256 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

258 
addr
 = 
p‹t
->
addrs
;

262 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

263 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

268 
hc
->
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

275 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

277 #i‡(
NGX_HAVE_INET6
)

278 
AF_INET6
:

279 
addr6
 = 
p‹t
->
addrs
;

280 
hc
->
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

285 
addr
 = 
p‹t
->
addrs
;

286 
hc
->
addr_c⁄f
 = &
addr
[0].
c⁄f
;

292 
hc
->
c⁄f_˘x
 = hc->
addr_c⁄f
->
deÁu…_£rvî
->
˘x
;

294 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

295 i‡(
˘x
 =
NULL
) {

296 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

300 
˘x
->
c⁄√˘i⁄
 = 
c
;

301 
˘x
->
ªque°
 = 
NULL
;

302 
˘x
->
cuºít_ªque°
 = 
NULL
;

304 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

305 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

306 
c
->
log
->
d©a
 = 
˘x
;

307 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

309 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

311 
ªv
 = 
c
->
ªad
;

312 
ªv
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

313 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

315 #i‡(
NGX_HTTP_SPDY
)

316 i‡(
hc
->
addr_c⁄f
->
•dy
) {

317 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_öô
;

321 #i‡(
NGX_HTTP_SSL
)

323 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

325 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_s¶_moduÀ
);

327 i‡(
sscf
->
íabÀ
 || 
hc
->
addr_c⁄f
->
s¶
) {

329 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

331 i‡(
hc
->
addr_c⁄f
->
s¶
 && 
sscf
->s¶.
˘x
 =
NULL
) {

332 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

335 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

339 
hc
->
s¶
 = 1;

341 
ªv
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake
;

346 i‡(
hc
->
addr_c⁄f
->
¥oxy_¥Ÿocﬁ
) {

347 
hc
->
¥oxy_¥Ÿocﬁ
 = 1;

348 
c
->
log
->
a˘i⁄
 = "reading PROXYÖrotocol";

351 i‡(
ªv
->
ªady
) {

354 i‡(
ngx_u£_ac˚±_muãx
) {

355 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

359 
ªv
->
	`h™dÀr
(rev);

363 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

364 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

366 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

367 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

370 
	}
}

374 
	$ngx_hâp_waô_ªque°_h™dÀr
(
ngx_evít_t
 *
ªv
)

376 
u_ch¨
 *
p
;

377 
size_t
 
size
;

378 
ssize_t
 
n
;

379 
ngx_buf_t
 *
b
;

380 
ngx_c⁄√˘i⁄_t
 *
c
;

381 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

382 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

384 
c
 = 
ªv
->
d©a
;

386 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http waitÑequest handler");

388 i‡(
ªv
->
timedout
) {

389 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

390 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

394 i‡(
c
->
˛o£
) {

395 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

399 
hc
 = 
c
->
d©a
;

400 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

402 
size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

404 
b
 = 
c
->
buf„r
;

406 i‡(
b
 =
NULL
) {

407 
b
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
size
);

408 i‡(
b
 =
NULL
) {

409 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

413 
c
->
buf„r
 = 
b
;

415 } i‡(
b
->
°¨t
 =
NULL
) {

417 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

418 i‡(
b
->
°¨t
 =
NULL
) {

419 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

423 
b
->
pos
 = b->
°¨t
;

424 
b
->
œ°
 = b->
°¨t
;

425 
b
->
íd
 = b->
œ°
 + 
size
;

428 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

430 i‡(
n
 =
NGX_AGAIN
) {

432 i‡(!
ªv
->
timî_£t
) {

433 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

434 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

437 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

438 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

446 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

447 
b
->
°¨t
 = 
NULL
;

453 i‡(
n
 =
NGX_ERROR
) {

454 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

458 i‡(
n
 == 0) {

459 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

461 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

465 
b
->
œ°
 +
n
;

467 i‡(
hc
->
¥oxy_¥Ÿocﬁ
) {

468 
hc
->
¥oxy_¥Ÿocﬁ
 = 0;

470 
p
 = 
	`ngx_¥oxy_¥Ÿocﬁ_∑r£
(
c
, 
b
->
pos
, b->
œ°
);

472 i‡(
p
 =
NULL
) {

473 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

477 
b
->
pos
 = 
p
;

479 i‡(
b
->
pos
 =b->
œ°
) {

480 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

481 
b
->
pos
 = b->
°¨t
;

482 
b
->
œ°
 = b->
°¨t
;

483 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

488 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

490 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

492 
c
->
d©a
 = 
	`ngx_hâp_¸óã_ªque°
(c);

493 i‡(
c
->
d©a
 =
NULL
) {

494 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

498 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

499 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

500 
	}
}

503 
ngx_hâp_ªque°_t
 *

504 
	$ngx_hâp_¸óã_ªque°
(
ngx_c⁄√˘i⁄_t
 *
c
)

506 
ngx_poﬁ_t
 *
poﬁ
;

507 
ngx_time_t
 *
ç
;

508 
ngx_hâp_ªque°_t
 *
r
;

509 
ngx_hâp_log_˘x_t
 *
˘x
;

510 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

511 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

512 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

513 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

515 
c
->
ªque°s
++;

517 
hc
 = 
c
->
d©a
;

519 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

521 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
cscf
->
ªque°_poﬁ_size
, 
c
->
log
);

522 i‡(
poﬁ
 =
NULL
) {

523  
NULL
;

526 
r
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_hâp_ªque°_t
));

527 i‡(
r
 =
NULL
) {

528 
	`ngx_de°roy_poﬁ
(
poﬁ
);

529  
NULL
;

532 
r
->
poﬁ
 =Öool;

534 
r
->
hâp_c⁄√˘i⁄
 = 
hc
;

535 
r
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

536 
r
->
c⁄√˘i⁄
 = 
c
;

538 
r
->
maö_c⁄f
 = 
hc
->
c⁄f_˘x
->main_conf;

539 
r
->
§v_c⁄f
 = 
hc
->
c⁄f_˘x
->srv_conf;

540 
r
->
loc_c⁄f
 = 
hc
->
c⁄f_˘x
->loc_conf;

542 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

544 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

546 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

548 
r
->
hódî_ö
 = 
hc
->
nbusy
 ? hc->
busy
[0] : 
c
->
buf„r
;

550 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_out
.
hódîs
,Ñ->
poﬁ
, 20,

551 (
ngx_èbÀ_ñt_t
))

552 !
NGX_OK
)

554 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

555  
NULL
;

558 
r
->
˘x
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

559 i‡(
r
->
˘x
 =
NULL
) {

560 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

561  
NULL
;

564 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

566 
r
->
v¨übÀs
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, 
cmcf
->v¨übÀs.
√…s


567 * (
ngx_hâp_v¨übÀ_vÆue_t
));

568 i‡(
r
->
v¨übÀs
 =
NULL
) {

569 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

570  
NULL
;

573 #i‡(
NGX_HTTP_SSL
)

574 i‡(
c
->
s¶
) {

575 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

579 
r
->
maö
 =Ñ;

580 
r
->
cou¡
 = 1;

582 
ç
 = 
	`ngx_timeofday
();

583 
r
->
°¨t_£c
 = 
ç
->
£c
;

584 
r
->
°¨t_m£c
 = 
ç
->
m£c
;

586 
r
->
mëhod
 = 
NGX_HTTP_UNKNOWN
;

587 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_10
;

589 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

590 
r
->
hódîs_ö
.
kìp_Æive_n
 = -1;

591 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

592 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

594 
r
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

595 
r
->
subªque°s
 = 
NGX_HTTP_MAX_SUBREQUESTS
 + 1;

597 
r
->
hâp_°©e
 = 
NGX_HTTP_READING_REQUEST_STATE
;

599 
˘x
 = 
c
->
log
->
d©a
;

600 
˘x
->
ªque°
 = 
r
;

601 
˘x
->
cuºít_ªque°
 = 
r
;

602 
r
->
log_h™dÀr
 = 
ngx_hâp_log_îr‹_h™dÀr
;

604 #i‡(
NGX_STAT_STUB
)

605 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

606 
r
->
°©_ªadög
 = 1;

607 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªque°s
, 1);

610  
r
;

611 
	}
}

614 #i‡(
NGX_HTTP_SSL
)

617 
	$ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
)

619 
u_ch¨
 *
p
, 
buf
[
NGX_PROXY_PROTOCOL_MAX_HEADER
 + 1];

620 
size_t
 
size
;

621 
ssize_t
 
n
;

622 
ngx_îr_t
 
îr
;

623 
ngx_öt_t
 
rc
;

624 
ngx_c⁄√˘i⁄_t
 *
c
;

625 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

626 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

628 
c
 = 
ªv
->
d©a
;

629 
hc
 = 
c
->
d©a
;

631 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

634 i‡(
ªv
->
timedout
) {

635 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

636 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

640 i‡(
c
->
˛o£
) {

641 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

645 
size
 = 
hc
->
¥oxy_¥Ÿocﬁ
 ? (
buf
) : 1;

647 
n
 = 
	`ªcv
(
c
->
fd
, (*Ë
buf
, 
size
, 
MSG_PEEK
);

649 
îr
 = 
ngx_sockë_î∫o
;

651 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "hâ∞ªcv(): %d", 
n
);

653 i‡(
n
 == -1) {

654 i‡(
îr
 =
NGX_EAGAIN
) {

655 
ªv
->
ªady
 = 0;

657 i‡(!
ªv
->
timî_£t
) {

658 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

659 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

662 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

663 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

669 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

670 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

675 i‡(
hc
->
¥oxy_¥Ÿocﬁ
) {

676 
hc
->
¥oxy_¥Ÿocﬁ
 = 0;

678 
p
 = 
	`ngx_¥oxy_¥Ÿocﬁ_∑r£
(
c
, 
buf
, bu‡+ 
n
);

680 i‡(
p
 =
NULL
) {

681 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

685 
size
 = 
p
 - 
buf
;

687 i‡(
c
->
	`ªcv
(c, 
buf
, 
size
Ë!(
ssize_t
) size) {

688 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

692 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

694 i‡(
n
 =(
ssize_t
Ë
size
) {

695 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

699 
n
 = 1;

700 
buf
[0] = *
p
;

703 i‡(
n
 == 1) {

704 i‡(
buf
[0] & 0x80 || buf[0] == 0x16 ) {

705 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

706 "hâp†s¶ h™dshake: 0x%02Xd", 
buf
[0]);

708 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
,

709 
ngx_hâp_s¶_moduÀ
);

711 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(&
sscf
->
s¶
, 
c
, 
NGX_SSL_BUFFER
)

712 !
NGX_OK
)

714 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

718 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

720 i‡(
rc
 =
NGX_AGAIN
) {

722 i‡(!
ªv
->
timî_£t
) {

723 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

726 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

728 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake_h™dÀr
;

732 
	`ngx_hâp_s¶_h™dshake_h™dÀr
(
c
);

737 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "plain http");

739 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

741 
ªv
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

742 
	`ngx_hâp_waô_ªque°_h™dÀr
(
ªv
);

747 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "client closed connection");

748 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

749 
	}
}

753 
	$ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

755 i‡(
c
->
s¶
->
h™dshaked
) {

765 
c
->
s¶
->
no_waô_shutdown
 = 1;

767 #i‡(
NGX_HTTP_SPDY
 \

768 && (
deföed
 
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄
 \

769 || 
deföed
 
TLSEXT_TYPE_√xt_¥Ÿo_√g
))

771 
Àn
;

772 c⁄° *
d©a
;

773 c⁄° 
ngx_°r_t
 
•dy
 = 
	`ngx_°rög
(
NGX_SPDY_NPN_NEGOTIATED
);

775 #ifde‡
TLSEXT_TYPE_≠∂iˇti⁄_œyî_¥Ÿocﬁ_√gŸüti⁄


776 
	`SSL_gë0_Æ≤_£À˘ed
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

778 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


779 i‡(
Àn
 == 0) {

780 
	`SSL_gë0_√xt_¥Ÿo_√gŸüãd
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

785 
	`SSL_gë0_√xt_¥Ÿo_√gŸüãd
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

788 i‡(
Àn
 =
•dy
.À¿&& 
	`ngx_°∫cmp
(
d©a
, spdy.data, spdy.len) == 0) {

789 
	`ngx_hâp_•dy_öô
(
c
->
ªad
);

795 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

797 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

798  
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

800 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

802 
	`ngx_hâp_waô_ªque°_h™dÀr
(
c
->
ªad
);

807 i‡(
c
->
ªad
->
timedout
) {

808 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

811 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

812 
	}
}

814 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


817 
	$ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
)

819 
ngx_°r_t
 
ho°
;

820 c⁄° *
£rvî«me
;

821 
ngx_c⁄√˘i⁄_t
 *
c
;

822 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

823 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

824 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

825 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

827 
£rvî«me
 = 
	`SSL_gë_£rvî«me
(
s¶_c⁄n
, 
TLSEXT_NAMETYPE_ho°_«me
);

829 i‡(
£rvî«me
 =
NULL
) {

830  
SSL_TLSEXT_ERR_NOACK
;

833 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

835 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

836 "SSL sîvîÇame: \"%s\"", 
£rvî«me
);

838 
ho°
.
Àn
 = 
	`ngx_°æí
(
£rvî«me
);

840 i‡(
ho°
.
Àn
 == 0) {

841  
SSL_TLSEXT_ERR_NOACK
;

844 
ho°
.
d©a
 = (
u_ch¨
 *Ë
£rvî«me
;

846 i‡(
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
c
->
poﬁ
, 1Ë!
NGX_OK
) {

847  
SSL_TLSEXT_ERR_NOACK
;

850 
hc
 = 
c
->
d©a
;

852 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
c
, 
hc
->
addr_c⁄f
->
vútuÆ_«mes
, &
ho°
,

853 
NULL
, &
cscf
)

854 !
NGX_OK
)

856  
SSL_TLSEXT_ERR_NOACK
;

859 
hc
->
s¶_£rvî«me
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_°r_t
));

860 i‡(
hc
->
s¶_£rvî«me
 =
NULL
) {

861  
SSL_TLSEXT_ERR_NOACK
;

864 *
hc
->
s¶_£rvî«me
 = 
ho°
;

866 
hc
->
c⁄f_˘x
 = 
cscf
->
˘x
;

868 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

870 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
c
, 
˛cf
->
îr‹_log
);

872 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_s¶_moduÀ
);

874 i‡(
sscf
->
s¶
.
˘x
) {

875 
	`SSL_£t_SSL_CTX
(
s¶_c⁄n
, 
sscf
->
s¶
.
˘x
);

882 
	`SSL_£t_vîify
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_mode
(
sscf
->
s¶
.
˘x
),

883 
	`SSL_CTX_gë_vîify_ˇŒback
(
sscf
->
s¶
.
˘x
));

885 
	`SSL_£t_vîify_dïth
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_dïth
(
sscf
->
s¶
.
˘x
));

887 #ifde‡
SSL_CTRL_CLEAR_OPTIONS


889 
	`SSL_˛ór_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_gë_›ti⁄s
(ssl_conn) &

890 ~
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

893 
	`SSL_£t_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

896  
SSL_TLSEXT_ERR_OK
;

897 
	}
}

905 
	$ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
)

907 
ssize_t
 
n
;

908 
ngx_öt_t
 
rc
, 
rv
;

909 
ngx_°r_t
 
ho°
;

910 
ngx_c⁄√˘i⁄_t
 *
c
;

911 
ngx_hâp_ªque°_t
 *
r
;

913 
c
 = 
ªv
->
d©a
;

914 
r
 = 
c
->
d©a
;

916 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

919 i‡(
ªv
->
timedout
) {

920 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

921 
c
->
timedout
 = 1;

922 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

926 
rc
 = 
NGX_AGAIN
;

930 i‡(
rc
 =
NGX_AGAIN
) {

931 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

933 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

938 
rc
 = 
	`ngx_hâp_∑r£_ªque°_löe
(
r
,Ñ->
hódî_ö
);

940 i‡(
rc
 =
NGX_OK
) {

944 
r
->
ªque°_löe
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->
ªque°_°¨t
;

945 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

946 
r
->
ªque°_Àngth
 =Ñ->
hódî_ö
->
pos
 -Ñ->
ªque°_°¨t
;

948 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

949 "hâ∞ªque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

951 
r
->
mëhod_«me
.
Àn
 =Ñ->
mëhod_íd
 -Ñ->
ªque°_°¨t
 + 1;

952 
r
->
mëhod_«me
.
d©a
 =Ñ->
ªque°_löe
.data;

954 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

955 
r
->
hâp_¥Ÿocﬁ
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->hâp_¥Ÿocﬁ.
d©a
;

958 i‡(
	`ngx_hâp_¥o˚ss_ªque°_uri
(
r
Ë!
NGX_OK
) {

962 i‡(
r
->
ho°_°¨t
 &&Ñ->
ho°_íd
) {

964 
ho°
.
Àn
 = 
r
->
ho°_íd
 -Ñ->
ho°_°¨t
;

965 
ho°
.
d©a
 = 
r
->
ho°_°¨t
;

967 
rc
 = 
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
r
->
poﬁ
, 0);

969 i‡(
rc
 =
NGX_DECLINED
) {

970 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

972 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

976 i‡(
rc
 =
NGX_ERROR
) {

977 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

981 i‡(
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &
ho°
Ë=
NGX_ERROR
) {

985 
r
->
hódîs_ö
.
£rvî
 = 
ho°
;

988 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

990 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
 == 0

991 && 
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &r->
hódîs_ö
.
£rvî
)

992 =
NGX_ERROR
)

997 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

1002 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 20,

1003 (
ngx_èbÀ_ñt_t
))

1004 !
NGX_OK
)

1006 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1010 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

1012 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_hódîs
;

1013 
	`ngx_hâp_¥o˚ss_ªque°_hódîs
(
ªv
);

1018 i‡(
rc
 !
NGX_AGAIN
) {

1022 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1023 
ngx_hâp_˛õ¡_îr‹s
[
rc
 - 
NGX_HTTP_CLIENT_ERROR
]);

1024 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1030 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

1032 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 1);

1034 i‡(
rv
 =
NGX_ERROR
) {

1035 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1039 i‡(
rv
 =
NGX_DECLINED
) {

1040 
r
->
ªque°_löe
.
Àn
 =Ñ->
hódî_ö
->
íd
 -Ñ->
ªque°_°¨t
;

1041 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

1043 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1045 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_URI_TOO_LARGE
);

1050 
	}
}

1053 
ngx_öt_t


1054 
	$ngx_hâp_¥o˚ss_ªque°_uri
(
ngx_hâp_ªque°_t
 *
r
)

1056 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1058 i‡(
r
->
¨gs_°¨t
) {

1059 
r
->
uri
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_°¨t
;

1061 
r
->
uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

1064 i‡(
r
->
com∂ex_uri
 ||Ñ->
quŸed_uri
) {

1066 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
 + 1);

1067 i‡(
r
->
uri
.
d©a
 =
NULL
) {

1068 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1069  
NGX_ERROR
;

1072 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1074 i‡(
	`ngx_hâp_∑r£_com∂ex_uri
(
r
, 
cscf
->
mîge_¶ashes
Ë!
NGX_OK
) {

1075 
r
->
uri
.
Àn
 = 0;

1077 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1079 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1080  
NGX_ERROR
;

1084 
r
->
uri
.
d©a
 =Ñ->
uri_°¨t
;

1087 
r
->
u≈¨£d_uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

1088 
r
->
u≈¨£d_uri
.
d©a
 =Ñ->
uri_°¨t
;

1090 
r
->
vÆid_u≈¨£d_uri
 =Ñ->
•a˚_ö_uri
 ? 0 : 1;

1092 i‡(
r
->
uri_ext
) {

1093 i‡(
r
->
¨gs_°¨t
) {

1094 
r
->
exãn
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_ext
;

1096 
r
->
exãn
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_ext
;

1099 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1102 i‡(
r
->
¨gs_°¨t
 &&Ñ->
uri_íd
 >Ñ->args_start) {

1103 
r
->
¨gs
.
Àn
 =Ñ->
uri_íd
 -Ñ->
¨gs_°¨t
;

1104 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1107 #i‡(
NGX_WIN32
)

1109 
u_ch¨
 *
p
, *
œ°
;

1111 
p
 = 
r
->
uri
.
d©a
;

1112 
œ°
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
;

1114 
p
 < 
œ°
) {

1116 i‡(*
p
++ == ':') {

1123 i‡(
p
 < 
œ°
 && *p == '$') {

1124 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1126 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1127  
NGX_ERROR
;

1132 
p
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1;

1134 
p
 > 
r
->
uri
.
d©a
) {

1136 i‡(*
p
 == ' ') {

1137 
p
--;

1141 i‡(*
p
 == '.') {

1142 
p
--;

1149 i‡(
p
 !
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1) {

1150 
r
->
uri
.
Àn
 = 
p
 + 1 -Ñ->uri.
d©a
;

1151 
	`ngx_hâp_£t_exãn
(
r
);

1157 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1158 "hâ∞uri: \"%V\"", &
r
->
uri
);

1160 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1161 "hâ∞¨gs: \"%V\"", &
r
->
¨gs
);

1163 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1164 "hâ∞exãn: \"%V\"", &
r
->
exãn
);

1166  
NGX_OK
;

1167 
	}
}

1171 
	$ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
)

1173 
u_ch¨
 *
p
;

1174 
size_t
 
Àn
;

1175 
ssize_t
 
n
;

1176 
ngx_öt_t
 
rc
, 
rv
;

1177 
ngx_èbÀ_ñt_t
 *
h
;

1178 
ngx_c⁄√˘i⁄_t
 *
c
;

1179 
ngx_hâp_hódî_t
 *
hh
;

1180 
ngx_hâp_ªque°_t
 *
r
;

1181 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1182 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1184 
c
 = 
ªv
->
d©a
;

1185 
r
 = 
c
->
d©a
;

1187 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

1190 i‡(
ªv
->
timedout
) {

1191 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

1192 
c
->
timedout
 = 1;

1193 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

1197 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1199 
rc
 = 
NGX_AGAIN
;

1203 i‡(
rc
 =
NGX_AGAIN
) {

1205 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

1207 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 0);

1209 i‡(
rv
 =
NGX_ERROR
) {

1210 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1214 i‡(
rv
 =
NGX_DECLINED
) {

1215 
p
 = 
r
->
hódî_«me_°¨t
;

1217 
r
->
lögîög_˛o£
 = 1;

1219 i‡(
p
 =
NULL
) {

1220 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1222 
	`ngx_hâp_föÆize_ªque°
(
r
,

1223 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1227 
Àn
 = 
r
->
hódî_ö
->
íd
 - 
p
;

1229 i‡(
Àn
 > 
NGX_MAX_ERROR_STR
 - 300) {

1230 
Àn
 = 
NGX_MAX_ERROR_STR
 - 300;

1233 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1235 
Àn
, 
r
->
hódî_«me_°¨t
);

1237 
	`ngx_hâp_föÆize_ªque°
(
r
,

1238 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1243 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

1245 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

1251 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1253 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
,Ñ->
hódî_ö
,

1254 
cscf
->
undîsc‹es_ö_hódîs
);

1256 i‡(
rc
 =
NGX_OK
) {

1258 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1260 i‡(
r
->
övÆid_hódî
 && 
cscf
->
ign‹e_övÆid_hódîs
) {

1264 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1266 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1267 
r
->
hódî_«me_°¨t
);

1273 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

1274 i‡(
h
 =
NULL
) {

1275 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1279 
h
->
hash
 = 
r
->
hódî_hash
;

1281 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1282 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1283 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1285 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1286 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1287 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1289 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1290 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1291 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1295 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1296 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1299 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1302 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
->
hash
,

1303 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1305 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1309 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1311 &
h
->
key
, &h->
vÆue
);

1316 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1320 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1323 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1325 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

1327 
rc
 = 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
);

1329 i‡(
rc
 !
NGX_OK
) {

1333 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

1338 i‡(
rc
 =
NGX_AGAIN
) {

1347 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1349 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1350 
r
->
hódî_«me_°¨t
);

1351 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1354 
	}
}

1357 
ssize_t


1358 
	$ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1360 
ssize_t
 
n
;

1361 
ngx_evít_t
 *
ªv
;

1362 
ngx_c⁄√˘i⁄_t
 *
c
;

1363 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1365 
c
 = 
r
->
c⁄√˘i⁄
;

1366 
ªv
 = 
c
->
ªad
;

1368 
n
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

1370 i‡(
n
 > 0) {

1371  
n
;

1374 i‡(
ªv
->
ªady
) {

1375 
n
 = 
c
->
	`ªcv
(c, 
r
->
hódî_ö
->
œ°
,

1376 
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
);

1378 
n
 = 
NGX_AGAIN
;

1381 i‡(
n
 =
NGX_AGAIN
) {

1382 i‡(!
ªv
->
timî_£t
) {

1383 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1384 
	`ngx_add_timî
(
ªv
, 
cscf
->
˛õ¡_hódî_timeout
);

1387 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1388 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1389  
NGX_ERROR
;

1392  
NGX_AGAIN
;

1395 i‡(
n
 == 0) {

1396 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1400 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

1401 
c
->
îr‹
 = 1;

1402 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

1404 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1405  
NGX_ERROR
;

1408 
r
->
hódî_ö
->
œ°
 +
n
;

1410  
n
;

1411 
	}
}

1414 
ngx_öt_t


1415 
	$ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

1416 
ngx_uöt_t
 
ªque°_löe
)

1418 
u_ch¨
 *
ﬁd
, *
√w
;

1419 
ngx_buf_t
 *
b
;

1420 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

1421 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1423 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1426 i‡(
ªque°_löe
 && 
r
->
°©e
 == 0) {

1430 
r
->
hódî_ö
->
pos
 =Ñ->hódî_ö->
°¨t
;

1431 
r
->
hódî_ö
->
œ°
 =Ñ->hódî_ö->
°¨t
;

1433  
NGX_OK
;

1436 
ﬁd
 = 
ªque°_löe
 ? 
r
->
ªque°_°¨t
 :Ñ->
hódî_«me_°¨t
;

1438 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1440 i‡(
r
->
°©e
 != 0

1441 && (
size_t
Ë(
r
->
hódî_ö
->
pos
 - 
ﬁd
)

1442 >
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
)

1444  
NGX_DECLINED
;

1447 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

1449 i‡(
hc
->
n‰ì
) {

1450 
b
 = 
hc
->
‰ì
[--hc->
n‰ì
];

1452 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1454 
b
->
pos
, b->
íd
 - b->
œ°
);

1456 } i‡(
hc
->
nbusy
 < 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
) {

1458 i‡(
hc
->
busy
 =
NULL
) {

1459 
hc
->
busy
 = 
	`ngx_∑Œoc
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1460 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

1461 i‡(
hc
->
busy
 =
NULL
) {

1462  
NGX_ERROR
;

1466 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1467 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
);

1468 i‡(
b
 =
NULL
) {

1469  
NGX_ERROR
;

1472 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1474 
b
->
pos
, b->
íd
 - b->
œ°
);

1477  
NGX_DECLINED
;

1480 
hc
->
busy
[hc->
nbusy
++] = 
b
;

1482 i‡(
r
->
°©e
 == 0) {

1489 
r
->
hódî_ö
 = 
b
;

1491  
NGX_OK
;

1494 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1495 "hâ∞œrgêhódî c›y: %d", 
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1497 
√w
 = 
b
->
°¨t
;

1499 
	`ngx_mem˝y
(
√w
, 
ﬁd
, 
r
->
hódî_ö
->
pos
 - old);

1501 
b
->
pos
 = 
√w
 + (
r
->
hódî_ö
->po†- 
ﬁd
);

1502 
b
->
œ°
 = 
√w
 + (
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1504 i‡(
ªque°_löe
) {

1505 
r
->
ªque°_°¨t
 = 
√w
;

1507 i‡(
r
->
ªque°_íd
) {

1508 
r
->
ªque°_íd
 = 
√w
 + (r->ªque°_íd - 
ﬁd
);

1511 
r
->
mëhod_íd
 = 
√w
 + (r->mëhod_íd - 
ﬁd
);

1513 
r
->
uri_°¨t
 = 
√w
 + (r->uri_°¨à- 
ﬁd
);

1514 
r
->
uri_íd
 = 
√w
 + (r->uri_íd - 
ﬁd
);

1516 i‡(
r
->
schema_°¨t
) {

1517 
r
->
schema_°¨t
 = 
√w
 + (r->schema_°¨à- 
ﬁd
);

1518 
r
->
schema_íd
 = 
√w
 + (r->schema_íd - 
ﬁd
);

1521 i‡(
r
->
ho°_°¨t
) {

1522 
r
->
ho°_°¨t
 = 
√w
 + (r->ho°_°¨à- 
ﬁd
);

1523 i‡(
r
->
ho°_íd
) {

1524 
r
->
ho°_íd
 = 
√w
 + (r->ho°_íd - 
ﬁd
);

1528 i‡(
r
->
p‹t_°¨t
) {

1529 
r
->
p‹t_°¨t
 = 
√w
 + (r->p‹t_°¨à- 
ﬁd
);

1530 
r
->
p‹t_íd
 = 
√w
 + (r->p‹t_íd - 
ﬁd
);

1533 i‡(
r
->
uri_ext
) {

1534 
r
->
uri_ext
 = 
√w
 + (r->uri_exà- 
ﬁd
);

1537 i‡(
r
->
¨gs_°¨t
) {

1538 
r
->
¨gs_°¨t
 = 
√w
 + (r->¨gs_°¨à- 
ﬁd
);

1541 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

1542 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
√w
 + (r->hâp_¥Ÿocﬁ.d©®- 
ﬁd
);

1546 
r
->
hódî_«me_°¨t
 = 
√w
;

1547 
r
->
hódî_«me_íd
 = 
√w
 + (r->hódî_«me_íd - 
ﬁd
);

1548 
r
->
hódî_°¨t
 = 
√w
 + (r->hódî_°¨à- 
ﬁd
);

1549 
r
->
hódî_íd
 = 
√w
 + (r->hódî_íd - 
ﬁd
);

1552 
r
->
hódî_ö
 = 
b
;

1554  
NGX_OK
;

1555 
	}
}

1558 
ngx_öt_t


1559 
	$ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1560 
ngx_uöt_t
 
off£t
)

1562 
ngx_èbÀ_ñt_t
 **
ph
;

1564 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1566 i‡(*
ph
 =
NULL
) {

1567 *
ph
 = 
h
;

1570  
NGX_OK
;

1571 
	}
}

1574 
ngx_öt_t


1575 
	$ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1576 
ngx_uöt_t
 
off£t
)

1578 
ngx_èbÀ_ñt_t
 **
ph
;

1580 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1582 i‡(*
ph
 =
NULL
) {

1583 *
ph
 = 
h
;

1584  
NGX_OK
;

1587 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1590 &
h
->
key
, &h->
vÆue
, &(*
ph
)->key, &(*ph)->value);

1592 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1594  
NGX_ERROR
;

1595 
	}
}

1598 
ngx_öt_t


1599 
	$ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1600 
ngx_uöt_t
 
off£t
)

1602 
ngx_öt_t
 
rc
;

1603 
ngx_°r_t
 
ho°
;

1605 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
) {

1606 
r
->
hódîs_ö
.
ho°
 = 
h
;

1609 
ho°
 = 
h
->
vÆue
;

1611 
rc
 = 
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
r
->
poﬁ
, 0);

1613 i‡(
rc
 =
NGX_DECLINED
) {

1614 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1616 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1617  
NGX_ERROR
;

1620 i‡(
rc
 =
NGX_ERROR
) {

1621 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1622  
NGX_ERROR
;

1625 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1626  
NGX_OK
;

1629 i‡(
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &
ho°
Ë=
NGX_ERROR
) {

1630  
NGX_ERROR
;

1633 
r
->
hódîs_ö
.
£rvî
 = 
ho°
;

1635  
NGX_OK
;

1636 
	}
}

1639 
ngx_öt_t


1640 
	$ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1641 
ngx_uöt_t
 
off£t
)

1643 i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "close", 5 - 1)) {

1644 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

1646 } i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "keep-alive", 10 - 1)) {

1647 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_KEEP_ALIVE
;

1650  
NGX_OK
;

1651 
	}
}

1654 
ngx_öt_t


1655 
	$ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1656 
ngx_uöt_t
 
off£t
)

1658 
u_ch¨
 *
u£r_agít
, *
msõ
;

1660 i‡(
r
->
hódîs_ö
.
u£r_agít
) {

1661  
NGX_OK
;

1664 
r
->
hódîs_ö
.
u£r_agít
 = 
h
;

1668 
u£r_agít
 = 
h
->
vÆue
.
d©a
;

1670 
msõ
 = 
	`ngx_°r°∫
(
u£r_agít
, "MSIE ", 5 - 1);

1672 i‡(
msõ
 && msõ + 7 < 
u£r_agít
 + 
h
->
vÆue
.
Àn
) {

1674 
r
->
hódîs_ö
.
msõ
 = 1;

1676 i‡(
msõ
[6] == '.') {

1678 
msõ
[5]) {

1681 
r
->
hódîs_ö
.
msõ6
 = 1;

1684 i‡(
	`ngx_°r°∫
(
msõ
 + 8, "SV1", 3 - 1Ë=
NULL
) {

1685 
r
->
hódîs_ö
.
msõ6
 = 1;

1693 i‡(
c
->
s¶
) {

1694 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1699 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Opera", 5 - 1)) {

1700 
r
->
hódîs_ö
.
›îa
 = 1;

1701 
r
->
hódîs_ö
.
msõ
 = 0;

1702 
r
->
hódîs_ö
.
msõ6
 = 0;

1705 i‡(!
r
->
hódîs_ö
.
msõ
 && !r->hódîs_ö.
›îa
) {

1707 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Gecko/", 6 - 1)) {

1708 
r
->
hódîs_ö
.
gecko
 = 1;

1710 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Chrome/", 7 - 1)) {

1711 
r
->
hódîs_ö
.
chrome
 = 1;

1713 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Safari/", 7 - 1)

1714 && 
	`ngx_°r°∫
(
u£r_agít
, "Mac OS X", 8 - 1))

1716 
r
->
hódîs_ö
.
ßÁri
 = 1;

1718 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Konqueror", 9 - 1)) {

1719 
r
->
hódîs_ö
.
k⁄quî‹
 = 1;

1723  
NGX_OK
;

1724 
	}
}

1727 
ngx_öt_t


1728 
	$ngx_hâp_¥o˚ss_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1729 
ngx_uöt_t
 
off£t
)

1731 
ngx_¨øy_t
 *
hódîs
;

1732 
ngx_èbÀ_ñt_t
 **
ph
;

1734 
hódîs
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1736 i‡(
hódîs
->
ñts
 =
NULL
) {

1737 i‡(
	`ngx_¨øy_öô
(
hódîs
, 
r
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
 *))

1738 !
NGX_OK
)

1740 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1741  
NGX_ERROR
;

1745 
ph
 = 
	`ngx_¨øy_push
(
hódîs
);

1746 i‡(
ph
 =
NULL
) {

1747 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1748  
NGX_ERROR
;

1751 *
ph
 = 
h
;

1752  
NGX_OK
;

1753 
	}
}

1756 
ngx_öt_t


1757 
	$ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1759 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
 == 0

1760 && 
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &r->
hódîs_ö
.
£rvî
)

1761 =
NGX_ERROR
)

1763  
NGX_ERROR
;

1766 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
 &&Ñ->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
) {

1767 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1769 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1770  
NGX_ERROR
;

1773 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1774 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =

1775 
	`ngx_©oof
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
d©a
,

1776 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
Àn
);

1778 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
NGX_ERROR
) {

1779 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1781 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1782  
NGX_ERROR
;

1786 i‡(
r
->
mëhod
 & 
NGX_HTTP_TRACE
) {

1787 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1789 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_ALLOWED
);

1790  
NGX_ERROR
;

1793 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
) {

1794 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
Àn
 == 7

1795 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1796 (
u_ch¨
 *) "chunked", 7) == 0)

1798 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
 = 
NULL
;

1799 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1800 
r
->
hódîs_ö
.
chunked
 = 1;

1802 } i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
Àn
 != 8

1803 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1804 (
u_ch¨
 *) "identity", 8) != 0)

1806 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1808 &
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
);

1809 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_IMPLEMENTED
);

1810  
NGX_ERROR
;

1814 i‡(
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 =
NGX_HTTP_CONNECTION_KEEP_ALIVE
) {

1815 i‡(
r
->
hódîs_ö
.
kìp_Æive
) {

1816 
r
->
hódîs_ö
.
kìp_Æive_n
 =

1817 
	`ngx_©Ÿm
(
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
d©a
,

1818 
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
Àn
);

1822  
NGX_OK
;

1823 
	}
}

1827 
	$ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1829 
ngx_c⁄√˘i⁄_t
 *
c
;

1831 
c
 = 
r
->
c⁄√˘i⁄
;

1833 #i‡(
NGX_HTTP_SSL
)

1835 i‡(
r
->
hâp_c⁄√˘i⁄
->
s¶
) {

1836 
rc
;

1837 
X509
 *
˚π
;

1838 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

1840 i‡(
c
->
s¶
 =
NULL
) {

1841 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1843 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_TO_HTTPS
);

1847 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

1849 i‡(
sscf
->
vîify
) {

1850 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

1852 i‡(
rc
 !
X509_V_OK


1853 && (
sscf
->
vîify
 !3 || !
	`ngx_s¶_vîify_îr‹_›ti⁄Æ
(
rc
)))

1855 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1857 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

1859 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1860 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1862 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_CERT_ERROR
);

1866 i‡(
sscf
->
vîify
 == 1) {

1867 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

1869 i‡(
˚π
 =
NULL
) {

1870 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1873 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1874 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1876 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_NO_CERT
);

1880 
	`X509_‰ì
(
˚π
);

1887 i‡(
c
->
ªad
->
timî_£t
) {

1888 
	`ngx_dñ_timî
(
c
->
ªad
);

1891 #i‡(
NGX_STAT_STUB
)

1892 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

1893 
r
->
°©_ªadög
 = 0;

1894 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, 1);

1895 
r
->
°©_wrôög
 = 1;

1898 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1899 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1900 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

1902 
	`ngx_hâp_h™dÀr
(
r
);

1904 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1905 
	}
}

1908 
ngx_öt_t


1909 
	$ngx_hâp_vÆid©e_ho°
(
ngx_°r_t
 *
ho°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Æloc
)

1911 
u_ch¨
 *
h
, 
ch
;

1912 
size_t
 
i
, 
dŸ_pos
, 
ho°_Àn
;

1915 
sw_usuÆ
 = 0,

1916 
sw_lôîÆ
,

1917 
sw_ª°


1918 } 
°©e
;

1920 
dŸ_pos
 = 
ho°
->
Àn
;

1921 
ho°_Àn
 = 
ho°
->
Àn
;

1923 
h
 = 
ho°
->
d©a
;

1925 
°©e
 = 
sw_usuÆ
;

1927 
i
 = 0; i < 
ho°
->
Àn
; i++) {

1928 
ch
 = 
h
[
i
];

1930 
ch
) {

1933 i‡(
dŸ_pos
 =
i
 - 1) {

1934  
NGX_DECLINED
;

1936 
dŸ_pos
 = 
i
;

1940 i‡(
°©e
 =
sw_usuÆ
) {

1941 
ho°_Àn
 = 
i
;

1942 
°©e
 = 
sw_ª°
;

1947 i‡(
i
 == 0) {

1948 
°©e
 = 
sw_lôîÆ
;

1953 i‡(
°©e
 =
sw_lôîÆ
) {

1954 
ho°_Àn
 = 
i
 + 1;

1955 
°©e
 = 
sw_ª°
;

1960  
NGX_DECLINED
;

1964 i‡(
	`ngx_∑th_£∑øt‹
(
ch
)) {

1965  
NGX_DECLINED
;

1968 i‡(
ch
 >= 'A' && ch <= 'Z') {

1969 
Æloc
 = 1;

1976 i‡(
dŸ_pos
 =
ho°_Àn
 - 1) {

1977 
ho°_Àn
--;

1980 i‡(
ho°_Àn
 == 0) {

1981  
NGX_DECLINED
;

1984 i‡(
Æloc
) {

1985 
ho°
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ho°_Àn
);

1986 i‡(
ho°
->
d©a
 =
NULL
) {

1987  
NGX_ERROR
;

1990 
	`ngx_°æow
(
ho°
->
d©a
, 
h
, 
ho°_Àn
);

1993 
ho°
->
Àn
 = 
ho°_Àn
;

1995  
NGX_OK
;

1996 
	}
}

1999 
ngx_öt_t


2000 
	$ngx_hâp_£t_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ho°
)

2002 
ngx_öt_t
 
rc
;

2003 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2004 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2005 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2007 #i‡(
NGX_SUPPRESS_WARN
)

2008 
cscf
 = 
NULL
;

2011 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

2013 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

2015 i‡(
hc
->
s¶_£rvî«me
) {

2016 i‡(
hc
->
s¶_£rvî«me
->
Àn
 =
ho°
->len

2017 && 
	`ngx_°∫cmp
(
hc
->
s¶_£rvî«me
->
d©a
,

2018 
ho°
->
d©a
, ho°->
Àn
) == 0)

2020 #i‡(
NGX_PCRE
)

2021 i‡(
hc
->
s¶_£rvî«me_ªgex


2022 && 
	`ngx_hâp_ªgex_exec
(
r
, 
hc
->
s¶_£rvî«me_ªgex
,

2023 
hc
->
s¶_£rvî«me
Ë!
NGX_OK
)

2025 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2026  
NGX_ERROR
;

2029  
NGX_OK
;

2035 
rc
 = 
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
->
c⁄√˘i⁄
,

2036 
hc
->
addr_c⁄f
->
vútuÆ_«mes
,

2037 
ho°
, 
r
, &
cscf
);

2039 i‡(
rc
 =
NGX_ERROR
) {

2040 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2041  
NGX_ERROR
;

2044 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

2046 i‡(
hc
->
s¶_£rvî«me
) {

2047 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

2049 i‡(
rc
 =
NGX_DECLINED
) {

2050 
cscf
 = 
hc
->
addr_c⁄f
->
deÁu…_£rvî
;

2051 
rc
 = 
NGX_OK
;

2054 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
cscf
->
˘x
, 
ngx_hâp_s¶_moduÀ
);

2056 i‡(
sscf
->
vîify
) {

2057 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2060 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

2061  
NGX_ERROR
;

2067 i‡(
rc
 =
NGX_DECLINED
) {

2068  
NGX_OK
;

2071 
r
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2072 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2074 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2076 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

2078  
NGX_OK
;

2079 
	}
}

2082 
ngx_öt_t


2083 
	$ngx_hâp_föd_vútuÆ_£rvî
(
ngx_c⁄√˘i⁄_t
 *
c
,

2084 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
, 
ngx_°r_t
 *
ho°
,

2085 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
)

2087 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2089 i‡(
vútuÆ_«mes
 =
NULL
) {

2090  
NGX_DECLINED
;

2093 
cscf
 = 
	`ngx_hash_föd_comböed
(&
vútuÆ_«mes
->
«mes
,

2094 
	`ngx_hash_key
(
ho°
->
d©a
, ho°->
Àn
),

2095 
ho°
->
d©a
, ho°->
Àn
);

2097 i‡(
cscf
) {

2098 *
cscÂ
 = 
cscf
;

2099  
NGX_OK
;

2102 #i‡(
NGX_PCRE
)

2104 i‡(
ho°
->
Àn
 && 
vútuÆ_«mes
->
ƒegex
) {

2105 
ngx_öt_t
 
n
;

2106 
ngx_uöt_t
 
i
;

2107 
ngx_hâp_£rvî_«me_t
 *
¢
;

2109 
¢
 = 
vútuÆ_«mes
->
ªgex
;

2111 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

2113 i‡(
r
 =
NULL
) {

2114 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2116 
i
 = 0; i < 
vútuÆ_«mes
->
ƒegex
; i++) {

2118 
n
 = 
	`ngx_ªgex_exec
(
¢
[
i
].
ªgex
->ªgex, 
ho°
, 
NULL
, 0);

2120 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

2124 i‡(
n
 >= 0) {

2125 
hc
 = 
c
->
d©a
;

2126 
hc
->
s¶_£rvî«me_ªgex
 = 
¢
[
i
].
ªgex
;

2128 *
cscÂ
 = 
¢
[
i
].
£rvî
;

2129  
NGX_OK
;

2132 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2133 
ngx_ªgex_exec_n
 " failed: %i "

2135 
n
, 
ho°
, &
¢
[
i
].
ªgex
->
«me
);

2137  
NGX_ERROR
;

2140  
NGX_DECLINED
;

2145 
i
 = 0; i < 
vútuÆ_«mes
->
ƒegex
; i++) {

2147 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
¢
[
i
].
ªgex
, 
ho°
);

2149 i‡(
n
 =
NGX_DECLINED
) {

2153 i‡(
n
 =
NGX_OK
) {

2154 *
cscÂ
 = 
¢
[
i
].
£rvî
;

2155  
NGX_OK
;

2158  
NGX_ERROR
;

2164  
NGX_DECLINED
;

2165 
	}
}

2169 
	$ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
)

2171 
ngx_c⁄√˘i⁄_t
 *
c
;

2172 
ngx_hâp_ªque°_t
 *
r
;

2174 
c
 = 
ev
->
d©a
;

2175 
r
 = 
c
->
d©a
;

2177 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

2179 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2180 "hâ∞ru¿ªque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2182 i‡(
ev
->
wrôe
) {

2183 
r
->
	`wrôe_evít_h™dÀr
(r);

2186 
r
->
	`ªad_evít_h™dÀr
(r);

2189 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

2190 
	}
}

2194 
	$ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
)

2196 
ngx_hâp_ªque°_t
 *
r
;

2197 
ngx_hâp_po°ed_ªque°_t
 *
¥
;

2201 i‡(
c
->
de°royed
) {

2205 
r
 = 
c
->
d©a
;

2206 
¥
 = 
r
->
maö
->
po°ed_ªque°s
;

2208 i‡(
¥
 =
NULL
) {

2212 
r
->
maö
->
po°ed_ªque°s
 = 
¥
->
√xt
;

2214 
r
 = 
¥
->
ªque°
;

2216 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

2218 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2219 "hâ∞po°edÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2221 
r
->
	`wrôe_evít_h™dÀr
(r);

2223 
	}
}

2226 
ngx_öt_t


2227 
	$ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_po°ed_ªque°_t
 *
¥
)

2229 
ngx_hâp_po°ed_ªque°_t
 **
p
;

2231 i‡(
¥
 =
NULL
) {

2232 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°ed_ªque°_t
));

2233 i‡(
¥
 =
NULL
) {

2234  
NGX_ERROR
;

2238 
¥
->
ªque°
 = 
r
;

2239 
¥
->
√xt
 = 
NULL
;

2241 
p
 = &
r
->
maö
->
po°ed_ªque°s
; *p;Ö = &(*p)->
√xt
) { }

2243 *
p
 = 
¥
;

2245  
NGX_OK
;

2246 
	}
}

2250 
	$ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2252 
ngx_c⁄√˘i⁄_t
 *
c
;

2253 
ngx_hâp_ªque°_t
 *
¥
;

2254 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2256 
c
 = 
r
->
c⁄√˘i⁄
;

2258 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2260 
rc
, &
r
->
uri
, &r->
¨gs
,Ñ =
c
->
d©a
,Ñ->
maö
->
cou¡
);

2262 i‡(
rc
 =
NGX_DONE
) {

2263 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2267 i‡(
rc
 =
NGX_OK
 && 
r
->
fûãr_föÆize
) {

2268 
c
->
îr‹
 = 1;

2271 i‡(
rc
 =
NGX_DECLINED
) {

2272 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2273 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2274 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2278 i‡(
r
 !r->
maö
 &&Ñ->
po°_subªque°
) {

2279 
rc
 = 
r
->
po°_subªque°
->
	`h™dÀr
‘,Ñ->po°_subªque°->
d©a
,Ñc);

2282 i‡(
rc
 =
NGX_ERROR


2283 || 
rc
 =
NGX_HTTP_REQUEST_TIME_OUT


2284 || 
rc
 =
NGX_HTTP_CLIENT_CLOSED_REQUEST


2285 || 
c
->
îr‹
)

2287 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2291 i‡(
r
->
maö
->
blocked
) {

2292 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2295 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2299 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE


2300 || 
rc
 =
NGX_HTTP_CREATED


2301 || 
rc
 =
NGX_HTTP_NO_CONTENT
)

2303 i‡(
rc
 =
NGX_HTTP_CLOSE
) {

2304 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2308 i‡(
r
 =r->
maö
) {

2309 i‡(
c
->
ªad
->
timî_£t
) {

2310 
	`ngx_dñ_timî
(
c
->
ªad
);

2313 i‡(
c
->
wrôe
->
timî_£t
) {

2314 
	`ngx_dñ_timî
(
c
->
wrôe
);

2318 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2319 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2321 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
‘, 
rc
));

2325 i‡(
r
 !r->
maö
) {

2327 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
) {

2329 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2330 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2336 
¥
 = 
r
->
∑ª¡
;

2338 i‡(
r
 =
c
->
d©a
) {

2340 
r
->
maö
->
cou¡
--;

2341 
r
->
maö
->
subªque°s
++;

2343 i‡(!
r
->
logged
) {

2345 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2347 i‡(
˛cf
->
log_subªque°
) {

2348 
	`ngx_hâp_log_ªque°
(
r
);

2351 
r
->
logged
 = 1;

2354 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2356 &
r
->
uri
, &r->
¨gs
);

2359 
r
->
d⁄e
 = 1;

2361 i‡(
¥
->
po°p⁄ed
 &&Ör->po°p⁄ed->
ªque°
 =
r
) {

2362 
¥
->
po°p⁄ed
 =Ör->po°p⁄ed->
√xt
;

2365 
c
->
d©a
 = 
¥
;

2369 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2371 &
r
->
uri
, &r->
¨gs
);

2373 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2375 i‡(
r
->
waôed
) {

2376 
r
->
d⁄e
 = 1;

2380 i‡(
	`ngx_hâp_po°_ªque°
(
¥
, 
NULL
Ë!
NGX_OK
) {

2381 
r
->
maö
->
cou¡
++;

2382 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2386 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2388 &
¥
->
uri
, &¥->
¨gs
);

2393 i‡(
r
->
buf„ªd
 || 
c
->buf„ªd ||Ñ->
po°p⁄ed
 ||Ñ->
blocked
) {

2395 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2396 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2402 i‡(
r
 !
c
->
d©a
) {

2403 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2405 &
r
->
uri
, &r->
¨gs
);

2409 
r
->
d⁄e
 = 1;

2410 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2412 i‡(!
r
->
po°_a˘i⁄
) {

2413 
r
->
ªque°_com∂ëe
 = 1;

2416 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2420 i‡(
c
->
ªad
->
timî_£t
) {

2421 
	`ngx_dñ_timî
(
c
->
ªad
);

2424 i‡(
c
->
wrôe
->
timî_£t
) {

2425 
c
->
wrôe
->
dñayed
 = 0;

2426 
	`ngx_dñ_timî
(
c
->
wrôe
);

2429 i‡(
c
->
ªad
->
eof
) {

2430 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2434 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2435 
	}
}

2439 
	$ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2441 
ngx_hâp_˛ónup_t
 *
˛n
;

2442 
ngx_hâp_ªque°_t
 *
mr
;

2443 
ngx_hâp_ïhemîÆ_t
 *
e
;

2445 
mr
 = 
r
->
maö
;

2447 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2448 "hâ∞ãrmö©êªque° cou¡:%d", 
mr
->
cou¡
);

2450 i‡(
rc
 > 0 && (
mr
->
hódîs_out
.
°©us
 =0 || mr->
c⁄√˘i⁄
->
£¡
 == 0)) {

2451 
mr
->
hódîs_out
.
°©us
 = 
rc
;

2454 
˛n
 = 
mr
->
˛ónup
;

2455 
mr
->
˛ónup
 = 
NULL
;

2457 
˛n
) {

2458 i‡(
˛n
->
h™dÀr
) {

2459 
˛n
->
	`h™dÀr
(˛n->
d©a
);

2462 
˛n
 = c ->
√xt
;

2465 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2467 
mr
->
cou¡
, mr->
blocked
);

2469 i‡(
mr
->
wrôe_evít_h™dÀr
) {

2471 i‡(
mr
->
blocked
) {

2475 
e
 = 
	`ngx_hâp_ïhemîÆ
(
mr
);

2476 
mr
->
po°ed_ªque°s
 = 
NULL
;

2477 
mr
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ãrmö©e_h™dÀr
;

2478 (Ë
	`ngx_hâp_po°_ªque°
(
mr
, &
e
->
ãrmöÆ_po°ed_ªque°
);

2482 
	`ngx_hâp_˛o£_ªque°
(
mr
, 
rc
);

2483 
	}
}

2487 
	$ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2489 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2490 "hâ∞ãrmö©êh™dÀ∏cou¡:%d", 
r
->
cou¡
);

2492 
r
->
cou¡
 = 1;

2494 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2495 
	}
}

2499 
	$ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

2501 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2503 #i‡(
NGX_HTTP_SPDY
)

2504 i‡(
r
->
•dy_°ªam
) {

2505 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2510 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2512 i‡(
r
->
maö
->
cou¡
 != 1) {

2514 i‡(
r
->
disˇrd_body
) {

2515 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

2516 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
ªad
, 
˛cf
->
lögîög_timeout
);

2518 i‡(
r
->
lögîög_time
 == 0) {

2519 
r
->
lögîög_time
 = 
	`ngx_time
()

2520 + (
time_t
Ë(
˛cf
->
lögîög_time
 / 1000);

2524 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2528 i‡(
r
->
ªadög_body
) {

2529 
r
->
kì∑live
 = 0;

2530 
r
->
lögîög_˛o£
 = 1;

2533 i‡(!
ngx_ãrmö©e


2534 && !
ngx_exôög


2535 && 
r
->
kì∑live


2536 && 
˛cf
->
kì∑live_timeout
 > 0)

2538 
	`ngx_hâp_£t_kì∑live
(
r
);

2542 i‡(
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ALWAYS


2543 || (
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ON


2544 && (
r
->
lögîög_˛o£


2545 || 
r
->
hódî_ö
->
pos
 <Ñ->hódî_ö->
œ°


2546 || 
r
->
c⁄√˘i⁄
->
ªad
->
ªady
)))

2548 
	`ngx_hâp_£t_lögîög_˛o£
(
r
);

2552 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2553 
	}
}

2556 
ngx_öt_t


2557 
	$ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2559 
ngx_evít_t
 *
wev
;

2560 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2562 
r
->
hâp_°©e
 = 
NGX_HTTP_WRITING_REQUEST_STATE
;

2564 
r
->
ªad_evít_h™dÀr
 =Ñ->
disˇrd_body
 ?

2565 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
:

2566 
ngx_hâp_ã°_ªadög
;

2567 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_wrôî
;

2569 #i‡(
NGX_HTTP_SPDY
)

2570 i‡(
r
->
•dy_°ªam
) {

2571  
NGX_OK
;

2575 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

2577 i‡(
wev
->
ªady
 && wev->
dñayed
) {

2578  
NGX_OK
;

2581 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2582 i‡(!
wev
->
dñayed
) {

2583 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2586 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2587 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2588  
NGX_ERROR
;

2591  
NGX_OK
;

2592 
	}
}

2596 
	$ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
)

2598 
rc
;

2599 
ngx_evít_t
 *
wev
;

2600 
ngx_c⁄√˘i⁄_t
 *
c
;

2601 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2603 
c
 = 
r
->
c⁄√˘i⁄
;

2604 
wev
 = 
c
->
wrôe
;

2606 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2607 "hâ∞wrôî h™dÀr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2609 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_c‹e_moduÀ
);

2611 i‡(
wev
->
timedout
) {

2612 i‡(!
wev
->
dñayed
) {

2613 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

2615 
c
->
timedout
 = 1;

2617 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2621 
wev
->
timedout
 = 0;

2622 
wev
->
dñayed
 = 0;

2624 i‡(!
wev
->
ªady
) {

2625 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2627 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2628 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2636 i‡(
wev
->
dñayed
 || 
r
->
aio
) {

2637 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2640 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2641 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2647 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
NULL
);

2649 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2651 
rc
, &
r
->
uri
, &r->
¨gs
);

2653 i‡(
rc
 =
NGX_ERROR
) {

2654 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2658 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
 || (∏=r->
maö
 && 
c
->buffered)) {

2660 #i‡(
NGX_HTTP_SPDY
)

2661 i‡(
r
->
•dy_°ªam
) {

2666 i‡(!
wev
->
dñayed
) {

2667 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2670 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2671 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2677 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2678 "hâ∞wrôî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2680 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2682 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2683 
	}
}

2687 
	$ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
)

2689 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2690 "hâ∞föÆizî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2692 
	`ngx_hâp_föÆize_ªque°
(
r
, 0);

2693 
	}
}

2697 
	$ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2699 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2704 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)

2705 && 
r
->
c⁄√˘i⁄
->
ªad
->
a˘ive
)

2707 i‡(
	`ngx_dñ_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2708 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2711 
	}
}

2715 
	$ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2717 
n
;

2718 
buf
[1];

2719 
ngx_îr_t
 
îr
;

2720 
ngx_evít_t
 *
ªv
;

2721 
ngx_c⁄√˘i⁄_t
 *
c
;

2723 
c
 = 
r
->
c⁄√˘i⁄
;

2724 
ªv
 = 
c
->
ªad
;

2726 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "httpÅestÑeading");

2728 #i‡(
NGX_HTTP_SPDY
)

2730 i‡(
r
->
•dy_°ªam
) {

2731 i‡(
c
->
îr‹
) {

2732 
îr
 = 0;

2733 
˛o£d
;

2741 #i‡(
NGX_HAVE_KQUEUE
)

2743 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2745 i‡(!
ªv
->
≥ndög_eof
) {

2749 
ªv
->
eof
 = 1;

2750 
c
->
îr‹
 = 1;

2751 
îr
 = 
ªv
->
kq_î∫o
;

2753 
˛o£d
;

2758 #i‡(
NGX_HAVE_EPOLLRDHUP
)

2760 i‡((
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
Ë&& 
ªv
->
≥ndög_eof
) {

2761 
sockÀn_t
 
Àn
;

2763 
ªv
->
eof
 = 1;

2764 
c
->
îr‹
 = 1;

2766 
îr
 = 0;

2767 
Àn
 = (
ngx_îr_t
);

2774 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

2777 
îr
 = 
ngx_sockë_î∫o
;

2780 
˛o£d
;

2785 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

2787 i‡(
n
 == 0) {

2788 
ªv
->
eof
 = 1;

2789 
c
->
îr‹
 = 1;

2790 
îr
 = 0;

2792 
˛o£d
;

2794 } i‡(
n
 == -1) {

2795 
îr
 = 
ngx_sockë_î∫o
;

2797 i‡(
îr
 !
NGX_EAGAIN
) {

2798 
ªv
->
eof
 = 1;

2799 
c
->
îr‹
 = 1;

2801 
˛o£d
;

2807 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ªv
->
a˘ive
) {

2809 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2810 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2816 
˛o£d
:

2818 i‡(
îr
) {

2819 
ªv
->
îr‹
 = 1;

2822 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

2825 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

2826 
	}
}

2830 
	$ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
)

2832 
t˝_nodñay
;

2833 
ngx_öt_t
 
i
;

2834 
ngx_buf_t
 *
b
, *
f
;

2835 
ngx_evít_t
 *
ªv
, *
wev
;

2836 
ngx_c⁄√˘i⁄_t
 *
c
;

2837 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2838 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2839 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2841 
c
 = 
r
->
c⁄√˘i⁄
;

2842 
ªv
 = 
c
->
ªad
;

2844 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2846 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "set http keepalive handler");

2848 i‡(
r
->
disˇrd_body
) {

2849 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2850 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

2851 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

2855 
c
->
log
->
a˘i⁄
 = "closingÑequest";

2857 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

2858 
b
 = 
r
->
hódî_ö
;

2860 i‡(
b
->
pos
 < b->
œ°
) {

2864 i‡(
b
 !
c
->
buf„r
) {

2874 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2876 i‡(
hc
->
‰ì
 =
NULL
) {

2877 
hc
->
‰ì
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
,

2878 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

2880 i‡(
hc
->
‰ì
 =
NULL
) {

2881 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2886 
i
 = 0; i < 
hc
->
nbusy
 - 1; i++) {

2887 
f
 = 
hc
->
busy
[
i
];

2888 
hc
->
‰ì
[hc->
n‰ì
++] = 
f
;

2889 
f
->
pos
 = f->
°¨t
;

2890 
f
->
œ°
 = f->
°¨t
;

2893 
hc
->
busy
[0] = 
b
;

2894 
hc
->
nbusy
 = 1;

2899 
r
->
kì∑live
 = 0;

2901 
	`ngx_hâp_‰ì_ªque°
(
r
, 0);

2903 
c
->
d©a
 = 
hc
;

2905 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2906 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2910 
wev
 = 
c
->
wrôe
;

2911 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

2913 i‡(
b
->
pos
 < b->
œ°
) {

2915 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "pipelinedÑequest");

2917 
c
->
log
->
a˘i⁄
 = "reading clientÖipelinedÑequestÜine";

2919 
r
 = 
	`ngx_hâp_¸óã_ªque°
(
c
);

2920 i‡(
r
 =
NULL
) {

2921 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2925 
r
->
pùñöe
 = 1;

2927 
c
->
d©a
 = 
r
;

2929 
c
->
£¡
 = 0;

2930 
c
->
de°royed
 = 0;

2932 i‡(
ªv
->
timî_£t
) {

2933 
	`ngx_dñ_timî
(
ªv
);

2936 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

2937 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

2948 
b
 = 
c
->
buf„r
;

2950 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

2957 
b
->
pos
 = 
NULL
;

2960 
b
->
pos
 = b->
°¨t
;

2961 
b
->
œ°
 = b->
°¨t
;

2964 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc free: %p %d",

2965 
hc
->
‰ì
, hc->
n‰ì
);

2967 i‡(
hc
->
‰ì
) {

2968 
i
 = 0; i < 
hc
->
n‰ì
; i++) {

2969 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
‰ì
[
i
]->
°¨t
);

2970 
hc
->
‰ì
[
i
] = 
NULL
;

2973 
hc
->
n‰ì
 = 0;

2976 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc busy: %p %d",

2977 
hc
->
busy
, hc->
nbusy
);

2979 i‡(
hc
->
busy
) {

2980 
i
 = 0; i < 
hc
->
nbusy
; i++) {

2981 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
busy
[
i
]->
°¨t
);

2982 
hc
->
busy
[
i
] = 
NULL
;

2985 
hc
->
nbusy
 = 0;

2988 #i‡(
NGX_HTTP_SSL
)

2989 i‡(
c
->
s¶
) {

2990 
	`ngx_s¶_‰ì_buf„r
(
c
);

2994 
ªv
->
h™dÀr
 = 
ngx_hâp_kì∑live_h™dÀr
;

2996 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

2997 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

2998 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3003 
c
->
log
->
a˘i⁄
 = "keepalive";

3005 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

3006 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

3007 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, 
ngx_t˝_push_n
 " failed");

3008 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3012 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

3013 
t˝_nodñay
 = 
ngx_t˝_nodñay_™d_t˝_n›ush
 ? 1 : 0;

3016 
t˝_nodñay
 = 1;

3019 i‡(
t˝_nodñay


3020 && 
˛cf
->
t˝_nodñay


3021 && 
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
)

3023 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

3025 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

3026 (c⁄° *Ë&
t˝_nodñay
, ())

3029 #i‡(
NGX_SOLARIS
)

3031 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_EINVAL
;

3034 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

3037 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

3038 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3042 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

3047 
r
->
hâp_°©e
 = 
NGX_HTTP_KEEPALIVE_STATE
;

3050 
c
->
idÀ
 = 1;

3051 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

3053 
	`ngx_add_timî
(
ªv
, 
˛cf
->
kì∑live_timeout
);

3055 i‡(
ªv
->
ªady
) {

3056 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

3058 
	}
}

3062 
	$ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
)

3064 
size_t
 
size
;

3065 
ssize_t
 
n
;

3066 
ngx_buf_t
 *
b
;

3067 
ngx_c⁄√˘i⁄_t
 *
c
;

3069 
c
 = 
ªv
->
d©a
;

3071 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http keepalive handler");

3073 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

3074 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3078 #i‡(
NGX_HAVE_KQUEUE
)

3080 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

3081 i‡(
ªv
->
≥ndög_eof
) {

3082 
c
->
log
->
h™dÀr
 = 
NULL
;

3083 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

3085 "kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

3086 #i‡(
NGX_HTTP_SSL
)

3087 i‡(
c
->
s¶
) {

3088 
c
->
s¶
->
no_£nd_shutdown
 = 1;

3091 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3098 
b
 = 
c
->
buf„r
;

3099 
size
 = 
b
->
íd
 - b->
°¨t
;

3101 i‡(
b
->
pos
 =
NULL
) {

3109 
b
->
pos
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

3110 i‡(
b
->
pos
 =
NULL
) {

3111 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3115 
b
->
°¨t
 = b->
pos
;

3116 
b
->
œ°
 = b->
pos
;

3117 
b
->
íd
 = b->
pos
 + 
size
;

3125 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_ECONNRESET
;

3126 
	`ngx_£t_sockë_î∫o
(0);

3128 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

3129 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

3131 i‡(
n
 =
NGX_AGAIN
) {

3132 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3133 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3142 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

3148 
b
->
pos
 = 
NULL
;

3154 i‡(
n
 =
NGX_ERROR
) {

3155 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3159 
c
->
log
->
h™dÀr
 = 
NULL
;

3161 i‡(
n
 == 0) {

3162 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ngx_sockë_î∫o
,

3163 "˛õ¡ %V clo£d kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

3164 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3168 
b
->
œ°
 +
n
;

3170 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

3171 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

3173 
c
->
idÀ
 = 0;

3174 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

3176 
c
->
d©a
 = 
	`ngx_hâp_¸óã_ªque°
(c);

3177 i‡(
c
->
d©a
 =
NULL
) {

3178 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3182 
c
->
£¡
 = 0;

3183 
c
->
de°royed
 = 0;

3185 
	`ngx_dñ_timî
(
ªv
);

3187 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

3188 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

3189 
	}
}

3193 
	$ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
)

3195 
ngx_evít_t
 *
ªv
, *
wev
;

3196 
ngx_c⁄√˘i⁄_t
 *
c
;

3197 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3199 
c
 = 
r
->
c⁄√˘i⁄
;

3201 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3203 
ªv
 = 
c
->
ªad
;

3204 
ªv
->
h™dÀr
 = 
ngx_hâp_lögîög_˛o£_h™dÀr
;

3206 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

3207 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

3209 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3210 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3214 
wev
 = 
c
->
wrôe
;

3215 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

3217 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

3218 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

3219 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3224 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

3225 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

3226 
ngx_shutdown_sockë_n
 " failed");

3227 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3231 i‡(
ªv
->
ªady
) {

3232 
	`ngx_hâp_lögîög_˛o£_h™dÀr
(
ªv
);

3234 
	}
}

3238 
	$ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ªv
)

3240 
ssize_t
 
n
;

3241 
ngx_m£c_t
 
timî
;

3242 
ngx_c⁄√˘i⁄_t
 *
c
;

3243 
ngx_hâp_ªque°_t
 *
r
;

3244 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3245 
u_ch¨
 
buf„r
[
NGX_HTTP_LINGERING_BUFFER_SIZE
];

3247 
c
 = 
ªv
->
d©a
;

3248 
r
 = 
c
->
d©a
;

3250 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3253 i‡(
ªv
->
timedout
) {

3254 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3258 
timî
 = (
ngx_m£c_t
Ë
r
->
lögîög_time
 - (ngx_m£c_tË
	`ngx_time
();

3259 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

3260 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3265 
n
 = 
c
->
	`ªcv
(c, 
buf„r
, 
NGX_HTTP_LINGERING_BUFFER_SIZE
);

3267 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "lögîögÑód: %d", 
n
);

3269 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

3270 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3274 } 
ªv
->
ªady
);

3276 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3277 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3281 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3283 
timî
 *= 1000;

3285 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

3286 
timî
 = 
˛cf
->
lögîög_timeout
;

3289 
	`ngx_add_timî
(
ªv
, 
timî
);

3290 
	}
}

3294 
	$ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
)

3296 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0, "httpÉmpty handler");

3299 
	}
}

3303 
	$ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

3305 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3309 
	}
}

3312 
ngx_öt_t


3313 
	$ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
)

3315 
ngx_buf_t
 *
b
;

3316 
ngx_chaö_t
 
out
;

3318 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

3319 i‡(
b
 =
NULL
) {

3320  
NGX_ERROR
;

3323 i‡(
Êags
 & 
NGX_HTTP_LAST
) {

3325 i‡(
r
 =r->
maö
 && !r->
po°_a˘i⁄
) {

3326 
b
->
œ°_buf
 = 1;

3329 
b
->
sync
 = 1;

3330 
b
->
œ°_ö_chaö
 = 1;

3334 i‡(
Êags
 & 
NGX_HTTP_FLUSH
) {

3335 
b
->
Êush
 = 1;

3338 
out
.
buf
 = 
b
;

3339 
out
.
√xt
 = 
NULL
;

3341  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

3342 
	}
}

3345 
ngx_öt_t


3346 
	$ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

3348 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3350 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3352 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3353  
NGX_DECLINED
;

3356 i‡(
r
->
po°_a˘i⁄
 &&Ñ->
uri_ch™ges
 == 0) {

3357  
NGX_DECLINED
;

3360 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3361 "po°á˘i⁄: \"%V\"", &
˛cf
->
po°_a˘i⁄
);

3363 
r
->
maö
->
cou¡
--;

3365 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

3366 
r
->
hódî_⁄ly
 = 1;

3367 
r
->
po°_a˘i⁄
 = 1;

3369 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

3371 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
[0] == '/') {

3372 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
˛cf
->
po°_a˘i⁄
, 
NULL
);

3375 
	`ngx_hâp_«med_loˇti⁄
(
r
, &
˛cf
->
po°_a˘i⁄
);

3378  
NGX_OK
;

3379 
	}
}

3383 
	$ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3385 
ngx_c⁄√˘i⁄_t
 *
c
;

3387 
r
 =Ñ->
maö
;

3388 
c
 = 
r
->
c⁄√˘i⁄
;

3390 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3391 "hâ∞ªque° cou¡:%d blk:%d", 
r
->
cou¡
,Ñ->
blocked
);

3393 i‡(
r
->
cou¡
 == 0) {

3394 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "httpÑequest count is zero");

3397 
r
->
cou¡
--;

3399 i‡(
r
->
cou¡
 ||Ñ->
blocked
) {

3403 #i‡(
NGX_HTTP_SPDY
)

3404 i‡(
r
->
•dy_°ªam
) {

3405 
	`ngx_hâp_•dy_˛o£_°ªam
(
r
->
•dy_°ªam
, 
rc
);

3410 
	`ngx_hâp_‰ì_ªque°
(
r
, 
rc
);

3411 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3412 
	}
}

3416 
	$ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3418 
ngx_log_t
 *
log
;

3419 
ngx_poﬁ_t
 *
poﬁ
;

3420 
lögî
Üinger;

3421 
ngx_hâp_˛ónup_t
 *
˛n
;

3422 
ngx_hâp_log_˘x_t
 *
˘x
;

3423 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3425 
log
 = 
r
->
c⁄√˘i⁄
->log;

3427 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http closeÑequest");

3429 i‡(
r
->
poﬁ
 =
NULL
) {

3430 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "httpÑequestálready closed");

3434 
˛n
 = 
r
->
˛ónup
;

3435 
r
->
˛ónup
 = 
NULL
;

3437 
˛n
) {

3438 i‡(
˛n
->
h™dÀr
) {

3439 
˛n
->
	`h™dÀr
(˛n->
d©a
);

3442 
˛n
 = c ->
√xt
;

3445 #i‡(
NGX_STAT_STUB
)

3447 i‡(
r
->
°©_ªadög
) {

3448 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

3451 i‡(
r
->
°©_wrôög
) {

3452 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, -1);

3457 i‡(
rc
 > 0 && (
r
->
hódîs_out
.
°©us
 =0 ||Ñ->
c⁄√˘i⁄
->
£¡
 == 0)) {

3458 
r
->
hódîs_out
.
°©us
 = 
rc
;

3461 
log
->
a˘i⁄
 = "loggingÑequest";

3463 
	`ngx_hâp_log_ªque°
(
r
);

3465 
log
->
a˘i⁄
 = "closingÑequest";

3467 i‡(
r
->
c⁄√˘i⁄
->
timedout
) {

3468 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3470 i‡(
˛cf
->
ª£t_timedout_c⁄√˘i⁄
) {

3471 
lögî
.
l_⁄off
 = 1;

3472 
lögî
.
l_lögî
 = 0;

3474 i‡(
	`£tsock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_LINGER
,

3475 (c⁄° *Ë&
lögî
, (linger)) == -1)

3477 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_sockë_î∫o
,

3484 
˘x
 = 
log
->
d©a
;

3485 
˘x
->
ªque°
 = 
NULL
;

3487 
r
->
ªque°_löe
.
Àn
 = 0;

3489 
r
->
c⁄√˘i⁄
->
de°royed
 = 1;

3496 
poﬁ
 = 
r
->pool;

3497 
r
->
poﬁ
 = 
NULL
;

3499 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3500 
	}
}

3504 
	$ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

3506 
ngx_uöt_t
 
i
, 
n
;

3507 
ngx_hâp_h™dÀr_±
 *
log_h™dÀr
;

3508 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3510 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3512 
log_h™dÀr
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
ñts
;

3513 
n
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
√…s
;

3515 
i
 = 0; i < 
n
; i++) {

3516 
log_h™dÀr
[
i
](
r
);

3518 
	}
}

3522 
	$ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

3524 
ngx_poﬁ_t
 *
poﬁ
;

3526 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3527 "˛o£ hâ∞c⁄√˘i⁄: %d", 
c
->
fd
);

3529 #i‡(
NGX_HTTP_SSL
)

3531 i‡(
c
->
s¶
) {

3532 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

3533 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_˛o£_c⁄√˘i⁄
;

3540 #i‡(
NGX_STAT_STUB
)

3541 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

3544 
c
->
de°royed
 = 1;

3546 
poﬁ
 = 
c
->pool;

3548 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

3550 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3551 
	}
}

3554 
u_ch¨
 *

3555 
	$ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3557 
u_ch¨
 *
p
;

3558 
ngx_hâp_ªque°_t
 *
r
;

3559 
ngx_hâp_log_˘x_t
 *
˘x
;

3561 i‡(
log
->
a˘i⁄
) {

3562 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

3563 
Àn
 -
p
 - 
buf
;

3564 
buf
 = 
p
;

3567 
˘x
 = 
log
->
d©a
;

3569 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", &
˘x
->
c⁄√˘i⁄
->
addr_ãxt
);

3570 
Àn
 -
p
 - 
buf
;

3572 
r
 = 
˘x
->
ªque°
;

3574 i‡(
r
) {

3575  
r
->
	`log_h™dÀr
‘, 
˘x
->
cuºít_ªque°
, 
p
, 
Àn
);

3578 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ", server: %V",

3579 &
˘x
->
c⁄√˘i⁄
->
li°íög
->
addr_ãxt
);

3582  
p
;

3583 
	}
}

3586 
u_ch¨
 *

3587 
	$ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,Çgx_hâp_ªque°_à*
§
,

3588 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3590 *
uri_£∑øt‹
;

3591 
u_ch¨
 *
p
;

3592 
ngx_hâp_up°ªam_t
 *
u
;

3593 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3595 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3597 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", sîvî: %V", &
cscf
->
£rvî_«me
);

3598 
Àn
 -
p
 - 
buf
;

3599 
buf
 = 
p
;

3601 i‡(
r
->
ªque°_löe
.
d©a
 =
NULL
 &&Ñ->
ªque°_°¨t
) {

3602 
p
 = 
r
->
ªque°_°¨t
;Ö <Ñ->
hódî_ö
->
œ°
;Ö++) {

3603 i‡(*
p
 =
CR
 || *∞=
LF
) {

3608 
r
->
ªque°_löe
.
Àn
 = 
p
 -Ñ->
ªque°_°¨t
;

3609 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

3612 i‡(
r
->
ªque°_löe
.
Àn
) {

3613 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeque°: \"%V\"", &
r
->
ªque°_löe
);

3614 
Àn
 -
p
 - 
buf
;

3615 
buf
 = 
p
;

3618 i‡(
r
 !
§
) {

3619 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", subªque°: \"%V\"", &
§
->
uri
);

3620 
Àn
 -
p
 - 
buf
;

3621 
buf
 = 
p
;

3624 
u
 = 
§
->
up°ªam
;

3626 i‡(
u
 && u->
≥î
.
«me
) {

3628 
uri_£∑øt‹
 = "";

3630 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

3631 i‡(
u
->
≥î
.
sockaddr
 && u->≥î.sockaddr->
ß_Ámûy
 =
AF_UNIX
) {

3632 
uri_£∑øt‹
 = ":";

3636 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", upstream: \"%V%V%s%V\"",

3637 &
u
->
schema
, u->
≥î
.
«me
,

3638 
uri_£∑øt‹
, &
u
->
uri
);

3639 
Àn
 -
p
 - 
buf
;

3640 
buf
 = 
p
;

3643 i‡(
r
->
hódîs_ö
.
ho°
) {

3644 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", host: \"%V\"",

3645 &
r
->
hódîs_ö
.
ho°
->
vÆue
);

3646 
Àn
 -
p
 - 
buf
;

3647 
buf
 = 
p
;

3650 i‡(
r
->
hódîs_ö
.
ª„ªr
) {

3651 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeferrer: \"%V\"",

3652 &
r
->
hódîs_ö
.
ª„ªr
->
vÆue
);

3653 
buf
 = 
p
;

3656  
buf
;

3657 
	}
}

	@src/http/ngx_http_request.h

8 #i‚de‡
_NGX_HTTP_REQUEST_H_INCLUDED_


9 
	#_NGX_HTTP_REQUEST_H_INCLUDED_


	)

12 
	#NGX_HTTP_MAX_URI_CHANGES
 10

	)

13 
	#NGX_HTTP_MAX_SUBREQUESTS
 200

	)

16 
	#NGX_HTTP_LC_HEADER_LEN
 32

	)

19 
	#NGX_HTTP_DISCARD_BUFFER_SIZE
 4096

	)

20 
	#NGX_HTTP_LINGERING_BUFFER_SIZE
 4096

	)

23 
	#NGX_HTTP_VERSION_9
 9

	)

24 
	#NGX_HTTP_VERSION_10
 1000

	)

25 
	#NGX_HTTP_VERSION_11
 1001

	)

27 
	#NGX_HTTP_UNKNOWN
 0x0001

	)

28 
	#NGX_HTTP_GET
 0x0002

	)

29 
	#NGX_HTTP_HEAD
 0x0004

	)

30 
	#NGX_HTTP_POST
 0x0008

	)

31 
	#NGX_HTTP_PUT
 0x0010

	)

32 
	#NGX_HTTP_DELETE
 0x0020

	)

33 
	#NGX_HTTP_MKCOL
 0x0040

	)

34 
	#NGX_HTTP_COPY
 0x0080

	)

35 
	#NGX_HTTP_MOVE
 0x0100

	)

36 
	#NGX_HTTP_OPTIONS
 0x0200

	)

37 
	#NGX_HTTP_PROPFIND
 0x0400

	)

38 
	#NGX_HTTP_PROPPATCH
 0x0800

	)

39 
	#NGX_HTTP_LOCK
 0x1000

	)

40 
	#NGX_HTTP_UNLOCK
 0x2000

	)

41 
	#NGX_HTTP_PATCH
 0x4000

	)

42 
	#NGX_HTTP_TRACE
 0x8000

	)

44 
	#NGX_HTTP_CONNECTION_CLOSE
 1

	)

45 
	#NGX_HTTP_CONNECTION_KEEP_ALIVE
 2

	)

48 
	#NGX_NONE
 1

	)

51 
	#NGX_HTTP_PARSE_HEADER_DONE
 1

	)

53 
	#NGX_HTTP_CLIENT_ERROR
 10

	)

54 
	#NGX_HTTP_PARSE_INVALID_METHOD
 10

	)

55 
	#NGX_HTTP_PARSE_INVALID_REQUEST
 11

	)

56 
	#NGX_HTTP_PARSE_INVALID_09_METHOD
 12

	)

58 
	#NGX_HTTP_PARSE_INVALID_HEADER
 13

	)

62 
	#NGX_HTTP_SUBREQUEST_IN_MEMORY
 2

	)

63 
	#NGX_HTTP_SUBREQUEST_WAITED
 4

	)

64 
	#NGX_HTTP_LOG_UNSAFE
 8

	)

67 
	#NGX_HTTP_CONTINUE
 100

	)

68 
	#NGX_HTTP_SWITCHING_PROTOCOLS
 101

	)

69 
	#NGX_HTTP_PROCESSING
 102

	)

71 
	#NGX_HTTP_OK
 200

	)

72 
	#NGX_HTTP_CREATED
 201

	)

73 
	#NGX_HTTP_ACCEPTED
 202

	)

74 
	#NGX_HTTP_NO_CONTENT
 204

	)

75 
	#NGX_HTTP_PARTIAL_CONTENT
 206

	)

77 
	#NGX_HTTP_SPECIAL_RESPONSE
 300

	)

78 
	#NGX_HTTP_MOVED_PERMANENTLY
 301

	)

79 
	#NGX_HTTP_MOVED_TEMPORARILY
 302

	)

80 
	#NGX_HTTP_SEE_OTHER
 303

	)

81 
	#NGX_HTTP_NOT_MODIFIED
 304

	)

82 
	#NGX_HTTP_TEMPORARY_REDIRECT
 307

	)

84 
	#NGX_HTTP_BAD_REQUEST
 400

	)

85 
	#NGX_HTTP_UNAUTHORIZED
 401

	)

86 
	#NGX_HTTP_FORBIDDEN
 403

	)

87 
	#NGX_HTTP_NOT_FOUND
 404

	)

88 
	#NGX_HTTP_NOT_ALLOWED
 405

	)

89 
	#NGX_HTTP_REQUEST_TIME_OUT
 408

	)

90 
	#NGX_HTTP_CONFLICT
 409

	)

91 
	#NGX_HTTP_LENGTH_REQUIRED
 411

	)

92 
	#NGX_HTTP_PRECONDITION_FAILED
 412

	)

93 
	#NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
 413

	)

94 
	#NGX_HTTP_REQUEST_URI_TOO_LARGE
 414

	)

95 
	#NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
 415

	)

96 
	#NGX_HTTP_RANGE_NOT_SATISFIABLE
 416

	)

102 
	#NGX_HTTP_CLOSE
 444

	)

104 
	#NGX_HTTP_NGINX_CODES
 494

	)

106 
	#NGX_HTTP_REQUEST_HEADER_TOO_LARGE
 494

	)

108 
	#NGX_HTTPS_CERT_ERROR
 495

	)

109 
	#NGX_HTTPS_NO_CERT
 496

	)

115 
	#NGX_HTTP_TO_HTTPS
 497

	)

125 
	#NGX_HTTP_CLIENT_CLOSED_REQUEST
 499

	)

128 
	#NGX_HTTP_INTERNAL_SERVER_ERROR
 500

	)

129 
	#NGX_HTTP_NOT_IMPLEMENTED
 501

	)

130 
	#NGX_HTTP_BAD_GATEWAY
 502

	)

131 
	#NGX_HTTP_SERVICE_UNAVAILABLE
 503

	)

132 
	#NGX_HTTP_GATEWAY_TIME_OUT
 504

	)

133 
	#NGX_HTTP_INSUFFICIENT_STORAGE
 507

	)

136 
	#NGX_HTTP_LOWLEVEL_BUFFERED
 0xf0

	)

137 
	#NGX_HTTP_WRITE_BUFFERED
 0x10

	)

138 
	#NGX_HTTP_GZIP_BUFFERED
 0x20

	)

139 
	#NGX_HTTP_SSI_BUFFERED
 0x01

	)

140 
	#NGX_HTTP_SUB_BUFFERED
 0x02

	)

141 
	#NGX_HTTP_COPY_BUFFERED
 0x04

	)

145 
	mNGX_HTTP_INITING_REQUEST_STATE
 = 0,

146 
	mNGX_HTTP_READING_REQUEST_STATE
,

147 
	mNGX_HTTP_PROCESS_REQUEST_STATE
,

149 
	mNGX_HTTP_CONNECT_UPSTREAM_STATE
,

150 
	mNGX_HTTP_WRITING_UPSTREAM_STATE
,

151 
	mNGX_HTTP_READING_UPSTREAM_STATE
,

153 
	mNGX_HTTP_WRITING_REQUEST_STATE
,

154 
	mNGX_HTTP_LINGERING_CLOSE_STATE
,

155 
	mNGX_HTTP_KEEPALIVE_STATE


156 } 
	tngx_hâp_°©e_e
;

160 
ngx_°r_t
 
	m«me
;

161 
ngx_uöt_t
 
	moff£t
;

162 
ngx_hâp_hódî_h™dÀr_±
 
	mh™dÀr
;

163 } 
	tngx_hâp_hódî_t
;

167 
ngx_°r_t
 
	m«me
;

168 
ngx_uöt_t
 
	moff£t
;

169 } 
	tngx_hâp_hódî_out_t
;

173 
ngx_li°_t
 
	mhódîs
;

175 
ngx_èbÀ_ñt_t
 *
	mho°
;

176 
ngx_èbÀ_ñt_t
 *
	mc⁄√˘i⁄
;

177 
ngx_èbÀ_ñt_t
 *
	mif_modifõd_sö˚
;

178 
ngx_èbÀ_ñt_t
 *
	mif_unmodifõd_sö˚
;

179 
ngx_èbÀ_ñt_t
 *
	mif_m©ch
;

180 
ngx_èbÀ_ñt_t
 *
	mif_n⁄e_m©ch
;

181 
ngx_èbÀ_ñt_t
 *
	mu£r_agít
;

182 
ngx_èbÀ_ñt_t
 *
	mª„ªr
;

183 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

184 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ty≥
;

186 
ngx_èbÀ_ñt_t
 *
	mønge
;

187 
ngx_èbÀ_ñt_t
 *
	mif_ønge
;

189 
ngx_èbÀ_ñt_t
 *
	må™s„r_ícodög
;

190 
ngx_èbÀ_ñt_t
 *
	mex≥˘
;

191 
ngx_èbÀ_ñt_t
 *
	mupgøde
;

193 #i‡(
NGX_HTTP_GZIP
)

194 
ngx_èbÀ_ñt_t
 *
	mac˚±_ícodög
;

195 
ngx_èbÀ_ñt_t
 *
	mvü
;

198 
ngx_èbÀ_ñt_t
 *
	mauth‹iz©i⁄
;

200 
ngx_èbÀ_ñt_t
 *
	mkìp_Æive
;

202 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

203 
ngx_¨øy_t
 
	mx_f‹w¨ded_f‹
;

206 #i‡(
NGX_HTTP_REALIP
)

207 
ngx_èbÀ_ñt_t
 *
	mx_ªÆ_ù
;

210 #i‡(
NGX_HTTP_HEADERS
)

211 
ngx_èbÀ_ñt_t
 *
	mac˚±
;

212 
ngx_èbÀ_ñt_t
 *
	mac˚±_œnguage
;

215 #i‡(
NGX_HTTP_DAV
)

216 
ngx_èbÀ_ñt_t
 *
	mdïth
;

217 
ngx_èbÀ_ñt_t
 *
	mde°ö©i⁄
;

218 
ngx_èbÀ_ñt_t
 *
	movîwrôe
;

219 
ngx_èbÀ_ñt_t
 *
	md©e
;

222 
ngx_°r_t
 
	mu£r
;

223 
ngx_°r_t
 
	m∑sswd
;

225 
ngx_¨øy_t
 
	mcookõs
;

227 
ngx_°r_t
 
	m£rvî
;

228 
off_t
 
	mc⁄ã¡_Àngth_n
;

229 
time_t
 
	mkìp_Æive_n
;

231 
	mc⁄√˘i⁄_ty≥
:2;

232 
	mchunked
:1;

233 
	mmsõ
:1;

234 
	mmsõ6
:1;

235 
	m›îa
:1;

236 
	mgecko
:1;

237 
	mchrome
:1;

238 
	mßÁri
:1;

239 
	mk⁄quî‹
:1;

240 } 
	tngx_hâp_hódîs_ö_t
;

244 
ngx_li°_t
 
	mhódîs
;

246 
ngx_uöt_t
 
	m°©us
;

247 
ngx_°r_t
 
	m°©us_löe
;

249 
ngx_èbÀ_ñt_t
 *
	m£rvî
;

250 
ngx_èbÀ_ñt_t
 *
	md©e
;

251 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

252 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ícodög
;

253 
ngx_èbÀ_ñt_t
 *
	mloˇti⁄
;

254 
ngx_èbÀ_ñt_t
 *
	mª‰esh
;

255 
ngx_èbÀ_ñt_t
 *
	mœ°_modifõd
;

256 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ønge
;

257 
ngx_èbÀ_ñt_t
 *
	mac˚±_ønges
;

258 
ngx_èbÀ_ñt_t
 *
	mwww_authítiˇã
;

259 
ngx_èbÀ_ñt_t
 *
	mexpúes
;

260 
ngx_èbÀ_ñt_t
 *
	mëag
;

262 
ngx_°r_t
 *
	movîride_ch¨£t
;

264 
size_t
 
	mc⁄ã¡_ty≥_Àn
;

265 
ngx_°r_t
 
	mc⁄ã¡_ty≥
;

266 
ngx_°r_t
 
	mch¨£t
;

267 
u_ch¨
 *
	mc⁄ã¡_ty≥_lowˇ£
;

268 
ngx_uöt_t
 
	mc⁄ã¡_ty≥_hash
;

270 
ngx_¨øy_t
 
	mˇche_c⁄åﬁ
;

272 
off_t
 
	mc⁄ã¡_Àngth_n
;

273 
time_t
 
	md©e_time
;

274 
time_t
 
	mœ°_modifõd_time
;

275 } 
	tngx_hâp_hódîs_out_t
;

278 (*
	tngx_hâp_˛õ¡_body_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

281 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

282 
ngx_chaö_t
 *
bufs
;

283 
ngx_buf_t
 *
buf
;

284 
off_t
 
ª°
;

285 
ngx_chaö_t
 *
‰ì
;

286 
ngx_chaö_t
 *
busy
;

287 
ngx_hâp_chunked_t
 *
chunked
;

288 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
;

289 } 
	tngx_hâp_ªque°_body_t
;

292 
ngx_hâp_addr_c⁄f_s
 
	tngx_hâp_addr_c⁄f_t
;

295 
ngx_hâp_addr_c⁄f_t
 *
addr_c⁄f
;

296 
ngx_hâp_c⁄f_˘x_t
 *
c⁄f_˘x
;

298 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

299 
ngx_°r_t
 *
s¶_£rvî«me
;

300 #i‡(
NGX_PCRE
)

301 
ngx_hâp_ªgex_t
 *
s¶_£rvî«me_ªgex
;

305 
ngx_buf_t
 **
busy
;

306 
ngx_öt_t
 
nbusy
;

308 
ngx_buf_t
 **
‰ì
;

309 
ngx_öt_t
 
n‰ì
;

311 #i‡(
NGX_HTTP_SSL
)

312 
s¶
:1;

314 
¥oxy_¥Ÿocﬁ
:1;

315 } 
	tngx_hâp_c⁄√˘i⁄_t
;

318 (*
	tngx_hâp_˛ónup_±
)(*
	td©a
);

320 
ngx_hâp_˛ónup_s
 
	tngx_hâp_˛ónup_t
;

322 
	sngx_hâp_˛ónup_s
 {

323 
ngx_hâp_˛ónup_±
 
h™dÀr
;

324 *
d©a
;

325 
ngx_hâp_˛ónup_t
 *
√xt
;

329 
	$ngx_öt_t
 (*
	tngx_hâp_po°_subªque°_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

330 *
	td©a
, 
	tngx_öt_t
 
	trc
);

333 
ngx_hâp_po°_subªque°_±
 
h™dÀr
;

334 *
d©a
;

335 } 
	tngx_hâp_po°_subªque°_t
;

338 
ngx_hâp_po°p⁄ed_ªque°_s
 
	tngx_hâp_po°p⁄ed_ªque°_t
;

340 
	sngx_hâp_po°p⁄ed_ªque°_s
 {

341 
ngx_hâp_ªque°_t
 *
ªque°
;

342 
ngx_chaö_t
 *
out
;

343 
ngx_hâp_po°p⁄ed_ªque°_t
 *
√xt
;

347 
ngx_hâp_po°ed_ªque°_s
 
	tngx_hâp_po°ed_ªque°_t
;

349 
	sngx_hâp_po°ed_ªque°_s
 {

350 
ngx_hâp_ªque°_t
 *
ªque°
;

351 
ngx_hâp_po°ed_ªque°_t
 *
√xt
;

355 
	$ngx_öt_t
 (*
	tngx_hâp_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

356 (*
	tngx_hâp_evít_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

359 
	sngx_hâp_ªque°_s
 {

360 
uöt32_t
 
sig«tuª
;

362 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

364 **
˘x
;

365 **
maö_c⁄f
;

366 **
§v_c⁄f
;

367 **
loc_c⁄f
;

369 
ngx_hâp_evít_h™dÀr_±
 
ªad_evít_h™dÀr
;

370 
ngx_hâp_evít_h™dÀr_±
 
wrôe_evít_h™dÀr
;

372 #i‡(
NGX_HTTP_CACHE
)

373 
ngx_hâp_ˇche_t
 *
ˇche
;

376 
ngx_hâp_up°ªam_t
 *
up°ªam
;

377 
ngx_¨øy_t
 *
up°ªam_°©es
;

380 
ngx_poﬁ_t
 *
poﬁ
;

381 
ngx_buf_t
 *
hódî_ö
;

383 
ngx_hâp_hódîs_ö_t
 
hódîs_ö
;

384 
ngx_hâp_hódîs_out_t
 
hódîs_out
;

386 
ngx_hâp_ªque°_body_t
 *
ªque°_body
;

388 
time_t
 
lögîög_time
;

389 
time_t
 
°¨t_£c
;

390 
ngx_m£c_t
 
°¨t_m£c
;

392 
ngx_uöt_t
 
mëhod
;

393 
ngx_uöt_t
 
hâp_vîsi⁄
;

395 
ngx_°r_t
 
ªque°_löe
;

396 
ngx_°r_t
 
uri
;

397 
ngx_°r_t
 
¨gs
;

398 
ngx_°r_t
 
exãn
;

399 
ngx_°r_t
 
u≈¨£d_uri
;

401 
ngx_°r_t
 
mëhod_«me
;

402 
ngx_°r_t
 
hâp_¥Ÿocﬁ
;

404 
ngx_chaö_t
 *
out
;

405 
ngx_hâp_ªque°_t
 *
maö
;

406 
ngx_hâp_ªque°_t
 *
∑ª¡
;

407 
ngx_hâp_po°p⁄ed_ªque°_t
 *
po°p⁄ed
;

408 
ngx_hâp_po°_subªque°_t
 *
po°_subªque°
;

409 
ngx_hâp_po°ed_ªque°_t
 *
po°ed_ªque°s
;

411 
ngx_öt_t
 
pha£_h™dÀr
;

412 
ngx_hâp_h™dÀr_±
 
c⁄ã¡_h™dÀr
;

413 
ngx_uöt_t
 
ac˚ss_code
;

415 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨übÀs
;

417 #i‡(
NGX_PCRE
)

418 
ngx_uöt_t
 
nˇ±uªs
;

419 *
ˇ±uªs
;

420 
u_ch¨
 *
ˇ±uªs_d©a
;

423 
size_t
 
limô_øã
;

424 
size_t
 
limô_øã_a·î
;

427 
size_t
 
hódî_size
;

429 
off_t
 
ªque°_Àngth
;

431 
ngx_uöt_t
 
îr_°©us
;

433 
ngx_hâp_c⁄√˘i⁄_t
 *
hâp_c⁄√˘i⁄
;

434 #i‡(
NGX_HTTP_SPDY
)

435 
ngx_hâp_•dy_°ªam_t
 *
•dy_°ªam
;

438 
ngx_hâp_log_h™dÀr_±
 
log_h™dÀr
;

440 
ngx_hâp_˛ónup_t
 *
˛ónup
;

442 
subªque°s
:8;

443 
cou¡
:8;

444 
blocked
:8;

446 
aio
:1;

448 
hâp_°©e
:4;

451 
com∂ex_uri
:1;

454 
quŸed_uri
:1;

457 
∂us_ö_uri
:1;

460 
•a˚_ö_uri
:1;

462 
övÆid_hódî
:1;

464 
add_uri_to_Æüs
:1;

465 
vÆid_loˇti⁄
:1;

466 
vÆid_u≈¨£d_uri
:1;

467 
uri_ch™ged
:1;

468 
uri_ch™ges
:4;

470 
ªque°_body_ö_sögÀ_buf
:1;

471 
ªque°_body_ö_fûe_⁄ly
:1;

472 
ªque°_body_ö_≥rsi°ít_fûe
:1;

473 
ªque°_body_ö_˛ón_fûe
:1;

474 
ªque°_body_fûe_group_ac˚ss
:1;

475 
ªque°_body_fûe_log_Àvñ
:3;

476 
ªque°_body_no_buf„rög
:1;

478 
subªque°_ö_mem‹y
:1;

479 
waôed
:1;

481 #i‡(
NGX_HTTP_CACHE
)

482 
ˇched
:1;

485 #i‡(
NGX_HTTP_GZIP
)

486 
gzù_ã°ed
:1;

487 
gzù_ok
:1;

488 
gzù_v¨y
:1;

491 
¥oxy
:1;

492 
by∑ss_ˇche
:1;

493 
no_ˇche
:1;

500 
limô_c⁄n_£t
:1;

501 
limô_ªq_£t
:1;

504 
ˇchóbÀ
:1;

507 
pùñöe
:1;

508 
chunked
:1;

509 
hódî_⁄ly
:1;

510 
kì∑live
:1;

511 
lögîög_˛o£
:1;

512 
disˇrd_body
:1;

513 
ªadög_body
:1;

514 
öã∫Æ
:1;

515 
îr‹_∑ge
:1;

516 
fûãr_föÆize
:1;

517 
po°_a˘i⁄
:1;

518 
ªque°_com∂ëe
:1;

519 
ªque°_ouçut
:1;

520 
hódî_£¡
:1;

521 
ex≥˘_ã°ed
:1;

522 
roŸ_ã°ed
:1;

523 
d⁄e
:1;

524 
logged
:1;

526 
buf„ªd
:4;

528 
maö_fûãr_√ed_ö_mem‹y
:1;

529 
fûãr_√ed_ö_mem‹y
:1;

530 
fûãr_√ed_ãmp‹¨y
:1;

531 
Ælow_ønges
:1;

532 
sögÀ_ønge
:1;

533 
dißbÀ_nŸ_modifõd
:1;

535 #i‡(
NGX_STAT_STUB
)

536 
°©_ªadög
:1;

537 
°©_wrôög
:1;

542 
ngx_uöt_t
 
°©e
;

544 
ngx_uöt_t
 
hódî_hash
;

545 
ngx_uöt_t
 
lowˇ£_ödex
;

546 
u_ch¨
 
lowˇ£_hódî
[
NGX_HTTP_LC_HEADER_LEN
];

548 
u_ch¨
 *
hódî_«me_°¨t
;

549 
u_ch¨
 *
hódî_«me_íd
;

550 
u_ch¨
 *
hódî_°¨t
;

551 
u_ch¨
 *
hódî_íd
;

558 
u_ch¨
 *
uri_°¨t
;

559 
u_ch¨
 *
uri_íd
;

560 
u_ch¨
 *
uri_ext
;

561 
u_ch¨
 *
¨gs_°¨t
;

562 
u_ch¨
 *
ªque°_°¨t
;

563 
u_ch¨
 *
ªque°_íd
;

564 
u_ch¨
 *
mëhod_íd
;

565 
u_ch¨
 *
schema_°¨t
;

566 
u_ch¨
 *
schema_íd
;

567 
u_ch¨
 *
ho°_°¨t
;

568 
u_ch¨
 *
ho°_íd
;

569 
u_ch¨
 *
p‹t_°¨t
;

570 
u_ch¨
 *
p‹t_íd
;

572 
hâp_mö‹
:16;

573 
hâp_maj‹
:16;

578 
ngx_hâp_po°ed_ªque°_t
 
ãrmöÆ_po°ed_ªque°
;

579 } 
	tngx_hâp_ïhemîÆ_t
;

582 
	#ngx_hâp_ïhemîÆ
(
r
Ë(*Ë(&r->
uri_°¨t
)

	)

585 
ngx_hâp_hódî_t
 
ngx_hâp_hódîs_ö
[];

586 
ngx_hâp_hódî_out_t
 
ngx_hâp_hódîs_out
[];

589 
	#ngx_hâp_£t_c⁄√˘i⁄_log
(
c
, 
l
) \

591 
c
->
log
->
fûe
 = 
l
->file; \

592 
c
->
log
->
√xt
 = 
l
->next; \

593 
c
->
log
->
wrôî
 = 
l
->writer; \

594 
c
->
log
->
wd©a
 = 
l
->wdata; \

595 i‡(!(
c
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) { \

596 
c
->
log
->
log_Àvñ
 = 
l
->log_level; \

597 
	}

	)
}

600 
	#ngx_hâp_£t_log_ªque°
(
log
, 
r
) \

601 ((
ngx_hâp_log_˘x_t
 *Ë
log
->
d©a
)->
cuºít_ªque°
 = 
r


	)

	@src/http/ngx_http_request_body.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_öt_t
 
ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

16 
ngx_öt_t
 
ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_disˇrd_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_buf_t
 *
b
);

19 
ngx_öt_t
 
ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
);

21 
ngx_öt_t
 
ngx_hâp_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_chaö_t
 *
ö
);

23 
ngx_öt_t
 
ngx_hâp_ªque°_body_Àngth_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

24 
ngx_chaö_t
 *
ö
);

25 
ngx_öt_t
 
ngx_hâp_ªque°_body_chunked_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_chaö_t
 *
ö
);

29 
ngx_öt_t


30 
	$ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
)

33 
size_t
 
¥îód
;

34 
ssize_t
 
size
;

35 
ngx_öt_t
 
rc
;

36 
ngx_buf_t
 *
b
;

37 
ngx_chaö_t
 
out
, *
˛
;

38 
ngx_hâp_ªque°_body_t
 *
rb
;

39 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

41 
r
->
maö
->
cou¡
++;

43 #i‡(
NGX_HTTP_SPDY
)

44 i‡(
r
->
•dy_°ªam
 &&Ñ =r->
maö
) {

45 
r
->
ªque°_body_no_buf„rög
 = 0;

46 
rc
 = 
	`ngx_hâp_•dy_ªad_ªque°_body
(
r
, 
po°_h™dÀr
);

47 
d⁄e
;

51 i‡(
r
 !r->
maö
 ||Ñ->
ªque°_body
 ||Ñ->
disˇrd_body
) {

52 
r
->
ªque°_body_no_buf„rög
 = 0;

53 
	`po°_h™dÀr
(
r
);

54  
NGX_OK
;

57 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

58 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

59 
d⁄e
;

62 i‡(
r
->
ªque°_body_no_buf„rög
) {

63 
r
->
ªque°_body_ö_fûe_⁄ly
 = 0;

66 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

67 i‡(
rb
 =
NULL
) {

68 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

69 
d⁄e
;

82 
rb
->
ª°
 = -1;

83 
rb
->
po°_h™dÀr
 =Öost_handler;

85 
r
->
ªque°_body
 = 
rb
;

87 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 0 && !r->hódîs_ö.
chunked
) {

88 
r
->
ªque°_body_no_buf„rög
 = 0;

89 
	`po°_h™dÀr
(
r
);

90  
NGX_OK
;

93 
¥îód
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

95 i‡(
¥îód
) {

99 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

100 "hâ∞˛õ¡Ñeque° bodyÖªªad %uz", 
¥îód
);

102 
out
.
buf
 = 
r
->
hódî_ö
;

103 
out
.
√xt
 = 
NULL
;

105 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

107 i‡(
rc
 !
NGX_OK
) {

108 
d⁄e
;

111 
r
->
ªque°_Àngth
 +
¥îód
 - (r->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
);

113 i‡(!
r
->
hódîs_ö
.
chunked


114 && 
rb
->
ª°
 > 0

115 && 
rb
->
ª°
 <(
off_t
Ë(
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
))

119 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

120 i‡(
b
 =
NULL
) {

121 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

122 
d⁄e
;

125 
b
->
ãmp‹¨y
 = 1;

126 
b
->
°¨t
 = 
r
->
hódî_ö
->
pos
;

127 
b
->
pos
 = 
r
->
hódî_ö
->pos;

128 
b
->
œ°
 = 
r
->
hódî_ö
->last;

129 
b
->
íd
 = 
r
->
hódî_ö
->end;

131 
rb
->
buf
 = 
b
;

133 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

134 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

136 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

137 
d⁄e
;

143 i‡(
	`ngx_hâp_ªque°_body_fûãr
(
r
, 
NULL
Ë!
NGX_OK
) {

144 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

145 
d⁄e
;

149 i‡(
rb
->
ª°
 == 0) {

152 i‡(
r
->
ªque°_body_ö_fûe_⁄ly
) {

153 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

154 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

155 
d⁄e
;

158 i‡(
rb
->
ãmp_fûe
->
fûe
.
off£t
 != 0) {

160 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

161 i‡(
˛
 =
NULL
) {

162 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

163 
d⁄e
;

166 
b
 = 
˛
->
buf
;

168 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

170 
b
->
ö_fûe
 = 1;

171 
b
->
fûe_œ°
 = 
rb
->
ãmp_fûe
->
fûe
.
off£t
;

172 
b
->
fûe
 = &
rb
->
ãmp_fûe
->file;

174 
rb
->
bufs
 = 
˛
;

177 
rb
->
bufs
 = 
NULL
;

181 
r
->
ªque°_body_no_buf„rög
 = 0;

183 
	`po°_h™dÀr
(
r
);

185  
NGX_OK
;

188 i‡(
rb
->
ª°
 < 0) {

189 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

191 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

192 
d⁄e
;

195 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

197 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

198 
size
 += size >> 2;

202 i‡(!
r
->
hódîs_ö
.
chunked
 && 
rb
->
ª°
 < 
size
) {

203 
size
 = (
ssize_t
Ë
rb
->
ª°
;

205 i‡(
r
->
ªque°_body_ö_sögÀ_buf
) {

206 
size
 +
¥îód
;

210 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

213 
rb
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

214 i‡(
rb
->
buf
 =
NULL
) {

215 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

216 
d⁄e
;

219 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

220 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

222 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

224 
d⁄e
:

226 i‡(
r
->
ªque°_body_no_buf„rög


227 && (
rc
 =
NGX_OK
 ||Ñ¯=
NGX_AGAIN
))

229 i‡(
rc
 =
NGX_OK
) {

230 
r
->
ªque°_body_no_buf„rög
 = 0;

234 
r
->
ªadög_body
 = 1;

237 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

238 
	`po°_h™dÀr
(
r
);

241 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

242 
r
->
maö
->
cou¡
--;

245  
rc
;

246 
	}
}

249 
ngx_öt_t


250 
	$ngx_hâp_ªad_unbuf„ªd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

252 
ngx_öt_t
 
rc
;

254 i‡(
r
->
c⁄√˘i⁄
->
ªad
->
timedout
) {

255 
r
->
c⁄√˘i⁄
->
timedout
 = 1;

256  
NGX_HTTP_REQUEST_TIME_OUT
;

259 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

261 i‡(
rc
 =
NGX_OK
) {

262 
r
->
ªadög_body
 = 0;

265  
rc
;

266 
	}
}

270 
	$ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

272 
ngx_öt_t
 
rc
;

274 i‡(
r
->
c⁄√˘i⁄
->
ªad
->
timedout
) {

275 
r
->
c⁄√˘i⁄
->
timedout
 = 1;

276 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

280 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

282 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

283 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

285 
	}
}

288 
ngx_öt_t


289 
	$ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

291 
off_t
 
ª°
;

292 
size_t
 
size
;

293 
ssize_t
 
n
;

294 
ngx_öt_t
 
rc
;

295 
ngx_buf_t
 *
b
;

296 
ngx_chaö_t
 *
˛
, 
out
;

297 
ngx_c⁄√˘i⁄_t
 *
c
;

298 
ngx_hâp_ªque°_body_t
 *
rb
;

299 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

301 
c
 = 
r
->
c⁄√˘i⁄
;

302 
rb
 = 
r
->
ªque°_body
;

304 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

309 i‡(
rb
->
buf
->
œ°
 =rb->buf->
íd
) {

311 i‡(
rb
->
buf
->
pos
 !rb->buf->
œ°
) {

315 
out
.
buf
 = 
rb
->buf;

316 
out
.
√xt
 = 
NULL
;

318 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

320 i‡(
rc
 !
NGX_OK
) {

321  
rc
;

328 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, 
NULL
);

330 i‡(
rc
 !
NGX_OK
) {

331  
rc
;

335 i‡(
rb
->
busy
 !
NULL
) {

336 i‡(
r
->
ªque°_body_no_buf„rög
) {

337 i‡(
c
->
ªad
->
timî_£t
) {

338 
	`ngx_dñ_timî
(
c
->
ªad
);

341 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

342  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

345  
NGX_AGAIN
;

348  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

351 
rb
->
buf
->
pos
 =Ñb->buf->
°¨t
;

352 
rb
->
buf
->
œ°
 =Ñb->buf->
°¨t
;

355 
size
 = 
rb
->
buf
->
íd
 -Ñb->buf->
œ°
;

356 
ª°
 = 
rb
->ª° - (rb->
buf
->
œ°
 -Ñb->buf->
pos
);

358 i‡((
off_t
Ë
size
 > 
ª°
) {

359 
size
 = (
size_t
Ë
ª°
;

362 
n
 = 
c
->
	`ªcv
(c, 
rb
->
buf
->
œ°
, 
size
);

364 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

365 "hâ∞˛õ¡Ñeque° bodyÑecv %z", 
n
);

367 i‡(
n
 =
NGX_AGAIN
) {

371 i‡(
n
 == 0) {

372 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

376 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

377 
c
->
îr‹
 = 1;

378  
NGX_HTTP_BAD_REQUEST
;

381 
rb
->
buf
->
œ°
 +
n
;

382 
r
->
ªque°_Àngth
 +
n
;

384 i‡(
n
 =
ª°
) {

387 
out
.
buf
 = 
rb
->buf;

388 
out
.
√xt
 = 
NULL
;

390 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

392 i‡(
rc
 !
NGX_OK
) {

393  
rc
;

397 i‡(
rb
->
ª°
 == 0) {

401 i‡(
rb
->
buf
->
œ°
 <Ñb->buf->
íd
) {

406 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

407 "hâ∞˛õ¡Ñeque° bodyÑe° %O", 
rb
->
ª°
);

409 i‡(
rb
->
ª°
 == 0) {

413 i‡(!
c
->
ªad
->
ªady
) {

415 i‡(
r
->
ªque°_body_no_buf„rög


416 && 
rb
->
buf
->
pos
 !rb->buf->
œ°
)

420 
out
.
buf
 = 
rb
->buf;

421 
out
.
√xt
 = 
NULL
;

423 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

425 i‡(
rc
 !
NGX_OK
) {

426  
rc
;

430 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

431 
	`ngx_add_timî
(
c
->
ªad
, 
˛cf
->
˛õ¡_body_timeout
);

433 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

434  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

437  
NGX_AGAIN
;

441 i‡(
c
->
ªad
->
timî_£t
) {

442 
	`ngx_dñ_timî
(
c
->
ªad
);

445 i‡(
rb
->
ãmp_fûe
 || 
r
->
ªque°_body_ö_fûe_⁄ly
) {

449 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

450  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

453 i‡(
rb
->
ãmp_fûe
->
fûe
.
off£t
 != 0) {

455 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

456 i‡(
˛
 =
NULL
) {

457  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

460 
b
 = 
˛
->
buf
;

462 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

464 
b
->
ö_fûe
 = 1;

465 
b
->
fûe_œ°
 = 
rb
->
ãmp_fûe
->
fûe
.
off£t
;

466 
b
->
fûe
 = &
rb
->
ãmp_fûe
->file;

468 
rb
->
bufs
 = 
˛
;

471 
rb
->
bufs
 = 
NULL
;

475 i‡(!
r
->
ªque°_body_no_buf„rög
) {

476 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

477 
rb
->
	`po°_h™dÀr
(
r
);

480  
NGX_OK
;

481 
	}
}

484 
ngx_öt_t


485 
	$ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

487 
ssize_t
 
n
;

488 
ngx_chaö_t
 *
˛
, *
 
;

489 
ngx_ãmp_fûe_t
 *
tf
;

490 
ngx_hâp_ªque°_body_t
 *
rb
;

491 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

493 
rb
 = 
r
->
ªque°_body
;

495 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

496 "hâ∞wrôê˛õ¡Ñeque° body, buf†%p", 
rb
->
bufs
);

498 i‡(
rb
->
ãmp_fûe
 =
NULL
) {

499 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

500 i‡(
tf
 =
NULL
) {

501  
NGX_ERROR
;

504 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

506 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

507 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

508 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

509 
tf
->
poﬁ
 = 
r
->pool;

510 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

511 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

512 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

513 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

515 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

516 
tf
->
ac˚ss
 = 0660;

519 
rb
->
ãmp_fûe
 = 
tf
;

521 i‡(
rb
->
bufs
 =
NULL
) {

524 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

525 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

526 !
NGX_OK
)

528  
NGX_ERROR
;

531  
NGX_OK
;

535 i‡(
rb
->
bufs
 =
NULL
) {

536  
NGX_OK
;

539 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
rb
->
ãmp_fûe
,Ñb->
bufs
);

543 i‡(
n
 =
NGX_ERROR
) {

544  
NGX_ERROR
;

547 
rb
->
ãmp_fûe
->
off£t
 +
n
;

551 
˛
 = 
rb
->
bufs
; cl; ) {

553 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

555 
 
 = 
˛
;

556 
˛
 = cl->
√xt
;

557 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

560 
rb
->
bufs
 = 
NULL
;

562  
NGX_OK
;

563 
	}
}

566 
ngx_öt_t


567 
	$ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

569 
ssize_t
 
size
;

570 
ngx_öt_t
 
rc
;

571 
ngx_evít_t
 *
ªv
;

573 #i‡(
NGX_HTTP_SPDY
)

574 i‡(
r
->
•dy_°ªam
 &&Ñ =r->
maö
) {

575 
r
->
•dy_°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_DISCARD
;

576  
NGX_OK
;

580 i‡(
r
 !r->
maö
 ||Ñ->
disˇrd_body
 ||Ñ->
ªque°_body
) {

581  
NGX_OK
;

584 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

585  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

588 
ªv
 = 
r
->
c⁄√˘i⁄
->
ªad
;

590 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "http set discard body");

592 i‡(
ªv
->
timî_£t
) {

593 
	`ngx_dñ_timî
(
ªv
);

596 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 <0 && !r->hódîs_ö.
chunked
) {

597  
NGX_OK
;

600 
size
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

602 i‡(
size
 || 
r
->
hódîs_ö
.
chunked
) {

603 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body_fûãr
(
r
,Ñ->
hódî_ö
);

605 i‡(
rc
 !
NGX_OK
) {

606  
rc
;

609 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

610  
NGX_OK
;

614 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

616 i‡(
rc
 =
NGX_OK
) {

617 
r
->
lögîög_˛o£
 = 0;

618  
NGX_OK
;

621 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

622  
rc
;

627 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

629 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

630  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

633 
r
->
cou¡
++;

634 
r
->
disˇrd_body
 = 1;

636  
NGX_OK
;

637 
	}
}

641 
	$ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

643 
ngx_öt_t
 
rc
;

644 
ngx_m£c_t
 
timî
;

645 
ngx_evít_t
 *
ªv
;

646 
ngx_c⁄√˘i⁄_t
 *
c
;

647 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

649 
c
 = 
r
->
c⁄√˘i⁄
;

650 
ªv
 = 
c
->
ªad
;

652 i‡(
ªv
->
timedout
) {

653 
c
->
timedout
 = 1;

654 
c
->
îr‹
 = 1;

655 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

659 i‡(
r
->
lögîög_time
) {

660 
timî
 = (
ngx_m£c_t
Ë
r
->
lögîög_time
 - (ngx_m£c_tË
	`ngx_time
();

662 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

663 
r
->
disˇrd_body
 = 0;

664 
r
->
lögîög_˛o£
 = 0;

665 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

670 
timî
 = 0;

673 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

675 i‡(
rc
 =
NGX_OK
) {

676 
r
->
disˇrd_body
 = 0;

677 
r
->
lögîög_˛o£
 = 0;

678 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

682 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

683 
c
->
îr‹
 = 1;

684 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

690 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

691 
c
->
îr‹
 = 1;

692 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

696 i‡(
timî
) {

698 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

700 
timî
 *= 1000;

702 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

703 
timî
 = 
˛cf
->
lögîög_timeout
;

706 
	`ngx_add_timî
(
ªv
, 
timî
);

708 
	}
}

711 
ngx_öt_t


712 
	$ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

714 
size_t
 
size
;

715 
ssize_t
 
n
;

716 
ngx_öt_t
 
rc
;

717 
ngx_buf_t
 
b
;

718 
u_ch¨
 
buf„r
[
NGX_HTTP_DISCARD_BUFFER_SIZE
];

720 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

723 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

725 
b
.
ãmp‹¨y
 = 1;

728 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

729 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

730  
NGX_OK
;

733 i‡(!
r
->
c⁄√˘i⁄
->
ªad
->
ªady
) {

734  
NGX_AGAIN
;

737 
size
 = (
size_t
Ë
	`ngx_mö
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
,

738 
NGX_HTTP_DISCARD_BUFFER_SIZE
);

740 
n
 = 
r
->
c⁄√˘i⁄
->
	`ªcv
‘->c⁄√˘i⁄, 
buf„r
, 
size
);

742 i‡(
n
 =
NGX_ERROR
) {

743 
r
->
c⁄√˘i⁄
->
îr‹
 = 1;

744  
NGX_OK
;

747 i‡(
n
 =
NGX_AGAIN
) {

748  
NGX_AGAIN
;

751 i‡(
n
 == 0) {

752  
NGX_OK
;

755 
b
.
pos
 = 
buf„r
;

756 
b
.
œ°
 = 
buf„r
 + 
n
;

758 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body_fûãr
(
r
, &
b
);

760 i‡(
rc
 !
NGX_OK
) {

761  
rc
;

764 
	}
}

767 
ngx_öt_t


768 
	$ngx_hâp_disˇrd_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

770 
size_t
 
size
;

771 
ngx_öt_t
 
rc
;

772 
ngx_hâp_ªque°_body_t
 *
rb
;

774 i‡(
r
->
hódîs_ö
.
chunked
) {

776 
rb
 = 
r
->
ªque°_body
;

778 i‡(
rb
 =
NULL
) {

780 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

781 i‡(
rb
 =
NULL
) {

782  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

785 
rb
->
chunked
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_chunked_t
));

786 i‡(
rb
->
chunked
 =
NULL
) {

787  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

790 
r
->
ªque°_body
 = 
rb
;

795 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
b
, 
rb
->
chunked
);

797 i‡(
rc
 =
NGX_OK
) {

801 
size
 = 
b
->
œ°
 - b->
pos
;

803 i‡((
off_t
Ë
size
 > 
rb
->
chunked
->size) {

804 
b
->
pos
 +(
size_t
Ë
rb
->
chunked
->
size
;

805 
rb
->
chunked
->
size
 = 0;

808 
rb
->
chunked
->
size
 -= size;

809 
b
->
pos
 = b->
œ°
;

815 i‡(
rc
 =
NGX_DONE
) {

819 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

823 i‡(
rc
 =
NGX_AGAIN
) {

827 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
rb
->
chunked
->
Àngth
;

833 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

836  
NGX_HTTP_BAD_REQUEST
;

840 
size
 = 
b
->
œ°
 - b->
pos
;

842 i‡((
off_t
Ë
size
 > 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) {

843 
b
->
pos
 +(
size_t
Ë
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

844 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

847 
b
->
pos
 = b->
œ°
;

848 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 -
size
;

852  
NGX_OK
;

853 
	}
}

856 
ngx_öt_t


857 
	$ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
)

859 
ngx_öt_t
 
n
;

860 
ngx_°r_t
 *
ex≥˘
;

862 i‡(
r
->
ex≥˘_ã°ed


863 || 
r
->
hódîs_ö
.
ex≥˘
 =
NULL


864 || 
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
)

866  
NGX_OK
;

869 
r
->
ex≥˘_ã°ed
 = 1;

871 
ex≥˘
 = &
r
->
hódîs_ö
.ex≥˘->
vÆue
;

873 i‡(
ex≥˘
->
Àn
 != ("100-continue") - 1

874 || 
	`ngx_°∫ˇ£cmp
(
ex≥˘
->
d©a
, (
u_ch¨
 *) "100-continue",

878  
NGX_OK
;

881 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

884 
n
 = 
r
->
c⁄√˘i⁄
->
	`£nd
(r->connection,

885 (
u_ch¨
 *Ë"HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF,

886 ("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1);

888 i‡(
n
 =("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1) {

889  
NGX_OK
;

894  
NGX_ERROR
;

895 
	}
}

898 
ngx_öt_t


899 
	$ngx_hâp_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

901 i‡(
r
->
hódîs_ö
.
chunked
) {

902  
	`ngx_hâp_ªque°_body_chunked_fûãr
(
r
, 
ö
);

905  
	`ngx_hâp_ªque°_body_Àngth_fûãr
(
r
, 
ö
);

907 
	}
}

910 
ngx_öt_t


911 
	$ngx_hâp_ªque°_body_Àngth_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

913 
size_t
 
size
;

914 
ngx_öt_t
 
rc
;

915 
ngx_buf_t
 *
b
;

916 
ngx_chaö_t
 *
˛
, *
é
, *
out
, **
Œ
;

917 
ngx_hâp_ªque°_body_t
 *
rb
;

919 
rb
 = 
r
->
ªque°_body
;

921 i‡(
rb
->
ª°
 == -1) {

922 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

925 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

928 
out
 = 
NULL
;

929 
Œ
 = &
out
;

931 
˛
 = 
ö
; cl; c»˛->
√xt
) {

933 i‡(
rb
->
ª°
 == 0) {

937 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

938 i‡(
é
 =
NULL
) {

939  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

942 
b
 = 
é
->
buf
;

944 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

946 
b
->
ãmp‹¨y
 = 1;

947 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
;

948 
b
->
°¨t
 = 
˛
->
buf
->
pos
;

949 
b
->
pos
 = 
˛
->
buf
->pos;

950 
b
->
œ°
 = 
˛
->
buf
->last;

951 
b
->
íd
 = 
˛
->
buf
->end;

952 
b
->
Êush
 = 
r
->
ªque°_body_no_buf„rög
;

954 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

956 i‡((
off_t
Ë
size
 < 
rb
->
ª°
) {

957 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

958 
rb
->
ª°
 -
size
;

961 
˛
->
buf
->
pos
 +(
size_t
Ë
rb
->
ª°
;

962 
rb
->
ª°
 = 0;

963 
b
->
œ°
 = 
˛
->
buf
->
pos
;

964 
b
->
œ°_buf
 = 1;

967 *
Œ
 = 
é
;

968 
Œ
 = &
é
->
√xt
;

971 
rc
 = 
	`ngx_hâp_t›_ªque°_body_fûãr
(
r
, 
out
);

973 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
rb
->
‰ì
, &rb->
busy
, &
out
,

974 (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
);

976  
rc
;

977 
	}
}

980 
ngx_öt_t


981 
	$ngx_hâp_ªque°_body_chunked_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

983 
size_t
 
size
;

984 
ngx_öt_t
 
rc
;

985 
ngx_buf_t
 *
b
;

986 
ngx_chaö_t
 *
˛
, *
out
, *
é
, **
Œ
;

987 
ngx_hâp_ªque°_body_t
 *
rb
;

988 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

990 
rb
 = 
r
->
ªque°_body
;

992 i‡(
rb
->
ª°
 == -1) {

994 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

997 
rb
->
chunked
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_chunked_t
));

998 i‡(
rb
->
chunked
 =
NULL
) {

999  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1002 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

1003 
rb
->
ª°
 = 3;

1006 
out
 = 
NULL
;

1007 
Œ
 = &
out
;

1009 
˛
 = 
ö
; cl; c»˛->
√xt
) {

1013 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1016 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

1017 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1018 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1019 
˛
->
buf
->
fûe_pos
,

1020 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1022 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
˛
->
buf
, 
rb
->
chunked
);

1024 i‡(
rc
 =
NGX_OK
) {

1028 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1030 i‡(
˛cf
->
˛õ¡_max_body_size


1031 && 
˛cf
->
˛õ¡_max_body_size


1032 - 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 
rb
->
chunked
->
size
)

1034 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1037 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
,

1038 
rb
->
chunked
->
size
);

1040 
r
->
lögîög_˛o£
 = 1;

1042  
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
;

1045 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

1046 i‡(
é
 =
NULL
) {

1047  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1050 
b
 = 
é
->
buf
;

1052 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1054 
b
->
ãmp‹¨y
 = 1;

1055 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
;

1056 
b
->
°¨t
 = 
˛
->
buf
->
pos
;

1057 
b
->
pos
 = 
˛
->
buf
->pos;

1058 
b
->
œ°
 = 
˛
->
buf
->last;

1059 
b
->
íd
 = 
˛
->
buf
->end;

1060 
b
->
Êush
 = 
r
->
ªque°_body_no_buf„rög
;

1062 *
Œ
 = 
é
;

1063 
Œ
 = &
é
->
√xt
;

1065 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

1067 i‡((
off_t
Ë
size
 > 
rb
->
chunked
->size) {

1068 
˛
->
buf
->
pos
 +(
size_t
Ë
rb
->
chunked
->
size
;

1069 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 +
rb
->
chunked
->
size
;

1070 
rb
->
chunked
->
size
 = 0;

1073 
rb
->
chunked
->
size
 -= size;

1074 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 +
size
;

1075 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

1078 
b
->
œ°
 = 
˛
->
buf
->
pos
;

1083 i‡(
rc
 =
NGX_DONE
) {

1087 
rb
->
ª°
 = 0;

1089 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

1090 i‡(
é
 =
NULL
) {

1091  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1094 
b
 = 
é
->
buf
;

1096 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1098 
b
->
œ°_buf
 = 1;

1100 *
Œ
 = 
é
;

1101 
Œ
 = &
é
->
√xt
;

1106 i‡(
rc
 =
NGX_AGAIN
) {

1110 
rb
->
ª°
 =Ñb->
chunked
->
Àngth
;

1117 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1120  
NGX_HTTP_BAD_REQUEST
;

1124 
rc
 = 
	`ngx_hâp_t›_ªque°_body_fûãr
(
r
, 
out
);

1126 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
rb
->
‰ì
, &rb->
busy
, &
out
,

1127 (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
);

1129  
rc
;

1130 
	}
}

1133 
ngx_öt_t


1134 
	$ngx_hâp_ªque°_body_ßve_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1136 #i‡(
NGX_DEBUG
)

1137 
ngx_chaö_t
 *
˛
;

1139 
ngx_hâp_ªque°_body_t
 *
rb
;

1141 
rb
 = 
r
->
ªque°_body
;

1143 #i‡(
NGX_DEBUG
)

1145 
˛
 = 
rb
->
bufs
; cl; c»˛->
√xt
) {

1146 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1149 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

1150 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1151 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1152 
˛
->
buf
->
fûe_pos
,

1153 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1156 
˛
 = 
ö
; cl; c»˛->
√xt
) {

1157 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1160 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

1161 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1162 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1163 
˛
->
buf
->
fûe_pos
,

1164 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1171 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
rb
->
bufs
, 
ö
Ë!
NGX_OK
) {

1172  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1175 i‡(
rb
->
ª°
 > 0

1176 && 
rb
->
buf
 &&Ñb->buf->
œ°
 =rb->buf->
íd


1177 && !
r
->
ªque°_body_no_buf„rög
)

1179 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

1180  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1184  
NGX_OK
;

1185 
	}
}

	@src/http/ngx_http_script.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

14 
ngx_öt_t
 
ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

15 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

16 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
œ°
);

17 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

18 
ngx_°r_t
 *
«me
);

19 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

20 #i‡(
NGX_PCRE
)

21 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

22 
ngx_uöt_t
 
n
);

24 
ngx_öt_t


25 
ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

26 
size_t
 
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

27 
ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

30 
	#ngx_hâp_s¸ùt_exô
 (
u_ch¨
 *Ë&
ngx_hâp_s¸ùt_exô_code


	)

32 
uöçå_t
 
	gngx_hâp_s¸ùt_exô_code
 = (uöçå_tË
NULL
;

36 
	$ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
)

39 
ngx_uöt_t
 *
ödex
;

41 
ödex
 = 
vÆ
->
Êushes
;

43 i‡(
ödex
) {

44 *
ödex
 !(
ngx_uöt_t
) -1) {

46 i‡(
r
->
v¨übÀs
[*
ödex
].
no_ˇchóbÀ
) {

47 
r
->
v¨übÀs
[*
ödex
].
vÆid
 = 0;

48 
r
->
v¨übÀs
[*
ödex
].
nŸ_found
 = 0;

51 
ödex
++;

54 
	}
}

57 
ngx_öt_t


58 
	$ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
,

59 
ngx_°r_t
 *
vÆue
)

61 
size_t
 
Àn
;

62 
ngx_hâp_s¸ùt_code_±
 
code
;

63 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

64 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

66 i‡(
vÆ
->
Àngths
 =
NULL
) {

67 *
vÆue
 = 
vÆ
->value;

68  
NGX_OK
;

71 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
r
, 
vÆ
);

73 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

75 
e
.
ù
 = 
vÆ
->
Àngths
;

76 
e
.
ªque°
 = 
r
;

77 
e
.
Êushed
 = 1;

79 
Àn
 = 0;

81 *(
uöçå_t
 *Ë
e
.
ù
) {

82 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

83 
Àn
 +
	`lcode
(&
e
);

86 
vÆue
->
Àn
 =Üen;

87 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

88 i‡(
vÆue
->
d©a
 =
NULL
) {

89  
NGX_ERROR
;

92 
e
.
ù
 = 
vÆ
->
vÆues
;

93 
e
.
pos
 = 
vÆue
->
d©a
;

94 
e
.
buf
 = *
vÆue
;

96 *(
uöçå_t
 *Ë
e
.
ù
) {

97 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

98 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

101 *
vÆue
 = 
e
.
buf
;

103  
NGX_OK
;

104 
	}
}

107 
ngx_öt_t


108 
	$ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
)

110 
ngx_°r_t
 *
v
;

111 
ngx_uöt_t
 
i
, 
n
, 
nv
, 
nc
;

112 
ngx_¨øy_t
 
Êushes
, 
Àngths
, 
vÆues
, *
pf
, *
∂
, *
pv
;

113 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

115 
v
 = 
ccv
->
vÆue
;

117 
nv
 = 0;

118 
nc
 = 0;

120 
i
 = 0; i < 
v
->
Àn
; i++) {

121 i‡(
v
->
d©a
[
i
] == '$') {

122 i‡(
v
->
d©a
[
i
 + 1] >= '1' && v->data[i + 1] <= '9') {

123 
nc
++;

126 
nv
++;

131 i‡((
v
->
Àn
 =0 || v->
d©a
[0] != '$')

132 && (
ccv
->
c⁄f_¥efix
 || ccv->
roŸ_¥efix
))

134 i‡(
	`ngx_c⁄f_fuŒ_«me
(
ccv
->
cf
->
cy˛e
, 
v
, ccv->
c⁄f_¥efix
Ë!
NGX_OK
) {

135  
NGX_ERROR
;

138 
ccv
->
c⁄f_¥efix
 = 0;

139 
ccv
->
roŸ_¥efix
 = 0;

142 
ccv
->
com∂ex_vÆue
->
vÆue
 = *
v
;

143 
ccv
->
com∂ex_vÆue
->
Êushes
 = 
NULL
;

144 
ccv
->
com∂ex_vÆue
->
Àngths
 = 
NULL
;

145 
ccv
->
com∂ex_vÆue
->
vÆues
 = 
NULL
;

147 i‡(
nv
 =0 && 
nc
 == 0) {

148  
NGX_OK
;

151 
n
 = 
nv
 + 1;

153 i‡(
	`ngx_¨øy_öô
(&
Êushes
, 
ccv
->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
))

154 !
NGX_OK
)

156  
NGX_ERROR
;

159 
n
 = 
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

160 + (
ngx_hâp_s¸ùt_v¨_code_t
))

161 + (
uöçå_t
);

163 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

164  
NGX_ERROR
;

167 
n
 = (
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

168 + (
ngx_hâp_s¸ùt_v¨_code_t
))

169 + (
uöçå_t
)

170 + 
v
->
Àn


171 + (
uöçå_t
) - 1)

172 & ~((
uöçå_t
) - 1);

174 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

175  
NGX_ERROR
;

178 
pf
 = &
Êushes
;

179 
∂
 = &
Àngths
;

180 
pv
 = &
vÆues
;

182 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

184 
sc
.
cf
 = 
ccv
->cf;

185 
sc
.
sour˚
 = 
v
;

186 
sc
.
Êushes
 = &
pf
;

187 
sc
.
Àngths
 = &
∂
;

188 
sc
.
vÆues
 = &
pv
;

189 
sc
.
com∂ëe_Àngths
 = 1;

190 
sc
.
com∂ëe_vÆues
 = 1;

191 
sc
.
zîo
 = 
ccv
->zero;

192 
sc
.
c⁄f_¥efix
 = 
ccv
->conf_prefix;

193 
sc
.
roŸ_¥efix
 = 
ccv
->root_prefix;

195 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

196  
NGX_ERROR
;

199 i‡(
Êushes
.
√…s
) {

200 
ccv
->
com∂ex_vÆue
->
Êushes
 = flushes.
ñts
;

201 
ccv
->
com∂ex_vÆue
->
Êushes
[Êushes.
√…s
] = (
ngx_uöt_t
) -1;

204 
ccv
->
com∂ex_vÆue
->
Àngths
 =Üígths.
ñts
;

205 
ccv
->
com∂ex_vÆue
->
vÆues
 = vÆues.
ñts
;

207  
NGX_OK
;

208 
	}
}

212 
	$ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

214 *
p
 = 
c⁄f
;

216 
ngx_°r_t
 *
vÆue
;

217 
ngx_hâp_com∂ex_vÆue_t
 **
cv
;

218 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

220 
cv
 = (
ngx_hâp_com∂ex_vÆue_t
 **Ë(
p
 + 
cmd
->
off£t
);

222 i‡(*
cv
 !
NULL
) {

226 *
cv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

227 i‡(*
cv
 =
NULL
) {

228  
NGX_CONF_ERROR
;

231 
vÆue
 = 
cf
->
¨gs
->
ñts
;

233 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

235 
ccv
.
cf
 = cf;

236 
ccv
.
vÆue
 = &value[1];

237 
ccv
.
com∂ex_vÆue
 = *
cv
;

239 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

240  
NGX_CONF_ERROR
;

243  
NGX_CONF_OK
;

244 
	}
}

247 
ngx_öt_t


248 
	$ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
¥ediˇãs
)

250 
ngx_°r_t
 
vÆ
;

251 
ngx_uöt_t
 
i
;

252 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

254 i‡(
¥ediˇãs
 =
NULL
) {

255  
NGX_OK
;

258 
cv
 = 
¥ediˇãs
->
ñts
;

260 
i
 = 0; i < 
¥ediˇãs
->
√…s
; i++) {

261 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
cv
[
i
], &
vÆ
Ë!
NGX_OK
) {

262  
NGX_ERROR
;

265 i‡(
vÆ
.
Àn
 && (vÆ.À¿!1 || vÆ.
d©a
[0] != '0')) {

266  
NGX_DECLINED
;

270  
NGX_OK
;

271 
	}
}

275 
	$ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

277 *
p
 = 
c⁄f
;

279 
ngx_°r_t
 *
vÆue
;

280 
ngx_uöt_t
 
i
;

281 
ngx_¨øy_t
 **
a
;

282 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

283 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

285 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

287 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

288 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_com∂ex_vÆue_t
));

289 i‡(*
a
 =
NULL
) {

290  
NGX_CONF_ERROR
;

294 
vÆue
 = 
cf
->
¨gs
->
ñts
;

296 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

297 
cv
 = 
	`ngx_¨øy_push
(*
a
);

298 i‡(
cv
 =
NULL
) {

299  
NGX_CONF_ERROR
;

302 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

304 
ccv
.
cf
 = cf;

305 
ccv
.
vÆue
 = &vÆue[
i
];

306 
ccv
.
com∂ex_vÆue
 = 
cv
;

308 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

309  
NGX_CONF_ERROR
;

313  
NGX_CONF_OK
;

314 
	}
}

317 
ngx_uöt_t


318 
	$ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
)

320 
ngx_uöt_t
 
i
, 
n
;

322 
n
 = 0, 
i
 = 0; i < 
vÆue
->
Àn
; i++) {

323 i‡(
vÆue
->
d©a
[
i
] == '$') {

324 
n
++;

328  
n
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

335 
u_ch¨
 
ch
;

336 
ngx_°r_t
 
«me
;

337 
ngx_uöt_t
 
i
, 
bøckë
;

339 i‡(
	`ngx_hâp_s¸ùt_öô_¨øys
(
sc
Ë!
NGX_OK
) {

340  
NGX_ERROR
;

343 
i
 = 0; i < 
sc
->
sour˚
->
Àn
; ) {

345 
«me
.
Àn
 = 0;

347 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

349 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

350 
övÆid_v¨übÀ
;

353 #i‡(
NGX_PCRE
)

355 
ngx_uöt_t
 
n
;

357 i‡(
sc
->
sour˚
->
d©a
[
i
] >= '1' && sc->source->data[i] <= '9') {

359 
n
 = 
sc
->
sour˚
->
d©a
[
i
] - '0';

361 i‡(
sc
->
ˇ±uªs_mask
 & (1 << 
n
)) {

362 
sc
->
dup_ˇ±uª
 = 1;

365 
sc
->
ˇ±uªs_mask
 |1 << 
n
;

367 i‡(
	`ngx_hâp_s¸ùt_add_ˇ±uª_code
(
sc
, 
n
Ë!
NGX_OK
) {

368  
NGX_ERROR
;

371 
i
++;

378 i‡(
sc
->
sour˚
->
d©a
[
i
] == '{') {

379 
bøckë
 = 1;

381 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

382 
övÆid_v¨übÀ
;

385 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

388 
bøckë
 = 0;

389 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

392  ; 
i
 < 
sc
->
sour˚
->
Àn
; i++, 
«me
.len++) {

393 
ch
 = 
sc
->
sour˚
->
d©a
[
i
];

395 i‡(
ch
 ='}' && 
bøckë
) {

396 
i
++;

397 
bøckë
 = 0;

401 i‡((
ch
 >= 'A' && ch <= 'Z')

402 || (
ch
 >= 'a' && ch <= 'z')

403 || (
ch
 >= '0' && ch <= '9')

404 || 
ch
 == '_')

412 i‡(
bøckë
) {

413 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0,

415 "v¨übÀ i†missög", &
«me
);

416  
NGX_ERROR
;

419 i‡(
«me
.
Àn
 == 0) {

420 
övÆid_v¨übÀ
;

423 
sc
->
v¨übÀs
++;

425 i‡(
	`ngx_hâp_s¸ùt_add_v¨_code
(
sc
, &
«me
Ë!
NGX_OK
) {

426  
NGX_ERROR
;

432 i‡(
sc
->
sour˚
->
d©a
[
i
] ='?' && sc->
compûe_¨gs
) {

433 
sc
->
¨gs
 = 1;

434 
sc
->
compûe_¨gs
 = 0;

436 i‡(
	`ngx_hâp_s¸ùt_add_¨gs_code
(
sc
Ë!
NGX_OK
) {

437  
NGX_ERROR
;

440 
i
++;

445 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

447 
i
 < 
sc
->
sour˚
->
Àn
) {

449 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

453 i‡(
sc
->
sour˚
->
d©a
[
i
] == '?') {

455 
sc
->
¨gs
 = 1;

457 i‡(
sc
->
compûe_¨gs
) {

462 
i
++;

463 
«me
.
Àn
++;

466 
sc
->
size
 +
«me
.
Àn
;

468 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
«me
, (
i
 =sc->
sour˚
->
Àn
))

469 !
NGX_OK
)

471  
NGX_ERROR
;

475  
	`ngx_hâp_s¸ùt_d⁄e
(
sc
);

477 
övÆid_v¨übÀ
:

479 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0, "invalid variableÇame");

481  
NGX_ERROR
;

482 
	}
}

485 
u_ch¨
 *

486 
	$ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

487 *
code_Àngths
, 
size_t
 
Àn
, *
code_vÆues
)

489 
ngx_uöt_t
 
i
;

490 
ngx_hâp_s¸ùt_code_±
 
code
;

491 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

492 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

493 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

495 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

497 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

498 i‡(
r
->
v¨übÀs
[
i
].
no_ˇchóbÀ
) {

499 
r
->
v¨übÀs
[
i
].
vÆid
 = 0;

500 
r
->
v¨übÀs
[
i
].
nŸ_found
 = 0;

504 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

506 
e
.
ù
 = 
code_Àngths
;

507 
e
.
ªque°
 = 
r
;

508 
e
.
Êushed
 = 1;

510 *(
uöçå_t
 *Ë
e
.
ù
) {

511 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

512 
Àn
 +
	`lcode
(&
e
);

516 
vÆue
->
Àn
 =Üen;

517 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

518 i‡(
vÆue
->
d©a
 =
NULL
) {

519  
NULL
;

522 
e
.
ù
 = 
code_vÆues
;

523 
e
.
pos
 = 
vÆue
->
d©a
;

525 *(
uöçå_t
 *Ë
e
.
ù
) {

526 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

527 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

530  
e
.
pos
;

531 
	}
}

535 
	$ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

536 
ngx_¨øy_t
 *
ödi˚s
)

538 
ngx_uöt_t
 
n
, *
ödex
;

540 i‡(
ödi˚s
) {

541 
ödex
 = 
ödi˚s
->
ñts
;

542 
n
 = 0;Ç < 
ödi˚s
->
√…s
;Ç++) {

543 i‡(
r
->
v¨übÀs
[
ödex
[
n
]].
no_ˇchóbÀ
) {

544 
r
->
v¨übÀs
[
ödex
[
n
]].
vÆid
 = 0;

545 
r
->
v¨übÀs
[
ödex
[
n
]].
nŸ_found
 = 0;

549 
	}
}

552 
ngx_öt_t


553 
	$ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

555 
ngx_uöt_t
 
n
;

557 i‡(
sc
->
Êushes
 && *sc->Êushe†=
NULL
) {

558 
n
 = 
sc
->
v¨übÀs
 ? sc->variables : 1;

559 *
sc
->
Êushes
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
));

560 i‡(*
sc
->
Êushes
 =
NULL
) {

561  
NGX_ERROR
;

565 i‡(*
sc
->
Àngths
 =
NULL
) {

566 
n
 = 
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

567 + (
ngx_hâp_s¸ùt_v¨_code_t
))

568 + (
uöçå_t
);

570 *
sc
->
Àngths
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

571 i‡(*
sc
->
Àngths
 =
NULL
) {

572  
NGX_ERROR
;

576 i‡(*
sc
->
vÆues
 =
NULL
) {

577 
n
 = (
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

578 + (
ngx_hâp_s¸ùt_v¨_code_t
))

579 + (
uöçå_t
)

580 + 
sc
->
sour˚
->
Àn


581 + (
uöçå_t
) - 1)

582 & ~((
uöçå_t
) - 1);

584 *
sc
->
vÆues
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

585 i‡(*
sc
->
vÆues
 =
NULL
) {

586  
NGX_ERROR
;

590 
sc
->
v¨übÀs
 = 0;

592  
NGX_OK
;

593 
	}
}

596 
ngx_öt_t


597 
	$ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

599 
ngx_°r_t
 
zîo
;

600 
uöçå_t
 *
code
;

602 i‡(
sc
->
zîo
) {

604 
zîo
.
Àn
 = 1;

605 
zîo
.
d©a
 = (
u_ch¨
 *) "\0";

607 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
zîo
, 0Ë!
NGX_OK
) {

608  
NGX_ERROR
;

612 i‡(
sc
->
c⁄f_¥efix
 || sc->
roŸ_¥efix
) {

613 i‡(
	`ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
sc
Ë!
NGX_OK
) {

614  
NGX_ERROR
;

618 i‡(
sc
->
com∂ëe_Àngths
) {

619 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

620 i‡(
code
 =
NULL
) {

621  
NGX_ERROR
;

624 *
code
 = (
uöçå_t
Ë
NULL
;

627 i‡(
sc
->
com∂ëe_vÆues
) {

628 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
),

629 &
sc
->
maö
);

630 i‡(
code
 =
NULL
) {

631  
NGX_ERROR
;

634 *
code
 = (
uöçå_t
Ë
NULL
;

637  
NGX_OK
;

638 
	}
}

642 
	$ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
, 
size_t
 
size
)

644 i‡(*
codes
 =
NULL
) {

645 *
codes
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 256, 1);

646 i‡(*
codes
 =
NULL
) {

647  
NULL
;

651  
	`ngx_¨øy_push_n
(*
codes
, 
size
);

652 
	}
}

656 
	$ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
)

658 
u_ch¨
 *
ñts
, **
p
;

659 *
√w
;

661 
ñts
 = 
codes
->elts;

663 
√w
 = 
	`ngx_¨øy_push_n
(
codes
, 
size
);

664 i‡(
√w
 =
NULL
) {

665  
NULL
;

668 i‡(
code
) {

669 i‡(
ñts
 !
codes
->elts) {

670 
p
 = 
code
;

671 *
p
 +(
u_ch¨
 *Ë
codes
->
ñts
 -Élts;

675  
√w
;

676 
	}
}

679 
ngx_öt_t


680 
	$ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
vÆue
,

681 
ngx_uöt_t
 
œ°
)

683 
u_ch¨
 *
p
;

684 
size_t
 
size
, 
Àn
, 
zîo
;

685 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

687 
zîo
 = (
sc
->zîÿ&& 
œ°
);

688 
Àn
 = 
vÆue
->À¿+ 
zîo
;

690 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

691 (
ngx_hâp_s¸ùt_c›y_code_t
), 
NULL
);

692 i‡(
code
 =
NULL
) {

693  
NGX_ERROR
;

696 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

697 
code
->
Àn
 =Üen;

699 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
Ë+ 
Àn
 + (
uöçå_t
) - 1)

700 & ~((
uöçå_t
) - 1);

702 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, 
size
, &sc->
maö
);

703 i‡(
code
 =
NULL
) {

704  
NGX_ERROR
;

707 
code
->codê
ngx_hâp_s¸ùt_c›y_code
;

708 
code
->
Àn
 =Üen;

710 
p
 = 
	`ngx_˝ymem
((
u_ch¨
 *Ë
code
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

711 
vÆue
->
d©a
, vÆue->
Àn
);

713 i‡(
zîo
) {

714 *
p
 = '\0';

715 
sc
->
zîo
 = 0;

718  
NGX_OK
;

719 
	}
}

722 
size_t


723 
	$ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

725 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

727 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

729 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
);

731  
code
->
Àn
;

732 
	}
}

736 
	$ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

738 
u_ch¨
 *
p
;

739 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

741 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

743 
p
 = 
e
->
pos
;

745 i‡(!
e
->
skù
) {

746 
e
->
pos
 = 
	`ngx_c›y
(
p
,É->
ù
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

747 
code
->
Àn
);

750 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
)

751 + ((
code
->
Àn
 + (
uöçå_t
) - 1) & ~((uintptr_t) - 1));

753 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

754 "hâ∞s¸ùàc›y: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

755 
	}
}

758 
ngx_öt_t


759 
	$ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
«me
)

761 
ngx_öt_t
 
ödex
, *
p
;

762 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

764 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
sc
->
cf
, 
«me
);

766 i‡(
ödex
 =
NGX_ERROR
) {

767  
NGX_ERROR
;

770 i‡(
sc
->
Êushes
) {

771 
p
 = 
	`ngx_¨øy_push
(*
sc
->
Êushes
);

772 i‡(
p
 =
NULL
) {

773  
NGX_ERROR
;

776 *
p
 = 
ödex
;

779 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

780 (
ngx_hâp_s¸ùt_v¨_code_t
), 
NULL
);

781 i‡(
code
 =
NULL
) {

782  
NGX_ERROR
;

785 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_v¨_Àn_code
;

786 
code
->
ödex
 = (
uöçå_t
) index;

788 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

789 (
ngx_hâp_s¸ùt_v¨_code_t
),

790 &
sc
->
maö
);

791 i‡(
code
 =
NULL
) {

792  
NGX_ERROR
;

795 
code
->codê
ngx_hâp_s¸ùt_c›y_v¨_code
;

796 
code
->
ödex
 = (
uöçå_t
) index;

798  
NGX_OK
;

799 
	}
}

802 
size_t


803 
	$ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

805 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

806 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

808 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

810 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

812 i‡(
e
->
Êushed
) {

813 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

816 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

819 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

820  
vÆue
->
Àn
;

824 
	}
}

828 
	$ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

830 
u_ch¨
 *
p
;

831 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

832 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

834 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

836 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

838 i‡(!
e
->
skù
) {

840 i‡(
e
->
Êushed
) {

841 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

844 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

847 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

848 
p
 = 
e
->
pos
;

849 
e
->
pos
 = 
	`ngx_c›y
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

851 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
,

852 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

853 "hâ∞s¸ùàv¨: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

856 
	}
}

859 
ngx_öt_t


860 
	$ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

862 
uöçå_t
 *
code
;

864 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

865 i‡(
code
 =
NULL
) {

866  
NGX_ERROR
;

869 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_m¨k_¨gs_code
;

871 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
), &sc->
maö
);

872 i‡(
code
 =
NULL
) {

873  
NGX_ERROR
;

876 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_°¨t_¨gs_code
;

878  
NGX_OK
;

879 
	}
}

882 
size_t


883 
	$ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

885 
e
->
is_¨gs
 = 1;

886 
e
->
ù
 +(
uöçå_t
);

889 
	}
}

893 
	$ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

895 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

898 
e
->
is_¨gs
 = 1;

899 
e
->
¨gs
 =É->
pos
;

900 
e
->
ù
 +(
uöçå_t
);

901 
	}
}

904 #i‡(
NGX_PCRE
)

907 
	$ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

909 
size_t
 
Àn
;

910 
ngx_öt_t
 
rc
;

911 
ngx_uöt_t
 
n
;

912 
ngx_hâp_ªque°_t
 *
r
;

913 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

914 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

915 
ngx_hâp_s¸ùt_ªgex_code_t
 *
code
;

917 
code
 = (
ngx_hâp_s¸ùt_ªgex_code_t
 *Ë
e
->
ù
;

919 
r
 = 
e
->
ªque°
;

921 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

922 "hâ∞s¸ùàªgex: \"%V\"", &
code
->
«me
);

924 i‡(
code
->
uri
) {

925 
e
->
löe
 = 
r
->
uri
;

927 
e
->
•
--;

928 
e
->
löe
.
Àn
 =É->
•
->len;

929 
e
->
löe
.
d©a
 =É->
•
->data;

932 
rc
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
code
->
ªgex
, &
e
->
löe
);

934 i‡(
rc
 =
NGX_DECLINED
) {

935 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

936 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

938 &
code
->
«me
, &
e
->
löe
);

941 
r
->
nˇ±uªs
 = 0;

943 i‡(
code
->
ã°
) {

944 i‡(
code
->
√g©ive_ã°
) {

945 
e
->
•
->
Àn
 = 1;

946 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

949 
e
->
•
->
Àn
 = 0;

950 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

953 
e
->
•
++;

955 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

959 
e
->
ù
 +
code
->
√xt
;

963 i‡(
rc
 =
NGX_ERROR
) {

964 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

965 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

969 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

970 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

971 "\"%V\" m©che†\"%V\"", &
code
->
«me
, &
e
->
löe
);

974 i‡(
code
->
ã°
) {

975 i‡(
code
->
√g©ive_ã°
) {

976 
e
->
•
->
Àn
 = 0;

977 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

980 
e
->
•
->
Àn
 = 1;

981 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

984 
e
->
•
++;

986 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

990 i‡(
code
->
°©us
) {

991 
e
->
°©us
 = 
code
->status;

993 i‡(!
code
->
ªdúe˘
) {

994 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

999 i‡(
code
->
uri
) {

1000 
r
->
öã∫Æ
 = 1;

1001 
r
->
vÆid_u≈¨£d_uri
 = 0;

1003 i‡(
code
->
bªak_cy˛e
) {

1004 
r
->
vÆid_loˇti⁄
 = 0;

1005 
r
->
uri_ch™ged
 = 0;

1008 
r
->
uri_ch™ged
 = 1;

1012 i‡(
code
->
Àngths
 =
NULL
) {

1013 
e
->
buf
.
Àn
 = 
code
->
size
;

1015 i‡(
code
->
uri
) {

1016 i‡(
r
->
nˇ±uªs
 && (r->
quŸed_uri
 ||Ñ->
∂us_ö_uri
)) {

1017 
e
->
buf
.
Àn
 +2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.len,

1018 
NGX_ESCAPE_ARGS
);

1022 
n
 = 2;Ç < 
r
->
nˇ±uªs
;Ç += 2) {

1023 
e
->
buf
.
Àn
 +
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

1027 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1029 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1030 
À
.
löe
 = 
e
->line;

1031 
À
.
ªque°
 = 
r
;

1032 
À
.
quŸe
 = 
code
->
ªdúe˘
;

1034 
Àn
 = 0;

1036 *(
uöçå_t
 *Ë
À
.
ù
) {

1037 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1038 
Àn
 +
	`lcode
(&
À
);

1041 
e
->
buf
.
Àn
 =Üen;

1044 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1045 
e
->
buf
.
Àn
 +
r
->
¨gs
.len + 1;

1048 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,É->buf.
Àn
);

1049 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1050 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1051 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1055 
e
->
quŸe
 = 
code
->
ªdúe˘
;

1057 
e
->
pos
 =É->
buf
.
d©a
;

1059 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

1060 
	}
}

1064 
	$ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1066 
u_ch¨
 *
d°
, *
§c
;

1067 
ngx_hâp_ªque°_t
 *
r
;

1068 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
code
;

1070 
code
 = (
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *Ë
e
->
ù
;

1072 
r
 = 
e
->
ªque°
;

1074 
e
->
quŸe
 = 0;

1076 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1079 i‡(
code
->
ªdúe˘
) {

1081 
d°
 = 
e
->
buf
.
d©a
;

1082 
§c
 = 
e
->
buf
.
d©a
;

1084 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
e
->
pos
 -É->
buf
.
d©a
,

1085 
NGX_UNESCAPE_REDIRECT
);

1087 i‡(
§c
 < 
e
->
pos
) {

1088 
d°
 = 
	`ngx_movemem
(d°, 
§c
, 
e
->
pos
 - src);

1091 
e
->
pos
 = 
d°
;

1093 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1094 *
e
->
pos
++ = (
u_ch¨
Ë(
code
->
¨gs
 ? '&' : '?');

1095 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1098 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1100 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1101 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1102 "ªwrôã¿ªdúe˘: \"%V\"", &
e
->
buf
);

1105 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1107 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1108 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1109 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1110 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1114 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1115 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1116 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
e
->
buf
;

1118 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1122 i‡(
e
->
¨gs
) {

1123 
e
->
buf
.
Àn
 =É->
¨gs
 -É->buf.
d©a
;

1125 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1126 *
e
->
pos
++ = '&';

1127 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1130 
r
->
¨gs
.
Àn
 = 
e
->
pos
 -É->args;

1131 
r
->
¨gs
.
d©a
 = 
e
->args;

1133 
e
->
¨gs
 = 
NULL
;

1136 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1138 i‡(!
code
->
add_¨gs
) {

1139 
r
->
¨gs
.
Àn
 = 0;

1143 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1144 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1146 &
e
->
buf
, &
r
->
¨gs
);

1149 i‡(
code
->
uri
) {

1150 
r
->
uri
 = 
e
->
buf
;

1152 i‡(
r
->
uri
.
Àn
 == 0) {

1153 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1155 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1156 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1160 
	`ngx_hâp_£t_exãn
(
r
);

1163 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1164 
	}
}

1167 
ngx_öt_t


1168 
	$ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_uöt_t
 
n
)

1170 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1172 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1173 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1174 
NULL
);

1175 i‡(
code
 =
NULL
) {

1176  
NGX_ERROR
;

1179 
code
->codê(
ngx_hâp_s¸ùt_code_±
)

1180 
ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
;

1181 
code
->
n
 = 2 *Ç;

1184 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1185 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1186 &
sc
->
maö
);

1187 i‡(
code
 =
NULL
) {

1188  
NGX_ERROR
;

1191 
code
->codê
ngx_hâp_s¸ùt_c›y_ˇ±uª_code
;

1192 
code
->
n
 = 2 *Ç;

1194 i‡(
sc
->
nˇ±uªs
 < 
n
) {

1195 
sc
->
nˇ±uªs
 = 
n
;

1198  
NGX_OK
;

1199 
	}
}

1202 
size_t


1203 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1205 *
ˇp
;

1206 
u_ch¨
 *
p
;

1207 
ngx_uöt_t
 
n
;

1208 
ngx_hâp_ªque°_t
 *
r
;

1209 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1211 
r
 = 
e
->
ªque°
;

1213 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1215 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1217 
n
 = 
code
->n;

1219 i‡(
n
 < 
r
->
nˇ±uªs
) {

1221 
ˇp
 = 
r
->
ˇ±uªs
;

1223 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1224 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1226 
p
 = 
r
->
ˇ±uªs_d©a
;

1228  
ˇp
[
n
 + 1] - cap[n]

1229 + 2 * 
	`ngx_esˇ≥_uri
(
NULL
, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n],

1230 
NGX_ESCAPE_ARGS
);

1232  
ˇp
[
n
 + 1] - cap[n];

1237 
	}
}

1241 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1243 *
ˇp
;

1244 
u_ch¨
 *
p
, *
pos
;

1245 
ngx_uöt_t
 
n
;

1246 
ngx_hâp_ªque°_t
 *
r
;

1247 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1249 
r
 = 
e
->
ªque°
;

1251 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1253 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1255 
n
 = 
code
->n;

1257 
pos
 = 
e
->pos;

1259 i‡(
n
 < 
r
->
nˇ±uªs
) {

1261 
ˇp
 = 
r
->
ˇ±uªs
;

1262 
p
 = 
r
->
ˇ±uªs_d©a
;

1264 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1265 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1267 
e
->
pos
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’os, &
p
[
ˇp
[
n
]],

1268 
ˇp
[
n
 + 1] - cap[n],

1269 
NGX_ESCAPE_ARGS
);

1271 
e
->
pos
 = 
	`ngx_c›y
’os, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n]);

1275 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1276 "hâ∞s¸ùàˇ±uª: \"%*s\"", 
e
->
pos
 -Öos,Öos);

1277 
	}
}

1282 
ngx_öt_t


1283 
	$ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

1285 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1287 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1288 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1289 
NULL
);

1290 i‡(
code
 =
NULL
) {

1291  
NGX_ERROR
;

1294 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
;

1295 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1297 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1298 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1299 &
sc
->
maö
);

1300 i‡(
code
 =
NULL
) {

1301  
NGX_ERROR
;

1304 
code
->codê
ngx_hâp_s¸ùt_fuŒ_«me_code
;

1305 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1307  
NGX_OK
;

1308 
	}
}

1311 
size_t


1312 
	$ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1314 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1316 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1318 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1320  
code
->
c⁄f_¥efix
 ? 
ngx_cy˛e
->c⁄f_¥efix.
Àn
:

1321 
ngx_cy˛e
->
¥efix
.
Àn
;

1322 
	}
}

1326 
	$ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1328 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1330 
ngx_°r_t
 
vÆue
, *
¥efix
;

1332 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1334 
vÆue
.
d©a
 = 
e
->
buf
.data;

1335 
vÆue
.
Àn
 = 
e
->
pos
 -É->
buf
.
d©a
;

1337 
¥efix
 = 
code
->
c⁄f_¥efix
 ? (
ngx_°r_t
 *Ë&
ngx_cy˛e
->conf_prefix:

1338 (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
;

1340 i‡(
	`ngx_gë_fuŒ_«me
(
e
->
ªque°
->
poﬁ
, 
¥efix
, &
vÆue
Ë!
NGX_OK
) {

1341 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1342 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1346 
e
->
buf
 = 
vÆue
;

1348 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1349 "hâ∞s¸ùàfuŒ«me: \"%V\"", &
vÆue
);

1351 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1352 
	}
}

1356 
	$ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1358 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
code
;

1360 
code
 = (
ngx_hâp_s¸ùt_ªtu∫_code_t
 *Ë
e
->
ù
;

1362 i‡(
code
->
°©us
 < 
NGX_HTTP_BAD_REQUEST


1363 || 
code
->
ãxt
.
vÆue
.
Àn


1364 || 
code
->
ãxt
.
Àngths
)

1366 
e
->
°©us
 = 
	`ngx_hâp_£nd_ª•⁄£
”->
ªque°
, 
code
->°©us, 
NULL
,

1367 &
code
->
ãxt
);

1369 
e
->
°©us
 = 
code
->status;

1372 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1373 
	}
}

1377 
	$ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1379 
e
->
ªque°
->
uri_ch™ged
 = 0;

1381 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1382 
	}
}

1386 
	$ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1388 
ngx_hâp_s¸ùt_if_code_t
 *
code
;

1390 
code
 = (
ngx_hâp_s¸ùt_if_code_t
 *Ë
e
->
ù
;

1392 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1395 
e
->
•
--;

1397 i‡(
e
->
•
->
Àn
 && (e->•->À¿!1 ||É->•->
d©a
[0] != '0')) {

1398 i‡(
code
->
loc_c⁄f
) {

1399 
e
->
ªque°
->
loc_c⁄f
 = 
code
->loc_conf;

1400 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
e
->
ªque°
);

1403 
e
->
ù
 +(
ngx_hâp_s¸ùt_if_code_t
);

1407 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1410 
e
->
ù
 +
code
->
√xt
;

1411 
	}
}

1415 
	$ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1417 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1419 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1422 
e
->
•
--;

1423 
vÆ
 = 
e
->
•
;

1424 
ªs
 = 
e
->
•
 - 1;

1426 
e
->
ù
 +(
uöçå_t
);

1428 i‡(
vÆ
->
Àn
 =
ªs
->len

1429 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1431 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1435 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1438 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1439 
	}
}

1443 
	$ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1445 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1447 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1450 
e
->
•
--;

1451 
vÆ
 = 
e
->
•
;

1452 
ªs
 = 
e
->
•
 - 1;

1454 
e
->
ù
 +(
uöçå_t
);

1456 i‡(
vÆ
->
Àn
 =
ªs
->len

1457 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1459 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1462 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1466 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1467 
	}
}

1471 
	$ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1473 
ngx_°r_t
 
∑th
;

1474 
ngx_hâp_ªque°_t
 *
r
;

1475 
ngx_›í_fûe_öfo_t
 
of
;

1476 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1477 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1478 
ngx_hâp_s¸ùt_fûe_code_t
 *
code
;

1480 
vÆue
 = 
e
->
•
 - 1;

1482 
code
 = (
ngx_hâp_s¸ùt_fûe_code_t
 *Ë
e
->
ù
;

1483 
e
->
ù
 +(
ngx_hâp_s¸ùt_fûe_code_t
);

1485 
∑th
.
Àn
 = 
vÆue
->len - 1;

1486 
∑th
.
d©a
 = 
vÆue
->data;

1488 
r
 = 
e
->
ªque°
;

1490 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1491 "hâ∞s¸ùàfûê› %∞\"%V\"", 
code
->
›
, &
∑th
);

1493 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1495 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1497 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1498 
of
.
dúe˘io
 = 
˛cf
->directio;

1499 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1500 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1501 
of
.
ã°_⁄ly
 = 1;

1502 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1503 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1505 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

1506 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1507 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1511 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1512 !
NGX_OK
)

1514 i‡(
of
.
îr
 !
NGX_ENOENT


1515 && 
of
.
îr
 !
NGX_ENOTDIR


1516 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1518 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1519 "%†\"%s\" faûed", 
of
.
Áûed
, 
vÆue
->
d©a
);

1522 
code
->
›
) {

1524 
ngx_hâp_s¸ùt_fûe_∂aö
:

1525 
ngx_hâp_s¸ùt_fûe_dú
:

1526 
ngx_hâp_s¸ùt_fûe_exi°s
:

1527 
ngx_hâp_s¸ùt_fûe_exec
:

1528 
Ál£_vÆue
;

1530 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1531 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1532 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1533 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1534 
åue_vÆue
;

1537 
Ál£_vÆue
;

1540 
code
->
›
) {

1541 
ngx_hâp_s¸ùt_fûe_∂aö
:

1542 i‡(
of
.
is_fûe
) {

1543 
åue_vÆue
;

1545 
Ál£_vÆue
;

1547 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1548 i‡(
of
.
is_fûe
) {

1549 
Ál£_vÆue
;

1551 
åue_vÆue
;

1553 
ngx_hâp_s¸ùt_fûe_dú
:

1554 i‡(
of
.
is_dú
) {

1555 
åue_vÆue
;

1557 
Ál£_vÆue
;

1559 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1560 i‡(
of
.
is_dú
) {

1561 
Ál£_vÆue
;

1563 
åue_vÆue
;

1565 
ngx_hâp_s¸ùt_fûe_exi°s
:

1566 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1567 
åue_vÆue
;

1569 
Ál£_vÆue
;

1571 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1572 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1573 
Ál£_vÆue
;

1575 
åue_vÆue
;

1577 
ngx_hâp_s¸ùt_fûe_exec
:

1578 i‡(
of
.
is_exec
) {

1579 
åue_vÆue
;

1581 
Ál£_vÆue
;

1583 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1584 i‡(
of
.
is_exec
) {

1585 
Ál£_vÆue
;

1587 
åue_vÆue
;

1590 
Ál£_vÆue
:

1592 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1595 *
vÆue
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1598 
åue_vÆue
:

1600 *
vÆue
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1602 
	}
}

1606 
	$ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1608 
size_t
 
Àn
;

1609 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

1610 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1611 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
code
;

1613 
code
 = (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *Ë
e
->
ù
;

1615 
e
->
ù
 +(
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
);

1617 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1620 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1622 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1623 
À
.
löe
 = 
e
->line;

1624 
À
.
ªque°
 = 
e
->request;

1625 
À
.
quŸe
 = 
e
->quote;

1627 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1628 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1631 
e
->
buf
.
Àn
 =Üen;

1632 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
”->
ªque°
->
poﬁ
, 
Àn
);

1633 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1634 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1635 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1639 
e
->
pos
 =É->
buf
.
d©a
;

1641 
e
->
•
->
Àn
 =É->
buf
.len;

1642 
e
->
•
->
d©a
 =É->
buf
.data;

1643 
e
->
•
++;

1644 
	}
}

1648 
	$ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1650 
ngx_hâp_s¸ùt_vÆue_code_t
 *
code
;

1652 
code
 = (
ngx_hâp_s¸ùt_vÆue_code_t
 *Ë
e
->
ù
;

1654 
e
->
ù
 +(
ngx_hâp_s¸ùt_vÆue_code_t
);

1656 
e
->
•
->
Àn
 = 
code
->
ãxt_Àn
;

1657 
e
->
•
->
d©a
 = (
u_ch¨
 *Ë
code
->
ãxt_d©a
;

1659 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1660 "hâ∞s¸ùàvÆue: \"%v\"", 
e
->
•
);

1662 
e
->
•
++;

1663 
	}
}

1667 
	$ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1669 
ngx_hâp_ªque°_t
 *
r
;

1670 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1672 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1674 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1676 
r
 = 
e
->
ªque°
;

1678 
e
->
•
--;

1680 
r
->
v¨übÀs
[
code
->
ödex
].
Àn
 = 
e
->
•
->len;

1681 
r
->
v¨übÀs
[
code
->
ödex
].
vÆid
 = 1;

1682 
r
->
v¨übÀs
[
code
->
ödex
].
no_ˇchóbÀ
 = 0;

1683 
r
->
v¨übÀs
[
code
->
ödex
].
nŸ_found
 = 0;

1684 
r
->
v¨übÀs
[
code
->
ödex
].
d©a
 = 
e
->
•
->data;

1686 #i‡(
NGX_DEBUG
)

1688 
ngx_hâp_v¨übÀ_t
 *
v
;

1689 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1691 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1693 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1695 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1696 "hâ∞s¸ùà£à$%V", &
v
[
code
->
ödex
].
«me
);

1699 
	}
}

1703 
	$ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1705 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
code
;

1707 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1710 
code
 = (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *Ë
e
->
ù
;

1712 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
);

1714 
e
->
•
--;

1716 
code
->
	`h™dÀr
(
e
->
ªque°
,É->
•
, code->
d©a
);

1717 
	}
}

1721 
	$ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1723 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1724 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1726 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1729 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1731 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1733 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

1735 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

1736 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1737 "hâ∞s¸ùàv¨: \"%v\"", 
vÆue
);

1739 *
e
->
•
 = *
vÆue
;

1740 
e
->
•
++;

1745 *
e
->
•
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1746 
e
->
•
++;

1747 
	}
}

1751 
	$ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1753 
e
->
ù
 +(
uöçå_t
);

1754 
	}
}

	@src/http/ngx_http_script.h

8 #i‚de‡
_NGX_HTTP_SCRIPT_H_INCLUDED_


9 
	#_NGX_HTTP_SCRIPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
u_ch¨
 *
	mù
;

19 
u_ch¨
 *
	mpos
;

20 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m•
;

22 
ngx_°r_t
 
	mbuf
;

23 
ngx_°r_t
 
	mlöe
;

26 
u_ch¨
 *
	m¨gs
;

28 
	mÊushed
:1;

29 
	mskù
:1;

30 
	mquŸe
:1;

31 
	mis_¨gs
:1;

32 
	mlog
:1;

34 
ngx_öt_t
 
	m°©us
;

35 
ngx_hâp_ªque°_t
 *
	mªque°
;

36 } 
	tngx_hâp_s¸ùt_ígöe_t
;

40 
ngx_c⁄f_t
 *
	mcf
;

41 
ngx_°r_t
 *
	msour˚
;

43 
ngx_¨øy_t
 **
	mÊushes
;

44 
ngx_¨øy_t
 **
	mÀngths
;

45 
ngx_¨øy_t
 **
	mvÆues
;

47 
ngx_uöt_t
 
	mv¨übÀs
;

48 
ngx_uöt_t
 
	mnˇ±uªs
;

49 
ngx_uöt_t
 
	mˇ±uªs_mask
;

50 
ngx_uöt_t
 
	msize
;

52 *
	mmaö
;

54 
	mcompûe_¨gs
:1;

55 
	mcom∂ëe_Àngths
:1;

56 
	mcom∂ëe_vÆues
:1;

57 
	mzîo
:1;

58 
	mc⁄f_¥efix
:1;

59 
	mroŸ_¥efix
:1;

61 
	mdup_ˇ±uª
:1;

62 
	m¨gs
:1;

63 } 
	tngx_hâp_s¸ùt_compûe_t
;

67 
ngx_°r_t
 
	mvÆue
;

68 
ngx_uöt_t
 *
	mÊushes
;

69 *
	mÀngths
;

70 *
	mvÆues
;

71 } 
	tngx_hâp_com∂ex_vÆue_t
;

75 
ngx_c⁄f_t
 *
	mcf
;

76 
ngx_°r_t
 *
	mvÆue
;

77 
ngx_hâp_com∂ex_vÆue_t
 *
	mcom∂ex_vÆue
;

79 
	mzîo
:1;

80 
	mc⁄f_¥efix
:1;

81 
	mroŸ_¥efix
:1;

82 } 
	tngx_hâp_compûe_com∂ex_vÆue_t
;

85 (*
	tngx_hâp_s¸ùt_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

86 
	$size_t
 (*
	tngx_hâp_s¸ùt_Àn_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

90 
ngx_hâp_s¸ùt_code_±
 
code
;

91 
uöçå_t
 
Àn
;

92 } 
	tngx_hâp_s¸ùt_c›y_code_t
;

96 
ngx_hâp_s¸ùt_code_±
 
code
;

97 
uöçå_t
 
ödex
;

98 } 
	tngx_hâp_s¸ùt_v¨_code_t
;

102 
ngx_hâp_s¸ùt_code_±
 
code
;

103 
ngx_hâp_£t_v¨übÀ_±
 
h™dÀr
;

104 
uöçå_t
 
d©a
;

105 } 
	tngx_hâp_s¸ùt_v¨_h™dÀr_code_t
;

109 
ngx_hâp_s¸ùt_code_±
 
code
;

110 
uöçå_t
 
n
;

111 } 
	tngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
;

114 #i‡(
NGX_PCRE
)

117 
ngx_hâp_s¸ùt_code_±
 
code
;

118 
ngx_hâp_ªgex_t
 *
ªgex
;

119 
ngx_¨øy_t
 *
Àngths
;

120 
uöçå_t
 
size
;

121 
uöçå_t
 
°©us
;

122 
uöçå_t
 
√xt
;

124 
uöçå_t
 
ã°
:1;

125 
uöçå_t
 
√g©ive_ã°
:1;

126 
uöçå_t
 
uri
:1;

127 
uöçå_t
 
¨gs
:1;

130 
uöçå_t
 
add_¨gs
:1;

132 
uöçå_t
 
ªdúe˘
:1;

133 
uöçå_t
 
bªak_cy˛e
:1;

135 
ngx_°r_t
 
«me
;

136 } 
	tngx_hâp_s¸ùt_ªgex_code_t
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

142 
uöçå_t
 
uri
:1;

143 
uöçå_t
 
¨gs
:1;

146 
uöçå_t
 
add_¨gs
:1;

148 
uöçå_t
 
ªdúe˘
:1;

149 } 
	tngx_hâp_s¸ùt_ªgex_íd_code_t
;

155 
ngx_hâp_s¸ùt_code_±
 
code
;

156 
uöçå_t
 
c⁄f_¥efix
;

157 } 
	tngx_hâp_s¸ùt_fuŒ_«me_code_t
;

161 
ngx_hâp_s¸ùt_code_±
 
code
;

162 
uöçå_t
 
°©us
;

163 
ngx_hâp_com∂ex_vÆue_t
 
ãxt
;

164 } 
	tngx_hâp_s¸ùt_ªtu∫_code_t
;

168 
ngx_hâp_s¸ùt_fûe_∂aö
 = 0,

169 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
,

170 
ngx_hâp_s¸ùt_fûe_dú
,

171 
ngx_hâp_s¸ùt_fûe_nŸ_dú
,

172 
ngx_hâp_s¸ùt_fûe_exi°s
,

173 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
,

174 
ngx_hâp_s¸ùt_fûe_exec
,

175 
ngx_hâp_s¸ùt_fûe_nŸ_exec


176 } 
	tngx_hâp_s¸ùt_fûe_›_e
;

180 
ngx_hâp_s¸ùt_code_±
 
code
;

181 
uöçå_t
 
›
;

182 } 
	tngx_hâp_s¸ùt_fûe_code_t
;

186 
ngx_hâp_s¸ùt_code_±
 
code
;

187 
uöçå_t
 
√xt
;

188 **
loc_c⁄f
;

189 } 
	tngx_hâp_s¸ùt_if_code_t
;

193 
ngx_hâp_s¸ùt_code_±
 
code
;

194 
ngx_¨øy_t
 *
Àngths
;

195 } 
	tngx_hâp_s¸ùt_com∂ex_vÆue_code_t
;

199 
ngx_hâp_s¸ùt_code_±
 
code
;

200 
uöçå_t
 
vÆue
;

201 
uöçå_t
 
ãxt_Àn
;

202 
uöçå_t
 
ãxt_d©a
;

203 } 
	tngx_hâp_s¸ùt_vÆue_code_t
;

206 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

207 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
);

208 
ngx_öt_t
 
	`ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

209 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
, 
ngx_°r_t
 *
vÆue
);

210 
ngx_öt_t
 
	`ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
);

211 *
	`ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

212 *
c⁄f
);

215 
ngx_öt_t
 
	`ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
,

216 
ngx_¨øy_t
 *
¥ediˇãs
);

217 *
	`ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

218 *
c⁄f
);

220 
ngx_uöt_t
 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
);

221 
ngx_öt_t
 
	`ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

222 
u_ch¨
 *
	`ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

223 *
code_Àngths
, 
size_t
 
ª£rved
, *
code_vÆues
);

224 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

225 
ngx_¨øy_t
 *
ödi˚s
);

227 *
	`ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
,

228 
size_t
 
size
);

229 *
	`ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
);

231 
size_t
 
	`ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

232 
	`ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

233 
size_t
 
	`ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

234 
	`ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

235 
size_t
 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

236 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

237 
size_t
 
	`ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

238 
	`ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

239 #i‡(
NGX_PCRE
)

240 
	`ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

241 
	`ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

243 
	`ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

244 
	`ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

245 
	`ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

246 
	`ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

247 
	`ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

248 
	`ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

249 
	`ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

250 
	`ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

251 
	`ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

252 
	`ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

253 
	`ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

254 
	`ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

	@src/http/ngx_http_spdy.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_•dy_moduÀ.h
>

13 
	~<zlib.h
>

16 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

18 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

19 *(
uöt32_t
 *Ë
m
 =(
c3
 << 24 | 
c2
 << 16 | 
c1
 << 8 | 
c0
) \

20 && 
m
[4] =
c4


	)

24 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

25 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 && m[4] =
c4


	)

30 #i‡(
NGX_HAVE_NONALIGNED
)

32 
	#ngx_•dy_‰ame_∑r£_uöt16
(
p
Ë
	`¡ohs
(*(
uöt16_t
 *Ë’))

	)

33 
	#ngx_•dy_‰ame_∑r£_uöt32
(
p
Ë
	`¡ohl
(*(
uöt32_t
 *Ë’))

	)

37 
	#ngx_•dy_‰ame_∑r£_uöt16
(
p
Ë(’)[0] << 8 | (p)[1])

	)

38 
	#ngx_•dy_‰ame_∑r£_uöt32
(
p
) \

39 ((
p
)[0] << 24 | (p)[1] << 16 | (p)[2] << 8 | (p)[3])

	)

43 
	#ngx_•dy_‰ame_∑r£_sid
(
p
) \

44 (
	`ngx_•dy_‰ame_∑r£_uöt32
(
p
Ë& 0x7fffffff)

	)

45 
	#ngx_•dy_‰ame_∑r£_dñè
(
p
) \

46 (
	`ngx_•dy_‰ame_∑r£_uöt32
(
p
Ë& 0x7fffffff)

	)

49 
	#ngx_•dy_˘l_‰ame_check
(
h
) \

50 (((
h
Ë& 0xffff0000Ë=
	`ngx_•dy_˘l_‰ame_hód
(0))

	)

51 
	#ngx_•dy_d©a_‰ame_check
(
h
) \

52 (!((
h
Ë& (
uöt32_t
Ë
NGX_SPDY_CTL_BIT
 << 31))

	)

54 
	#ngx_•dy_˘l_‰ame_ty≥
(
h
Ë((hË& 0x0000ffff)

	)

55 
	#ngx_•dy_‰ame_Êags
(
p
Ë(’Ë>> 24)

	)

56 
	#ngx_•dy_‰ame_Àngth
(
p
Ë(’Ë& 0x00ffffff)

	)

57 
	#ngx_•dy_‰ame_id
(
p
Ë(’Ë& 0x00ffffff)

	)

60 
	#NGX_SPDY_SKIP_HEADERS_BUFFER_SIZE
 4096

	)

61 
	#NGX_SPDY_CTL_FRAME_BUFFER_SIZE
 16

	)

63 
	#NGX_SPDY_PROTOCOL_ERROR
 1

	)

64 
	#NGX_SPDY_INVALID_STREAM
 2

	)

65 
	#NGX_SPDY_REFUSED_STREAM
 3

	)

66 
	#NGX_SPDY_UNSUPPORTED_VERSION
 4

	)

67 
	#NGX_SPDY_CANCEL
 5

	)

68 
	#NGX_SPDY_INTERNAL_ERROR
 6

	)

69 
	#NGX_SPDY_FLOW_CONTROL_ERROR
 7

	)

70 
	#NGX_SPDY_STREAM_IN_USE
 8

	)

71 
	#NGX_SPDY_STREAM_ALREADY_CLOSED
 9

	)

73 
	#NGX_SPDY_FRAME_TOO_LARGE
 11

	)

75 
	#NGX_SPDY_SETTINGS_MAX_STREAMS
 4

	)

76 
	#NGX_SPDY_SETTINGS_INIT_WINDOW
 7

	)

78 
	#NGX_SPDY_SETTINGS_FLAG_PERSIST
 0x01

	)

79 
	#NGX_SPDY_SETTINGS_FLAG_PERSISTED
 0x02

	)

81 
	#NGX_SPDY_MAX_WINDOW
 
NGX_MAX_INT32_VALUE


	)

82 
	#NGX_SPDY_CONNECTION_WINDOW
 65536

	)

83 
	#NGX_SPDY_INIT_STREAM_WINDOW
 65536

	)

84 
	#NGX_SPDY_STREAM_WINDOW
 
NGX_SPDY_MAX_WINDOW


	)

87 
ngx_uöt_t
 
	mhash
;

88 
u_ch¨
 
	mÀn
;

89 
u_ch¨
 
	mhódî
[7];

90 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_ªque°_t
 *
	mr
);

91 } 
	tngx_hâp_•dy_ªque°_hódî_t
;

94 
ngx_hâp_•dy_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

95 
ngx_hâp_•dy_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

96 
ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

98 
u_ch¨
 *
ngx_hâp_•dy_¥oxy_¥Ÿocﬁ
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

99 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

100 
u_ch¨
 *
ngx_hâp_•dy_°©e_hód
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

101 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

102 
u_ch¨
 *
ngx_hâp_•dy_°©e_syn_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

103 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

104 
u_ch¨
 *
ngx_hâp_•dy_°©e_hódîs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

105 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

106 
u_ch¨
 *
ngx_hâp_•dy_°©e_hódîs_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

107 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

108 
u_ch¨
 *
ngx_hâp_•dy_°©e_hódîs_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

109 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

110 
u_ch¨
 *
ngx_hâp_•dy_°©e_wödow_upd©e
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

111 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

112 
u_ch¨
 *
ngx_hâp_•dy_°©e_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

113 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

114 
u_ch¨
 *
ngx_hâp_•dy_°©e_ªad_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

115 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

116 
u_ch¨
 *
ngx_hâp_•dy_°©e_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

117 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

118 
u_ch¨
 *
ngx_hâp_•dy_°©e_pög
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

119 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

120 
u_ch¨
 *
ngx_hâp_•dy_°©e_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

121 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

122 
u_ch¨
 *
ngx_hâp_•dy_°©e_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

123 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

124 
u_ch¨
 *
ngx_hâp_•dy_°©e_com∂ëe
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

125 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

126 
u_ch¨
 *
ngx_hâp_•dy_°©e_ßve
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

127 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_hâp_•dy_h™dÀr_±
 
h™dÀr
);

129 
u_ch¨
 *
ngx_hâp_•dy_°©e_öÊ©e_îr‹
(

130 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
rc
);

131 
u_ch¨
 *
ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(

132 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

133 
u_ch¨
 *
ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(

134 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

136 
ngx_öt_t
 
ngx_hâp_•dy_£nd_wödow_upd©e
(

137 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
,Çgx_uöt_à
dñè
);

138 
ngx_öt_t
 
ngx_hâp_•dy_£nd_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

139 
ngx_uöt_t
 
sid
,Çgx_uöt_à
°©us
,Çgx_uöt_à
¥i‹ôy
);

140 
ngx_öt_t
 
ngx_hâp_•dy_£nd_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

141 
ngx_öt_t
 
ngx_hâp_•dy_£âögs_‰ame_h™dÀr
(

142 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

143 
ngx_hâp_•dy_out_‰ame_t
 *
ngx_hâp_•dy_gë_˘l_‰ame
(

144 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
size_t
 
size
, 
ngx_uöt_t
 
¥i‹ôy
);

145 
ngx_öt_t
 
ngx_hâp_•dy_˘l_‰ame_h™dÀr
(

146 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

148 
ngx_hâp_•dy_°ªam_t
 *
ngx_hâp_•dy_¸óã_°ªam
(

149 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
id
,Çgx_uöt_à
¥i‹ôy
);

150 
ngx_hâp_•dy_°ªam_t
 *
ngx_hâp_•dy_gë_°ªam_by_id
(

151 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
);

152 
	#ngx_hâp_•dy_°ªams_ödex_size
(
sscf
Ë(sscf->
°ªams_ödex_mask
 + 1)

	)

153 
	#ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
sid
) \

154 ((
sid
 >> 1Ë& 
sscf
->
°ªams_ödex_mask
)

	)

156 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
);

157 
ngx_öt_t
 
ngx_hâp_•dy_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
);

159 
ngx_öt_t
 
ngx_hâp_•dy_h™dÀ_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

160 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_mëhod
(
ngx_hâp_ªque°_t
 *
r
);

161 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_scheme
(
ngx_hâp_ªque°_t
 *
r
);

162 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_ho°
(
ngx_hâp_ªque°_t
 *
r
);

163 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_∑th
(
ngx_hâp_ªque°_t
 *
r
);

164 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
);

166 
ngx_öt_t
 
ngx_hâp_•dy_c⁄°ru˘_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
);

167 
ngx_hâp_•dy_run_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

168 
ngx_öt_t
 
ngx_hâp_•dy_öô_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

170 
ngx_öt_t
 
ngx_hâp_•dy_ãrmö©e_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

171 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_uöt_t
 
°©us
);

173 
ngx_hâp_•dy_˛o£_°ªam_h™dÀr
(
ngx_evít_t
 *
ev
);

175 
ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄_h™dÀr
(
ngx_evít_t
 *
ªv
);

176 
ngx_hâp_•dy_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
);

177 
ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

178 
ngx_öt_t
 
rc
);

180 
ngx_öt_t
 
ngx_hâp_•dy_adju°_wödows
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

181 
ssize_t
 
dñè
);

183 
ngx_hâp_•dy_poﬁ_˛ónup
(*
d©a
);

185 *
ngx_hâp_•dy_zÆloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
);

186 
ngx_hâp_•dy_z‰ì
(*
›aque
, *
addªss
);

189 c⁄° 
u_ch¨
 
	gngx_hâp_•dy_di˘
[] = {

371 
ngx_hâp_•dy_ªque°_hódî_t
 
	gngx_hâp_•dy_ªque°_hódîs
[] = {

372 { 0, 6, "mëhod", 
ngx_hâp_•dy_∑r£_mëhod
 },

373 { 0, 6, "scheme", 
ngx_hâp_•dy_∑r£_scheme
 },

374 { 0, 4, "ho°", 
ngx_hâp_•dy_∑r£_ho°
 },

375 { 0, 4, "∑th", 
ngx_hâp_•dy_∑r£_∑th
 },

376 { 0, 7, "vîsi⁄", 
ngx_hâp_•dy_∑r£_vîsi⁄
 },

379 
	#NGX_SPDY_REQUEST_HEADERS
 \

380 ((
ngx_hâp_•dy_ªque°_hódîs
) \

381 / (
ngx_hâp_•dy_ªque°_hódî_t
))

	)

385 
	$ngx_hâp_•dy_öô
(
ngx_evít_t
 *
ªv
)

387 
rc
;

388 
ngx_c⁄√˘i⁄_t
 *
c
;

389 
ngx_poﬁ_˛ónup_t
 *
˛n
;

390 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

391 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

392 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
;

393 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

395 
c
 = 
ªv
->
d©a
;

396 
hc
 = 
c
->
d©a
;

398 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "init spdyÑequest");

400 
c
->
log
->
a˘i⁄
 = "processing SPDY";

402 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_•dy_moduÀ
);

404 i‡(
smcf
->
ªcv_buf„r
 =
NULL
) {

405 
smcf
->
ªcv_buf„r
 = 
	`ngx_∑Œoc
(
ngx_cy˛e
->
poﬁ
, smcf->
ªcv_buf„r_size
);

406 i‡(
smcf
->
ªcv_buf„r
 =
NULL
) {

407 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

412 
sc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_•dy_c⁄√˘i⁄_t
));

413 i‡(
sc
 =
NULL
) {

414 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

418 
sc
->
c⁄√˘i⁄
 = 
c
;

419 
sc
->
hâp_c⁄√˘i⁄
 = 
hc
;

421 
sc
->
£nd_wödow
 = 
NGX_SPDY_CONNECTION_WINDOW
;

422 
sc
->
ªcv_wödow
 = 
NGX_SPDY_CONNECTION_WINDOW
;

424 
sc
->
öô_wödow
 = 
NGX_SPDY_INIT_STREAM_WINDOW
;

426 
sc
->
h™dÀr
 = 
hc
->
¥oxy_¥Ÿocﬁ
 ? 
ngx_hâp_•dy_¥oxy_¥Ÿocﬁ


427 : 
ngx_hâp_•dy_°©e_hód
;

429 
sc
->
z°ªam_ö
.
zÆloc
 = 
ngx_hâp_•dy_zÆloc
;

430 
sc
->
z°ªam_ö
.
z‰ì
 = 
ngx_hâp_•dy_z‰ì
;

431 
sc
->
z°ªam_ö
.
›aque
 = sc;

433 
rc
 = 
	`öÊ©eInô
(&
sc
->
z°ªam_ö
);

434 i‡(
rc
 !
Z_OK
) {

435 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

436 "öÊ©eInô(ËÁûed: %d", 
rc
);

437 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

441 
sc
->
z°ªam_out
.
zÆloc
 = 
ngx_hâp_•dy_zÆloc
;

442 
sc
->
z°ªam_out
.
z‰ì
 = 
ngx_hâp_•dy_z‰ì
;

443 
sc
->
z°ªam_out
.
›aque
 = sc;

445 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_•dy_moduÀ
);

447 
rc
 = 
	`deÊ©eInô2
(&
sc
->
z°ªam_out
, (Ë
sscf
->
hódîs_comp
,

448 
Z_DEFLATED
, 11, 4, 
Z_DEFAULT_STRATEGY
);

450 i‡(
rc
 !
Z_OK
) {

451 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

452 "deÊ©eInô2(ËÁûed: %d", 
rc
);

453 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

457 
rc
 = 
	`deÊ©eSëDi˘i⁄¨y
(&
sc
->
z°ªam_out
, 
ngx_hâp_•dy_di˘
,

458 (
ngx_hâp_•dy_di˘
));

459 i‡(
rc
 !
Z_OK
) {

460 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

461 "deÊ©eSëDi˘i⁄¨y(ËÁûed: %d", 
rc
);

462 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

466 
sc
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
sscf
->
poﬁ_size
, sc->
c⁄√˘i⁄
->
log
);

467 i‡(
sc
->
poﬁ
 =
NULL
) {

468 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

472 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
c
->
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

473 i‡(
˛n
 =
NULL
) {

474 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

478 
˛n
->
h™dÀr
 = 
ngx_hâp_•dy_poﬁ_˛ónup
;

479 
˛n
->
d©a
 = 
sc
;

481 
sc
->
°ªams_ödex
 = 
	`ngx_pˇŒoc
(sc->
poﬁ
,

482 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
)

483 * (
ngx_hâp_•dy_°ªam_t
 *));

484 i‡(
sc
->
°ªams_ödex
 =
NULL
) {

485 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

489 i‡(
	`ngx_hâp_•dy_£nd_£âögs
(
sc
Ë=
NGX_ERROR
) {

490 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

494 i‡(
	`ngx_hâp_•dy_£nd_wödow_upd©e
(
sc
, 0, 
NGX_SPDY_MAX_WINDOW


495 - 
sc
->
ªcv_wödow
)

496 =
NGX_ERROR
)

498 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

502 
sc
->
ªcv_wödow
 = 
NGX_SPDY_MAX_WINDOW
;

504 
	`ngx_queue_öô
(&
sc
->
waôög
);

505 
	`ngx_queue_öô
(&
sc
->
po°ed
);

507 
c
->
d©a
 = 
sc
;

509 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_ªad_h™dÀr
;

510 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_•dy_wrôe_h™dÀr
;

512 
	`ngx_hâp_•dy_ªad_h™dÀr
(
ªv
);

513 
	}
}

517 
	$ngx_hâp_•dy_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

519 
u_ch¨
 *
p
, *
íd
;

520 
size_t
 
avaûabÀ
;

521 
ssize_t
 
n
;

522 
ngx_c⁄√˘i⁄_t
 *
c
;

523 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
;

524 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

526 
c
 = 
ªv
->
d©a
;

527 
sc
 = 
c
->
d©a
;

529 i‡(
ªv
->
timedout
) {

530 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

531 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_REQUEST_TIME_OUT
);

535 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "spdyÑead handler");

537 
sc
->
blocked
 = 1;

539 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

540 
ngx_hâp_•dy_moduÀ
);

542 
avaûabÀ
 = 
smcf
->
ªcv_buf„r_size
 - 2 * 
NGX_SPDY_STATE_BUFFER_SIZE
;

545 
p
 = 
smcf
->
ªcv_buf„r
;

547 
	`ngx_mem˝y
(
p
, 
sc
->
buf„r
, 
NGX_SPDY_STATE_BUFFER_SIZE
);

548 
íd
 = 
p
 + 
sc
->
buf„r_u£d
;

550 
n
 = 
c
->
	`ªcv
(c, 
íd
, 
avaûabÀ
);

552 i‡(
n
 =
NGX_AGAIN
) {

556 i‡(
n
 =0 && (
sc
->
öcom∂ëe
 || sc->
¥o˚ssög
)) {

557 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

561 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

562 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
,

563 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

567 
íd
 +
n
;

569 
sc
->
buf„r_u£d
 = 0;

570 
sc
->
öcom∂ëe
 = 0;

573 
p
 = 
sc
->
	`h™dÀr
(sc,Ö, 
íd
);

575 i‡(
p
 =
NULL
) {

579 } 
p
 !
íd
);

581 } 
ªv
->
ªady
);

583 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

584 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

588 i‡(
sc
->
œ°_out
 && 
	`ngx_hâp_•dy_£nd_ouçut_queue
(scË=
NGX_ERROR
) {

589 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

593 
sc
->
blocked
 = 0;

595 i‡(
sc
->
¥o˚ssög
) {

596 i‡(
ªv
->
timî_£t
) {

597 
	`ngx_dñ_timî
(
ªv
);

602 
	`ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
sc
);

603 
	}
}

607 
	$ngx_hâp_•dy_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

609 
ngx_öt_t
 
rc
;

610 
ngx_queue_t
 *
q
;

611 
ngx_c⁄√˘i⁄_t
 *
c
;

612 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

613 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

615 
c
 = 
wev
->
d©a
;

616 
sc
 = 
c
->
d©a
;

618 i‡(
wev
->
timedout
) {

619 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

621 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

625 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "spdy write handler");

627 
sc
->
blocked
 = 1;

629 
rc
 = 
	`ngx_hâp_•dy_£nd_ouçut_queue
(
sc
);

631 i‡(
rc
 =
NGX_ERROR
) {

632 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

636 !
	`ngx_queue_em±y
(&
sc
->
po°ed
)) {

637 
q
 = 
	`ngx_queue_hód
(&
sc
->
po°ed
);

639 
	`ngx_queue_ªmove
(
q
);

641 
°ªam
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_•dy_°ªam_t
, 
queue
);

643 
°ªam
->
h™dÀd
 = 0;

645 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

646 "ru¿•dy såóm %ui", 
°ªam
->
id
);

648 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

649 
wev
->
	`h™dÀr
(wev);

652 
sc
->
blocked
 = 0;

654 i‡(
rc
 =
NGX_AGAIN
) {

658 
	`ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
sc
);

659 
	}
}

662 
ngx_öt_t


663 
	$ngx_hâp_•dy_£nd_ouçut_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

665 
t˝_nodñay
;

666 
ngx_chaö_t
 *
˛
;

667 
ngx_evít_t
 *
wev
;

668 
ngx_c⁄√˘i⁄_t
 *
c
;

669 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

670 
ngx_hâp_•dy_out_‰ame_t
 *
out
, *
‰ame
, *
‚
;

672 
c
 = 
sc
->
c⁄√˘i⁄
;

674 i‡(
c
->
îr‹
) {

675  
NGX_ERROR
;

678 
wev
 = 
c
->
wrôe
;

680 i‡(!
wev
->
ªady
) {

681  
NGX_OK
;

684 
˛
 = 
NULL
;

685 
out
 = 
NULL
;

687 
‰ame
 = 
sc
->
œ°_out
; føme; fømê
‚
) {

688 
‰ame
->
œ°
->
√xt
 = 
˛
;

689 
˛
 = 
‰ame
->
fú°
;

691 
‚
 = 
‰ame
->
√xt
;

692 
‰ame
->
√xt
 = 
out
;

693 
out
 = 
‰ame
;

695 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

697 
out
, out->
°ªam
 ? out->°ªam->
id
 : 0, out->
¥i‹ôy
,

698 
out
->
blocked
, out->
Àngth
);

701 
˛
 = 
c
->
	`£nd_chaö
(c, cl, 0);

703 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

704 
îr‹
;

707 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

708 
ngx_hâp_c‹e_moduÀ
);

710 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

711 
îr‹
;

714 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

715 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

716 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, 
ngx_t˝_push_n
 " failed");

717 
îr‹
;

720 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

721 
t˝_nodñay
 = 
ngx_t˝_nodñay_™d_t˝_n›ush
 ? 1 : 0;

724 
t˝_nodñay
 = 1;

727 i‡(
t˝_nodñay


728 && 
˛cf
->
t˝_nodñay


729 && 
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
)

731 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

733 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

734 (c⁄° *Ë&
t˝_nodñay
, ())

737 #i‡(
NGX_SOLARIS
)

739 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_EINVAL
;

742 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

745 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

746 
îr‹
;

749 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

752 i‡(
˛
) {

753 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

756 i‡(
wev
->
timî_£t
) {

757 
	`ngx_dñ_timî
(
wev
);

761  ; 
out
; ouà
‚
) {

762 
‚
 = 
out
->
√xt
;

764 i‡(
out
->
	`h™dÀr
(
sc
, outË!
NGX_OK
) {

765 
out
->
blocked
 = 1;

766 
out
->
¥i‹ôy
 = 
NGX_SPDY_HIGHEST_PRIORITY
;

770 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

772 
out
, out->
°ªam
 ? out->°ªam->
id
 : 0,

773 
out
->
blocked
, out->
Àngth
);

776 
‰ame
 = 
NULL
;

778  ; 
out
; ouà
‚
) {

779 
‚
 = 
out
->
√xt
;

780 
out
->
√xt
 = 
‰ame
;

781 
‰ame
 = 
out
;

784 
sc
->
œ°_out
 = 
‰ame
;

786  
NGX_OK
;

788 
îr‹
:

790 
c
->
îr‹
 = 1;

792 i‡(!
sc
->
blocked
) {

793 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

796  
NGX_ERROR
;

797 
	}
}

801 
	$ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

803 
ngx_c⁄√˘i⁄_t
 *
c
;

804 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

806 i‡(
sc
->
œ°_out
 || sc->
¥o˚ssög
) {

810 
c
 = 
sc
->
c⁄√˘i⁄
;

812 i‡(
c
->
îr‹
) {

813 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

817 i‡(
c
->
buf„ªd
) {

821 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

822 
ngx_hâp_•dy_moduÀ
);

823 i‡(
sc
->
öcom∂ëe
) {

824 
	`ngx_add_timî
(
c
->
ªad
, 
sscf
->
ªcv_timeout
);

828 i‡(
ngx_ãrmö©e
 || 
ngx_exôög
) {

829 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

833 
	`ngx_de°roy_poﬁ
(
sc
->
poﬁ
);

835 
sc
->
poﬁ
 = 
NULL
;

836 
sc
->
‰ì_˘l_‰ames
 = 
NULL
;

837 
sc
->
‰ì_Áke_c⁄√˘i⁄s
 = 
NULL
;

839 #i‡(
NGX_HTTP_SSL
)

840 i‡(
c
->
s¶
) {

841 
	`ngx_s¶_‰ì_buf„r
(
c
);

845 
c
->
de°royed
 = 1;

846 
c
->
idÀ
 = 1;

847 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

849 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

850 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_•dy_kì∑live_h™dÀr
;

852 i‡(
c
->
wrôe
->
timî_£t
) {

853 
	`ngx_dñ_timî
(
c
->
wrôe
);

856 
	`ngx_add_timî
(
c
->
ªad
, 
sscf
->
kì∑live_timeout
);

857 
	}
}

860 
u_ch¨
 *

861 
	$ngx_hâp_•dy_¥oxy_¥Ÿocﬁ
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

862 
u_ch¨
 *
íd
)

864 
ngx_log_t
 *
log
;

866 
log
 = 
sc
->
c⁄√˘i⁄
->log;

867 
log
->
a˘i⁄
 = "reading PROXYÖrotocol";

869 
pos
 = 
	`ngx_¥oxy_¥Ÿocﬁ_∑r£
(
sc
->
c⁄√˘i⁄
,Öos, 
íd
);

871 
log
->
a˘i⁄
 = "processing SPDY";

873 i‡(
pos
 =
NULL
) {

874  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

877  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

878 
	}
}

881 
u_ch¨
 *

882 
	$ngx_hâp_•dy_°©e_hód
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

883 
u_ch¨
 *
íd
)

885 
uöt32_t
 
hód
, 
Êí
;

886 
ngx_uöt_t
 
ty≥
;

888 i‡(
íd
 - 
pos
 < 
NGX_SPDY_FRAME_HEADER_SIZE
) {

889  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

890 
ngx_hâp_•dy_°©e_hód
);

893 
hód
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

895 
pos
 +(
uöt32_t
);

897 
Êí
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

899 
sc
->
Êags
 = 
	`ngx_•dy_‰ame_Êags
(
Êí
);

900 
sc
->
Àngth
 = 
	`ngx_•dy_‰ame_Àngth
(
Êí
);

902 
pos
 +(
uöt32_t
);

904 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

906 
hód
, 
sc
->
Êags
, sc->
Àngth
);

908 i‡(
	`ngx_•dy_˘l_‰ame_check
(
hód
)) {

909 
ty≥
 = 
	`ngx_•dy_˘l_‰ame_ty≥
(
hód
);

911 
ty≥
) {

913 
NGX_SPDY_SYN_STREAM
:

914  
	`ngx_hâp_•dy_°©e_syn_°ªam
(
sc
, 
pos
, 
íd
);

916 
NGX_SPDY_SYN_REPLY
:

917 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

919  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

921 
NGX_SPDY_RST_STREAM
:

922  
	`ngx_hâp_•dy_°©e_r°_°ªam
(
sc
, 
pos
, 
íd
);

924 
NGX_SPDY_SETTINGS
:

925  
	`ngx_hâp_•dy_°©e_£âögs
(
sc
, 
pos
, 
íd
);

927 
NGX_SPDY_PING
:

928  
	`ngx_hâp_•dy_°©e_pög
(
sc
, 
pos
, 
íd
);

930 
NGX_SPDY_GOAWAY
:

931  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

933 
NGX_SPDY_HEADERS
:

934 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

936  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

938 
NGX_SPDY_WINDOW_UPDATE
:

939  
	`ngx_hâp_•dy_°©e_wödow_upd©e
(
sc
, 
pos
, 
íd
);

942 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

943 "•dy c⁄åﬁ fømêwôh unknow¿ty≥ %ui", 
ty≥
);

944  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

948 i‡(
	`ngx_•dy_d©a_‰ame_check
(
hód
)) {

949 
sc
->
°ªam
 = 
	`ngx_hâp_•dy_gë_°ªam_by_id
(sc, 
hód
);

950  
	`ngx_hâp_•dy_°©e_d©a
(
sc
, 
pos
, 
íd
);

953 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

956  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

957 
	}
}

960 
u_ch¨
 *

961 
	$ngx_hâp_•dy_°©e_syn_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

962 
u_ch¨
 *
íd
)

964 
ngx_uöt_t
 
sid
, 
¥io
;

965 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

966 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

968 i‡(
íd
 - 
pos
 < 
NGX_SPDY_SYN_STREAM_SIZE
) {

969  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

970 
ngx_hâp_•dy_°©e_syn_°ªam
);

973 i‡(
sc
->
Àngth
 <
NGX_SPDY_SYN_STREAM_SIZE
) {

974 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

976 
sc
->
Àngth
);

978  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

981 
sc
->
Àngth
 -
NGX_SPDY_SYN_STREAM_SIZE
;

983 
sid
 = 
	`ngx_•dy_‰ame_∑r£_sid
(
pos
);

984 
¥io
 = 
pos
[8] >> 5;

986 
pos
 +
NGX_SPDY_SYN_STREAM_SIZE
;

988 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

989 "•dy SYN_STREAM fømêsid:%uò¥io:%ui", 
sid
, 
¥io
);

991 i‡(
sid
 % 2 =0 || sid <
sc
->
œ°_sid
) {

992 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

994 "wôh invÆid Såóm-ID %ui", 
sid
);

996 
°ªam
 = 
	`ngx_hâp_•dy_gë_°ªam_by_id
(
sc
, 
sid
);

998 i‡(
°ªam
) {

999 i‡(
	`ngx_hâp_•dy_ãrmö©e_°ªam
(
sc
, 
°ªam
,

1000 
NGX_SPDY_PROTOCOL_ERROR
)

1001 !
NGX_OK
)

1003  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1007  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1010 
sc
->
œ°_sid
 = 
sid
;

1012 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

1013 
ngx_hâp_•dy_moduÀ
);

1015 i‡(
sc
->
¥o˚ssög
 >
sscf
->
c⁄cuºít_°ªams
) {

1017 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1018 "c⁄cuºíà°ªam†ex˚eded %ui", 
sc
->
¥o˚ssög
);

1020 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
sid
, 
NGX_SPDY_REFUSED_STREAM
,

1021 
¥io
)

1022 !
NGX_OK
)

1024  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1027  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1030 
°ªam
 = 
	`ngx_hâp_•dy_¸óã_°ªam
(
sc
, 
sid
, 
¥io
);

1031 i‡(
°ªam
 =
NULL
) {

1032  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1035 
°ªam
->
ö_˛o£d
 = (
sc
->
Êags
 & 
NGX_SPDY_FLAG_FIN
) ? 1 : 0;

1037 
°ªam
->
ªque°
->
ªque°_Àngth
 = 
NGX_SPDY_FRAME_HEADER_SIZE


1038 + 
NGX_SPDY_SYN_STREAM_SIZE


1039 + 
sc
->
Àngth
;

1041 
sc
->
°ªam
 = stream;

1043  
	`ngx_hâp_•dy_°©e_hódîs
(
sc
, 
pos
, 
íd
);

1044 
	}
}

1047 
u_ch¨
 *

1048 
	$ngx_hâp_•dy_°©e_hódîs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1049 
u_ch¨
 *
íd
)

1051 
z
;

1052 
size_t
 
size
;

1053 
ngx_buf_t
 *
buf
;

1054 
ngx_öt_t
 
rc
;

1055 
ngx_hâp_ªque°_t
 *
r
;

1057 
size
 = 
íd
 - 
pos
;

1059 i‡(
size
 == 0) {

1060  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1061 
ngx_hâp_•dy_°©e_hódîs
);

1064 i‡(
size
 > 
sc
->
Àngth
) {

1065 
size
 = 
sc
->
Àngth
;

1068 
r
 = 
sc
->
°ªam
->
ªque°
;

1070 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1071 "¥o˚s†•dy hódî block %uz o‡%uz", 
size
, 
sc
->
Àngth
);

1073 
buf
 = 
r
->
hódî_ö
;

1075 
sc
->
z°ªam_ö
.
√xt_ö
 = 
pos
;

1076 
sc
->
z°ªam_ö
.
avaû_ö
 = 
size
;

1077 
sc
->
z°ªam_ö
.
√xt_out
 = 
buf
->
œ°
;

1080 
sc
->
z°ªam_ö
.
avaû_out
 = 
buf
->
íd
 - buf->
œ°
 - 1;

1082 
z
 = 
	`öÊ©e
(&
sc
->
z°ªam_ö
, 
Z_NO_FLUSH
);

1084 i‡(
z
 =
Z_NEED_DICT
) {

1085 
z
 = 
	`öÊ©eSëDi˘i⁄¨y
(&
sc
->
z°ªam_ö
, 
ngx_hâp_•dy_di˘
,

1086 (
ngx_hâp_•dy_di˘
));

1088 i‡(
z
 !
Z_OK
) {

1089 i‡(
z
 =
Z_DATA_ERROR
) {

1090 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1093 (
u_l⁄g
Ë
sc
->
z°ªam_ö
.
adÀr
);

1095  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1098 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1099 "öÊ©eSëDi˘i⁄¨y(ËÁûed: %d", 
z
);

1101  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1104 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1105 "•dy inÊ©eSëDi˘i⁄¨y(): %d", 
z
);

1107 
z
 = 
sc
->
z°ªam_ö
.
avaû_ö
 ? 
	`öÊ©e
(&sc->z°ªam_ö, 
Z_NO_FLUSH
)

1108 : 
Z_OK
;

1111 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1113 
sc
->
z°ªam_ö
.
√xt_ö
, sc->z°ªam_ö.
√xt_out
,

1114 
sc
->
z°ªam_ö
.
avaû_ö
, sc->z°ªam_ö.
avaû_out
,

1115 
z
);

1117 i‡(
z
 !
Z_OK
) {

1118  
	`ngx_hâp_•dy_°©e_öÊ©e_îr‹
(
sc
, 
z
);

1121 
sc
->
Àngth
 -sc->
z°ªam_ö
.
√xt_ö
 - 
pos
;

1122 
pos
 = 
sc
->
z°ªam_ö
.
√xt_ö
;

1124 
buf
->
œ°
 = 
sc
->
z°ªam_ö
.
√xt_out
;

1126 i‡(
r
->
hódîs_ö
.
hódîs
.
∑π
.
ñts
 =
NULL
) {

1128 i‡(
buf
->
œ°
 - buf->
pos
 < 
NGX_SPDY_NV_NUM_SIZE
) {

1130 i‡(
sc
->
Àngth
 == 0) {

1131 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1134  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1137  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1138 
ngx_hâp_•dy_°©e_hódîs
);

1141 
sc
->
íåõs
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
buf
->
pos
);

1143 
buf
->
pos
 +
NGX_SPDY_NV_NUM_SIZE
;

1145 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1147 
sc
->
íåõs
);

1149 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 20,

1150 (
ngx_èbÀ_ñt_t
))

1151 !
NGX_OK
)

1153 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

1154 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1155  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1158 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_ö
.
cookõs
,Ñ->
poﬁ
, 2,

1159 (
ngx_èbÀ_ñt_t
 *))

1160 !
NGX_OK
)

1162 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

1163 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1164  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1168 
sc
->
íåõs
) {

1170 
rc
 = 
	`ngx_hâp_•dy_∑r£_hódî
(
r
);

1172 
rc
) {

1174 
NGX_DONE
:

1175 
sc
->
íåõs
--;

1177 
NGX_OK
:

1180 
NGX_AGAIN
:

1182 i‡(
sc
->
z°ªam_ö
.
avaû_ö
) {

1184 
rc
 = 
	`ngx_hâp_•dy_Æloc_œrge_hódî_buf„r
(
r
);

1186 i‡(
rc
 =
NGX_DECLINED
) {

1187 
	`ngx_hâp_föÆize_ªque°
(
r
,

1188 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1189  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1192 i‡(
rc
 !
NGX_OK
) {

1193 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

1194 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1195  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1199 *
buf
->
pos
 = '\0';

1201 
buf
 = 
r
->
hódî_ö
;

1203 
sc
->
z°ªam_ö
.
√xt_out
 = 
buf
->
œ°
;

1206 
sc
->
z°ªam_ö
.
avaû_out
 = 
buf
->
íd
 - buf->
œ°
 - 1;

1208 
z
 = 
	`öÊ©e
(&
sc
->
z°ªam_ö
, 
Z_NO_FLUSH
);

1210 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1212 
sc
->
z°ªam_ö
.
√xt_ö
, sc->z°ªam_ö.
√xt_out
,

1213 
sc
->
z°ªam_ö
.
avaû_ö
, sc->z°ªam_ö.
avaû_out
,

1214 
z
);

1216 i‡(
z
 !
Z_OK
) {

1217  
	`ngx_hâp_•dy_°©e_öÊ©e_îr‹
(
sc
, 
z
);

1220 
sc
->
Àngth
 -sc->
z°ªam_ö
.
√xt_ö
 - 
pos
;

1221 
pos
 = 
sc
->
z°ªam_ö
.
√xt_ö
;

1223 
buf
->
œ°
 = 
sc
->
z°ªam_ö
.
√xt_out
;

1228 i‡(
sc
->
Àngth
 == 0) {

1229 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1232  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1235  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1236 
ngx_hâp_•dy_°©e_hódîs
);

1238 
NGX_HTTP_PARSE_INVALID_HEADER
:

1239 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1240  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1243  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1248 
rc
 = 
	`ngx_hâp_•dy_h™dÀ_ªque°_hódî
(
r
);

1250 i‡(
rc
 !
NGX_OK
) {

1251 i‡(
rc
 =
NGX_HTTP_PARSE_INVALID_HEADER
) {

1252 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1253  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1256 i‡(
rc
 !
NGX_ABORT
) {

1257 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

1258 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1261  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1265 i‡(
buf
->
pos
 !buf->
œ°
 || 
sc
->
z°ªam_ö
.
avaû_ö
) {

1266 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1269  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

1272 i‡(
sc
->
Àngth
) {

1273  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1274 
ngx_hâp_•dy_°©e_hódîs
);

1278 *
buf
->
pos
 = '\0';

1280 
	`ngx_hâp_•dy_run_ªque°
(
r
);

1282  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1283 
	}
}

1286 
u_ch¨
 *

1287 
	$ngx_hâp_•dy_°©e_hódîs_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1288 
u_ch¨
 *
íd
)

1290 
n
;

1291 
size_t
 
size
;

1292 
u_ch¨
 
buf„r
[
NGX_SPDY_SKIP_HEADERS_BUFFER_SIZE
];

1294 i‡(
sc
->
Àngth
 == 0) {

1295  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1298 
size
 = 
íd
 - 
pos
;

1300 i‡(
size
 == 0) {

1301  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1302 
ngx_hâp_•dy_°©e_hódîs_skù
);

1305 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1306 "•dy hódî block skù %uz o‡%uz", 
size
, 
sc
->
Àngth
);

1308 
sc
->
z°ªam_ö
.
√xt_ö
 = 
pos
;

1309 
sc
->
z°ªam_ö
.
avaû_ö
 = (
size
 < sc->
Àngth
) ? size : sc->length;

1311 
sc
->
z°ªam_ö
.
avaû_ö
) {

1312 
sc
->
z°ªam_ö
.
√xt_out
 = 
buf„r
;

1313 
sc
->
z°ªam_ö
.
avaû_out
 = 
NGX_SPDY_SKIP_HEADERS_BUFFER_SIZE
;

1315 
n
 = 
	`öÊ©e
(&
sc
->
z°ªam_ö
, 
Z_NO_FLUSH
);

1317 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1319 
sc
->
z°ªam_ö
.
√xt_ö
, sc->z°ªam_ö.
√xt_out
,

1320 
sc
->
z°ªam_ö
.
avaû_ö
, sc->z°ªam_ö.
avaû_out
,

1321 
n
);

1323 i‡(
n
 !
Z_OK
) {

1324  
	`ngx_hâp_•dy_°©e_öÊ©e_îr‹
(
sc
, 
n
);

1328 
pos
 = 
sc
->
z°ªam_ö
.
√xt_ö
;

1330 i‡(
size
 < 
sc
->
Àngth
) {

1331 
sc
->
Àngth
 -
size
;

1332  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1333 
ngx_hâp_•dy_°©e_hódîs_skù
);

1336  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1337 
	}
}

1340 
u_ch¨
 *

1341 
	$ngx_hâp_•dy_°©e_hódîs_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1342 
u_ch¨
 *
íd
)

1344 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1346 
°ªam
 = 
sc
->stream;

1348 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1350 "wôh invÆid hódî block", 
°ªam
->
id
);

1352 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
°ªam
->
id
, 
NGX_SPDY_PROTOCOL_ERROR
,

1353 
°ªam
->
¥i‹ôy
)

1354 !
NGX_OK
)

1356  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1359 
°ªam
->
out_˛o£d
 = 1;

1361 
	`ngx_hâp_•dy_˛o£_°ªam
(
°ªam
, 
NGX_HTTP_BAD_REQUEST
);

1363  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1364 
	}
}

1367 
u_ch¨
 *

1368 
	$ngx_hâp_•dy_°©e_wödow_upd©e
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1369 
u_ch¨
 *
íd
)

1371 
size_t
 
dñè
;

1372 
ngx_uöt_t
 
sid
;

1373 
ngx_evít_t
 *
wev
;

1374 
ngx_queue_t
 *
q
;

1375 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1377 i‡(
íd
 - 
pos
 < 
NGX_SPDY_WINDOW_UPDATE_SIZE
) {

1378  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1379 
ngx_hâp_•dy_°©e_wödow_upd©e
);

1382 i‡(
sc
->
Àngth
 !
NGX_SPDY_WINDOW_UPDATE_SIZE
) {

1383 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1385 "wôh inc‹ª˘Üígth %uz", 
sc
->
Àngth
);

1387  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1390 
sid
 = 
	`ngx_•dy_‰ame_∑r£_sid
(
pos
);

1392 
pos
 +
NGX_SPDY_SID_SIZE
;

1394 
dñè
 = 
	`ngx_•dy_‰ame_∑r£_dñè
(
pos
);

1396 
pos
 +
NGX_SPDY_DELTA_SIZE
;

1398 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1399 "•dy WINDOW_UPDATE sid:%uòdñè:%uz", 
sid
, 
dñè
);

1401 i‡(
sid
) {

1402 
°ªam
 = 
	`ngx_hâp_•dy_gë_°ªam_by_id
(
sc
, 
sid
);

1404 i‡(
°ªam
 =
NULL
) {

1405 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1408  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1411 i‡(
°ªam
->
£nd_wödow
 > (
ssize_t
Ë(
NGX_SPDY_MAX_WINDOW
 - 
dñè
)) {

1413 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1417 
sid
, 
dñè
, 
°ªam
->
£nd_wödow
);

1419 i‡(
	`ngx_hâp_•dy_ãrmö©e_°ªam
(
sc
, 
°ªam
,

1420 
NGX_SPDY_FLOW_CONTROL_ERROR
)

1421 =
NGX_ERROR
)

1423  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1426  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1429 
°ªam
->
£nd_wödow
 +
dñè
;

1431 i‡(
°ªam
->
exhau°ed
) {

1432 
°ªam
->
exhau°ed
 = 0;

1434 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

1436 i‡(!
wev
->
timî_£t
) {

1437 
wev
->
dñayed
 = 0;

1438 
wev
->
	`h™dÀr
(wev);

1443 
sc
->
£nd_wödow
 +
dñè
;

1445 i‡(
sc
->
£nd_wödow
 > 
NGX_SPDY_MAX_WINDOW
) {

1446 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1450 
dñè
, 
sc
->
£nd_wödow
);

1452  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1455 !
	`ngx_queue_em±y
(&
sc
->
waôög
)) {

1456 
q
 = 
	`ngx_queue_hód
(&
sc
->
waôög
);

1458 
	`ngx_queue_ªmove
(
q
);

1460 
°ªam
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_•dy_°ªam_t
, 
queue
);

1462 
°ªam
->
h™dÀd
 = 0;

1464 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

1466 i‡(!
wev
->
timî_£t
) {

1467 
wev
->
dñayed
 = 0;

1468 
wev
->
	`h™dÀr
(wev);

1470 i‡(
sc
->
£nd_wödow
 == 0) {

1477  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1478 
	}
}

1481 
u_ch¨
 *

1482 
	$ngx_hâp_•dy_°©e_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1483 
u_ch¨
 *
íd
)

1485 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1487 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1490 i‡(
sc
->
Àngth
 > sc->
ªcv_wödow
) {

1491 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1494 
sc
->
Àngth
, sc->
ªcv_wödow
);

1496  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1499 
sc
->
ªcv_wödow
 -sc->
Àngth
;

1501 i‡(
sc
->
ªcv_wödow
 < 
NGX_SPDY_MAX_WINDOW
 / 4) {

1503 i‡(
	`ngx_hâp_•dy_£nd_wödow_upd©e
(
sc
, 0,

1504 
NGX_SPDY_MAX_WINDOW


1505 - 
sc
->
ªcv_wödow
)

1506 =
NGX_ERROR
)

1508  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1511 
sc
->
ªcv_wödow
 = 
NGX_SPDY_MAX_WINDOW
;

1514 
°ªam
 = 
sc
->stream;

1516 i‡(
°ªam
 =
NULL
) {

1517 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1520  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1523 i‡(
sc
->
Àngth
 > 
°ªam
->
ªcv_wödow
) {

1524 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1527 
°ªam
->
id
, 
sc
->
Àngth
, såóm->
ªcv_wödow
);

1529 i‡(
	`ngx_hâp_•dy_ãrmö©e_°ªam
(
sc
, 
°ªam
,

1530 
NGX_SPDY_FLOW_CONTROL_ERROR
)

1531 =
NGX_ERROR
)

1533  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1536  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1539 
°ªam
->
ªcv_wödow
 -
sc
->
Àngth
;

1541 i‡(
°ªam
->
ªcv_wödow
 < 
NGX_SPDY_STREAM_WINDOW
 / 4) {

1543 i‡(
	`ngx_hâp_•dy_£nd_wödow_upd©e
(
sc
, 
°ªam
->
id
,

1544 
NGX_SPDY_STREAM_WINDOW


1545 - 
°ªam
->
ªcv_wödow
)

1546 =
NGX_ERROR
)

1548  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1551 
°ªam
->
ªcv_wödow
 = 
NGX_SPDY_STREAM_WINDOW
;

1554 i‡(
°ªam
->
ö_˛o£d
) {

1555 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1557 
°ªam
->
id
);

1559 i‡(
	`ngx_hâp_•dy_ãrmö©e_°ªam
(
sc
, 
°ªam
,

1560 
NGX_SPDY_STREAM_ALREADY_CLOSED
)

1561 =
NGX_ERROR
)

1563  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1566  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1569  
	`ngx_hâp_•dy_°©e_ªad_d©a
(
sc
, 
pos
, 
íd
);

1570 
	}
}

1573 
u_ch¨
 *

1574 
	$ngx_hâp_•dy_°©e_ªad_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1575 
u_ch¨
 *
íd
)

1577 
size_t
 
size
;

1578 
ssize_t
 
n
;

1579 
ngx_buf_t
 *
buf
;

1580 
ngx_öt_t
 
rc
;

1581 
ngx_ãmp_fûe_t
 *
tf
;

1582 
ngx_hâp_ªque°_t
 *
r
;

1583 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1584 
ngx_hâp_ªque°_body_t
 *
rb
;

1585 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1587 
°ªam
 = 
sc
->stream;

1589 i‡(
°ªam
 =
NULL
) {

1590  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1593 i‡(
°ªam
->
skù_d©a
) {

1595 i‡(
sc
->
Êags
 & 
NGX_SPDY_FLAG_FIN
) {

1596 
°ªam
->
ö_˛o£d
 = 1;

1599 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1601 
°ªam
->
skù_d©a
);

1603  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1606 
size
 = 
íd
 - 
pos
;

1608 i‡(
size
 > 
sc
->
Àngth
) {

1609 
size
 = 
sc
->
Àngth
;

1612 
r
 = 
°ªam
->
ªque°
;

1614 i‡(
r
->
ªque°_body
 =
NULL


1615 && 
	`ngx_hâp_•dy_öô_ªque°_body
(
r
Ë!
NGX_OK
)

1617 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_INTERNAL_ERROR
;

1618  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1621 
rb
 = 
r
->
ªque°_body
;

1622 
tf
 = 
rb
->
ãmp_fûe
;

1623 
buf
 = 
rb
->buf;

1625 i‡(
size
) {

1626 
rb
->
ª°
 +
size
;

1628 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

1629 && 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 
rb
->
ª°
)

1631 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1635 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

1636 
îr‹
;

1639 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1641 i‡(
˛cf
->
˛õ¡_max_body_size


1642 && 
˛cf
->
˛õ¡_max_body_size
 < 
rb
->
ª°
)

1644 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1646 "toÿœrgêchunked body: %O byãs", 
rb
->
ª°
);

1648 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

1649 
îr‹
;

1653 
sc
->
Àngth
 -
size
;

1655 i‡(
tf
) {

1656 
buf
->
°¨t
 = 
pos
;

1657 
buf
->
pos
 =Öos;

1659 
pos
 +
size
;

1661 
buf
->
íd
 = 
pos
;

1662 
buf
->
œ°
 = 
pos
;

1664 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
tf
, 
rb
->
bufs
);

1668 i‡(
n
 =
NGX_ERROR
) {

1669 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_INTERNAL_ERROR
;

1670 
îr‹
;

1673 
tf
->
off£t
 +
n
;

1676 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->œ°, 
pos
, 
size
);

1677 
pos
 +
size
;

1680 
r
->
ªque°_Àngth
 +
size
;

1683 i‡(
sc
->
Àngth
) {

1684  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1685 
ngx_hâp_•dy_°©e_ªad_d©a
);

1688 i‡(
sc
->
Êags
 & 
NGX_SPDY_FLAG_FIN
) {

1690 
°ªam
->
ö_˛o£d
 = 1;

1692 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 0) {

1693 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
rb
->
ª°
;

1695 } i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 !
rb
->
ª°
) {

1696 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1699 
rb
->
ª°
, 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

1701 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

1702 
îr‹
;

1705 i‡(
tf
) {

1706 
	`ngx_memzîo
(
buf
, (
ngx_buf_t
));

1708 
buf
->
ö_fûe
 = 1;

1709 
buf
->
fûe_œ°
 = 
tf
->
fûe
.
off£t
;

1710 
buf
->
fûe
 = &
tf
->file;

1712 
rb
->
buf
 = 
NULL
;

1715 i‡(
rb
->
po°_h™dÀr
) {

1716 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

1717 
rb
->
	`po°_h™dÀr
(
r
);

1721  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1723 
îr‹
:

1725 i‡(
rb
->
po°_h™dÀr
) {

1727 i‡(
°ªam
->
skù_d©a
 =
NGX_SPDY_DATA_ERROR
) {

1728 
rc
 = (
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1)

1729 ? 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE


1730 : 
NGX_HTTP_BAD_REQUEST
;

1733 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1736 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1739  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1740 
	}
}

1743 
u_ch¨
 *

1744 
	$ngx_hâp_•dy_°©e_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1745 
u_ch¨
 *
íd
)

1747 
ngx_uöt_t
 
sid
, 
°©us
;

1748 
ngx_evít_t
 *
ev
;

1749 
ngx_c⁄√˘i⁄_t
 *
fc
;

1750 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1752 i‡(
íd
 - 
pos
 < 
NGX_SPDY_RST_STREAM_SIZE
) {

1753  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1754 
ngx_hâp_•dy_°©e_r°_°ªam
);

1757 i‡(
sc
->
Àngth
 !
NGX_SPDY_RST_STREAM_SIZE
) {

1758 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1760 
sc
->
Àngth
);

1762  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1765 
sid
 = 
	`ngx_•dy_‰ame_∑r£_sid
(
pos
);

1767 
pos
 +
NGX_SPDY_SID_SIZE
;

1769 
°©us
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1771 
pos
 +(
uöt32_t
);

1773 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1774 "•dy RST_STREAM sid:%uò°:%ui", 
sid
, 
°©us
);

1776 
°ªam
 = 
	`ngx_hâp_•dy_gë_°ªam_by_id
(
sc
, 
sid
);

1778 i‡(
°ªam
 =
NULL
) {

1779 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1782  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1785 
°ªam
->
ö_˛o£d
 = 1;

1786 
°ªam
->
out_˛o£d
 = 1;

1788 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

1789 
fc
->
îr‹
 = 1;

1791 
°©us
) {

1793 
NGX_SPDY_CANCEL
:

1794 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1795 "˛õ¡ c™˚Àd såóm %ui", 
sid
);

1798 
NGX_SPDY_INTERNAL_ERROR
:

1799 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1801 
sid
);

1805 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
fc
->
log
, 0,

1807 
sid
, 
°©us
);

1811 
ev
 = 
fc
->
ªad
;

1812 
ev
->
	`h™dÀr
(ev);

1814  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1815 
	}
}

1818 
u_ch¨
 *

1819 
	$ngx_hâp_•dy_°©e_pög
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1820 
u_ch¨
 *
íd
)

1822 
u_ch¨
 *
p
;

1823 
ngx_buf_t
 *
buf
;

1824 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

1826 i‡(
íd
 - 
pos
 < 
NGX_SPDY_PING_SIZE
) {

1827  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1828 
ngx_hâp_•dy_°©e_pög
);

1831 i‡(
sc
->
Àngth
 !
NGX_SPDY_PING_SIZE
) {

1832 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1834 
sc
->
Àngth
);

1836  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1839 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1842 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_PING_SIZE
,

1843 
NGX_SPDY_HIGHEST_PRIORITY
);

1844 i‡(
‰ame
 =
NULL
) {

1845  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1848 
buf
 = 
‰ame
->
fú°
->buf;

1850 
p
 = 
buf
->
pos
;

1852 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_PING
);

1853 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_PING_SIZE
);

1855 
p
 = 
	`ngx_˝ymem
’, 
pos
, 
NGX_SPDY_PING_SIZE
);

1857 
buf
->
œ°
 = 
p
;

1859 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

1861 
pos
 +
NGX_SPDY_PING_SIZE
;

1863  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1864 
	}
}

1867 
u_ch¨
 *

1868 
	$ngx_hâp_•dy_°©e_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1869 
u_ch¨
 *
íd
)

1871 
size_t
 
size
;

1873 
size
 = 
íd
 - 
pos
;

1875 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1876 "•dy fømêskù %uz o‡%uz", 
size
, 
sc
->
Àngth
);

1878 i‡(
size
 < 
sc
->
Àngth
) {

1879 
sc
->
Àngth
 -
size
;

1880  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
íd
,Énd,

1881 
ngx_hâp_•dy_°©e_skù
);

1884  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
 + sc->
Àngth
, 
íd
);

1885 
	}
}

1888 
u_ch¨
 *

1889 
	$ngx_hâp_•dy_°©e_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1890 
u_ch¨
 *
íd
)

1892 
ngx_uöt_t
 
fid
, 
vÆ
;

1894 i‡(
sc
->
íåõs
 == 0) {

1896 i‡(
íd
 - 
pos
 < 
NGX_SPDY_SETTINGS_NUM_SIZE
) {

1897  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1898 
ngx_hâp_•dy_°©e_£âögs
);

1901 
sc
->
íåõs
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1903 
pos
 +
NGX_SPDY_SETTINGS_NUM_SIZE
;

1904 
sc
->
Àngth
 -
NGX_SPDY_SETTINGS_NUM_SIZE
;

1906 i‡(
sc
->
Àngth
 < sc->
íåõs
 * 
NGX_SPDY_SETTINGS_PAIR_SIZE
) {

1907 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1910 
sc
->
Àngth
, sc->
íåõs
);

1912  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1915 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1916 "•dy SETTINGS fømêha†%uòíåõs", 
sc
->
íåõs
);

1919 
sc
->
íåõs
) {

1920 i‡(
íd
 - 
pos
 < 
NGX_SPDY_SETTINGS_PAIR_SIZE
) {

1921  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1922 
ngx_hâp_•dy_°©e_£âögs
);

1925 
sc
->
íåõs
--;

1926 
sc
->
Àngth
 -
NGX_SPDY_SETTINGS_PAIR_SIZE
;

1928 
fid
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1930 
pos
 +
NGX_SPDY_SETTINGS_FID_SIZE
;

1932 
vÆ
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1934 
pos
 +
NGX_SPDY_SETTINGS_VAL_SIZE
;

1936 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1938 
	`ngx_•dy_‰ame_Êags
(
fid
), 
	`ngx_•dy_‰ame_id
(fid), 
vÆ
);

1940 i‡(
	`ngx_•dy_‰ame_Êags
(
fid
Ë=
NGX_SPDY_SETTINGS_FLAG_PERSISTED
) {

1944 
	`ngx_•dy_‰ame_id
(
fid
)) {

1946 
NGX_SPDY_SETTINGS_INIT_WINDOW
:

1948 i‡(
vÆ
 > 
NGX_SPDY_MAX_WINDOW
) {

1949 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1951 "öc‹ª˘ INIT_WINDOW vÆue: %ui", 
vÆ
);

1953  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1956 i‡(
	`ngx_hâp_•dy_adju°_wödows
(
sc
, 
vÆ
 - sc->
öô_wödow
)

1957 !
NGX_OK
)

1959  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1962 
sc
->
öô_wödow
 = 
vÆ
;

1968  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1969 
	}
}

1972 
u_ch¨
 *

1973 
	$ngx_hâp_•dy_°©e_com∂ëe
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1974 
u_ch¨
 *
íd
)

1976 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1977 "•dy fømêcom∂ëêpos:%∞íd:%p", 
pos
, 
íd
);

1979 i‡(
pos
 > 
íd
) {

1980 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1983 
	`ngx_debug_poöt
();

1984  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1987 
sc
->
h™dÀr
 = 
ngx_hâp_•dy_°©e_hód
;

1988 
sc
->
°ªam
 = 
NULL
;

1990  
pos
;

1991 
	}
}

1994 
u_ch¨
 *

1995 
	$ngx_hâp_•dy_°©e_ßve
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1996 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_hâp_•dy_h™dÀr_±
 
h™dÀr
)

1998 
size_t
 
size
;

2000 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2002 
pos
, 
íd
, 
h™dÀr
);

2004 
size
 = 
íd
 - 
pos
;

2006 i‡(
size
 > 
NGX_SPDY_STATE_BUFFER_SIZE
) {

2007 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2008 "°©êbuf„∏ovîÊow: %uz byã†ªquúed", 
size
);

2010 
	`ngx_debug_poöt
();

2011  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

2014 
	`ngx_mem˝y
(
sc
->
buf„r
, 
pos
, 
NGX_SPDY_STATE_BUFFER_SIZE
);

2016 
sc
->
buf„r_u£d
 = 
size
;

2017 
sc
->
h™dÀr
 = handler;

2018 
sc
->
öcom∂ëe
 = 1;

2020  
íd
;

2021 
	}
}

2024 
u_ch¨
 *

2025 
	$ngx_hâp_•dy_°©e_öÊ©e_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
rc
)

2027 i‡(
rc
 =
Z_DATA_ERROR
 ||Ñ¯=
Z_STREAM_END
) {

2028 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2030 "c‹ru±ed hódî block, inÊ©e(ËÁûed: %d", 
rc
);

2032  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

2035 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2036 "öÊ©e(ËÁûed: %d", 
rc
);

2038  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

2039 
	}
}

2042 
u_ch¨
 *

2043 
	$ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

2045 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2048 i‡(
sc
->
°ªam
) {

2049 
sc
->
°ªam
->
out_˛o£d
 = 1;

2050 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 
NGX_HTTP_BAD_REQUEST
);

2053 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

2055  
NULL
;

2056 
	}
}

2059 
u_ch¨
 *

2060 
	$ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

2062 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2065 i‡(
sc
->
°ªam
) {

2066 
sc
->
°ªam
->
out_˛o£d
 = 1;

2067 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2070 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2072  
NULL
;

2073 
	}
}

2076 
ngx_öt_t


2077 
	$ngx_hâp_•dy_£nd_wödow_upd©e
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
,

2078 
ngx_uöt_t
 
dñè
)

2080 
u_ch¨
 *
p
;

2081 
ngx_buf_t
 *
buf
;

2082 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

2084 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2085 "•dy síd WINDOW_UPDATE sid:%uòdñè:%ui", 
sid
, 
dñè
);

2087 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_WINDOW_UPDATE_SIZE
,

2088 
NGX_SPDY_HIGHEST_PRIORITY
);

2089 i‡(
‰ame
 =
NULL
) {

2090  
NGX_ERROR
;

2093 
buf
 = 
‰ame
->
fú°
->buf;

2095 
p
 = 
buf
->
pos
;

2097 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_WINDOW_UPDATE
);

2098 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_WINDOW_UPDATE_SIZE
);

2100 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
sid
);

2101 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
dñè
);

2103 
buf
->
œ°
 = 
p
;

2105 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

2107  
NGX_OK
;

2108 
	}
}

2111 
ngx_öt_t


2112 
	$ngx_hâp_•dy_£nd_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
,

2113 
ngx_uöt_t
 
°©us
,Çgx_uöt_à
¥i‹ôy
)

2115 
u_ch¨
 *
p
;

2116 
ngx_buf_t
 *
buf
;

2117 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

2119 i‡(
sc
->
c⁄√˘i⁄
->
îr‹
) {

2120  
NGX_OK
;

2123 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2124 "•dy síd RST_STREAM sid:%uò°:%ui", 
sid
, 
°©us
);

2126 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_RST_STREAM_SIZE
,

2127 
¥i‹ôy
);

2128 i‡(
‰ame
 =
NULL
) {

2129  
NGX_ERROR
;

2132 
buf
 = 
‰ame
->
fú°
->buf;

2134 
p
 = 
buf
->
pos
;

2136 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_RST_STREAM
);

2137 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_RST_STREAM_SIZE
);

2139 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
sid
);

2140 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
°©us
);

2142 
buf
->
œ°
 = 
p
;

2144 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

2146  
NGX_OK
;

2147 
	}
}

2151 
ngx_öt_t


2152 
	$ngx_hâp_•dy_£nd_gﬂway
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

2154 
u_ch¨
 *
p
;

2155 
ngx_buf_t
 *
buf
;

2156 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

2158 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2159 "•dy síd GOAWAY sid:%ui", 
sc
->
œ°_sid
);

2161 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_GOAWAY_SIZE
,

2162 
NGX_SPDY_HIGHEST_PRIORITY
);

2163 i‡(
‰ame
 =
NULL
) {

2164  
NGX_ERROR
;

2167 
buf
 = 
‰ame
->
fú°
->buf;

2169 
p
 = 
buf
->
pos
;

2171 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_GOAWAY
);

2172 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_GOAWAY_SIZE
);

2174 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
sc
->
œ°_sid
);

2176 
buf
->
œ°
 = 
p
;

2178 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

2180  
NGX_OK
;

2181 
	}
}

2185 
ngx_öt_t


2186 
	$ngx_hâp_•dy_£nd_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

2188 
u_ch¨
 *
p
;

2189 
ngx_buf_t
 *
buf
;

2190 
ngx_chaö_t
 *
˛
;

2191 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

2192 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

2194 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2197 
‰ame
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_hâp_•dy_out_‰ame_t
));

2198 i‡(
‰ame
 =
NULL
) {

2199  
NGX_ERROR
;

2202 
˛
 = 
	`ngx_Æloc_chaö_lök
(
sc
->
poﬁ
);

2203 i‡(
˛
 =
NULL
) {

2204  
NGX_ERROR
;

2207 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
sc
->
poﬁ
, 
NGX_SPDY_FRAME_HEADER_SIZE


2208 + 
NGX_SPDY_SETTINGS_NUM_SIZE


2209 + 2 * 
NGX_SPDY_SETTINGS_PAIR_SIZE
);

2210 i‡(
buf
 =
NULL
) {

2211  
NGX_ERROR
;

2214 
buf
->
œ°_buf
 = 1;

2216 
˛
->
buf
 = buf;

2217 
˛
->
√xt
 = 
NULL
;

2219 
‰ame
->
fú°
 = 
˛
;

2220 
‰ame
->
œ°
 = 
˛
;

2221 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_£âögs_‰ame_h™dÀr
;

2222 
‰ame
->
°ªam
 = 
NULL
;

2223 #i‡(
NGX_DEBUG
)

2224 
‰ame
->
Àngth
 = 
NGX_SPDY_SETTINGS_NUM_SIZE


2225 + 2 * 
NGX_SPDY_SETTINGS_PAIR_SIZE
;

2227 
‰ame
->
¥i‹ôy
 = 
NGX_SPDY_HIGHEST_PRIORITY
;

2228 
‰ame
->
blocked
 = 0;

2230 
p
 = 
buf
->
pos
;

2232 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_SETTINGS
);

2233 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 
NGX_SPDY_FLAG_CLEAR_SETTINGS
,

2234 
NGX_SPDY_SETTINGS_NUM_SIZE


2235 + 2 * 
NGX_SPDY_SETTINGS_PAIR_SIZE
);

2237 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(p, 2);

2239 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2240 
ngx_hâp_•dy_moduÀ
);

2242 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_id
’, 0, 
NGX_SPDY_SETTINGS_MAX_STREAMS
);

2243 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
sscf
->
c⁄cuºít_°ªams
);

2245 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_id
’, 0, 
NGX_SPDY_SETTINGS_INIT_WINDOW
);

2246 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
NGX_SPDY_STREAM_WINDOW
);

2248 
buf
->
œ°
 = 
p
;

2250 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

2252  
NGX_OK
;

2253 
	}
}

2256 
ngx_öt_t


2257 
	$ngx_hâp_•dy_£âögs_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

2258 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

2260 
ngx_buf_t
 *
buf
;

2262 
buf
 = 
‰ame
->
fú°
->buf;

2264 i‡(
buf
->
pos
 !buf->
œ°
) {

2265  
NGX_AGAIN
;

2268 
	`ngx_‰ì_chaö
(
sc
->
poﬁ
, 
‰ame
->
fú°
);

2270  
NGX_OK
;

2271 
	}
}

2274 
ngx_hâp_•dy_out_‰ame_t
 *

2275 
	$ngx_hâp_•dy_gë_˘l_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
size_t
 
Àngth
,

2276 
ngx_uöt_t
 
¥i‹ôy
)

2278 
ngx_chaö_t
 *
˛
;

2279 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

2281 
‰ame
 = 
sc
->
‰ì_˘l_‰ames
;

2283 i‡(
‰ame
) {

2284 
sc
->
‰ì_˘l_‰ames
 = 
‰ame
->
√xt
;

2286 
˛
 = 
‰ame
->
fú°
;

2287 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

2290 
‰ame
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_hâp_•dy_out_‰ame_t
));

2291 i‡(
‰ame
 =
NULL
) {

2292  
NULL
;

2295 
˛
 = 
	`ngx_Æloc_chaö_lök
(
sc
->
poﬁ
);

2296 i‡(
˛
 =
NULL
) {

2297  
NULL
;

2300 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
sc
->
poﬁ
,

2301 
NGX_SPDY_CTL_FRAME_BUFFER_SIZE
);

2302 i‡(
˛
->
buf
 =
NULL
) {

2303  
NULL
;

2306 
˛
->
buf
->
œ°_buf
 = 1;

2308 
‰ame
->
fú°
 = 
˛
;

2309 
‰ame
->
œ°
 = 
˛
;

2310 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_˘l_‰ame_h™dÀr
;

2311 
‰ame
->
°ªam
 = 
NULL
;

2314 #i‡(
NGX_DEBUG
)

2315 i‡(
Àngth
 > 
NGX_SPDY_CTL_FRAME_BUFFER_SIZE
 - 
NGX_SPDY_FRAME_HEADER_SIZE
) {

2316 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
poﬁ
->
log
, 0,

2317 "ªque°ed c⁄åﬁ fømêi†toÿœrge: %uz", 
Àngth
);

2318  
NULL
;

2321 
‰ame
->
Àngth
 =Üength;

2324 
‰ame
->
¥i‹ôy
 =Öriority;

2325 
‰ame
->
blocked
 = 0;

2327  
‰ame
;

2328 
	}
}

2331 
ngx_öt_t


2332 
	$ngx_hâp_•dy_˘l_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

2333 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

2335 
ngx_buf_t
 *
buf
;

2337 
buf
 = 
‰ame
->
fú°
->buf;

2339 i‡(
buf
->
pos
 !buf->
œ°
) {

2340  
NGX_AGAIN
;

2343 
‰ame
->
√xt
 = 
sc
->
‰ì_˘l_‰ames
;

2344 
sc
->
‰ì_˘l_‰ames
 = 
‰ame
;

2346  
NGX_OK
;

2347 
	}
}

2350 
ngx_hâp_•dy_°ªam_t
 *

2351 
	$ngx_hâp_•dy_¸óã_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
id
,

2352 
ngx_uöt_t
 
¥i‹ôy
)

2354 
ngx_log_t
 *
log
;

2355 
ngx_uöt_t
 
ödex
;

2356 
ngx_evít_t
 *
ªv
, *
wev
;

2357 
ngx_c⁄√˘i⁄_t
 *
fc
;

2358 
ngx_hâp_log_˘x_t
 *
˘x
;

2359 
ngx_hâp_ªque°_t
 *
r
;

2360 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

2361 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2362 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

2364 
fc
 = 
sc
->
‰ì_Áke_c⁄√˘i⁄s
;

2366 i‡(
fc
) {

2367 
sc
->
‰ì_Áke_c⁄√˘i⁄s
 = 
fc
->
d©a
;

2369 
ªv
 = 
fc
->
ªad
;

2370 
wev
 = 
fc
->
wrôe
;

2371 
log
 = 
fc
->log;

2372 
˘x
 = 
log
->
d©a
;

2375 
fc
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_c⁄√˘i⁄_t
));

2376 i‡(
fc
 =
NULL
) {

2377  
NULL
;

2380 
ªv
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_evít_t
));

2381 i‡(
ªv
 =
NULL
) {

2382  
NULL
;

2385 
wev
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_evít_t
));

2386 i‡(
wev
 =
NULL
) {

2387  
NULL
;

2390 
log
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_log_t
));

2391 i‡(
log
 =
NULL
) {

2392  
NULL
;

2395 
˘x
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

2396 i‡(
˘x
 =
NULL
) {

2397  
NULL
;

2400 
˘x
->
c⁄√˘i⁄
 = 
fc
;

2401 
˘x
->
ªque°
 = 
NULL
;

2404 
	`ngx_mem˝y
(
log
, 
sc
->
c⁄√˘i⁄
->log, (
ngx_log_t
));

2406 
log
->
d©a
 = 
˘x
;

2408 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

2410 
ªv
->
d©a
 = 
fc
;

2411 
ªv
->
ªady
 = 1;

2412 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_˛o£_°ªam_h™dÀr
;

2413 
ªv
->
log
 =Üog;

2415 
	`ngx_mem˝y
(
wev
, 
ªv
, (
ngx_evít_t
));

2417 
wev
->
wrôe
 = 1;

2419 
	`ngx_mem˝y
(
fc
, 
sc
->
c⁄√˘i⁄
, (
ngx_c⁄√˘i⁄_t
));

2421 
fc
->
d©a
 = 
sc
->
hâp_c⁄√˘i⁄
;

2422 
fc
->
ªad
 = 
ªv
;

2423 
fc
->
wrôe
 = 
wev
;

2424 
fc
->
£¡
 = 0;

2425 
fc
->
log
 =Üog;

2426 
fc
->
buf„ªd
 = 0;

2427 
fc
->
¢dlow©
 = 1;

2428 
fc
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

2430 
r
 = 
	`ngx_hâp_¸óã_ªque°
(
fc
);

2431 i‡(
r
 =
NULL
) {

2432  
NULL
;

2435 
r
->
vÆid_loˇti⁄
 = 1;

2437 
fc
->
d©a
 = 
r
;

2438 
sc
->
c⁄√˘i⁄
->
ªque°s
++;

2440 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2442 
r
->
hódî_ö
 = 
	`ngx_¸óã_ãmp_buf
‘->
poﬁ
,

2443 
cscf
->
˛õ¡_hódî_buf„r_size
);

2444 i‡(
r
->
hódî_ö
 =
NULL
) {

2445 
	`ngx_hâp_‰ì_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2446  
NULL
;

2449 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

2451 
°ªam
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_•dy_°ªam_t
));

2452 i‡(
°ªam
 =
NULL
) {

2453 
	`ngx_hâp_‰ì_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2454  
NULL
;

2457 
r
->
•dy_°ªam
 = 
°ªam
;

2459 
°ªam
->
id
 = id;

2460 
°ªam
->
ªque°
 = 
r
;

2461 
°ªam
->
c⁄√˘i⁄
 = 
sc
;

2463 
°ªam
->
£nd_wödow
 = 
sc
->
öô_wödow
;

2464 
°ªam
->
ªcv_wödow
 = 
NGX_SPDY_STREAM_WINDOW
;

2466 
°ªam
->
¥i‹ôy
 =Öriority;

2468 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_•dy_moduÀ
);

2470 
ödex
 = 
	`ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
id
);

2472 
°ªam
->
ödex
 = 
sc
->
°ªams_ödex
[index];

2473 
sc
->
°ªams_ödex
[
ödex
] = 
°ªam
;

2475 
sc
->
¥o˚ssög
++;

2477  
°ªam
;

2478 
	}
}

2481 
ngx_hâp_•dy_°ªam_t
 *

2482 
	$ngx_hâp_•dy_gë_°ªam_by_id
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

2483 
ngx_uöt_t
 
sid
)

2485 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

2486 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

2488 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2489 
ngx_hâp_•dy_moduÀ
);

2491 
°ªam
 = 
sc
->
°ªams_ödex
[
	`ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
sid
)];

2493 
°ªam
) {

2494 i‡(
°ªam
->
id
 =
sid
) {

2495  
°ªam
;

2498 
°ªam
 = såóm->
ödex
;

2501  
NULL
;

2502 
	}
}

2505 
ngx_öt_t


2506 
	$ngx_hâp_•dy_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
)

2508 
u_ch¨
 *
p
, *
íd
, 
ch
;

2509 
ngx_uöt_t
 
hash
;

2510 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2513 
sw_«me_Àn
 = 0,

2514 
sw_«me
,

2515 
sw_vÆue_Àn
,

2516 
sw_vÆue


2517 } 
°©e
;

2519 
°©e
 = 
r
->state;

2521 
p
 = 
r
->
hódî_ö
->
pos
;

2522 
íd
 = 
r
->
hódî_ö
->
œ°
;

2524 
°©e
) {

2526 
sw_«me_Àn
:

2528 i‡(
íd
 - 
p
 < 
NGX_SPDY_NV_NLEN_SIZE
) {

2529  
NGX_AGAIN
;

2532 
r
->
lowˇ£_ödex
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
p
);

2534 i‡(
r
->
lowˇ£_ödex
 == 0) {

2535  
NGX_ERROR
;

2539 *
p
 = '\0';

2541 
p
 +
NGX_SPDY_NV_NLEN_SIZE
;

2543 
r
->
övÆid_hódî
 = 0;

2545 
°©e
 = 
sw_«me
;

2549 
sw_«me
:

2551 i‡((
ngx_uöt_t
Ë(
íd
 - 
p
Ë< 
r
->
lowˇ£_ödex
) {

2555 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2557 
r
->
hódî_«me_°¨t
 = 
p
;

2558 
r
->
hódî_«me_íd
 = 
p
 +Ñ->
lowˇ£_ödex
;

2560 i‡(
p
[0] == ':') {

2561 
p
++;

2564 
hash
 = 0;

2566  ; 
p
 !
r
->
hódî_«me_íd
;Ö++) {

2568 
ch
 = *
p
;

2570 
hash
 = 
	`ngx_hash
(hash, 
ch
);

2572 i‡((
ch
 >= 'a' && ch <= 'z')

2573 || (
ch
 == '-')

2574 || (
ch
 >= '0' && ch <= '9')

2575 || (
ch
 ='_' && 
cscf
->
undîsc‹es_ö_hódîs
))

2580 
ch
) {

2582 
LF
:

2583 
CR
:

2585 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2587 
r
->
lowˇ£_ödex
,Ñ->
hódî_«me_°¨t
);

2589  
NGX_HTTP_PARSE_INVALID_HEADER
;

2592 i‡(
ch
 >= 'A' && ch <= 'Z') {

2593  
NGX_ERROR
;

2596 
r
->
övÆid_hódî
 = 1;

2599 
r
->
hódî_hash
 = 
hash
;

2601 
°©e
 = 
sw_vÆue_Àn
;

2605 
sw_vÆue_Àn
:

2607 i‡(
íd
 - 
p
 < 
NGX_SPDY_NV_VLEN_SIZE
) {

2611 
r
->
lowˇ£_ödex
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
p
);

2614 *
p
 = '\0';

2616 
p
 +
NGX_SPDY_NV_VLEN_SIZE
;

2618 
°©e
 = 
sw_vÆue
;

2622 
sw_vÆue
:

2624 i‡((
ngx_uöt_t
Ë(
íd
 - 
p
Ë< 
r
->
lowˇ£_ödex
) {

2628 
r
->
hódî_°¨t
 = 
p
;

2630 
r
->
lowˇ£_ödex
--) {

2631 
ch
 = *
p
;

2633 i‡(
ch
 == '\0') {

2635 i‡(
p
 =
r
->
hódî_°¨t
) {

2636  
NGX_ERROR
;

2639 
r
->
hódî_íd
 = 
p
;

2640 
r
->
hódî_ö
->
pos
 = 
p
 + 1;

2642 
r
->
°©e
 = 
sw_vÆue
;

2644  
NGX_OK
;

2647 i‡(
ch
 =
CR
 || ch =
LF
) {

2648 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2651 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
,

2652 
r
->
hódî_«me_°¨t
,

2653 
p
 - 
r
->
hódî_°¨t
,

2654 
r
->
hódî_°¨t
,

2655 
ch
 =
CR
 ? 'r' : 'n');

2657  
NGX_HTTP_PARSE_INVALID_HEADER
;

2660 
p
++;

2663 
r
->
hódî_íd
 = 
p
;

2664 
r
->
hódî_ö
->
pos
 = 
p
;

2666 
r
->
°©e
 = 0;

2668  
NGX_DONE
;

2671 
r
->
hódî_ö
->
pos
 = 
p
;

2672 
r
->
°©e
 = state;

2674  
NGX_AGAIN
;

2675 
	}
}

2678 
ngx_öt_t


2679 
	$ngx_hâp_•dy_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
)

2681 
u_ch¨
 *
ﬁd
, *
√w
, *
p
;

2682 
size_t
 
ª°
;

2683 
ngx_buf_t
 *
buf
;

2684 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

2685 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2687 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2690 
°ªam
 = 
r
->
•dy_°ªam
;

2692 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2694 i‡(
°ªam
->
hódî_buf„rs


2695 =(
ngx_uöt_t
Ë
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
)

2697 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2700  
NGX_DECLINED
;

2703 
ª°
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

2709 i‡(
ª°
 > 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
 - 2) {

2710 
p
 = 
r
->
hódî_ö
->
pos
;

2712 i‡(
ª°
 > 
NGX_MAX_ERROR_STR
 - 300) {

2713 
ª°
 = 
NGX_MAX_ERROR_STR
 - 300;

2716 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2718 
ª°
, 
p
);

2720  
NGX_DECLINED
;

2723 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
);

2724 i‡(
buf
 =
NULL
) {

2725  
NGX_ERROR
;

2728 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2730 
buf
->
pos
, buf->
íd
 - buf->
œ°
);

2732 
ﬁd
 = 
r
->
hódî_ö
->
pos
;

2733 
√w
 = 
buf
->
pos
;

2735 i‡(
ª°
) {

2736 
buf
->
œ°
 = 
	`ngx_˝ymem
(
√w
, 
ﬁd
, 
ª°
);

2739 
r
->
hódî_ö
 = 
buf
;

2741 
°ªam
->
hódî_buf„rs
++;

2743  
NGX_OK
;

2744 
	}
}

2747 
ngx_öt_t


2748 
	$ngx_hâp_•dy_h™dÀ_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

2750 
ngx_uöt_t
 
i
;

2751 
ngx_èbÀ_ñt_t
 *
h
;

2752 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2753 
ngx_hâp_•dy_ªque°_hódî_t
 *
sh
;

2755 i‡(
r
->
övÆid_hódî
) {

2756 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2758 i‡(
cscf
->
ign‹e_övÆid_hódîs
) {

2759 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2761 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

2762 
r
->
hódî_«me_°¨t
);

2763  
NGX_OK
;

2768 i‡(
r
->
hódî_«me_°¨t
[0] == ':') {

2769 
r
->
hódî_«me_°¨t
++;

2771 
i
 = 0; i < 
NGX_SPDY_REQUEST_HEADERS
; i++) {

2772 
sh
 = &
ngx_hâp_•dy_ªque°_hódîs
[
i
];

2774 i‡(
sh
->
hash
 !
r
->
hódî_hash


2775 || 
sh
->
Àn
 !
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t


2776 || 
	`ngx_°∫cmp
(
sh
->
hódî
, 
r
->
hódî_«me_°¨t
, sh->
Àn
) != 0)

2781  
sh
->
	`h™dÀr
(
r
);

2784 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2786 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

2787 
r
->
hódî_«me_°¨t
);

2789  
NGX_HTTP_PARSE_INVALID_HEADER
;

2792 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

2793 i‡(
h
 =
NULL
) {

2794  
NGX_ERROR
;

2797 
h
->
hash
 = 
r
->
hódî_hash
;

2799 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

2800 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

2802 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

2803 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

2805 
h
->
lowˇ£_key
 = h->
key
.
d©a
;

2807  
NGX_OK
;

2808 
	}
}

2812 
	$ngx_hâp_•dy_ªque°_hódîs_öô
()

2814 
ngx_uöt_t
 
i
;

2815 
ngx_hâp_•dy_ªque°_hódî_t
 *
h
;

2817 
i
 = 0; i < 
NGX_SPDY_REQUEST_HEADERS
; i++) {

2818 
h
 = &
ngx_hâp_•dy_ªque°_hódîs
[
i
];

2819 
h
->
hash
 = 
	`ngx_hash_key
(h->
hódî
, h->
Àn
);

2821 
	}
}

2824 
ngx_öt_t


2825 
	$ngx_hâp_•dy_∑r£_mëhod
(
ngx_hâp_ªque°_t
 *
r
)

2827 
size_t
 
k
, 
Àn
;

2828 
ngx_uöt_t
 
n
;

2829 c⁄° 
u_ch¨
 *
p
, *
m
;

2837 
u_ch¨
 
Àn
;

2838 c⁄° 
u_ch¨
 
mëhod
[11];

2839 
uöt32_t
 
vÆue
;

2840 } 
ã°s
[] = {

2841 { 3, "GET", 
NGX_HTTP_GET
 },

2842 { 4, "POST", 
NGX_HTTP_POST
 },

2843 { 4, "HEAD", 
NGX_HTTP_HEAD
 },

2844 { 7, "OPTIONS", 
NGX_HTTP_OPTIONS
 },

2845 { 8, "PROPFIND", 
NGX_HTTP_PROPFIND
 },

2846 { 3, "PUT", 
NGX_HTTP_PUT
 },

2847 { 5, "MKCOL", 
NGX_HTTP_MKCOL
 },

2848 { 6, "DELETE", 
NGX_HTTP_DELETE
 },

2849 { 4, "COPY", 
NGX_HTTP_COPY
 },

2850 { 4, "MOVE", 
NGX_HTTP_MOVE
 },

2851 { 9, "PROPPATCH", 
NGX_HTTP_PROPPATCH
 },

2852 { 4, "LOCK", 
NGX_HTTP_LOCK
 },

2853 { 6, "UNLOCK", 
NGX_HTTP_UNLOCK
 },

2854 { 5, "PATCH", 
NGX_HTTP_PATCH
 },

2855 { 5, "TRACE", 
NGX_HTTP_TRACE
 }

2856 }, *
ã°
;

2858 i‡(
r
->
mëhod_«me
.
Àn
) {

2859 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2862  
NGX_HTTP_PARSE_INVALID_HEADER
;

2865 
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

2867 
r
->
mëhod_«me
.
Àn
 =Üen;

2868 
r
->
mëhod_«me
.
d©a
 =Ñ->
hódî_°¨t
;

2870 
ã°
 = 
ã°s
;

2871 
n
 = (
ã°s
) / (tests[0]);

2874 i‡(
Àn
 =
ã°
->len) {

2875 
p
 = 
r
->
mëhod_«me
.
d©a
;

2876 
m
 = 
ã°
->
mëhod
;

2877 
k
 = 
Àn
;

2880 i‡(*
p
++ !*
m
++) {

2881 
√xt
;

2883 } --
k
);

2885 
r
->
mëhod
 = 
ã°
->
vÆue
;

2886  
NGX_OK
;

2889 
√xt
:

2890 
ã°
++;

2892 } --
n
);

2894 
p
 = 
r
->
mëhod_«me
.
d©a
;

2897 i‡((*
p
 < 'A' || *p > 'Z') && *p != '_') {

2898 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2900 &
r
->
mëhod_«me
);

2902  
NGX_HTTP_PARSE_INVALID_HEADER
;

2905 
p
++;

2907 } --
Àn
);

2909  
NGX_OK
;

2910 
	}
}

2913 
ngx_öt_t


2914 
	$ngx_hâp_•dy_∑r£_scheme
(
ngx_hâp_ªque°_t
 *
r
)

2916 i‡(
r
->
schema_°¨t
) {

2917 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2920  
NGX_HTTP_PARSE_INVALID_HEADER
;

2923 
r
->
schema_°¨t
 =Ñ->
hódî_°¨t
;

2924 
r
->
schema_íd
 =Ñ->
hódî_íd
;

2926  
NGX_OK
;

2927 
	}
}

2930 
ngx_öt_t


2931 
	$ngx_hâp_•dy_∑r£_ho°
(
ngx_hâp_ªque°_t
 *
r
)

2933 
ngx_èbÀ_ñt_t
 *
h
;

2935 i‡(
r
->
hódîs_ö
.
ho°
) {

2936 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2939  
NGX_HTTP_PARSE_INVALID_HEADER
;

2942 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

2943 i‡(
h
 =
NULL
) {

2944  
NGX_ERROR
;

2947 
r
->
hódîs_ö
.
ho°
 = 
h
;

2949 
h
->
hash
 = 
r
->
hódî_hash
;

2951 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

2952 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

2954 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

2955 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

2957 
h
->
lowˇ£_key
 = h->
key
.
d©a
;

2959  
NGX_OK
;

2960 
	}
}

2963 
ngx_öt_t


2964 
	$ngx_hâp_•dy_∑r£_∑th
(
ngx_hâp_ªque°_t
 *
r
)

2966 i‡(
r
->
u≈¨£d_uri
.
Àn
) {

2967 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2970  
NGX_HTTP_PARSE_INVALID_HEADER
;

2973 
r
->
uri_°¨t
 =Ñ->
hódî_°¨t
;

2974 
r
->
uri_íd
 =Ñ->
hódî_íd
;

2976 i‡(
	`ngx_hâp_∑r£_uri
(
r
Ë!
NGX_OK
) {

2977 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2979 
r
->
uri_íd
 -Ñ->
uri_°¨t
,Ñ->uri_start);

2981  
NGX_HTTP_PARSE_INVALID_HEADER
;

2984 i‡(
	`ngx_hâp_¥o˚ss_ªque°_uri
(
r
Ë!
NGX_OK
) {

2989  
NGX_ABORT
;

2992  
NGX_OK
;

2993 
	}
}

2996 
ngx_öt_t


2997 
	$ngx_hâp_•dy_∑r£_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
)

2999 
u_ch¨
 *
p
, 
ch
;

3001 i‡(
r
->
hâp_¥Ÿocﬁ
.
Àn
) {

3002 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3005  
NGX_HTTP_PARSE_INVALID_HEADER
;

3008 
p
 = 
r
->
hódî_°¨t
;

3010 i‡(
r
->
hódî_íd
 - 
p
 < 8 || !(
	`ngx_°r5cmp
(p, 'H', 'T', 'T', 'P', '/'))) {

3011 
övÆid
;

3014 
ch
 = *(
p
 + 5);

3016 i‡(
ch
 < '1' || ch > '9') {

3017 
övÆid
;

3020 
r
->
hâp_maj‹
 = 
ch
 - '0';

3022 
p
 +6;Ö !
r
->
hódî_íd
 - 2;Ö++) {

3024 
ch
 = *
p
;

3026 i‡(
ch
 == '.') {

3030 i‡(
ch
 < '0' || ch > '9') {

3031 
övÆid
;

3034 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

3037 i‡(*
p
 != '.') {

3038 
övÆid
;

3041 
ch
 = *(
p
 + 1);

3043 i‡(
ch
 < '0' || ch > '9') {

3044 
övÆid
;

3047 
r
->
hâp_mö‹
 = 
ch
 - '0';

3049 
p
 +2;Ö !
r
->
hódî_íd
;Ö++) {

3051 
ch
 = *
p
;

3053 i‡(
ch
 < '0' || ch > '9') {

3054 
övÆid
;

3057 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

3060 
r
->
hâp_¥Ÿocﬁ
.
Àn
 =Ñ->
hódî_íd
 -Ñ->
hódî_°¨t
;

3061 
r
->
hâp_¥Ÿocﬁ
.
d©a
 =Ñ->
hódî_°¨t
;

3062 
r
->
hâp_vîsi⁄
 =Ñ->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

3064  
NGX_OK
;

3066 
övÆid
:

3068 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3070 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
,Ñ->header_start);

3072  
NGX_HTTP_PARSE_INVALID_HEADER
;

3073 
	}
}

3076 
ngx_öt_t


3077 
	$ngx_hâp_•dy_c⁄°ru˘_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
)

3079 
u_ch¨
 *
p
;

3081 i‡(
r
->
mëhod_«me
.
Àn
 == 0

3082 || 
r
->
u≈¨£d_uri
.
Àn
 == 0

3083 || 
r
->
hâp_¥Ÿocﬁ
.
Àn
 == 0)

3085 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

3086  
NGX_ERROR
;

3089 
r
->
ªque°_löe
.
Àn
 =Ñ->
mëhod_«me
.len + 1

3090 + 
r
->
u≈¨£d_uri
.
Àn
 + 1

3091 + 
r
->
hâp_¥Ÿocﬁ
.
Àn
;

3093 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
ªque°_löe
.
Àn
 + 1);

3094 i‡(
p
 =
NULL
) {

3095 
	`ngx_hâp_•dy_˛o£_°ªam
(
r
->
•dy_°ªam
,

3096 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

3097  
NGX_ERROR
;

3100 
r
->
ªque°_löe
.
d©a
 = 
p
;

3102 
p
 = 
	`ngx_˝ymem
’, 
r
->
mëhod_«me
.
d©a
,Ñ->mëhod_«me.
Àn
);

3104 *
p
++ = ' ';

3106 
p
 = 
	`ngx_˝ymem
’, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

3108 *
p
++ = ' ';

3110 
	`ngx_mem˝y
(
p
, 
r
->
hâp_¥Ÿocﬁ
.
d©a
,Ñ->hâp_¥Ÿocﬁ.
Àn
 + 1);

3113 
r
->
mëhod_«me
.
d©a
 =Ñ->
ªque°_löe
.data;

3115  
NGX_OK
;

3116 
	}
}

3120 
	$ngx_hâp_•dy_run_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

3122 
ngx_uöt_t
 
i
;

3123 
ngx_li°_∑π_t
 *
∑π
;

3124 
ngx_èbÀ_ñt_t
 *
h
;

3125 
ngx_hâp_hódî_t
 *
hh
;

3126 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3128 i‡(
	`ngx_hâp_•dy_c⁄°ru˘_ªque°_löe
(
r
Ë!
NGX_OK
) {

3132 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3133 "•dy hâ∞ªque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

3135 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3137 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

3138 
h
 = 
∑π
->
ñts
;

3140 
i
 = 0 ;; i++) {

3142 i‡(
i
 >
∑π
->
√…s
) {

3143 i‡(
∑π
->
√xt
 =
NULL
) {

3147 
∑π
 =Ö¨t->
√xt
;

3148 
h
 = 
∑π
->
ñts
;

3149 
i
 = 0;

3152 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

3153 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

3155 i‡(
hh
 && hh->
	`h™dÀr
(
r
, &
h
[
i
], hh->
off£t
Ë!
NGX_OK
) {

3159 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3160 "•dy hâ∞hódî: \"%V: %V\"", &
h
[
i
].
key
, &h[i].
vÆue
);

3163 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

3165 i‡(
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
Ë!
NGX_OK
) {

3169 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0 &&Ñ->
•dy_°ªam
->
ö_˛o£d
) {

3170 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3173 
r
->
•dy_°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

3175 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

3179 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

3180 
	}
}

3183 
ngx_öt_t


3184 
	$ngx_hâp_•dy_öô_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

3186 
ngx_buf_t
 *
buf
;

3187 
ngx_ãmp_fûe_t
 *
tf
;

3188 
ngx_hâp_ªque°_body_t
 *
rb
;

3189 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3191 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

3192 i‡(
rb
 =
NULL
) {

3193  
NGX_ERROR
;

3196 
r
->
ªque°_body
 = 
rb
;

3198 i‡(
r
->
•dy_°ªam
->
ö_˛o£d
) {

3199  
NGX_OK
;

3202 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

3204 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3206 i‡(
r
->
ªque°_body_ö_fûe_⁄ly


3207 || 
rb
->
ª°
 > (
off_t
Ë
˛cf
->
˛õ¡_body_buf„r_size


3208 || 
rb
->
ª°
 < 0)

3210 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

3211 i‡(
tf
 =
NULL
) {

3212  
NGX_ERROR
;

3215 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

3216 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

3217 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

3218 
tf
->
poﬁ
 = 
r
->pool;

3219 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

3220 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

3221 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

3222 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

3224 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

3225 
tf
->
ac˚ss
 = 0660;

3228 
rb
->
ãmp_fûe
 = 
tf
;

3230 i‡(
r
->
•dy_°ªam
->
ö_˛o£d


3231 && 
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

3232 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

3233 !
NGX_OK
)

3235  
NGX_ERROR
;

3238 
buf
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

3239 i‡(
buf
 =
NULL
) {

3240  
NGX_ERROR
;

3245 i‡(
rb
->
ª°
 == 0) {

3246  
NGX_OK
;

3249 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, (
size_t
Ë
rb
->
ª°
);

3250 i‡(
buf
 =
NULL
) {

3251  
NGX_ERROR
;

3255 
rb
->
buf
 = buf;

3257 
rb
->
bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

3258 i‡(
rb
->
bufs
 =
NULL
) {

3259  
NGX_ERROR
;

3262 
rb
->
bufs
->
buf
 = buf;

3263 
rb
->
bufs
->
√xt
 = 
NULL
;

3265 
rb
->
ª°
 = 0;

3267  
NGX_OK
;

3268 
	}
}

3271 
ngx_öt_t


3272 
	$ngx_hâp_•dy_ªad_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

3273 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
)

3275 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

3277 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3280 
°ªam
 = 
r
->
•dy_°ªam
;

3282 
°ªam
->
skù_d©a
) {

3284 
NGX_SPDY_DATA_DISCARD
:

3285 
	`po°_h™dÀr
(
r
);

3286  
NGX_OK
;

3288 
NGX_SPDY_DATA_ERROR
:

3289 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1) {

3290  
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
;

3292  
NGX_HTTP_BAD_REQUEST
;

3295 
NGX_SPDY_DATA_INTERNAL_ERROR
:

3296  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3299 i‡(!
r
->
ªque°_body
 && 
	`ngx_hâp_•dy_öô_ªque°_body
‘Ë!
NGX_OK
) {

3300 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_INTERNAL_ERROR
;

3301  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3304 i‡(
°ªam
->
ö_˛o£d
) {

3305 
	`po°_h™dÀr
(
r
);

3306  
NGX_OK
;

3309 
r
->
ªque°_body
->
po°_h™dÀr
 =Öost_handler;

3311 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ã°_ªadög
;

3312 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

3314  
NGX_AGAIN
;

3315 
	}
}

3318 
ngx_öt_t


3319 
	$ngx_hâp_•dy_ãrmö©e_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

3320 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_uöt_t
 
°©us
)

3322 
ngx_evít_t
 *
ªv
;

3323 
ngx_c⁄√˘i⁄_t
 *
fc
;

3325 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
°ªam
->
id
, 
°©us
,

3326 
NGX_SPDY_HIGHEST_PRIORITY
)

3327 =
NGX_ERROR
)

3329  
NGX_ERROR
;

3332 
°ªam
->
out_˛o£d
 = 1;

3334 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

3335 
fc
->
îr‹
 = 1;

3337 
ªv
 = 
fc
->
ªad
;

3338 
ªv
->
	`h™dÀr
(rev);

3340  
NGX_OK
;

3341 
	}
}

3345 
	$ngx_hâp_•dy_˛o£_°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

3347 
ngx_c⁄√˘i⁄_t
 *
fc
;

3348 
ngx_hâp_ªque°_t
 *
r
;

3350 
fc
 = 
ev
->
d©a
;

3351 
r
 = 
fc
->
d©a
;

3353 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3356 
	`ngx_hâp_•dy_˛o£_°ªam
(
r
->
•dy_°ªam
, 0);

3357 
	}
}

3361 
	$ngx_hâp_•dy_˛o£_°ªam
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_öt_t
 
rc
)

3363 
ngx_evít_t
 *
ev
;

3364 
ngx_c⁄√˘i⁄_t
 *
fc
;

3365 
ngx_hâp_•dy_°ªam_t
 **
ödex
, *
s
;

3366 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

3367 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

3369 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

3371 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3373 
°ªam
->
id
, såóm->
queued
, 
sc
->
¥o˚ssög
);

3375 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

3377 i‡(
°ªam
->
queued
) {

3378 
fc
->
wrôe
->
h™dÀr
 = 
ngx_hâp_•dy_˛o£_°ªam_h™dÀr
;

3382 i‡(!
°ªam
->
out_˛o£d
) {

3383 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
°ªam
->
id
,

3384 
NGX_SPDY_INTERNAL_ERROR
,

3385 
°ªam
->
¥i‹ôy
)

3386 !
NGX_OK
)

3388 
sc
->
c⁄√˘i⁄
->
îr‹
 = 1;

3392 i‡(
sc
->
°ªam
 == stream) {

3393 
sc
->
°ªam
 = 
NULL
;

3396 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3397 
ngx_hâp_•dy_moduÀ
);

3399 
ödex
 = 
sc
->
°ªams_ödex
 + 
	`ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
°ªam
->
id
);

3402 
s
 = *
ödex
;

3404 i‡(
s
 =
NULL
) {

3408 i‡(
s
 =
°ªam
) {

3409 *
ödex
 = 
s
->index;

3413 
ödex
 = &
s
->index;

3416 
	`ngx_hâp_‰ì_ªque°
(
°ªam
->
ªque°
, 
rc
);

3418 
ev
 = 
fc
->
ªad
;

3420 i‡(
ev
->
a˘ive
 ||Év->
dißbÀd
) {

3421 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3425 i‡(
ev
->
timî_£t
) {

3426 
	`ngx_dñ_timî
(
ev
);

3429 i‡(
ev
->
po°ed
) {

3430 
	`ngx_dñëe_po°ed_evít
(
ev
);

3433 
ev
 = 
fc
->
wrôe
;

3435 i‡(
ev
->
a˘ive
 ||Év->
dißbÀd
) {

3436 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3440 i‡(
ev
->
timî_£t
) {

3441 
	`ngx_dñ_timî
(
ev
);

3444 i‡(
ev
->
po°ed
) {

3445 
	`ngx_dñëe_po°ed_evít
(
ev
);

3448 
fc
->
d©a
 = 
sc
->
‰ì_Áke_c⁄√˘i⁄s
;

3449 
sc
->
‰ì_Áke_c⁄√˘i⁄s
 = 
fc
;

3451 
sc
->
¥o˚ssög
--;

3453 i‡(
sc
->
¥o˚ssög
 || sc->
blocked
) {

3457 
ev
 = 
sc
->
c⁄√˘i⁄
->
ªad
;

3459 
ev
->
h™dÀr
 = 
ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄_h™dÀr
;

3460 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

3461 
	}
}

3465 
	$ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄_h™dÀr
(
ngx_evít_t
 *
ªv
)

3467 
ngx_c⁄√˘i⁄_t
 *
c
;

3469 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_ªad_h™dÀr
;

3471 i‡(
ªv
->
ªady
) {

3472 
	`ngx_hâp_•dy_ªad_h™dÀr
(
ªv
);

3476 
c
 = 
ªv
->
d©a
;

3478 
	`ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
c
->
d©a
);

3479 
	}
}

3483 
	$ngx_hâp_•dy_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
)

3485 
ngx_c⁄√˘i⁄_t
 *
c
;

3486 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

3487 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

3489 
c
 = 
ªv
->
d©a
;

3491 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "spdy keepalive handler");

3493 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

3494 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3498 #i‡(
NGX_HAVE_KQUEUE
)

3500 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

3501 i‡(
ªv
->
≥ndög_eof
) {

3502 
c
->
log
->
h™dÀr
 = 
NULL
;

3503 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

3505 "kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

3506 #i‡(
NGX_HTTP_SSL
)

3507 i‡(
c
->
s¶
) {

3508 
c
->
s¶
->
no_£nd_shutdown
 = 1;

3511 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3518 
c
->
de°royed
 = 0;

3519 
c
->
idÀ
 = 0;

3520 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

3522 
sc
 = 
c
->
d©a
;

3524 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3525 
ngx_hâp_•dy_moduÀ
);

3527 
sc
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
sscf
->
poﬁ_size
, sc->
c⁄√˘i⁄
->
log
);

3528 i‡(
sc
->
poﬁ
 =
NULL
) {

3529 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3533 
sc
->
°ªams_ödex
 = 
	`ngx_pˇŒoc
(sc->
poﬁ
,

3534 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
)

3535 * (
ngx_hâp_•dy_°ªam_t
 *));

3536 i‡(
sc
->
°ªams_ödex
 =
NULL
) {

3537 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3541 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_•dy_wrôe_h™dÀr
;

3543 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_ªad_h™dÀr
;

3544 
	`ngx_hâp_•dy_ªad_h™dÀr
(
ªv
);

3545 
	}
}

3549 
	$ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

3550 
ngx_öt_t
 
rc
)

3552 
ngx_uöt_t
 
i
, 
size
;

3553 
ngx_evít_t
 *
ev
;

3554 
ngx_c⁄√˘i⁄_t
 *
c
, *
fc
;

3555 
ngx_hâp_ªque°_t
 *
r
;

3556 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

3557 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

3559 
c
 = 
sc
->
c⁄√˘i⁄
;

3561 i‡(!
sc
->
¥o˚ssög
) {

3562 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3566 
c
->
îr‹
 = 1;

3567 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

3568 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

3570 
sc
->
œ°_out
 = 
NULL
;

3572 
sc
->
blocked
 = 1;

3574 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3575 
ngx_hâp_•dy_moduÀ
);

3577 
size
 = 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
);

3579 
i
 = 0; i < 
size
; i++) {

3580 
°ªam
 = 
sc
->
°ªams_ödex
[
i
];

3582 
°ªam
) {

3583 
°ªam
->
h™dÀd
 = 0;

3585 
r
 = 
°ªam
->
ªque°
;

3586 
fc
 = 
r
->
c⁄√˘i⁄
;

3588 
fc
->
îr‹
 = 1;

3590 i‡(
°ªam
->
queued
) {

3591 
°ªam
->
queued
 = 0;

3593 
ev
 = 
fc
->
wrôe
;

3594 
ev
->
dñayed
 = 0;

3597 
ev
 = 
fc
->
ªad
;

3600 
°ªam
 = såóm->
ödex
;

3602 
ev
->
eof
 = 1;

3603 
ev
->
	`h™dÀr
(ev);

3607 
sc
->
blocked
 = 0;

3609 i‡(
sc
->
¥o˚ssög
) {

3613 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3614 
	}
}

3617 
ngx_öt_t


3618 
	$ngx_hâp_•dy_adju°_wödows
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ssize_t
 
dñè
)

3620 
ngx_uöt_t
 
i
, 
size
;

3621 
ngx_evít_t
 *
wev
;

3622 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, *
¢
;

3623 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

3625 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

3626 
ngx_hâp_•dy_moduÀ
);

3628 
size
 = 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
);

3630 
i
 = 0; i < 
size
; i++) {

3632 
°ªam
 = 
sc
->
°ªams_ödex
[
i
]; såóm; såóm = 
¢
) {

3633 
¢
 = 
°ªam
->
ödex
;

3635 i‡(
dñè
 > 0

3636 && 
°ªam
->
£nd_wödow


3637 > (
ssize_t
Ë(
NGX_SPDY_MAX_WINDOW
 - 
dñè
))

3639 i‡(
	`ngx_hâp_•dy_ãrmö©e_°ªam
(
sc
, 
°ªam
,

3640 
NGX_SPDY_FLOW_CONTROL_ERROR
)

3641 =
NGX_ERROR
)

3643  
NGX_ERROR
;

3649 
°ªam
->
£nd_wödow
 +
dñè
;

3651 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3653 
°ªam
->
id
, såóm->
£nd_wödow
);

3655 i‡(
°ªam
->
£nd_wödow
 > 0 && såóm->
exhau°ed
) {

3656 
°ªam
->
exhau°ed
 = 0;

3658 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

3660 i‡(!
wev
->
timî_£t
) {

3661 
wev
->
dñayed
 = 0;

3662 
wev
->
	`h™dÀr
(wev);

3668  
NGX_OK
;

3669 
	}
}

3673 
	$ngx_hâp_•dy_poﬁ_˛ónup
(*
d©a
)

3675 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
 = 
d©a
;

3677 i‡(
sc
->
poﬁ
) {

3678 
	`ngx_de°roy_poﬁ
(
sc
->
poﬁ
);

3680 
	}
}

3684 
	$ngx_hâp_•dy_zÆloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

3686 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
 = 
›aque
;

3688  
	`ngx_∑Œoc
(
sc
->
c⁄√˘i⁄
->
poﬁ
, 
ôems
 * 
size
);

3689 
	}
}

3693 
	$ngx_hâp_•dy_z‰ì
(*
›aque
, *
addªss
)

3696 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
 = 
›aque
;

3698 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

3699 "•dy z‰ì: %p", 
addªss
);

3701 
	}
}

	@src/http/ngx_http_spdy.h

7 #i‚de‡
_NGX_HTTP_SPDY_H_INCLUDED_


8 
	#_NGX_HTTP_SPDY_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_hâp.h
>

15 
	~<zlib.h
>

18 
	#NGX_SPDY_VERSION
 3

	)

20 
	#NGX_SPDY_NPN_ADVERTISE
 "\x08•dy/3.1"

	)

21 
	#NGX_SPDY_NPN_NEGOTIATED
 "•dy/3.1"

	)

23 
	#NGX_SPDY_STATE_BUFFER_SIZE
 16

	)

25 
	#NGX_SPDY_CTL_BIT
 1

	)

27 
	#NGX_SPDY_SYN_STREAM
 1

	)

28 
	#NGX_SPDY_SYN_REPLY
 2

	)

29 
	#NGX_SPDY_RST_STREAM
 3

	)

30 
	#NGX_SPDY_SETTINGS
 4

	)

31 
	#NGX_SPDY_PING
 6

	)

32 
	#NGX_SPDY_GOAWAY
 7

	)

33 
	#NGX_SPDY_HEADERS
 8

	)

34 
	#NGX_SPDY_WINDOW_UPDATE
 9

	)

36 
	#NGX_SPDY_FRAME_HEADER_SIZE
 8

	)

38 
	#NGX_SPDY_SID_SIZE
 4

	)

39 
	#NGX_SPDY_DELTA_SIZE
 4

	)

41 
	#NGX_SPDY_SYN_STREAM_SIZE
 10

	)

42 
	#NGX_SPDY_SYN_REPLY_SIZE
 4

	)

43 
	#NGX_SPDY_RST_STREAM_SIZE
 8

	)

44 
	#NGX_SPDY_PING_SIZE
 4

	)

45 
	#NGX_SPDY_GOAWAY_SIZE
 8

	)

46 
	#NGX_SPDY_WINDOW_UPDATE_SIZE
 8

	)

47 
	#NGX_SPDY_NV_NUM_SIZE
 4

	)

48 
	#NGX_SPDY_NV_NLEN_SIZE
 4

	)

49 
	#NGX_SPDY_NV_VLEN_SIZE
 4

	)

50 
	#NGX_SPDY_SETTINGS_NUM_SIZE
 4

	)

51 
	#NGX_SPDY_SETTINGS_FID_SIZE
 4

	)

52 
	#NGX_SPDY_SETTINGS_VAL_SIZE
 4

	)

54 
	#NGX_SPDY_SETTINGS_PAIR_SIZE
 \

55 (
NGX_SPDY_SETTINGS_FID_SIZE
 + 
NGX_SPDY_SETTINGS_VAL_SIZE
)

	)

57 
	#NGX_SPDY_HIGHEST_PRIORITY
 0

	)

58 
	#NGX_SPDY_LOWEST_PRIORITY
 7

	)

60 
	#NGX_SPDY_FLAG_FIN
 0x01

	)

61 
	#NGX_SPDY_FLAG_UNIDIRECTIONAL
 0x02

	)

62 
	#NGX_SPDY_FLAG_CLEAR_SETTINGS
 0x01

	)

64 
	#NGX_SPDY_MAX_FRAME_SIZE
 ((1 << 24Ë- 1)

	)

66 
	#NGX_SPDY_DATA_DISCARD
 1

	)

67 
	#NGX_SPDY_DATA_ERROR
 2

	)

68 
	#NGX_SPDY_DATA_INTERNAL_ERROR
 3

	)

71 
ngx_hâp_•dy_c⁄√˘i⁄_s
 
	tngx_hâp_•dy_c⁄√˘i⁄_t
;

72 
ngx_hâp_•dy_out_‰ame_s
 
	tngx_hâp_•dy_out_‰ame_t
;

75 
	gu_ch¨
 *(*
	tngx_hâp_•dy_h™dÀr_±
Ë(
	tngx_hâp_•dy_c⁄√˘i⁄_t
 *
	tsc
,

76 
	tu_ch¨
 *
	tpos
, u_ch¨ *
	tíd
);

78 
	sngx_hâp_•dy_c⁄√˘i⁄_s
 {

79 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

80 
ngx_hâp_c⁄√˘i⁄_t
 *
	mhâp_c⁄√˘i⁄
;

82 
ngx_uöt_t
 
	m¥o˚ssög
;

84 
size_t
 
	m£nd_wödow
;

85 
size_t
 
	mªcv_wödow
;

86 
size_t
 
	möô_wödow
;

88 
ngx_queue_t
 
	mwaôög
;

90 
u_ch¨
 
	mbuf„r
[
NGX_SPDY_STATE_BUFFER_SIZE
];

91 
size_t
 
	mbuf„r_u£d
;

92 
ngx_hâp_•dy_h™dÀr_±
 
	mh™dÀr
;

94 
z_°ªam
 
	mz°ªam_ö
;

95 
z_°ªam
 
	mz°ªam_out
;

97 
ngx_poﬁ_t
 *
	mpoﬁ
;

99 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ì_˘l_‰ames
;

100 
ngx_c⁄√˘i⁄_t
 *
	m‰ì_Áke_c⁄√˘i⁄s
;

102 
ngx_hâp_•dy_°ªam_t
 **
	m°ªams_ödex
;

104 
ngx_hâp_•dy_out_‰ame_t
 *
	mœ°_out
;

106 
ngx_queue_t
 
	mpo°ed
;

108 
ngx_hâp_•dy_°ªam_t
 *
	m°ªam
;

110 
ngx_uöt_t
 
	míåõs
;

111 
size_t
 
	mÀngth
;

112 
u_ch¨
 
	mÊags
;

114 
ngx_uöt_t
 
	mœ°_sid
;

116 
	mblocked
:1;

117 
	möcom∂ëe
:1;

121 
	sngx_hâp_•dy_°ªam_s
 {

122 
ngx_uöt_t
 
	mid
;

123 
ngx_hâp_ªque°_t
 *
	mªque°
;

124 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

125 
ngx_hâp_•dy_°ªam_t
 *
	mödex
;

127 
ngx_uöt_t
 
	mhódî_buf„rs
;

128 
ngx_uöt_t
 
	mqueued
;

134 
ssize_t
 
	m£nd_wödow
;

135 
size_t
 
	mªcv_wödow
;

137 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ì_‰ames
;

138 
ngx_chaö_t
 *
	m‰ì_d©a_hódîs
;

139 
ngx_chaö_t
 *
	m‰ì_bufs
;

141 
ngx_queue_t
 
	mqueue
;

143 
	m¥i‹ôy
:3;

144 
	mh™dÀd
:1;

145 
	mblocked
:1;

146 
	mexhau°ed
:1;

147 
	mö_˛o£d
:1;

148 
	mout_˛o£d
:1;

149 
	mskù_d©a
:2;

153 
	sngx_hâp_•dy_out_‰ame_s
 {

154 
ngx_hâp_•dy_out_‰ame_t
 *
	m√xt
;

155 
ngx_chaö_t
 *
	mfú°
;

156 
ngx_chaö_t
 *
	mœ°
;

157 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
	msc
,

158 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ame
);

160 
ngx_hâp_•dy_°ªam_t
 *
	m°ªam
;

161 
size_t
 
	mÀngth
;

163 
ngx_uöt_t
 
	m¥i‹ôy
;

164 
	mblocked
:1;

165 
	mfö
:1;

169 
ngx_ölöe
 

170 
	$ngx_hâp_•dy_queue_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

171 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

173 
ngx_hâp_•dy_out_‰ame_t
 **
out
;

175 
out
 = &
sc
->
œ°_out
; *out; ouà&(*out)->
√xt
)

180 i‡(
‰ame
->
¥i‹ôy
 >(*
out
)->priority) {

185 
‰ame
->
√xt
 = *
out
;

186 *
out
 = 
‰ame
;

187 
	}
}

190 
ngx_ölöe
 

191 
	$ngx_hâp_•dy_queue_blocked_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

192 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

194 
ngx_hâp_•dy_out_‰ame_t
 **
out
;

196 
out
 = &
sc
->
œ°_out
; *out; ouà&(*out)->
√xt
)

198 i‡((*
out
)->
blocked
) {

203 
‰ame
->
√xt
 = *
out
;

204 *
out
 = 
‰ame
;

205 
	}
}

208 
ngx_hâp_•dy_öô
(
ngx_evít_t
 *
ªv
);

209 
ngx_hâp_•dy_ªque°_hódîs_öô
();

211 
ngx_öt_t
 
ngx_hâp_•dy_ªad_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

212 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

214 
ngx_hâp_•dy_˛o£_°ªam
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_öt_t
 
rc
);

216 
ngx_öt_t
 
ngx_hâp_•dy_£nd_ouçut_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

219 
	#ngx_•dy_‰ame_Æig√d_wrôe_uöt16
(
p
, 
s
) \

220 (*(
uöt16_t
 *Ë(
p
Ë
	`ht⁄s
((uöt16_tË(
s
)), (pË+ (uöt16_t))

	)

222 
	#ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, 
s
) \

223 (*(
uöt32_t
 *Ë(
p
Ë
	`ht⁄l
((uöt32_tË(
s
)), (pË+ (uöt32_t))

	)

225 #i‡(
NGX_HAVE_NONALIGNED
)

227 
	#ngx_•dy_‰ame_wrôe_uöt16
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt16


	)

228 
	#ngx_•dy_‰ame_wrôe_uöt32
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

232 
	#ngx_•dy_‰ame_wrôe_uöt16
(
p
, 
s
) \

233 ((
p
)[0] = (
u_ch¨
Ë((
s
) >> 8), \

234 (
p
)[1] = (
u_ch¨
Ë(
s
), \

235 (
p
Ë+ (
uöt16_t
))

	)

237 
	#ngx_•dy_‰ame_wrôe_uöt32
(
p
, 
s
) \

238 ((
p
)[0] = (
u_ch¨
Ë((
s
) >> 24), \

239 (
p
)[1] = (
u_ch¨
Ë((
s
) >> 16), \

240 (
p
)[2] = (
u_ch¨
Ë((
s
) >> 8), \

241 (
p
)[3] = (
u_ch¨
Ë(
s
), \

242 (
p
Ë+ (
uöt32_t
))

	)

247 
	#ngx_•dy_˘l_‰ame_hód
(
t
) \

248 ((
uöt32_t
Ë
NGX_SPDY_CTL_BIT
 << 31 | 
NGX_SPDY_VERSION
 << 16 | (
t
))

	)

250 
	#ngx_•dy_‰ame_wrôe_hód
(
p
, 
t
) \

251 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, 
	`ngx_•dy_˘l_‰ame_hód
(
t
))

	)

253 
	#ngx_•dy_‰ame_wrôe_Êags_™d_Àn
(
p
, 
f
, 
l
) \

254 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, (
f
Ë<< 24 | (
l
))

	)

255 
	#ngx_•dy_‰ame_wrôe_Êags_™d_id
(
p
, 
f
, 
i
) \

256 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, (
f
Ë<< 24 | (
i
))

	)

258 
	#ngx_•dy_‰ame_wrôe_sid
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

259 
	#ngx_•dy_‰ame_wrôe_wödow
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

	@src/http/ngx_http_spdy_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

12 
	~<ngx_hâp_•dy_moduÀ.h
>

14 
	~<zlib.h
>

17 
	#ngx_hâp_•dy_nv_nsize
(
h
Ë(
NGX_SPDY_NV_NLEN_SIZE
 + (hË- 1)

	)

18 
	#ngx_hâp_•dy_nv_vsize
(
h
Ë(
NGX_SPDY_NV_VLEN_SIZE
 + (hË- 1)

	)

20 
	#ngx_hâp_•dy_nv_wrôe_num
 
ngx_•dy_‰ame_wrôe_uöt32


	)

21 
	#ngx_hâp_•dy_nv_wrôe_∆í
 
ngx_•dy_‰ame_wrôe_uöt32


	)

22 
	#ngx_hâp_•dy_nv_wrôe_vÀn
 
ngx_•dy_‰ame_wrôe_uöt32


	)

24 
	#ngx_hâp_•dy_nv_wrôe_«me
(
p
, 
h
) \

25 
	`ngx_˝ymem
(
	`ngx_hâp_•dy_nv_wrôe_∆í
(
p
, (
h
Ë- 1), h, (hË- 1)

	)

27 
	#ngx_hâp_•dy_nv_wrôe_vÆ
(
p
, 
h
) \

28 
	`ngx_˝ymem
(
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
, (
h
Ë- 1), h, (hË- 1)

	)

31 
ngx_chaö_t
 *
ngx_hâp_•dy_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
fc
,

32 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
);

34 
ngx_ölöe
 
ngx_öt_t
 
ngx_hâp_•dy_fûãr_£nd
(

35 
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

36 
ngx_ölöe
 
ngx_öt_t
 
ngx_hâp_•dy_Êow_c⁄åﬁ
(

37 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

38 
ngx_hâp_•dy_waôög_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

39 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

41 
ngx_chaö_t
 *
ngx_hâp_•dy_fûãr_gë_shadow
(

42 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_buf_t
 *
buf
, 
off_t
 
off£t
, off_à
size
);

43 
ngx_hâp_•dy_out_‰ame_t
 *
ngx_hâp_•dy_fûãr_gë_d©a_‰ame
(

44 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
size_t
 
Àn
, 
ngx_chaö_t
 *
fú°
,

45 
ngx_chaö_t
 *
œ°
);

47 
ngx_öt_t
 
ngx_hâp_•dy_syn_‰ame_h™dÀr
(

48 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

49 
ngx_öt_t
 
ngx_hâp_•dy_d©a_‰ame_h™dÀr
(

50 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

51 
ngx_ölöe
 
ngx_hâp_•dy_h™dÀ_‰ame
(

52 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

53 
ngx_ölöe
 
ngx_hâp_•dy_h™dÀ_°ªam
(

54 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

56 
ngx_hâp_•dy_fûãr_˛ónup
(*
d©a
);

58 
ngx_öt_t
 
ngx_hâp_•dy_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

61 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•dy_fûãr_moduÀ_˘x
 = {

62 
NULL
,

63 
ngx_hâp_•dy_fûãr_öô
,

65 
NULL
,

66 
NULL
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL


76 
ngx_moduÀ_t
 
	gngx_hâp_•dy_fûãr_moduÀ
 = {

77 
NGX_MODULE_V1
,

78 &
ngx_hâp_•dy_fûãr_moduÀ_˘x
,

79 
NULL
,

80 
NGX_HTTP_MODULE
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NGX_MODULE_V1_PADDING


92 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

95 
ngx_öt_t


96 
	$ngx_hâp_•dy_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

98 
rc
;

99 
size_t
 
Àn
;

100 
u_ch¨
 *
p
, *
buf
, *
œ°
;

101 
ngx_buf_t
 *
b
;

102 
ngx_°r_t
 
ho°
;

103 
ngx_uöt_t
 
i
, 
j
, 
cou¡
, 
p‹t
;

104 
ngx_chaö_t
 *
˛
;

105 
ngx_li°_∑π_t
 *
∑π
, *
±
;

106 
ngx_èbÀ_ñt_t
 *
hódî
, *
h
;

107 
ngx_c⁄√˘i⁄_t
 *
c
;

108 
ngx_hâp_˛ónup_t
 *
˛n
;

109 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

110 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

111 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

112 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

113 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

114 
sockaddr_ö
 *
sö
;

115 #i‡(
NGX_HAVE_INET6
)

116 
sockaddr_ö6
 *
sö6
;

118 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

120 i‡(!
r
->
•dy_°ªam
) {

121  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

127 i‡(
r
->
hódî_£¡
) {

128  
NGX_OK
;

131 
r
->
hódî_£¡
 = 1;

133 i‡(
r
 !r->
maö
) {

134  
NGX_OK
;

137 
c
 = 
r
->
c⁄√˘i⁄
;

139 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

140 
r
->
hódî_⁄ly
 = 1;

143 
r
->
hódîs_out
.
°©us
) {

145 
NGX_HTTP_OK
:

146 
NGX_HTTP_PARTIAL_CONTENT
:

149 
NGX_HTTP_NOT_MODIFIED
:

150 
r
->
hódî_⁄ly
 = 1;

153 
NGX_HTTP_NO_CONTENT
:

154 
r
->
hódî_⁄ly
 = 1;

156 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

158 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

159 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

164 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

165 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

168 
Àn
 = 
NGX_SPDY_NV_NUM_SIZE


169 + 
	`ngx_hâp_•dy_nv_nsize
(":version")

170 + 
	`ngx_hâp_•dy_nv_vsize
("HTTP/1.1")

171 + 
	`ngx_hâp_•dy_nv_nsize
(":status")

172 + (
r
->
hódîs_out
.
°©us_löe
.
Àn


173 ? 
NGX_SPDY_NV_VLEN_SIZE
 + 
r
->
hódîs_out
.
°©us_löe
.
Àn


174 : 
	`ngx_hâp_•dy_nv_vsize
("418"));

176 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

178 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

179 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("server");

180 
Àn
 +
˛cf
->
£rvî_tokís
 ? 
	`ngx_hâp_•dy_nv_vsize
(
NGINX_VER
)

181 : 
	`ngx_hâp_•dy_nv_vsize
("nginx");

184 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

185 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("date")

186 + 
	`ngx_hâp_•dy_nv_vsize
("Wed, 31 Dec 1986 10:00:00 GMT");

189 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

190 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("content-type")

191 + 
NGX_SPDY_NV_VLEN_SIZE
 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
;

193 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


194 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

196 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

200 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


201 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

203 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("content-length")

204 + 
NGX_SPDY_NV_VLEN_SIZE
 + 
NGX_OFF_T_LEN
;

207 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


208 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

210 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("last-modified")

211 + 
	`ngx_hâp_•dy_nv_vsize
("Wed, 31 Dec 1986 10:00:00 GMT");

214 i‡(
r
->
hódîs_out
.
loˇti⁄


215 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn


216 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/')

218 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

220 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

221 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

222 
ho°
 = 
cscf
->
£rvî_«me
;

224 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

225 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

228 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

229 
ho°
.
d©a
 = 
addr
;

231 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, &
ho°
, 0Ë!
NGX_OK
) {

232  
NGX_ERROR
;

236 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

238 #i‡(
NGX_HAVE_INET6
)

239 
AF_INET6
:

240 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

241 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

244 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

245 
AF_UNIX
:

246 
p‹t
 = 0;

250 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

251 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

255 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("location")

256 + 
	`ngx_hâp_•dy_nv_vsize
("https://")

257 + 
ho°
.
Àn


258 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
;

260 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

262 #i‡(
NGX_HTTP_SSL
)

263 i‡(
c
->
s¶
)

264 
p‹t
 = (port == 443) ? 0 :Öort;

267 
p‹t
 = (port == 80) ? 0 :Öort;

270 
p‹t
 = 0;

273 i‡(
p‹t
) {

274 
Àn
 += (":65535") - 1;

278 
	`ngx_°r_nuŒ
(&
ho°
);

279 
p‹t
 = 0;

282 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

283 
hódî
 = 
∑π
->
ñts
;

285 
i
 = 0; ; i++) {

287 i‡(
i
 >
∑π
->
√…s
) {

288 i‡(
∑π
->
√xt
 =
NULL
) {

292 
∑π
 =Ö¨t->
√xt
;

293 
hódî
 = 
∑π
->
ñts
;

294 
i
 = 0;

297 i‡(
hódî
[
i
].
hash
 == 0) {

301 
Àn
 +
NGX_SPDY_NV_NLEN_SIZE
 + 
hódî
[
i
].
key
.len

302 + 
NGX_SPDY_NV_VLEN_SIZE
 + 
hódî
[
i
].
vÆue
.
Àn
;

305 
buf
 = 
	`ngx_Æloc
(
Àn
, 
r
->
poﬁ
->
log
);

306 i‡(
buf
 =
NULL
) {

307  
NGX_ERROR
;

310 
œ°
 = 
buf
 + 
NGX_SPDY_NV_NUM_SIZE
;

312 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, ":version");

313 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÆ
(last, "HTTP/1.1");

315 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, ":status");

317 i‡(
r
->
hódîs_out
.
°©us_löe
.
Àn
) {

318 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÀn
(last,

319 
r
->
hódîs_out
.
°©us_löe
.
Àn
);

320 
œ°
 = 
	`ngx_˝ymem
÷a°, 
r
->
hódîs_out
.
°©us_löe
.
d©a
,

321 
r
->
hódîs_out
.
°©us_löe
.
Àn
);

323 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÀn
(last, 3);

324 
œ°
 = 
	`ngx_•rötf
÷a°, "%03ui", 
r
->
hódîs_out
.
°©us
);

327 
cou¡
 = 2;

329 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

330 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "server");

331 
œ°
 = 
˛cf
->
£rvî_tokís


332 ? 
	`ngx_hâp_•dy_nv_wrôe_vÆ
(
œ°
, 
NGINX_VER
)

333 : 
	`ngx_hâp_•dy_nv_wrôe_vÆ
(
œ°
, "nginx");

335 
cou¡
++;

338 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

339 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "date");

341 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÀn
÷a°, 
ngx_ˇched_hâp_time
.
Àn
);

343 
œ°
 = 
	`ngx_˝ymem
÷a°, 
ngx_ˇched_hâp_time
.
d©a
,

344 
ngx_ˇched_hâp_time
.
Àn
);

346 
cou¡
++;

349 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

351 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "content-type");

353 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

355 
œ°
 = 
	`ngx_˝ymem
(
p
, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

356 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

358 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


359 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

361 
œ°
 = 
	`ngx_˝ymem
(last, "; charset=", ("; charset=") - 1);

363 
œ°
 = 
	`ngx_˝ymem
÷a°, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

364 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

368 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 
œ°
 - 
p
;

369 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
;

372 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

373 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

375 
cou¡
++;

378 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


379 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

381 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "content-length");

383 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

385 
œ°
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

387 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

388 
œ°
 - 
p
);

390 
cou¡
++;

393 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


394 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

396 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "last-modified");

398 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

400 
œ°
 = 
	`ngx_hâp_time
(
p
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

402 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

403 
œ°
 - 
p
);

405 
cou¡
++;

408 i‡(
ho°
.
d©a
) {

410 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "location");

412 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

414 
œ°
 = 
	`ngx_˝ymem
(
p
, "http", ("http") - 1);

416 #i‡(
NGX_HTTP_SSL
)

417 i‡(
c
->
s¶
) {

418 *
œ°
++ ='s';

422 *
œ°
++ = ':'; *last++ = '/'; *last++ = '/';

424 
œ°
 = 
	`ngx_˝ymem
÷a°, 
ho°
.
d©a
, ho°.
Àn
);

426 i‡(
p‹t
) {

427 
œ°
 = 
	`ngx_•rötf
÷a°, ":%ui", 
p‹t
);

430 
œ°
 = 
	`ngx_˝ymem
÷a°, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

431 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

435 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
œ°
 - 
p
;

436 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

437 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "location");

439 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

440 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

442 
cou¡
++;

445 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

446 
hódî
 = 
∑π
->
ñts
;

448 
i
 = 0; ; i++) {

450 i‡(
i
 >
∑π
->
√…s
) {

451 i‡(
∑π
->
√xt
 =
NULL
) {

455 
∑π
 =Ö¨t->
√xt
;

456 
hódî
 = 
∑π
->
ñts
;

457 
i
 = 0;

460 i‡(
hódî
[
i
].
hash
 == 0 || header[i].hash == 2) {

464 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_∆í
÷a°, 
hódî
[
i
].
key
.
Àn
);

466 
	`ngx_°æow
(
œ°
, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

467 
œ°
 +
hódî
[
i
].
key
.
Àn
;

469 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

471 
œ°
 = 
	`ngx_˝ymem
(
p
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

473 
±
 = 
∑π
;

474 
h
 = 
hódî
;

476 
j
 = 
i
 + 1; ; j++) {

478 i‡(
j
 >
±
->
√…s
) {

479 i‡(
±
->
√xt
 =
NULL
) {

483 
±
 =Öt->
√xt
;

484 
h
 = 
±
->
ñts
;

485 
j
 = 0;

488 i‡(
h
[
j
].
hash
 == 0 || h[j].hash == 2

489 || 
h
[
j
].
key
.
Àn
 !
hódî
[
i
].key.len

490 || 
	`ngx_°∫ˇ£cmp
(
hódî
[
i
].
key
.
d©a
, 
h
[
j
].key.data,

491 
hódî
[
i
].
key
.
Àn
))

496 i‡(
h
[
j
].
vÆue
.
Àn
) {

497 i‡(
œ°
 !
p
) {

498 *
œ°
++ = '\0';

501 
œ°
 = 
	`ngx_˝ymem
÷a°, 
h
[
j
].
vÆue
.
d©a
, h[j].vÆue.
Àn
);

504 
h
[
j
].
hash
 = 2;

507 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

508 
œ°
 - 
p
);

510 
cou¡
++;

513 (Ë
	`ngx_hâp_•dy_nv_wrôe_num
(
buf
, 
cou¡
);

515 
°ªam
 = 
r
->
•dy_°ªam
;

516 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

518 
Àn
 = 
œ°
 - 
buf
;

520 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_SPDY_FRAME_HEADER_SIZE


521 + 
NGX_SPDY_SYN_REPLY_SIZE


522 + 
	`deÊ©eBound
(&
sc
->
z°ªam_out
, 
Àn
));

523 i‡(
b
 =
NULL
) {

524 
	`ngx_‰ì
(
buf
);

525  
NGX_ERROR
;

528 
b
->
œ°
 +
NGX_SPDY_FRAME_HEADER_SIZE
 + 
NGX_SPDY_SYN_REPLY_SIZE
;

530 
sc
->
z°ªam_out
.
√xt_ö
 = 
buf
;

531 
sc
->
z°ªam_out
.
avaû_ö
 = 
Àn
;

532 
sc
->
z°ªam_out
.
√xt_out
 = 
b
->
œ°
;

533 
sc
->
z°ªam_out
.
avaû_out
 = 
b
->
íd
 - b->
œ°
;

535 
rc
 = 
	`deÊ©e
(&
sc
->
z°ªam_out
, 
Z_SYNC_FLUSH
);

537 
	`ngx_‰ì
(
buf
);

539 i‡(
rc
 !
Z_OK
) {

540 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "deÊ©e(ËÁûed: %d", 
rc
);

541  
NGX_ERROR
;

544 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

546 
sc
->
z°ªam_out
.
√xt_ö
, sc->z°ªam_out.
√xt_out
,

547 
sc
->
z°ªam_out
.
avaû_ö
, sc->z°ªam_out.
avaû_out
,

548 
rc
);

550 
b
->
œ°
 = 
sc
->
z°ªam_out
.
√xt_out
;

552 
p
 = 
b
->
pos
;

553 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_SYN_REPLY
);

555 
Àn
 = 
b
->
œ°
 - b->
pos
;

557 
r
->
hódî_size
 = 
Àn
;

559 
Àn
 -
NGX_SPDY_FRAME_HEADER_SIZE
;

561 i‡(
r
->
hódî_⁄ly
) {

562 
b
->
œ°_buf
 = 1;

563 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 
NGX_SPDY_FLAG_FIN
, 
Àn
);

566 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
Àn
);

569 (Ë
	`ngx_•dy_‰ame_wrôe_sid
(
p
, 
°ªam
->
id
);

571 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

572 i‡(
˛
 =
NULL
) {

573  
NGX_ERROR
;

576 
˛
->
buf
 = 
b
;

577 
˛
->
√xt
 = 
NULL
;

579 
‰ame
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_•dy_out_‰ame_t
));

580 i‡(
‰ame
 =
NULL
) {

581  
NGX_ERROR
;

584 
‰ame
->
fú°
 = 
˛
;

585 
‰ame
->
œ°
 = 
˛
;

586 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_syn_‰ame_h™dÀr
;

587 
‰ame
->
°ªam
 = stream;

588 
‰ame
->
Àngth
 = 
Àn
;

589 
‰ame
->
¥i‹ôy
 = 
°ªam
->priority;

590 
‰ame
->
blocked
 = 1;

591 
‰ame
->
fö
 = 
r
->
hódî_⁄ly
;

593 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

595 
°ªam
->
id
, 
‰ame
, føme->
Àngth
);

597 
	`ngx_hâp_•dy_queue_blocked_‰ame
(
sc
, 
‰ame
);

599 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

600 i‡(
˛n
 =
NULL
) {

601  
NGX_ERROR
;

604 
˛n
->
h™dÀr
 = 
ngx_hâp_•dy_fûãr_˛ónup
;

605 
˛n
->
d©a
 = 
°ªam
;

607 
°ªam
->
queued
 = 1;

609 
c
->
£nd_chaö
 = 
ngx_hâp_•dy_£nd_chaö
;

610 
c
->
√ed_œ°_buf
 = 1;

612  
	`ngx_hâp_•dy_fûãr_£nd
(
c
, 
°ªam
);

613 
	}
}

616 
ngx_chaö_t
 *

617 
	$ngx_hâp_•dy_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

619 
off_t
 
size
, 
off£t
;

620 
size_t
 
ª°
, 
‰ame_size
;

621 
ngx_chaö_t
 *
˛
, *
out
, **
 
;

622 
ngx_hâp_ªque°_t
 *
r
;

623 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

624 
ngx_hâp_•dy_loc_c⁄f_t
 *
¶cf
;

625 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

626 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

628 
r
 = 
fc
->
d©a
;

629 
°ªam
 = 
r
->
•dy_°ªam
;

631 #i‡(
NGX_SUPPRESS_WARN
)

632 
size
 = 0;

635 
ö
) {

636 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

638 i‡(
size
 || 
ö
->
buf
->
œ°_buf
) {

642 
ö
 = in->
√xt
;

645 i‡(
ö
 =
NULL
) {

647 i‡(
°ªam
->
queued
) {

648 
fc
->
wrôe
->
dñayed
 = 1;

650 
fc
->
buf„ªd
 &~
NGX_SPDY_BUFFERED
;

653  
NULL
;

656 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

658 i‡(
size
 && 
	`ngx_hâp_•dy_Êow_c⁄åﬁ
(
sc
, 
°ªam
Ë=
NGX_DECLINED
) {

659 
fc
->
wrôe
->
dñayed
 = 1;

660  
ö
;

663 i‡(
limô
 =0 ||Üimô > (
off_t
Ë
sc
->
£nd_wödow
) {

664 
limô
 = 
sc
->
£nd_wödow
;

667 i‡(
limô
 > 
°ªam
->
£nd_wödow
) {

668 
limô
 = (
°ªam
->
£nd_wödow
 > 0) ? stream->send_window : 0;

671 i‡(
ö
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_shadow
) {

672 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

673 i‡(
˛
 =
NULL
) {

674  
NGX_CHAIN_ERROR
;

677 
˛
->
buf
 = 
ö
->buf;

678 
ö
->
buf
 = 
˛
->buf->
shadow
;

680 
off£t
 = 
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)

681 ? (
˛
->
buf
->
pos
 - 
ö
->buf->pos)

682 : (
˛
->
buf
->
fûe_pos
 - 
ö
->buf->file_pos);

684 
˛
->
√xt
 = 
°ªam
->
‰ì_bufs
;

685 
°ªam
->
‰ì_bufs
 = 
˛
;

688 
off£t
 = 0;

691 #i‡(
NGX_SUPPRESS_WARN
)

692 
˛
 = 
NULL
;

695 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_•dy_moduÀ
);

697 
‰ame_size
 = (
limô
 <(
off_t
Ë
¶cf
->
chunk_size
Ë? (
size_t
)Üimit

698 : 
¶cf
->
chunk_size
;

701 
 
 = &
out
;

702 
ª°
 = 
‰ame_size
;

704 (
off_t
Ë
ª°
 >
size
) {

706 i‡(
off£t
) {

707 
˛
 = 
	`ngx_hâp_•dy_fûãr_gë_shadow
(
°ªam
, 
ö
->
buf
,

708 
off£t
, 
size
);

709 i‡(
˛
 =
NULL
) {

710  
NGX_CHAIN_ERROR
;

713 
off£t
 = 0;

716 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

717 i‡(
˛
 =
NULL
) {

718  
NGX_CHAIN_ERROR
;

721 
˛
->
buf
 = 
ö
->buf;

724 *
 
 = 
˛
;

725 
 
 = &
˛
->
√xt
;

727 
ª°
 -(
size_t
Ë
size
;

728 
ö
 = in->
√xt
;

730 i‡(
ö
 =
NULL
) {

731 
‰ame_size
 -
ª°
;

732 
ª°
 = 0;

736 
size
 = 
	`ngx_buf_size
(
ö
->
buf
);

739 i‡(
ª°
) {

740 
˛
 = 
	`ngx_hâp_•dy_fûãr_gë_shadow
(
°ªam
, 
ö
->
buf
,

741 
off£t
, 
ª°
);

742 i‡(
˛
 =
NULL
) {

743  
NGX_CHAIN_ERROR
;

746 
˛
->
buf
->
Êush
 = 0;

747 
˛
->
buf
->
œ°_buf
 = 0;

749 *
 
 = 
˛
;

751 
off£t
 +
ª°
;

752 
size
 -
ª°
;

755 
‰ame
 = 
	`ngx_hâp_•dy_fûãr_gë_d©a_‰ame
(
°ªam
, 
‰ame_size
,

756 
out
, 
˛
);

757 i‡(
‰ame
 =
NULL
) {

758  
NGX_CHAIN_ERROR
;

761 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

763 
sc
->
£nd_wödow
 -
‰ame_size
;

765 
°ªam
->
£nd_wödow
 -
‰ame_size
;

766 
°ªam
->
queued
++;

768 i‡(
ö
 =
NULL
) {

772 
limô
 -
‰ame_size
;

774 i‡(
limô
 == 0) {

778 i‡(
limô
 < (
off_t
Ë
¶cf
->
chunk_size
) {

779 
‰ame_size
 = (
size_t
Ë
limô
;

783 i‡(
off£t
) {

784 
˛
 = 
	`ngx_hâp_•dy_fûãr_gë_shadow
(
°ªam
, 
ö
->
buf
, 
off£t
, 
size
);

785 i‡(
˛
 =
NULL
) {

786  
NGX_CHAIN_ERROR
;

789 
ö
->
buf
 = 
˛
->buf;

790 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
˛
);

793 i‡(
	`ngx_hâp_•dy_fûãr_£nd
(
fc
, 
°ªam
Ë=
NGX_ERROR
) {

794  
NGX_CHAIN_ERROR
;

797 i‡(
ö
 && 
	`ngx_hâp_•dy_Êow_c⁄åﬁ
(
sc
, 
°ªam
Ë=
NGX_DECLINED
) {

798 
fc
->
wrôe
->
dñayed
 = 1;

801  
ö
;

802 
	}
}

805 
ngx_chaö_t
 *

806 
	$ngx_hâp_•dy_fûãr_gë_shadow
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_buf_t
 *
buf
,

807 
off_t
 
off£t
, off_à
size
)

809 
ngx_buf_t
 *
chunk
;

810 
ngx_chaö_t
 *
˛
;

812 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
°ªam
->
ªque°
->
poﬁ
, &°ªam->
‰ì_bufs
);

813 i‡(
˛
 =
NULL
) {

814  
NULL
;

817 
chunk
 = 
˛
->
buf
;

819 
	`ngx_mem˝y
(
chunk
, 
buf
, (
ngx_buf_t
));

821 
chunk
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_shadow
;

822 
chunk
->
shadow
 = 
buf
;

824 i‡(
	`ngx_buf_ö_mem‹y
(
chunk
)) {

825 
chunk
->
pos
 +
off£t
;

826 
chunk
->
œ°
 = chunk->
pos
 + 
size
;

829 i‡(
chunk
->
ö_fûe
) {

830 
chunk
->
fûe_pos
 +
off£t
;

831 
chunk
->
fûe_œ°
 = chunk->
fûe_pos
 + 
size
;

834  
˛
;

835 
	}
}

838 
ngx_hâp_•dy_out_‰ame_t
 *

839 
	$ngx_hâp_•dy_fûãr_gë_d©a_‰ame
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
,

840 
size_t
 
Àn
, 
ngx_chaö_t
 *
fú°
,Çgx_chaö_à*
œ°
)

842 
u_ch¨
 *
p
;

843 
ngx_buf_t
 *
buf
;

844 
ngx_uöt_t
 
Êags
;

845 
ngx_chaö_t
 *
˛
;

846 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

849 
‰ame
 = 
°ªam
->
‰ì_‰ames
;

851 i‡(
‰ame
) {

852 
°ªam
->
‰ì_‰ames
 = 
‰ame
->
√xt
;

855 
‰ame
 = 
	`ngx_∑Œoc
(
°ªam
->
ªque°
->
poﬁ
,

856 (
ngx_hâp_•dy_out_‰ame_t
));

857 i‡(
‰ame
 =
NULL
) {

858  
NULL
;

862 
Êags
 = 
œ°
->
buf
->
œ°_buf
 ? 
NGX_SPDY_FLAG_FIN
 : 0;

864 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

866 
°ªam
->
id
, 
‰ame
, 
Àn
, 
Êags
);

868 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
°ªam
->
ªque°
->
poﬁ
,

869 &
°ªam
->
‰ì_d©a_hódîs
);

870 i‡(
˛
 =
NULL
) {

871  
NULL
;

874 
buf
 = 
˛
->buf;

876 i‡(
buf
->
°¨t
) {

877 
p
 = 
buf
->
°¨t
;

878 
buf
->
pos
 = 
p
;

880 
p
 +
NGX_SPDY_SID_SIZE
;

882 (Ë
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
(
p
, 
Êags
, 
Àn
);

885 
p
 = 
	`ngx_∑Œoc
(
°ªam
->
ªque°
->
poﬁ
, 
NGX_SPDY_FRAME_HEADER_SIZE
);

886 i‡(
p
 =
NULL
) {

887  
NULL
;

890 
buf
->
pos
 = 
p
;

891 
buf
->
°¨t
 = 
p
;

893 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
°ªam
->
id
);

894 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 
Êags
, 
Àn
);

896 
buf
->
œ°
 = 
p
;

897 
buf
->
íd
 = 
p
;

899 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_d©a_‰ame
;

900 
buf
->
mem‹y
 = 1;

903 
˛
->
√xt
 = 
fú°
;

904 
fú°
 = 
˛
;

906 
œ°
->
buf
->
Êush
 = 1;

908 
‰ame
->
fú°
 = first;

909 
‰ame
->
œ°
 =Üast;

910 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_d©a_‰ame_h™dÀr
;

911 
‰ame
->
°ªam
 = stream;

912 
‰ame
->
Àngth
 = 
Àn
;

913 
‰ame
->
¥i‹ôy
 = 
°ªam
->priority;

914 
‰ame
->
blocked
 = 0;

915 
‰ame
->
fö
 = 
œ°
->
buf
->
œ°_buf
;

917  
‰ame
;

918 
	}
}

921 
ngx_ölöe
 
ngx_öt_t


922 
	$ngx_hâp_•dy_fûãr_£nd
(
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

924 
°ªam
->
blocked
 = 1;

926 i‡(
	`ngx_hâp_•dy_£nd_ouçut_queue
(
°ªam
->
c⁄√˘i⁄
Ë=
NGX_ERROR
) {

927 
fc
->
îr‹
 = 1;

928  
NGX_ERROR
;

931 
°ªam
->
blocked
 = 0;

933 i‡(
°ªam
->
queued
) {

934 
fc
->
buf„ªd
 |
NGX_SPDY_BUFFERED
;

935 
fc
->
wrôe
->
dñayed
 = 1;

936  
NGX_AGAIN
;

939 
fc
->
buf„ªd
 &~
NGX_SPDY_BUFFERED
;

941  
NGX_OK
;

942 
	}
}

945 
ngx_ölöe
 
ngx_öt_t


946 
	$ngx_hâp_•dy_Êow_c⁄åﬁ
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

947 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

949 i‡(
°ªam
->
£nd_wödow
 <= 0) {

950 
°ªam
->
exhau°ed
 = 1;

951  
NGX_DECLINED
;

954 i‡(
sc
->
£nd_wödow
 == 0) {

955 
	`ngx_hâp_•dy_waôög_queue
(
sc
, 
°ªam
);

956  
NGX_DECLINED
;

959  
NGX_OK
;

960 
	}
}

964 
	$ngx_hâp_•dy_waôög_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

965 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

967 
ngx_queue_t
 *
q
;

968 
ngx_hâp_•dy_°ªam_t
 *
s
;

970 i‡(
°ªam
->
h™dÀd
) {

974 
°ªam
->
h™dÀd
 = 1;

976 
q
 = 
	`ngx_queue_œ°
(&
sc
->
waôög
);

977 
q
 !
	`ngx_queue_£¡öñ
(&
sc
->
waôög
);

978 
q
 = 
	`ngx_queue_¥ev
(q))

980 
s
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_•dy_°ªam_t
, 
queue
);

985 i‡(
°ªam
->
¥i‹ôy
 >
s
->priority) {

990 
	`ngx_queue_ö£π_a·î
(
q
, &
°ªam
->
queue
);

991 
	}
}

994 
ngx_öt_t


995 
	$ngx_hâp_•dy_syn_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

996 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

998 
ngx_buf_t
 *
buf
;

999 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1001 
buf
 = 
‰ame
->
fú°
->buf;

1003 i‡(
buf
->
pos
 !buf->
œ°
) {

1004  
NGX_AGAIN
;

1007 
°ªam
 = 
‰ame
->stream;

1009 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1010 "•dy:%uòSYN_REPLY fømê%∞wa†£¡", 
°ªam
->
id
, 
‰ame
);

1012 
	`ngx_‰ì_chaö
(
°ªam
->
ªque°
->
poﬁ
, 
‰ame
->
fú°
);

1014 
	`ngx_hâp_•dy_h™dÀ_‰ame
(
°ªam
, 
‰ame
);

1016 
	`ngx_hâp_•dy_h™dÀ_°ªam
(
sc
, 
°ªam
);

1018  
NGX_OK
;

1019 
	}
}

1022 
ngx_öt_t


1023 
	$ngx_hâp_•dy_d©a_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1024 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

1026 
ngx_buf_t
 *
buf
;

1027 
ngx_chaö_t
 *
˛
, *
 
;

1028 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1030 
°ªam
 = 
‰ame
->stream;

1032 
˛
 = 
‰ame
->
fú°
;

1034 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_d©a_‰ame
) {

1036 i‡(
˛
->
buf
->
pos
 !˛->buf->
œ°
) {

1037 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1039 
°ªam
->
id
, 
‰ame
);

1041  
NGX_AGAIN
;

1044 
 
 = 
˛
->
√xt
;

1046 
˛
->
√xt
 = 
°ªam
->
‰ì_d©a_hódîs
;

1047 
°ªam
->
‰ì_d©a_hódîs
 = 
˛
;

1049 i‡(
˛
 =
‰ame
->
œ°
) {

1050 
d⁄e
;

1053 
˛
 = 
 
;

1057 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_shadow
) {

1058 
buf
 = 
˛
->buf->
shadow
;

1060 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

1061 
buf
->
pos
 = 
˛
->buf->pos;

1064 i‡(
buf
->
ö_fûe
) {

1065 
buf
->
fûe_pos
 = 
˛
->buf->file_pos;

1069 i‡(
	`ngx_buf_size
(
˛
->
buf
) != 0) {

1071 i‡(
˛
 !
‰ame
->
fú°
) {

1072 
‰ame
->
fú°
 = 
˛
;

1073 
	`ngx_hâp_•dy_h™dÀ_°ªam
(
sc
, 
°ªam
);

1076 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1078 
°ªam
->
id
, 
‰ame
);

1080  
NGX_AGAIN
;

1083 
 
 = 
˛
->
√xt
;

1085 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_gë_shadow
) {

1086 
˛
->
√xt
 = 
°ªam
->
‰ì_bufs
;

1087 
°ªam
->
‰ì_bufs
 = 
˛
;

1090 
	`ngx_‰ì_chaö
(
°ªam
->
ªque°
->
poﬁ
, 
˛
);

1093 i‡(
˛
 =
‰ame
->
œ°
) {

1094 
d⁄e
;

1097 
˛
 = 
 
;

1100 
d⁄e
:

1102 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1103 "•dy:%uòDATA fømê%∞wa†£¡", 
°ªam
->
id
, 
‰ame
);

1105 
°ªam
->
ªque°
->
hódî_size
 +
NGX_SPDY_FRAME_HEADER_SIZE
;

1107 
	`ngx_hâp_•dy_h™dÀ_‰ame
(
°ªam
, 
‰ame
);

1109 
	`ngx_hâp_•dy_h™dÀ_°ªam
(
sc
, 
°ªam
);

1111  
NGX_OK
;

1112 
	}
}

1115 
ngx_ölöe
 

1116 
	$ngx_hâp_•dy_h™dÀ_‰ame
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
,

1117 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

1119 
ngx_hâp_ªque°_t
 *
r
;

1121 
r
 = 
°ªam
->
ªque°
;

1123 
r
->
c⁄√˘i⁄
->
£¡
 +
NGX_SPDY_FRAME_HEADER_SIZE
 + 
‰ame
->
Àngth
;

1125 i‡(
‰ame
->
fö
) {

1126 
°ªam
->
out_˛o£d
 = 1;

1129 
‰ame
->
√xt
 = 
°ªam
->
‰ì_‰ames
;

1130 
°ªam
->
‰ì_‰ames
 = 
‰ame
;

1132 
°ªam
->
queued
--;

1133 
	}
}

1136 
ngx_ölöe
 

1137 
	$ngx_hâp_•dy_h™dÀ_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1138 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

1140 
ngx_evít_t
 *
wev
;

1142 i‡(
°ªam
->
h™dÀd
 || såóm->
blocked
 || såóm->
exhau°ed
) {

1146 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

1153 i‡(!
wev
->
timî_£t
) {

1154 
wev
->
dñayed
 = 0;

1156 
°ªam
->
h™dÀd
 = 1;

1157 
	`ngx_queue_ö£π_èû
(&
sc
->
po°ed
, &
°ªam
->
queue
);

1159 
	}
}

1163 
	$ngx_hâp_•dy_fûãr_˛ónup
(*
d©a
)

1165 
ngx_hâp_•dy_°ªam_t
 *
°ªam
 = 
d©a
;

1167 
size_t
 
dñè
;

1168 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
, **
‚
;

1169 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

1171 i‡(
°ªam
->
h™dÀd
) {

1172 
°ªam
->
h™dÀd
 = 0;

1173 
	`ngx_queue_ªmove
(&
°ªam
->
queue
);

1176 i‡(
°ªam
->
queued
 == 0) {

1180 
dñè
 = 0;

1181 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

1182 
‚
 = &
sc
->
œ°_out
;

1185 
‰ame
 = *
‚
;

1187 i‡(
‰ame
 =
NULL
) {

1191 i‡(
‰ame
->
°ªam
 =°ªam && !‰ame->
blocked
) {

1192 *
‚
 = 
‰ame
->
√xt
;

1194 
dñè
 +
‰ame
->
Àngth
;

1196 i‡(--
°ªam
->
queued
 == 0) {

1203 
‚
 = &
‰ame
->
√xt
;

1206 i‡(
sc
->
£nd_wödow
 =0 && 
dñè
 && !
	`ngx_queue_em±y
(&sc->
waôög
)) {

1207 
	`ngx_queue_add
(&
sc
->
po°ed
, &sc->
waôög
);

1208 
	`ngx_queue_öô
(&
sc
->
waôög
);

1211 
sc
->
£nd_wödow
 +
dñè
;

1212 
	}
}

1215 
ngx_öt_t


1216 
	$ngx_hâp_•dy_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1218 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1219 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_•dy_hódî_fûãr
;

1221  
NGX_OK
;

1222 
	}
}

	@src/http/ngx_http_spdy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_•dy_moduÀ.h
>

14 
ngx_öt_t
 
ngx_hâp_•dy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_öt_t
 
ngx_hâp_•dy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

18 
ngx_öt_t
 
ngx_hâp_•dy_ªque°_¥i‹ôy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

21 
ngx_öt_t
 
ngx_hâp_•dy_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

23 *
ngx_hâp_•dy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_•dy_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

25 *
ngx_hâp_•dy_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

26 *
ngx_hâp_•dy_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

27 *
chûd
);

28 *
ngx_hâp_•dy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

29 *
ngx_hâp_•dy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

30 *
chûd
);

32 *
ngx_hâp_•dy_ªcv_buf„r_size
(
ngx_c⁄f_t
 *
cf
, *
po°
,

33 *
d©a
);

34 *
ngx_hâp_•dy_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

35 *
ngx_hâp_•dy_°ªams_ödex_mask
(
ngx_c⁄f_t
 *
cf
, *
po°
,

36 *
d©a
);

37 *
ngx_hâp_•dy_chunk_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

40 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_•dy_hódîs_comp_bounds
 = {

41 
ngx_c⁄f_check_num_bounds
, 0, 9

44 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_ªcv_buf„r_size_po°
 =

45 { 
ngx_hâp_•dy_ªcv_buf„r_size
 };

46 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_poﬁ_size_po°
 =

47 { 
ngx_hâp_•dy_poﬁ_size
 };

48 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_°ªams_ödex_mask_po°
 =

49 { 
ngx_hâp_•dy_°ªams_ödex_mask
 };

50 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_chunk_size_po°
 =

51 { 
ngx_hâp_•dy_chunk_size
 };

54 
ngx_comm™d_t
 
	gngx_hâp_•dy_comm™ds
[] = {

56 { 
ngx_°rög
("spdy_recv_buffer_size"),

57 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_size_¶Ÿ
,

59 
NGX_HTTP_MAIN_CONF_OFFSET
,

60 
off£tof
(
ngx_hâp_•dy_maö_c⁄f_t
, 
ªcv_buf„r_size
),

61 &
ngx_hâp_•dy_ªcv_buf„r_size_po°
 },

63 { 
ngx_°rög
("spdy_pool_size"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_size_¶Ÿ
,

66 
NGX_HTTP_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
poﬁ_size
),

68 &
ngx_hâp_•dy_poﬁ_size_po°
 },

70 { 
ngx_°rög
("spdy_max_concurrent_streams"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_num_¶Ÿ
,

73 
NGX_HTTP_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
c⁄cuºít_°ªams
),

75 
NULL
 },

77 { 
ngx_°rög
("spdy_streams_index_size"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_num_¶Ÿ
,

80 
NGX_HTTP_SRV_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
°ªams_ödex_mask
),

82 &
ngx_hâp_•dy_°ªams_ödex_mask_po°
 },

84 { 
ngx_°rög
("spdy_recv_timeout"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_m£c_¶Ÿ
,

87 
NGX_HTTP_SRV_CONF_OFFSET
,

88 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
ªcv_timeout
),

89 
NULL
 },

91 { 
ngx_°rög
("spdy_keepalive_timeout"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_c⁄f_£t_m£c_¶Ÿ
,

94 
NGX_HTTP_SRV_CONF_OFFSET
,

95 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
kì∑live_timeout
),

96 
NULL
 },

98 { 
ngx_°rög
("spdy_headers_comp"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_c⁄f_£t_num_¶Ÿ
,

101 
NGX_HTTP_SRV_CONF_OFFSET
,

102 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
hódîs_comp
),

103 &
ngx_hâp_•dy_hódîs_comp_bounds
 },

105 { 
ngx_°rög
("spdy_chunk_size"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_c⁄f_£t_size_¶Ÿ
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

109 
off£tof
(
ngx_hâp_•dy_loc_c⁄f_t
, 
chunk_size
),

110 &
ngx_hâp_•dy_chunk_size_po°
 },

112 
ngx_nuŒ_comm™d


116 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•dy_moduÀ_˘x
 = {

117 
ngx_hâp_•dy_add_v¨übÀs
,

118 
NULL
,

120 
ngx_hâp_•dy_¸óã_maö_c⁄f
,

121 
ngx_hâp_•dy_öô_maö_c⁄f
,

123 
ngx_hâp_•dy_¸óã_§v_c⁄f
,

124 
ngx_hâp_•dy_mîge_§v_c⁄f
,

126 
ngx_hâp_•dy_¸óã_loc_c⁄f
,

127 
ngx_hâp_•dy_mîge_loc_c⁄f


131 
ngx_moduÀ_t
 
	gngx_hâp_•dy_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_hâp_•dy_moduÀ_˘x
,

134 
ngx_hâp_•dy_comm™ds
,

135 
NGX_HTTP_MODULE
,

136 
NULL
,

137 
ngx_hâp_•dy_moduÀ_öô
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_•dy_v¨s
[] = {

149 { 
ngx_°rög
("•dy"), 
NULL
,

150 
ngx_hâp_•dy_v¨übÀ
, 0, 0, 0 },

152 { 
ngx_°rög
("•dy_ªque°_¥i‹ôy"), 
NULL
,

153 
ngx_hâp_•dy_ªque°_¥i‹ôy_v¨übÀ
, 0, 0, 0 },

155 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

159 
ngx_öt_t


160 
	$ngx_hâp_•dy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

162 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

164 
v
 = 
ngx_hâp_•dy_v¨s
; v->
«me
.
Àn
; v++) {

165 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

166 i‡(
v¨
 =
NULL
) {

167  
NGX_ERROR
;

170 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

171 
v¨
->
d©a
 = 
v
->data;

174  
NGX_OK
;

175 
	}
}

178 
ngx_öt_t


179 
	$ngx_hâp_•dy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

180 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

182 i‡(
r
->
•dy_°ªam
) {

183 
v
->
Àn
 = ("3.1") - 1;

184 
v
->
vÆid
 = 1;

185 
v
->
no_ˇchóbÀ
 = 0;

186 
v
->
nŸ_found
 = 0;

187 
v
->
d©a
 = (
u_ch¨
 *) "3.1";

189  
NGX_OK
;

192 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

194  
NGX_OK
;

195 
	}
}

198 
ngx_öt_t


199 
	$ngx_hâp_•dy_ªque°_¥i‹ôy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

200 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

202 i‡(
r
->
•dy_°ªam
) {

203 
v
->
Àn
 = 1;

204 
v
->
vÆid
 = 1;

205 
v
->
no_ˇchóbÀ
 = 0;

206 
v
->
nŸ_found
 = 0;

208 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 1);

209 i‡(
v
->
d©a
 =
NULL
) {

210  
NGX_ERROR
;

213 
v
->
d©a
[0] = '0' + (
u_ch¨
Ë
r
->
•dy_°ªam
->
¥i‹ôy
;

215  
NGX_OK
;

218 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

220  
NGX_OK
;

221 
	}
}

224 
ngx_öt_t


225 
	$ngx_hâp_•dy_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

227 
	`ngx_hâp_•dy_ªque°_hódîs_öô
();

229  
NGX_OK
;

230 
	}
}

234 
	$ngx_hâp_•dy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

236 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
;

238 
smcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•dy_maö_c⁄f_t
));

239 i‡(
smcf
 =
NULL
) {

240  
NULL
;

243 
smcf
->
ªcv_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

245  
smcf
;

246 
	}
}

250 
	$ngx_hâp_•dy_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

252 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
 = 
c⁄f
;

254 
	`ngx_c⁄f_öô_size_vÆue
(
smcf
->
ªcv_buf„r_size
, 256 * 1024);

256  
NGX_CONF_OK
;

257 
	}
}

261 
	$ngx_hâp_•dy_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

263 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

265 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•dy_§v_c⁄f_t
));

266 i‡(
sscf
 =
NULL
) {

267  
NULL
;

270 
sscf
->
poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

272 
sscf
->
c⁄cuºít_°ªams
 = 
NGX_CONF_UNSET_UINT
;

273 
sscf
->
°ªams_ödex_mask
 = 
NGX_CONF_UNSET_UINT
;

275 
sscf
->
ªcv_timeout
 = 
NGX_CONF_UNSET_MSEC
;

276 
sscf
->
kì∑live_timeout
 = 
NGX_CONF_UNSET_MSEC
;

278 
sscf
->
hódîs_comp
 = 
NGX_CONF_UNSET
;

280  
sscf
;

281 
	}
}

285 
	$ngx_hâp_•dy_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

287 
ngx_hâp_•dy_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

288 
ngx_hâp_•dy_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

290 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
poﬁ_size
, 
¥ev
->pool_size, 4096);

292 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
c⁄cuºít_°ªams
,

293 
¥ev
->
c⁄cuºít_°ªams
, 100);

295 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ªams_ödex_mask
,

296 
¥ev
->
°ªams_ödex_mask
, 32 - 1);

298 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªcv_timeout
,

299 
¥ev
->
ªcv_timeout
, 30000);

300 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
kì∑live_timeout
,

301 
¥ev
->
kì∑live_timeout
, 180000);

303 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
hódîs_comp
, 
¥ev
->headers_comp, 0);

305  
NGX_CONF_OK
;

306 
	}
}

310 
	$ngx_hâp_•dy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

312 
ngx_hâp_•dy_loc_c⁄f_t
 *
¶cf
;

314 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•dy_loc_c⁄f_t
));

315 i‡(
¶cf
 =
NULL
) {

316  
NULL
;

319 
¶cf
->
chunk_size
 = 
NGX_CONF_UNSET_SIZE
;

321  
¶cf
;

322 
	}
}

326 
	$ngx_hâp_•dy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

328 
ngx_hâp_•dy_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

329 
ngx_hâp_•dy_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

331 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
chunk_size
, 
¥ev
->chunk_size, 8 * 1024);

333  
NGX_CONF_OK
;

334 
	}
}

338 
	$ngx_hâp_•dy_ªcv_buf„r_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

340 
size_t
 *
•
 = 
d©a
;

342 i‡(*
•
 <2 * 
NGX_SPDY_STATE_BUFFER_SIZE
) {

346  
NGX_CONF_OK
;

347 
	}
}

351 
	$ngx_hâp_•dy_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

353 
size_t
 *
•
 = 
d©a
;

355 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

358 
NGX_MIN_POOL_SIZE
);

359  
NGX_CONF_ERROR
;

362 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

363 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

365 
NGX_POOL_ALIGNMENT
);

366  
NGX_CONF_ERROR
;

369  
NGX_CONF_OK
;

370 
	}
}

374 
	$ngx_hâp_•dy_°ªams_ödex_mask
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

376 
ngx_uöt_t
 *
≈
 = 
d©a
;

378 
ngx_uöt_t
 
mask
;

380 
mask
 = *
≈
 - 1;

382 i‡(*
≈
 =0 || (*≈ & 
mask
)) {

386 *
≈
 = 
mask
;

388  
NGX_CONF_OK
;

389 
	}
}

393 
	$ngx_hâp_•dy_chunk_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

395 
size_t
 *
•
 = 
d©a
;

397 i‡(*
•
 == 0) {

398 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

400  
NGX_CONF_ERROR
;

403 i‡(*
•
 > 
NGX_SPDY_MAX_FRAME_SIZE
) {

404 *
•
 = 
NGX_SPDY_MAX_FRAME_SIZE
;

407  
NGX_CONF_OK
;

408 
	}
}

	@src/http/ngx_http_spdy_module.h

8 #i‚de‡
_NGX_HTTP_SPDY_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_SPDY_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
size_t
 
	mªcv_buf„r_size
;

19 
u_ch¨
 *
	mªcv_buf„r
;

20 } 
	tngx_hâp_•dy_maö_c⁄f_t
;

24 
size_t
 
	mpoﬁ_size
;

25 
ngx_uöt_t
 
	mc⁄cuºít_°ªams
;

26 
ngx_uöt_t
 
	m°ªams_ödex_mask
;

27 
ngx_m£c_t
 
	mªcv_timeout
;

28 
ngx_m£c_t
 
	mkì∑live_timeout
;

29 
ngx_öt_t
 
	mhódîs_comp
;

30 } 
	tngx_hâp_•dy_§v_c⁄f_t
;

34 
size_t
 
	mchunk_size
;

35 } 
	tngx_hâp_•dy_loc_c⁄f_t
;

38 
ngx_moduÀ_t
 
ngx_hâp_•dy_moduÀ
;

	@src/http/ngx_http_special_response.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
);

16 
ngx_öt_t
 
ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
);

18 
ngx_öt_t
 
ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
);

21 
u_ch¨
 
	gngx_hâp_îr‹_fuŒ_èû
[] =

22 "<hr><˚¡î>" 
NGINX_VER
 "</˚¡î>" 
CRLF


23 "</body>" 
CRLF


24 "</html>" 
CRLF


28 
u_ch¨
 
	gngx_hâp_îr‹_èû
[] =

29 "<hr><˚¡î>ngöx</˚¡î>" 
CRLF


30 "</body>" 
CRLF


31 "</html>" 
CRLF


35 
u_ch¨
 
	gngx_hâp_msõ_∑ddög
[] =

36 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


37 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


38 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


39 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


40 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


41 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


45 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_hód
[] =

49 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_èû
[] =

50 "\"></hód><body></body></html>" 
CRLF
;

53 
	gngx_hâp_îr‹_301_∑ge
[] =

54 "<html>" 
CRLF


55 "<hód><tôÀ>301 Moved Pîm™íéy</tôÀ></hód>" 
CRLF


56 "<body bgcﬁ‹=\"whôe\">" 
CRLF


57 "<˚¡î><h1>301 Moved Pîm™íéy</h1></˚¡î>" 
CRLF


61 
	gngx_hâp_îr‹_302_∑ge
[] =

62 "<html>" 
CRLF


63 "<hód><tôÀ>302 Found</tôÀ></hód>" 
CRLF


64 "<body bgcﬁ‹=\"whôe\">" 
CRLF


65 "<˚¡î><h1>302 Found</h1></˚¡î>" 
CRLF


69 
	gngx_hâp_îr‹_303_∑ge
[] =

70 "<html>" 
CRLF


71 "<hód><tôÀ>303 Sì Othî</tôÀ></hód>" 
CRLF


72 "<body bgcﬁ‹=\"whôe\">" 
CRLF


73 "<˚¡î><h1>303 Sì Othî</h1></˚¡î>" 
CRLF


77 
	gngx_hâp_îr‹_307_∑ge
[] =

78 "<html>" 
CRLF


79 "<hód><tôÀ>307 Temp‹¨y Redúe˘</tôÀ></hód>" 
CRLF


80 "<body bgcﬁ‹=\"whôe\">" 
CRLF


81 "<˚¡î><h1>307 Temp‹¨y Redúe˘</h1></˚¡î>" 
CRLF


85 
	gngx_hâp_îr‹_400_∑ge
[] =

86 "<html>" 
CRLF


87 "<hód><tôÀ>400 Bad Reque°</tôÀ></hód>" 
CRLF


88 "<body bgcﬁ‹=\"whôe\">" 
CRLF


89 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


93 
	gngx_hâp_îr‹_401_∑ge
[] =

94 "<html>" 
CRLF


95 "<hód><tôÀ>401 Auth‹iz©i⁄ Requúed</tôÀ></hód>" 
CRLF


96 "<body bgcﬁ‹=\"whôe\">" 
CRLF


97 "<˚¡î><h1>401 Auth‹iz©i⁄ Requúed</h1></˚¡î>" 
CRLF


101 
	gngx_hâp_îr‹_402_∑ge
[] =

102 "<html>" 
CRLF


103 "<hód><tôÀ>402 PaymíàRequúed</tôÀ></hód>" 
CRLF


104 "<body bgcﬁ‹=\"whôe\">" 
CRLF


105 "<˚¡î><h1>402 PaymíàRequúed</h1></˚¡î>" 
CRLF


109 
	gngx_hâp_îr‹_403_∑ge
[] =

110 "<html>" 
CRLF


111 "<hód><tôÀ>403 F‹biddí</tôÀ></hód>" 
CRLF


112 "<body bgcﬁ‹=\"whôe\">" 
CRLF


113 "<˚¡î><h1>403 F‹biddí</h1></˚¡î>" 
CRLF


117 
	gngx_hâp_îr‹_404_∑ge
[] =

118 "<html>" 
CRLF


119 "<hód><tôÀ>404 NŸ Found</tôÀ></hód>" 
CRLF


120 "<body bgcﬁ‹=\"whôe\">" 
CRLF


121 "<˚¡î><h1>404 NŸ Found</h1></˚¡î>" 
CRLF


125 
	gngx_hâp_îr‹_405_∑ge
[] =

126 "<html>" 
CRLF


127 "<hód><tôÀ>405 NŸ AŒowed</tôÀ></hód>" 
CRLF


128 "<body bgcﬁ‹=\"whôe\">" 
CRLF


129 "<˚¡î><h1>405 NŸ AŒowed</h1></˚¡î>" 
CRLF


133 
	gngx_hâp_îr‹_406_∑ge
[] =

134 "<html>" 
CRLF


135 "<hód><tôÀ>406 NŸ Ac˚±abÀ</tôÀ></hód>" 
CRLF


136 "<body bgcﬁ‹=\"whôe\">" 
CRLF


137 "<˚¡î><h1>406 NŸ Ac˚±abÀ</h1></˚¡î>" 
CRLF


141 
	gngx_hâp_îr‹_408_∑ge
[] =

142 "<html>" 
CRLF


143 "<hód><tôÀ>408 Reque° Time-out</tôÀ></hód>" 
CRLF


144 "<body bgcﬁ‹=\"whôe\">" 
CRLF


145 "<˚¡î><h1>408 Reque° Time-out</h1></˚¡î>" 
CRLF


149 
	gngx_hâp_îr‹_409_∑ge
[] =

150 "<html>" 
CRLF


151 "<hód><tôÀ>409 C⁄Êi˘</tôÀ></hód>" 
CRLF


152 "<body bgcﬁ‹=\"whôe\">" 
CRLF


153 "<˚¡î><h1>409 C⁄Êi˘</h1></˚¡î>" 
CRLF


157 
	gngx_hâp_îr‹_410_∑ge
[] =

158 "<html>" 
CRLF


159 "<hód><tôÀ>410 G⁄e</tôÀ></hód>" 
CRLF


160 "<body bgcﬁ‹=\"whôe\">" 
CRLF


161 "<˚¡î><h1>410 G⁄e</h1></˚¡î>" 
CRLF


165 
	gngx_hâp_îr‹_411_∑ge
[] =

166 "<html>" 
CRLF


167 "<hód><tôÀ>411 Lígth Requúed</tôÀ></hód>" 
CRLF


168 "<body bgcﬁ‹=\"whôe\">" 
CRLF


169 "<˚¡î><h1>411 Lígth Requúed</h1></˚¡î>" 
CRLF


173 
	gngx_hâp_îr‹_412_∑ge
[] =

174 "<html>" 
CRLF


175 "<hód><tôÀ>412 Pªc⁄dôi⁄ Faûed</tôÀ></hód>" 
CRLF


176 "<body bgcﬁ‹=\"whôe\">" 
CRLF


177 "<˚¡î><h1>412 Pªc⁄dôi⁄ Faûed</h1></˚¡î>" 
CRLF


181 
	gngx_hâp_îr‹_413_∑ge
[] =

182 "<html>" 
CRLF


183 "<hód><tôÀ>413 Reque° E¡ôy ToÿL¨ge</tôÀ></hód>" 
CRLF


184 "<body bgcﬁ‹=\"whôe\">" 
CRLF


185 "<˚¡î><h1>413 Reque° E¡ôy ToÿL¨ge</h1></˚¡î>" 
CRLF


189 
	gngx_hâp_îr‹_414_∑ge
[] =

190 "<html>" 
CRLF


191 "<hód><tôÀ>414 Reque°-URI ToÿL¨ge</tôÀ></hód>" 
CRLF


192 "<body bgcﬁ‹=\"whôe\">" 
CRLF


193 "<˚¡î><h1>414 Reque°-URI ToÿL¨ge</h1></˚¡î>" 
CRLF


197 
	gngx_hâp_îr‹_415_∑ge
[] =

198 "<html>" 
CRLF


199 "<hód><tôÀ>415 Unsuµ‹ãd Medü Ty≥</tôÀ></hód>" 
CRLF


200 "<body bgcﬁ‹=\"whôe\">" 
CRLF


201 "<˚¡î><h1>415 Unsuµ‹ãd Medü Ty≥</h1></˚¡î>" 
CRLF


205 
	gngx_hâp_îr‹_416_∑ge
[] =

206 "<html>" 
CRLF


207 "<hód><tôÀ>416 Reque°ed R™gêNŸ S©isfübÀ</tôÀ></hód>" 
CRLF


208 "<body bgcﬁ‹=\"whôe\">" 
CRLF


209 "<˚¡î><h1>416 Reque°ed R™gêNŸ S©isfübÀ</h1></˚¡î>" 
CRLF


213 
	gngx_hâp_îr‹_494_∑ge
[] =

214 "<html>" 
CRLF


216 
CRLF


217 "<body bgcﬁ‹=\"whôe\">" 
CRLF


218 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


219 "<˚¡î>Reque° Hódî O∏Cookõ ToÿL¨ge</˚¡î>" 
CRLF


223 
	gngx_hâp_îr‹_495_∑ge
[] =

224 "<html>" 
CRLF


226 
CRLF


227 "<body bgcﬁ‹=\"whôe\">" 
CRLF


228 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


229 "<˚¡î>ThêSSL cîtifiˇãÉº‹</˚¡î>" 
CRLF


233 
	gngx_hâp_îr‹_496_∑ge
[] =

234 "<html>" 
CRLF


236 
CRLF


237 "<body bgcﬁ‹=\"whôe\">" 
CRLF


238 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


239 "<˚¡î>Nÿªquúed SSL cîtifiˇã wa†£¡</˚¡î>" 
CRLF


243 
	gngx_hâp_îr‹_497_∑ge
[] =

244 "<html>" 
CRLF


246 
CRLF


247 "<body bgcﬁ‹=\"whôe\">" 
CRLF


248 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


249 "<˚¡î>Thê∂aö HTTPÑeque° wa†£¡ÅÿHTTPSÖ‹t</˚¡î>" 
CRLF


253 
	gngx_hâp_îr‹_500_∑ge
[] =

254 "<html>" 
CRLF


255 "<hód><tôÀ>500 I¡î«»Sîvî Eº‹</tôÀ></hód>" 
CRLF


256 "<body bgcﬁ‹=\"whôe\">" 
CRLF


257 "<˚¡î><h1>500 I¡î«»Sîvî Eº‹</h1></˚¡î>" 
CRLF


261 
	gngx_hâp_îr‹_501_∑ge
[] =

262 "<html>" 
CRLF


263 "<hód><tôÀ>501 NŸ Im∂emíãd</tôÀ></hód>" 
CRLF


264 "<body bgcﬁ‹=\"whôe\">" 
CRLF


265 "<˚¡î><h1>501 NŸ Im∂emíãd</h1></˚¡î>" 
CRLF


269 
	gngx_hâp_îr‹_502_∑ge
[] =

270 "<html>" 
CRLF


271 "<hód><tôÀ>502 Bad G©eway</tôÀ></hód>" 
CRLF


272 "<body bgcﬁ‹=\"whôe\">" 
CRLF


273 "<˚¡î><h1>502 Bad G©eway</h1></˚¡î>" 
CRLF


277 
	gngx_hâp_îr‹_503_∑ge
[] =

278 "<html>" 
CRLF


279 "<hód><tôÀ>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</tôÀ></hód>" 
CRLF


280 "<body bgcﬁ‹=\"whôe\">" 
CRLF


281 "<˚¡î><h1>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</h1></˚¡î>" 
CRLF


285 
	gngx_hâp_îr‹_504_∑ge
[] =

286 "<html>" 
CRLF


287 "<hód><tôÀ>504 G©eway Time-out</tôÀ></hód>" 
CRLF


288 "<body bgcﬁ‹=\"whôe\">" 
CRLF


289 "<˚¡î><h1>504 G©eway Time-out</h1></˚¡î>" 
CRLF


293 
	gngx_hâp_îr‹_507_∑ge
[] =

294 "<html>" 
CRLF


295 "<hód><tôÀ>507 Insufficõ¡ St‹age</tôÀ></hód>" 
CRLF


296 "<body bgcﬁ‹=\"whôe\">" 
CRLF


297 "<˚¡î><h1>507 Insufficõ¡ St‹age</h1></˚¡î>" 
CRLF


301 
ngx_°r_t
 
	gngx_hâp_îr‹_∑ges
[] = {

303 
ngx_nuŒ_°rög
,

305 
	#NGX_HTTP_LAST_2XX
 202

	)

306 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 201)

	)

309 
ngx_°rög
(
ngx_hâp_îr‹_301_∑ge
),

310 
ngx_°rög
(
ngx_hâp_îr‹_302_∑ge
),

311 
ngx_°rög
(
ngx_hâp_îr‹_303_∑ge
),

312 
ngx_nuŒ_°rög
,

313 
ngx_nuŒ_°rög
,

314 
ngx_nuŒ_°rög
,

315 
ngx_°rög
(
ngx_hâp_îr‹_307_∑ge
),

317 
	#NGX_HTTP_LAST_3XX
 308

	)

318 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

320 
ngx_°rög
(
ngx_hâp_îr‹_400_∑ge
),

321 
ngx_°rög
(
ngx_hâp_îr‹_401_∑ge
),

322 
ngx_°rög
(
ngx_hâp_îr‹_402_∑ge
),

323 
ngx_°rög
(
ngx_hâp_îr‹_403_∑ge
),

324 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

325 
ngx_°rög
(
ngx_hâp_îr‹_405_∑ge
),

326 
ngx_°rög
(
ngx_hâp_îr‹_406_∑ge
),

327 
ngx_nuŒ_°rög
,

328 
ngx_°rög
(
ngx_hâp_îr‹_408_∑ge
),

329 
ngx_°rög
(
ngx_hâp_îr‹_409_∑ge
),

330 
ngx_°rög
(
ngx_hâp_îr‹_410_∑ge
),

331 
ngx_°rög
(
ngx_hâp_îr‹_411_∑ge
),

332 
ngx_°rög
(
ngx_hâp_îr‹_412_∑ge
),

333 
ngx_°rög
(
ngx_hâp_îr‹_413_∑ge
),

334 
ngx_°rög
(
ngx_hâp_îr‹_414_∑ge
),

335 
ngx_°rög
(
ngx_hâp_îr‹_415_∑ge
),

336 
ngx_°rög
(
ngx_hâp_îr‹_416_∑ge
),

338 
	#NGX_HTTP_LAST_4XX
 417

	)

339 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

341 
ngx_°rög
(
ngx_hâp_îr‹_494_∑ge
),

342 
ngx_°rög
(
ngx_hâp_îr‹_495_∑ge
),

343 
ngx_°rög
(
ngx_hâp_îr‹_496_∑ge
),

344 
ngx_°rög
(
ngx_hâp_îr‹_497_∑ge
),

345 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

346 
ngx_nuŒ_°rög
,

348 
ngx_°rög
(
ngx_hâp_îr‹_500_∑ge
),

349 
ngx_°rög
(
ngx_hâp_îr‹_501_∑ge
),

350 
ngx_°rög
(
ngx_hâp_îr‹_502_∑ge
),

351 
ngx_°rög
(
ngx_hâp_îr‹_503_∑ge
),

352 
ngx_°rög
(
ngx_hâp_îr‹_504_∑ge
),

353 
ngx_nuŒ_°rög
,

354 
ngx_nuŒ_°rög
,

355 
ngx_°rög
(
ngx_hâp_îr‹_507_∑ge
)

357 
	#NGX_HTTP_LAST_5XX
 508

	)

362 
ngx_°r_t
 
	gngx_hâp_gë_«me
 = { 3, (
u_ch¨
 *) "GET " };

365 
ngx_öt_t


366 
	$ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
)

368 
ngx_uöt_t
 
i
, 
îr
;

369 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

370 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

372 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

374 
îr‹
, &
r
->
uri
, &r->
¨gs
);

376 
r
->
îr_°©us
 = 
îr‹
;

378 i‡(
r
->
kì∑live
) {

379 
îr‹
) {

380 
NGX_HTTP_BAD_REQUEST
:

381 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
:

382 
NGX_HTTP_REQUEST_URI_TOO_LARGE
:

383 
NGX_HTTP_TO_HTTPS
:

384 
NGX_HTTPS_CERT_ERROR
:

385 
NGX_HTTPS_NO_CERT
:

386 
NGX_HTTP_INTERNAL_SERVER_ERROR
:

387 
NGX_HTTP_NOT_IMPLEMENTED
:

388 
r
->
kì∑live
 = 0;

392 i‡(
r
->
lögîög_˛o£
) {

393 
îr‹
) {

394 
NGX_HTTP_BAD_REQUEST
:

395 
NGX_HTTP_TO_HTTPS
:

396 
NGX_HTTPS_CERT_ERROR
:

397 
NGX_HTTPS_NO_CERT
:

398 
r
->
lögîög_˛o£
 = 0;

402 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

404 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

406 i‡(!
r
->
îr‹_∑ge
 && 
˛cf
->
îr‹_∑ges
 &&Ñ->
uri_ch™ges
 != 0) {

408 i‡(
˛cf
->
ªcursive_îr‹_∑ges
 == 0) {

409 
r
->
îr‹_∑ge
 = 1;

412 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

414 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

415 i‡(
îr_∑ge
[
i
].
°©us
 =
îr‹
) {

416  
	`ngx_hâp_£nd_îr‹_∑ge
(
r
, &
îr_∑ge
[
i
]);

421 
r
->
ex≥˘_ã°ed
 = 1;

423 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

424 
r
->
kì∑live
 = 0;

427 i‡(
˛cf
->
msõ_ª‰esh


428 && 
r
->
hódîs_ö
.
msõ


429 && (
îr‹
 =
NGX_HTTP_MOVED_PERMANENTLY


430 || 
îr‹
 =
NGX_HTTP_MOVED_TEMPORARILY
))

432  
	`ngx_hâp_£nd_ª‰esh
(
r
);

435 i‡(
îr‹
 =
NGX_HTTP_CREATED
) {

437 
îr
 = 0;

439 } i‡(
îr‹
 =
NGX_HTTP_NO_CONTENT
) {

441 
îr
 = 0;

443 } i‡(
îr‹
 >
NGX_HTTP_MOVED_PERMANENTLY


444 && 
îr‹
 < 
NGX_HTTP_LAST_3XX
)

447 
îr
 = 
îr‹
 - 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

449 } i‡(
îr‹
 >
NGX_HTTP_BAD_REQUEST


450 && 
îr‹
 < 
NGX_HTTP_LAST_4XX
)

453 
îr
 = 
îr‹
 - 
NGX_HTTP_BAD_REQUEST
 + 
NGX_HTTP_OFF_4XX
;

455 } i‡(
îr‹
 >
NGX_HTTP_NGINX_CODES


456 && 
îr‹
 < 
NGX_HTTP_LAST_5XX
)

459 
îr
 = 
îr‹
 - 
NGX_HTTP_NGINX_CODES
 + 
NGX_HTTP_OFF_5XX
;

460 
îr‹
) {

461 
NGX_HTTP_TO_HTTPS
:

462 
NGX_HTTPS_CERT_ERROR
:

463 
NGX_HTTPS_NO_CERT
:

464 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
:

465 
r
->
îr_°©us
 = 
NGX_HTTP_BAD_REQUEST
;

471 
îr
 = 0;

474  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
, 
îr
);

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_moduÀ_t
 *
m
,

480 
ngx_öt_t
 
îr‹
)

482 *
˘x
;

483 
ngx_öt_t
 
rc
;

485 
	`ngx_hâp_˛ón_hódî
(
r
);

487 
˘x
 = 
NULL
;

489 i‡(
m
) {

490 
˘x
 = 
r
->˘x[
m
->
˘x_ödex
];

494 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

496 i‡(
m
) {

497 
r
->
˘x
[
m
->
˘x_ödex
] = ctx;

500 
r
->
fûãr_föÆize
 = 1;

502 
rc
 = 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
r
, 
îr‹
);

506 
rc
) {

508 
NGX_OK
:

509 
NGX_DONE
:

510  
NGX_ERROR
;

513  
rc
;

515 
	}
}

519 
	$ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
)

521 
	`ngx_memzîo
(&
r
->
hódîs_out
.
°©us
,

522 (
ngx_hâp_hódîs_out_t
)

523 - 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
°©us
));

525 
r
->
hódîs_out
.
hódîs
.
∑π
.
√…s
 = 0;

526 
r
->
hódîs_out
.
hódîs
.
∑π
.
√xt
 = 
NULL
;

527 
r
->
hódîs_out
.
hódîs
.
œ°
 = &r->hódîs_out.hódîs.
∑π
;

529 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

530 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
)

537 
ngx_öt_t
 
ovîwrôe
;

538 
ngx_°r_t
 
uri
, 
¨gs
;

539 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

540 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

542 
ovîwrôe
 = 
îr_∑ge
->overwrite;

544 i‡(
ovîwrôe
 && ovîwrôê!
NGX_HTTP_OK
) {

545 
r
->
ex≥˘_ã°ed
 = 1;

548 i‡(
ovîwrôe
 >= 0) {

549 
r
->
îr_°©us
 = 
ovîwrôe
;

552 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
îr_∑ge
->
vÆue
, &
uri
Ë!
NGX_OK
) {

553  
NGX_ERROR
;

556 i‡(
uri
.
Àn
 && uri.
d©a
[0] == '/') {

558 i‡(
îr_∑ge
->
vÆue
.
Àngths
) {

559 
	`ngx_hâp_•lô_¨gs
(
r
, &
uri
, &
¨gs
);

562 
¨gs
 = 
îr_∑ge
->args;

565 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

566 
r
->
mëhod
 = 
NGX_HTTP_GET
;

567 
r
->
mëhod_«me
 = 
ngx_hâp_gë_«me
;

570  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

573 i‡(
uri
.
Àn
 && uri.
d©a
[0] == '@') {

574  
	`ngx_hâp_«med_loˇti⁄
(
r
, &
uri
);

577 
loˇti⁄
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

579 i‡(
loˇti⁄
 =
NULL
) {

580  
NGX_ERROR
;

583 i‡(
ovîwrôe
 !
NGX_HTTP_MOVED_PERMANENTLY


584 && 
ovîwrôe
 !
NGX_HTTP_MOVED_TEMPORARILY


585 && 
ovîwrôe
 !
NGX_HTTP_SEE_OTHER


586 && 
ovîwrôe
 !
NGX_HTTP_TEMPORARY_REDIRECT
)

588 
r
->
îr_°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

591 
loˇti⁄
->
hash
 = 1;

592 
	`ngx_°r_£t
(&
loˇti⁄
->
key
, "Location");

593 
loˇti⁄
->
vÆue
 = 
uri
;

595 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

597 
r
->
hódîs_out
.
loˇti⁄
 =Üocation;

599 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

601 i‡(
˛cf
->
msõ_ª‰esh
 && 
r
->
hódîs_ö
.
msõ
) {

602  
	`ngx_hâp_£nd_ª‰esh
(
r
);

605  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
,Ñ->
îr_°©us


606 - 
NGX_HTTP_MOVED_PERMANENTLY


607 + 
NGX_HTTP_OFF_3XX
);

608 
	}
}

611 
ngx_öt_t


612 
	$ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

613 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
)

615 
u_ch¨
 *
èû
;

616 
size_t
 
Àn
;

617 
ngx_öt_t
 
rc
;

618 
ngx_buf_t
 *
b
;

619 
ngx_uöt_t
 
msõ_∑ddög
;

620 
ngx_chaö_t
 
out
[3];

622 i‡(
˛cf
->
£rvî_tokís
) {

623 
Àn
 = (
ngx_hâp_îr‹_fuŒ_èû
) - 1;

624 
èû
 = 
ngx_hâp_îr‹_fuŒ_èû
;

627 
Àn
 = (
ngx_hâp_îr‹_èû
) - 1;

628 
èû
 = 
ngx_hâp_îr‹_èû
;

631 
msõ_∑ddög
 = 0;

633 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
) {

634 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 +Üen;

635 i‡(
˛cf
->
msõ_∑ddög


636 && (
r
->
hódîs_ö
.
msõ
 ||Ñ->hódîs_ö.
chrome
)

637 && 
r
->
hâp_vîsi⁄
 >
NGX_HTTP_VERSION_10


638 && 
îr
 >
NGX_HTTP_OFF_4XX
)

640 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 +=

641 (
ngx_hâp_msõ_∑ddög
) - 1;

642 
msõ_∑ddög
 = 1;

645 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

646 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

647 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

650 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

653 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

654 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

655 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

658 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

659 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

660 
	`ngx_hâp_˛ór_ëag
(
r
);

662 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

664 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

665  
rc
;

668 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 == 0) {

669  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

672 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

673 i‡(
b
 =
NULL
) {

674  
NGX_ERROR
;

677 
b
->
mem‹y
 = 1;

678 
b
->
pos
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
;

679 
b
->
œ°
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
 +Çgx_hâp_îr‹_∑ges[îr].
Àn
;

681 
out
[0].
buf
 = 
b
;

682 
out
[0].
√xt
 = &out[1];

684 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

685 i‡(
b
 =
NULL
) {

686  
NGX_ERROR
;

689 
b
->
mem‹y
 = 1;

691 
b
->
pos
 = 
èû
;

692 
b
->
œ°
 = 
èû
 + 
Àn
;

694 
out
[1].
buf
 = 
b
;

695 
out
[1].
√xt
 = 
NULL
;

697 i‡(
msõ_∑ddög
) {

698 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

699 i‡(
b
 =
NULL
) {

700  
NGX_ERROR
;

703 
b
->
mem‹y
 = 1;

704 
b
->
pos
 = 
ngx_hâp_msõ_∑ddög
;

705 
b
->
œ°
 = 
ngx_hâp_msõ_∑ddög
 + (ngx_http_msie_padding) - 1;

707 
out
[1].
√xt
 = &out[2];

708 
out
[2].
buf
 = 
b
;

709 
out
[2].
√xt
 = 
NULL
;

712 i‡(
r
 =r->
maö
) {

713 
b
->
œ°_buf
 = 1;

716 
b
->
œ°_ö_chaö
 = 1;

718  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[0]);

719 
	}
}

722 
ngx_öt_t


723 
	$ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
)

725 
u_ch¨
 *
p
, *
loˇti⁄
;

726 
size_t
 
Àn
, 
size
;

727 
uöçå_t
 
esˇ≥
;

728 
ngx_öt_t
 
rc
;

729 
ngx_buf_t
 *
b
;

730 
ngx_chaö_t
 
out
;

732 
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

733 
loˇti⁄
 = 
r
->
hódîs_out
.loˇti⁄->
vÆue
.
d©a
;

735 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

737 
size
 = (
ngx_hâp_msõ_ª‰esh_hód
) - 1

738 + 
esˇ≥
 + 
Àn


739 + (
ngx_hâp_msõ_ª‰esh_èû
) - 1;

741 
r
->
îr_°©us
 = 
NGX_HTTP_OK
;

743 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

744 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

745 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

747 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

748 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
;

750 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
size
;

752 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

753 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

754 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

757 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

758 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

759 
	`ngx_hâp_˛ór_ëag
(
r
);

761 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

763 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

764  
rc
;

767 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

768 i‡(
b
 =
NULL
) {

769  
NGX_ERROR
;

772 
p
 = 
	`ngx_˝ymem
(
b
->
pos
, 
ngx_hâp_msõ_ª‰esh_hód
,

773 (
ngx_hâp_msõ_ª‰esh_hód
) - 1);

775 i‡(
esˇ≥
 == 0) {

776 
p
 = 
	`ngx_˝ymem
’, 
loˇti⁄
, 
Àn
);

779 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

782 
b
->
œ°
 = 
	`ngx_˝ymem
(
p
, 
ngx_hâp_msõ_ª‰esh_èû
,

783 (
ngx_hâp_msõ_ª‰esh_èû
) - 1);

785 
b
->
œ°_buf
 = 1;

786 
b
->
œ°_ö_chaö
 = 1;

788 
out
.
buf
 = 
b
;

789 
out
.
√xt
 = 
NULL
;

791  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

792 
	}
}

	@src/http/ngx_http_upstream.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 #i‡(
NGX_HTTP_CACHE
)

14 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_up°ªam_t
 *
u
);

16 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_gë
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_hâp_fûe_ˇche_t
 **
ˇche
);

18 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_up°ªam_t
 *
u
);

20 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

24 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_ëag
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

28 
ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

30 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

31 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

32 
ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_evít_t
 *
ev
);

34 
ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_up°ªam_t
 *
u
);

36 
ngx_öt_t
 
ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_up°ªam_t
 *
u
);

38 
ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
do_wrôe
);

40 
ngx_öt_t
 
ngx_hâp_up°ªam_£nd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
do_wrôe
);

42 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

43 
ngx_hâp_up°ªam_t
 *
u
);

44 
ngx_hâp_up°ªam_ªad_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_up°ªam_t
 *
u
);

47 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_hâp_up°ªam_t
 *
u
);

49 
ngx_öt_t
 
ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_up°ªam_t
 *
u
);

51 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
);

52 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_up°ªam_t
 *
u
);

54 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_up°ªam_t
 *
u
);

56 
ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_up°ªam_t
 *
u
);

58 
ngx_hâp_up°ªam_upgøde
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_up°ªam_t
 *
u
);

60 
ngx_hâp_up°ªam_upgøded_ªad_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

61 
ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

62 
ngx_hâp_up°ªam_upgøded_ªad_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_up°ªam_t
 *
u
);

64 
ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_up°ªam_t
 *
u
);

66 
ngx_hâp_up°ªam_¥o˚ss_upgøded
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_uöt_t
 
‰om_up°ªam
,Çgx_uöt_à
do_wrôe
);

69 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

71 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_up°ªam_t
 *
u
);

74 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_uöt_t
 
do_wrôe
);

76 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
);

77 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
,

78 
ssize_t
 
byãs
);

79 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

80 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

81 
ngx_hâp_up°ªam_t
 *
u
);

82 
ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_up°ªam_t
 *
u
);

84 
ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_up°ªam_t
 *
u
);

86 
ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_hâp_up°ªam_t
 *
u
);

88 
ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
·_ty≥
);

90 
ngx_hâp_up°ªam_˛ónup
(*
d©a
);

91 
ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
);

94 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

95 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

96 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

97 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

98 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

100 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

102 
ngx_öt_t


103 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

104 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

105 
ngx_öt_t
 
ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

106 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

107 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
,

108 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

109 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

110 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

111 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

113 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
,

114 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

115 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

116 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

117 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

119 
ngx_öt_t


120 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

121 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

122 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_v¨y
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

124 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

126 
ngx_öt_t


127 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

128 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

129 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

130 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

131 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

132 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

133 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

134 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

135 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
,

136 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

137 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

138 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

139 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

140 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

142 #i‡(
NGX_HTTP_GZIP
)

143 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

144 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

147 
ngx_öt_t
 
ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

148 
ngx_öt_t
 
ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

149 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

150 
ngx_öt_t
 
ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

151 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

152 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

153 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

154 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(

155 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

157 *
ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
);

158 *
ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

159 *
c⁄f
);

161 
ngx_addr_t
 *
ngx_hâp_up°ªam_gë_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

162 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
);

164 *
ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

165 *
ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

167 #i‡(
NGX_HTTP_SSL
)

168 
ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *,

169 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
);

170 
ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

171 
ngx_öt_t
 
ngx_hâp_up°ªam_s¶_«me
(
ngx_hâp_ªque°_t
 *
r
,

172 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
);

176 
ngx_hâp_up°ªam_hódî_t
 
	gngx_hâp_up°ªam_hódîs_ö
[] = {

178 { 
ngx_°rög
("Status"),

179 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

180 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
°©us
),

181 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

183 { 
ngx_°rög
("Content-Type"),

184 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

185 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

186 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
, 0, 1 },

188 { 
ngx_°rög
("Content-Length"),

189 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
, 0,

190 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

192 { 
ngx_°rög
("Date"),

193 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

194 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
d©e
),

195 
ngx_hâp_up°ªam_c›y_hódî_löe
,

196 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
), 0 },

198 { 
ngx_°rög
("Last-Modified"),

199 
ngx_hâp_up°ªam_¥o˚ss_œ°_modifõd
, 0,

200 
ngx_hâp_up°ªam_c›y_œ°_modifõd
, 0, 0 },

202 { 
ngx_°rög
("ETag"),

203 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

204 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ëag
),

205 
ngx_hâp_up°ªam_c›y_hódî_löe
,

206 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
), 0 },

208 { 
ngx_°rög
("Server"),

209 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

210 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
£rvî
),

211 
ngx_hâp_up°ªam_c›y_hódî_löe
,

212 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
), 0 },

214 { 
ngx_°rög
("WWW-Authenticate"),

215 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

216 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
www_authítiˇã
),

217 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

219 { 
ngx_°rög
("Location"),

220 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

221 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
loˇti⁄
),

222 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
, 0, 0 },

224 { 
ngx_°rög
("Refresh"),

225 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

226 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
, 0, 0 },

228 { 
ngx_°rög
("Set-Cookie"),

229 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
,

230 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
cookõs
),

231 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
, 0, 1 },

233 { 
ngx_°rög
("Content-Disposition"),

234 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

235 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 1 },

237 { 
ngx_°rög
("Cache-Control"),

238 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
, 0,

239 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
,

240 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
), 1 },

242 { 
ngx_°rög
("Expires"),

243 
ngx_hâp_up°ªam_¥o˚ss_expúes
, 0,

244 
ngx_hâp_up°ªam_c›y_hódî_löe
,

245 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
), 1 },

247 { 
ngx_°rög
("Accept-Ranges"),

248 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

249 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ac˚±_ønges
),

250 
ngx_hâp_up°ªam_c›y_Ælow_ønges
,

251 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
), 1 },

253 { 
ngx_°rög
("Connection"),

254 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
, 0,

255 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

257 { 
ngx_°rög
("Keep-Alive"),

258 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

259 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

261 { 
ngx_°rög
("Vary"),

262 
ngx_hâp_up°ªam_¥o˚ss_v¨y
, 0,

263 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

265 { 
ngx_°rög
("X-Powered-By"),

266 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

267 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

269 { 
ngx_°rög
("X-Accel-Expires"),

270 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
, 0,

271 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

273 { 
ngx_°rög
("X-Accel-Redirect"),

274 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

275 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
x_ac˚l_ªdúe˘
),

276 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

278 { 
ngx_°rög
("X-Accel-Limit-Rate"),

279 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
, 0,

280 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

282 { 
ngx_°rög
("X-Accel-Buffering"),

283 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
, 0,

284 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

286 { 
ngx_°rög
("X-Accel-Charset"),

287 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
, 0,

288 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

290 { 
ngx_°rög
("Transfer-Encoding"),

291 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
, 0,

292 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

294 #i‡(
NGX_HTTP_GZIP
)

295 { 
ngx_°rög
("Content-Encoding"),

296 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

297 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ícodög
),

298 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
, 0, 0 },

301 { 
ngx_nuŒ_°rög
, 
NULL
, 0, NULL, 0, 0 }

305 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_comm™ds
[] = {

307 { 
ngx_°rög
("upstream"),

308 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE1
,

309 
ngx_hâp_up°ªam
,

312 
NULL
 },

314 { 
ngx_°rög
("server"),

315 
NGX_HTTP_UPS_CONF
|
NGX_CONF_1MORE
,

316 
ngx_hâp_up°ªam_£rvî
,

317 
NGX_HTTP_SRV_CONF_OFFSET
,

319 
NULL
 },

321 
ngx_nuŒ_comm™d


325 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ_˘x
 = {

326 
ngx_hâp_up°ªam_add_v¨übÀs
,

327 
NULL
,

329 
ngx_hâp_up°ªam_¸óã_maö_c⁄f
,

330 
ngx_hâp_up°ªam_öô_maö_c⁄f
,

332 
NULL
,

333 
NULL
,

335 
NULL
,

336 
NULL


340 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ
 = {

341 
NGX_MODULE_V1
,

342 &
ngx_hâp_up°ªam_moduÀ_˘x
,

343 
ngx_hâp_up°ªam_comm™ds
,

344 
NGX_HTTP_MODULE
,

345 
NULL
,

346 
NULL
,

347 
NULL
,

348 
NULL
,

349 
NULL
,

350 
NULL
,

351 
NULL
,

352 
NGX_MODULE_V1_PADDING


356 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_up°ªam_v¨s
[] = {

358 { 
ngx_°rög
("up°ªam_addr"), 
NULL
,

359 
ngx_hâp_up°ªam_addr_v¨übÀ
, 0,

360 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

362 { 
ngx_°rög
("up°ªam_°©us"), 
NULL
,

363 
ngx_hâp_up°ªam_°©us_v¨übÀ
, 0,

364 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

366 { 
ngx_°rög
("up°ªam_hódî_time"), 
NULL
,

367 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
, 1,

368 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

370 { 
ngx_°rög
("up°ªam_ª•⁄£_time"), 
NULL
,

371 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
, 0,

372 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

374 { 
ngx_°rög
("up°ªam_ª•⁄£_Àngth"), 
NULL
,

375 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
, 0,

376 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

378 #i‡(
NGX_HTTP_CACHE
)

380 { 
ngx_°rög
("up°ªam_ˇche_°©us"), 
NULL
,

381 
ngx_hâp_up°ªam_ˇche_°©us
, 0,

382 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

384 { 
ngx_°rög
("up°ªam_ˇche_œ°_modifõd"), 
NULL
,

385 
ngx_hâp_up°ªam_ˇche_œ°_modifõd
, 0,

386 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

388 { 
ngx_°rög
("up°ªam_ˇche_ëag"), 
NULL
,

389 
ngx_hâp_up°ªam_ˇche_ëag
, 0,

390 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

394 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

398 
ngx_hâp_up°ªam_√xt_t
 
	gngx_hâp_up°ªam_√xt_îr‹s
[] = {

399 { 500, 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

400 { 502, 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

401 { 503, 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

402 { 504, 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

403 { 403, 
NGX_HTTP_UPSTREAM_FT_HTTP_403
 },

404 { 404, 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

409 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ˇche_mëhod_mask
[] = {

410 { 
ngx_°rög
("GET"), 
NGX_HTTP_GET
},

411 { 
ngx_°rög
("HEAD"), 
NGX_HTTP_HEAD
 },

412 { 
ngx_°rög
("POST"), 
NGX_HTTP_POST
 },

413 { 
ngx_nuŒ_°rög
, 0 }

417 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ign‹e_hódîs_masks
[] = {

418 { 
ngx_°rög
("X-Ac˚l-Redúe˘"), 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 },

419 { 
ngx_°rög
("X-Ac˚l-Expúes"), 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 },

420 { 
ngx_°rög
("X-Ac˚l-Limô-R©e"), 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 },

421 { 
ngx_°rög
("X-Ac˚l-Buf„rög"), 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 },

422 { 
ngx_°rög
("X-Ac˚l-Ch¨£t"), 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 },

423 { 
ngx_°rög
("Expúes"), 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
 },

424 { 
ngx_°rög
("Cache-C⁄åﬁ"), 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 },

425 { 
ngx_°rög
("Së-Cookõ"), 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 },

426 { 
ngx_°rög
("V¨y"), 
NGX_HTTP_UPSTREAM_IGN_VARY
 },

427 { 
ngx_nuŒ_°rög
, 0 }

431 
ngx_öt_t


432 
	$ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

434 
ngx_hâp_up°ªam_t
 *
u
;

436 
u
 = 
r
->
up°ªam
;

438 i‡(
u
 && u->
˛ónup
) {

439 
r
->
maö
->
cou¡
++;

440 
	`ngx_hâp_up°ªam_˛ónup
(
r
);

443 
u
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_t
));

444 i‡(
u
 =
NULL
) {

445  
NGX_ERROR
;

448 
r
->
up°ªam
 = 
u
;

450 
u
->
≥î
.
log
 = 
r
->
c⁄√˘i⁄
->log;

451 
u
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

453 #i‡(
NGX_HTTP_CACHE
)

454 
r
->
ˇche
 = 
NULL
;

457 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

458 
u
->
hódîs_ö
.
œ°_modifõd_time
 = -1;

460  
NGX_OK
;

461 
	}
}

465 
	$ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
)

467 
ngx_c⁄√˘i⁄_t
 *
c
;

469 
c
 = 
r
->
c⁄√˘i⁄
;

471 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

472 "hâ∞öô up°ªam, clõ¡Åimî: %d", 
c
->
ªad
->
timî_£t
);

474 #i‡(
NGX_HTTP_SPDY
)

475 i‡(
r
->
•dy_°ªam
) {

476 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

481 i‡(
c
->
ªad
->
timî_£t
) {

482 
	`ngx_dñ_timî
(
c
->
ªad
);

485 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

487 i‡(!
c
->
wrôe
->
a˘ive
) {

488 i‡(
	`ngx_add_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLEAR_EVENT
)

489 =
NGX_ERROR
)

491 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

497 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

498 
	}
}

502 
	$ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

504 
ngx_°r_t
 *
ho°
;

505 
ngx_uöt_t
 
i
;

506 
ngx_ªsﬁvî_˘x_t
 *
˘x
, 
ãmp
;

507 
ngx_hâp_˛ónup_t
 *
˛n
;

508 
ngx_hâp_up°ªam_t
 *
u
;

509 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

510 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

511 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

513 i‡(
r
->
aio
) {

517 
u
 = 
r
->
up°ªam
;

519 #i‡(
NGX_HTTP_CACHE
)

521 i‡(
u
->
c⁄f
->
ˇche
) {

522 
ngx_öt_t
 
rc
;

524 
rc
 = 
	`ngx_hâp_up°ªam_ˇche
(
r
, 
u
);

526 i‡(
rc
 =
NGX_BUSY
) {

527 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_öô_ªque°
;

531 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

533 i‡(
rc
 =
NGX_DONE
) {

537 i‡(
rc
 =
NGX_ERROR
) {

538 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

542 i‡(
rc
 !
NGX_DECLINED
) {

543 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

550 
u
->
°‹e
 = u->
c⁄f
->store;

552 i‡(!
u
->
°‹e
 && !
r
->
po°_a˘i⁄
 && !u->
c⁄f
->
ign‹e_˛õ¡_ab‹t
) {

553 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
;

554 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
;

557 i‡(
r
->
ªque°_body
) {

558 
u
->
ªque°_bufs
 = 
r
->
ªque°_body
->
bufs
;

561 i‡(
u
->
	`¸óã_ªque°
(
r
Ë!
NGX_OK
) {

562 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

566 
u
->
≥î
.
loˇl
 = 
	`ngx_hâp_up°ªam_gë_loˇl
(
r
, u->
c⁄f
->local);

568 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

570 
u
->
ouçut
.
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

571 
u
->
ouçut
.
poﬁ
 = 
r
->pool;

572 
u
->
ouçut
.
bufs
.
num
 = 1;

573 
u
->
ouçut
.
bufs
.
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

575 i‡(
u
->
ouçut
.
ouçut_fûãr
 =
NULL
) {

576 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_chaö_wrôî
;

577 
u
->
ouçut
.
fûãr_˘x
 = &u->
wrôî
;

580 
u
->
wrôî
.
poﬁ
 = 
r
->pool;

582 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

584 
r
->
up°ªam_°©es
 = 
	`ngx_¨øy_¸óã
‘->
poﬁ
, 1,

585 (
ngx_hâp_up°ªam_°©e_t
));

586 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

587 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

593 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

594 i‡(
u
->
°©e
 =
NULL
) {

595 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

596 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

600 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

603 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

604 i‡(
˛n
 =
NULL
) {

605 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

609 
˛n
->
h™dÀr
 = 
ngx_hâp_up°ªam_˛ónup
;

610 
˛n
->
d©a
 = 
r
;

611 
u
->
˛ónup
 = &
˛n
->
h™dÀr
;

613 i‡(
u
->
ªsﬁved
 =
NULL
) {

615 
uscf
 = 
u
->
c⁄f
->
up°ªam
;

619 #i‡(
NGX_HTTP_SSL
)

620 
u
->
s¶_«me
 = u->
ªsﬁved
->
ho°
;

623 i‡(
u
->
ªsﬁved
->
sockaddr
) {

625 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
u
->
ªsﬁved
)

626 !
NGX_OK
)

628 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

629 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

633 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

638 
ho°
 = &
u
->
ªsﬁved
->host;

640 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

642 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

644 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

646 
uscf
 = 
uscÂ
[
i
];

648 i‡(
uscf
->
ho°
.
Àn
 == host->len

649 && ((
uscf
->
p‹t
 =0 && 
u
->
ªsﬁved
->
no_p‹t
)

650 || 
uscf
->
p‹t
 =
u
->
ªsﬁved
->port)

651 && 
	`ngx_°∫ˇ£cmp
(
uscf
->
ho°
.
d©a
, ho°->d©a, ho°->
Àn
) == 0)

653 
found
;

657 i‡(
u
->
ªsﬁved
->
p‹t
 == 0) {

658 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

659 "nÿp‹àö up°ªam \"%V\"", 
ho°
);

660 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

661 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

665 
ãmp
.
«me
 = *
ho°
;

667 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
˛cf
->
ªsﬁvî
, &
ãmp
);

668 i‡(
˘x
 =
NULL
) {

669 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

670 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

674 i‡(
˘x
 =
NGX_NO_RESOLVER
) {

675 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

676 "nÿªsﬁvî deföedÅÿªsﬁvê%V", 
ho°
);

678 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

682 
˘x
->
«me
 = *
ho°
;

683 
˘x
->
h™dÀr
 = 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
;

684 
˘x
->
d©a
 = 
r
;

685 
˘x
->
timeout
 = 
˛cf
->
ªsﬁvî_timeout
;

687 
u
->
ªsﬁved
->
˘x
 = ctx;

689 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

690 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

691 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

692 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

699 
found
:

701 i‡(
uscf
 =
NULL
) {

702 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

704 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

705 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

709 #i‡(
NGX_HTTP_SSL
)

710 
u
->
s¶_«me
 = 
uscf
->
ho°
;

713 i‡(
uscf
->
≥î
.
	`öô
(
r
, uscfË!
NGX_OK
) {

714 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

715 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

719 
u
->
≥î
.
°¨t_time
 = 
ngx_cuºít_m£c
;

721 i‡(
u
->
c⁄f
->
√xt_up°ªam_åõs


722 && 
u
->
≥î
.
åõs
 > u->
c⁄f
->
√xt_up°ªam_åõs
)

724 
u
->
≥î
.
åõs
 = u->
c⁄f
->
√xt_up°ªam_åõs
;

727 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

728 
	}
}

731 #i‡(
NGX_HTTP_CACHE
)

733 
ngx_öt_t


734 
	$ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

736 
ngx_öt_t
 
rc
;

737 
ngx_hâp_ˇche_t
 *
c
;

738 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

740 
c
 = 
r
->
ˇche
;

742 i‡(
c
 =
NULL
) {

744 i‡(!(
r
->
mëhod
 & 
u
->
c⁄f
->
ˇche_mëhods
)) {

745  
NGX_DECLINED
;

748 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_gë
(
r
, 
u
, &
ˇche
);

750 i‡(
rc
 !
NGX_OK
) {

751  
rc
;

754 i‡(
r
->
mëhod
 & 
NGX_HTTP_HEAD
) {

755 
u
->
mëhod
 = 
ngx_hâp_c‹e_gë_mëhod
;

758 i‡(
	`ngx_hâp_fûe_ˇche_√w
(
r
Ë!
NGX_OK
) {

759  
NGX_ERROR
;

762 i‡(
u
->
	`¸óã_key
(
r
Ë!
NGX_OK
) {

763  
NGX_ERROR
;

768 
	`ngx_hâp_fûe_ˇche_¸óã_key
(
r
);

770 i‡(
r
->
ˇche
->
hódî_°¨t
 + 256 >
u
->
c⁄f
->
buf„r_size
) {

771 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

774 &
u
->
c⁄f
->
moduÀ
, u->c⁄f->
buf„r_size
,

775 
	`ngx_Æign
(
r
->
ˇche
->
hódî_°¨t
 + 256, 1024));

777 
r
->
ˇche
 = 
NULL
;

778  
NGX_DECLINED
;

781 
u
->
ˇchóbÀ
 = 1;

783 
c
 = 
r
->
ˇche
;

785 
c
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

786 
c
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

787 
c
->
fûe_ˇche
 = 
ˇche
;

789 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
ˇche_by∑ss
)) {

791 
NGX_ERROR
:

792  
NGX_ERROR
;

794 
NGX_DECLINED
:

795 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_BYPASS
;

796  
NGX_DECLINED
;

802 
c
->
lock
 = 
u
->
c⁄f
->
ˇche_lock
;

803 
c
->
lock_timeout
 = 
u
->
c⁄f
->
ˇche_lock_timeout
;

804 
c
->
lock_age
 = 
u
->
c⁄f
->
ˇche_lock_age
;

806 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_MISS
;

809 
rc
 = 
	`ngx_hâp_fûe_ˇche_›í
(
r
);

811 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

812 "hâ∞up°ªam cache: %i", 
rc
);

814 
rc
) {

816 
NGX_HTTP_CACHE_UPDATING
:

818 i‡(
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_UPDATING
) {

819 
u
->
ˇche_°©us
 = 
rc
;

820 
rc
 = 
NGX_OK
;

823 
rc
 = 
NGX_HTTP_CACHE_STALE
;

828 
NGX_OK
:

829 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

832 
rc
) {

834 
NGX_OK
:

836 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

838 i‡(
rc
 !
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

839  
rc
;

844 
NGX_HTTP_CACHE_STALE
:

846 
c
->
vÆid_£c
 = 0;

847 
u
->
buf„r
.
°¨t
 = 
NULL
;

848 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_EXPIRED
;

852 
NGX_DECLINED
:

854 i‡((
size_t
Ë(
u
->
buf„r
.
íd
 - u->buf„r.
°¨t
Ë< u->
c⁄f
->
buf„r_size
) {

855 
u
->
buf„r
.
°¨t
 = 
NULL
;

858 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
 + 
c
->
hódî_°¨t
;

859 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

864 
NGX_HTTP_CACHE_SCARCE
:

866 
u
->
ˇchóbÀ
 = 0;

870 
NGX_AGAIN
:

872  
NGX_BUSY
;

874 
NGX_ERROR
:

876  
NGX_ERROR
;

882 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

884  
rc
;

887 
r
->
ˇched
 = 0;

889  
NGX_DECLINED
;

890 
	}
}

893 
ngx_öt_t


894 
	$ngx_hâp_up°ªam_ˇche_gë
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

895 
ngx_hâp_fûe_ˇche_t
 **
ˇche
)

897 
ngx_°r_t
 *
«me
, 
vÆ
;

898 
ngx_uöt_t
 
i
;

899 
ngx_hâp_fûe_ˇche_t
 **
ˇches
;

901 i‡(
u
->
c⁄f
->
ˇche_z⁄e
) {

902 *
ˇche
 = 
u
->
c⁄f
->
ˇche_z⁄e
->
d©a
;

903  
NGX_OK
;

906 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
u
->
c⁄f
->
ˇche_vÆue
, &
vÆ
Ë!
NGX_OK
) {

907  
NGX_ERROR
;

910 i‡(
vÆ
.
Àn
 == 0

911 || (
vÆ
.
Àn
 =3 && 
	`ngx_°∫cmp
(vÆ.
d©a
, "off", 3) == 0))

913  
NGX_DECLINED
;

916 
ˇches
 = 
u
->ˇches->
ñts
;

918 
i
 = 0; i < 
u
->
ˇches
->
√…s
; i++) {

919 
«me
 = &
ˇches
[
i
]->
shm_z⁄e
->
shm
.name;

921 i‡(
«me
->
Àn
 =
vÆ
.len

922 && 
	`ngx_°∫cmp
(
«me
->
d©a
, 
vÆ
.d©a, vÆ.
Àn
) == 0)

924 *
ˇche
 = 
ˇches
[
i
];

925  
NGX_OK
;

929 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

930 "ˇchê\"%V\"ÇŸ found", &
vÆ
);

932  
NGX_ERROR
;

933 
	}
}

936 
ngx_öt_t


937 
	$ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

939 
ngx_öt_t
 
rc
;

940 
ngx_hâp_ˇche_t
 *
c
;

942 
r
->
ˇched
 = 1;

943 
c
 = 
r
->
ˇche
;

945 i‡(
c
->
hódî_°¨t
 =c->
body_°¨t
) {

946 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

947  
	`ngx_hâp_ˇche_£nd
(
r
);

952 
u
->
buf„r
 = *
c
->
buf
;

953 
u
->
buf„r
.
pos
 +
c
->
hódî_°¨t
;

955 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

956 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

957 
u
->
hódîs_ö
.
œ°_modifõd_time
 = -1;

959 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

960 (
ngx_èbÀ_ñt_t
))

961 !
NGX_OK
)

963  
NGX_ERROR
;

966 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

968 i‡(
rc
 =
NGX_OK
) {

970 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

971  
NGX_DONE
;

974  
	`ngx_hâp_ˇche_£nd
(
r
);

977 i‡(
rc
 =
NGX_ERROR
) {

978  
NGX_ERROR
;

985  
rc
;

986 
	}
}

992 
	$ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

994 
ngx_c⁄√˘i⁄_t
 *
c
;

995 
ngx_hâp_ªque°_t
 *
r
;

996 
ngx_hâp_up°ªam_t
 *
u
;

997 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
;

999 
r
 = 
˘x
->
d©a
;

1000 
c
 = 
r
->
c⁄√˘i⁄
;

1002 
u
 = 
r
->
up°ªam
;

1003 
ur
 = 
u
->
ªsﬁved
;

1005 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

1007 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1008 "hâ∞up°ªamÑesﬁve: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1010 i‡(
˘x
->
°©e
) {

1011 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1013 &
˘x
->
«me
, ctx->
°©e
,

1014 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

1016 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

1017 
Áûed
;

1020 
ur
->
«ddrs
 = 
˘x
->naddrs;

1021 
ur
->
addrs
 = 
˘x
->addrs;

1023 #i‡(
NGX_DEBUG
)

1025 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

1026 
ngx_°r_t
 
addr
;

1027 
ngx_uöt_t
 
i
;

1029 
addr
.
d©a
 = 
ãxt
;

1031 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

1032 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
ur
->
addrs
[
i
].
sockaddr
, ur->addrs[i].
sockÀn
,

1033 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

1035 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1036 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

1041 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
ur
Ë!
NGX_OK
) {

1042 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1043 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1044 
Áûed
;

1047 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

1048 
ur
->
˘x
 = 
NULL
;

1050 
u
->
≥î
.
°¨t_time
 = 
ngx_cuºít_m£c
;

1052 i‡(
u
->
c⁄f
->
√xt_up°ªam_åõs


1053 && 
u
->
≥î
.
åõs
 > u->
c⁄f
->
√xt_up°ªam_åõs
)

1055 
u
->
≥î
.
åõs
 = u->
c⁄f
->
√xt_up°ªam_åõs
;

1058 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

1060 
Áûed
:

1062 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1063 
	}
}

1067 
	$ngx_hâp_up°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

1069 
ngx_c⁄√˘i⁄_t
 *
c
;

1070 
ngx_hâp_ªque°_t
 *
r
;

1071 
ngx_hâp_up°ªam_t
 *
u
;

1073 
c
 = 
ev
->
d©a
;

1074 
r
 = 
c
->
d©a
;

1076 
u
 = 
r
->
up°ªam
;

1077 
c
 = 
r
->
c⁄√˘i⁄
;

1079 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

1081 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1082 "hâ∞up°ªamÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1084 i‡(
ev
->
wrôe
) {

1085 
u
->
	`wrôe_evít_h™dÀr
(
r
, u);

1088 
u
->
	`ªad_evít_h™dÀr
(
r
, u);

1091 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1092 
	}
}

1096 
	$ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

1098 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
ªad
);

1099 
	}
}

1103 
	$ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

1105 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
wrôe
);

1106 
	}
}

1110 
	$ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1111 
ngx_evít_t
 *
ev
)

1113 
n
;

1114 
buf
[1];

1115 
ngx_îr_t
 
îr
;

1116 
ngx_öt_t
 
evít
;

1117 
ngx_c⁄√˘i⁄_t
 *
c
;

1118 
ngx_hâp_up°ªam_t
 *
u
;

1120 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

1122 
ev
->
wrôe
, &
r
->
uri
);

1124 
c
 = 
r
->
c⁄√˘i⁄
;

1125 
u
 = 
r
->
up°ªam
;

1127 i‡(
c
->
îr‹
) {

1128 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1130 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1132 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1133 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1134 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1139 i‡(!
u
->
ˇchóbÀ
) {

1140 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1141 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1147 #i‡(
NGX_HTTP_SPDY
)

1148 i‡(
r
->
•dy_°ªam
) {

1153 #i‡(
NGX_HAVE_KQUEUE
)

1155 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1157 i‡(!
ev
->
≥ndög_eof
) {

1161 
ev
->
eof
 = 1;

1162 
c
->
îr‹
 = 1;

1164 i‡(
ev
->
kq_î∫o
) {

1165 
ev
->
îr‹
 = 1;

1168 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1169 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1172 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1173 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1177 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1181 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1182 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1183 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1191 #i‡(
NGX_HAVE_EPOLLRDHUP
)

1193 i‡((
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
Ë&& 
ev
->
≥ndög_eof
) {

1194 
sockÀn_t
 
Àn
;

1196 
ev
->
eof
 = 1;

1197 
c
->
îr‹
 = 1;

1199 
îr
 = 0;

1200 
Àn
 = (
ngx_îr_t
);

1207 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

1210 
îr
 = 
ngx_sockë_î∫o
;

1213 i‡(
îr
) {

1214 
ev
->
îr‹
 = 1;

1217 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1218 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1221 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1222 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1226 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1230 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1231 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1232 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1240 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

1242 
îr
 = 
ngx_sockë_î∫o
;

1244 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 
îr
,

1245 "hâ∞up°ªamÑecv(): %d", 
n
);

1247 i‡(
ev
->
wrôe
 && (
n
 >0 || 
îr
 =
NGX_EAGAIN
)) {

1251 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1253 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1255 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1256 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1257 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1262 i‡(
n
 > 0) {

1266 i‡(
n
 == -1) {

1267 i‡(
îr
 =
NGX_EAGAIN
) {

1271 
ev
->
îr‹
 = 1;

1274 
îr
 = 0;

1277 
ev
->
eof
 = 1;

1278 
c
->
îr‹
 = 1;

1280 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1281 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1284 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1285 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1289 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1292 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1293 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1294 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1296 
	}
}

1300 
	$ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1302 
ngx_öt_t
 
rc
;

1303 
ngx_time_t
 *
ç
;

1304 
ngx_c⁄√˘i⁄_t
 *
c
;

1306 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1308 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

1309 
ç
 = 
	`ngx_timeofday
();

1310 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

1311 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

1314 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

1315 i‡(
u
->
°©e
 =
NULL
) {

1316 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1317 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1321 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

1323 
ç
 = 
	`ngx_timeofday
();

1324 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
;

1325 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
;

1326 
u
->
°©e
->
hódî_£c
 = (
time_t
Ë
NGX_ERROR
;

1328 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
u
->
≥î
);

1330 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1331 "hâ∞up°ªam c⁄√˘: %i", 
rc
);

1333 i‡(
rc
 =
NGX_ERROR
) {

1334 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1335 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1339 
u
->
°©e
->
≥î
 = u->≥î.
«me
;

1341 i‡(
rc
 =
NGX_BUSY
) {

1342 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "noÜive upstreams");

1343 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_NOLIVE
);

1347 i‡(
rc
 =
NGX_DECLINED
) {

1348 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1354 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1356 
c
->
d©a
 = 
r
;

1358 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1359 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1361 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
;

1362 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_hódî
;

1364 
c
->
£ndfûe
 &
r
->
c⁄√˘i⁄
->sendfile;

1365 
u
->
ouçut
.
£ndfûe
 = 
c
->sendfile;

1367 i‡(
c
->
poﬁ
 =
NULL
) {

1371 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
r
->
c⁄√˘i⁄
->
log
);

1372 i‡(
c
->
poﬁ
 =
NULL
) {

1373 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1374 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1379 
c
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1380 
c
->
poﬁ
->
log
 = c->log;

1381 
c
->
ªad
->
log
 = c->log;

1382 
c
->
wrôe
->
log
 = c->log;

1386 
u
->
wrôî
.
out
 = 
NULL
;

1387 
u
->
wrôî
.
œ°
 = &u->wrôî.
out
;

1388 
u
->
wrôî
.
c⁄√˘i⁄
 = 
c
;

1389 
u
->
wrôî
.
limô
 = 0;

1391 i‡(
u
->
ªque°_£¡
) {

1392 i‡(
	`ngx_hâp_up°ªam_ªöô
(
r
, 
u
Ë!
NGX_OK
) {

1393 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1394 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1399 i‡(
r
->
ªque°_body


1400 && 
r
->
ªque°_body
->
buf


1401 && 
r
->
ªque°_body
->
ãmp_fûe


1402 && 
r
 =r->
maö
)

1409 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1410 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1411 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1412 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1416 
u
->
ouçut
.
‰ì
->
buf
 = 
r
->
ªque°_body
->buf;

1417 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1418 
u
->
ouçut
.
Æloˇãd
 = 1;

1420 
r
->
ªque°_body
->
buf
->
pos
 =Ñ->ªque°_body->buf->
°¨t
;

1421 
r
->
ªque°_body
->
buf
->
œ°
 =Ñ->ªque°_body->buf->
°¨t
;

1422 
r
->
ªque°_body
->
buf
->
èg
 = 
u
->
ouçut
.tag;

1425 
u
->
ªque°_£¡
 = 0;

1427 i‡(
rc
 =
NGX_AGAIN
) {

1428 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
c⁄√˘_timeout
);

1432 #i‡(
NGX_HTTP_SSL
)

1434 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1435 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1441 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
, 1);

1442 
	}
}

1445 #i‡(
NGX_HTTP_SSL
)

1448 
	$ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1449 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
)

1451 
t˝_nodñay
;

1452 
ngx_öt_t
 
rc
;

1453 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1455 i‡(
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1456 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1460 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
u
->
c⁄f
->
s¶
, 
c
,

1461 
NGX_SSL_BUFFER
|
NGX_SSL_CLIENT
)

1462 !
NGX_OK
)

1464 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1465 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1469 
c
->
£ndfûe
 = 0;

1470 
u
->
ouçut
.
£ndfûe
 = 0;

1472 i‡(
u
->
c⁄f
->
s¶_£rvî_«me
 || u->c⁄f->
s¶_vîify
) {

1473 i‡(
	`ngx_hâp_up°ªam_s¶_«me
(
r
, 
u
, 
c
Ë!
NGX_OK
) {

1474 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1475 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1480 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1481 i‡(
u
->
≥î
.
	`£t_£ssi⁄
(&u->≥î, u->≥î.
d©a
Ë!
NGX_OK
) {

1482 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1483 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1489 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1491 i‡(
˛cf
->
t˝_nodñay
 && 
c
->t˝_nodñay =
NGX_TCP_NODELAY_UNSET
) {

1492 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

1494 
t˝_nodñay
 = 1;

1496 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

1497 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

1499 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

1501 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1502 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1506 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

1510 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "SSL handshakingÅo upstream";

1512 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

1514 i‡(
rc
 =
NGX_AGAIN
) {

1516 i‡(!
c
->
wrôe
->
timî_£t
) {

1517 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
c⁄√˘_timeout
);

1520 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_s¶_h™dshake
;

1524 
	`ngx_hâp_up°ªam_s¶_h™dshake
(
c
);

1525 
	}
}

1529 
	$ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

1531 
rc
;

1532 
ngx_hâp_ªque°_t
 *
r
;

1533 
ngx_hâp_up°ªam_t
 *
u
;

1535 
r
 = 
c
->
d©a
;

1536 
u
 = 
r
->
up°ªam
;

1538 
	`ngx_hâp_£t_log_ªque°
(
c
->
log
, 
r
);

1540 i‡(
c
->
s¶
->
h™dshaked
) {

1542 i‡(
u
->
c⁄f
->
s¶_vîify
) {

1543 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

1545 i‡(
rc
 !
X509_V_OK
) {

1546 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1548 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

1549 
Áûed
;

1552 i‡(
	`ngx_s¶_check_ho°
(
c
, &
u
->
s¶_«me
Ë!
NGX_OK
) {

1553 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1555 &
u
->
s¶_«me
);

1556 
Áûed
;

1560 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1561 
u
->
≥î
.
	`ßve_£ssi⁄
(&u->≥î, u->≥î.
d©a
);

1564 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1565 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1567 
c
 = 
r
->
c⁄√˘i⁄
;

1569 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
, 1);

1571 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1575 
Áûed
:

1577 
c
 = 
r
->
c⁄√˘i⁄
;

1579 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1581 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1582 
	}
}

1585 
ngx_öt_t


1586 
	$ngx_hâp_up°ªam_s¶_«me
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

1587 
ngx_c⁄√˘i⁄_t
 *
c
)

1589 
u_ch¨
 *
p
, *
œ°
;

1590 
ngx_°r_t
 
«me
;

1592 i‡(
u
->
c⁄f
->
s¶_«me
) {

1593 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
u
->
c⁄f
->
s¶_«me
, &
«me
Ë!
NGX_OK
) {

1594  
NGX_ERROR
;

1598 
«me
 = 
u
->
s¶_«me
;

1601 i‡(
«me
.
Àn
 == 0) {

1602 
d⁄e
;

1610 
p
 = 
«me
.
d©a
;

1611 
œ°
 = 
«me
.
d©a
 +Çame.
Àn
;

1613 i‡(*
p
 == '[') {

1614 
p
 = 
	`ngx_°æchr
’, 
œ°
, ']');

1616 i‡(
p
 =
NULL
) {

1617 
p
 = 
«me
.
d©a
;

1621 
p
 = 
	`ngx_°æchr
’, 
œ°
, ':');

1623 i‡(
p
 !
NULL
) {

1624 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

1627 i‡(!
u
->
c⁄f
->
s¶_£rvî_«me
) {

1628 
d⁄e
;

1631 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


1635 i‡(
«me
.
Àn
 =0 || *«me.
d©a
 == '[') {

1636 
d⁄e
;

1639 i‡(
	`ngx_öë_addr
(
«me
.
d©a
,Çame.
Àn
Ë!
INADDR_NONE
) {

1640 
d⁄e
;

1648 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
«me
.
Àn
 + 1);

1649 i‡(
p
 =
NULL
) {

1650  
NGX_ERROR
;

1653 (Ë
	`ngx_˝y°∫
(
p
, 
«me
.
d©a
,Çame.
Àn
 + 1);

1655 
«me
.
d©a
 = 
p
;

1657 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1658 "up°ªam SSL sîvîÇame: \"%s\"", 
«me
.
d©a
);

1660 i‡(
	`SSL_£t_é£xt_ho°_«me
(
c
->
s¶
->
c⁄√˘i⁄
, 
«me
.
d©a
) == 0) {

1661 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1662 "SSL_£t_é£xt_ho°_«me(\"%s\"ËÁûed", 
«me
.
d©a
);

1663  
NGX_ERROR
;

1668 
d⁄e
:

1670 
u
->
s¶_«me
 = 
«me
;

1672  
NGX_OK
;

1673 
	}
}

1678 
ngx_öt_t


1679 
	$ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1681 
off_t
 
fûe_pos
;

1682 
ngx_chaö_t
 *
˛
;

1684 i‡(
u
->
	`ªöô_ªque°
(
r
Ë!
NGX_OK
) {

1685  
NGX_ERROR
;

1688 
u
->
kì∑live
 = 0;

1689 
u
->
upgøde
 = 0;

1691 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

1692 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1693 
u
->
hódîs_ö
.
œ°_modifõd_time
 = -1;

1695 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1696 (
ngx_èbÀ_ñt_t
))

1697 !
NGX_OK
)

1699  
NGX_ERROR
;

1704 
fûe_pos
 = 0;

1706 
˛
 = 
u
->
ªque°_bufs
; cl; c»˛->
√xt
) {

1707 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

1711 i‡(
˛
->
buf
->
ö_fûe
) {

1712 
˛
->
buf
->
fûe_pos
 = file_pos;

1713 
fûe_pos
 = 
˛
->
buf
->
fûe_œ°
;

1719 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe


1720 && 
r
 !r->
maö
 && 
u
->
ouçut
.
buf
)

1722 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1723 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1724  
NGX_ERROR
;

1727 
u
->
ouçut
.
‰ì
->
buf
 = u->output.buf;

1728 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1730 
u
->
ouçut
.
buf
->
pos
 = u->ouçut.buf->
°¨t
;

1731 
u
->
ouçut
.
buf
->
œ°
 = u->ouçut.buf->
°¨t
;

1734 
u
->
ouçut
.
buf
 = 
NULL
;

1735 
u
->
ouçut
.
ö
 = 
NULL
;

1736 
u
->
ouçut
.
busy
 = 
NULL
;

1740 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1742 #i‡(
NGX_HTTP_CACHE
)

1744 i‡(
r
->
ˇche
) {

1745 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1750 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1752  
NGX_OK
;

1753 
	}
}

1757 
	$ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

1758 
ngx_uöt_t
 
do_wrôe
)

1760 
ngx_öt_t
 
rc
;

1761 
ngx_c⁄√˘i⁄_t
 *
c
;

1763 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1765 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1768 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1769 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1773 
c
->
log
->
a˘i⁄
 = "sendingÑequestÅo upstream";

1775 
rc
 = 
	`ngx_hâp_up°ªam_£nd_ªque°_body
(
r
, 
u
, 
do_wrôe
);

1777 i‡(
rc
 =
NGX_ERROR
) {

1778 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1782 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

1783 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

1787 i‡(
rc
 =
NGX_AGAIN
) {

1788 i‡(!
c
->
wrôe
->
ªady
) {

1789 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

1791 } i‡(
c
->
wrôe
->
timî_£t
) {

1792 
	`ngx_dñ_timî
(
c
->
wrôe
);

1795 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
Ë!
NGX_OK
) {

1796 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1797 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1806 i‡(
c
->
wrôe
->
timî_£t
) {

1807 
	`ngx_dñ_timî
(
c
->
wrôe
);

1810 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

1811 i‡(
	`ngx_t˝_push
(
c
->
fd
Ë=
NGX_ERROR
) {

1812 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
ngx_sockë_î∫o
,

1813 
ngx_t˝_push_n
 " failed");

1814 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1815 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1819 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

1822 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1824 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1825 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1826 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1830 
	`ngx_add_timî
(
c
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

1832 i‡(
c
->
ªad
->
ªady
) {

1833 
	`ngx_hâp_up°ªam_¥o˚ss_hódî
(
r
, 
u
);

1836 
	}
}

1839 
ngx_öt_t


1840 
	$ngx_hâp_up°ªam_£nd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

1841 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
do_wrôe
)

1843 
t˝_nodñay
;

1844 
ngx_öt_t
 
rc
;

1845 
ngx_chaö_t
 *
out
, *
˛
, *
 
;

1846 
ngx_c⁄√˘i⁄_t
 *
c
;

1847 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1849 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1852 i‡(!
r
->
ªque°_body_no_buf„rög
) {

1856 i‡(!
u
->
ªque°_£¡
) {

1857 
u
->
ªque°_£¡
 = 1;

1858 
out
 = 
u
->
ªque°_bufs
;

1861 
out
 = 
NULL
;

1864  
	`ngx_ouçut_chaö
(&
u
->
ouçut
, 
out
);

1867 i‡(!
u
->
ªque°_£¡
) {

1868 
u
->
ªque°_£¡
 = 1;

1869 
out
 = 
u
->
ªque°_bufs
;

1871 i‡(
r
->
ªque°_body
->
bufs
) {

1872 
˛
 = 
out
; cl->
√xt
; cl = out->next) { }

1873 
˛
->
√xt
 = 
r
->
ªque°_body
->
bufs
;

1874 
r
->
ªque°_body
->
bufs
 = 
NULL
;

1877 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1878 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1880 i‡(
˛cf
->
t˝_nodñay
 && 
c
->t˝_nodñay =
NGX_TCP_NODELAY_UNSET
) {

1881 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

1883 
t˝_nodñay
 = 1;

1885 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

1886 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

1888 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

1890  
NGX_ERROR
;

1893 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

1896 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_ªad_ªque°_h™dÀr
;

1899 
out
 = 
NULL
;

1904 i‡(
do_wrôe
) {

1905 
rc
 = 
	`ngx_ouçut_chaö
(&
u
->
ouçut
, 
out
);

1907 i‡(
rc
 =
NGX_ERROR
) {

1908  
NGX_ERROR
;

1911 
out
) {

1912 
 
 = 
out
;

1913 
out
 = out->
√xt
;

1914 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

1917 i‡(
rc
 =
NGX_OK
 && !
r
->
ªadög_body
) {

1922 i‡(
r
->
ªadög_body
) {

1925 
rc
 = 
	`ngx_hâp_ªad_unbuf„ªd_ªque°_body
(
r
);

1927 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

1928  
rc
;

1931 
out
 = 
r
->
ªque°_body
->
bufs
;

1932 
r
->
ªque°_body
->
bufs
 = 
NULL
;

1937 i‡(
out
 =
NULL
) {

1938 
rc
 = 
NGX_AGAIN
;

1942 
do_wrôe
 = 1;

1945 i‡(!
r
->
ªadög_body
) {

1946 i‡(!
u
->
°‹e
 && !
r
->
po°_a˘i⁄
 && !u->
c⁄f
->
ign‹e_˛õ¡_ab‹t
) {

1947 
r
->
ªad_evít_h™dÀr
 =

1948 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
;

1952  
rc
;

1953 
	}
}

1957 
	$ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

1958 
ngx_hâp_up°ªam_t
 *
u
)

1960 
ngx_c⁄√˘i⁄_t
 *
c
;

1962 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1964 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1967 i‡(
c
->
wrôe
->
timedout
) {

1968 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1972 #i‡(
NGX_HTTP_SSL
)

1974 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1975 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1981 i‡(
u
->
hódî_£¡
) {

1982 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1984 (Ë
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0);

1989 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
, 1);

1990 
	}
}

1994 
	$ngx_hâp_up°ªam_ªad_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

1996 
ngx_c⁄√˘i⁄_t
 *
c
;

1997 
ngx_hâp_up°ªam_t
 *
u
;

1999 
c
 = 
r
->
c⁄√˘i⁄
;

2000 
u
 = 
r
->
up°ªam
;

2002 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2005 i‡(
c
->
ªad
->
timedout
) {

2006 
c
->
timedout
 = 1;

2007 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2011 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
, 0);

2012 
	}
}

2016 
	$ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2018 
ssize_t
 
n
;

2019 
ngx_öt_t
 
rc
;

2020 
ngx_time_t
 *
ç
;

2021 
ngx_c⁄√˘i⁄_t
 *
c
;

2023 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2025 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2028 
c
->
log
->
a˘i⁄
 = "readingÑesponse header from upstream";

2030 i‡(
c
->
ªad
->
timedout
) {

2031 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

2035 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

2036 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

2040 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

2041 
u
->
buf„r
.
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, u->
c⁄f
->
buf„r_size
);

2042 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

2043 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2044 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2048 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

2049 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

2050 
u
->
buf„r
.
íd
 = u->buf„r.
°¨t
 + u->
c⁄f
->
buf„r_size
;

2051 
u
->
buf„r
.
ãmp‹¨y
 = 1;

2053 
u
->
buf„r
.
èg
 = u->
ouçut
.tag;

2055 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

2056 (
ngx_èbÀ_ñt_t
))

2057 !
NGX_OK
)

2059 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2060 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2064 #i‡(
NGX_HTTP_CACHE
)

2066 i‡(
r
->
ˇche
) {

2067 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

2068 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2075 
n
 = 
c
->
	`ªcv
(c, 
u
->
buf„r
.
œ°
, u->buf„r.
íd
 - u->buffer.last);

2077 i‡(
n
 =
NGX_AGAIN
) {

2079 
	`ngx_add_timî
(
ªv
, 
u
->
ªad_timeout
);

2082 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

2083 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2084 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2091 i‡(
n
 == 0) {

2092 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

2096 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

2097 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

2101 
u
->
buf„r
.
œ°
 +
n
;

2104 
u
->
vÆid_hódî_ö
 = 0;

2106 
u
->
≥î
.
ˇched
 = 0;

2109 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

2111 i‡(
rc
 =
NGX_AGAIN
) {

2113 i‡(
u
->
buf„r
.
œ°
 =u->buf„r.
íd
) {

2114 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

2117 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
,

2118 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

2128 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

2129 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

2133 i‡(
rc
 =
NGX_ERROR
) {

2134 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2135 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2141 
ç
 = 
	`ngx_timeofday
();

2142 
u
->
°©e
->
hódî_£c
 = 
ç
->
£c
 - u->°©e->
ª•⁄£_£c
;

2143 
u
->
°©e
->
hódî_m£c
 = 
ç
->
m£c
 - u->°©e->
ª•⁄£_m£c
;

2145 i‡(
u
->
hódîs_ö
.
°©us_n
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

2147 i‡(
	`ngx_hâp_up°ªam_ã°_√xt
(
r
, 
u
Ë=
NGX_OK
) {

2151 i‡(
	`ngx_hâp_up°ªam_öãr˚±_îr‹s
(
r
, 
u
Ë=
NGX_OK
) {

2156 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

2160 i‡(!
r
->
subªque°_ö_mem‹y
) {

2161 
	`ngx_hâp_up°ªam_£nd_ª•⁄£
(
r
, 
u
);

2167 i‡(
u
->
öput_fûãr
 =
NULL
) {

2168 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

2169 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

2170 
u
->
öput_fûãr_˘x
 = 
r
;

2173 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

2174 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2178 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2180 i‡(
n
) {

2181 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2183 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2185 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2186 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2191 i‡(
u
->
Àngth
 == 0) {

2192 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2196 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
;

2198 
	`ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
r
, 
u
);

2199 
	}
}

2202 
ngx_öt_t


2203 
	$ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2205 
ngx_uöt_t
 
°©us
;

2206 
ngx_hâp_up°ªam_√xt_t
 *
un
;

2208 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

2210 
un
 = 
ngx_hâp_up°ªam_√xt_îr‹s
; un->
°©us
; un++) {

2212 i‡(
°©us
 !
un
->status) {

2216 i‡(
u
->
≥î
.
åõs
 > 1 && (u->
c⁄f
->
√xt_up°ªam
 & 
un
->
mask
)) {

2217 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
un
->
mask
);

2218  
NGX_OK
;

2221 #i‡(
NGX_HTTP_CACHE
)

2223 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


2224 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
un
->
mask
))

2226 
ngx_öt_t
 
rc
;

2228 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

2230 i‡(
rc
 =
NGX_OK
) {

2231 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

2232 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

2235 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2236  
NGX_OK
;

2242 #i‡(
NGX_HTTP_CACHE
)

2244 i‡(
°©us
 =
NGX_HTTP_NOT_MODIFIED


2245 && 
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


2246 && 
u
->
c⁄f
->
ˇche_ªvÆid©e
)

2248 
time_t
 
now
, 
vÆid
;

2249 
ngx_öt_t
 
rc
;

2251 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2254 
now
 = 
	`ngx_time
();

2255 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2257 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

2259 i‡(
rc
 !
NGX_OK
) {

2260 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2261  
NGX_OK
;

2264 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_REVALIDATED
;

2265 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

2267 i‡(
vÆid
 == 0) {

2268 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2271 i‡(
vÆid
 == 0) {

2272 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

2273 
u
->
hódîs_ö
.
°©us_n
);

2274 i‡(
vÆid
) {

2275 
vÆid
 = 
now
 + valid;

2279 i‡(
vÆid
) {

2280 
r
->
ˇche
->
vÆid_£c
 = 
vÆid
;

2281 
r
->
ˇche
->
d©e
 = 
now
;

2283 
	`ngx_hâp_fûe_ˇche_upd©e_hódî
(
r
);

2286 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2287  
NGX_OK
;

2292  
NGX_DECLINED
;

2293 
	}
}

2296 
ngx_öt_t


2297 
	$ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

2298 
ngx_hâp_up°ªam_t
 *
u
)

2300 
ngx_öt_t
 
°©us
;

2301 
ngx_uöt_t
 
i
;

2302 
ngx_èbÀ_ñt_t
 *
h
;

2303 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

2304 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2306 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

2308 i‡(
°©us
 =
NGX_HTTP_NOT_FOUND
 && 
u
->
c⁄f
->
öãr˚±_404
) {

2309 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_NOT_FOUND
);

2310  
NGX_OK
;

2313 i‡(!
u
->
c⁄f
->
öãr˚±_îr‹s
) {

2314  
NGX_DECLINED
;

2317 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2319 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

2320  
NGX_DECLINED
;

2323 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

2324 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

2326 i‡(
îr_∑ge
[
i
].
°©us
 == status) {

2328 i‡(
°©us
 =
NGX_HTTP_UNAUTHORIZED


2329 && 
u
->
hódîs_ö
.
www_authítiˇã
)

2331 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

2333 i‡(
h
 =
NULL
) {

2334 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2335 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2336  
NGX_OK
;

2339 *
h
 = *
u
->
hódîs_ö
.
www_authítiˇã
;

2341 
r
->
hódîs_out
.
www_authítiˇã
 = 
h
;

2344 #i‡(
NGX_HTTP_CACHE
)

2346 i‡(
r
->
ˇche
) {

2347 
time_t
 
vÆid
;

2349 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
°©us
);

2351 i‡(
vÆid
) {

2352 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

2353 
r
->
ˇche
->
îr‹
 = 
°©us
;

2356 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2359 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

2361  
NGX_OK
;

2365  
NGX_DECLINED
;

2366 
	}
}

2369 
ngx_öt_t


2370 
	$ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
)

2372 
îr
;

2373 
sockÀn_t
 
Àn
;

2375 #i‡(
NGX_HAVE_KQUEUE
)

2377 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2378 i‡(
c
->
wrôe
->
≥ndög_eof
 || c->
ªad
->pending_eof) {

2379 i‡(
c
->
wrôe
->
≥ndög_eof
) {

2380 
îr
 = 
c
->
wrôe
->
kq_î∫o
;

2383 
îr
 = 
c
->
ªad
->
kq_î∫o
;

2386 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

2387 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

2389  
NGX_ERROR
;

2395 
îr
 = 0;

2396 
Àn
 = ();

2403 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

2406 
îr
 = 
ngx_sockë_î∫o
;

2409 i‡(
îr
) {

2410 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

2411 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "connect() failed");

2412  
NGX_ERROR
;

2416  
NGX_OK
;

2417 
	}
}

2420 
ngx_öt_t


2421 
	$ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2423 
ngx_°r_t
 
uri
, 
¨gs
;

2424 
ngx_uöt_t
 
i
, 
Êags
;

2425 
ngx_li°_∑π_t
 *
∑π
;

2426 
ngx_èbÀ_ñt_t
 *
h
;

2427 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

2428 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

2430 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

2432 i‡(
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘


2433 && !(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
))

2435 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_DECLINED
);

2437 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

2438 
h
 = 
∑π
->
ñts
;

2440 
i
 = 0; ; i++) {

2442 i‡(
i
 >
∑π
->
√…s
) {

2443 i‡(
∑π
->
√xt
 =
NULL
) {

2447 
∑π
 =Ö¨t->
√xt
;

2448 
h
 = 
∑π
->
ñts
;

2449 
i
 = 0;

2452 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

2453 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

2455 i‡(
hh
 && hh->
ªdúe˘
) {

2456 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

2457 
	`ngx_hâp_föÆize_ªque°
(
r
,

2458 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2459  
NGX_DONE
;

2464 
uri
 = 
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘
->
vÆue
;

2466 i‡(
uri
.
d©a
[0] == '@') {

2467 
	`ngx_hâp_«med_loˇti⁄
(
r
, &
uri
);

2470 
	`ngx_°r_nuŒ
(&
¨gs
);

2471 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

2473 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, &
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

2474 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

2475  
NGX_DONE
;

2478 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

2479 
r
->
mëhod
 = 
NGX_HTTP_GET
;

2482 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

2485 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

2486  
NGX_DONE
;

2489 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

2490 
h
 = 
∑π
->
ñts
;

2492 
i
 = 0; ; i++) {

2494 i‡(
i
 >
∑π
->
√…s
) {

2495 i‡(
∑π
->
√xt
 =
NULL
) {

2499 
∑π
 =Ö¨t->
√xt
;

2500 
h
 = 
∑π
->
ñts
;

2501 
i
 = 0;

2504 i‡(
	`ngx_hash_föd
(&
u
->
c⁄f
->
hide_hódîs_hash
, 
h
[
i
].
hash
,

2505 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
))

2510 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

2511 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

2513 i‡(
hh
) {

2514 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

2515 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2516 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2517  
NGX_DONE
;

2523 i‡(
	`ngx_hâp_up°ªam_c›y_hódî_löe
(
r
, &
h
[
i
], 0Ë!
NGX_OK
) {

2524 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

2525 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2526  
NGX_DONE
;

2530 i‡(
r
->
hódîs_out
.
£rvî
 &&Ñ->hódîs_out.£rvî->
vÆue
.
d©a
 =
NULL
) {

2531 
r
->
hódîs_out
.
£rvî
->
hash
 = 0;

2534 i‡(
r
->
hódîs_out
.
d©e
 &&Ñ->hódîs_out.d©e->
vÆue
.
d©a
 =
NULL
) {

2535 
r
->
hódîs_out
.
d©e
->
hash
 = 0;

2538 
r
->
hódîs_out
.
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

2539 
r
->
hódîs_out
.
°©us_löe
 = 
u
->
hódîs_ö
.status_line;

2541 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
u
->
hódîs_ö
.content_length_n;

2543 
r
->
dißbÀ_nŸ_modifõd
 = !
u
->
ˇchóbÀ
;

2545 i‡(
u
->
c⁄f
->
f‹˚_ønges
) {

2546 
r
->
Ælow_ønges
 = 1;

2547 
r
->
sögÀ_ønge
 = 1;

2549 #i‡(
NGX_HTTP_CACHE
)

2550 i‡(
r
->
ˇched
) {

2551 
r
->
sögÀ_ønge
 = 0;

2556 
u
->
Àngth
 = -1;

2558  
NGX_OK
;

2559 
	}
}

2563 
	$ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

2564 
ngx_hâp_up°ªam_t
 *
u
)

2566 
size_t
 
size
;

2567 
ssize_t
 
n
;

2568 
ngx_buf_t
 *
b
;

2569 
ngx_evít_t
 *
ªv
;

2570 
ngx_c⁄√˘i⁄_t
 *
c
;

2572 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2573 
ªv
 = 
c
->
ªad
;

2575 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2578 i‡(
ªv
->
timedout
) {

2579 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2580 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_GATEWAY_TIME_OUT
);

2584 
b
 = &
u
->
buf„r
;

2588 
size
 = 
b
->
íd
 - b->
œ°
;

2590 i‡(
size
 == 0) {

2591 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2593 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2597 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

2599 i‡(
n
 =
NGX_AGAIN
) {

2603 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

2604 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
n
);

2608 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2610 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2611 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2615 i‡(!
ªv
->
ªady
) {

2620 i‡(
u
->
Àngth
 == 0) {

2621 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2625 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2626 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2630 i‡(
ªv
->
a˘ive
) {

2631 
	`ngx_add_timî
(
ªv
, 
u
->
c⁄f
->
ªad_timeout
);

2633 } i‡(
ªv
->
timî_£t
) {

2634 
	`ngx_dñ_timî
(
ªv
);

2636 
	}
}

2640 
	$ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2642 
t˝_nodñay
;

2643 
ssize_t
 
n
;

2644 
ngx_öt_t
 
rc
;

2645 
ngx_evít_pùe_t
 *
p
;

2646 
ngx_c⁄√˘i⁄_t
 *
c
;

2647 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2649 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

2651 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
po°_a˘i⁄
) {

2652 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2656 
u
->
hódî_£¡
 = 1;

2658 i‡(
u
->
upgøde
) {

2659 
	`ngx_hâp_up°ªam_upgøde
(
r
, 
u
);

2663 
c
 = 
r
->
c⁄√˘i⁄
;

2665 i‡(
r
->
hódî_⁄ly
) {

2667 i‡(!
u
->
buf„rög
) {

2668 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2672 i‡(!
u
->
ˇchóbÀ
 && !u->
°‹e
) {

2673 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2677 
u
->
pùe
->
down°ªam_îr‹
 = 1;

2680 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe
) {

2681 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
);

2682 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2685 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2687 i‡(!
u
->
buf„rög
) {

2689 i‡(
u
->
öput_fûãr
 =
NULL
) {

2690 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

2691 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

2692 
u
->
öput_fûãr_˘x
 = 
r
;

2695 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
;

2696 
r
->
wrôe_evít_h™dÀr
 =

2697 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
;

2699 
r
->
limô_øã
 = 0;

2701 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

2702 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2706 i‡(
˛cf
->
t˝_nodñay
 && 
c
->t˝_nodñay =
NGX_TCP_NODELAY_UNSET
) {

2707 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2709 
t˝_nodñay
 = 1;

2711 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2712 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2714 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2716 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2720 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2723 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2725 i‡(
n
) {

2726 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2728 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2730 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2731 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2735 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
r
);

2738 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

2739 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

2741 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

2742 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2746 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady
 || u->
Àngth
 == 0) {

2747 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
r
, 
u
);

2756 #i‡(
NGX_HTTP_CACHE
)

2758 i‡(
r
->
ˇche
 &&Ñ->ˇche->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

2759 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ˇche
->
fûe
.
fd
);

2760 
r
->
ˇche
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2763 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
no_ˇche
)) {

2765 
NGX_ERROR
:

2766 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2769 
NGX_DECLINED
:

2770 
u
->
ˇchóbÀ
 = 0;

2775 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_BYPASS
) {

2779 i‡(
	`ngx_hâp_fûe_ˇche_¸óã
(
r
Ë!
NGX_OK
) {

2780 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2788 i‡(
u
->
ˇchóbÀ
) {

2789 
time_t
 
now
, 
vÆid
;

2791 
now
 = 
	`ngx_time
();

2793 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2795 i‡(
vÆid
 == 0) {

2796 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

2797 
u
->
hódîs_ö
.
°©us_n
);

2798 i‡(
vÆid
) {

2799 
r
->
ˇche
->
vÆid_£c
 = 
now
 + 
vÆid
;

2803 i‡(
vÆid
) {

2804 
r
->
ˇche
->
d©e
 = 
now
;

2805 
r
->
ˇche
->
body_°¨t
 = (
u_sh‹t
Ë(
u
->
buf„r
.
pos
 - u->buf„r.
°¨t
);

2807 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_OK


2808 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_PARTIAL_CONTENT
)

2810 
r
->
ˇche
->
œ°_modifõd
 = 
u
->
hódîs_ö
.
œ°_modifõd_time
;

2812 i‡(
u
->
hódîs_ö
.
ëag
) {

2813 
r
->
ˇche
->
ëag
 = 
u
->
hódîs_ö
.ëag->
vÆue
;

2816 
	`ngx_°r_nuŒ
(&
r
->
ˇche
->
ëag
);

2820 
r
->
ˇche
->
œ°_modifõd
 = -1;

2821 
	`ngx_°r_nuŒ
(&
r
->
ˇche
->
ëag
);

2824 i‡(
	`ngx_hâp_fûe_ˇche_£t_hódî
(
r
, 
u
->
buf„r
.
°¨t
Ë!
NGX_OK
) {

2825 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2830 
u
->
ˇchóbÀ
 = 0;

2834 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2835 "hâ∞ˇchóbÀ: %d", 
u
->
ˇchóbÀ
);

2837 i‡(
u
->
ˇchóbÀ
 =0 && 
r
->
ˇche
) {

2838 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2843 
p
 = 
u
->
pùe
;

2845 
p
->
ouçut_fûãr
 = (
ngx_evít_pùe_ouçut_fûãr_±
Ë
ngx_hâp_ouçut_fûãr
;

2846 
p
->
ouçut_˘x
 = 
r
;

2847 
p
->
èg
 = 
u
->
ouçut
.tag;

2848 
p
->
bufs
 = 
u
->
c⁄f
->bufs;

2849 
p
->
busy_size
 = 
u
->
c⁄f
->
busy_buf„rs_size
;

2850 
p
->
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2851 
p
->
down°ªam
 = 
c
;

2852 
p
->
poﬁ
 = 
r
->pool;

2853 
p
->
log
 = 
c
->log;

2854 
p
->
limô_øã
 = 
u
->
c⁄f
->limit_rate;

2855 
p
->
°¨t_£c
 = 
	`ngx_time
();

2857 
p
->
ˇchóbÀ
 = 
u
->ˇchóbÀ || u->
°‹e
;

2859 
p
->
ãmp_fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

2860 i‡(
p
->
ãmp_fûe
 =
NULL
) {

2861 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2865 
p
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2866 
p
->
ãmp_fûe
->
fûe
.
log
 = 
c
->log;

2867 
p
->
ãmp_fûe
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

2868 
p
->
ãmp_fûe
->
poﬁ
 = 
r
->pool;

2870 i‡(
p
->
ˇchóbÀ
) {

2871 
p
->
ãmp_fûe
->
≥rsi°ít
 = 1;

2873 #i‡(
NGX_HTTP_CACHE
)

2874 i‡(
r
->
ˇche
 &&Ñ->ˇche->
fûe_ˇche
->
ãmp_∑th
) {

2875 
p
->
ãmp_fûe
->
∑th
 = 
r
->
ˇche
->
fûe_ˇche
->
ãmp_∑th
;

2880 
p
->
ãmp_fûe
->
log_Àvñ
 = 
NGX_LOG_WARN
;

2881 
p
->
ãmp_fûe
->
w¨n
 = "an upstreamÑesponse is buffered "

2885 
p
->
max_ãmp_fûe_size
 = 
u
->
c⁄f
->max_temp_file_size;

2886 
p
->
ãmp_fûe_wrôe_size
 = 
u
->
c⁄f
->temp_file_write_size;

2888 
p
->
¥îód_bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2889 i‡(
p
->
¥îód_bufs
 =
NULL
) {

2890 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2894 
p
->
¥îód_bufs
->
buf
 = &
u
->
buf„r
;

2895 
p
->
¥îód_bufs
->
√xt
 = 
NULL
;

2896 
u
->
buf„r
.
ªcy˛ed
 = 1;

2898 
p
->
¥îód_size
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2900 i‡(
u
->
ˇchóbÀ
) {

2902 
p
->
buf_to_fûe
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2903 i‡(
p
->
buf_to_fûe
 =
NULL
) {

2904 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2908 
p
->
buf_to_fûe
->
°¨t
 = 
u
->
buf„r
.start;

2909 
p
->
buf_to_fûe
->
pos
 = 
u
->
buf„r
.
°¨t
;

2910 
p
->
buf_to_fûe
->
œ°
 = 
u
->
buf„r
.
pos
;

2911 
p
->
buf_to_fûe
->
ãmp‹¨y
 = 1;

2914 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

2916 
p
->
sögÀ_buf
 = 1;

2920 
p
->
‰ì_bufs
 = 1;

2926 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2928 i‡(
u
->
c⁄f
->
cy˛ic_ãmp_fûe
) {

2936 
p
->
cy˛ic_ãmp_fûe
 = 1;

2937 
c
->
£ndfûe
 = 0;

2940 
p
->
cy˛ic_ãmp_fûe
 = 0;

2943 
p
->
ªad_timeout
 = 
u
->
c⁄f
->read_timeout;

2944 
p
->
£nd_timeout
 = 
˛cf
->send_timeout;

2945 
p
->
£nd_low©
 = 
˛cf
->send_lowat;

2947 
p
->
Àngth
 = -1;

2949 i‡(
u
->
öput_fûãr_öô


2950 && 
u
->
	`öput_fûãr_öô
(
p
->
öput_˘x
Ë!
NGX_OK
)

2952 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2956 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
;

2957 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
;

2959 
	`ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
r
, 
u
);

2960 
	}
}

2964 
	$ngx_hâp_up°ªam_upgøde
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2966 
t˝_nodñay
;

2967 
ngx_c⁄√˘i⁄_t
 *
c
;

2968 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2970 
c
 = 
r
->
c⁄√˘i⁄
;

2971 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2975 
r
->
kì∑live
 = 0;

2976 
c
->
log
->
a˘i⁄
 = "proxying upgraded connection";

2978 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_ªad_up°ªam
;

2979 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
;

2980 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_ªad_down°ªam
;

2981 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
;

2983 i‡(
˛cf
->
t˝_nodñay
) {

2984 
t˝_nodñay
 = 1;

2986 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

2987 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2989 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2990 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2992 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2994 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2998 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

3001 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

3002 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
u
->
≥î
.
c⁄√˘i⁄
->
log
, 0,

3005 i‡(
	`£tsock›t
(
u
->
≥î
.
c⁄√˘i⁄
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

3006 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

3008 
	`ngx_c⁄√˘i⁄_îr‹
(
u
->
≥î
.
c⁄√˘i⁄
, 
ngx_sockë_î∫o
,

3010 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3014 
u
->
≥î
.
c⁄√˘i⁄
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

3018 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

3019 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3023 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady


3024 || 
u
->
buf„r
.
pos
 !u->buf„r.
œ°
)

3026 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

3027 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 1);

3031 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 1);

3032 
	}
}

3036 
	$ngx_hâp_up°ªam_upgøded_ªad_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

3038 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 0);

3039 
	}
}

3043 
	$ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

3045 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 1);

3046 
	}
}

3050 
	$ngx_hâp_up°ªam_upgøded_ªad_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

3051 
ngx_hâp_up°ªam_t
 *
u
)

3053 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 0);

3054 
	}
}

3058 
	$ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

3059 
ngx_hâp_up°ªam_t
 *
u
)

3061 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 1);

3062 
	}
}

3066 
	$ngx_hâp_up°ªam_¥o˚ss_upgøded
(
ngx_hâp_ªque°_t
 *
r
,

3067 
ngx_uöt_t
 
‰om_up°ªam
,Çgx_uöt_à
do_wrôe
)

3069 
size_t
 
size
;

3070 
ssize_t
 
n
;

3071 
ngx_buf_t
 *
b
;

3072 
ngx_c⁄√˘i⁄_t
 *
c
, *
down°ªam
, *
up°ªam
, *
d°
, *
§c
;

3073 
ngx_hâp_up°ªam_t
 *
u
;

3074 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3076 
c
 = 
r
->
c⁄√˘i⁄
;

3077 
u
 = 
r
->
up°ªam
;

3079 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3080 "hâ∞up°ªamÖro˚s†upgøded, fu:%ui", 
‰om_up°ªam
);

3082 
down°ªam
 = 
c
;

3083 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3085 i‡(
down°ªam
->
wrôe
->
timedout
) {

3086 
c
->
timedout
 = 1;

3087 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

3088 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

3092 i‡(
up°ªam
->
ªad
->
timedout
 || up°ªam->
wrôe
->timedout) {

3093 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

3094 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_GATEWAY_TIME_OUT
);

3098 i‡(
‰om_up°ªam
) {

3099 
§c
 = 
up°ªam
;

3100 
d°
 = 
down°ªam
;

3101 
b
 = &
u
->
buf„r
;

3104 
§c
 = 
down°ªam
;

3105 
d°
 = 
up°ªam
;

3106 
b
 = &
u
->
‰om_˛õ¡
;

3108 i‡(
r
->
hódî_ö
->
œ°
 >Ñ->hódî_ö->
pos
) {

3109 
b
 = 
r
->
hódî_ö
;

3110 
b
->
íd
 = b->
œ°
;

3111 
do_wrôe
 = 1;

3114 i‡(
b
->
°¨t
 =
NULL
) {

3115 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
u
->
c⁄f
->
buf„r_size
);

3116 i‡(
b
->
°¨t
 =
NULL
) {

3117 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3121 
b
->
pos
 = b->
°¨t
;

3122 
b
->
œ°
 = b->
°¨t
;

3123 
b
->
íd
 = b->
°¨t
 + 
u
->
c⁄f
->
buf„r_size
;

3124 
b
->
ãmp‹¨y
 = 1;

3125 
b
->
èg
 = 
u
->
ouçut
.tag;

3131 i‡(
do_wrôe
) {

3133 
size
 = 
b
->
œ°
 - b->
pos
;

3135 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

3137 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

3139 i‡(
n
 =
NGX_ERROR
) {

3140 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3144 i‡(
n
 > 0) {

3145 
b
->
pos
 +
n
;

3147 i‡(
b
->
pos
 =b->
œ°
) {

3148 
b
->
pos
 = b->
°¨t
;

3149 
b
->
œ°
 = b->
°¨t
;

3155 
size
 = 
b
->
íd
 - b->
œ°
;

3157 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

3159 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

3161 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

3165 i‡(
n
 > 0) {

3166 
do_wrôe
 = 1;

3167 
b
->
œ°
 +
n
;

3172 i‡(
n
 =
NGX_ERROR
) {

3173 
§c
->
ªad
->
eof
 = 1;

3180 i‡((
up°ªam
->
ªad
->
eof
 && 
u
->
buf„r
.
pos
 =u->buf„r.
œ°
)

3181 || (
down°ªam
->
ªad
->
eof
 && 
u
->
‰om_˛õ¡
.
pos
 =u->‰om_˛õ¡.
œ°
)

3182 || (
down°ªam
->
ªad
->
eof
 && 
up°ªam
->read->eof))

3184 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3186 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

3190 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3192 i‡(
	`ngx_h™dÀ_wrôe_evít
(
up°ªam
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
)

3193 !
NGX_OK
)

3195 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3199 i‡(
up°ªam
->
wrôe
->
a˘ive
 && !up°ªam->wrôe->
ªady
) {

3200 
	`ngx_add_timî
(
up°ªam
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

3202 } i‡(
up°ªam
->
wrôe
->
timî_£t
) {

3203 
	`ngx_dñ_timî
(
up°ªam
->
wrôe
);

3206 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

3207 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3211 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

3212 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

3214 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

3215 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

3218 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

3219 !
NGX_OK
)

3221 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3225 i‡(
	`ngx_h™dÀ_ªad_evít
(
down°ªam
->
ªad
, 0Ë!
NGX_OK
) {

3226 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3230 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

3231 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

3233 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

3234 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

3236 
	}
}

3240 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

3242 
ngx_evít_t
 *
wev
;

3243 
ngx_c⁄√˘i⁄_t
 *
c
;

3244 
ngx_hâp_up°ªam_t
 *
u
;

3246 
c
 = 
r
->
c⁄√˘i⁄
;

3247 
u
 = 
r
->
up°ªam
;

3248 
wev
 = 
c
->
wrôe
;

3250 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3253 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

3255 i‡(
wev
->
timedout
) {

3256 
c
->
timedout
 = 1;

3257 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

3258 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

3262 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 1);

3263 
	}
}

3267 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

3268 
ngx_hâp_up°ªam_t
 *
u
)

3270 
ngx_c⁄√˘i⁄_t
 *
c
;

3272 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3274 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3277 
c
->
log
->
a˘i⁄
 = "reading upstream";

3279 i‡(
c
->
ªad
->
timedout
) {

3280 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

3281 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_GATEWAY_TIME_OUT
);

3285 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 0);

3286 
	}
}

3290 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

3291 
ngx_uöt_t
 
do_wrôe
)

3293 
size_t
 
size
;

3294 
ssize_t
 
n
;

3295 
ngx_buf_t
 *
b
;

3296 
ngx_öt_t
 
rc
;

3297 
ngx_c⁄√˘i⁄_t
 *
down°ªam
, *
up°ªam
;

3298 
ngx_hâp_up°ªam_t
 *
u
;

3299 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3301 
u
 = 
r
->
up°ªam
;

3302 
down°ªam
 = 
r
->
c⁄√˘i⁄
;

3303 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3305 
b
 = &
u
->
buf„r
;

3307 
do_wrôe
 = do_wrôê|| 
u
->
Àngth
 == 0;

3311 i‡(
do_wrôe
) {

3313 i‡(
u
->
out_bufs
 || u->
busy_bufs
) {

3314 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
u
->
out_bufs
);

3316 i‡(
rc
 =
NGX_ERROR
) {

3317 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3321 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
u
->
‰ì_bufs
, &u->
busy_bufs
,

3322 &
u
->
out_bufs
, u->
ouçut
.
èg
);

3325 i‡(
u
->
busy_bufs
 =
NULL
) {

3327 i‡(
u
->
Àngth
 == 0

3328 || (
up°ªam
->
ªad
->
eof
 && 
u
->
Àngth
 == -1))

3330 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

3334 i‡(
up°ªam
->
ªad
->
eof
) {

3335 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
up°ªam
->
log
, 0,

3338 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

3339 
NGX_HTTP_BAD_GATEWAY
);

3343 i‡(
up°ªam
->
ªad
->
îr‹
) {

3344 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

3345 
NGX_HTTP_BAD_GATEWAY
);

3349 
b
->
pos
 = b->
°¨t
;

3350 
b
->
œ°
 = b->
°¨t
;

3354 
size
 = 
b
->
íd
 - b->
œ°
;

3356 i‡(
size
 && 
up°ªam
->
ªad
->
ªady
) {

3358 
n
 = 
up°ªam
->
	`ªcv
(up°ªam, 
b
->
œ°
, 
size
);

3360 i‡(
n
 =
NGX_AGAIN
) {

3364 i‡(
n
 > 0) {

3365 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

3367 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

3368 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3373 
do_wrôe
 = 1;

3381 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3383 i‡(
down°ªam
->
d©a
 =
r
) {

3384 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

3385 !
NGX_OK
)

3387 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3392 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

3393 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

3395 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

3396 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

3399 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

3400 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3404 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

3405 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

3407 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

3408 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

3410 
	}
}

3413 
ngx_öt_t


3414 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
)

3416  
NGX_OK
;

3417 
	}
}

3420 
ngx_öt_t


3421 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

3423 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

3425 
ngx_buf_t
 *
b
;

3426 
ngx_chaö_t
 *
˛
, **
Œ
;

3427 
ngx_hâp_up°ªam_t
 *
u
;

3429 
u
 = 
r
->
up°ªam
;

3431 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

3432 
Œ
 = &
˛
->
√xt
;

3435 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

3436 i‡(
˛
 =
NULL
) {

3437  
NGX_ERROR
;

3440 *
Œ
 = 
˛
;

3442 
˛
->
buf
->
Êush
 = 1;

3443 
˛
->
buf
->
mem‹y
 = 1;

3445 
b
 = &
u
->
buf„r
;

3447 
˛
->
buf
->
pos
 = 
b
->
œ°
;

3448 
b
->
œ°
 +
byãs
;

3449 
˛
->
buf
->
œ°
 = 
b
->last;

3450 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

3452 i‡(
u
->
Àngth
 == -1) {

3453  
NGX_OK
;

3456 
u
->
Àngth
 -
byãs
;

3458  
NGX_OK
;

3459 
	}
}

3463 
	$ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

3465 
ngx_evít_t
 *
wev
;

3466 
ngx_c⁄√˘i⁄_t
 *
c
;

3467 
ngx_evít_pùe_t
 *
p
;

3468 
ngx_hâp_up°ªam_t
 *
u
;

3470 
c
 = 
r
->
c⁄√˘i⁄
;

3471 
u
 = 
r
->
up°ªam
;

3472 
p
 = 
u
->
pùe
;

3473 
wev
 = 
c
->
wrôe
;

3475 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3478 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

3480 i‡(
wev
->
timedout
) {

3482 i‡(
wev
->
dñayed
) {

3484 
wev
->
timedout
 = 0;

3485 
wev
->
dñayed
 = 0;

3487 i‡(!
wev
->
ªady
) {

3488 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

3490 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

3491 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3497 i‡(
	`ngx_evít_pùe
(
p
, 
wev
->
wrôe
Ë=
NGX_ABORT
) {

3498 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3503 
p
->
down°ªam_îr‹
 = 1;

3504 
c
->
timedout
 = 1;

3505 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

3510 i‡(
wev
->
dñayed
) {

3512 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3515 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

3516 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3522 i‡(
	`ngx_evít_pùe
(
p
, 1Ë=
NGX_ABORT
) {

3523 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3528 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
, 
u
);

3529 
	}
}

3533 
	$ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

3534 
ngx_hâp_up°ªam_t
 *
u
)

3536 
ngx_evít_t
 *
ªv
;

3537 
ngx_evít_pùe_t
 *
p
;

3538 
ngx_c⁄√˘i⁄_t
 *
c
;

3540 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

3541 
p
 = 
u
->
pùe
;

3542 
ªv
 = 
c
->
ªad
;

3544 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3547 
c
->
log
->
a˘i⁄
 = "reading upstream";

3549 i‡(
ªv
->
timedout
) {

3551 i‡(
ªv
->
dñayed
) {

3553 
ªv
->
timedout
 = 0;

3554 
ªv
->
dñayed
 = 0;

3556 i‡(!
ªv
->
ªady
) {

3557 
	`ngx_add_timî
(
ªv
, 
p
->
ªad_timeout
);

3559 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3560 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3566 i‡(
	`ngx_evít_pùe
(
p
, 0Ë=
NGX_ABORT
) {

3567 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3572 
p
->
up°ªam_îr‹
 = 1;

3573 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

3578 i‡(
ªv
->
dñayed
) {

3580 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3583 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3584 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3590 i‡(
	`ngx_evít_pùe
(
p
, 0Ë=
NGX_ABORT
) {

3591 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3596 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
, 
u
);

3597 
	}
}

3601 
	$ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

3602 
ngx_hâp_up°ªam_t
 *
u
)

3604 
ngx_ãmp_fûe_t
 *
tf
;

3605 
ngx_evít_pùe_t
 *
p
;

3607 
p
 = 
u
->
pùe
;

3609 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3611 i‡(
u
->
°‹e
) {

3613 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_d⁄e
) {

3615 
tf
 = 
p
->
ãmp_fûe
;

3617 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_OK


3618 && (
p
->
up°ªam_d⁄e
 ||Ö->
Àngth
 == -1)

3619 && (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

3620 || 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
tf
->
off£t
))

3622 
	`ngx_hâp_up°ªam_°‹e
(
r
, 
u
);

3627 #i‡(
NGX_HTTP_CACHE
)

3629 i‡(
u
->
ˇchóbÀ
) {

3631 i‡(
p
->
up°ªam_d⁄e
) {

3632 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
p
->
ãmp_fûe
);

3634 } i‡(
p
->
up°ªam_eof
) {

3636 
tf
 = 
p
->
ãmp_fûe
;

3638 i‡(
p
->
Àngth
 == -1

3639 && (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

3640 || 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n


3641 =
tf
->
off£t
 - (
off_t
Ë
r
->
ˇche
->
body_°¨t
))

3643 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
tf
);

3646 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
tf
);

3649 } i‡(
p
->
up°ªam_îr‹
) {

3650 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
p
->
ãmp_fûe
);

3656 i‡(
p
->
up°ªam_d⁄e
 ||Ö->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
) {

3657 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3658 "hâ∞up°ªamÉxô: %p", 
p
->
out
);

3660 i‡(
p
->
up°ªam_d⁄e


3661 || (
p
->
up°ªam_eof
 &&Ö->
Àngth
 == -1))

3663 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

3667 i‡(
p
->
up°ªam_eof
) {

3668 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3672 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

3677 i‡(
p
->
down°ªam_îr‹
) {

3678 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3681 i‡(!
u
->
ˇchóbÀ
 && !u->
°‹e
 && u->
≥î
.
c⁄√˘i⁄
) {

3682 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

3685 
	}
}

3689 
	$ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

3691 
size_t
 
roŸ
;

3692 
time_t
 
lm
;

3693 
ngx_°r_t
 
∑th
;

3694 
ngx_ãmp_fûe_t
 *
tf
;

3695 
ngx_ext_ª«me_fûe_t
 
ext
;

3697 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

3699 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

3703 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

3704 i‡(
tf
 =
NULL
) {

3708 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

3709 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

3710 
tf
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

3711 
tf
->
poﬁ
 = 
r
->pool;

3712 
tf
->
≥rsi°ít
 = 1;

3714 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

3715 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

3716 !
NGX_OK
)

3721 
u
->
pùe
->
ãmp_fûe
 = 
tf
;

3724 
ext
.
ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

3725 
ext
.
∑th_ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

3726 
ext
.
time
 = -1;

3727 
ext
.
¸óã_∑th
 = 1;

3728 
ext
.
dñëe_fûe
 = 1;

3729 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

3731 i‡(
u
->
hódîs_ö
.
œ°_modifõd
) {

3733 
lm
 = 
	`ngx_hâp_∑r£_time
(
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
d©a
,

3734 
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
Àn
);

3736 i‡(
lm
 !
NGX_ERROR
) {

3737 
ext
.
time
 = 
lm
;

3738 
ext
.
fd
 = 
tf
->
fûe
.fd;

3742 i‡(
u
->
c⁄f
->
°‹e_Àngths
 =
NULL
) {

3744 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

3749 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
u
->
c⁄f
->
°‹e_Àngths
->
ñts
, 0,

3750 
u
->
c⁄f
->
°‹e_vÆues
->
ñts
)

3751 =
NULL
)

3757 
∑th
.
Àn
--;

3759 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3761 
tf
->
fûe
.
«me
.
d©a
, 
∑th
.data);

3763 (Ë
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
∑th
, &
ext
);

3765 
u
->
°‹e
 = 0;

3766 
	}
}

3770 
	$ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

3772 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3774 
	}
}

3778 
	$ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

3779 
ngx_uöt_t
 
·_ty≥
)

3781 
ngx_m£c_t
 
timeout
;

3782 
ngx_uöt_t
 
°©us
, 
°©e
;

3784 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3785 "hâ∞√xàup°ªam, %xi", 
·_ty≥
);

3787 i‡(
u
->
≥î
.
sockaddr
) {

3789 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_HTTP_403


3790 || 
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_HTTP_404
)

3792 
°©e
 = 
NGX_PEER_NEXT
;

3795 
°©e
 = 
NGX_PEER_FAILED
;

3798 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 
°©e
);

3799 
u
->
≥î
.
sockaddr
 = 
NULL
;

3802 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_TIMEOUT
) {

3803 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ETIMEDOUT
,

3807 i‡(
u
->
≥î
.
ˇched
 && 
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_ERROR


3808 && (!
u
->
ªque°_£¡
 || !
r
->
ªque°_body_no_buf„rög
))

3810 
°©us
 = 0;

3814 
u
->
≥î
.
åõs
++;

3817 
·_ty≥
) {

3819 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
:

3820 
°©us
 = 
NGX_HTTP_GATEWAY_TIME_OUT
;

3823 
NGX_HTTP_UPSTREAM_FT_HTTP_500
:

3824 
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3827 
NGX_HTTP_UPSTREAM_FT_HTTP_403
:

3828 
°©us
 = 
NGX_HTTP_FORBIDDEN
;

3831 
NGX_HTTP_UPSTREAM_FT_HTTP_404
:

3832 
°©us
 = 
NGX_HTTP_NOT_FOUND
;

3841 
°©us
 = 
NGX_HTTP_BAD_GATEWAY
;

3845 i‡(
r
->
c⁄√˘i⁄
->
îr‹
) {

3846 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

3847 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

3851 i‡(
°©us
) {

3852 
u
->
°©e
->
°©us
 = status;

3853 
timeout
 = 
u
->
c⁄f
->
√xt_up°ªam_timeout
;

3855 i‡(
u
->
≥î
.
åõs
 == 0

3856 || !(
u
->
c⁄f
->
√xt_up°ªam
 & 
·_ty≥
)

3857 || (
u
->
ªque°_£¡
 && 
r
->
ªque°_body_no_buf„rög
)

3858 || (
timeout
 && 
ngx_cuºít_m£c
 - 
u
->
≥î
.
°¨t_time
 >=Åimeout))

3860 #i‡(
NGX_HTTP_CACHE
)

3862 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


3863 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
·_ty≥
))

3865 
ngx_öt_t
 
rc
;

3867 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

3869 i‡(
rc
 =
NGX_OK
) {

3870 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

3871 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

3874 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

3879 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

3884 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3885 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3887 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

3888 #i‡(
NGX_HTTP_SSL
)

3890 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

3891 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

3892 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_£nd_shutdown
 = 1;

3894 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

3898 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

3899 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

3902 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

3903 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

3906 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

3907 
	}
}

3911 
	$ngx_hâp_up°ªam_˛ónup
(*
d©a
)

3913 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

3915 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3916 "˛ónu∞hâ∞up°ªamÑeque°: \"%V\"", &
r
->
uri
);

3918 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
,Ñ->
up°ªam
, 
NGX_DONE
);

3919 
	}
}

3923 
	$ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

3924 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
)

3926 
ngx_uöt_t
 
Êush
;

3927 
ngx_time_t
 *
ç
;

3929 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3930 "föÆizêhâ∞up°ªamÑeque°: %i", 
rc
);

3932 i‡(
u
->
˛ónup
 =
NULL
) {

3934 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

3938 *
u
->
˛ónup
 = 
NULL
;

3939 
u
->
˛ónup
 = 
NULL
;

3941 i‡(
u
->
ªsﬁved
 && u->ªsﬁved->
˘x
) {

3942 
	`ngx_ªsﬁve_«me_d⁄e
(
u
->
ªsﬁved
->
˘x
);

3943 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

3946 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

3947 
ç
 = 
	`ngx_timeofday
();

3948 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

3949 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

3951 i‡(
u
->
pùe
 && u->pùe->
ªad_Àngth
) {

3952 
u
->
°©e
->
ª•⁄£_Àngth
 = u->
pùe
->
ªad_Àngth
;

3956 
u
->
	`föÆize_ªque°
(
r
, 
rc
);

3958 i‡(
u
->
≥î
.
‰ì
 && u->≥î.
sockaddr
) {

3959 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 0);

3960 
u
->
≥î
.
sockaddr
 = 
NULL
;

3963 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3965 #i‡(
NGX_HTTP_SSL
)

3969 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

3977 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

3979 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

3983 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3985 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

3987 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

3988 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

3991 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

3994 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

3996 i‡(
u
->
pùe
 && u->pùe->
ãmp_fûe
) {

3997 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3999 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
);

4002 i‡(
u
->
°‹e
 && u->
pùe
 && u->pùe->
ãmp_fûe


4003 && 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
)

4005 i‡(
	`ngx_dñëe_fûe
(
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
)

4006 =
NGX_FILE_ERROR
)

4008 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

4009 
ngx_dñëe_fûe_n
 " \"%s\" failed",

4010 
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
);

4014 #i‡(
NGX_HTTP_CACHE
)

4016 i‡(
r
->
ˇche
) {

4018 i‡(
u
->
ˇchóbÀ
) {

4020 i‡(
rc
 =
NGX_HTTP_BAD_GATEWAY
 ||Ñ¯=
NGX_HTTP_GATEWAY_TIME_OUT
) {

4021 
time_t
 
vÆid
;

4023 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
rc
);

4025 i‡(
vÆid
) {

4026 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

4027 
r
->
ˇche
->
îr‹
 = 
rc
;

4032 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

4037 i‡(
r
->
subªque°_ö_mem‹y


4038 && 
u
->
hódîs_ö
.
°©us_n
 >
NGX_HTTP_SPECIAL_RESPONSE
)

4040 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

4043 i‡(
rc
 =
NGX_DECLINED
) {

4047 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÅo client";

4049 i‡(!
u
->
hódî_£¡


4050 || 
rc
 =
NGX_HTTP_REQUEST_TIME_OUT


4051 || 
rc
 =
NGX_HTTP_CLIENT_CLOSED_REQUEST
)

4053 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

4057 
Êush
 = 0;

4059 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

4060 
rc
 = 
NGX_ERROR
;

4061 
Êush
 = 1;

4064 i‡(
r
->
hódî_⁄ly
) {

4065 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

4069 i‡(
rc
 == 0) {

4070 
rc
 = 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

4072 } i‡(
Êush
) {

4073 
r
->
kì∑live
 = 0;

4074 
rc
 = 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
);

4077 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

4078 
	}
}

4081 
ngx_öt_t


4082 
	$ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4083 
ngx_uöt_t
 
off£t
)

4085 
ngx_èbÀ_ñt_t
 **
ph
;

4087 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
up°ªam
->
hódîs_ö
 + 
off£t
);

4089 i‡(*
ph
 =
NULL
) {

4090 *
ph
 = 
h
;

4093  
NGX_OK
;

4094 
	}
}

4097 
ngx_öt_t


4098 
	$ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4099 
ngx_uöt_t
 
off£t
)

4101  
NGX_OK
;

4102 
	}
}

4105 
ngx_öt_t


4106 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

4107 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4109 
ngx_hâp_up°ªam_t
 *
u
;

4111 
u
 = 
r
->
up°ªam
;

4113 
u
->
hódîs_ö
.
c⁄ã¡_Àngth
 = 
h
;

4114 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

4116  
NGX_OK
;

4117 
	}
}

4120 
ngx_öt_t


4121 
	$ngx_hâp_up°ªam_¥o˚ss_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

4122 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4124 
ngx_hâp_up°ªam_t
 *
u
;

4126 
u
 = 
r
->
up°ªam
;

4128 
u
->
hódîs_ö
.
œ°_modifõd
 = 
h
;

4130 #i‡(
NGX_HTTP_CACHE
)

4132 i‡(
u
->
ˇchóbÀ
) {

4133 
u
->
hódîs_ö
.
œ°_modifõd_time
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
,

4134 
h
->
vÆue
.
Àn
);

4139  
NGX_OK
;

4140 
	}
}

4143 
ngx_öt_t


4144 
	$ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4145 
ngx_uöt_t
 
off£t
)

4147 
ngx_¨øy_t
 *
∑
;

4148 
ngx_èbÀ_ñt_t
 **
ph
;

4149 
ngx_hâp_up°ªam_t
 *
u
;

4151 
u
 = 
r
->
up°ªam
;

4152 
∑
 = &
u
->
hódîs_ö
.
cookõs
;

4154 i‡(
∑
->
ñts
 =
NULL
) {

4155 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

4157  
NGX_ERROR
;

4161 
ph
 = 
	`ngx_¨øy_push
(
∑
);

4162 i‡(
ph
 =
NULL
) {

4163  
NGX_ERROR
;

4166 *
ph
 = 
h
;

4168 #i‡(
NGX_HTTP_CACHE
)

4169 i‡(!(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
)) {

4170 
u
->
ˇchóbÀ
 = 0;

4174  
NGX_OK
;

4175 
	}
}

4178 
ngx_öt_t


4179 
	$ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

4180 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4182 
ngx_¨øy_t
 *
∑
;

4183 
ngx_èbÀ_ñt_t
 **
ph
;

4184 
ngx_hâp_up°ªam_t
 *
u
;

4186 
u
 = 
r
->
up°ªam
;

4187 
∑
 = &
u
->
hódîs_ö
.
ˇche_c⁄åﬁ
;

4189 i‡(
∑
->
ñts
 =
NULL
) {

4190 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

4192  
NGX_ERROR
;

4196 
ph
 = 
	`ngx_¨øy_push
(
∑
);

4197 i‡(
ph
 =
NULL
) {

4198  
NGX_ERROR
;

4201 *
ph
 = 
h
;

4203 #i‡(
NGX_HTTP_CACHE
)

4205 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

4206 
ngx_öt_t
 
n
;

4208 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
) {

4209  
NGX_OK
;

4212 i‡(
r
->
ˇche
 =
NULL
) {

4213  
NGX_OK
;

4216 i‡(
r
->
ˇche
->
vÆid_£c
 !0 && 
u
->
hódîs_ö
.
x_ac˚l_expúes
 !
NULL
) {

4217  
NGX_OK
;

4220 
°¨t
 = 
h
->
vÆue
.
d©a
;

4221 
œ°
 = 
°¨t
 + 
h
->
vÆue
.
Àn
;

4223 i‡(
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *Ë"no-ˇche", 8 - 1Ë!
NULL


4224 || 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *Ë"no-°‹e", 8 - 1Ë!
NULL


4225 || 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *Ë"¥iv©e", 7 - 1Ë!
NULL
)

4227 
u
->
ˇchóbÀ
 = 0;

4228  
NGX_OK
;

4231 
p
 = 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *) "s-maxage=", 9 - 1);

4232 
off£t
 = 9;

4234 i‡(
p
 =
NULL
) {

4235 
p
 = 
	`ngx_°æˇ£°∫
(
°¨t
, 
œ°
, (
u_ch¨
 *) "max-age=", 8 - 1);

4236 
off£t
 = 8;

4239 i‡(
p
 =
NULL
) {

4240  
NGX_OK
;

4243 
n
 = 0;

4245 
p
 +
off£t
;Ö < 
œ°
;Ö++) {

4246 i‡(*
p
 == ',' || *p == ';' || *p == ' ') {

4250 i‡(*
p
 >= '0' && *p <= '9') {

4251 
n
 =Ç * 10 + *
p
 - '0';

4255 
u
->
ˇchóbÀ
 = 0;

4256  
NGX_OK
;

4259 i‡(
n
 == 0) {

4260 
u
->
ˇchóbÀ
 = 0;

4261  
NGX_OK
;

4264 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

4268  
NGX_OK
;

4269 
	}
}

4272 
ngx_öt_t


4273 
	$ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4274 
ngx_uöt_t
 
off£t
)

4276 
ngx_hâp_up°ªam_t
 *
u
;

4278 
u
 = 
r
->
up°ªam
;

4279 
u
->
hódîs_ö
.
expúes
 = 
h
;

4281 #i‡(
NGX_HTTP_CACHE
)

4283 
time_t
 
expúes
;

4285 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
) {

4286  
NGX_OK
;

4289 i‡(
r
->
ˇche
 =
NULL
) {

4290  
NGX_OK
;

4293 i‡(
r
->
ˇche
->
vÆid_£c
 != 0) {

4294  
NGX_OK
;

4297 
expúes
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

4299 i‡(
expúes
 =
NGX_ERROR
 ||Éxpúe†< 
	`ngx_time
()) {

4300 
u
->
ˇchóbÀ
 = 0;

4301  
NGX_OK
;

4304 
r
->
ˇche
->
vÆid_£c
 = 
expúes
;

4308  
NGX_OK
;

4309 
	}
}

4312 
ngx_öt_t


4313 
	$ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

4314 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4316 
ngx_hâp_up°ªam_t
 *
u
;

4318 
u
 = 
r
->
up°ªam
;

4319 
u
->
hódîs_ö
.
x_ac˚l_expúes
 = 
h
;

4321 #i‡(
NGX_HTTP_CACHE
)

4323 
u_ch¨
 *
p
;

4324 
size_t
 
Àn
;

4325 
ngx_öt_t
 
n
;

4327 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
) {

4328  
NGX_OK
;

4331 i‡(
r
->
ˇche
 =
NULL
) {

4332  
NGX_OK
;

4335 
Àn
 = 
h
->
vÆue
.len;

4336 
p
 = 
h
->
vÆue
.
d©a
;

4338 i‡(
p
[0] != '@') {

4339 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

4341 
n
) {

4343 
u
->
ˇchóbÀ
 = 0;

4346 
NGX_ERROR
:

4347  
NGX_OK
;

4350 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

4351  
NGX_OK
;

4355 
p
++;

4356 
Àn
--;

4358 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

4360 i‡(
n
 !
NGX_ERROR
) {

4361 
r
->
ˇche
->
vÆid_£c
 = 
n
;

4366  
NGX_OK
;

4367 
	}
}

4370 
ngx_öt_t


4371 
	$ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4372 
ngx_uöt_t
 
off£t
)

4374 
ngx_öt_t
 
n
;

4375 
ngx_hâp_up°ªam_t
 *
u
;

4377 
u
 = 
r
->
up°ªam
;

4378 
u
->
hódîs_ö
.
x_ac˚l_limô_øã
 = 
h
;

4380 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
) {

4381  
NGX_OK
;

4384 
n
 = 
	`ngx_©oi
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

4386 i‡(
n
 !
NGX_ERROR
) {

4387 
r
->
limô_øã
 = (
size_t
Ë
n
;

4390  
NGX_OK
;

4391 
	}
}

4394 
ngx_öt_t


4395 
	$ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4396 
ngx_uöt_t
 
off£t
)

4398 
u_ch¨
 
c0
, 
c1
, 
c2
;

4399 
ngx_hâp_up°ªam_t
 *
u
;

4401 
u
 = 
r
->
up°ªam
;

4403 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
) {

4404  
NGX_OK
;

4407 i‡(
u
->
c⁄f
->
ch™ge_buf„rög
) {

4409 i‡(
h
->
vÆue
.
Àn
 == 2) {

4410 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

4411 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

4413 i‡(
c0
 ='n' && 
c1
 == 'o') {

4414 
u
->
buf„rög
 = 0;

4417 } i‡(
h
->
vÆue
.
Àn
 == 3) {

4418 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

4419 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

4420 
c2
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[2]);

4422 i‡(
c0
 ='y' && 
c1
 ='e' && 
c2
 == 's') {

4423 
u
->
buf„rög
 = 1;

4428  
NGX_OK
;

4429 
	}
}

4432 
ngx_öt_t


4433 
	$ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4434 
ngx_uöt_t
 
off£t
)

4436 i‡(
r
->
up°ªam
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
) {

4437  
NGX_OK
;

4440 
r
->
hódîs_out
.
ovîride_ch¨£t
 = &
h
->
vÆue
;

4442  
NGX_OK
;

4443 
	}
}

4446 
ngx_öt_t


4447 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4448 
ngx_uöt_t
 
off£t
)

4450 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄
 = 
h
;

4452 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

4453 (
u_ch¨
 *) "close", 5 - 1)

4454 !
NULL
)

4456 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

4459  
NGX_OK
;

4460 
	}
}

4463 
ngx_öt_t


4464 
	$ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

4465 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4467 
r
->
up°ªam
->
hódîs_ö
.
å™s„r_ícodög
 = 
h
;

4469 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

4470 (
u_ch¨
 *) "chunked", 7 - 1)

4471 !
NULL
)

4473 
r
->
up°ªam
->
hódîs_ö
.
chunked
 = 1;

4476  
NGX_OK
;

4477 
	}
}

4480 
ngx_öt_t


4481 
	$ngx_hâp_up°ªam_¥o˚ss_v¨y
(
ngx_hâp_ªque°_t
 *
r
,

4482 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4484 
ngx_hâp_up°ªam_t
 *
u
;

4486 
u
 = 
r
->
up°ªam
;

4487 
u
->
hódîs_ö
.
v¨y
 = 
h
;

4489 #i‡(
NGX_HTTP_CACHE
)

4491 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_VARY
) {

4492  
NGX_OK
;

4495 i‡(
r
->
ˇche
 =
NULL
) {

4496  
NGX_OK
;

4499 i‡(
h
->
vÆue
.
Àn
 > 
NGX_HTTP_CACHE_VARY_LEN


4500 || (
h
->
vÆue
.
Àn
 =1 && h->vÆue.
d©a
[0] == '*'))

4502 
u
->
ˇchóbÀ
 = 0;

4505 
r
->
ˇche
->
v¨y
 = 
h
->
vÆue
;

4509  
NGX_OK
;

4510 
	}
}

4513 
ngx_öt_t


4514 
	$ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4515 
ngx_uöt_t
 
off£t
)

4517 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

4519 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4520 i‡(
ho
 =
NULL
) {

4521  
NGX_ERROR
;

4524 *
ho
 = *
h
;

4526 i‡(
off£t
) {

4527 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

4528 *
ph
 = 
ho
;

4531  
NGX_OK
;

4532 
	}
}

4535 
ngx_öt_t


4536 
	$ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

4537 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4539 
ngx_¨øy_t
 *
∑
;

4540 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

4542 
∑
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

4544 i‡(
∑
->
ñts
 =
NULL
) {

4545 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

4547  
NGX_ERROR
;

4551 
ph
 = 
	`ngx_¨øy_push
(
∑
);

4552 i‡(
ph
 =
NULL
) {

4553  
NGX_ERROR
;

4556 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4557 i‡(
ho
 =
NULL
) {

4558  
NGX_ERROR
;

4561 *
ho
 = *
h
;

4562 *
ph
 = 
ho
;

4564  
NGX_OK
;

4565 
	}
}

4568 
ngx_öt_t


4569 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4570 
ngx_uöt_t
 
off£t
)

4572 
u_ch¨
 *
p
, *
œ°
;

4574 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
h
->
vÆue
.
Àn
;

4575 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
h
->
vÆue
;

4576 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

4578 
p
 = 
h
->
vÆue
.
d©a
; *p;Ö++) {

4580 i‡(*
p
 != ';') {

4584 
œ°
 = 
p
;

4586 *++
p
 == ' ') { }

4588 i‡(*
p
 == '\0') {

4589  
NGX_OK
;

4592 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "charset=", 8) != 0) {

4596 
p
 += 8;

4598 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
œ°
 - 
h
->
vÆue
.
d©a
;

4600 i‡(*
p
 == '"') {

4601 
p
++;

4604 
œ°
 = 
h
->
vÆue
.
d©a
 + h->vÆue.
Àn
;

4606 i‡(*(
œ°
 - 1) == '"') {

4607 
œ°
--;

4610 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
œ°
 - 
p
;

4611 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
p
;

4613  
NGX_OK
;

4616  
NGX_OK
;

4617 
	}
}

4620 
ngx_öt_t


4621 
	$ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4622 
ngx_uöt_t
 
off£t
)

4624 
ngx_èbÀ_ñt_t
 *
ho
;

4626 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4627 i‡(
ho
 =
NULL
) {

4628  
NGX_ERROR
;

4631 *
ho
 = *
h
;

4633 
r
->
hódîs_out
.
œ°_modifõd
 = 
ho
;

4635 #i‡(
NGX_HTTP_CACHE
)

4637 i‡(
r
->
up°ªam
->
ˇchóbÀ
) {

4638 
r
->
hódîs_out
.
œ°_modifõd_time
 =

4639 
r
->
up°ªam
->
hódîs_ö
.
œ°_modifõd_time
;

4644  
NGX_OK
;

4645 
	}
}

4648 
ngx_öt_t


4649 
	$ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4650 
ngx_uöt_t
 
off£t
)

4652 
ngx_öt_t
 
rc
;

4653 
ngx_èbÀ_ñt_t
 *
ho
;

4655 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4656 i‡(
ho
 =
NULL
) {

4657  
NGX_ERROR
;

4660 *
ho
 = *
h
;

4662 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

4663 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 0);

4665 i‡(
rc
 =
NGX_DECLINED
) {

4666  
NGX_OK
;

4669 i‡(
rc
 =
NGX_OK
) {

4670 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

4672 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4673 "ªwrôã¿loˇti⁄: \"%V\"", &
ho
->
vÆue
);

4676  
rc
;

4679 i‡(
ho
->
vÆue
.
d©a
[0] != '/') {

4680 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

4688  
NGX_OK
;

4689 
	}
}

4692 
ngx_öt_t


4693 
	$ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4694 
ngx_uöt_t
 
off£t
)

4696 
u_ch¨
 *
p
;

4697 
ngx_öt_t
 
rc
;

4698 
ngx_èbÀ_ñt_t
 *
ho
;

4700 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4701 i‡(
ho
 =
NULL
) {

4702  
NGX_ERROR
;

4705 *
ho
 = *
h
;

4707 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

4709 
p
 = 
	`ngx_°rˇ£°∫
(
ho
->
vÆue
.
d©a
, "url=", 4 - 1);

4711 i‡(
p
) {

4712 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 
p
 + 4 - ho->
vÆue
.
d©a
);

4715  
NGX_OK
;

4718 i‡(
rc
 =
NGX_DECLINED
) {

4719  
NGX_OK
;

4722 i‡(
rc
 =
NGX_OK
) {

4723 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

4725 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4726 "ªwrôã¿ª‰esh: \"%V\"", &
ho
->
vÆue
);

4729  
rc
;

4732 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

4734  
NGX_OK
;

4735 
	}
}

4738 
ngx_öt_t


4739 
	$ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4740 
ngx_uöt_t
 
off£t
)

4742 
ngx_öt_t
 
rc
;

4743 
ngx_èbÀ_ñt_t
 *
ho
;

4745 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4746 i‡(
ho
 =
NULL
) {

4747  
NGX_ERROR
;

4750 *
ho
 = *
h
;

4752 i‡(
r
->
up°ªam
->
ªwrôe_cookõ
) {

4753 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_cookõ
‘, 
ho
);

4755 i‡(
rc
 =
NGX_DECLINED
) {

4756  
NGX_OK
;

4759 #i‡(
NGX_DEBUG
)

4760 i‡(
rc
 =
NGX_OK
) {

4761 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4762 "ªwrôã¿cookõ: \"%V\"", &
ho
->
vÆue
);

4766  
rc
;

4769  
NGX_OK
;

4770 
	}
}

4773 
ngx_öt_t


4774 
	$ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

4775 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4777 
ngx_èbÀ_ñt_t
 *
ho
;

4779 i‡(
r
->
up°ªam
->
c⁄f
->
f‹˚_ønges
) {

4780  
NGX_OK
;

4783 #i‡(
NGX_HTTP_CACHE
)

4785 i‡(
r
->
ˇched
) {

4786 
r
->
Ælow_ønges
 = 1;

4787  
NGX_OK
;

4790 i‡(
r
->
up°ªam
->
ˇchóbÀ
) {

4791 
r
->
Ælow_ønges
 = 1;

4792 
r
->
sögÀ_ønge
 = 1;

4793  
NGX_OK
;

4798 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4799 i‡(
ho
 =
NULL
) {

4800  
NGX_ERROR
;

4803 *
ho
 = *
h
;

4805 
r
->
hódîs_out
.
ac˚±_ønges
 = 
ho
;

4807  
NGX_OK
;

4808 
	}
}

4811 #i‡(
NGX_HTTP_GZIP
)

4813 
ngx_öt_t


4814 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

4815 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4817 
ngx_èbÀ_ñt_t
 *
ho
;

4819 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4820 i‡(
ho
 =
NULL
) {

4821  
NGX_ERROR
;

4824 *
ho
 = *
h
;

4826 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
ho
;

4828  
NGX_OK
;

4829 
	}
}

4834 
ngx_öt_t


4835 
	$ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

4837 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

4839 
v
 = 
ngx_hâp_up°ªam_v¨s
; v->
«me
.
Àn
; v++) {

4840 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

4841 i‡(
v¨
 =
NULL
) {

4842  
NGX_ERROR
;

4845 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

4846 
v¨
->
d©a
 = 
v
->data;

4849  
NGX_OK
;

4850 
	}
}

4853 
ngx_öt_t


4854 
	$ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4855 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4857 
u_ch¨
 *
p
;

4858 
size_t
 
Àn
;

4859 
ngx_uöt_t
 
i
;

4860 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4862 
v
->
vÆid
 = 1;

4863 
v
->
no_ˇchóbÀ
 = 0;

4864 
v
->
nŸ_found
 = 0;

4866 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4867 
v
->
nŸ_found
 = 1;

4868  
NGX_OK
;

4871 
Àn
 = 0;

4872 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4874 
i
 = 0; i < 
r
->
up°ªam_°©es
->
√…s
; i++) {

4875 i‡(
°©e
[
i
].
≥î
) {

4876 
Àn
 +
°©e
[
i
].
≥î
->len + 2;

4879 
Àn
 += 3;

4883 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4884 i‡(
p
 =
NULL
) {

4885  
NGX_ERROR
;

4888 
v
->
d©a
 = 
p
;

4890 
i
 = 0;

4893 i‡(
°©e
[
i
].
≥î
) {

4894 
p
 = 
	`ngx_˝ymem
’, 
°©e
[
i
].
≥î
->
d©a
, sèã[i].≥î->
Àn
);

4897 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4901 i‡(
°©e
[
i
].
≥î
) {

4902 *
p
++ = ',';

4903 *
p
++ = ' ';

4906 *
p
++ = ' ';

4907 *
p
++ = ':';

4908 *
p
++ = ' ';

4910 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4918 
v
->
Àn
 = 
p
 - v->
d©a
;

4920  
NGX_OK
;

4921 
	}
}

4924 
ngx_öt_t


4925 
	$ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4926 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4928 
u_ch¨
 *
p
;

4929 
size_t
 
Àn
;

4930 
ngx_uöt_t
 
i
;

4931 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4933 
v
->
vÆid
 = 1;

4934 
v
->
no_ˇchóbÀ
 = 0;

4935 
v
->
nŸ_found
 = 0;

4937 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4938 
v
->
nŸ_found
 = 1;

4939  
NGX_OK
;

4942 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (3 + 2);

4944 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4945 i‡(
p
 =
NULL
) {

4946  
NGX_ERROR
;

4949 
v
->
d©a
 = 
p
;

4951 
i
 = 0;

4952 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4955 i‡(
°©e
[
i
].
°©us
) {

4956 
p
 = 
	`ngx_•rötf
’, "%ui", 
°©e
[
i
].
°©us
);

4959 *
p
++ = '-';

4962 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4966 i‡(
°©e
[
i
].
≥î
) {

4967 *
p
++ = ',';

4968 *
p
++ = ' ';

4971 *
p
++ = ' ';

4972 *
p
++ = ':';

4973 *
p
++ = ' ';

4975 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4983 
v
->
Àn
 = 
p
 - v->
d©a
;

4985  
NGX_OK
;

4986 
	}
}

4989 
ngx_öt_t


4990 
	$ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4991 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4993 
u_ch¨
 *
p
;

4994 
size_t
 
Àn
;

4995 
ngx_uöt_t
 
i
;

4996 
ngx_m£c_öt_t
 
ms
;

4997 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4999 
v
->
vÆid
 = 1;

5000 
v
->
no_ˇchóbÀ
 = 0;

5001 
v
->
nŸ_found
 = 0;

5003 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

5004 
v
->
nŸ_found
 = 1;

5005  
NGX_OK
;

5008 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_TIME_T_LEN
 + 4 + 2);

5010 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

5011 i‡(
p
 =
NULL
) {

5012  
NGX_ERROR
;

5015 
v
->
d©a
 = 
p
;

5017 
i
 = 0;

5018 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

5021 i‡(
°©e
[
i
].
°©us
) {

5023 i‡(
d©a


5024 && 
°©e
[
i
].
hódî_£c
 !(
time_t
Ë
NGX_ERROR
)

5026 
ms
 = (
ngx_m£c_öt_t
)

5027 (
°©e
[
i
].
hódî_£c
 * 1000 + sèã[i].
hódî_m£c
);

5030 
ms
 = (
ngx_m£c_öt_t
)

5031 (
°©e
[
i
].
ª•⁄£_£c
 * 1000 + sèã[i].
ª•⁄£_m£c
);

5034 
ms
 = 
	`ngx_max
(ms, 0);

5035 
p
 = 
	`ngx_•rötf
’, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000);

5038 *
p
++ = '-';

5041 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5045 i‡(
°©e
[
i
].
≥î
) {

5046 *
p
++ = ',';

5047 *
p
++ = ' ';

5050 *
p
++ = ' ';

5051 *
p
++ = ':';

5052 *
p
++ = ' ';

5054 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5062 
v
->
Àn
 = 
p
 - v->
d©a
;

5064  
NGX_OK
;

5065 
	}
}

5068 
ngx_öt_t


5069 
	$ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5070 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5072 
u_ch¨
 *
p
;

5073 
size_t
 
Àn
;

5074 
ngx_uöt_t
 
i
;

5075 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

5077 
v
->
vÆid
 = 1;

5078 
v
->
no_ˇchóbÀ
 = 0;

5079 
v
->
nŸ_found
 = 0;

5081 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

5082 
v
->
nŸ_found
 = 1;

5083  
NGX_OK
;

5086 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_OFF_T_LEN
 + 2);

5088 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

5089 i‡(
p
 =
NULL
) {

5090  
NGX_ERROR
;

5093 
v
->
d©a
 = 
p
;

5095 
i
 = 0;

5096 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

5099 
p
 = 
	`ngx_•rötf
’, "%O", 
°©e
[
i
].
ª•⁄£_Àngth
);

5101 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5105 i‡(
°©e
[
i
].
≥î
) {

5106 *
p
++ = ',';

5107 *
p
++ = ' ';

5110 *
p
++ = ' ';

5111 *
p
++ = ':';

5112 *
p
++ = ' ';

5114 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

5122 
v
->
Àn
 = 
p
 - v->
d©a
;

5124  
NGX_OK
;

5125 
	}
}

5128 
ngx_öt_t


5129 
	$ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5130 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5132 i‡(
r
->
up°ªam
 =
NULL
) {

5133 
v
->
nŸ_found
 = 1;

5134  
NGX_OK
;

5137  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

5138 &
r
->
up°ªam
->
hódîs_ö
.
hódîs
.
∑π
,

5140 
	}
}

5143 
ngx_öt_t


5144 
	$ngx_hâp_up°ªam_cookõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

5145 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5147 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

5149 
ngx_°r_t
 
cookõ
, 
s
;

5151 i‡(
r
->
up°ªam
 =
NULL
) {

5152 
v
->
nŸ_found
 = 1;

5153  
NGX_OK
;

5156 
s
.
Àn
 = 
«me
->len - (("upstream_cookie_") - 1);

5157 
s
.
d©a
 = 
«me
->data + ("upstream_cookie_") - 1;

5159 i‡(
	`ngx_hâp_∑r£_£t_cookõ_löes
(&
r
->
up°ªam
->
hódîs_ö
.
cookõs
,

5160 &
s
, &
cookõ
)

5161 =
NGX_DECLINED
)

5163 
v
->
nŸ_found
 = 1;

5164  
NGX_OK
;

5167 
v
->
Àn
 = 
cookõ
.len;

5168 
v
->
vÆid
 = 1;

5169 
v
->
no_ˇchóbÀ
 = 0;

5170 
v
->
nŸ_found
 = 0;

5171 
v
->
d©a
 = 
cookõ
.data;

5173  
NGX_OK
;

5174 
	}
}

5177 #i‡(
NGX_HTTP_CACHE
)

5179 
ngx_öt_t


5180 
	$ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

5181 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5183 
ngx_uöt_t
 
n
;

5185 i‡(
r
->
up°ªam
 =
NULL
 ||Ñ->up°ªam->
ˇche_°©us
 == 0) {

5186 
v
->
nŸ_found
 = 1;

5187  
NGX_OK
;

5190 
n
 = 
r
->
up°ªam
->
ˇche_°©us
 - 1;

5192 
v
->
vÆid
 = 1;

5193 
v
->
no_ˇchóbÀ
 = 0;

5194 
v
->
nŸ_found
 = 0;

5195 
v
->
Àn
 = 
ngx_hâp_ˇche_°©us
[
n
].len;

5196 
v
->
d©a
 = 
ngx_hâp_ˇche_°©us
[
n
].data;

5198  
NGX_OK
;

5199 
	}
}

5202 
ngx_öt_t


5203 
	$ngx_hâp_up°ªam_ˇche_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

5204 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5206 
u_ch¨
 *
p
;

5208 i‡(
r
->
up°ªam
 =
NULL


5209 || !
r
->
up°ªam
->
c⁄f
->
ˇche_ªvÆid©e


5210 || 
r
->
up°ªam
->
ˇche_°©us
 !
NGX_HTTP_CACHE_EXPIRED


5211 || 
r
->
ˇche
->
œ°_modifõd
 == -1)

5213 
v
->
nŸ_found
 = 1;

5214  
NGX_OK
;

5217 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("Mon, 28 Sep 1970 06:00:00 GMT") - 1);

5218 i‡(
p
 =
NULL
) {

5219  
NGX_ERROR
;

5222 
v
->
Àn
 = 
	`ngx_hâp_time
(
p
, 
r
->
ˇche
->
œ°_modifõd
) -Ö;

5223 
v
->
vÆid
 = 1;

5224 
v
->
no_ˇchóbÀ
 = 0;

5225 
v
->
nŸ_found
 = 0;

5226 
v
->
d©a
 = 
p
;

5228  
NGX_OK
;

5229 
	}
}

5232 
ngx_öt_t


5233 
	$ngx_hâp_up°ªam_ˇche_ëag
(
ngx_hâp_ªque°_t
 *
r
,

5234 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

5236 i‡(
r
->
up°ªam
 =
NULL


5237 || !
r
->
up°ªam
->
c⁄f
->
ˇche_ªvÆid©e


5238 || 
r
->
up°ªam
->
ˇche_°©us
 !
NGX_HTTP_CACHE_EXPIRED


5239 || 
r
->
ˇche
->
ëag
.
Àn
 == 0)

5241 
v
->
nŸ_found
 = 1;

5242  
NGX_OK
;

5245 
v
->
vÆid
 = 1;

5246 
v
->
no_ˇchóbÀ
 = 0;

5247 
v
->
nŸ_found
 = 0;

5248 
v
->
Àn
 = 
r
->
ˇche
->
ëag
.len;

5249 
v
->
d©a
 = 
r
->
ˇche
->
ëag
.data;

5251  
NGX_OK
;

5252 
	}
}

5258 
	$ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

5260 *
rv
;

5261 *
mc⁄f
;

5262 
ngx_°r_t
 *
vÆue
;

5263 
ngx_uæ_t
 
u
;

5264 
ngx_uöt_t
 
m
;

5265 
ngx_c⁄f_t
 
pcf
;

5266 
ngx_hâp_moduÀ_t
 *
moduÀ
;

5267 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

5268 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

5270 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

5272 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5273 
u
.
ho°
 = 
vÆue
[1];

5274 
u
.
no_ªsﬁve
 = 1;

5275 
u
.
no_p‹t
 = 1;

5277 
uscf
 = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 
NGX_HTTP_UPSTREAM_CREATE


5278 |
NGX_HTTP_UPSTREAM_WEIGHT


5279 |
NGX_HTTP_UPSTREAM_MAX_FAILS


5280 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


5281 |
NGX_HTTP_UPSTREAM_DOWN


5282 |
NGX_HTTP_UPSTREAM_BACKUP
);

5283 i‡(
uscf
 =
NULL
) {

5284  
NGX_CONF_ERROR
;

5288 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

5289 i‡(
˘x
 =
NULL
) {

5290  
NGX_CONF_ERROR
;

5293 
hâp_˘x
 = 
cf
->
˘x
;

5294 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

5298 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

5299 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

5300  
NGX_CONF_ERROR
;

5303 
˘x
->
§v_c⁄f
[
ngx_hâp_up°ªam_moduÀ
.
˘x_ödex
] = 
uscf
;

5305 
uscf
->
§v_c⁄f
 = 
˘x
->srv_conf;

5310 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

5311 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

5312  
NGX_CONF_ERROR
;

5315 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

5316 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

5320 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

5322 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

5323 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

5324 i‡(
mc⁄f
 =
NULL
) {

5325  
NGX_CONF_ERROR
;

5328 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

5331 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

5332 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

5333 i‡(
mc⁄f
 =
NULL
) {

5334  
NGX_CONF_ERROR
;

5337 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

5341 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

5342 (
ngx_hâp_up°ªam_£rvî_t
));

5343 i‡(
uscf
->
£rvîs
 =
NULL
) {

5344  
NGX_CONF_ERROR
;

5350 
pcf
 = *
cf
;

5351 
cf
->
˘x
 = ctx;

5352 
cf
->
cmd_ty≥
 = 
NGX_HTTP_UPS_CONF
;

5354 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

5356 *
cf
 = 
pcf
;

5358 i‡(
rv
 !
NGX_CONF_OK
) {

5359  
rv
;

5362 i‡(
uscf
->
£rvîs
->
√…s
 == 0) {

5363 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5365  
NGX_CONF_ERROR
;

5368  
rv
;

5369 
	}
}

5373 
	$ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5375 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
 = 
c⁄f
;

5377 
time_t
 
Áû_timeout
;

5378 
ngx_°r_t
 *
vÆue
, 
s
;

5379 
ngx_uæ_t
 
u
;

5380 
ngx_öt_t
 
weight
, 
max_Áûs
;

5381 
ngx_uöt_t
 
i
;

5382 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

5384 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

5385 i‡(
us
 =
NULL
) {

5386  
NGX_CONF_ERROR
;

5389 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

5391 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5393 
weight
 = 1;

5394 
max_Áûs
 = 1;

5395 
Áû_timeout
 = 10;

5397 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

5399 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "weight=", 7) == 0) {

5401 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_WEIGHT
)) {

5402 
nŸ_suµ‹ãd
;

5405 
weight
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[7], vÆue[i].
Àn
 - 7);

5407 i‡(
weight
 =
NGX_ERROR
 || weight == 0) {

5408 
övÆid
;

5414 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_fails=", 10) == 0) {

5416 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_MAX_FAILS
)) {

5417 
nŸ_suµ‹ãd
;

5420 
max_Áûs
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[10], vÆue[i].
Àn
 - 10);

5422 i‡(
max_Áûs
 =
NGX_ERROR
) {

5423 
övÆid
;

5429 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "fail_timeout=", 13) == 0) {

5431 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
)) {

5432 
nŸ_suµ‹ãd
;

5435 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

5436 
s
.
d©a
 = &
vÆue
[
i
].data[13];

5438 
Áû_timeout
 = 
	`ngx_∑r£_time
(&
s
, 1);

5440 i‡(
Áû_timeout
 =(
time_t
Ë
NGX_ERROR
) {

5441 
övÆid
;

5447 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "backup") == 0) {

5449 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_BACKUP
)) {

5450 
nŸ_suµ‹ãd
;

5453 
us
->
backup
 = 1;

5458 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "down") == 0) {

5460 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_DOWN
)) {

5461 
nŸ_suµ‹ãd
;

5464 
us
->
down
 = 1;

5469 
övÆid
;

5472 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

5474 
u
.
uæ
 = 
vÆue
[1];

5475 
u
.
deÁu…_p‹t
 = 80;

5477 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

5478 i‡(
u
.
îr
) {

5479 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5480 "%†ö up°ªam \"%V\"", 
u
.
îr
, &u.
uæ
);

5483  
NGX_CONF_ERROR
;

5486 
us
->
«me
 = 
u
.
uæ
;

5487 
us
->
addrs
 = 
u
.addrs;

5488 
us
->
«ddrs
 = 
u
.naddrs;

5489 
us
->
weight
 = weight;

5490 
us
->
max_Áûs
 = max_fails;

5491 
us
->
Áû_timeout
 = fail_timeout;

5493  
NGX_CONF_OK
;

5495 
övÆid
:

5497 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5498 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

5500  
NGX_CONF_ERROR
;

5502 
nŸ_suµ‹ãd
:

5504 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5506 &
vÆue
[
i
]);

5508  
NGX_CONF_ERROR
;

5509 
	}
}

5512 
ngx_hâp_up°ªam_§v_c⁄f_t
 *

5513 
	$ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
)

5515 
ngx_uöt_t
 
i
;

5516 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

5517 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

5518 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

5520 i‡(!(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)) {

5522 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

5523 i‡(
u
->
îr
) {

5524 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5525 "%†ö up°ªam \"%V\"", 
u
->
îr
, &u->
uæ
);

5528  
NULL
;

5532 
umcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

5534 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

5536 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

5538 i‡(
uscÂ
[
i
]->
ho°
.
Àn
 !
u
->host.len

5539 || 
	`ngx_°∫ˇ£cmp
(
uscÂ
[
i
]->
ho°
.
d©a
, 
u
->ho°.d©a, u->ho°.
Àn
)

5545 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)

5546 && (
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
))

5548 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5549 "du∂iˇã up°ªam \"%V\"", &
u
->
ho°
);

5550  
NULL
;

5553 i‡((
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& !
u
->
no_p‹t
) {

5554 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

5556 &
u
->
ho°
, u->
p‹t
);

5557  
NULL
;

5560 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& !
uscÂ
[
i
]->
no_p‹t
) {

5561 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

5563 &
u
->
ho°
, 
uscÂ
[
i
]->
p‹t
,

5564 
uscÂ
[
i
]->
fûe_«me
, uscÂ[i]->
löe
);

5565  
NULL
;

5568 i‡(
uscÂ
[
i
]->
p‹t
 && 
u
->port

5569 && 
uscÂ
[
i
]->
p‹t
 !
u
->port)

5574 i‡(
uscÂ
[
i
]->
deÁu…_p‹t
 && 
u
->default_port

5575 && 
uscÂ
[
i
]->
deÁu…_p‹t
 !
u
->default_port)

5580 i‡(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
) {

5581 
uscÂ
[
i
]->
Êags
 = flags;

5584  
uscÂ
[
i
];

5587 
uscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_§v_c⁄f_t
));

5588 i‡(
uscf
 =
NULL
) {

5589  
NULL
;

5592 
uscf
->
Êags
 = flags;

5593 
uscf
->
ho°
 = 
u
->host;

5594 
uscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

5595 
uscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

5596 
uscf
->
p‹t
 = 
u
->port;

5597 
uscf
->
deÁu…_p‹t
 = 
u
->default_port;

5598 
uscf
->
no_p‹t
 = 
u
->no_port;

5600 i‡(
u
->
«ddrs
 =1 && (u->
p‹t
 || u->
Ámûy
 =
AF_UNIX
)) {

5601 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

5602 (
ngx_hâp_up°ªam_£rvî_t
));

5603 i‡(
uscf
->
£rvîs
 =
NULL
) {

5604  
NULL
;

5607 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

5608 i‡(
us
 =
NULL
) {

5609  
NULL
;

5612 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

5614 
us
->
addrs
 = 
u
->addrs;

5615 
us
->
«ddrs
 = 1;

5618 
uscÂ
 = 
	`ngx_¨øy_push
(&
umcf
->
up°ªams
);

5619 i‡(
uscÂ
 =
NULL
) {

5620  
NULL
;

5623 *
uscÂ
 = 
uscf
;

5625  
uscf
;

5626 
	}
}

5630 
	$ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

5631 *
c⁄f
)

5633 *
p
 = 
c⁄f
;

5635 
ngx_öt_t
 
rc
;

5636 
ngx_°r_t
 *
vÆue
;

5637 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

5638 
ngx_hâp_up°ªam_loˇl_t
 **
∂oˇl
, *
loˇl
;

5639 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

5641 
∂oˇl
 = (
ngx_hâp_up°ªam_loˇl_t
 **Ë(
p
 + 
cmd
->
off£t
);

5643 i‡(*
∂oˇl
 !
NGX_CONF_UNSET_PTR
) {

5647 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5649 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

5650 *
∂oˇl
 = 
NULL
;

5651  
NGX_CONF_OK
;

5654 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

5656 
ccv
.
cf
 = cf;

5657 
ccv
.
vÆue
 = &value[1];

5658 
ccv
.
com∂ex_vÆue
 = &
cv
;

5660 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

5661  
NGX_CONF_ERROR
;

5664 
loˇl
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_loˇl_t
));

5665 i‡(
loˇl
 =
NULL
) {

5666  
NGX_CONF_ERROR
;

5669 *
∂oˇl
 = 
loˇl
;

5671 i‡(
cv
.
Àngths
) {

5672 
loˇl
->
vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

5673 i‡(
loˇl
->
vÆue
 =
NULL
) {

5674  
NGX_CONF_ERROR
;

5677 *
loˇl
->
vÆue
 = 
cv
;

5679  
NGX_CONF_OK
;

5682 
loˇl
->
addr
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_addr_t
));

5683 i‡(
loˇl
->
addr
 =
NULL
) {

5684  
NGX_CONF_ERROR
;

5687 
rc
 = 
	`ngx_∑r£_addr
(
cf
->
poﬁ
, 
loˇl
->
addr
, 
vÆue
[1].
d©a
, vÆue[1].
Àn
);

5689 
rc
) {

5690 
NGX_OK
:

5691 
loˇl
->
addr
->
«me
 = 
vÆue
[1];

5692  
NGX_CONF_OK
;

5694 
NGX_DECLINED
:

5695 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5696 "övÆidáddªs†\"%V\"", &
vÆue
[1]);

5700  
NGX_CONF_ERROR
;

5702 
	}
}

5705 
ngx_addr_t
 *

5706 
	$ngx_hâp_up°ªam_gë_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

5707 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
)

5709 
ngx_öt_t
 
rc
;

5710 
ngx_°r_t
 
vÆ
;

5711 
ngx_addr_t
 *
addr
;

5713 i‡(
loˇl
 =
NULL
) {

5714  
NULL
;

5717 i‡(
loˇl
->
vÆue
 =
NULL
) {

5718  
loˇl
->
addr
;

5721 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
loˇl
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

5722  
NULL
;

5725 i‡(
vÆ
.
Àn
 == 0) {

5726  
NULL
;

5729 
addr
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_addr_t
));

5730 i‡(
addr
 =
NULL
) {

5731  
NULL
;

5734 
rc
 = 
	`ngx_∑r£_addr
(
r
->
poﬁ
, 
addr
, 
vÆ
.
d©a
, vÆ.
Àn
);

5736 
rc
) {

5737 
NGX_OK
:

5738 
addr
->
«me
 = 
vÆ
;

5739  
addr
;

5741 
NGX_DECLINED
:

5742 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

5743 "övÆidÜoˇ»addªs†\"%V\"", &
vÆ
);

5747  
NULL
;

5749 
	}
}

5753 
	$ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

5754 *
c⁄f
)

5756 *
p
 = 
c⁄f
;

5758 
ngx_°r_t
 *
vÆue
;

5759 
ngx_¨øy_t
 **
a
;

5760 
ngx_hâp_up°ªam_∑øm_t
 *
∑øm
;

5762 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

5764 i‡(*
a
 =
NULL
) {

5765 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_hâp_up°ªam_∑øm_t
));

5766 i‡(*
a
 =
NULL
) {

5767  
NGX_CONF_ERROR
;

5771 
∑øm
 = 
	`ngx_¨øy_push
(*
a
);

5772 i‡(
∑øm
 =
NULL
) {

5773  
NGX_CONF_ERROR
;

5776 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5778 
∑øm
->
key
 = 
vÆue
[1];

5779 
∑øm
->
vÆue
 = value[2];

5780 
∑øm
->
skù_em±y
 = 0;

5782 i‡(
cf
->
¨gs
->
√…s
 == 4) {

5783 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "if_not_empty") != 0) {

5784 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5785 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

5786  
NGX_CONF_ERROR
;

5789 
∑øm
->
skù_em±y
 = 1;

5792  
NGX_CONF_OK
;

5793 
	}
}

5796 
ngx_öt_t


5797 
	$ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

5798 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

5799 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
)

5801 
ngx_°r_t
 *
h
;

5802 
ngx_uöt_t
 
i
, 
j
;

5803 
ngx_¨øy_t
 
hide_hódîs
;

5804 
ngx_hash_key_t
 *
hk
;

5806 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR


5807 && 
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
)

5809 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

5810 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

5812 
c⁄f
->
hide_hódîs_hash
 = 
¥ev
->hide_headers_hash;

5814 i‡(
c⁄f
->
hide_hódîs_hash
.
buckës


5815 #i‡(
NGX_HTTP_CACHE
)

5816 && ((
c⁄f
->
ˇche
 =0Ë=(
¥ev
->cache == 0))

5820  
NGX_OK
;

5824 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR
) {

5825 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

5828 i‡(
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
) {

5829 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

5833 i‡(
	`ngx_¨øy_öô
(&
hide_hódîs
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

5834 !
NGX_OK
)

5836  
NGX_ERROR
;

5839 
h
 = 
deÁu…_hide_hódîs
; h->
Àn
; h++) {

5840 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

5841 i‡(
hk
 =
NULL
) {

5842  
NGX_ERROR
;

5845 
hk
->
key
 = *
h
;

5846 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
->
d©a
, h->
Àn
);

5847 
hk
->
vÆue
 = (*) 1;

5850 i‡(
c⁄f
->
hide_hódîs
 !
NGX_CONF_UNSET_PTR
) {

5852 
h
 = 
c⁄f
->
hide_hódîs
->
ñts
;

5854 
i
 = 0; i < 
c⁄f
->
hide_hódîs
->
√…s
; i++) {

5856 
hk
 = 
hide_hódîs
.
ñts
;

5858 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

5859 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

5860 
exi°
;

5864 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

5865 i‡(
hk
 =
NULL
) {

5866  
NGX_ERROR
;

5869 
hk
->
key
 = 
h
[
i
];

5870 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
[
i
].
d©a
, h[i].
Àn
);

5871 
hk
->
vÆue
 = (*) 1;

5873 
exi°
:

5879 i‡(
c⁄f
->
∑ss_hódîs
 !
NGX_CONF_UNSET_PTR
) {

5881 
h
 = 
c⁄f
->
∑ss_hódîs
->
ñts
;

5882 
hk
 = 
hide_hódîs
.
ñts
;

5884 
i
 = 0; i < 
c⁄f
->
∑ss_hódîs
->
√…s
; i++) {

5885 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

5887 i‡(
hk
[
j
].
key
.
d©a
 =
NULL
) {

5891 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

5892 
hk
[
j
].
key
.
d©a
 = 
NULL
;

5899 
hash
->hash = &
c⁄f
->
hide_hódîs_hash
;

5900 
hash
->
key
 = 
ngx_hash_key_lc
;

5901 
hash
->
poﬁ
 = 
cf
->pool;

5902 
hash
->
ãmp_poﬁ
 = 
NULL
;

5904  
	`ngx_hash_öô
(
hash
, 
hide_hódîs
.
ñts
, hide_hódîs.
√…s
);

5905 
	}
}

5909 
	$ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

5911 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

5913 
umcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_maö_c⁄f_t
));

5914 i‡(
umcf
 =
NULL
) {

5915  
NULL
;

5918 i‡(
	`ngx_¨øy_öô
(&
umcf
->
up°ªams
, 
cf
->
poﬁ
, 4,

5919 (
ngx_hâp_up°ªam_§v_c⁄f_t
 *))

5920 !
NGX_OK
)

5922  
NULL
;

5925  
umcf
;

5926 
	}
}

5930 
	$ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

5932 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
 = 
c⁄f
;

5934 
ngx_uöt_t
 
i
;

5935 
ngx_¨øy_t
 
hódîs_ö
;

5936 
ngx_hash_key_t
 *
hk
;

5937 
ngx_hash_öô_t
 
hash
;

5938 
ngx_hâp_up°ªam_öô_±
 
öô
;

5939 
ngx_hâp_up°ªam_hódî_t
 *
hódî
;

5940 
ngx_hâp_up°ªam_§v_c⁄f_t
 **
uscÂ
;

5942 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

5944 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

5946 
öô
 = 
uscÂ
[
i
]->
≥î
.
öô_up°ªam
 ? uscfp[i]->peer.init_upstream:

5947 
ngx_hâp_up°ªam_öô_round_robö
;

5949 i‡(
	`öô
(
cf
, 
uscÂ
[
i
]Ë!
NGX_OK
) {

5950  
NGX_CONF_ERROR
;

5957 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

5958 !
NGX_OK
)

5960  
NGX_CONF_ERROR
;

5963 
hódî
 = 
ngx_hâp_up°ªam_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

5964 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

5965 i‡(
hk
 =
NULL
) {

5966  
NGX_CONF_ERROR
;

5969 
hk
->
key
 = 
hódî
->
«me
;

5970 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

5971 
hk
->
vÆue
 = 
hódî
;

5974 
hash
.hash = &
umcf
->
hódîs_ö_hash
;

5975 
hash
.
key
 = 
ngx_hash_key_lc
;

5976 
hash
.
max_size
 = 512;

5977 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

5978 
hash
.
«me
 = "upstream_headers_in_hash";

5979 
hash
.
poﬁ
 = 
cf
->pool;

5980 
hash
.
ãmp_poﬁ
 = 
NULL
;

5982 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

5983  
NGX_CONF_ERROR
;

5986  
NGX_CONF_OK
;

5987 
	}
}

	@src/http/ngx_http_upstream.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

16 
	~<ngx_evít_pùe.h
>

17 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_UPSTREAM_FT_ERROR
 0x00000002

	)

21 
	#NGX_HTTP_UPSTREAM_FT_TIMEOUT
 0x00000004

	)

22 
	#NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 0x00000008

	)

23 
	#NGX_HTTP_UPSTREAM_FT_HTTP_500
 0x00000010

	)

24 
	#NGX_HTTP_UPSTREAM_FT_HTTP_502
 0x00000020

	)

25 
	#NGX_HTTP_UPSTREAM_FT_HTTP_503
 0x00000040

	)

26 
	#NGX_HTTP_UPSTREAM_FT_HTTP_504
 0x00000080

	)

27 
	#NGX_HTTP_UPSTREAM_FT_HTTP_403
 0x00000100

	)

28 
	#NGX_HTTP_UPSTREAM_FT_HTTP_404
 0x00000200

	)

29 
	#NGX_HTTP_UPSTREAM_FT_UPDATING
 0x00000400

	)

30 
	#NGX_HTTP_UPSTREAM_FT_BUSY_LOCK
 0x00000800

	)

31 
	#NGX_HTTP_UPSTREAM_FT_MAX_WAITING
 0x00001000

	)

32 
	#NGX_HTTP_UPSTREAM_FT_NOLIVE
 0x40000000

	)

33 
	#NGX_HTTP_UPSTREAM_FT_OFF
 0x80000000

	)

35 
	#NGX_HTTP_UPSTREAM_FT_STATUS
 (
NGX_HTTP_UPSTREAM_FT_HTTP_500
 \

36 |
NGX_HTTP_UPSTREAM_FT_HTTP_502
 \

37 |
NGX_HTTP_UPSTREAM_FT_HTTP_503
 \

38 |
NGX_HTTP_UPSTREAM_FT_HTTP_504
 \

39 |
NGX_HTTP_UPSTREAM_FT_HTTP_403
 \

40 |
NGX_HTTP_UPSTREAM_FT_HTTP_404
)

	)

42 
	#NGX_HTTP_UPSTREAM_INVALID_HEADER
 40

	)

45 
	#NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 0x00000002

	)

46 
	#NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 0x00000004

	)

47 
	#NGX_HTTP_UPSTREAM_IGN_EXPIRES
 0x00000008

	)

48 
	#NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 0x00000010

	)

49 
	#NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 0x00000020

	)

50 
	#NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 0x00000040

	)

51 
	#NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 0x00000080

	)

52 
	#NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 0x00000100

	)

53 
	#NGX_HTTP_UPSTREAM_IGN_VARY
 0x00000200

	)

57 
ngx_m£c_t
 
	mbl_time
;

58 
ngx_uöt_t
 
	mbl_°©e
;

60 
ngx_uöt_t
 
	m°©us
;

61 
time_t
 
	mª•⁄£_£c
;

62 
ngx_uöt_t
 
	mª•⁄£_m£c
;

63 
time_t
 
	mhódî_£c
;

64 
ngx_uöt_t
 
	mhódî_m£c
;

65 
off_t
 
	mª•⁄£_Àngth
;

67 
ngx_°r_t
 *
	m≥î
;

68 } 
	tngx_hâp_up°ªam_°©e_t
;

72 
ngx_hash_t
 
	mhódîs_ö_hash
;

73 
ngx_¨øy_t
 
	mup°ªams
;

75 } 
	tngx_hâp_up°ªam_maö_c⁄f_t
;

77 
ngx_hâp_up°ªam_§v_c⁄f_s
 
	tngx_hâp_up°ªam_§v_c⁄f_t
;

79 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_±
)(
	tngx_c⁄f_t
 *
	tcf
,

80 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

81 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_≥î_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

82 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

86 
ngx_hâp_up°ªam_öô_±
 
öô_up°ªam
;

87 
ngx_hâp_up°ªam_öô_≥î_±
 
öô
;

88 *
d©a
;

89 } 
	tngx_hâp_up°ªam_≥î_t
;

93 
ngx_°r_t
 
«me
;

94 
ngx_addr_t
 *
addrs
;

95 
ngx_uöt_t
 
«ddrs
;

96 
ngx_uöt_t
 
weight
;

97 
ngx_uöt_t
 
max_Áûs
;

98 
time_t
 
Áû_timeout
;

100 
down
:1;

101 
backup
:1;

102 } 
	tngx_hâp_up°ªam_£rvî_t
;

105 
	#NGX_HTTP_UPSTREAM_CREATE
 0x0001

	)

106 
	#NGX_HTTP_UPSTREAM_WEIGHT
 0x0002

	)

107 
	#NGX_HTTP_UPSTREAM_MAX_FAILS
 0x0004

	)

108 
	#NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
 0x0008

	)

109 
	#NGX_HTTP_UPSTREAM_DOWN
 0x0010

	)

110 
	#NGX_HTTP_UPSTREAM_BACKUP
 0x0020

	)

113 
	sngx_hâp_up°ªam_§v_c⁄f_s
 {

114 
ngx_hâp_up°ªam_≥î_t
 
≥î
;

115 **
§v_c⁄f
;

117 
ngx_¨øy_t
 *
£rvîs
;

119 
ngx_uöt_t
 
Êags
;

120 
ngx_°r_t
 
ho°
;

121 
u_ch¨
 *
fûe_«me
;

122 
ngx_uöt_t
 
löe
;

123 
ö_p‹t_t
 
p‹t
;

124 
ö_p‹t_t
 
deÁu…_p‹t
;

125 
ngx_uöt_t
 
no_p‹t
;

130 
ngx_addr_t
 *
addr
;

131 
ngx_hâp_com∂ex_vÆue_t
 *
vÆue
;

132 } 
	tngx_hâp_up°ªam_loˇl_t
;

136 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
up°ªam
;

138 
ngx_m£c_t
 
c⁄√˘_timeout
;

139 
ngx_m£c_t
 
£nd_timeout
;

140 
ngx_m£c_t
 
ªad_timeout
;

141 
ngx_m£c_t
 
timeout
;

142 
ngx_m£c_t
 
√xt_up°ªam_timeout
;

144 
size_t
 
£nd_low©
;

145 
size_t
 
buf„r_size
;

146 
size_t
 
limô_øã
;

148 
size_t
 
busy_buf„rs_size
;

149 
size_t
 
max_ãmp_fûe_size
;

150 
size_t
 
ãmp_fûe_wrôe_size
;

152 
size_t
 
busy_buf„rs_size_c⁄f
;

153 
size_t
 
max_ãmp_fûe_size_c⁄f
;

154 
size_t
 
ãmp_fûe_wrôe_size_c⁄f
;

156 
ngx_bufs_t
 
bufs
;

158 
ngx_uöt_t
 
ign‹e_hódîs
;

159 
ngx_uöt_t
 
√xt_up°ªam
;

160 
ngx_uöt_t
 
°‹e_ac˚ss
;

161 
ngx_uöt_t
 
√xt_up°ªam_åõs
;

162 
ngx_Êag_t
 
buf„rög
;

163 
ngx_Êag_t
 
ªque°_buf„rög
;

164 
ngx_Êag_t
 
∑ss_ªque°_hódîs
;

165 
ngx_Êag_t
 
∑ss_ªque°_body
;

167 
ngx_Êag_t
 
ign‹e_˛õ¡_ab‹t
;

168 
ngx_Êag_t
 
öãr˚±_îr‹s
;

169 
ngx_Êag_t
 
cy˛ic_ãmp_fûe
;

170 
ngx_Êag_t
 
f‹˚_ønges
;

172 
ngx_∑th_t
 *
ãmp_∑th
;

174 
ngx_hash_t
 
hide_hódîs_hash
;

175 
ngx_¨øy_t
 *
hide_hódîs
;

176 
ngx_¨øy_t
 *
∑ss_hódîs
;

178 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
;

180 #i‡(
NGX_HTTP_CACHE
)

181 
ngx_shm_z⁄e_t
 *
ˇche_z⁄e
;

182 
ngx_hâp_com∂ex_vÆue_t
 *
ˇche_vÆue
;

184 
ngx_uöt_t
 
ˇche_mö_u£s
;

185 
ngx_uöt_t
 
ˇche_u£_°Æe
;

186 
ngx_uöt_t
 
ˇche_mëhods
;

188 
ngx_Êag_t
 
ˇche_lock
;

189 
ngx_m£c_t
 
ˇche_lock_timeout
;

190 
ngx_m£c_t
 
ˇche_lock_age
;

192 
ngx_Êag_t
 
ˇche_ªvÆid©e
;

194 
ngx_¨øy_t
 *
ˇche_vÆid
;

195 
ngx_¨øy_t
 *
ˇche_by∑ss
;

196 
ngx_¨øy_t
 *
no_ˇche
;

199 
ngx_¨øy_t
 *
°‹e_Àngths
;

200 
ngx_¨øy_t
 *
°‹e_vÆues
;

202 #i‡(
NGX_HTTP_CACHE
)

203 sig√d 
ˇche
:2;

205 sig√d 
°‹e
:2;

206 
öãr˚±_404
:1;

207 
ch™ge_buf„rög
:1;

209 #i‡(
NGX_HTTP_SSL
)

210 
ngx_s¶_t
 *
s¶
;

211 
ngx_Êag_t
 
s¶_£ssi⁄_ªu£
;

213 
ngx_hâp_com∂ex_vÆue_t
 *
s¶_«me
;

214 
ngx_Êag_t
 
s¶_£rvî_«me
;

215 
ngx_Êag_t
 
s¶_vîify
;

218 
ngx_°r_t
 
moduÀ
;

219 } 
	tngx_hâp_up°ªam_c⁄f_t
;

223 
ngx_°r_t
 
«me
;

224 
ngx_hâp_hódî_h™dÀr_±
 
h™dÀr
;

225 
ngx_uöt_t
 
off£t
;

226 
ngx_hâp_hódî_h™dÀr_±
 
c›y_h™dÀr
;

227 
ngx_uöt_t
 
c⁄f
;

228 
ngx_uöt_t
 
ªdúe˘
;

229 } 
	tngx_hâp_up°ªam_hódî_t
;

233 
ngx_li°_t
 
hódîs
;

235 
ngx_uöt_t
 
°©us_n
;

236 
ngx_°r_t
 
°©us_löe
;

238 
ngx_èbÀ_ñt_t
 *
°©us
;

239 
ngx_èbÀ_ñt_t
 *
d©e
;

240 
ngx_èbÀ_ñt_t
 *
£rvî
;

241 
ngx_èbÀ_ñt_t
 *
c⁄√˘i⁄
;

243 
ngx_èbÀ_ñt_t
 *
expúes
;

244 
ngx_èbÀ_ñt_t
 *
ëag
;

245 
ngx_èbÀ_ñt_t
 *
x_ac˚l_expúes
;

246 
ngx_èbÀ_ñt_t
 *
x_ac˚l_ªdúe˘
;

247 
ngx_èbÀ_ñt_t
 *
x_ac˚l_limô_øã
;

249 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ty≥
;

250 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_Àngth
;

252 
ngx_èbÀ_ñt_t
 *
œ°_modifõd
;

253 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

254 
ngx_èbÀ_ñt_t
 *
ac˚±_ønges
;

255 
ngx_èbÀ_ñt_t
 *
www_authítiˇã
;

256 
ngx_èbÀ_ñt_t
 *
å™s„r_ícodög
;

257 
ngx_èbÀ_ñt_t
 *
v¨y
;

259 #i‡(
NGX_HTTP_GZIP
)

260 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ícodög
;

263 
ngx_¨øy_t
 
ˇche_c⁄åﬁ
;

264 
ngx_¨øy_t
 
cookõs
;

266 
off_t
 
c⁄ã¡_Àngth_n
;

267 
time_t
 
œ°_modifõd_time
;

269 
c⁄√˘i⁄_˛o£
:1;

270 
chunked
:1;

271 } 
	tngx_hâp_up°ªam_hódîs_ö_t
;

275 
ngx_°r_t
 
ho°
;

276 
ö_p‹t_t
 
p‹t
;

277 
ngx_uöt_t
 
no_p‹t
;

279 
ngx_uöt_t
 
«ddrs
;

280 
ngx_addr_t
 *
addrs
;

282 
sockaddr
 *sockaddr;

283 
sockÀn_t
 
sockÀn
;

285 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

286 } 
	tngx_hâp_up°ªam_ªsﬁved_t
;

289 (*
	tngx_hâp_up°ªam_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

290 
	tngx_hâp_up°ªam_t
 *
	tu
);

293 
	sngx_hâp_up°ªam_s
 {

294 
ngx_hâp_up°ªam_h™dÀr_±
 
ªad_evít_h™dÀr
;

295 
ngx_hâp_up°ªam_h™dÀr_±
 
wrôe_evít_h™dÀr
;

297 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

299 
ngx_evít_pùe_t
 *
pùe
;

301 
ngx_chaö_t
 *
ªque°_bufs
;

303 
ngx_ouçut_chaö_˘x_t
 
ouçut
;

304 
ngx_chaö_wrôî_˘x_t
 
wrôî
;

306 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
;

307 #i‡(
NGX_HTTP_CACHE
)

308 
ngx_¨øy_t
 *
ˇches
;

311 
ngx_hâp_up°ªam_hódîs_ö_t
 
hódîs_ö
;

313 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ªsﬁved
;

315 
ngx_buf_t
 
‰om_˛õ¡
;

317 
ngx_buf_t
 
buf„r
;

318 
off_t
 
Àngth
;

320 
ngx_chaö_t
 *
out_bufs
;

321 
ngx_chaö_t
 *
busy_bufs
;

322 
ngx_chaö_t
 *
‰ì_bufs
;

324 
	`ngx_öt_t
 (*
öput_fûãr_öô
)(*
d©a
);

325 
	`ngx_öt_t
 (*
öput_fûãr
)(*
d©a
, 
ssize_t
 
byãs
);

326 *
öput_fûãr_˘x
;

328 #i‡(
NGX_HTTP_CACHE
)

329 
	`ngx_öt_t
 (*
¸óã_key
)(
ngx_hâp_ªque°_t
 *
r
);

331 
	`ngx_öt_t
 (*
¸óã_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

332 
	`ngx_öt_t
 (*
ªöô_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

333 
	`ngx_öt_t
 (*
¥o˚ss_hódî
)(
ngx_hâp_ªque°_t
 *
r
);

334 (*
ab‹t_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

335 (*
föÆize_ªque°
)(
ngx_hâp_ªque°_t
 *
r
,

336 
ngx_öt_t
 
rc
);

337 
	`ngx_öt_t
 (*
ªwrôe_ªdúe˘
)(
ngx_hâp_ªque°_t
 *
r
,

338 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

339 
	`ngx_öt_t
 (*
ªwrôe_cookõ
)(
ngx_hâp_ªque°_t
 *
r
,

340 
ngx_èbÀ_ñt_t
 *
h
);

342 
ngx_m£c_t
 
timeout
;

344 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

346 
ngx_°r_t
 
mëhod
;

347 
ngx_°r_t
 
schema
;

348 
ngx_°r_t
 
uri
;

350 #i‡(
NGX_HTTP_SSL
)

351 
ngx_°r_t
 
s¶_«me
;

354 
ngx_hâp_˛ónup_±
 *
˛ónup
;

356 
°‹e
:1;

357 
ˇchóbÀ
:1;

358 
ac˚l
:1;

359 
s¶
:1;

360 #i‡(
NGX_HTTP_CACHE
)

361 
ˇche_°©us
:3;

364 
buf„rög
:1;

365 
kì∑live
:1;

366 
upgøde
:1;

368 
ªque°_£¡
:1;

369 
hódî_£¡
:1;

374 
ngx_uöt_t
 
°©us
;

375 
ngx_uöt_t
 
mask
;

376 } 
	tngx_hâp_up°ªam_√xt_t
;

380 
ngx_°r_t
 
key
;

381 
ngx_°r_t
 
vÆue
;

382 
ngx_uöt_t
 
skù_em±y
;

383 } 
	tngx_hâp_up°ªam_∑øm_t
;

386 
ngx_öt_t
 
	`ngx_hâp_up°ªam_cookõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

387 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

388 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

389 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

391 
ngx_öt_t
 
	`ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

392 
	`ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
);

393 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
	`ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
,

394 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
);

395 *
	`ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

396 *
c⁄f
);

397 *
	`ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

398 *
c⁄f
);

399 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

400 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

401 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
);

404 
	#ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
uscf
, 
moduÀ
) \

405 
uscf
->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

408 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

409 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ˇche_mëhod_mask
[];

410 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ign‹e_hódîs_masks
[];

	@src/http/ngx_http_upstream_round_robin.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#ngx_hâp_up°ªam_åõs
(
p
Ë(’)->
numbî
 \

14 + ((
p
)->
√xt
 ? (p)->√xt->
numbî
 : 0))

	)

17 
ngx_hâp_up°ªam_º_≥î_t
 *
ngx_hâp_up°ªam_gë_≥î
(

18 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
);

20 #i‡(
NGX_HTTP_SSL
)

22 
ngx_öt_t
 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

23 *
d©a
);

24 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

25 *
d©a
);

30 
ngx_öt_t


31 
	$ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

32 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

34 
ngx_uæ_t
 
u
;

35 
ngx_uöt_t
 
i
, 
j
, 
n
, 
w
;

36 
ngx_hâp_up°ªam_£rvî_t
 *
£rvî
;

37 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

38 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
, *
backup
;

40 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_round_robö_≥î
;

42 i‡(
us
->
£rvîs
) {

43 
£rvî
 = 
us
->
£rvîs
->
ñts
;

45 
n
 = 0;

46 
w
 = 0;

48 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

49 i‡(
£rvî
[
i
].
backup
) {

53 
n
 +
£rvî
[
i
].
«ddrs
;

54 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

57 i‡(
n
 == 0) {

58 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

60 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

61  
NGX_ERROR
;

64 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

65 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

66 i‡(
≥îs
 =
NULL
) {

67  
NGX_ERROR
;

70 
≥îs
->
sögÀ
 = (
n
 == 1);

71 
≥îs
->
numbî
 = 
n
;

72 
≥îs
->
weighãd
 = (
w
 !
n
);

73 
≥îs
->
tŸÆ_weight
 = 
w
;

74 
≥îs
->
«me
 = &
us
->
ho°
;

76 
n
 = 0;

77 
≥î
 = 
≥îs
->peer;

79 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

80 i‡(
£rvî
[
i
].
backup
) {

84 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

85 
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

86 
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

87 
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

88 
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

89 
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

90 
≥î
[
n
].
cuºít_weight
 = 0;

91 
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

92 
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

93 
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

94 
≥î
[
n
].
£rvî
 = sîvî[
i
].
«me
;

95 
n
++;

99 
us
->
≥î
.
d©a
 = 
≥îs
;

103 
n
 = 0;

104 
w
 = 0;

106 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

107 i‡(!
£rvî
[
i
].
backup
) {

111 
n
 +
£rvî
[
i
].
«ddrs
;

112 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

115 i‡(
n
 == 0) {

116  
NGX_OK
;

119 
backup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

120 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

121 i‡(
backup
 =
NULL
) {

122  
NGX_ERROR
;

125 
≥îs
->
sögÀ
 = 0;

126 
backup
->
sögÀ
 = 0;

127 
backup
->
numbî
 = 
n
;

128 
backup
->
weighãd
 = (
w
 !
n
);

129 
backup
->
tŸÆ_weight
 = 
w
;

130 
backup
->
«me
 = &
us
->
ho°
;

132 
n
 = 0;

133 
≥î
 = 
backup
->peer;

135 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

136 i‡(!
£rvî
[
i
].
backup
) {

140 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

141 
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

142 
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

143 
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

144 
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

145 
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

146 
≥î
[
n
].
cuºít_weight
 = 0;

147 
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

148 
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

149 
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

150 
≥î
[
n
].
£rvî
 = sîvî[
i
].
«me
;

151 
n
++;

155 
≥îs
->
√xt
 = 
backup
;

157  
NGX_OK
;

163 i‡(
us
->
p‹t
 == 0) {

164 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

166 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

167  
NGX_ERROR
;

170 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

172 
u
.
ho°
 = 
us
->host;

173 
u
.
p‹t
 = 
us
->port;

175 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

176 i‡(
u
.
îr
) {

177 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

179 
u
.
îr
, &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

182  
NGX_ERROR
;

185 
n
 = 
u
.
«ddrs
;

187 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

188 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

189 i‡(
≥îs
 =
NULL
) {

190  
NGX_ERROR
;

193 
≥îs
->
sögÀ
 = (
n
 == 1);

194 
≥îs
->
numbî
 = 
n
;

195 
≥îs
->
weighãd
 = 0;

196 
≥îs
->
tŸÆ_weight
 = 
n
;

197 
≥îs
->
«me
 = &
us
->
ho°
;

199 
≥î
 = 
≥îs
->peer;

201 
i
 = 0; i < 
u
.
«ddrs
; i++) {

202 
≥î
[
i
].
sockaddr
 = 
u
.
addrs
[i].sockaddr;

203 
≥î
[
i
].
sockÀn
 = 
u
.
addrs
[i].socklen;

204 
≥î
[
i
].
«me
 = 
u
.
addrs
[i].name;

205 
≥î
[
i
].
weight
 = 1;

206 
≥î
[
i
].
ef„˘ive_weight
 = 1;

207 
≥î
[
i
].
cuºít_weight
 = 0;

208 
≥î
[
i
].
max_Áûs
 = 1;

209 
≥î
[
i
].
Áû_timeout
 = 10;

212 
us
->
≥î
.
d©a
 = 
≥îs
;

216  
NGX_OK
;

217 
	}
}

220 
ngx_öt_t


221 
	$ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

222 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

224 
ngx_uöt_t
 
n
;

225 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

227 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

229 i‡(
ºp
 =
NULL
) {

230 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

231 i‡(
ºp
 =
NULL
) {

232  
NGX_ERROR
;

235 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

238 
ºp
->
≥îs
 = 
us
->
≥î
.
d©a
;

239 
ºp
->
cuºít
 = 0;

241 
n
 = 
ºp
->
≥îs
->
numbî
;

243 i‡(
ºp
->
≥îs
->
√xt
 &&ÑΩ->≥îs->√xt->
numbî
 > 
n
) {

244 
n
 = 
ºp
->
≥îs
->
√xt
->
numbî
;

247 i‡(
n
 <8 * (
uöçå_t
)) {

248 
ºp
->
åõd
 = &ºp->
d©a
;

249 
ºp
->
d©a
 = 0;

252 
n
 = (¿+ (8 * (
uöçå_t
) - 1)) / (8 * (uintptr_t));

254 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

255 i‡(
ºp
->
åõd
 =
NULL
) {

256  
NGX_ERROR
;

260 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

261 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

262 
r
->
up°ªam
->
≥î
.
åõs
 = 
	`ngx_hâp_up°ªam_åõs
(
ºp
->
≥îs
);

263 #i‡(
NGX_HTTP_SSL
)

264 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 =

265 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
;

266 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 =

267 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
;

270  
NGX_OK
;

271 
	}
}

274 
ngx_öt_t


275 
	$ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

276 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
)

278 
u_ch¨
 *
p
;

279 
size_t
 
Àn
;

280 
sockÀn_t
 
sockÀn
;

281 
ngx_uöt_t
 
i
, 
n
;

282 
sockaddr
 *sockaddr;

283 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

284 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

285 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

287 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

289 i‡(
ºp
 =
NULL
) {

290 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

291 i‡(
ºp
 =
NULL
) {

292  
NGX_ERROR
;

295 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

298 
≥îs
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

299 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
ur
->
«ddrs
 - 1));

300 i‡(
≥îs
 =
NULL
) {

301  
NGX_ERROR
;

304 
≥îs
->
sögÀ
 = (
ur
->
«ddrs
 == 1);

305 
≥îs
->
numbî
 = 
ur
->
«ddrs
;

306 
≥îs
->
«me
 = &
ur
->
ho°
;

308 
≥î
 = 
≥îs
->peer;

310 i‡(
ur
->
sockaddr
) {

311 
≥î
[0].
sockaddr
 = 
ur
->sockaddr;

312 
≥î
[0].
sockÀn
 = 
ur
->socklen;

313 
≥î
[0].
«me
 = 
ur
->
ho°
;

314 
≥î
[0].
weight
 = 1;

315 
≥î
[0].
ef„˘ive_weight
 = 1;

316 
≥î
[0].
cuºít_weight
 = 0;

317 
≥î
[0].
max_Áûs
 = 1;

318 
≥î
[0].
Áû_timeout
 = 10;

322 
i
 = 0; i < 
ur
->
«ddrs
; i++) {

324 
sockÀn
 = 
ur
->
addrs
[
i
].socklen;

326 
sockaddr
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
sockÀn
);

327 i‡(
sockaddr
 =
NULL
) {

328  
NGX_ERROR
;

331 
	`ngx_mem˝y
(
sockaddr
, 
ur
->
addrs
[
i
].sockaddr, 
sockÀn
);

333 
sockaddr
->
ß_Ámûy
) {

334 #i‡(
NGX_HAVE_INET6
)

335 
AF_INET6
:

336 ((
sockaddr_ö6
 *Ë
sockaddr
)->
sö6_p‹t
 = 
	`ht⁄s
(
ur
->
p‹t
);

340 ((
sockaddr_ö
 *Ë
sockaddr
)->
sö_p‹t
 = 
	`ht⁄s
(
ur
->
p‹t
);

343 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_SOCKADDR_STRLEN
);

344 i‡(
p
 =
NULL
) {

345  
NGX_ERROR
;

348 
Àn
 = 
	`ngx_sock_¡›
(
sockaddr
, 
sockÀn
, 
p
, 
NGX_SOCKADDR_STRLEN
, 1);

350 
≥î
[
i
].
sockaddr
 = sockaddr;

351 
≥î
[
i
].
sockÀn
 = socklen;

352 
≥î
[
i
].
«me
.
Àn
 =Üen;

353 
≥î
[
i
].
«me
.
d©a
 = 
p
;

354 
≥î
[
i
].
weight
 = 1;

355 
≥î
[
i
].
ef„˘ive_weight
 = 1;

356 
≥î
[
i
].
cuºít_weight
 = 0;

357 
≥î
[
i
].
max_Áûs
 = 1;

358 
≥î
[
i
].
Áû_timeout
 = 10;

362 
ºp
->
≥îs
 =Öeers;

363 
ºp
->
cuºít
 = 0;

365 i‡(
ºp
->
≥îs
->
numbî
 <8 * (
uöçå_t
)) {

366 
ºp
->
åõd
 = &ºp->
d©a
;

367 
ºp
->
d©a
 = 0;

370 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

371 / (8 * (
uöçå_t
));

373 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

374 i‡(
ºp
->
åõd
 =
NULL
) {

375  
NGX_ERROR
;

379 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

380 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

381 
r
->
up°ªam
->
≥î
.
åõs
 = 
	`ngx_hâp_up°ªam_åõs
(
ºp
->
≥îs
);

382 #i‡(
NGX_HTTP_SSL
)

383 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
;

384 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
;

387  
NGX_OK
;

388 
	}
}

391 
ngx_öt_t


392 
	$ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

394 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

396 
ngx_öt_t
 
rc
;

397 
ngx_uöt_t
 
i
, 
n
;

398 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

399 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

402 "gëÑ∏≥î,Åry: %ui", 
pc
->
åõs
);

404 
pc
->
ˇched
 = 0;

405 
pc
->
c⁄√˘i⁄
 = 
NULL
;

407 
≥îs
 = 
ºp
->peers;

411 i‡(
≥îs
->
sögÀ
) {

412 
≥î
 = &
≥îs
->peer[0];

414 i‡(
≥î
->
down
) {

415 
Áûed
;

422 
≥î
 = 
	`ngx_hâp_up°ªam_gë_≥î
(
ºp
);

424 i‡(
≥î
 =
NULL
) {

425 
Áûed
;

428 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

430 
ºp
->
cuºít
, 
≥î
->
cuºít_weight
);

433 
pc
->
sockaddr
 = 
≥î
->sockaddr;

434 
pc
->
sockÀn
 = 
≥î
->socklen;

435 
pc
->
«me
 = &
≥î
->name;

439  
NGX_OK
;

441 
Áûed
:

443 i‡(
≥îs
->
√xt
) {

447 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0, "backup servers");

449 
ºp
->
≥îs
 =Öìrs->
√xt
;

451 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

452 / (8 * (
uöçå_t
));

454 
i
 = 0; i < 
n
; i++) {

455 
ºp
->
åõd
[
i
] = 0;

458 
rc
 = 
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

460 i‡(
rc
 !
NGX_BUSY
) {

461  
rc
;

469 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

470 
≥îs
->
≥î
[
i
].
Áûs
 = 0;

475 
pc
->
«me
 = 
≥îs
->name;

477  
NGX_BUSY
;

478 
	}
}

481 
ngx_hâp_up°ªam_º_≥î_t
 *

482 
	$ngx_hâp_up°ªam_gë_≥î
(
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
)

484 
time_t
 
now
;

485 
uöçå_t
 
m
;

486 
ngx_öt_t
 
tŸÆ
;

487 
ngx_uöt_t
 
i
, 
n
;

488 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

490 
now
 = 
	`ngx_time
();

492 
be°
 = 
NULL
;

493 
tŸÆ
 = 0;

495 
i
 = 0; i < 
ºp
->
≥îs
->
numbî
; i++) {

497 
n
 = 
i
 / (8 * (
uöçå_t
));

498 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

500 i‡(
ºp
->
åõd
[
n
] & 
m
) {

504 
≥î
 = &
ºp
->
≥îs
->≥î[
i
];

506 i‡(
≥î
->
down
) {

510 i‡(
≥î
->
max_Áûs


511 && 
≥î
->
Áûs
 >≥î->
max_Áûs


512 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

517 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

518 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

520 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

521 
≥î
->
ef„˘ive_weight
++;

524 i‡(
be°
 =
NULL
 || 
≥î
->
cuºít_weight
 > best->current_weight) {

525 
be°
 = 
≥î
;

529 i‡(
be°
 =
NULL
) {

530  
NULL
;

533 
i
 = 
be°
 - &
ºp
->
≥îs
->
≥î
[0];

535 
ºp
->
cuºít
 = 
i
;

537 
n
 = 
i
 / (8 * (
uöçå_t
));

538 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

540 
ºp
->
åõd
[
n
] |
m
;

542 
be°
->
cuºít_weight
 -
tŸÆ
;

544 i‡(
now
 - 
be°
->
checked
 > be°->
Áû_timeout
) {

545 
be°
->
checked
 = 
now
;

548  
be°
;

549 
	}
}

553 
	$ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

554 
ngx_uöt_t
 
°©e
)

556 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

558 
time_t
 
now
;

559 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

561 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

562 "‰ìÑ∏≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

566 i‡(
ºp
->
≥îs
->
sögÀ
) {

567 
pc
->
åõs
 = 0;

571 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

573 i‡(
°©e
 & 
NGX_PEER_FAILED
) {

574 
now
 = 
	`ngx_time
();

578 
≥î
->
Áûs
++;

579 
≥î
->
ac˚s£d
 = 
now
;

580 
≥î
->
checked
 = 
now
;

582 i‡(
≥î
->
max_Áûs
) {

583 
≥î
->
ef„˘ive_weight
 -≥î->
weight
 /Öìr->
max_Áûs
;

586 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

588 
ºp
->
cuºít
, 
≥î
->
ef„˘ive_weight
);

590 i‡(
≥î
->
ef„˘ive_weight
 < 0) {

591 
≥î
->
ef„˘ive_weight
 = 0;

600 i‡(
≥î
->
ac˚s£d
 <Öìr->
checked
) {

601 
≥î
->
Áûs
 = 0;

605 i‡(
pc
->
åõs
) {

606 
pc
->
åõs
--;

610 
	}
}

613 #i‡(
NGX_HTTP_SSL
)

615 
ngx_öt_t


616 
	$ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

617 *
d©a
)

619 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

621 
ngx_öt_t
 
rc
;

622 
ngx_s¶_£ssi⁄_t
 *
s¶_£ssi⁄
;

623 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

625 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

630 
s¶_£ssi⁄
 = 
≥î
->ssl_session;

632 
rc
 = 
	`ngx_s¶_£t_£ssi⁄
(
pc
->
c⁄√˘i⁄
, 
s¶_£ssi⁄
);

634 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

635 "£à£ssi⁄: %p", 
s¶_£ssi⁄
);

639  
rc
;

640 
	}
}

644 
	$ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

645 *
d©a
)

647 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

649 
ngx_s¶_£ssi⁄_t
 *
ﬁd_s¶_£ssi⁄
, *
s¶_£ssi⁄
;

650 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

652 
s¶_£ssi⁄
 = 
	`ngx_s¶_gë_£ssi⁄
(
pc
->
c⁄√˘i⁄
);

654 i‡(
s¶_£ssi⁄
 =
NULL
) {

658 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

659 "ßvê£ssi⁄: %p", 
s¶_£ssi⁄
);

661 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

666 
ﬁd_s¶_£ssi⁄
 = 
≥î
->
s¶_£ssi⁄
;

667 
≥î
->
s¶_£ssi⁄
 = ssl_session;

671 i‡(
ﬁd_s¶_£ssi⁄
) {

673 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

674 "ﬁd sessi⁄: %p", 
ﬁd_s¶_£ssi⁄
);

678 
	`ngx_s¶_‰ì_£ssi⁄
(
ﬁd_s¶_£ssi⁄
);

680 
	}
}

683 
ngx_öt_t


684 
	$ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

686  
NGX_OK
;

687 
	}
}

691 
	$ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

694 
	}
}

	@src/http/ngx_http_upstream_round_robin.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
sockaddr
 *
	msockaddr
;

19 
sockÀn_t
 
	msockÀn
;

20 
ngx_°r_t
 
	m«me
;

21 
ngx_°r_t
 
	m£rvî
;

23 
ngx_öt_t
 
	mcuºít_weight
;

24 
ngx_öt_t
 
	mef„˘ive_weight
;

25 
ngx_öt_t
 
	mweight
;

27 
ngx_uöt_t
 
	mÁûs
;

28 
time_t
 
	mac˚s£d
;

29 
time_t
 
	mchecked
;

31 
ngx_uöt_t
 
	mmax_Áûs
;

32 
time_t
 
	mÁû_timeout
;

34 
ngx_uöt_t
 
	mdown
;

36 #i‡(
NGX_HTTP_SSL
)

37 
ngx_s¶_£ssi⁄_t
 *
	ms¶_£ssi⁄
;

39 } 
	tngx_hâp_up°ªam_º_≥î_t
;

42 
ngx_hâp_up°ªam_º_≥îs_s
 
	tngx_hâp_up°ªam_º_≥îs_t
;

44 
	sngx_hâp_up°ªam_º_≥îs_s
 {

45 
ngx_uöt_t
 
	mnumbî
;

47 
ngx_uöt_t
 
	mtŸÆ_weight
;

49 
	msögÀ
:1;

50 
	mweighãd
:1;

52 
ngx_°r_t
 *
	m«me
;

54 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m√xt
;

56 
ngx_hâp_up°ªam_º_≥î_t
 
	m≥î
[1];

61 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m≥îs
;

62 
ngx_uöt_t
 
	mcuºít
;

63 
uöçå_t
 *
	måõd
;

64 
uöçå_t
 
	md©a
;

65 } 
	tngx_hâp_up°ªam_º_≥î_d©a_t
;

68 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

69 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

70 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

71 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

72 
ngx_öt_t
 
ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

73 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
);

74 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

75 *
d©a
);

76 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

77 *
d©a
, 
ngx_uöt_t
 
°©e
);

79 #i‡(
NGX_HTTP_SSL
)

80 
ngx_öt_t


81 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

82 *
d©a
);

83 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

84 *
d©a
);

	@src/http/ngx_http_variables.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

17 
ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

20 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

24 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

27 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõs
(
ngx_hâp_ªque°_t
 *
r
,

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
, 
u_ch¨
 
£p
);

34 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

36 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

38 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

40 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

42 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
,

43 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

44 #i‡(
NGX_HAVE_TCP_INFO
)

45 
ngx_öt_t
 
ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

49 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

51 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
,

52 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

53 
ngx_öt_t
 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

55 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

57 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

58 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

59 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
(
ngx_hâp_ªque°_t
 *
r
,

60 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

61 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

62 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

63 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

64 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

65 
ngx_öt_t
 
ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

66 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

67 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

69 
ngx_hâp_v¨übÀ_£t_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

71 
ngx_öt_t
 
ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

73 
ngx_öt_t
 
ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

81 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

83 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

85 
ngx_öt_t
 
ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

87 
ngx_öt_t
 
ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

89 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

90 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

91 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

93 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

95 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

97 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

99 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

101 
ngx_öt_t
 
ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

104 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

105 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

106 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

107 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

108 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

110 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

111 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

112 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

113 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

114 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

115 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

116 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

117 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

119 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

120 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

121 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

122 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

124 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

126 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

127 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

128 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

129 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

130 
ngx_öt_t
 
ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

131 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

132 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

133 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

134 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

135 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

153 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_c‹e_v¨übÀs
[] = {

155 { 
ngx_°rög
("hâp_ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

156 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ho°
), 0, 0 },

158 { 
ngx_°rög
("hâp_u£r_agít"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

159 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
u£r_agít
), 0, 0 },

161 { 
ngx_°rög
("hâp_ª„ªr"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

162 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ª„ªr
), 0, 0 },

164 #i‡(
NGX_HTTP_GZIP
)

165 { 
ngx_°rög
("hâp_vü"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

166 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
vü
), 0, 0 },

169 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

170 { 
ngx_°rög
("hâp_x_f‹w¨ded_f‹"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

171 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
x_f‹w¨ded_f‹
), 0, 0 },

174 { 
ngx_°rög
("hâp_cookõ"), 
NULL
, 
ngx_hâp_v¨übÀ_cookõs
,

175 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
cookõs
), 0, 0 },

177 { 
ngx_°rög
("c⁄ã¡_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
,

180 { 
ngx_°rög
("c⁄ã¡_ty≥"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

181 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
c⁄ã¡_ty≥
), 0, 0 },

183 { 
ngx_°rög
("ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°
, 0, 0, 0 },

185 { 
ngx_°rög
("bö¨y_ªmŸe_addr"), 
NULL
,

186 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
, 0, 0, 0 },

188 { 
ngx_°rög
("ªmŸe_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_addr
, 0, 0, 0 },

190 { 
ngx_°rög
("ªmŸe_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
, 0, 0, 0 },

192 { 
ngx_°rög
("¥oxy_¥Ÿocﬁ_addr"), 
NULL
,

193 
ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
, 0, 0, 0 },

195 { 
ngx_°rög
("£rvî_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_addr
, 0, 0, 0 },

197 { 
ngx_°rög
("£rvî_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_p‹t
, 0, 0, 0 },

199 { 
ngx_°rög
("£rvî_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

200 
off£tof
(
ngx_hâp_ªque°_t
, 
hâp_¥Ÿocﬁ
), 0, 0 },

202 { 
ngx_°rög
("scheme"), 
NULL
, 
ngx_hâp_v¨übÀ_scheme
, 0, 0, 0 },

204 { 
ngx_°rög
("hâps"), 
NULL
, 
ngx_hâp_v¨übÀ_hâps
, 0, 0, 0 },

206 { 
ngx_°rög
("ªque°_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

207 
off£tof
(
ngx_hâp_ªque°_t
, 
u≈¨£d_uri
), 0, 0 },

209 { 
ngx_°rög
("uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

210 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

211 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

213 { 
ngx_°rög
("documít_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

214 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

215 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

217 { 
ngx_°rög
("ªque°"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_löe
, 0, 0, 0 },

219 { 
ngx_°rög
("documít_roŸ"), 
NULL
,

220 
ngx_hâp_v¨übÀ_documít_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

222 { 
ngx_°rög
("ªÆ∑th_roŸ"), 
NULL
,

223 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

225 { 
ngx_°rög
("quîy_°rög"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

226 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

227 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

229 { 
ngx_°rög
("args"),

230 
ngx_hâp_v¨übÀ_£t_¨gs
,

231 
ngx_hâp_v¨übÀ_ªque°
,

232 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

233 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

235 { 
ngx_°rög
("is_¨gs"), 
NULL
, 
ngx_hâp_v¨übÀ_is_¨gs
,

236 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

238 { 
ngx_°rög
("ªque°_fûíame"), 
NULL
,

239 
ngx_hâp_v¨übÀ_ªque°_fûíame
, 0,

240 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

242 { 
ngx_°rög
("£rvî_«me"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_«me
, 0, 0, 0 },

244 { 
ngx_°rög
("ªque°_mëhod"), 
NULL
,

245 
ngx_hâp_v¨übÀ_ªque°_mëhod
, 0,

246 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

248 { 
ngx_°rög
("ªmŸe_u£r"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_u£r
, 0, 0, 0 },

250 { 
ngx_°rög
("byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_byãs_£¡
,

253 { 
ngx_°rög
("body_byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_body_byãs_£¡
,

256 { 
ngx_°rög
("pùe"), 
NULL
, 
ngx_hâp_v¨übÀ_pùe
,

259 { 
ngx_°rög
("ªque°_com∂ëi⁄"), 
NULL
,

260 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
,

263 { 
ngx_°rög
("ªque°_body"), 
NULL
,

264 
ngx_hâp_v¨übÀ_ªque°_body
,

267 { 
ngx_°rög
("ªque°_body_fûe"), 
NULL
,

268 
ngx_hâp_v¨übÀ_ªque°_body_fûe
,

271 { 
ngx_°rög
("ªque°_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_Àngth
,

272 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

274 { 
ngx_°rög
("ªque°_time"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_time
,

275 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

277 { 
ngx_°rög
("°©us"), 
NULL
,

278 
ngx_hâp_v¨übÀ_°©us
, 0,

279 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

281 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_ty≥"), 
NULL
,

282 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
, 0, 0, 0 },

284 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_Àngth"), 
NULL
,

285 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
, 0, 0, 0 },

287 { 
ngx_°rög
("£¡_hâp_loˇti⁄"), 
NULL
,

288 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
, 0, 0, 0 },

290 { 
ngx_°rög
("£¡_hâp_œ°_modifõd"), 
NULL
,

291 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
, 0, 0, 0 },

293 { 
ngx_°rög
("£¡_hâp_c⁄√˘i⁄"), 
NULL
,

294 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
, 0, 0, 0 },

296 { 
ngx_°rög
("£¡_hâp_kìp_Æive"), 
NULL
,

297 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
, 0, 0, 0 },

299 { 
ngx_°rög
("£¡_hâp_å™s„r_ícodög"), 
NULL
,

300 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
, 0, 0, 0 },

302 { 
ngx_°rög
("£¡_hâp_ˇche_c⁄åﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

303 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_out
.
ˇche_c⁄åﬁ
), 0, 0 },

305 { 
ngx_°rög
("limô_øã"), 
ngx_hâp_v¨übÀ_ªque°_£t_size
,

306 
ngx_hâp_v¨übÀ_ªque°_gë_size
,

307 
off£tof
(
ngx_hâp_ªque°_t
, 
limô_øã
),

308 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

310 { 
ngx_°rög
("c⁄√˘i⁄"), 
NULL
,

311 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
, 0, 0, 0 },

313 { 
ngx_°rög
("c⁄√˘i⁄_ªque°s"), 
NULL
,

314 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
, 0, 0, 0 },

316 { 
ngx_°rög
("ngöx_vîsi⁄"), 
NULL
, 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
,

319 { 
ngx_°rög
("ho°«me"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°«me
,

322 { 
ngx_°rög
("pid"), 
NULL
, 
ngx_hâp_v¨übÀ_pid
,

325 { 
ngx_°rög
("m£c"), 
NULL
, 
ngx_hâp_v¨übÀ_m£c
,

326 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

328 { 
ngx_°rög
("time_iso8601"), 
NULL
, 
ngx_hâp_v¨übÀ_time_iso8601
,

329 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

331 { 
ngx_°rög
("time_loˇl"), 
NULL
, 
ngx_hâp_v¨übÀ_time_loˇl
,

332 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

334 #i‡(
NGX_HAVE_TCP_INFO
)

335 { 
ngx_°rög
("t˝öfo_πt"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

336 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

338 { 
ngx_°rög
("t˝öfo_πtv¨"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

339 1, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

341 { 
ngx_°rög
("t˝öfo_¢d_cwnd"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

342 2, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

344 { 
ngx_°rög
("t˝öfo_rcv_•a˚"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

345 3, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

348 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

352 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_nuŒ_vÆue
 =

353 
ngx_hâp_v¨übÀ
("");

354 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_åue_vÆue
 =

355 
ngx_hâp_v¨übÀ
("1");

358 
ngx_hâp_v¨übÀ_t
 *

359 
	$ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
)

361 
ngx_öt_t
 
rc
;

362 
ngx_uöt_t
 
i
;

363 
ngx_hash_key_t
 *
key
;

364 
ngx_hâp_v¨übÀ_t
 *
v
;

365 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

367 i‡(
«me
->
Àn
 == 0) {

368 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

370  
NULL
;

373 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

375 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

376 
i
 = 0; i < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
; i++) {

377 i‡(
«me
->
Àn
 !
key
[
i
].key.len

378 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
key
[
i
].key.d©a,Çame->
Àn
) != 0)

383 
v
 = 
key
[
i
].
vÆue
;

385 i‡(!(
v
->
Êags
 & 
NGX_HTTP_VAR_CHANGEABLE
)) {

386 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

387 "thêdu∂iˇã \"%V\" v¨übÀ", 
«me
);

388  
NULL
;

391  
v
;

394 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

395 i‡(
v
 =
NULL
) {

396  
NULL
;

399 
v
->
«me
.
Àn
 =Çame->len;

400 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

401 i‡(
v
->
«me
.
d©a
 =
NULL
) {

402  
NULL
;

405 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

407 
v
->
£t_h™dÀr
 = 
NULL
;

408 
v
->
gë_h™dÀr
 = 
NULL
;

409 
v
->
d©a
 = 0;

410 
v
->
Êags
 = flags;

411 
v
->
ödex
 = 0;

413 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v, 0);

415 i‡(
rc
 =
NGX_ERROR
) {

416  
NULL
;

419 i‡(
rc
 =
NGX_BUSY
) {

420 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

421 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", 
«me
);

422  
NULL
;

425  
v
;

426 
	}
}

429 
ngx_öt_t


430 
	$ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
)

432 
ngx_uöt_t
 
i
;

433 
ngx_hâp_v¨übÀ_t
 *
v
;

434 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

436 i‡(
«me
->
Àn
 == 0) {

437 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

439  
NGX_ERROR
;

442 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

444 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

446 i‡(
v
 =
NULL
) {

447 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
v¨übÀs
, 
cf
->
poﬁ
, 4,

448 (
ngx_hâp_v¨übÀ_t
))

449 !
NGX_OK
)

451  
NGX_ERROR
;

455 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

456 i‡(
«me
->
Àn
 !
v
[
i
].name.len

457 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a,Çame->
Àn
) != 0)

462  
i
;

466 
v
 = 
	`ngx_¨øy_push
(&
cmcf
->
v¨übÀs
);

467 i‡(
v
 =
NULL
) {

468  
NGX_ERROR
;

471 
v
->
«me
.
Àn
 =Çame->len;

472 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

473 i‡(
v
->
«me
.
d©a
 =
NULL
) {

474  
NGX_ERROR
;

477 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

479 
v
->
£t_h™dÀr
 = 
NULL
;

480 
v
->
gë_h™dÀr
 = 
NULL
;

481 
v
->
d©a
 = 0;

482 
v
->
Êags
 = 0;

483 
v
->
ödex
 = 
cmcf
->
v¨übÀs
.
√…s
 - 1;

485  
v
->
ödex
;

486 
	}
}

489 
ngx_hâp_v¨übÀ_vÆue_t
 *

490 
	$ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

492 
ngx_hâp_v¨übÀ_t
 *
v
;

493 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

495 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

497 i‡(
cmcf
->
v¨übÀs
.
√…s
 <
ödex
) {

498 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

499 "unknow¿v¨übÀ index: %ui", 
ödex
);

500  
NULL
;

503 i‡(
r
->
v¨übÀs
[
ödex
].
nŸ_found
 ||Ñ->v¨übÀs[ödex].
vÆid
) {

504  &
r
->
v¨übÀs
[
ödex
];

507 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

509 i‡(
v
[
ödex
].
	`gë_h™dÀr
(
r
, &r->
v¨übÀs
[ödex], v[ödex].
d©a
)

510 =
NGX_OK
)

512 i‡(
v
[
ödex
].
Êags
 & 
NGX_HTTP_VAR_NOCACHEABLE
) {

513 
r
->
v¨übÀs
[
ödex
].
no_ˇchóbÀ
 = 1;

516  &
r
->
v¨übÀs
[
ödex
];

519 
r
->
v¨übÀs
[
ödex
].
vÆid
 = 0;

520 
r
->
v¨übÀs
[
ödex
].
nŸ_found
 = 1;

522  
NULL
;

523 
	}
}

526 
ngx_hâp_v¨übÀ_vÆue_t
 *

527 
	$ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

529 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

531 
v
 = &
r
->
v¨übÀs
[
ödex
];

533 i‡(
v
->
vÆid
 || v->
nŸ_found
) {

534 i‡(!
v
->
no_ˇchóbÀ
) {

535  
v
;

538 
v
->
vÆid
 = 0;

539 
v
->
nŸ_found
 = 0;

542  
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ödex
);

543 
	}
}

546 
ngx_hâp_v¨übÀ_vÆue_t
 *

547 
	$ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
)

549 
ngx_hâp_v¨übÀ_t
 *
v
;

550 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

551 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

553 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

555 
v
 = 
	`ngx_hash_föd
(&
cmcf
->
v¨übÀs_hash
, 
key
, 
«me
->
d©a
,Çame->
Àn
);

557 i‡(
v
) {

558 i‡(
v
->
Êags
 & 
NGX_HTTP_VAR_INDEXED
) {

559  
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
v
->
ödex
);

563 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

565 i‡(
vv
 && 
v
->
	`gë_h™dÀr
(
r
, vv, v->
d©a
Ë=
NGX_OK
) {

566  
vv
;

569  
NULL
;

573 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

574 i‡(
vv
 =
NULL
) {

575  
NULL
;

578 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "http_", 5) == 0) {

580 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_ö
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

581 =
NGX_OK
)

583  
vv
;

586  
NULL
;

589 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "sent_http_", 10) == 0) {

591 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_out
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

592 =
NGX_OK
)

594  
vv
;

597  
NULL
;

600 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "upstream_http_", 14) == 0) {

602 i‡(
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

603 =
NGX_OK
)

605  
vv
;

608  
NULL
;

611 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "cookie_", 7) == 0) {

613 i‡(
	`ngx_hâp_v¨übÀ_cookõ
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

614  
vv
;

617  
NULL
;

620 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "upstream_cookie_", 16) == 0) {

622 i‡(
	`ngx_hâp_up°ªam_cookõ_v¨übÀ
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

623 =
NGX_OK
)

625  
vv
;

628  
NULL
;

631 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "arg_", 4) == 0) {

633 i‡(
	`ngx_hâp_v¨übÀ_¨gumít
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

634  
vv
;

637  
NULL
;

640 
vv
->
nŸ_found
 = 1;

642  
vv
;

643 
	}
}

646 
ngx_öt_t


647 
	$ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

648 
uöçå_t
 
d©a
)

650 
ngx_°r_t
 *
s
;

652 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

654 i‡(
s
->
d©a
) {

655 
v
->
Àn
 = 
s
->len;

656 
v
->
vÆid
 = 1;

657 
v
->
no_ˇchóbÀ
 = 0;

658 
v
->
nŸ_found
 = 0;

659 
v
->
d©a
 = 
s
->data;

662 
v
->
nŸ_found
 = 1;

665  
NGX_OK
;

666 
	}
}

672 
	$ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

673 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

675 
ngx_°r_t
 *
s
;

677 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

679 
s
->
Àn
 = 
v
->len;

680 
s
->
d©a
 = 
v
->data;

681 
	}
}

686 
ngx_öt_t


687 
	$ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

688 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

690 
size_t
 *
•
;

692 
•
 = (
size_t
 *Ë((*Ë
r
 + 
d©a
);

694 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
);

695 i‡(
v
->
d©a
 =
NULL
) {

696  
NGX_ERROR
;

699 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uz", *
•
) - v->data;

700 
v
->
vÆid
 = 1;

701 
v
->
no_ˇchóbÀ
 = 0;

702 
v
->
nŸ_found
 = 0;

704  
NGX_OK
;

705 
	}
}

709 
	$ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

710 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

712 
ssize_t
 
s
, *
•
;

713 
ngx_°r_t
 
vÆ
;

715 
vÆ
.
Àn
 = 
v
->len;

716 
vÆ
.
d©a
 = 
v
->data;

718 
s
 = 
	`ngx_∑r£_size
(&
vÆ
);

720 i‡(
s
 =
NGX_ERROR
) {

721 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

722 "övÆid sizê\"%V\"", &
vÆ
);

726 
•
 = (
ssize_t
 *Ë((*Ë
r
 + 
d©a
);

728 *
•
 = 
s
;

731 
	}
}

734 
ngx_öt_t


735 
	$ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

736 
uöçå_t
 
d©a
)

738 
ngx_èbÀ_ñt_t
 *
h
;

740 
h
 = *(
ngx_èbÀ_ñt_t
 **Ë((*Ë
r
 + 
d©a
);

742 i‡(
h
) {

743 
v
->
Àn
 = 
h
->
vÆue
.len;

744 
v
->
vÆid
 = 1;

745 
v
->
no_ˇchóbÀ
 = 0;

746 
v
->
nŸ_found
 = 0;

747 
v
->
d©a
 = 
h
->
vÆue
.data;

750 
v
->
nŸ_found
 = 1;

753  
NGX_OK
;

754 
	}
}

757 
ngx_öt_t


758 
	$ngx_hâp_v¨übÀ_cookõs
(
ngx_hâp_ªque°_t
 *
r
,

759 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

761  
	`ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
r
, 
v
, 
d©a
, ';');

762 
	}
}

765 
ngx_öt_t


766 
	$ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

767 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

769  
	`ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
r
, 
v
, 
d©a
, ',');

770 
	}
}

773 
ngx_öt_t


774 
	$ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

775 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
, 
u_ch¨
 
£p
)

777 
size_t
 
Àn
;

778 
u_ch¨
 *
p
, *
íd
;

779 
ngx_uöt_t
 
i
, 
n
;

780 
ngx_¨øy_t
 *
a
;

781 
ngx_èbÀ_ñt_t
 **
h
;

783 
a
 = (
ngx_¨øy_t
 *Ë((*Ë
r
 + 
d©a
);

785 
n
 = 
a
->
√…s
;

786 
h
 = 
a
->
ñts
;

788 
Àn
 = 0;

790 
i
 = 0; i < 
n
; i++) {

792 i‡(
h
[
i
]->
hash
 == 0) {

796 
Àn
 +
h
[
i
]->
vÆue
.len + 2;

799 i‡(
Àn
 == 0) {

800 
v
->
nŸ_found
 = 1;

801  
NGX_OK
;

804 
Àn
 -= 2;

806 
v
->
vÆid
 = 1;

807 
v
->
no_ˇchóbÀ
 = 0;

808 
v
->
nŸ_found
 = 0;

810 i‡(
n
 == 1) {

811 
v
->
Àn
 = (*
h
)->
vÆue
.len;

812 
v
->
d©a
 = (*
h
)->
vÆue
.data;

814  
NGX_OK
;

817 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

818 i‡(
p
 =
NULL
) {

819  
NGX_ERROR
;

822 
v
->
Àn
 =Üen;

823 
v
->
d©a
 = 
p
;

825 
íd
 = 
p
 + 
Àn
;

827 
i
 = 0; ; i++) {

829 i‡(
h
[
i
]->
hash
 == 0) {

833 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

835 i‡(
p
 =
íd
) {

839 *
p
++ = 
£p
; *p++ = ' ';

842  
NGX_OK
;

843 
	}
}

846 
ngx_öt_t


847 
	$ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

848 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

850  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

851 &
r
->
hódîs_ö
.
hódîs
.
∑π
,

853 
	}
}

856 
ngx_öt_t


857 
	$ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

858 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

860  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

861 &
r
->
hódîs_out
.
hódîs
.
∑π
,

863 
	}
}

866 
ngx_öt_t


867 
	$ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
v¨
,

868 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
)

870 
u_ch¨
 
ch
;

871 
ngx_uöt_t
 
i
, 
n
;

872 
ngx_èbÀ_ñt_t
 *
hódî
;

874 
hódî
 = 
∑π
->
ñts
;

876 
i
 = 0; ; i++) {

878 i‡(
i
 >
∑π
->
√…s
) {

879 i‡(
∑π
->
√xt
 =
NULL
) {

883 
∑π
 =Ö¨t->
√xt
;

884 
hódî
 = 
∑π
->
ñts
;

885 
i
 = 0;

888 i‡(
hódî
[
i
].
hash
 == 0) {

892 
n
 = 0;Ç + 
¥efix
 < 
v¨
->
Àn
 &&Ç < 
hódî
[
i
].
key
.len;Ç++) {

893 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

895 i‡(
ch
 >= 'A' && ch <= 'Z') {

896 
ch
 |= 0x20;

898 } i‡(
ch
 == '-') {

899 
ch
 = '_';

902 i‡(
v¨
->
d©a
[
n
 + 
¥efix
] !
ch
) {

907 i‡(
n
 + 
¥efix
 =
v¨
->
Àn
 &&Ç =
hódî
[
i
].
key
.len) {

908 
v
->
Àn
 = 
hódî
[
i
].
vÆue
.len;

909 
v
->
vÆid
 = 1;

910 
v
->
no_ˇchóbÀ
 = 0;

911 
v
->
nŸ_found
 = 0;

912 
v
->
d©a
 = 
hódî
[
i
].
vÆue
.data;

914  
NGX_OK
;

918 
v
->
nŸ_found
 = 1;

920  
NGX_OK
;

921 
	}
}

924 
ngx_öt_t


925 
	$ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

926 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

928 
u_ch¨
 *
p
, *
s
;

930 
s
 = 
r
->
ªque°_löe
.
d©a
;

932 i‡(
s
 =
NULL
) {

933 
s
 = 
r
->
ªque°_°¨t
;

935 i‡(
s
 =
NULL
) {

936 
v
->
nŸ_found
 = 1;

937  
NGX_OK
;

940 
p
 = 
s
;Ö < 
r
->
hódî_ö
->
œ°
;Ö++) {

941 i‡(*
p
 =
CR
 || *∞=
LF
) {

946 
r
->
ªque°_löe
.
Àn
 = 
p
 - 
s
;

947 
r
->
ªque°_löe
.
d©a
 = 
s
;

950 
v
->
Àn
 = 
r
->
ªque°_löe
.len;

951 
v
->
vÆid
 = 1;

952 
v
->
no_ˇchóbÀ
 = 0;

953 
v
->
nŸ_found
 = 0;

954 
v
->
d©a
 = 
s
;

956  
NGX_OK
;

957 
	}
}

960 
ngx_öt_t


961 
	$ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

962 
uöçå_t
 
d©a
)

964 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

966 
ngx_°r_t
 
cookõ
, 
s
;

968 
s
.
Àn
 = 
«me
->len - (("cookie_") - 1);

969 
s
.
d©a
 = 
«me
->data + ("cookie_") - 1;

971 i‡(
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
s
, &
cookõ
)

972 =
NGX_DECLINED
)

974 
v
->
nŸ_found
 = 1;

975  
NGX_OK
;

978 
v
->
Àn
 = 
cookõ
.len;

979 
v
->
vÆid
 = 1;

980 
v
->
no_ˇchóbÀ
 = 0;

981 
v
->
nŸ_found
 = 0;

982 
v
->
d©a
 = 
cookõ
.data;

984  
NGX_OK
;

985 
	}
}

988 
ngx_öt_t


989 
	$ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

990 
uöçå_t
 
d©a
)

992 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

994 
u_ch¨
 *
¨g
;

995 
size_t
 
Àn
;

996 
ngx_°r_t
 
vÆue
;

998 
Àn
 = 
«me
->len - (("arg_") - 1);

999 
¨g
 = 
«me
->
d©a
 + ("arg_") - 1;

1001 i‡(
	`ngx_hâp_¨g
(
r
, 
¨g
, 
Àn
, &
vÆue
Ë!
NGX_OK
) {

1002 
v
->
nŸ_found
 = 1;

1003  
NGX_OK
;

1006 
v
->
d©a
 = 
vÆue
.data;

1007 
v
->
Àn
 = 
vÆue
.len;

1008 
v
->
vÆid
 = 1;

1009 
v
->
no_ˇchóbÀ
 = 0;

1010 
v
->
nŸ_found
 = 0;

1012  
NGX_OK
;

1013 
	}
}

1016 #i‡(
NGX_HAVE_TCP_INFO
)

1018 
ngx_öt_t


1019 
	$ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1020 
uöçå_t
 
d©a
)

1022 
t˝_öfo
 
ti
;

1023 
sockÀn_t
 
Àn
;

1024 
uöt32_t
 
vÆue
;

1026 
Àn
 = (
t˝_öfo
);

1027 i‡(
	`gësock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
IPPROTO_TCP
, 
TCP_INFO
, &
ti
, &
Àn
) == -1) {

1028 
v
->
nŸ_found
 = 1;

1029  
NGX_OK
;

1032 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
);

1033 i‡(
v
->
d©a
 =
NULL
) {

1034  
NGX_ERROR
;

1037 
d©a
) {

1039 
vÆue
 = 
ti
.
t˝i_πt
;

1043 
vÆue
 = 
ti
.
t˝i_πtv¨
;

1047 
vÆue
 = 
ti
.
t˝i_¢d_cwnd
;

1051 
vÆue
 = 
ti
.
t˝i_rcv_•a˚
;

1056 
vÆue
 = 0;

1060 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uD", 
vÆue
) - v->data;

1061 
v
->
vÆid
 = 1;

1062 
v
->
no_ˇchóbÀ
 = 0;

1063 
v
->
nŸ_found
 = 0;

1065  
NGX_OK
;

1066 
	}
}

1071 
ngx_öt_t


1072 
	$ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1073 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1075 
u_ch¨
 *
p
;

1077 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1078 
v
->
Àn
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.len;

1079 
v
->
d©a
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.data;

1080 
v
->
vÆid
 = 1;

1081 
v
->
no_ˇchóbÀ
 = 0;

1082 
v
->
nŸ_found
 = 0;

1084 } i‡(
r
->
ªadög_body
) {

1085 
v
->
nŸ_found
 = 1;

1086 
v
->
no_ˇchóbÀ
 = 1;

1088 } i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 >= 0) {

1089 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1090 i‡(
p
 =
NULL
) {

1091  
NGX_ERROR
;

1094 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) -Ö;

1095 
v
->
d©a
 = 
p
;

1096 
v
->
vÆid
 = 1;

1097 
v
->
no_ˇchóbÀ
 = 0;

1098 
v
->
nŸ_found
 = 0;

1101 
v
->
nŸ_found
 = 1;

1104  
NGX_OK
;

1105 
	}
}

1108 
ngx_öt_t


1109 
	$ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1110 
uöçå_t
 
d©a
)

1112 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1114 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1115 
v
->
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

1116 
v
->
d©a
 = 
r
->
hódîs_ö
.
£rvî
.data;

1119 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1121 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1122 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1125 
v
->
vÆid
 = 1;

1126 
v
->
no_ˇchóbÀ
 = 0;

1127 
v
->
nŸ_found
 = 0;

1129  
NGX_OK
;

1130 
	}
}

1133 
ngx_öt_t


1134 
	$ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1135 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1137 
sockaddr_ö
 *
sö
;

1138 #i‡(
NGX_HAVE_INET6
)

1139 
sockaddr_ö6
 *
sö6
;

1142 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

1144 #i‡(
NGX_HAVE_INET6
)

1145 
AF_INET6
:

1146 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1148 
v
->
Àn
 = (
ö6_addr
);

1149 
v
->
vÆid
 = 1;

1150 
v
->
no_ˇchóbÀ
 = 0;

1151 
v
->
nŸ_found
 = 0;

1152 
v
->
d©a
 = 
sö6
->
sö6_addr
.
s6_addr
;

1158 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1160 
v
->
Àn
 = (
ö_addr_t
);

1161 
v
->
vÆid
 = 1;

1162 
v
->
no_ˇchóbÀ
 = 0;

1163 
v
->
nŸ_found
 = 0;

1164 
v
->
d©a
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

1169  
NGX_OK
;

1170 
	}
}

1173 
ngx_öt_t


1174 
	$ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1175 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1177 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

1178 
v
->
vÆid
 = 1;

1179 
v
->
no_ˇchóbÀ
 = 0;

1180 
v
->
nŸ_found
 = 0;

1181 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

1183  
NGX_OK
;

1184 
	}
}

1187 
ngx_öt_t


1188 
	$ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1189 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1191 
ngx_uöt_t
 
p‹t
;

1192 
sockaddr_ö
 *
sö
;

1193 #i‡(
NGX_HAVE_INET6
)

1194 
sockaddr_ö6
 *
sö6
;

1197 
v
->
Àn
 = 0;

1198 
v
->
vÆid
 = 1;

1199 
v
->
no_ˇchóbÀ
 = 0;

1200 
v
->
nŸ_found
 = 0;

1202 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1203 i‡(
v
->
d©a
 =
NULL
) {

1204  
NGX_ERROR
;

1207 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

1209 #i‡(
NGX_HAVE_INET6
)

1210 
AF_INET6
:

1211 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1212 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

1216 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1217 
AF_UNIX
:

1218 
p‹t
 = 0;

1223 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1224 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

1228 i‡(
p‹t
 > 0 &&Öort < 65536) {

1229 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1232  
NGX_OK
;

1233 
	}
}

1236 
ngx_öt_t


1237 
	$ngx_hâp_v¨übÀ_¥oxy_¥Ÿocﬁ_addr
(
ngx_hâp_ªque°_t
 *
r
,

1238 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1240 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
.len;

1241 
v
->
vÆid
 = 1;

1242 
v
->
no_ˇchóbÀ
 = 0;

1243 
v
->
nŸ_found
 = 0;

1244 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
¥oxy_¥Ÿocﬁ_addr
.data;

1246  
NGX_OK
;

1247 
	}
}

1250 
ngx_öt_t


1251 
	$ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

1252 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1254 
ngx_°r_t
 
s
;

1255 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

1257 
s
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

1258 
s
.
d©a
 = 
addr
;

1260 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, &
s
, 0Ë!
NGX_OK
) {

1261  
NGX_ERROR
;

1264 
s
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, s.
Àn
);

1265 i‡(
s
.
d©a
 =
NULL
) {

1266  
NGX_ERROR
;

1269 
	`ngx_mem˝y
(
s
.
d©a
, 
addr
, s.
Àn
);

1271 
v
->
Àn
 = 
s
.len;

1272 
v
->
vÆid
 = 1;

1273 
v
->
no_ˇchóbÀ
 = 0;

1274 
v
->
nŸ_found
 = 0;

1275 
v
->
d©a
 = 
s
.data;

1277  
NGX_OK
;

1278 
	}
}

1281 
ngx_öt_t


1282 
	$ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1283 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1285 
ngx_uöt_t
 
p‹t
;

1286 
sockaddr_ö
 *
sö
;

1287 #i‡(
NGX_HAVE_INET6
)

1288 
sockaddr_ö6
 *
sö6
;

1291 
v
->
Àn
 = 0;

1292 
v
->
vÆid
 = 1;

1293 
v
->
no_ˇchóbÀ
 = 0;

1294 
v
->
nŸ_found
 = 0;

1296 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, 
NULL
, 0Ë!
NGX_OK
) {

1297  
NGX_ERROR
;

1300 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1301 i‡(
v
->
d©a
 =
NULL
) {

1302  
NGX_ERROR
;

1305 
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
->
ß_Ámûy
) {

1307 #i‡(
NGX_HAVE_INET6
)

1308 
AF_INET6
:

1309 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1310 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

1314 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1315 
AF_UNIX
:

1316 
p‹t
 = 0;

1321 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1322 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

1326 i‡(
p‹t
 > 0 &&Öort < 65536) {

1327 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1330  
NGX_OK
;

1331 
	}
}

1334 
ngx_öt_t


1335 
	$ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

1336 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1338 #i‡(
NGX_HTTP_SSL
)

1340 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1341 
v
->
Àn
 = ("https") - 1;

1342 
v
->
vÆid
 = 1;

1343 
v
->
no_ˇchóbÀ
 = 0;

1344 
v
->
nŸ_found
 = 0;

1345 
v
->
d©a
 = (
u_ch¨
 *) "https";

1347  
NGX_OK
;

1352 
v
->
Àn
 = ("http") - 1;

1353 
v
->
vÆid
 = 1;

1354 
v
->
no_ˇchóbÀ
 = 0;

1355 
v
->
nŸ_found
 = 0;

1356 
v
->
d©a
 = (
u_ch¨
 *) "http";

1358  
NGX_OK
;

1359 
	}
}

1362 
ngx_öt_t


1363 
	$ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

1364 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1366 #i‡(
NGX_HTTP_SSL
)

1368 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1369 
v
->
Àn
 = ("on") - 1;

1370 
v
->
vÆid
 = 1;

1371 
v
->
no_ˇchóbÀ
 = 0;

1372 
v
->
nŸ_found
 = 0;

1373 
v
->
d©a
 = (
u_ch¨
 *) "on";

1375  
NGX_OK
;

1380 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1382  
NGX_OK
;

1383 
	}
}

1387 
	$ngx_hâp_v¨übÀ_£t_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

1388 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1390 
r
->
¨gs
.
Àn
 = 
v
->len;

1391 
r
->
¨gs
.
d©a
 = 
v
->data;

1392 
r
->
vÆid_u≈¨£d_uri
 = 0;

1393 
	}
}

1396 
ngx_öt_t


1397 
	$ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

1398 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1400 
v
->
vÆid
 = 1;

1401 
v
->
no_ˇchóbÀ
 = 0;

1402 
v
->
nŸ_found
 = 0;

1404 i‡(
r
->
¨gs
.
Àn
 == 0) {

1405 
v
->
Àn
 = 0;

1406 
v
->
d©a
 = 
NULL
;

1407  
NGX_OK
;

1410 
v
->
Àn
 = 1;

1411 
v
->
d©a
 = (
u_ch¨
 *) "?";

1413  
NGX_OK
;

1414 
	}
}

1417 
ngx_öt_t


1418 
	$ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1419 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1421 
ngx_°r_t
 
∑th
;

1422 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1424 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1426 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1427 
v
->
Àn
 = 
˛cf
->
roŸ
.len;

1428 
v
->
vÆid
 = 1;

1429 
v
->
no_ˇchóbÀ
 = 0;

1430 
v
->
nŸ_found
 = 0;

1431 
v
->
d©a
 = 
˛cf
->
roŸ
.data;

1434 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 0,

1435 
˛cf
->
roŸ_vÆues
->
ñts
)

1436 =
NULL
)

1438  
NGX_ERROR
;

1441 i‡(
	`ngx_gë_fuŒ_«me
(
r
->
poﬁ
, (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
, &
∑th
)

1442 !
NGX_OK
)

1444  
NGX_ERROR
;

1447 
v
->
Àn
 = 
∑th
.len;

1448 
v
->
vÆid
 = 1;

1449 
v
->
no_ˇchóbÀ
 = 0;

1450 
v
->
nŸ_found
 = 0;

1451 
v
->
d©a
 = 
∑th
.data;

1454  
NGX_OK
;

1455 
	}
}

1458 
ngx_öt_t


1459 
	$ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1460 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1462 
u_ch¨
 *
ªÆ
;

1463 
size_t
 
Àn
;

1464 
ngx_°r_t
 
∑th
;

1465 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1466 #i‡(
NGX_HAVE_MAX_PATH
)

1467 
u_ch¨
 
buf„r
[
NGX_MAX_PATH
];

1470 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1472 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1473 
∑th
 = 
˛cf
->
roŸ
;

1476 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 1,

1477 
˛cf
->
roŸ_vÆues
->
ñts
)

1478 =
NULL
)

1480  
NGX_ERROR
;

1483 
∑th
.
d©a
[∑th.
Àn
 - 1] = '\0';

1485 i‡(
	`ngx_gë_fuŒ_«me
(
r
->
poﬁ
, (
ngx_°r_t
 *Ë&
ngx_cy˛e
->
¥efix
, &
∑th
)

1486 !
NGX_OK
)

1488  
NGX_ERROR
;

1492 #i‡(
NGX_HAVE_MAX_PATH
)

1493 
ªÆ
 = 
buf„r
;

1495 
ªÆ
 = 
NULL
;

1498 
ªÆ
 = 
	`ngx_ªÆ∑th
(
∑th
.
d©a
,Ñeal);

1500 i‡(
ªÆ
 =
NULL
) {

1501 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1502 
ngx_ªÆ∑th_n
 " \"%s\" faûed", 
∑th
.
d©a
);

1503  
NGX_ERROR
;

1506 
Àn
 = 
	`ngx_°æí
(
ªÆ
);

1508 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1509 i‡(
v
->
d©a
 =
NULL
) {

1510 #i‡!(
NGX_HAVE_MAX_PATH
)

1511 
	`ngx_‰ì
(
ªÆ
);

1513  
NGX_ERROR
;

1516 
v
->
Àn
 =Üen;

1517 
v
->
vÆid
 = 1;

1518 
v
->
no_ˇchóbÀ
 = 0;

1519 
v
->
nŸ_found
 = 0;

1521 
	`ngx_mem˝y
(
v
->
d©a
, 
ªÆ
, 
Àn
);

1523 #i‡!(
NGX_HAVE_MAX_PATH
)

1524 
	`ngx_‰ì
(
ªÆ
);

1527  
NGX_OK
;

1528 
	}
}

1531 
ngx_öt_t


1532 
	$ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

1533 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1535 
size_t
 
roŸ
;

1536 
ngx_°r_t
 
∑th
;

1538 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

1539  
NGX_ERROR
;

1544 
v
->
Àn
 = 
∑th
.len - 1;

1545 
v
->
vÆid
 = 1;

1546 
v
->
no_ˇchóbÀ
 = 0;

1547 
v
->
nŸ_found
 = 0;

1548 
v
->
d©a
 = 
∑th
.data;

1550  
NGX_OK
;

1551 
	}
}

1554 
ngx_öt_t


1555 
	$ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

1556 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1558 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1560 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1562 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1563 
v
->
vÆid
 = 1;

1564 
v
->
no_ˇchóbÀ
 = 0;

1565 
v
->
nŸ_found
 = 0;

1566 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1568  
NGX_OK
;

1569 
	}
}

1572 
ngx_öt_t


1573 
	$ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

1574 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1576 i‡(
r
->
maö
->
mëhod_«me
.
d©a
) {

1577 
v
->
Àn
 = 
r
->
maö
->
mëhod_«me
.len;

1578 
v
->
vÆid
 = 1;

1579 
v
->
no_ˇchóbÀ
 = 0;

1580 
v
->
nŸ_found
 = 0;

1581 
v
->
d©a
 = 
r
->
maö
->
mëhod_«me
.data;

1584 
v
->
nŸ_found
 = 1;

1587  
NGX_OK
;

1588 
	}
}

1591 
ngx_öt_t


1592 
	$ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

1593 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1595 
ngx_öt_t
 
rc
;

1597 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

1599 i‡(
rc
 =
NGX_DECLINED
) {

1600 
v
->
nŸ_found
 = 1;

1601  
NGX_OK
;

1604 i‡(
rc
 =
NGX_ERROR
) {

1605  
NGX_ERROR
;

1608 
v
->
Àn
 = 
r
->
hódîs_ö
.
u£r
.len;

1609 
v
->
vÆid
 = 1;

1610 
v
->
no_ˇchóbÀ
 = 0;

1611 
v
->
nŸ_found
 = 0;

1612 
v
->
d©a
 = 
r
->
hódîs_ö
.
u£r
.data;

1614  
NGX_OK
;

1615 
	}
}

1618 
ngx_öt_t


1619 
	$ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1620 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1622 
u_ch¨
 *
p
;

1624 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1625 i‡(
p
 =
NULL
) {

1626  
NGX_ERROR
;

1629 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
) -Ö;

1630 
v
->
vÆid
 = 1;

1631 
v
->
no_ˇchóbÀ
 = 0;

1632 
v
->
nŸ_found
 = 0;

1633 
v
->
d©a
 = 
p
;

1635  
NGX_OK
;

1636 
	}
}

1639 
ngx_öt_t


1640 
	$ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1641 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1643 
off_t
 
£¡
;

1644 
u_ch¨
 *
p
;

1646 
£¡
 = 
r
->
c⁄√˘i⁄
->£¡ -Ñ->
hódî_size
;

1648 i‡(
£¡
 < 0) {

1649 
£¡
 = 0;

1652 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1653 i‡(
p
 =
NULL
) {

1654  
NGX_ERROR
;

1657 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
£¡
) -Ö;

1658 
v
->
vÆid
 = 1;

1659 
v
->
no_ˇchóbÀ
 = 0;

1660 
v
->
nŸ_found
 = 0;

1661 
v
->
d©a
 = 
p
;

1663  
NGX_OK
;

1664 
	}
}

1667 
ngx_öt_t


1668 
	$ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

1669 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1671 
v
->
d©a
 = (
u_ch¨
 *Ë(
r
->
pùñöe
 ? "p" : ".");

1672 
v
->
Àn
 = 1;

1673 
v
->
vÆid
 = 1;

1674 
v
->
no_ˇchóbÀ
 = 0;

1675 
v
->
nŸ_found
 = 0;

1677  
NGX_OK
;

1678 
	}
}

1681 
ngx_öt_t


1682 
	$ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

1683 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1685 
ngx_uöt_t
 
°©us
;

1687 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

1688 i‡(
v
->
d©a
 =
NULL
) {

1689  
NGX_ERROR
;

1692 i‡(
r
->
îr_°©us
) {

1693 
°©us
 = 
r
->
îr_°©us
;

1695 } i‡(
r
->
hódîs_out
.
°©us
) {

1696 
°©us
 = 
r
->
hódîs_out
.status;

1698 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

1699 
°©us
 = 9;

1702 
°©us
 = 0;

1705 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%03ui", 
°©us
) - v->data;

1706 
v
->
vÆid
 = 1;

1707 
v
->
no_ˇchóbÀ
 = 0;

1708 
v
->
nŸ_found
 = 0;

1710  
NGX_OK
;

1711 
	}
}

1714 
ngx_öt_t


1715 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

1716 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1718 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1719 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.len;

1720 
v
->
vÆid
 = 1;

1721 
v
->
no_ˇchóbÀ
 = 0;

1722 
v
->
nŸ_found
 = 0;

1723 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.data;

1726 
v
->
nŸ_found
 = 1;

1729  
NGX_OK
;

1730 
	}
}

1733 
ngx_öt_t


1734 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1735 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1737 
u_ch¨
 *
p
;

1739 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

1740 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.len;

1741 
v
->
vÆid
 = 1;

1742 
v
->
no_ˇchóbÀ
 = 0;

1743 
v
->
nŸ_found
 = 0;

1744 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.data;

1746  
NGX_OK
;

1749 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0) {

1750 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1751 i‡(
p
 =
NULL
) {

1752  
NGX_ERROR
;

1755 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
) -Ö;

1756 
v
->
vÆid
 = 1;

1757 
v
->
no_ˇchóbÀ
 = 0;

1758 
v
->
nŸ_found
 = 0;

1759 
v
->
d©a
 = 
p
;

1761  
NGX_OK
;

1764 
v
->
nŸ_found
 = 1;

1766  
NGX_OK
;

1767 
	}
}

1770 
ngx_öt_t


1771 
	$ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1772 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1774 
ngx_°r_t
 
«me
;

1776 i‡(
r
->
hódîs_out
.
loˇti⁄
) {

1777 
v
->
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

1778 
v
->
vÆid
 = 1;

1779 
v
->
no_ˇchóbÀ
 = 0;

1780 
v
->
nŸ_found
 = 0;

1781 
v
->
d©a
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.data;

1783  
NGX_OK
;

1786 
	`ngx_°r_£t
(&
«me
, "sent_http_location");

1788  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, &
«me
,

1789 &
r
->
hódîs_out
.
hódîs
.
∑π
,

1791 
	}
}

1794 
ngx_öt_t


1795 
	$ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

1796 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1798 
u_ch¨
 *
p
;

1800 i‡(
r
->
hódîs_out
.
œ°_modifõd
) {

1801 
v
->
Àn
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.len;

1802 
v
->
vÆid
 = 1;

1803 
v
->
no_ˇchóbÀ
 = 0;

1804 
v
->
nŸ_found
 = 0;

1805 
v
->
d©a
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.data;

1807  
NGX_OK
;

1810 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 >= 0) {

1811 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("Mon, 28 Sep 1970 06:00:00 GMT") - 1);

1812 i‡(
p
 =
NULL
) {

1813  
NGX_ERROR
;

1816 
v
->
Àn
 = 
	`ngx_hâp_time
(
p
, 
r
->
hódîs_out
.
œ°_modifõd_time
) -Ö;

1817 
v
->
vÆid
 = 1;

1818 
v
->
no_ˇchóbÀ
 = 0;

1819 
v
->
nŸ_found
 = 0;

1820 
v
->
d©a
 = 
p
;

1822  
NGX_OK
;

1825 
v
->
nŸ_found
 = 1;

1827  
NGX_OK
;

1828 
	}
}

1831 
ngx_öt_t


1832 
	$ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1833 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1835 
size_t
 
Àn
;

1836 *
p
;

1838 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

1839 
Àn
 = ("upgrade") - 1;

1840 
p
 = "upgrade";

1842 } i‡(
r
->
kì∑live
) {

1843 
Àn
 = ("keep-alive") - 1;

1844 
p
 = "keep-alive";

1847 
Àn
 = ("close") - 1;

1848 
p
 = "close";

1851 
v
->
Àn
 =Üen;

1852 
v
->
vÆid
 = 1;

1853 
v
->
no_ˇchóbÀ
 = 0;

1854 
v
->
nŸ_found
 = 0;

1855 
v
->
d©a
 = (
u_ch¨
 *Ë
p
;

1857  
NGX_OK
;

1858 
	}
}

1861 
ngx_öt_t


1862 
	$ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

1863 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1865 
u_ch¨
 *
p
;

1866 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1868 i‡(
r
->
kì∑live
) {

1869 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1871 i‡(
˛cf
->
kì∑live_hódî
) {

1873 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("timeout="Ë- 1 + 
NGX_TIME_T_LEN
);

1874 i‡(
p
 =
NULL
) {

1875  
NGX_ERROR
;

1878 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "timeout=%T", 
˛cf
->
kì∑live_hódî
) -Ö;

1879 
v
->
vÆid
 = 1;

1880 
v
->
no_ˇchóbÀ
 = 0;

1881 
v
->
nŸ_found
 = 0;

1882 
v
->
d©a
 = 
p
;

1884  
NGX_OK
;

1888 
v
->
nŸ_found
 = 1;

1890  
NGX_OK
;

1891 
	}
}

1894 
ngx_öt_t


1895 
	$ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

1896 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1898 i‡(
r
->
chunked
) {

1899 
v
->
Àn
 = ("chunked") - 1;

1900 
v
->
vÆid
 = 1;

1901 
v
->
no_ˇchóbÀ
 = 0;

1902 
v
->
nŸ_found
 = 0;

1903 
v
->
d©a
 = (
u_ch¨
 *) "chunked";

1906 
v
->
nŸ_found
 = 1;

1909  
NGX_OK
;

1910 
	}
}

1913 
ngx_öt_t


1914 
	$ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

1915 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1917 i‡(
r
->
ªque°_com∂ëe
) {

1918 
v
->
Àn
 = 2;

1919 
v
->
vÆid
 = 1;

1920 
v
->
no_ˇchóbÀ
 = 0;

1921 
v
->
nŸ_found
 = 0;

1922 
v
->
d©a
 = (
u_ch¨
 *) "OK";

1924  
NGX_OK
;

1927 
v
->
Àn
 = 0;

1928 
v
->
vÆid
 = 1;

1929 
v
->
no_ˇchóbÀ
 = 0;

1930 
v
->
nŸ_found
 = 0;

1931 
v
->
d©a
 = (
u_ch¨
 *) "";

1933  
NGX_OK
;

1934 
	}
}

1937 
ngx_öt_t


1938 
	$ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

1939 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1941 
u_ch¨
 *
p
;

1942 
size_t
 
Àn
;

1943 
ngx_buf_t
 *
buf
;

1944 
ngx_chaö_t
 *
˛
;

1946 i‡(
r
->
ªque°_body
 =
NULL


1947 || 
r
->
ªque°_body
->
bufs
 =
NULL


1948 || 
r
->
ªque°_body
->
ãmp_fûe
)

1950 
v
->
nŸ_found
 = 1;

1952  
NGX_OK
;

1955 
˛
 = 
r
->
ªque°_body
->
bufs
;

1956 
buf
 = 
˛
->buf;

1958 i‡(
˛
->
√xt
 =
NULL
) {

1959 
v
->
Àn
 = 
buf
->
œ°
 - buf->
pos
;

1960 
v
->
vÆid
 = 1;

1961 
v
->
no_ˇchóbÀ
 = 0;

1962 
v
->
nŸ_found
 = 0;

1963 
v
->
d©a
 = 
buf
->
pos
;

1965  
NGX_OK
;

1968 
Àn
 = 
buf
->
œ°
 - buf->
pos
;

1969 
˛
 = cl->
√xt
;

1971  ; 
˛
; c»˛->
√xt
) {

1972 
buf
 = 
˛
->buf;

1973 
Àn
 +
buf
->
œ°
 - buf->
pos
;

1976 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1977 i‡(
p
 =
NULL
) {

1978  
NGX_ERROR
;

1981 
v
->
d©a
 = 
p
;

1982 
˛
 = 
r
->
ªque°_body
->
bufs
;

1984  ; 
˛
; c»˛->
√xt
) {

1985 
buf
 = 
˛
->buf;

1986 
p
 = 
	`ngx_˝ymem
’, 
buf
->
pos
, buf->
œ°
 - buf->pos);

1989 
v
->
Àn
 =Üen;

1990 
v
->
vÆid
 = 1;

1991 
v
->
no_ˇchóbÀ
 = 0;

1992 
v
->
nŸ_found
 = 0;

1994  
NGX_OK
;

1995 
	}
}

1998 
ngx_öt_t


1999 
	$ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

2000 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2002 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

2003 
v
->
nŸ_found
 = 1;

2005  
NGX_OK
;

2008 
v
->
Àn
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.len;

2009 
v
->
vÆid
 = 1;

2010 
v
->
no_ˇchóbÀ
 = 0;

2011 
v
->
nŸ_found
 = 0;

2012 
v
->
d©a
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.data;

2014  
NGX_OK
;

2015 
	}
}

2018 
ngx_öt_t


2019 
	$ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

2020 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2022 
u_ch¨
 *
p
;

2024 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

2025 i‡(
p
 =
NULL
) {

2026  
NGX_ERROR
;

2029 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
ªque°_Àngth
) -Ö;

2030 
v
->
vÆid
 = 1;

2031 
v
->
no_ˇchóbÀ
 = 0;

2032 
v
->
nŸ_found
 = 0;

2033 
v
->
d©a
 = 
p
;

2035  
NGX_OK
;

2036 
	}
}

2039 
ngx_öt_t


2040 
	$ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

2041 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2043 
u_ch¨
 *
p
;

2044 
ngx_time_t
 *
ç
;

2045 
ngx_m£c_öt_t
 
ms
;

2047 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

2048 i‡(
p
 =
NULL
) {

2049  
NGX_ERROR
;

2052 
ç
 = 
	`ngx_timeofday
();

2054 
ms
 = (
ngx_m£c_öt_t
)

2055 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

2056 
ms
 = 
	`ngx_max
(ms, 0);

2058 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", (
time_t
Ë
ms
 / 1000, ms % 1000) -Ö;

2059 
v
->
vÆid
 = 1;

2060 
v
->
no_ˇchóbÀ
 = 0;

2061 
v
->
nŸ_found
 = 0;

2062 
v
->
d©a
 = 
p
;

2064  
NGX_OK
;

2065 
	}
}

2068 
ngx_öt_t


2069 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

2070 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2072 
u_ch¨
 *
p
;

2074 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

2075 i‡(
p
 =
NULL
) {

2076  
NGX_ERROR
;

2079 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
r
->
c⁄√˘i⁄
->
numbî
) -Ö;

2080 
v
->
vÆid
 = 1;

2081 
v
->
no_ˇchóbÀ
 = 0;

2082 
v
->
nŸ_found
 = 0;

2083 
v
->
d©a
 = 
p
;

2085  
NGX_OK
;

2086 
	}
}

2089 
ngx_öt_t


2090 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

2091 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2093 
u_ch¨
 *
p
;

2095 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

2096 i‡(
p
 =
NULL
) {

2097  
NGX_ERROR
;

2100 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%ui", 
r
->
c⁄√˘i⁄
->
ªque°s
) -Ö;

2101 
v
->
vÆid
 = 1;

2102 
v
->
no_ˇchóbÀ
 = 0;

2103 
v
->
nŸ_found
 = 0;

2104 
v
->
d©a
 = 
p
;

2106  
NGX_OK
;

2107 
	}
}

2110 
ngx_öt_t


2111 
	$ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

2112 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2114 
v
->
Àn
 = (
NGINX_VERSION
) - 1;

2115 
v
->
vÆid
 = 1;

2116 
v
->
no_ˇchóbÀ
 = 0;

2117 
v
->
nŸ_found
 = 0;

2118 
v
->
d©a
 = (
u_ch¨
 *Ë
NGINX_VERSION
;

2120  
NGX_OK
;

2121 
	}
}

2124 
ngx_öt_t


2125 
	$ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

2126 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2128 
v
->
Àn
 = 
ngx_cy˛e
->
ho°«me
.len;

2129 
v
->
vÆid
 = 1;

2130 
v
->
no_ˇchóbÀ
 = 0;

2131 
v
->
nŸ_found
 = 0;

2132 
v
->
d©a
 = 
ngx_cy˛e
->
ho°«me
.data;

2134  
NGX_OK
;

2135 
	}
}

2138 
ngx_öt_t


2139 
	$ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

2140 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2142 
u_ch¨
 *
p
;

2144 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

2145 i‡(
p
 =
NULL
) {

2146  
NGX_ERROR
;

2149 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%P", 
ngx_pid
) -Ö;

2150 
v
->
vÆid
 = 1;

2151 
v
->
no_ˇchóbÀ
 = 0;

2152 
v
->
nŸ_found
 = 0;

2153 
v
->
d©a
 = 
p
;

2155  
NGX_OK
;

2156 
	}
}

2159 
ngx_öt_t


2160 
	$ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

2161 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2163 
u_ch¨
 *
p
;

2164 
ngx_time_t
 *
ç
;

2166 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

2167 i‡(
p
 =
NULL
) {

2168  
NGX_ERROR
;

2171 
ç
 = 
	`ngx_timeofday
();

2173 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
) -Ö;

2174 
v
->
vÆid
 = 1;

2175 
v
->
no_ˇchóbÀ
 = 0;

2176 
v
->
nŸ_found
 = 0;

2177 
v
->
d©a
 = 
p
;

2179  
NGX_OK
;

2180 
	}
}

2183 
ngx_öt_t


2184 
	$ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

2185 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2187 
u_ch¨
 *
p
;

2189 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2190 i‡(
p
 =
NULL
) {

2191  
NGX_ERROR
;

2194 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

2195 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2197 
v
->
Àn
 = 
ngx_ˇched_hâp_log_iso8601
.len;

2198 
v
->
vÆid
 = 1;

2199 
v
->
no_ˇchóbÀ
 = 0;

2200 
v
->
nŸ_found
 = 0;

2201 
v
->
d©a
 = 
p
;

2203  
NGX_OK
;

2204 
	}
}

2207 
ngx_öt_t


2208 
	$ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

2209 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2211 
u_ch¨
 *
p
;

2213 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_time
.
Àn
);

2214 i‡(
p
 =
NULL
) {

2215  
NGX_ERROR
;

2218 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_time
.
d©a
,Çgx_ˇched_hâp_log_time.
Àn
);

2220 
v
->
Àn
 = 
ngx_ˇched_hâp_log_time
.len;

2221 
v
->
vÆid
 = 1;

2222 
v
->
no_ˇchóbÀ
 = 0;

2223 
v
->
nŸ_found
 = 0;

2224 
v
->
d©a
 = 
p
;

2226  
NGX_OK
;

2227 
	}
}

2231 
	$ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
, 
ngx_°r_t
 *
m©ch
)

2233 *
vÆue
;

2234 
u_ch¨
 *
low
;

2235 
size_t
 
Àn
;

2236 
ngx_uöt_t
 
key
;

2238 
Àn
 = 
m©ch
->len;

2240 i‡(
Àn
) {

2241 
low
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2242 i‡(
low
 =
NULL
) {

2243  
NULL
;

2247 
low
 = 
NULL
;

2250 
key
 = 
	`ngx_hash_°æow
(
low
, 
m©ch
->
d©a
, 
Àn
);

2252 
vÆue
 = 
	`ngx_hash_föd_comböed
(&
m≠
->
hash
, 
key
, 
low
, 
Àn
);

2253 i‡(
vÆue
) {

2254  
vÆue
;

2257 #i‡(
NGX_PCRE
)

2259 i‡(
Àn
 && 
m≠
->
ƒegex
) {

2260 
ngx_öt_t
 
n
;

2261 
ngx_uöt_t
 
i
;

2262 
ngx_hâp_m≠_ªgex_t
 *
ªg
;

2264 
ªg
 = 
m≠
->
ªgex
;

2266 
i
 = 0; i < 
m≠
->
ƒegex
; i++) {

2268 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
ªg
[
i
].
ªgex
, 
m©ch
);

2270 i‡(
n
 =
NGX_OK
) {

2271  
ªg
[
i
].
vÆue
;

2274 i‡(
n
 =
NGX_DECLINED
) {

2280  
NULL
;

2286  
NULL
;

2287 
	}
}

2290 #i‡(
NGX_PCRE
)

2292 
ngx_öt_t


2293 
	$ngx_hâp_v¨übÀ_nŸ_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

2294 
uöçå_t
 
d©a
)

2296 
v
->
nŸ_found
 = 1;

2297  
NGX_OK
;

2298 
	}
}

2301 
ngx_hâp_ªgex_t
 *

2302 
	$ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_ªgex_compûe_t
 *
rc
)

2304 
u_ch¨
 *
p
;

2305 
size_t
 
size
;

2306 
ngx_°r_t
 
«me
;

2307 
ngx_uöt_t
 
i
, 
n
;

2308 
ngx_hâp_v¨übÀ_t
 *
v
;

2309 
ngx_hâp_ªgex_t
 *
ª
;

2310 
ngx_hâp_ªgex_v¨übÀ_t
 *
rv
;

2311 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2313 
rc
->
poﬁ
 = 
cf
->pool;

2315 i‡(
	`ngx_ªgex_compûe
(
rc
Ë!
NGX_OK
) {

2316 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
->
îr
);

2317  
NULL
;

2320 
ª
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªgex_t
));

2321 i‡(
ª
 =
NULL
) {

2322  
NULL
;

2325 
ª
->
ªgex
 = 
rc
->regex;

2326 
ª
->
nˇ±uªs
 = 
rc
->
ˇ±uªs
;

2327 
ª
->
«me
 = 
rc
->
∑âîn
;

2329 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2330 
cmcf
->
nˇ±uªs
 = 
	`ngx_max
(cmcf->nˇ±uªs, 
ª
->ncaptures);

2332 
n
 = (
ngx_uöt_t
Ë
rc
->
«med_ˇ±uªs
;

2334 i‡(
n
 == 0) {

2335  
ª
;

2338 
rv
 = 
	`ngx_∑Œoc
(
rc
->
poﬁ
, 
n
 * (
ngx_hâp_ªgex_v¨übÀ_t
));

2339 i‡(
rv
 =
NULL
) {

2340  
NULL
;

2343 
ª
->
v¨übÀs
 = 
rv
;

2344 
ª
->
nv¨übÀs
 = 
n
;

2346 
size
 = 
rc
->
«me_size
;

2347 
p
 = 
rc
->
«mes
;

2349 
i
 = 0; i < 
n
; i++) {

2350 
rv
[
i
].
ˇ±uª
 = 2 * ((
p
[0] << 8) +Ö[1]);

2352 
«me
.
d©a
 = &
p
[2];

2353 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

2355 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

2356 i‡(
v
 =
NULL
) {

2357  
NULL
;

2360 
rv
[
i
].
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

2361 i‡(
rv
[
i
].
ödex
 =
NGX_ERROR
) {

2362  
NULL
;

2365 
v
->
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_nŸ_found
;

2367 
p
 +
size
;

2370  
ª
;

2371 
	}
}

2374 
ngx_öt_t


2375 
	$ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
, 
ngx_°r_t
 *
s
)

2377 
ngx_öt_t
 
rc
, 
ödex
;

2378 
ngx_uöt_t
 
i
, 
n
, 
Àn
;

2379 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2380 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2382 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2384 i‡(
ª
->
nˇ±uªs
) {

2385 
Àn
 = 
cmcf
->
nˇ±uªs
;

2387 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2388 
r
->
ˇ±uªs
 = 
	`ngx_∑Œoc
‘->
poﬁ
, 
Àn
 * ());

2389 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2390  
NGX_ERROR
;

2395 
Àn
 = 0;

2398 
rc
 = 
	`ngx_ªgex_exec
(
ª
->
ªgex
, 
s
, 
r
->
ˇ±uªs
, 
Àn
);

2400 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

2401  
NGX_DECLINED
;

2404 i‡(
rc
 < 0) {

2405 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2406 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

2407 
rc
, 
s
, &
ª
->
«me
);

2408  
NGX_ERROR
;

2411 
i
 = 0; i < 
ª
->
nv¨übÀs
; i++) {

2413 
n
 = 
ª
->
v¨übÀs
[
i
].
ˇ±uª
;

2414 
ödex
 = 
ª
->
v¨übÀs
[
i
].index;

2415 
vv
 = &
r
->
v¨übÀs
[
ödex
];

2417 
vv
->
Àn
 = 
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

2418 
vv
->
vÆid
 = 1;

2419 
vv
->
no_ˇchóbÀ
 = 0;

2420 
vv
->
nŸ_found
 = 0;

2421 
vv
->
d©a
 = &
s
->d©a[
r
->
ˇ±uªs
[
n
]];

2423 #i‡(
NGX_DEBUG
)

2425 
ngx_hâp_v¨übÀ_t
 *
v
;

2427 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2429 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2431 &
v
[
ödex
].
«me
, 
vv
->
Àn
, vv->
d©a
);

2436 
r
->
nˇ±uªs
 = 
rc
 * 2;

2437 
r
->
ˇ±uªs_d©a
 = 
s
->
d©a
;

2439  
NGX_OK
;

2440 
	}
}

2445 
ngx_öt_t


2446 
	$ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
)

2448 
ngx_öt_t
 
rc
;

2449 
ngx_hâp_v¨übÀ_t
 *
cv
, *
v
;

2450 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2452 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2454 
cmcf
->
v¨übÀs_keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
,

2455 (
ngx_hash_keys_¨øys_t
));

2456 i‡(
cmcf
->
v¨übÀs_keys
 =
NULL
) {

2457  
NGX_ERROR
;

2460 
cmcf
->
v¨übÀs_keys
->
poﬁ
 = 
cf
->pool;

2461 
cmcf
->
v¨übÀs_keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

2463 i‡(
	`ngx_hash_keys_¨øy_öô
(
cmcf
->
v¨übÀs_keys
, 
NGX_HASH_SMALL
)

2464 !
NGX_OK
)

2466  
NGX_ERROR
;

2469 
cv
 = 
ngx_hâp_c‹e_v¨übÀs
; cv->
«me
.
Àn
; cv++) {

2470 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

2471 i‡(
v
 =
NULL
) {

2472  
NGX_ERROR
;

2475 *
v
 = *
cv
;

2477 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v,

2478 
NGX_HASH_READONLY_KEY
);

2480 i‡(
rc
 =
NGX_OK
) {

2484 i‡(
rc
 =
NGX_BUSY
) {

2485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2486 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", &
v
->
«me
);

2489  
NGX_ERROR
;

2492  
NGX_OK
;

2493 
	}
}

2496 
ngx_öt_t


2497 
	$ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
)

2499 
ngx_uöt_t
 
i
, 
n
;

2500 
ngx_hash_key_t
 *
key
;

2501 
ngx_hash_öô_t
 
hash
;

2502 
ngx_hâp_v¨übÀ_t
 *
v
, *
av
;

2503 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2507 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2509 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2510 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

2512 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

2514 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2516 
av
 = 
key
[
n
].
vÆue
;

2518 i‡(
v
[
i
].
«me
.
Àn
 =
key
[
n
].key.len

2519 && 
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, 
key
[
n
].key.d©a, v[i].«me.
Àn
)

2522 
v
[
i
].
gë_h™dÀr
 = 
av
->get_handler;

2523 
v
[
i
].
d©a
 = 
av
->data;

2525 
av
->
Êags
 |
NGX_HTTP_VAR_INDEXED
;

2526 
v
[
i
].
Êags
 = 
av
->flags;

2528 
av
->
ödex
 = 
i
;

2530 i‡(
av
->
gë_h™dÀr
 =
NULL
) {

2534 
√xt
;

2538 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "http_", 5) == 0) {

2539 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_ö
;

2540 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2545 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "sent_http_", 10) == 0) {

2546 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_out
;

2547 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2552 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "upstream_http_", 14) == 0) {

2553 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_up°ªam_hódî_v¨übÀ
;

2554 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2555 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2560 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "cookie_", 7) == 0) {

2561 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_cookõ
;

2562 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2567 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "upstream_cookie_", 16) == 0) {

2568 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_up°ªam_cookõ_v¨übÀ
;

2569 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2570 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2575 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "arg_", 4) == 0) {

2576 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_¨gumít
;

2577 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2578 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2583 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2584 "unknow¿\"%V\" v¨übÀ", &
v
[
i
].
«me
);

2586  
NGX_ERROR
;

2588 
√xt
:

2593 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2594 
av
 = 
key
[
n
].
vÆue
;

2596 i‡(
av
->
Êags
 & 
NGX_HTTP_VAR_NOHASH
) {

2597 
key
[
n
].key.
d©a
 = 
NULL
;

2602 
hash
.hash = &
cmcf
->
v¨übÀs_hash
;

2603 
hash
.
key
 = 
ngx_hash_key
;

2604 
hash
.
max_size
 = 
cmcf
->
v¨übÀs_hash_max_size
;

2605 
hash
.
buckë_size
 = 
cmcf
->
v¨übÀs_hash_buckë_size
;

2606 
hash
.
«me
 = "variables_hash";

2607 
hash
.
poﬁ
 = 
cf
->pool;

2608 
hash
.
ãmp_poﬁ
 = 
NULL
;

2610 i‡(
	`ngx_hash_öô
(&
hash
, 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
,

2611 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
)

2612 !
NGX_OK
)

2614  
NGX_ERROR
;

2617 
cmcf
->
v¨übÀs_keys
 = 
NULL
;

2619  
NGX_OK
;

2620 
	}
}

	@src/http/ngx_http_variables.h

8 #i‚de‡
_NGX_HTTP_VARIABLES_H_INCLUDED_


9 
	#_NGX_HTTP_VARIABLES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
ngx_v¨übÀ_vÆue_t
 
	tngx_hâp_v¨übÀ_vÆue_t
;

19 
	#ngx_hâp_v¨übÀ
(
v
Ë{ (vË- 1, 1, 0, 0, 0, (
u_ch¨
 *Ëv }

	)

21 
ngx_hâp_v¨übÀ_s
 
	tngx_hâp_v¨übÀ_t
;

23 (*
	tngx_hâp_£t_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

24 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

25 
	$ngx_öt_t
 (*
	tngx_hâp_gë_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

26 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

29 
	#NGX_HTTP_VAR_CHANGEABLE
 1

	)

30 
	#NGX_HTTP_VAR_NOCACHEABLE
 2

	)

31 
	#NGX_HTTP_VAR_INDEXED
 4

	)

32 
	#NGX_HTTP_VAR_NOHASH
 8

	)

35 
	sngx_hâp_v¨übÀ_s
 {

36 
ngx_°r_t
 
«me
;

37 
ngx_hâp_£t_v¨übÀ_±
 
£t_h™dÀr
;

38 
ngx_hâp_gë_v¨übÀ_±
 
gë_h™dÀr
;

39 
uöçå_t
 
d©a
;

40 
ngx_uöt_t
 
Êags
;

41 
ngx_uöt_t
 
ödex
;

45 
ngx_hâp_v¨übÀ_t
 *
	`ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

46 
ngx_uöt_t
 
Êags
);

47 
ngx_öt_t
 
	`ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_uöt_t
 
ödex
);

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_uöt_t
 
ödex
);

53 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

56 
ngx_öt_t
 
	`ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

57 
ngx_°r_t
 *
v¨
, 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
);

60 #i‡(
NGX_PCRE
)

63 
ngx_uöt_t
 
ˇ±uª
;

64 
ngx_öt_t
 
ödex
;

65 } 
	tngx_hâp_ªgex_v¨übÀ_t
;

69 
ngx_ªgex_t
 *
ªgex
;

70 
ngx_uöt_t
 
nˇ±uªs
;

71 
ngx_hâp_ªgex_v¨übÀ_t
 *
v¨übÀs
;

72 
ngx_uöt_t
 
nv¨übÀs
;

73 
ngx_°r_t
 
«me
;

74 } 
	tngx_hâp_ªgex_t
;

78 
ngx_hâp_ªgex_t
 *
ªgex
;

79 *
vÆue
;

80 } 
	tngx_hâp_m≠_ªgex_t
;

83 
ngx_hâp_ªgex_t
 *
	`ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
,

84 
ngx_ªgex_compûe_t
 *
rc
);

85 
ngx_öt_t
 
	`ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
,

86 
ngx_°r_t
 *
s
);

92 
ngx_hash_comböed_t
 
hash
;

93 #i‡(
NGX_PCRE
)

94 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

95 
ngx_uöt_t
 
ƒegex
;

97 } 
	tngx_hâp_m≠_t
;

100 *
	`ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
,

101 
ngx_°r_t
 *
m©ch
);

104 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
);

105 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
);

108 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

109 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_åue_vÆue
;

	@src/http/ngx_http_write_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_hâp_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ_˘x
 = {

17 
NULL
,

18 
ngx_hâp_wrôe_fûãr_öô
,

20 
NULL
,

21 
NULL
,

23 
NULL
,

24 
NULL
,

26 
NULL
,

27 
NULL
,

31 
ngx_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ
 = {

32 
NGX_MODULE_V1
,

33 &
ngx_hâp_wrôe_fûãr_moduÀ_˘x
,

34 
NULL
,

35 
NGX_HTTP_MODULE
,

36 
NULL
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NGX_MODULE_V1_PADDING


47 
ngx_öt_t


48 
	$ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

50 
off_t
 
size
, 
£¡
, 
n£¡
, 
limô
;

51 
ngx_uöt_t
 
œ°
, 
Êush
, 
sync
;

52 
ngx_m£c_t
 
dñay
;

53 
ngx_chaö_t
 *
˛
, *
 
, **
Œ
, *
chaö
;

54 
ngx_c⁄√˘i⁄_t
 *
c
;

55 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

57 
c
 = 
r
->
c⁄√˘i⁄
;

59 i‡(
c
->
îr‹
) {

60  
NGX_ERROR
;

63 
size
 = 0;

64 
Êush
 = 0;

65 
sync
 = 0;

66 
œ°
 = 0;

67 
Œ
 = &
r
->
out
;

71 
˛
 = 
r
->
out
; cl; c»˛->
√xt
) {

72 
Œ
 = &
˛
->
√xt
;

74 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

77 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

78 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

79 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

80 
˛
->
buf
->
fûe_pos
,

81 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

84 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

88 
˛
->
buf
->
ãmp‹¨y
,

89 
˛
->
buf
->
ªcy˛ed
,

90 
˛
->
buf
->
ö_fûe
,

91 
˛
->
buf
->
°¨t
,

92 
˛
->
buf
->
pos
,

93 
˛
->
buf
->
œ°
,

94 
˛
->
buf
->
fûe
,

95 
˛
->
buf
->
fûe_pos
,

96 
˛
->
buf
->
fûe_œ°
);

98 
	`ngx_debug_poöt
();

99  
NGX_ERROR
;

103 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

105 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

106 
Êush
 = 1;

109 i‡(
˛
->
buf
->
sync
) {

110 
sync
 = 1;

113 i‡(
˛
->
buf
->
œ°_buf
) {

114 
œ°
 = 1;

120 
 
 = 
ö
;Ün;Ü¿ ->
√xt
) {

121 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

122 i‡(
˛
 =
NULL
) {

123  
NGX_ERROR
;

126 
˛
->
buf
 = 
 
->buf;

127 *
Œ
 = 
˛
;

128 
Œ
 = &
˛
->
√xt
;

130 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

133 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

134 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

135 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

136 
˛
->
buf
->
fûe_pos
,

137 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

140 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

141 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

144 
˛
->
buf
->
ãmp‹¨y
,

145 
˛
->
buf
->
ªcy˛ed
,

146 
˛
->
buf
->
ö_fûe
,

147 
˛
->
buf
->
°¨t
,

148 
˛
->
buf
->
pos
,

149 
˛
->
buf
->
œ°
,

150 
˛
->
buf
->
fûe
,

151 
˛
->
buf
->
fûe_pos
,

152 
˛
->
buf
->
fûe_œ°
);

154 
	`ngx_debug_poöt
();

155  
NGX_ERROR
;

159 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

161 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

162 
Êush
 = 1;

165 i‡(
˛
->
buf
->
sync
) {

166 
sync
 = 1;

169 i‡(
˛
->
buf
->
œ°_buf
) {

170 
œ°
 = 1;

174 *
Œ
 = 
NULL
;

176 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

177 "hâ∞wrôêfûãr:Ü:%d f:%d s:%O", 
œ°
, 
Êush
, 
size
);

179 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

187 i‡(!
œ°
 && !
Êush
 && 
ö
 && 
size
 < (
off_t
Ë
˛cf
->
po°p⁄e_ouçut
) {

188  
NGX_OK
;

191 i‡(
c
->
wrôe
->
dñayed
) {

192 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

193  
NGX_AGAIN
;

196 i‡(
size
 == 0

197 && !(
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
)

198 && !(
œ°
 && 
c
->
√ed_œ°_buf
))

200 i‡(
œ°
 || 
Êush
 || 
sync
) {

201 
˛
 = 
r
->
out
; cl; ) {

202 
 
 = 
˛
;

203 
˛
 = cl->
√xt
;

204 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

207 
r
->
out
 = 
NULL
;

208 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

210  
NGX_OK
;

213 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

216 
	`ngx_debug_poöt
();

218  
NGX_ERROR
;

221 i‡(
r
->
limô_øã
) {

222 i‡(
r
->
limô_øã_a·î
 == 0) {

223 
r
->
limô_øã_a·î
 = 
˛cf
->limit_rate_after;

226 
limô
 = (
off_t
Ë
r
->
limô_øã
 * (
	`ngx_time
(Ë-Ñ->
°¨t_£c
 + 1)

227 - (
c
->
£¡
 - 
r
->
limô_øã_a·î
);

229 i‡(
limô
 <= 0) {

230 
c
->
wrôe
->
dñayed
 = 1;

231 
dñay
 = (
ngx_m£c_t
Ë(- 
limô
 * 1000 / 
r
->
limô_øã
 + 1);

232 
	`ngx_add_timî
(
c
->
wrôe
, 
dñay
);

234 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

236  
NGX_AGAIN
;

239 i‡(
˛cf
->
£ndfûe_max_chunk


240 && (
off_t
Ë
˛cf
->
£ndfûe_max_chunk
 < 
limô
)

242 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

246 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

249 
£¡
 = 
c
->sent;

251 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

252 "hâ∞wrôêfûã∏limô %O", 
limô
);

254 
chaö
 = 
c
->
	`£nd_chaö
(c, 
r
->
out
, 
limô
);

256 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

257 "hâ∞wrôêfûã∏%p", 
chaö
);

259 i‡(
chaö
 =
NGX_CHAIN_ERROR
) {

260 
c
->
îr‹
 = 1;

261  
NGX_ERROR
;

264 i‡(
r
->
limô_øã
) {

266 
n£¡
 = 
c
->
£¡
;

268 i‡(
r
->
limô_øã_a·î
) {

270 
£¡
 -
r
->
limô_øã_a·î
;

271 i‡(
£¡
 < 0) {

272 
£¡
 = 0;

275 
n£¡
 -
r
->
limô_øã_a·î
;

276 i‡(
n£¡
 < 0) {

277 
n£¡
 = 0;

281 
dñay
 = (
ngx_m£c_t
Ë((
n£¡
 - 
£¡
Ë* 1000 / 
r
->
limô_øã
);

283 i‡(
dñay
 > 0) {

284 
limô
 = 0;

285 
c
->
wrôe
->
dñayed
 = 1;

286 
	`ngx_add_timî
(
c
->
wrôe
, 
dñay
);

290 i‡(
limô


291 && 
c
->
wrôe
->
ªady


292 && 
c
->
£¡
 - síà>
limô
 - (
off_t
Ë(2 * 
ngx_∑gesize
))

294 
c
->
wrôe
->
dñayed
 = 1;

295 
	`ngx_add_timî
(
c
->
wrôe
, 1);

298 
˛
 = 
r
->
out
; c»&& c»!
chaö
; ) {

299 
 
 = 
˛
;

300 
˛
 = cl->
√xt
;

301 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

304 
r
->
out
 = 
chaö
;

306 i‡(
chaö
) {

307 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

308  
NGX_AGAIN
;

311 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

313 i‡((
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
Ë&& 
r
->
po°p⁄ed
 =
NULL
) {

314  
NGX_AGAIN
;

317  
NGX_OK
;

318 
	}
}

321 
ngx_öt_t


322 
	$ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

324 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_wrôe_fûãr
;

326  
NGX_OK
;

327 
	}
}

	@src/mail/ngx_mail.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_öt_t
 
ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

16 
ngx_maû_li°í_t
 *
li°í
);

17 *
ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
);

18 
ngx_öt_t
 
ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

19 
ngx_maû_c⁄f_addr_t
 *
addr
);

20 #i‡(
NGX_HAVE_INET6
)

21 
ngx_öt_t
 
ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

22 
ngx_maû_c⁄f_addr_t
 *
addr
);

24 
ngx_öt_t
 
ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

27 
ngx_uöt_t
 
	gngx_maû_max_moduÀ
;

30 
ngx_comm™d_t
 
	gngx_maû_comm™ds
[] = {

32 { 
ngx_°rög
("mail"),

33 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

34 
ngx_maû_block
,

37 
NULL
 },

39 { 
ngx_°rög
("imap"),

40 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

41 
ngx_maû_block
,

44 
NULL
 },

46 
ngx_nuŒ_comm™d


50 
ngx_c‹e_moduÀ_t
 
	gngx_maû_moduÀ_˘x
 = {

51 
ngx_°rög
("mail"),

52 
NULL
,

53 
NULL


57 
ngx_moduÀ_t
 
	gngx_maû_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_maû_moduÀ_˘x
,

60 
ngx_maû_comm™ds
,

61 
NGX_CORE_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


74 
	$ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

76 *
rv
;

77 
ngx_uöt_t
 
i
, 
m
, 
mi
, 
s
;

78 
ngx_c⁄f_t
 
pcf
;

79 
ngx_¨øy_t
 
p‹ts
;

80 
ngx_maû_li°í_t
 *
li°í
;

81 
ngx_maû_moduÀ_t
 *
moduÀ
;

82 
ngx_maû_c⁄f_˘x_t
 *
˘x
;

83 
ngx_maû_c‹e_§v_c⁄f_t
 **
cscÂ
;

84 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

86 i‡(
cmd
->
«me
.
d©a
[0] == 'i') {

87 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

94 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

95 i‡(
˘x
 =
NULL
) {

96  
NGX_CONF_ERROR
;

99 *(
ngx_maû_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

103 
ngx_maû_max_moduÀ
 = 0;

104 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

105 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

109 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_maû_max_moduÀ
++;

115 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

116 (*Ë* 
ngx_maû_max_moduÀ
);

117 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

118  
NGX_CONF_ERROR
;

127 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

128 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

129  
NGX_CONF_ERROR
;

137 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

138 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

142 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

143 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

145 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

146 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

147 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

148  
NGX_CONF_ERROR
;

152 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

153 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

154 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

155  
NGX_CONF_ERROR
;

163 
pcf
 = *
cf
;

164 
cf
->
˘x
 = ctx;

166 
cf
->
moduÀ_ty≥
 = 
NGX_MAIL_MODULE
;

167 
cf
->
cmd_ty≥
 = 
NGX_MAIL_MAIN_CONF
;

168 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

170 i‡(
rv
 !
NGX_CONF_OK
) {

171 *
cf
 = 
pcf
;

172  
rv
;

178 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

179 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

181 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

182 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

186 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

187 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

191 
cf
->
˘x
 = ctx;

193 i‡(
moduÀ
->
öô_maö_c⁄f
) {

194 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

195 i‡(
rv
 !
NGX_CONF_OK
) {

196 *
cf
 = 
pcf
;

197  
rv
;

201 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

205 
cf
->
˘x
 = 
cscÂ
[
s
]->ctx;

207 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

208 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
,

209 
˘x
->
§v_c⁄f
[
mi
],

210 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
mi
]);

211 i‡(
rv
 !
NGX_CONF_OK
) {

212 *
cf
 = 
pcf
;

213  
rv
;

219 *
cf
 = 
pcf
;

222 i‡(
	`ngx_¨øy_öô
(&
p‹ts
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_maû_c⁄f_p‹t_t
))

223 !
NGX_OK
)

225  
NGX_CONF_ERROR
;

228 
li°í
 = 
cmcf
->li°í.
ñts
;

230 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

231 i‡(
	`ngx_maû_add_p‹ts
(
cf
, &
p‹ts
, &
li°í
[
i
]Ë!
NGX_OK
) {

232  
NGX_CONF_ERROR
;

236  
	`ngx_maû_›timize_£rvîs
(
cf
, &
p‹ts
);

237 
	}
}

240 
ngx_öt_t


241 
	$ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

242 
ngx_maû_li°í_t
 *
li°í
)

244 
ö_p‹t_t
 
p
;

245 
ngx_uöt_t
 
i
;

246 
sockaddr
 *
ß
;

247 
sockaddr_ö
 *
sö
;

248 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

249 
ngx_maû_c⁄f_addr_t
 *
addr
;

250 #i‡(
NGX_HAVE_INET6
)

251 
sockaddr_ö6
 *
sö6
;

254 
ß
 = (
sockaddr
 *Ë&
li°í
->sockaddr;

256 
ß
->
ß_Ámûy
) {

258 #i‡(
NGX_HAVE_INET6
)

259 
AF_INET6
:

260 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

261 
p
 = 
sö6
->
sö6_p‹t
;

265 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

266 
AF_UNIX
:

267 
p
 = 0;

272 
sö
 = (
sockaddr_ö
 *Ë
ß
;

273 
p
 = 
sö
->
sö_p‹t
;

277 
p‹t
 = 
p‹ts
->
ñts
;

278 
i
 = 0; i < 
p‹ts
->
√…s
; i++) {

279 i‡(
p
 =
p‹t
[
i
].p‹à&& 
ß
->
ß_Ámûy
 =p‹t[i].
Ámûy
) {

283 
p‹t
 = &p‹t[
i
];

284 
found
;

290 
p‹t
 = 
	`ngx_¨øy_push
(
p‹ts
);

291 i‡(
p‹t
 =
NULL
) {

292  
NGX_ERROR
;

295 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

296 
p‹t
->p‹à
p
;

298 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 2,

299 (
ngx_maû_c⁄f_addr_t
))

300 !
NGX_OK
)

302  
NGX_ERROR
;

305 
found
:

307 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

308 i‡(
addr
 =
NULL
) {

309  
NGX_ERROR
;

312 
addr
->
sockaddr
 = (sockadd∏*Ë&
li°í
->sockaddr;

313 
addr
->
sockÀn
 = 
li°í
->socklen;

314 
addr
->
˘x
 = 
li°í
->ctx;

315 
addr
->
böd
 = 
li°í
->bind;

316 
addr
->
wûdˇrd
 = 
li°í
->wildcard;

317 
addr
->
so_kì∑live
 = 
li°í
->so_keepalive;

318 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

319 
addr
->
t˝_kìpidÀ
 = 
li°í
->tcp_keepidle;

320 
addr
->
t˝_kìpötvl
 = 
li°í
->tcp_keepintvl;

321 
addr
->
t˝_kìp˙t
 = 
li°í
->tcp_keepcnt;

323 #i‡(
NGX_MAIL_SSL
)

324 
addr
->
s¶
 = 
li°í
->ssl;

326 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

327 
addr
->
ùv6⁄ly
 = 
li°í
->ipv6only;

330  
NGX_OK
;

331 
	}
}

335 
	$ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
)

337 
ngx_uöt_t
 
i
, 
p
, 
œ°
, 
böd_wûdˇrd
;

338 
ngx_li°íög_t
 *
ls
;

339 
ngx_maû_p‹t_t
 *
mp‹t
;

340 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

341 
ngx_maû_c⁄f_addr_t
 *
addr
;

343 
p‹t
 = 
p‹ts
->
ñts
;

344 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

346 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

347 (
ngx_maû_c⁄f_addr_t
), 
ngx_maû_cmp_c⁄f_addrs
);

349 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

350 
œ°
 = 
p‹t
[
p
].
addrs
.
√…s
;

357 i‡(
addr
[
œ°
 - 1].
wûdˇrd
) {

358 
addr
[
œ°
 - 1].
böd
 = 1;

359 
böd_wûdˇrd
 = 1;

362 
böd_wûdˇrd
 = 0;

365 
i
 = 0;

367 
i
 < 
œ°
) {

369 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
böd
) {

370 
i
++;

374 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, 
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
);

375 i‡(
ls
 =
NULL
) {

376  
NGX_CONF_ERROR
;

379 
ls
->
addr_¡›
 = 1;

380 
ls
->
h™dÀr
 = 
ngx_maû_öô_c⁄√˘i⁄
;

381 
ls
->
poﬁ_size
 = 256;

384 
ls
->
logp
 = &
cf
->
cy˛e
->
√w_log
;

385 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

386 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

388 
ls
->
kì∑live
 = 
addr
[
i
].
so_kì∑live
;

389 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

390 
ls
->
kìpidÀ
 = 
addr
[
i
].
t˝_kìpidÀ
;

391 
ls
->
kìpötvl
 = 
addr
[
i
].
t˝_kìpötvl
;

392 
ls
->
kìp˙t
 = 
addr
[
i
].
t˝_kìp˙t
;

395 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

396 
ls
->
ùv6⁄ly
 = 
addr
[
i
].ipv6only;

399 
mp‹t
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_maû_p‹t_t
));

400 i‡(
mp‹t
 =
NULL
) {

401  
NGX_CONF_ERROR
;

404 
ls
->
£rvîs
 = 
mp‹t
;

406 i‡(
i
 =
œ°
 - 1) {

407 
mp‹t
->
«ddrs
 = 
œ°
;

410 
mp‹t
->
«ddrs
 = 1;

411 
i
 = 0;

414 
ls
->
sockaddr
->
ß_Ámûy
) {

415 #i‡(
NGX_HAVE_INET6
)

416 
AF_INET6
:

417 i‡(
	`ngx_maû_add_addrs6
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

418  
NGX_CONF_ERROR
;

423 i‡(
	`ngx_maû_add_addrs
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

424  
NGX_CONF_ERROR
;

429 
addr
++;

430 
œ°
--;

434  
NGX_CONF_OK
;

435 
	}
}

438 
ngx_öt_t


439 
	$ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

440 
ngx_maû_c⁄f_addr_t
 *
addr
)

442 
u_ch¨
 *
p
;

443 
size_t
 
Àn
;

444 
ngx_uöt_t
 
i
;

445 
ngx_maû_ö_addr_t
 *
addrs
;

446 
sockaddr_ö
 *
sö
;

447 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

449 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

450 
mp‹t
->
«ddrs
 * (
ngx_maû_ö_addr_t
));

451 i‡(
mp‹t
->
addrs
 =
NULL
) {

452  
NGX_ERROR
;

455 
addrs
 = 
mp‹t
->addrs;

457 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

459 
sö
 = (
sockaddr_ö
 *Ë
addr
[
i
].
sockaddr
;

460 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

462 
addrs
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

463 #i‡(
NGX_MAIL_SSL
)

464 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

467 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
, 
buf
,

468 
NGX_SOCKADDR_STRLEN
, 1);

470 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

471 i‡(
p
 =
NULL
) {

472  
NGX_ERROR
;

475 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

477 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

478 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

481  
NGX_OK
;

482 
	}
}

485 #i‡(
NGX_HAVE_INET6
)

487 
ngx_öt_t


488 
	$ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

489 
ngx_maû_c⁄f_addr_t
 *
addr
)

491 
u_ch¨
 *
p
;

492 
size_t
 
Àn
;

493 
ngx_uöt_t
 
i
;

494 
ngx_maû_ö6_addr_t
 *
addrs6
;

495 
sockaddr_ö6
 *
sö6
;

496 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

498 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

499 
mp‹t
->
«ddrs
 * (
ngx_maû_ö6_addr_t
));

500 i‡(
mp‹t
->
addrs
 =
NULL
) {

501  
NGX_ERROR
;

504 
addrs6
 = 
mp‹t
->
addrs
;

506 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

508 
sö6
 = (
sockaddr_ö6
 *Ë
addr
[
i
].
sockaddr
;

509 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

511 
addrs6
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

512 #i‡(
NGX_MAIL_SSL
)

513 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

516 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
, 
buf
,

517 
NGX_SOCKADDR_STRLEN
, 1);

519 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

520 i‡(
p
 =
NULL
) {

521  
NGX_ERROR
;

524 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

526 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

527 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

530  
NGX_OK
;

531 
	}
}

536 
ngx_öt_t


537 
	$ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

539 
ngx_maû_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

541 
fú°
 = (
ngx_maû_c⁄f_addr_t
 *Ë
⁄e
;

542 
£c⁄d
 = (
ngx_maû_c⁄f_addr_t
 *Ë
two
;

544 i‡(
fú°
->
wûdˇrd
) {

549 i‡(
£c⁄d
->
wûdˇrd
) {

554 i‡(
fú°
->
böd
 && !
£c⁄d
->bind) {

559 i‡(!
fú°
->
böd
 && 
£c⁄d
->bind) {

567 
	}
}

	@src/mail/ngx_mail.h

8 #i‚de‡
_NGX_MAIL_H_INCLUDED_


9 
	#_NGX_MAIL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

17 #i‡(
NGX_MAIL_SSL
)

18 
	~<ngx_maû_s¶_moduÀ.h
>

24 **
	mmaö_c⁄f
;

25 **
	m§v_c⁄f
;

26 } 
	tngx_maû_c⁄f_˘x_t
;

30 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

31 
sockÀn_t
 
	msockÀn
;

34 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

36 
	mböd
:1;

37 
	mwûdˇrd
:1;

38 #i‡(
NGX_MAIL_SSL
)

39 
	ms¶
:1;

41 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

42 
	mùv6⁄ly
:1;

44 
	mso_kì∑live
:2;

45 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

46 
	mt˝_kìpidÀ
;

47 
	mt˝_kìpötvl
;

48 
	mt˝_kìp˙t
;

50 } 
	tngx_maû_li°í_t
;

54 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

55 
ngx_°r_t
 
	maddr_ãxt
;

56 #i‡(
NGX_MAIL_SSL
)

57 
ngx_uöt_t
 
	ms¶
;

59 } 
	tngx_maû_addr_c⁄f_t
;

62 
ö_addr_t
 
	maddr
;

63 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

64 } 
	tngx_maû_ö_addr_t
;

67 #i‡(
NGX_HAVE_INET6
)

70 
ö6_addr
 
	maddr6
;

71 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

72 } 
	tngx_maû_ö6_addr_t
;

79 *
	maddrs
;

80 
ngx_uöt_t
 
	m«ddrs
;

81 } 
	tngx_maû_p‹t_t
;

85 
	mÁmûy
;

86 
ö_p‹t_t
 
	mp‹t
;

87 
ngx_¨øy_t
 
	maddrs
;

88 } 
	tngx_maû_c⁄f_p‹t_t
;

92 
sockaddr
 *
	msockaddr
;

93 
sockÀn_t
 
	msockÀn
;

95 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

97 
	mböd
:1;

98 
	mwûdˇrd
:1;

99 #i‡(
NGX_MAIL_SSL
)

100 
	ms¶
:1;

102 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

103 
	mùv6⁄ly
:1;

105 
	mso_kì∑live
:2;

106 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

107 
	mt˝_kìpidÀ
;

108 
	mt˝_kìpötvl
;

109 
	mt˝_kìp˙t
;

111 } 
	tngx_maû_c⁄f_addr_t
;

115 
ngx_¨øy_t
 
	m£rvîs
;

116 
ngx_¨øy_t
 
	mli°í
;

117 } 
	tngx_maû_c‹e_maö_c⁄f_t
;

120 
	#NGX_MAIL_POP3_PROTOCOL
 0

	)

121 
	#NGX_MAIL_IMAP_PROTOCOL
 1

	)

122 
	#NGX_MAIL_SMTP_PROTOCOL
 2

	)

125 
ngx_maû_¥Ÿocﬁ_s
 
	tngx_maû_¥Ÿocﬁ_t
;

129 
ngx_maû_¥Ÿocﬁ_t
 *
	m¥Ÿocﬁ
;

131 
ngx_m£c_t
 
	mtimeout
;

132 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

134 
ngx_Êag_t
 
	mso_kì∑live
;

136 
ngx_°r_t
 
	m£rvî_«me
;

138 
u_ch¨
 *
	mfûe_«me
;

139 
ngx_öt_t
 
	mlöe
;

141 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

144 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

145 } 
	tngx_maû_c‹e_§v_c⁄f_t
;

149 
	mngx_p›3_°¨t
 = 0,

150 
	mngx_p›3_u£r
,

151 
	mngx_p›3_∑sswd
,

152 
	mngx_p›3_auth_logö_u£∫ame
,

153 
	mngx_p›3_auth_logö_∑ssw‹d
,

154 
	mngx_p›3_auth_∂aö
,

155 
	mngx_p›3_auth_¸am_md5


156 } 
	tngx_p›3_°©e_e
;

160 
	mngx_im≠_°¨t
 = 0,

161 
	mngx_im≠_auth_logö_u£∫ame
,

162 
	mngx_im≠_auth_logö_∑ssw‹d
,

163 
	mngx_im≠_auth_∂aö
,

164 
	mngx_im≠_auth_¸am_md5
,

165 
	mngx_im≠_logö
,

166 
	mngx_im≠_u£r
,

167 
	mngx_im≠_∑sswd


168 } 
	tngx_im≠_°©e_e
;

172 
	mngx_smç_°¨t
 = 0,

173 
	mngx_smç_auth_logö_u£∫ame
,

174 
	mngx_smç_auth_logö_∑ssw‹d
,

175 
	mngx_smç_auth_∂aö
,

176 
	mngx_smç_auth_¸am_md5
,

177 
	mngx_smç_hño
,

178 
	mngx_smç_hño_x˛õ¡
,

179 
	mngx_smç_hño_‰om
,

180 
	mngx_smç_x˛õ¡
,

181 
	mngx_smç_x˛õ¡_‰om
,

182 
	mngx_smç_x˛õ¡_hño
,

183 
	mngx_smç_‰om
,

184 
	mngx_smç_to


185 } 
	tngx_smç_°©e_e
;

189 
ngx_≥î_c⁄√˘i⁄_t
 
	mup°ªam
;

190 
ngx_buf_t
 *
	mbuf„r
;

191 } 
	tngx_maû_¥oxy_˘x_t
;

195 
uöt32_t
 
	msig«tuª
;

197 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

199 
ngx_°r_t
 
	mout
;

200 
ngx_buf_t
 *
	mbuf„r
;

202 **
	m˘x
;

203 **
	mmaö_c⁄f
;

204 **
	m§v_c⁄f
;

206 
ngx_ªsﬁvî_˘x_t
 *
	mªsﬁvî_˘x
;

208 
ngx_maû_¥oxy_˘x_t
 *
	m¥oxy
;

210 
ngx_uöt_t
 
	mmaû_°©e
;

212 
	m¥Ÿocﬁ
:3;

213 
	mblocked
:1;

214 
	mquô
:1;

215 
	mquŸed
:1;

216 
	mback¶ash
:1;

217 
	mno_sync_lôîÆ
:1;

218 
	m°¨âls
:1;

219 
	mesmç
:1;

220 
	mauth_mëhod
:3;

221 
	mauth_waô
:1;

223 
ngx_°r_t
 
	mlogö
;

224 
ngx_°r_t
 
	m∑sswd
;

226 
ngx_°r_t
 
	mß…
;

227 
ngx_°r_t
 
	mèg
;

228 
ngx_°r_t
 
	mègged_löe
;

229 
ngx_°r_t
 
	mãxt
;

231 
ngx_°r_t
 *
	maddr_ãxt
;

232 
ngx_°r_t
 
	mho°
;

233 
ngx_°r_t
 
	msmç_hño
;

234 
ngx_°r_t
 
	msmç_‰om
;

235 
ngx_°r_t
 
	msmç_to
;

237 
ngx_°r_t
 
	mcmd
;

239 
ngx_uöt_t
 
	mcomm™d
;

240 
ngx_¨øy_t
 
	m¨gs
;

242 
ngx_uöt_t
 
	mlogö_©ãm±
;

246 
ngx_uöt_t
 
	m°©e
;

247 
u_ch¨
 *
	mcmd_°¨t
;

248 
u_ch¨
 *
	m¨g_°¨t
;

249 
u_ch¨
 *
	m¨g_íd
;

250 
ngx_uöt_t
 
	mlôîÆ_Àn
;

251 } 
	tngx_maû_£ssi⁄_t
;

255 
ngx_°r_t
 *
	m˛õ¡
;

256 
ngx_maû_£ssi⁄_t
 *
	m£ssi⁄
;

257 } 
	tngx_maû_log_˘x_t
;

260 
	#NGX_POP3_USER
 1

	)

261 
	#NGX_POP3_PASS
 2

	)

262 
	#NGX_POP3_CAPA
 3

	)

263 
	#NGX_POP3_QUIT
 4

	)

264 
	#NGX_POP3_NOOP
 5

	)

265 
	#NGX_POP3_STLS
 6

	)

266 
	#NGX_POP3_APOP
 7

	)

267 
	#NGX_POP3_AUTH
 8

	)

268 
	#NGX_POP3_STAT
 9

	)

269 
	#NGX_POP3_LIST
 10

	)

270 
	#NGX_POP3_RETR
 11

	)

271 
	#NGX_POP3_DELE
 12

	)

272 
	#NGX_POP3_RSET
 13

	)

273 
	#NGX_POP3_TOP
 14

	)

274 
	#NGX_POP3_UIDL
 15

	)

277 
	#NGX_IMAP_LOGIN
 1

	)

278 
	#NGX_IMAP_LOGOUT
 2

	)

279 
	#NGX_IMAP_CAPABILITY
 3

	)

280 
	#NGX_IMAP_NOOP
 4

	)

281 
	#NGX_IMAP_STARTTLS
 5

	)

283 
	#NGX_IMAP_NEXT
 6

	)

285 
	#NGX_IMAP_AUTHENTICATE
 7

	)

288 
	#NGX_SMTP_HELO
 1

	)

289 
	#NGX_SMTP_EHLO
 2

	)

290 
	#NGX_SMTP_AUTH
 3

	)

291 
	#NGX_SMTP_QUIT
 4

	)

292 
	#NGX_SMTP_NOOP
 5

	)

293 
	#NGX_SMTP_MAIL
 6

	)

294 
	#NGX_SMTP_RSET
 7

	)

295 
	#NGX_SMTP_RCPT
 8

	)

296 
	#NGX_SMTP_DATA
 9

	)

297 
	#NGX_SMTP_VRFY
 10

	)

298 
	#NGX_SMTP_EXPN
 11

	)

299 
	#NGX_SMTP_HELP
 12

	)

300 
	#NGX_SMTP_STARTTLS
 13

	)

303 
	#NGX_MAIL_AUTH_PLAIN
 0

	)

304 
	#NGX_MAIL_AUTH_LOGIN
 1

	)

305 
	#NGX_MAIL_AUTH_LOGIN_USERNAME
 2

	)

306 
	#NGX_MAIL_AUTH_APOP
 3

	)

307 
	#NGX_MAIL_AUTH_CRAM_MD5
 4

	)

308 
	#NGX_MAIL_AUTH_NONE
 5

	)

311 
	#NGX_MAIL_AUTH_PLAIN_ENABLED
 0x0002

	)

312 
	#NGX_MAIL_AUTH_LOGIN_ENABLED
 0x0004

	)

313 
	#NGX_MAIL_AUTH_APOP_ENABLED
 0x0008

	)

314 
	#NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 0x0010

	)

315 
	#NGX_MAIL_AUTH_NONE_ENABLED
 0x0020

	)

318 
	#NGX_MAIL_PARSE_INVALID_COMMAND
 20

	)

321 (*
	tngx_maû_öô_£ssi⁄_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

322 
	tngx_c⁄√˘i⁄_t
 *
	tc
);

323 (*
	tngx_maû_öô_¥Ÿocﬁ_±
)(
	tngx_evít_t
 *
	tªv
);

324 (*
	tngx_maû_auth_°©e_±
)(
	tngx_evít_t
 *
	tªv
);

325 
	$ngx_öt_t
 (*
	tngx_maû_∑r£_comm™d_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
);

328 
	sngx_maû_¥Ÿocﬁ_s
 {

329 
ngx_°r_t
 
«me
;

330 
ö_p‹t_t
 
p‹t
[4];

331 
ngx_uöt_t
 
ty≥
;

333 
ngx_maû_öô_£ssi⁄_±
 
öô_£ssi⁄
;

334 
ngx_maû_öô_¥Ÿocﬁ_±
 
öô_¥Ÿocﬁ
;

335 
ngx_maû_∑r£_comm™d_±
 
∑r£_comm™d
;

336 
ngx_maû_auth_°©e_±
 
auth_°©e
;

338 
ngx_°r_t
 
öã∫Æ_£rvî_îr‹
;

339 
ngx_°r_t
 
˚π_îr‹
;

340 
ngx_°r_t
 
no_˚π
;

345 
ngx_maû_¥Ÿocﬁ_t
 *
¥Ÿocﬁ
;

347 *(*
¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

348 *(*
öô_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

350 *(*
¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

351 *(*
mîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

352 *
c⁄f
);

353 } 
	tngx_maû_moduÀ_t
;

356 
	#NGX_MAIL_MODULE
 0x4C49414D

	)

358 
	#NGX_MAIL_MAIN_CONF
 0x02000000

	)

359 
	#NGX_MAIL_SRV_CONF
 0x04000000

	)

362 
	#NGX_MAIL_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

363 
	#NGX_MAIL_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

366 
	#ngx_maû_gë_moduÀ_˘x
(
s
, 
moduÀ
Ë(s)->
˘x
[moduÀ.
˘x_ödex
]

	)

367 
	#ngx_maû_£t_˘x
(
s
, 
c
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

368 
	#ngx_maû_dñëe_˘x
(
s
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = 
NULL
;

	)

371 
	#ngx_maû_gë_moduÀ_maö_c⁄f
(
s
, 
moduÀ
) \

372 (
s
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

373 
	#ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
moduÀ
Ë(s)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

375 
	#ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

376 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

377 
	#ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

378 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

381 #i‡(
NGX_MAIL_SSL
)

382 
	`ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
);

383 
ngx_öt_t
 
	`ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

387 
	`ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

389 
ngx_öt_t
 
	`ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

390 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
);

391 
ngx_öt_t
 
	`ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

392 
ngx_uöt_t
 
n
);

393 
ngx_öt_t
 
	`ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
,

394 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
);

395 
ngx_öt_t
 
	`ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
,

396 
ngx_c⁄√˘i⁄_t
 *
c
);

397 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
,

398 
ngx_c⁄√˘i⁄_t
 *
c
, *
¥efix
, 
size_t
 
Àn
);

399 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

400 
ngx_öt_t
 
	`ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

402 
	`ngx_maû_£nd
(
ngx_evít_t
 *
wev
);

403 
ngx_öt_t
 
	`ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

404 
	`ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

405 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

406 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

407 
u_ch¨
 *
	`ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

410 *
	`ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

414 
	`ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
);

415 
	`ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
);

419 
ngx_uöt_t
 
ngx_maû_max_moduÀ
;

420 
ngx_moduÀ_t
 
ngx_maû_c‹e_moduÀ
;

	@src/mail/ngx_mail_auth_http_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_addr_t
 *
	m≥î
;

18 
ngx_m£c_t
 
	mtimeout
;

19 
ngx_Êag_t
 
	m∑ss_˛õ¡_˚π
;

21 
ngx_°r_t
 
	mho°_hódî
;

22 
ngx_°r_t
 
	muri
;

23 
ngx_°r_t
 
	mhódî
;

25 
ngx_¨øy_t
 *
	mhódîs
;

27 
u_ch¨
 *
	mfûe
;

28 
ngx_uöt_t
 
	mlöe
;

29 } 
	tngx_maû_auth_hâp_c⁄f_t
;

32 
ngx_maû_auth_hâp_˘x_s
 
	tngx_maû_auth_hâp_˘x_t
;

34 (*
	tngx_maû_auth_hâp_h™dÀr_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

35 
	tngx_maû_auth_hâp_˘x_t
 *
	t˘x
);

37 
	sngx_maû_auth_hâp_˘x_s
 {

38 
ngx_buf_t
 *
ªque°
;

39 
ngx_buf_t
 *
ª•⁄£
;

40 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

42 
ngx_maû_auth_hâp_h™dÀr_±
 
h™dÀr
;

44 
ngx_uöt_t
 
°©e
;

46 
u_ch¨
 *
hódî_«me_°¨t
;

47 
u_ch¨
 *
hódî_«me_íd
;

48 
u_ch¨
 *
hódî_°¨t
;

49 
u_ch¨
 *
hódî_íd
;

51 
ngx_°r_t
 
addr
;

52 
ngx_°r_t
 
p‹t
;

53 
ngx_°r_t
 
îr
;

54 
ngx_°r_t
 
îrmsg
;

55 
ngx_°r_t
 
îrcode
;

57 
time_t
 
¶ìp
;

59 
ngx_poﬁ_t
 *
poﬁ
;

63 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

64 
	`ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

65 
	`ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

66 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

67 
	`ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

68 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

69 
	`ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
);

70 
ngx_öt_t
 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

71 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

72 
	`ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
);

73 
	`ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

74 
ngx_buf_t
 *
	`ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
,

75 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
);

76 
ngx_öt_t
 
	`ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,

77 
ngx_°r_t
 *
esˇ≥d
);

79 *
	`ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

80 *
	`ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

81 *
chûd
);

82 *
	`ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

83 *
	`ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

84 *
c⁄f
);

87 
ngx_comm™d_t
 
ngx_maû_auth_hâp_comm™ds
[] = {

89 { 
	`ngx_°rög
("auth_http"),

90 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

91 
ngx_maû_auth_hâp
,

92 
NGX_MAIL_SRV_CONF_OFFSET
,

94 
NULL
 },

96 { 
	`ngx_°rög
("auth_http_timeout"),

97 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_m£c_¶Ÿ
,

99 
NGX_MAIL_SRV_CONF_OFFSET
,

100 
	`off£tof
(
ngx_maû_auth_hâp_c⁄f_t
, 
timeout
),

101 
NULL
 },

103 { 
	`ngx_°rög
("auth_http_header"),

104 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE2
,

105 
ngx_maû_auth_hâp_hódî
,

106 
NGX_MAIL_SRV_CONF_OFFSET
,

108 
NULL
 },

110 { 
	`ngx_°rög
("auth_http_pass_client_cert"),

111 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

112 
ngx_c⁄f_£t_Êag_¶Ÿ
,

113 
NGX_MAIL_SRV_CONF_OFFSET
,

114 
	`off£tof
(
ngx_maû_auth_hâp_c⁄f_t
, 
∑ss_˛õ¡_˚π
),

115 
NULL
 },

117 
ngx_nuŒ_comm™d


118 
	}
};

121 
ngx_maû_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ_˘x
 = {

122 
NULL
,

124 
NULL
,

125 
NULL
,

127 
ngx_maû_auth_hâp_¸óã_c⁄f
,

128 
ngx_maû_auth_hâp_mîge_c⁄f


132 
ngx_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ
 = {

133 
NGX_MODULE_V1
,

134 &
ngx_maû_auth_hâp_moduÀ_˘x
,

135 
ngx_maû_auth_hâp_comm™ds
,

136 
NGX_MAIL_MODULE
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NULL
,

144 
NGX_MODULE_V1_PADDING


148 
ngx_°r_t
 
	gngx_maû_auth_hâp_mëhod
[] = {

149 
ngx_°rög
("plain"),

150 
ngx_°rög
("plain"),

151 
ngx_°rög
("plain"),

152 
ngx_°rög
("apop"),

153 
ngx_°rög
("cram-md5"),

154 
ngx_°rög
("none")

157 
ngx_°r_t
 
	gngx_maû_smç_îrcode
 = 
ngx_°rög
("535 5.7.0");

161 
	$ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
)

163 
ngx_öt_t
 
rc
;

164 
ngx_poﬁ_t
 *
poﬁ
;

165 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

166 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

168 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "in httpáuth state";

170 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
s
->
c⁄√˘i⁄
->
log
);

171 i‡(
poﬁ
 =
NULL
) {

172 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

176 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_maû_auth_hâp_˘x_t
));

177 i‡(
˘x
 =
NULL
) {

178 
	`ngx_de°roy_poﬁ
(
poﬁ
);

179 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

183 
˘x
->
poﬁ
 =Öool;

185 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

187 
˘x
->
ªque°
 = 
	`ngx_maû_auth_hâp_¸óã_ªque°
(
s
, 
poﬁ
, 
ahcf
);

188 i‡(
˘x
->
ªque°
 =
NULL
) {

189 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

190 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

194 
	`ngx_maû_£t_˘x
(
s
, 
˘x
, 
ngx_maû_auth_hâp_moduÀ
);

196 
˘x
->
≥î
.
sockaddr
 = 
ahcf
->peer->sockaddr;

197 
˘x
->
≥î
.
sockÀn
 = 
ahcf
->peer->socklen;

198 
˘x
->
≥î
.
«me
 = &
ahcf
->peer->name;

199 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

200 
˘x
->
≥î
.
log
 = 
s
->
c⁄√˘i⁄
->log;

201 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

203 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

205 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

206 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

207 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

210 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

211 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

215 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = 
s
;

216 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

218 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_block_ªad
;

219 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_ªad_h™dÀr
;

220 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_auth_hâp_wrôe_h™dÀr
;

222 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_ign‹e_°©us_löe
;

224 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, 
ahcf
->
timeout
);

225 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, 
ahcf
->
timeout
);

227 i‡(
rc
 =
NGX_OK
) {

228 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

231 
	}
}

235 
	$ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

237 
ssize_t
 
n
, 
size
;

238 
ngx_c⁄√˘i⁄_t
 *
c
;

239 
ngx_maû_£ssi⁄_t
 *
s
;

240 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

241 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

243 
c
 = 
wev
->
d©a
;

244 
s
 = 
c
->
d©a
;

246 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

248 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0,

251 i‡(
wev
->
timedout
) {

252 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

253 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

254 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

255 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

256 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

260 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

262 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

264 i‡(
n
 =
NGX_ERROR
) {

265 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

266 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

267 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

271 i‡(
n
 > 0) {

272 
˘x
->
ªque°
->
pos
 +
n
;

274 i‡(
n
 =
size
) {

275 
wev
->
h™dÀr
 = 
ngx_maû_auth_hâp_dummy_h™dÀr
;

277 i‡(
wev
->
timî_£t
) {

278 
	`ngx_dñ_timî
(
wev
);

281 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

282 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

283 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

284 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

291 i‡(!
wev
->
timî_£t
) {

292 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

293 
	`ngx_add_timî
(
wev
, 
ahcf
->
timeout
);

295 
	}
}

299 
	$ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

301 
ssize_t
 
n
, 
size
;

302 
ngx_c⁄√˘i⁄_t
 *
c
;

303 
ngx_maû_£ssi⁄_t
 *
s
;

304 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

306 
c
 = 
ªv
->
d©a
;

307 
s
 = 
c
->
d©a
;

309 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

312 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

314 i‡(
ªv
->
timedout
) {

315 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

316 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

317 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

318 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

319 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

323 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

324 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 1024);

325 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

326 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

327 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

328 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

333 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

335 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
pos
, 
size
);

337 i‡(
n
 > 0) {

338 
˘x
->
ª•⁄£
->
œ°
 +
n
;

340 
˘x
->
	`h™dÀr
(
s
, ctx);

344 i‡(
n
 =
NGX_AGAIN
) {

348 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

349 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

350 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

351 
	}
}

355 
	$ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

356 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

358 
u_ch¨
 *
p
, 
ch
;

360 
sw_°¨t
 = 0,

361 
sw_H
,

362 
sw_HT
,

363 
sw_HTT
,

364 
sw_HTTP
,

365 
sw_skù
,

366 
sw_Æmo°_d⁄e


367 } 
°©e
;

369 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

372 
°©e
 = 
˘x
->state;

374 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

375 
ch
 = *
p
;

377 
°©e
) {

380 
sw_°¨t
:

381 i‡(
ch
 == 'H') {

382 
°©e
 = 
sw_H
;

385 
√xt
;

387 
sw_H
:

388 i‡(
ch
 == 'T') {

389 
°©e
 = 
sw_HT
;

392 
√xt
;

394 
sw_HT
:

395 i‡(
ch
 == 'T') {

396 
°©e
 = 
sw_HTT
;

399 
√xt
;

401 
sw_HTT
:

402 i‡(
ch
 == 'P') {

403 
°©e
 = 
sw_HTTP
;

406 
√xt
;

408 
sw_HTTP
:

409 i‡(
ch
 == '/') {

410 
°©e
 = 
sw_skù
;

413 
√xt
;

416 
sw_skù
:

417 
ch
) {

418 
CR
:

419 
°©e
 = 
sw_Æmo°_d⁄e
;

422 
LF
:

423 
d⁄e
;

428 
sw_Æmo°_d⁄e
:

429 i‡(
ch
 =
LF
) {

430 
d⁄e
;

433 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

435 
˘x
->
≥î
.
«me
);

436 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

437 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

438 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

443 
˘x
->
ª•⁄£
->
pos
 = 
p
;

444 
˘x
->
°©e
 = state;

448 
√xt
:

450 
p
 = 
˘x
->
ª•⁄£
->
°¨t
 - 1;

452 
d⁄e
:

454 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

455 
˘x
->
°©e
 = 0;

456 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_¥o˚ss_hódîs
;

457 
˘x
->
	`h™dÀr
(
s
, ctx);

458 
	}
}

462 
	$ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

463 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

465 
u_ch¨
 *
p
;

466 
time_t
 
timî
;

467 
size_t
 
Àn
, 
size
;

468 
ngx_öt_t
 
rc
, 
p‹t
, 
n
;

469 
ngx_addr_t
 *
≥î
;

470 
sockaddr_ö
 *
sö
;

471 #i‡(
NGX_HAVE_INET6
)

472 
sockaddr_ö6
 *
sö6
;

475 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

479 
rc
 = 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
s
, 
˘x
);

481 i‡(
rc
 =
NGX_OK
) {

483 #i‡(
NGX_DEBUG
)

485 
ngx_°r_t
 
key
, 
vÆue
;

487 
key
.
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

488 
key
.
d©a
 = 
˘x
->
hódî_«me_°¨t
;

489 
vÆue
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

490 
vÆue
.
d©a
 = 
˘x
->
hódî_°¨t
;

492 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

494 &
key
, &
vÆue
);

498 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

500 i‡(
Àn
 == ("Auth-Status") - 1

501 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

502 (
u_ch¨
 *) "Auth-Status",

506 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

508 i‡(
Àn
 == 2

509 && 
˘x
->
hódî_°¨t
[0] == 'O'

510 && 
˘x
->
hódî_°¨t
[1] == 'K')

515 i‡(
Àn
 == 4

516 && 
˘x
->
hódî_°¨t
[0] == 'W'

517 && 
˘x
->
hódî_°¨t
[1] == 'A'

518 && 
˘x
->
hódî_°¨t
[2] == 'I'

519 && 
˘x
->
hódî_°¨t
[3] == 'T')

521 
s
->
auth_waô
 = 1;

525 
˘x
->
îrmsg
.
Àn
 =Üen;

526 
˘x
->
îrmsg
.
d©a
 = ctx->
hódî_°¨t
;

528 
s
->
¥Ÿocﬁ
) {

530 
NGX_MAIL_POP3_PROTOCOL
:

531 
size
 = ("-ERR "Ë- 1 + 
Àn
 + (
CRLF
) - 1;

534 
NGX_MAIL_IMAP_PROTOCOL
:

535 
size
 = 
s
->
èg
.
Àn
 + ("NO ") - 1 +Üen

536 + (
CRLF
) - 1;

540 
˘x
->
îr
 = ctx->
îrmsg
;

544 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
size
);

545 i‡(
p
 =
NULL
) {

546 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

547 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

548 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

552 
˘x
->
îr
.
d©a
 = 
p
;

554 
s
->
¥Ÿocﬁ
) {

556 
NGX_MAIL_POP3_PROTOCOL
:

557 *
p
++ = '-'; *p++ = 'E'; *p++ = 'R'; *p++ = 'R'; *p++ = ' ';

560 
NGX_MAIL_IMAP_PROTOCOL
:

561 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

562 *
p
++ = 'N'; *p++ = 'O'; *p++ = ' ';

569 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
hódî_°¨t
, 
Àn
);

570 *
p
++ = 
CR
; *p++ = 
LF
;

572 
˘x
->
îr
.
Àn
 = 
p
 - ctx->îr.
d©a
;

577 i‡(
Àn
 == ("Auth-Server") - 1

578 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

579 (
u_ch¨
 *) "Auth-Server",

583 
˘x
->
addr
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

584 
˘x
->
addr
.
d©a
 = ctx->
hódî_°¨t
;

589 i‡(
Àn
 == ("Auth-Port") - 1

590 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

591 (
u_ch¨
 *) "Auth-Port",

595 
˘x
->
p‹t
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

596 
˘x
->
p‹t
.
d©a
 = ctx->
hódî_°¨t
;

601 i‡(
Àn
 == ("Auth-User") - 1

602 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

603 (
u_ch¨
 *) "Auth-User",

607 
s
->
logö
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

609 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
, s->logö.
Àn
);

610 i‡(
s
->
logö
.
d©a
 =
NULL
) {

611 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

612 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

613 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

617 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
˘x
->
hódî_°¨t
, s->logö.
Àn
);

622 i‡(
Àn
 == ("Auth-Pass") - 1

623 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

624 (
u_ch¨
 *) "Auth-Pass",

628 
s
->
∑sswd
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

630 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
,

631 
s
->
∑sswd
.
Àn
);

632 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

633 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

634 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

635 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

639 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
˘x
->
hódî_°¨t
, s->∑sswd.
Àn
);

644 i‡(
Àn
 == ("Auth-Wait") - 1

645 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

646 (
u_ch¨
 *) "Auth-Wait",

650 
n
 = 
	`ngx_©oi
(
˘x
->
hódî_°¨t
,

651 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
);

653 i‡(
n
 !
NGX_ERROR
) {

654 
˘x
->
¶ìp
 = 
n
;

660 i‡(
Àn
 == ("Auth-Error-Code") - 1

661 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

662 (
u_ch¨
 *) "Auth-Error-Code",

666 
˘x
->
îrcode
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

668 
˘x
->
îrcode
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

669 
˘x
->
îrcode
.
Àn
);

670 i‡(
˘x
->
îrcode
.
d©a
 =
NULL
) {

671 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

672 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

673 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

677 
	`ngx_mem˝y
(
˘x
->
îrcode
.
d©a
, ctx->
hódî_°¨t
,

678 
˘x
->
îrcode
.
Àn
);

688 i‡(
rc
 =
NGX_DONE
) {

689 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

692 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

694 i‡(
˘x
->
îr
.
Àn
) {

696 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

697 "˛õ¡Üogö faûed: \"%V\"", &
˘x
->
îrmsg
);

699 i‡(
s
->
¥Ÿocﬁ
 =
NGX_MAIL_SMTP_PROTOCOL
) {

701 i‡(
˘x
->
îrcode
.
Àn
 == 0) {

702 
˘x
->
îrcode
 = 
ngx_maû_smç_îrcode
;

705 
˘x
->
îr
.
Àn
 = ctx->
îrcode
.À¿+ ctx->
îrmsg
.len

706 + (" " 
CRLF
) - 1;

708 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
˘x
->
îr
.
Àn
);

709 i‡(
p
 =
NULL
) {

710 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

711 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

715 
˘x
->
îr
.
d©a
 = 
p
;

717 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrcode
.
d©a
, ctx->îrcode.
Àn
);

718 *
p
++ = ' ';

719 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrmsg
.
d©a
, ctx->îrmsg.
Àn
);

720 *
p
++ = 
CR
; *∞
LF
;

723 
s
->
out
 = 
˘x
->
îr
;

724 
timî
 = 
˘x
->
¶ìp
;

726 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

728 i‡(
timî
 == 0) {

729 
s
->
quô
 = 1;

730 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

734 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

736 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

741 i‡(
s
->
auth_waô
) {

742 
timî
 = 
˘x
->
¶ìp
;

744 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

746 i‡(
timî
 == 0) {

747 
	`ngx_maû_auth_hâp_öô
(
s
);

751 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

753 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

758 i‡(
˘x
->
addr
.
Àn
 =0 || ctx->
p‹t
.len == 0) {

759 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

761 
˘x
->
≥î
.
«me
);

762 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

763 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

767 i‡(
s
->
∑sswd
.
d©a
 =
NULL


768 && 
s
->
¥Ÿocﬁ
 !
NGX_MAIL_SMTP_PROTOCOL
)

770 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

772 
˘x
->
≥î
.
«me
);

773 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

774 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

778 
≥î
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_addr_t
));

779 i‡(
≥î
 =
NULL
) {

780 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

781 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

785 
rc
 = 
	`ngx_∑r£_addr
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
≥î
,

786 
˘x
->
addr
.
d©a
, ctx->addr.
Àn
);

788 
rc
) {

789 
NGX_OK
:

792 
NGX_DECLINED
:

793 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

796 
˘x
->
≥î
.
«me
, &˘x->
addr
);

800 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

801 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

805 
p‹t
 = 
	`ngx_©oi
(
˘x
->p‹t.
d©a
, ctx->p‹t.
Àn
);

806 i‡(
p‹t
 =
NGX_ERROR
 ||Öort < 1 ||Öort > 65535) {

807 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

810 
˘x
->
≥î
.
«me
, &˘x->
p‹t
);

811 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

812 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

816 
≥î
->
sockaddr
->
ß_Ámûy
) {

818 #i‡(
NGX_HAVE_INET6
)

819 
AF_INET6
:

820 
sö6
 = (
sockaddr_ö6
 *Ë
≥î
->
sockaddr
;

821 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
p‹t
);

826 
sö
 = (
sockaddr_ö
 *Ë
≥î
->
sockaddr
;

827 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
p‹t
);

831 
Àn
 = 
˘x
->
addr
.À¿+ 1 + ctx->
p‹t
.len;

833 
≥î
->
«me
.
Àn
 =Üen;

835 
≥î
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

836 i‡(
≥î
->
«me
.
d©a
 =
NULL
) {

837 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

838 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

842 
Àn
 = 
˘x
->
addr
.len;

844 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
, 
˘x
->
addr
.d©a, 
Àn
);

846 
≥î
->
«me
.
d©a
[
Àn
++] = ':';

848 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
 + 
Àn
, 
˘x
->
p‹t
.data, ctx->port.len);

850 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

851 
	`ngx_maû_¥oxy_öô
(
s
, 
≥î
);

856 i‡(
rc
 =
NGX_AGAIN
 ) {

862 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

864 
˘x
->
≥î
.
«me
);

865 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

866 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

867 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

871 
	}
}

875 
	$ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
)

877 
ngx_c⁄√˘i⁄_t
 *
c
;

878 
ngx_maû_£ssi⁄_t
 *
s
;

879 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

881 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailáuth sleep handler");

883 
c
 = 
ªv
->
d©a
;

884 
s
 = 
c
->
d©a
;

886 i‡(
ªv
->
timedout
) {

888 
ªv
->
timedout
 = 0;

890 i‡(
s
->
auth_waô
) {

891 
s
->
auth_waô
 = 0;

892 
	`ngx_maû_auth_hâp_öô
(
s
);

896 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

898 
ªv
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
auth_°©e
;

900 
s
->
maû_°©e
 = 0;

901 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_PLAIN
;

903 
c
->
log
->
a˘i⁄
 = "ináuth state";

905 
	`ngx_maû_£nd
(
c
->
wrôe
);

907 i‡(
c
->
de°royed
) {

911 
	`ngx_add_timî
(
ªv
, 
cscf
->
timeout
);

913 i‡(
ªv
->
ªady
) {

914 
ªv
->
	`h™dÀr
(rev);

918 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

919 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

925 i‡(
ªv
->
a˘ive
) {

926 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

927 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

930 
	}
}

933 
ngx_öt_t


934 
	$ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

935 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

937 
u_ch¨
 
c
, 
ch
, *
p
;

939 
sw_°¨t
 = 0,

940 
sw_«me
,

941 
sw_•a˚_bef‹e_vÆue
,

942 
sw_vÆue
,

943 
sw_•a˚_a·î_vÆue
,

944 
sw_Æmo°_d⁄e
,

945 
sw_hódî_Æmo°_d⁄e


946 } 
°©e
;

948 
°©e
 = 
˘x
->state;

950 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

951 
ch
 = *
p
;

953 
°©e
) {

956 
sw_°¨t
:

958 
ch
) {

959 
CR
:

960 
˘x
->
hódî_íd
 = 
p
;

961 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

963 
LF
:

964 
˘x
->
hódî_íd
 = 
p
;

965 
hódî_d⁄e
;

967 
°©e
 = 
sw_«me
;

968 
˘x
->
hódî_«me_°¨t
 = 
p
;

970 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

971 i‡(
c
 >= 'a' && c <= 'z') {

975 i‡(
ch
 >= '0' && ch <= '9') {

979  
NGX_ERROR
;

984 
sw_«me
:

985 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

986 i‡(
c
 >= 'a' && c <= 'z') {

990 i‡(
ch
 == ':') {

991 
˘x
->
hódî_«me_íd
 = 
p
;

992 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

996 i‡(
ch
 == '-') {

1000 i‡(
ch
 >= '0' && ch <= '9') {

1004 i‡(
ch
 =
CR
) {

1005 
˘x
->
hódî_«me_íd
 = 
p
;

1006 
˘x
->
hódî_°¨t
 = 
p
;

1007 
˘x
->
hódî_íd
 = 
p
;

1008 
°©e
 = 
sw_Æmo°_d⁄e
;

1012 i‡(
ch
 =
LF
) {

1013 
˘x
->
hódî_«me_íd
 = 
p
;

1014 
˘x
->
hódî_°¨t
 = 
p
;

1015 
˘x
->
hódî_íd
 = 
p
;

1016 
d⁄e
;

1019  
NGX_ERROR
;

1022 
sw_•a˚_bef‹e_vÆue
:

1023 
ch
) {

1026 
CR
:

1027 
˘x
->
hódî_°¨t
 = 
p
;

1028 
˘x
->
hódî_íd
 = 
p
;

1029 
°©e
 = 
sw_Æmo°_d⁄e
;

1031 
LF
:

1032 
˘x
->
hódî_°¨t
 = 
p
;

1033 
˘x
->
hódî_íd
 = 
p
;

1034 
d⁄e
;

1036 
˘x
->
hódî_°¨t
 = 
p
;

1037 
°©e
 = 
sw_vÆue
;

1043 
sw_vÆue
:

1044 
ch
) {

1046 
˘x
->
hódî_íd
 = 
p
;

1047 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1049 
CR
:

1050 
˘x
->
hódî_íd
 = 
p
;

1051 
°©e
 = 
sw_Æmo°_d⁄e
;

1053 
LF
:

1054 
˘x
->
hódî_íd
 = 
p
;

1055 
d⁄e
;

1060 
sw_•a˚_a·î_vÆue
:

1061 
ch
) {

1064 
CR
:

1065 
°©e
 = 
sw_Æmo°_d⁄e
;

1067 
LF
:

1068 
d⁄e
;

1070 
°©e
 = 
sw_vÆue
;

1076 
sw_Æmo°_d⁄e
:

1077 
ch
) {

1078 
LF
:

1079 
d⁄e
;

1081  
NGX_ERROR
;

1085 
sw_hódî_Æmo°_d⁄e
:

1086 
ch
) {

1087 
LF
:

1088 
hódî_d⁄e
;

1090  
NGX_ERROR
;

1095 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1096 
˘x
->
°©e
 = state;

1098  
NGX_AGAIN
;

1100 
d⁄e
:

1102 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1103 
˘x
->
°©e
 = 
sw_°¨t
;

1105  
NGX_OK
;

1107 
hódî_d⁄e
:

1109 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1110 
˘x
->
°©e
 = 
sw_°¨t
;

1112  
NGX_DONE
;

1113 
	}
}

1117 
	$ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
)

1119 
ngx_c⁄√˘i⁄_t
 *
c
;

1120 
ngx_maû_£ssi⁄_t
 *
s
;

1121 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

1123 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

1126 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1127 
c
 = 
ªv
->
d©a
;

1128 
s
 = 
c
->
d©a
;

1130 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

1132 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

1133 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

1134 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1136 
	}
}

1140 
	$ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1142 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

1144 
	}
}

1147 
ngx_buf_t
 *

1148 
	$ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_poﬁ_t
 *
poﬁ
,

1149 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
)

1151 
size_t
 
Àn
;

1152 
ngx_buf_t
 *
b
;

1153 
ngx_°r_t
 
logö
, 
∑sswd
;

1154 #i‡(
NGX_MAIL_SSL
)

1155 
ngx_°r_t
 
vîify
, 
subje˘
, 
issuî
, 
£rül
, 
fögî¥öt
,

1156 
øw_˚π
, 
˚π
;

1157 
ngx_c⁄√˘i⁄_t
 *
c
;

1158 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

1160 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

1162 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
logö
, &logöË!
NGX_OK
) {

1163  
NULL
;

1166 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
∑sswd
, &∑sswdË!
NGX_OK
) {

1167  
NULL
;

1170 #i‡(
NGX_MAIL_SSL
)

1172 
c
 = 
s
->
c⁄√˘i⁄
;

1173 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

1175 i‡(
c
->
s¶
 && 
s¶cf
->
vîify
) {

1179 i‡(
	`ngx_s¶_gë_˛õ¡_vîify
(
c
, 
poﬁ
, &
vîify
Ë!
NGX_OK
) {

1180  
NULL
;

1183 i‡(
	`ngx_s¶_gë_subje˘_dn
(
c
, 
poﬁ
, &
subje˘
Ë!
NGX_OK
) {

1184  
NULL
;

1187 i‡(
	`ngx_s¶_gë_issuî_dn
(
c
, 
poﬁ
, &
issuî
Ë!
NGX_OK
) {

1188  
NULL
;

1191 i‡(
	`ngx_s¶_gë_£rül_numbî
(
c
, 
poﬁ
, &
£rül
Ë!
NGX_OK
) {

1192  
NULL
;

1195 i‡(
	`ngx_s¶_gë_fögî¥öt
(
c
, 
poﬁ
, &
fögî¥öt
Ë!
NGX_OK
) {

1196  
NULL
;

1199 i‡(
ahcf
->
∑ss_˛õ¡_˚π
) {

1203 i‡(
	`ngx_s¶_gë_øw_˚πifiˇã
(
c
, 
poﬁ
, &
øw_˚π
Ë!
NGX_OK
) {

1204  
NULL
;

1207 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
øw_˚π
, &
˚π
Ë!
NGX_OK
) {

1208  
NULL
;

1212 
	`ngx_°r_nuŒ
(&
˚π
);

1216 
	`ngx_°r_nuŒ
(&
vîify
);

1217 
	`ngx_°r_nuŒ
(&
subje˘
);

1218 
	`ngx_°r_nuŒ
(&
issuî
);

1219 
	`ngx_°r_nuŒ
(&
£rül
);

1220 
	`ngx_°r_nuŒ
(&
fögî¥öt
);

1221 
	`ngx_°r_nuŒ
(&
˚π
);

1226 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

1228 
Àn
 = ("GET "Ë- 1 + 
ahcf
->
uri
.À¿+ (" HTTP/1.0" 
CRLF
) - 1

1229 + ("Ho°: "Ë- 1 + 
ahcf
->
ho°_hódî
.
Àn
 + (
CRLF
) - 1

1231 + 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn


1232 + (
CRLF
) - 1

1233 + ("Auth-U£r: "Ë- 1 + 
logö
.
Àn
 + (
CRLF
) - 1

1234 + ("Auth-Pass: "Ë- 1 + 
∑sswd
.
Àn
 + (
CRLF
) - 1

1235 + ("Auth-SÆt: "Ë- 1 + 
s
->
ß…
.
Àn


1236 + ("Auth-PrŸocﬁ: "Ë- 1 + 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn


1237 + (
CRLF
) - 1

1238 + ("Auth-Logö-Aâem±: "Ë- 1 + 
NGX_INT_T_LEN


1239 + (
CRLF
) - 1

1240 + ("Clõ¡-IP: "Ë- 1 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn


1241 + (
CRLF
) - 1

1242 + ("Clõ¡-Ho°: "Ë- 1 + 
s
->
ho°
.
Àn
 + (
CRLF
) - 1

1243 + ("Auth-SMTP-Hño: "Ë- 1 + 
s
->
smç_hño
.
Àn
 + (
CRLF
) - 1

1244 + ("Auth-SMTP-From: "Ë- 1 + 
s
->
smç_‰om
.
Àn
 + (
CRLF
) - 1

1245 + ("Auth-SMTP-To: "Ë- 1 + 
s
->
smç_to
.
Àn
 + (
CRLF
) - 1

1246 #i‡(
NGX_MAIL_SSL
)

1247 + ("Auth-SSL: on" 
CRLF
) - 1

1248 + ("Auth-SSL-Vîify: "Ë- 1 + 
vîify
.
Àn
 + (
CRLF
) - 1

1249 + ("Auth-SSL-Subje˘: "Ë- 1 + 
subje˘
.
Àn
 + (
CRLF
) - 1

1250 + ("Auth-SSL-Issuî: "Ë- 1 + 
issuî
.
Àn
 + (
CRLF
) - 1

1251 + ("Auth-SSL-Sîül: "Ë- 1 + 
£rül
.
Àn
 + (
CRLF
) - 1

1252 + ("Auth-SSL-Fögî¥öt: "Ë- 1 + 
fögî¥öt
.
Àn


1253 + (
CRLF
) - 1

1254 + ("Auth-SSL-Cît: "Ë- 1 + 
˚π
.
Àn
 + (
CRLF
) - 1

1256 + 
ahcf
->
hódî
.
Àn


1257 + (
CRLF
) - 1;

1259 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
Àn
);

1260 i‡(
b
 =
NULL
) {

1261  
NULL
;

1264 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "GET ", ("GET ") - 1);

1265 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
uri
.
d©a
,áhcf->uri.
Àn
);

1266 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, " HTTP/1.0" 
CRLF
,

1267 (" HTTP/1.0" 
CRLF
) - 1);

1269 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Host: ", ("Host: ") - 1);

1270 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
ho°_hódî
.
d©a
,

1271 
ahcf
->
ho°_hódî
.
Àn
);

1272 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1274 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Method: ",

1276 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last,

1277 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
d©a
,

1278 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn
);

1279 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1281 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-User: ", ("Auth-User: ") - 1);

1282 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
logö
.
d©a
,Üogö.
Àn
);

1283 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1285 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Pass: ", ("Auth-Pass: ") - 1);

1286 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
∑sswd
.
d©a
,Öasswd.
Àn
);

1287 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1289 i‡(
s
->
auth_mëhod
 !
NGX_MAIL_AUTH_PLAIN
 && s->
ß…
.
Àn
) {

1290 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Salt: ", ("Auth-Salt: ") - 1);

1291 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

1293 
s
->
∑sswd
.
d©a
 = 
NULL
;

1296 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Protocol: ",

1298 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
cscf
->
¥Ÿocﬁ
->
«me
.
d©a
,

1299 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn
);

1300 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1302 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Auth-Logö-Aâem±: %ui" 
CRLF
,

1303 
s
->
logö_©ãm±
);

1305 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-IP: ", ("Client-IP: ") - 1);

1306 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

1307 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

1308 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1310 i‡(
s
->
ho°
.
Àn
) {

1311 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-Host: ",

1313 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ho°
.
d©a
, s->ho°.
Àn
);

1314 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1317 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

1321 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-Helo: ",

1323 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_hño
.
d©a
, s->smç_hño.
Àn
);

1324 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1326 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-From: ",

1328 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_‰om
.
d©a
, s->smç_‰om.
Àn
);

1329 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1331 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-To: ",

1333 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_to
.
d©a
, s->smç_to.
Àn
);

1334 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1338 #i‡(
NGX_MAIL_SSL
)

1340 i‡(
c
->
s¶
) {

1341 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "Auth-SSL: on" 
CRLF
,

1342 ("Auth-SSL: on" 
CRLF
) - 1);

1344 i‡(
vîify
.
Àn
) {

1345 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Verify: ",

1347 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
vîify
.
d©a
, vîify.
Àn
);

1348 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1351 i‡(
subje˘
.
Àn
) {

1352 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Subject: ",

1354 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
subje˘
.
d©a
, subje˘.
Àn
);

1355 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1358 i‡(
issuî
.
Àn
) {

1359 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Issuer: ",

1361 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
issuî
.
d©a
, issuî.
Àn
);

1362 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1365 i‡(
£rül
.
Àn
) {

1366 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Serial: ",

1368 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
£rül
.
d©a
, sîül.
Àn
);

1369 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1372 i‡(
fögî¥öt
.
Àn
) {

1373 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Fingerprint: ",

1375 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
fögî¥öt
.
d©a
, fögî¥öt.
Àn
);

1376 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1379 i‡(
˚π
.
Àn
) {

1380 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SSL-Cert: ",

1382 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˚π
.
d©a
, cît.
Àn
);

1383 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1389 i‡(
ahcf
->
hódî
.
Àn
) {

1390 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
hódî
.
d©a
,áhcf->hódî.
Àn
);

1394 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1396 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

1397 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1399 (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

1402  
b
;

1403 
	}
}

1406 
ngx_öt_t


1407 
	$ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,Çgx_°r_à*
esˇ≥d
)

1409 
u_ch¨
 *
p
;

1410 
uöçå_t
 
n
;

1412 
n
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1414 i‡(
n
 == 0) {

1415 *
esˇ≥d
 = *
ãxt
;

1416  
NGX_OK
;

1419 
esˇ≥d
->
Àn
 = 
ãxt
->À¿+ 
n
 * 2;

1421 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
esˇ≥d
->
Àn
);

1422 i‡(
p
 =
NULL
) {

1423  
NGX_ERROR
;

1426 (Ë
	`ngx_esˇ≥_uri
(
p
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1428 
esˇ≥d
->
d©a
 = 
p
;

1430  
NGX_OK
;

1431 
	}
}

1435 
	$ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1437 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

1439 
ahcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_auth_hâp_c⁄f_t
));

1440 i‡(
ahcf
 =
NULL
) {

1441  
NULL
;

1444 
ahcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1445 
ahcf
->
∑ss_˛õ¡_˚π
 = 
NGX_CONF_UNSET
;

1447 
ahcf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

1448 
ahcf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1450  
ahcf
;

1451 
	}
}

1455 
	$ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1457 
ngx_maû_auth_hâp_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1458 
ngx_maû_auth_hâp_c⁄f_t
 *
c⁄f
 = 
chûd
;

1460 
u_ch¨
 *
p
;

1461 
size_t
 
Àn
;

1462 
ngx_uöt_t
 
i
;

1463 
ngx_èbÀ_ñt_t
 *
hódî
;

1465 i‡(
c⁄f
->
≥î
 =
NULL
) {

1466 
c⁄f
->
≥î
 = 
¥ev
->peer;

1467 
c⁄f
->
ho°_hódî
 = 
¥ev
->host_header;

1468 
c⁄f
->
uri
 = 
¥ev
->uri;

1470 i‡(
c⁄f
->
≥î
 =
NULL
) {

1471 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1473 
c⁄f
->
fûe
, c⁄f->
löe
);

1475  
NGX_CONF_ERROR
;

1479 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

1481 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∑ss_˛õ¡_˚π
, 
¥ev
->pass_client_cert, 0);

1483 i‡(
c⁄f
->
hódîs
 =
NULL
) {

1484 
c⁄f
->
hódîs
 = 
¥ev
->headers;

1485 
c⁄f
->
hódî
 = 
¥ev
->header;

1488 i‡(
c⁄f
->
hódîs
 && c⁄f->
hódî
.
Àn
 == 0) {

1489 
Àn
 = 0;

1490 
hódî
 = 
c⁄f
->
hódîs
->
ñts
;

1491 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1492 
Àn
 +
hódî
[
i
].
key
.À¿+ 2 + hódî[i].
vÆue
.len + 2;

1495 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1496 i‡(
p
 =
NULL
) {

1497  
NGX_CONF_ERROR
;

1500 
c⁄f
->
hódî
.
Àn
 =Üen;

1501 
c⁄f
->
hódî
.
d©a
 = 
p
;

1503 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1504 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1505 *
p
++ = ':'; *p++ = ' ';

1506 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

1507 *
p
++ = 
CR
; *p++ = 
LF
;

1511  
NGX_CONF_OK
;

1512 
	}
}

1516 
	$ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1518 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1520 
ngx_°r_t
 *
vÆue
;

1521 
ngx_uæ_t
 
u
;

1523 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1525 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1527 
u
.
uæ
 = 
vÆue
[1];

1528 
u
.
deÁu…_p‹t
 = 80;

1529 
u
.
uri_∑π
 = 1;

1531 i‡(
	`ngx_°∫cmp
(
u
.
uæ
.
d©a
, "http://", 7) == 0) {

1532 
u
.
uæ
.
Àn
 -= 7;

1533 
u
.
uæ
.
d©a
 += 7;

1536 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1537 i‡(
u
.
îr
) {

1538 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1539 "%†öáuth_hâ∞\"%V\"", 
u
.
îr
, &u.
uæ
);

1542  
NGX_CONF_ERROR
;

1545 
ahcf
->
≥î
 = 
u
.
addrs
;

1547 i‡(
u
.
Ámûy
 !
AF_UNIX
) {

1548 
ahcf
->
ho°_hódî
 = 
u
.
ho°
;

1551 
	`ngx_°r_£t
(&
ahcf
->
ho°_hódî
, "localhost");

1554 
ahcf
->
uri
 = 
u
.uri;

1556 i‡(
ahcf
->
uri
.
Àn
 == 0) {

1557 
	`ngx_°r_£t
(&
ahcf
->
uri
, "/");

1560  
NGX_CONF_OK
;

1561 
	}
}

1565 
	$ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1567 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1569 
ngx_°r_t
 *
vÆue
;

1570 
ngx_èbÀ_ñt_t
 *
hódî
;

1572 i‡(
ahcf
->
hódîs
 =
NULL
) {

1573 
ahcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
));

1574 i‡(
ahcf
->
hódîs
 =
NULL
) {

1575  
NGX_CONF_ERROR
;

1579 
hódî
 = 
	`ngx_¨øy_push
(
ahcf
->
hódîs
);

1580 i‡(
hódî
 =
NULL
) {

1581  
NGX_CONF_ERROR
;

1584 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1586 
hódî
->
key
 = 
vÆue
[1];

1587 
hódî
->
vÆue
 = value[2];

1589  
NGX_CONF_OK
;

1590 
	}
}

	@src/mail/ngx_mail_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

15 *
ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

18 *
ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

19 *
c⁄f
);

20 *
ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_so_kì∑live
 = {

29 
ngx_c⁄f_dïªˇãd
, "so_keepalive",

34 
ngx_comm™d_t
 
	gngx_maû_c‹e_comm™ds
[] = {

36 { 
ngx_°rög
("server"),

37 
NGX_MAIL_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

38 
ngx_maû_c‹e_£rvî
,

41 
NULL
 },

43 { 
ngx_°rög
("listen"),

44 
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

45 
ngx_maû_c‹e_li°í
,

46 
NGX_MAIL_SRV_CONF_OFFSET
,

48 
NULL
 },

50 { 
ngx_°rög
("protocol"),

51 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

52 
ngx_maû_c‹e_¥Ÿocﬁ
,

53 
NGX_MAIL_SRV_CONF_OFFSET
,

55 
NULL
 },

57 { 
ngx_°rög
("so_keepalive"),

58 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

59 
ngx_c⁄f_£t_Êag_¶Ÿ
,

60 
NGX_MAIL_SRV_CONF_OFFSET
,

61 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
so_kì∑live
),

62 &
ngx_c⁄f_dïªˇãd_so_kì∑live
 },

64 { 
ngx_°rög
("timeout"),

65 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

66 
ngx_c⁄f_£t_m£c_¶Ÿ
,

67 
NGX_MAIL_SRV_CONF_OFFSET
,

68 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
timeout
),

69 
NULL
 },

71 { 
ngx_°rög
("server_name"),

72 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

73 
ngx_c⁄f_£t_°r_¶Ÿ
,

74 
NGX_MAIL_SRV_CONF_OFFSET
,

75 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
£rvî_«me
),

76 
NULL
 },

78 { 
ngx_°rög
("resolver"),

79 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

80 
ngx_maû_c‹e_ªsﬁvî
,

81 
NGX_MAIL_SRV_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("resolver_timeout"),

86 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_c⁄f_£t_m£c_¶Ÿ
,

88 
NGX_MAIL_SRV_CONF_OFFSET
,

89 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
ªsﬁvî_timeout
),

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_maû_moduÀ_t
 
	gngx_maû_c‹e_moduÀ_˘x
 = {

97 
NULL
,

99 
ngx_maû_c‹e_¸óã_maö_c⁄f
,

100 
NULL
,

102 
ngx_maû_c‹e_¸óã_§v_c⁄f
,

103 
ngx_maû_c‹e_mîge_§v_c⁄f


107 
ngx_moduÀ_t
 
	gngx_maû_c‹e_moduÀ
 = {

108 
NGX_MODULE_V1
,

109 &
ngx_maû_c‹e_moduÀ_˘x
,

110 
ngx_maû_c‹e_comm™ds
,

111 
NGX_MAIL_MODULE
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NGX_MODULE_V1_PADDING


124 
	$ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

126 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

128 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_maö_c⁄f_t
));

129 i‡(
cmcf
 =
NULL
) {

130  
NULL
;

133 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

134 (
ngx_maû_c‹e_§v_c⁄f_t
 *))

135 !
NGX_OK
)

137  
NULL
;

140 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
li°í
, 
cf
->
poﬁ
, 4, (
ngx_maû_li°í_t
))

141 !
NGX_OK
)

143  
NULL
;

146  
cmcf
;

147 
	}
}

151 
	$ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

153 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

155 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_§v_c⁄f_t
));

156 i‡(
cscf
 =
NULL
) {

157  
NULL
;

166 
cscf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

167 
cscf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

168 
cscf
->
so_kì∑live
 = 
NGX_CONF_UNSET
;

170 
cscf
->
ªsﬁvî
 = 
NGX_CONF_UNSET_PTR
;

172 
cscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

173 
cscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

175  
cscf
;

176 
	}
}

180 
	$ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

182 
ngx_maû_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

183 
ngx_maû_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

185 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

186 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
, 
¥ev
->resolver_timeout,

189 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
so_kì∑live
, 
¥ev
->so_keepalive, 0);

192 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
£rvî_«me
, 
¥ev
->server_name, "");

194 i‡(
c⁄f
->
£rvî_«me
.
Àn
 == 0) {

195 
c⁄f
->
£rvî_«me
 = 
cf
->
cy˛e
->
ho°«me
;

198 i‡(
c⁄f
->
¥Ÿocﬁ
 =
NULL
) {

199 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

201 
c⁄f
->
fûe_«me
, c⁄f->
löe
);

202  
NGX_CONF_ERROR
;

205 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªsﬁvî
, 
¥ev
->ªsﬁvî, 
NULL
);

207  
NGX_CONF_OK
;

208 
	}
}

212 
	$ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

214 *
rv
;

215 *
mc⁄f
;

216 
ngx_uöt_t
 
m
;

217 
ngx_c⁄f_t
 
pcf
;

218 
ngx_maû_moduÀ_t
 *
moduÀ
;

219 
ngx_maû_c⁄f_˘x_t
 *
˘x
, *
maû_˘x
;

220 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

221 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

223 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

224 i‡(
˘x
 =
NULL
) {

225  
NGX_CONF_ERROR
;

228 
maû_˘x
 = 
cf
->
˘x
;

229 
˘x
->
maö_c⁄f
 = 
maû_˘x
->main_conf;

233 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

234 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

235  
NGX_CONF_ERROR
;

238 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

239 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

243 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

245 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

246 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

247 i‡(
mc⁄f
 =
NULL
) {

248  
NGX_CONF_ERROR
;

251 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

257 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

258 
cscf
->
˘x
 = ctx;

260 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

262 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

263 i‡(
cscÂ
 =
NULL
) {

264  
NGX_CONF_ERROR
;

267 *
cscÂ
 = 
cscf
;

272 
pcf
 = *
cf
;

273 
cf
->
˘x
 = ctx;

274 
cf
->
cmd_ty≥
 = 
NGX_MAIL_SRV_CONF
;

276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

278 *
cf
 = 
pcf
;

280  
rv
;

281 
	}
}

285 
	$ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

287 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

289 
size_t
 
Àn
, 
off
;

290 
ö_p‹t_t
 
p‹t
;

291 
ngx_°r_t
 *
vÆue
;

292 
ngx_uæ_t
 
u
;

293 
ngx_uöt_t
 
i
, 
m
;

294 
sockaddr
 *
ß
;

295 
ngx_maû_li°í_t
 *
ls
;

296 
ngx_maû_moduÀ_t
 *
moduÀ
;

297 
sockaddr_ö
 *
sö
;

298 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

299 #i‡(
NGX_HAVE_INET6
)

300 
sockaddr_ö6
 *
sö6
;

303 
vÆue
 = 
cf
->
¨gs
->
ñts
;

305 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

307 
u
.
uæ
 = 
vÆue
[1];

308 
u
.
li°í
 = 1;

310 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

311 i‡(
u
.
îr
) {

312 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

314 
u
.
îr
, &u.
uæ
);

317  
NGX_CONF_ERROR
;

320 
cmcf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

322 
ls
 = 
cmcf
->
li°í
.
ñts
;

324 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

326 
ß
 = (
sockaddr
 *Ë
ls
[
i
].sockaddr;

328 i‡(
ß
->
ß_Ámûy
 !
u
.
Ámûy
) {

332 
ß
->
ß_Ámûy
) {

334 #i‡(
NGX_HAVE_INET6
)

335 
AF_INET6
:

336 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

337 
Àn
 = 16;

338 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

339 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

343 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

344 
AF_UNIX
:

345 
off
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

346 
Àn
 = (((
sockaddr_un
 *Ë
ß
)->
sun_∑th
);

347 
p‹t
 = 0;

352 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

353 
Àn
 = 4;

354 
sö
 = (
sockaddr_ö
 *Ë
ß
;

355 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

359 i‡(
	`ngx_memcmp
(
ls
[
i
].
sockaddr
 + 
off
, 
u
.sockadd∏+ off, 
Àn
) != 0) {

363 i‡(
p‹t
 !
u
.port) {

367 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

368 "du∂iˇã \"%V\"áddªs†™dÖ‹à∑ú", &
u
.
uæ
);

369  
NGX_CONF_ERROR
;

372 
ls
 = 
	`ngx_¨øy_push
(&
cmcf
->
li°í
);

373 i‡(
ls
 =
NULL
) {

374  
NGX_CONF_ERROR
;

377 
	`ngx_memzîo
(
ls
, (
ngx_maû_li°í_t
));

379 
	`ngx_mem˝y
(
ls
->
sockaddr
, 
u
.sockaddr, u.
sockÀn
);

381 
ls
->
sockÀn
 = 
u
.socklen;

382 
ls
->
wûdˇrd
 = 
u
.wildcard;

383 
ls
->
˘x
 = 
cf
->ctx;

385 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

386 
ls
->
ùv6⁄ly
 = 1;

389 i‡(
cscf
->
¥Ÿocﬁ
 =
NULL
) {

390 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

391 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

395 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

397 i‡(
moduÀ
->
¥Ÿocﬁ
 =
NULL
) {

401 
i
 = 0; 
moduÀ
->
¥Ÿocﬁ
->
p‹t
[i]; i++) {

402 i‡(
moduÀ
->
¥Ÿocﬁ
->
p‹t
[
i
] =
u
.port) {

403 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

410 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

412 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "bind") == 0) {

413 
ls
->
böd
 = 1;

417 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "ipv6only=o", 10) == 0) {

418 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

419 
sockaddr
 *
ß
;

420 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

422 
ß
 = (
sockaddr
 *Ë
ls
->sockaddr;

424 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

426 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "n") == 0) {

427 
ls
->
ùv6⁄ly
 = 1;

429 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "ff") == 0) {

430 
ls
->
ùv6⁄ly
 = 0;

433 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

435 &
vÆue
[
i
].
d©a
[9]);

436  
NGX_CONF_ERROR
;

439 
ls
->
böd
 = 1;

442 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
ls
->
sockÀn
, 
buf
,

443 
NGX_SOCKADDR_STRLEN
, 1);

445 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

447 "⁄ádd∏\"%*s\", ign‹ed", 
Àn
, 
buf
);

452 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

455  
NGX_CONF_ERROR
;

459 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "ssl") == 0) {

460 #i‡(
NGX_MAIL_SSL
)

461 
ls
->
s¶
 = 1;

464 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

467  
NGX_CONF_ERROR
;

471 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "so_keepalive=", 13) == 0) {

473 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "on") == 0) {

474 
ls
->
so_kì∑live
 = 1;

476 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "off") == 0) {

477 
ls
->
so_kì∑live
 = 2;

481 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

482 
u_ch¨
 *
p
, *
íd
;

483 
ngx_°r_t
 
s
;

485 
íd
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

486 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

488 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

489 i‡(
p
 =
NULL
) {

490 
p
 = 
íd
;

493 i‡(
p
 > 
s
.
d©a
) {

494 
s
.
Àn
 = 
p
 - s.
d©a
;

496 
ls
->
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

497 i‡(
ls
->
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

498 
övÆid_so_kì∑live
;

502 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

504 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

505 i‡(
p
 =
NULL
) {

506 
p
 = 
íd
;

509 i‡(
p
 > 
s
.
d©a
) {

510 
s
.
Àn
 = 
p
 - s.
d©a
;

512 
ls
->
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

513 i‡(
ls
->
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

514 
övÆid_so_kì∑live
;

518 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

520 i‡(
s
.
d©a
 < 
íd
) {

521 
s
.
Àn
 = 
íd
 - s.
d©a
;

523 
ls
->
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

524 i‡(
ls
->
t˝_kìp˙t
 =
NGX_ERROR
) {

525 
övÆid_so_kì∑live
;

529 i‡(
ls
->
t˝_kìpidÀ
 =0 &&Üs->
t˝_kìpötvl
 == 0

530 && 
ls
->
t˝_kìp˙t
 == 0)

532 
övÆid_so_kì∑live
;

535 
ls
->
so_kì∑live
 = 1;

539 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

542  
NGX_CONF_ERROR
;

547 
ls
->
böd
 = 1;

551 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

552 
övÆid_so_kì∑live
:

554 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

556 &
vÆue
[
i
].
d©a
[13]);

557  
NGX_CONF_ERROR
;

561 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

562 "thêövÆid \"%V\"Ö¨amëî", &
vÆue
[
i
]);

563  
NGX_CONF_ERROR
;

566  
NGX_CONF_OK
;

567 
	}
}

571 
	$ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

573 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

575 
ngx_°r_t
 *
vÆue
;

576 
ngx_uöt_t
 
m
;

577 
ngx_maû_moduÀ_t
 *
moduÀ
;

579 
vÆue
 = 
cf
->
¨gs
->
ñts
;

581 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

582 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

586 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

588 i‡(
moduÀ
->
¥Ÿocﬁ


589 && 
	`ngx_°rcmp
(
moduÀ
->
¥Ÿocﬁ
->
«me
.
d©a
, 
vÆue
[1].data) == 0)

591 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

593  
NGX_CONF_OK
;

597 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

598 "unknow¿¥Ÿocﬁ \"%V\"", &
vÆue
[1]);

599  
NGX_CONF_ERROR
;

600 
	}
}

604 
	$ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

606 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

608 
ngx_°r_t
 *
vÆue
;

610 
vÆue
 = 
cf
->
¨gs
->
ñts
;

612 i‡(
cscf
->
ªsﬁvî
 !
NGX_CONF_UNSET_PTR
) {

616 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

617 
cscf
->
ªsﬁvî
 = 
NULL
;

618  
NGX_CONF_OK
;

621 
cscf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

622 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

623  
NGX_CONF_ERROR
;

626  
NGX_CONF_OK
;

627 
	}
}

631 
	$ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

633 *
p
 = 
c⁄f
;

635 
ngx_°r_t
 *
c
, *
vÆue
;

636 
ngx_uöt_t
 
i
;

637 
ngx_¨øy_t
 *
a
;

639 
a
 = (
ngx_¨øy_t
 *Ë(
p
 + 
cmd
->
off£t
);

641 
vÆue
 = 
cf
->
¨gs
->
ñts
;

643 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

644 
c
 = 
	`ngx_¨øy_push
(
a
);

645 i‡(
c
 =
NULL
) {

646  
NGX_CONF_ERROR
;

649 *
c
 = 
vÆue
[
i
];

652  
NGX_CONF_OK
;

653 
	}
}

	@src/mail/ngx_mail_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 
ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

16 #i‡(
NGX_MAIL_SSL
)

17 
ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
);

18 
ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_öt_t
 
ngx_maû_vîify_˚π
(
ngx_maû_£ssi⁄_t
 *
s
,

20 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
	$ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

27 
size_t
 
Àn
;

28 
ngx_uöt_t
 
i
;

29 
ngx_maû_p‹t_t
 *
p‹t
;

30 
sockaddr
 *
ß
;

31 
sockaddr_ö
 *
sö
;

32 
ngx_maû_log_˘x_t
 *
˘x
;

33 
ngx_maû_ö_addr_t
 *
addr
;

34 
ngx_maû_£ssi⁄_t
 *
s
;

35 
ngx_maû_addr_c⁄f_t
 *
addr_c⁄f
;

36 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

37 #i‡(
NGX_HAVE_INET6
)

38 
sockaddr_ö6
 *
sö6
;

39 
ngx_maû_ö6_addr_t
 *
addr6
;

45 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

47 i‡(
p‹t
->
«ddrs
 > 1) {

57 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

58 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

62 
ß
 = 
c
->
loˇl_sockaddr
;

64 
ß
->
ß_Ámûy
) {

66 #i‡(
NGX_HAVE_INET6
)

67 
AF_INET6
:

68 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

70 
addr6
 = 
p‹t
->
addrs
;

74 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

75 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

80 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

86 
sö
 = (
sockaddr_ö
 *Ë
ß
;

88 
addr
 = 
p‹t
->
addrs
;

92 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

93 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

98 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

104 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

106 #i‡(
NGX_HAVE_INET6
)

107 
AF_INET6
:

108 
addr6
 = 
p‹t
->
addrs
;

109 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

114 
addr
 = 
p‹t
->
addrs
;

115 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

120 
s
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_maû_£ssi⁄_t
));

121 i‡(
s
 =
NULL
) {

122 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

126 
s
->
sig«tuª
 = 
NGX_MAIL_MODULE
;

128 
s
->
maö_c⁄f
 = 
addr_c⁄f
->
˘x
->main_conf;

129 
s
->
§v_c⁄f
 = 
addr_c⁄f
->
˘x
->srv_conf;

131 
s
->
addr_ãxt
 = &
addr_c⁄f
->addr_text;

133 
c
->
d©a
 = 
s
;

134 
s
->
c⁄√˘i⁄
 = 
c
;

136 
Àn
 = 
	`ngx_sock_¡›
(
c
->
sockaddr
, c->
sockÀn
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 1);

138 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "*%uA client %*s connectedÅo %V",

139 
c
->
numbî
, 
Àn
, 
ãxt
, 
s
->
addr_ãxt
);

141 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_maû_log_˘x_t
));

142 i‡(
˘x
 =
NULL
) {

143 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

147 
˘x
->
˛õ¡
 = &
c
->
addr_ãxt
;

148 
˘x
->
£ssi⁄
 = 
s
;

150 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

151 
c
->
log
->
h™dÀr
 = 
ngx_maû_log_îr‹
;

152 
c
->
log
->
d©a
 = 
˘x
;

153 
c
->
log
->
a˘i⁄
 = "sending client greetingÜine";

155 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

157 #i‡(
NGX_MAIL_SSL
)

159 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

161 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

163 i‡(
s¶cf
->
íabÀ
) {

164 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

166 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

170 i‡(
addr_c⁄f
->
s¶
) {

172 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

174 i‡(
s¶cf
->
s¶
.
˘x
 =
NULL
) {

175 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

178 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

182 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

189 
	`ngx_maû_öô_£ssi⁄
(
c
);

190 
	}
}

193 #i‡(
NGX_MAIL_SSL
)

196 
	$ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
)

198 
ngx_c⁄√˘i⁄_t
 *
c
;

199 
ngx_maû_£ssi⁄_t
 *
s
;

200 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

202 
c
 = 
ªv
->
d©a
;

203 
s
 = 
c
->
d©a
;

204 
s
->
°¨âls
 = 1;

206 
c
->
log
->
a˘i⁄
 = "in starttls state";

208 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

210 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

211 
	}
}

215 
	$ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
)

217 
ngx_maû_£ssi⁄_t
 *
s
;

218 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

220 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
s¶
, 
c
, 0Ë=
NGX_ERROR
) {

221 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

225 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

227 
s
 = 
c
->
d©a
;

229 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

231 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

233 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_s¶_h™dshake_h™dÀr
;

238 
	`ngx_maû_s¶_h™dshake_h™dÀr
(
c
);

239 
	}
}

243 
	$ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

245 
ngx_maû_£ssi⁄_t
 *
s
;

246 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

248 i‡(
c
->
s¶
->
h™dshaked
) {

250 
s
 = 
c
->
d©a
;

252 i‡(
	`ngx_maû_vîify_˚π
(
s
, 
c
Ë!
NGX_OK
) {

256 i‡(
s
->
°¨âls
) {

257 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

259 
c
->
ªad
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
öô_¥Ÿocﬁ
;

260 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

262 
cscf
->
¥Ÿocﬁ
->
	`öô_¥Ÿocﬁ
(
c
->
ªad
);

267 
c
->
ªad
->
ªady
 = 0;

269 
	`ngx_maû_öô_£ssi⁄
(
c
);

273 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

274 
	}
}

277 
ngx_öt_t


278 
	$ngx_maû_vîify_˚π
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

280 
rc
;

281 
X509
 *
˚π
;

282 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

283 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

285 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

287 i‡(!
s¶cf
->
vîify
) {

288  
NGX_OK
;

291 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

293 i‡(
rc
 !
X509_V_OK


294 && (
s¶cf
->
vîify
 !3 || !
	`ngx_s¶_vîify_îr‹_›ti⁄Æ
(
rc
)))

296 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

298 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

300 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
s¶cf
->
s¶
.
˘x
,

301 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

303 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

305 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
˚π_îr‹
;

306 
s
->
quô
 = 1;

308 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

310 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

311  
NGX_ERROR
;

314 i‡(
s¶cf
->
vîify
 == 1) {

315 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

317 i‡(
˚π
 =
NULL
) {

318 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

321 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
s¶cf
->
s¶
.
˘x
,

322 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

324 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

326 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
no_˚π
;

327 
s
->
quô
 = 1;

329 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

331 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

332  
NGX_ERROR
;

335 
	`X509_‰ì
(
˚π
);

338  
NGX_OK
;

339 
	}
}

345 
	$ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

347 
ngx_maû_£ssi⁄_t
 *
s
;

348 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

350 
s
 = 
c
->
d©a
;

352 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

354 
s
->
¥Ÿocﬁ
 = 
cscf
->¥Ÿocﬁ->
ty≥
;

356 
s
->
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

357 i‡(
s
->
˘x
 =
NULL
) {

358 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

362 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

364 
cscf
->
¥Ÿocﬁ
->
	`öô_£ssi⁄
(
s
, 
c
);

365 
	}
}

368 
ngx_öt_t


369 
	$ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

370 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
)

372 
s
->
ß…
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

373 (" <18446744073709551616.@>" 
CRLF
) - 1

374 + 
NGX_TIME_T_LEN


375 + 
cscf
->
£rvî_«me
.
Àn
);

376 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

377  
NGX_ERROR
;

380 
s
->
ß…
.
Àn
 = 
	`ngx_•rötf
(s->ß….
d©a
, "<%ul.%T@%V>" 
CRLF
,

381 
	`ngx_øndom
(), 
	`ngx_time
(), &
cscf
->
£rvî_«me
)

382 - 
s
->
ß…
.
d©a
;

384  
NGX_OK
;

385 
	}
}

388 #i‡(
NGX_MAIL_SSL
)

390 
ngx_öt_t


391 
	$ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

393 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

395 i‡(
c
->
s¶
) {

399 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

401 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

406 
	}
}

411 
ngx_öt_t


412 
	$ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
)

414 
u_ch¨
 *
p
, *
œ°
;

415 
ngx_°r_t
 *
¨g
, 
∂aö
;

417 
¨g
 = 
s
->
¨gs
.
ñts
;

419 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

420 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

421 "maûáuthÖœö: \"%V\"", &
¨g
[
n
]);

424 
∂aö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

425 i‡(
∂aö
.
d©a
 =
NULL
) {

426  
NGX_ERROR
;

429 i‡(
	`ngx_decode_ba£64
(&
∂aö
, &
¨g
[
n
]Ë!
NGX_OK
) {

430 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

432  
NGX_MAIL_PARSE_INVALID_COMMAND
;

435 
p
 = 
∂aö
.
d©a
;

436 
œ°
 = 
p
 + 
∂aö
.
Àn
;

438 
p
 < 
œ°
 && *p++) { }

440 i‡(
p
 =
œ°
) {

441 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

443  
NGX_MAIL_PARSE_INVALID_COMMAND
;

446 
s
->
logö
.
d©a
 = 
p
;

448 
p
 < 
œ°
 && *p) {Ö++; }

450 i‡(
p
 =
œ°
) {

451 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

453  
NGX_MAIL_PARSE_INVALID_COMMAND
;

456 
s
->
logö
.
Àn
 = 
p
++ - s->logö.
d©a
;

458 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

459 
s
->
∑sswd
.
d©a
 = 
p
;

461 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

462 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

463 "maûáuthÖœö: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

466  
NGX_DONE
;

467 
	}
}

470 
ngx_öt_t


471 
	$ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

472 
ngx_uöt_t
 
n
)

474 
ngx_°r_t
 *
¨g
;

476 
¨g
 = 
s
->
¨gs
.
ñts
;

478 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

479 "maûáuthÜogö u£∫ame: \"%V\"", &
¨g
[
n
]);

481 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

482 i‡(
s
->
logö
.
d©a
 =
NULL
) {

483  
NGX_ERROR
;

486 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[
n
]Ë!
NGX_OK
) {

487 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

489  
NGX_MAIL_PARSE_INVALID_COMMAND
;

492 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

493 "maûáuthÜogö u£∫ame: \"%V\"", &
s
->
logö
);

495  
NGX_OK
;

496 
	}
}

499 
ngx_öt_t


500 
	$ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

502 
ngx_°r_t
 *
¨g
;

504 
¨g
 = 
s
->
¨gs
.
ñts
;

506 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

507 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

508 "maûáuthÜogöÖassw‹d: \"%V\"", &
¨g
[0]);

511 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

512 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

513 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

514  
NGX_ERROR
;

517 i‡(
	`ngx_decode_ba£64
(&
s
->
∑sswd
, &
¨g
[0]Ë!
NGX_OK
) {

518 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

520  
NGX_MAIL_PARSE_INVALID_COMMAND
;

523 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

524 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

525 "maûáuthÜogöÖassw‹d: \"%V\"", &
s
->
∑sswd
);

528  
NGX_DONE
;

529 
	}
}

532 
ngx_öt_t


533 
	$ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

534 *
¥efix
, 
size_t
 
Àn
)

536 
u_ch¨
 *
p
;

537 
ngx_°r_t
 
ß…
;

538 
ngx_uöt_t
 
n
;

540 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
 + 
	`ngx_ba£64_ícoded_Àngth
(
s
->
ß…
.len) + 2);

541 i‡(
p
 =
NULL
) {

542  
NGX_ERROR
;

545 
ß…
.
d©a
 = 
	`ngx_˝ymem
(
p
, 
¥efix
, 
Àn
);

546 
s
->
ß…
.
Àn
 -= 2;

548 
	`ngx_ícode_ba£64
(&
ß…
, &
s
->salt);

550 
s
->
ß…
.
Àn
 += 2;

551 
n
 = 
Àn
 + 
ß…
.len;

552 
p
[
n
++] = 
CR
;Ö[n++] = 
LF
;

554 
s
->
out
.
Àn
 = 
n
;

555 
s
->
out
.
d©a
 = 
p
;

557  
NGX_OK
;

558 
	}
}

561 
ngx_öt_t


562 
	$ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

564 
u_ch¨
 *
p
, *
œ°
;

565 
ngx_°r_t
 *
¨g
;

567 
¨g
 = 
s
->
¨gs
.
ñts
;

569 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

570 "maûáuth cøm-md5: \"%V\"", &
¨g
[0]);

572 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

573 i‡(
s
->
logö
.
d©a
 =
NULL
) {

574  
NGX_ERROR
;

577 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[0]Ë!
NGX_OK
) {

578 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

580  
NGX_MAIL_PARSE_INVALID_COMMAND
;

583 
p
 = 
s
->
logö
.
d©a
;

584 
œ°
 = 
p
 + 
s
->
logö
.
Àn
;

586 
p
 < 
œ°
) {

587 i‡(*
p
++ == ' ') {

588 
s
->
logö
.
Àn
 = 
p
 - s->logö.
d©a
 - 1;

589 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

590 
s
->
∑sswd
.
d©a
 = 
p
;

595 i‡(
s
->
∑sswd
.
Àn
 != 32) {

596 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

598  
NGX_MAIL_PARSE_INVALID_COMMAND
;

601 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

602 "maûáuth cøm-md5: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

604 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_CRAM_MD5
;

606  
NGX_DONE
;

607 
	}
}

611 
	$ngx_maû_£nd
(
ngx_evít_t
 *
wev
)

613 
ngx_öt_t
 
n
;

614 
ngx_c⁄√˘i⁄_t
 *
c
;

615 
ngx_maû_£ssi⁄_t
 *
s
;

616 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

618 
c
 = 
wev
->
d©a
;

619 
s
 = 
c
->
d©a
;

621 i‡(
wev
->
timedout
) {

622 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

623 
c
->
timedout
 = 1;

624 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

628 i‡(
s
->
out
.
Àn
 == 0) {

629 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

630 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

636 
n
 = 
c
->
	`£nd
(c, 
s
->
out
.
d©a
, s->out.
Àn
);

638 i‡(
n
 > 0) {

639 
s
->
out
.
d©a
 +
n
;

640 
s
->
out
.
Àn
 -
n
;

642 i‡(
s
->
out
.
Àn
 != 0) {

643 
agaö
;

646 i‡(
wev
->
timî_£t
) {

647 
	`ngx_dñ_timî
(
wev
);

650 i‡(
s
->
quô
) {

651 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

655 i‡(
s
->
blocked
) {

656 
c
->
ªad
->
	`h™dÀr
(c->read);

662 i‡(
n
 =
NGX_ERROR
) {

663 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

669 
agaö
:

671 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

673 
	`ngx_add_timî
(
c
->
wrôe
, 
cscf
->
timeout
);

675 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

676 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

679 
	}
}

682 
ngx_öt_t


683 
	$ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

685 
ssize_t
 
n
;

686 
ngx_öt_t
 
rc
;

687 
ngx_°r_t
 
l
;

688 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

690 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

692 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

693 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

694  
NGX_ERROR
;

697 i‡(
n
 > 0) {

698 
s
->
buf„r
->
œ°
 +
n
;

701 i‡(
n
 =
NGX_AGAIN
) {

702 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

703 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

704  
NGX_ERROR
;

707 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

708  
NGX_AGAIN
;

712 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

714 
rc
 = 
cscf
->
¥Ÿocﬁ
->
	`∑r£_comm™d
(
s
);

716 i‡(
rc
 =
NGX_AGAIN
) {

718 i‡(
s
->
buf„r
->
œ°
 < s->buf„r->
íd
) {

719  
rc
;

722 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

723 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

725 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

726 "˛õ¡ síàtoÿl⁄g comm™d \"%V\"", &
l
);

728 
s
->
quô
 = 1;

730  
NGX_MAIL_PARSE_INVALID_COMMAND
;

733 i‡(
rc
 =
NGX_IMAP_NEXT
 ||Ñ¯=
NGX_MAIL_PARSE_INVALID_COMMAND
) {

734  
rc
;

737 i‡(
rc
 =
NGX_ERROR
) {

738 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

739  
NGX_ERROR
;

742  
NGX_OK
;

743 
	}
}

747 
	$ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

749 
s
->
¨gs
.
√…s
 = 0;

751 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

752 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

753 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

756 
s
->
°©e
 = 0;

758 i‡(
c
->
ªad
->
timî_£t
) {

759 
	`ngx_dñ_timî
(
c
->
ªad
);

762 
s
->
logö_©ãm±
++;

764 
	`ngx_maû_auth_hâp_öô
(
s
);

765 
	}
}

769 
	$ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

771 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

773 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

775 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
öã∫Æ_£rvî_îr‹
;

776 
s
->
quô
 = 1;

778 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

779 
	}
}

783 
	$ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

785 
ngx_poﬁ_t
 *
poﬁ
;

787 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

788 "˛o£ maû c⁄√˘i⁄: %d", 
c
->
fd
);

790 #i‡(
NGX_MAIL_SSL
)

792 i‡(
c
->
s¶
) {

793 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

794 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_˛o£_c⁄√˘i⁄
;

801 #i‡(
NGX_STAT_STUB
)

802 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

805 
c
->
de°royed
 = 1;

807 
poﬁ
 = 
c
->pool;

809 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

811 
	`ngx_de°roy_poﬁ
(
poﬁ
);

812 
	}
}

815 
u_ch¨
 *

816 
	$ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

818 
u_ch¨
 *
p
;

819 
ngx_maû_£ssi⁄_t
 *
s
;

820 
ngx_maû_log_˘x_t
 *
˘x
;

822 i‡(
log
->
a˘i⁄
) {

823 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

824 
Àn
 -
p
 - 
buf
;

825 
buf
 = 
p
;

828 
˘x
 = 
log
->
d©a
;

830 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", 
˘x
->
˛õ¡
);

831 
Àn
 -
p
 - 
buf
;

832 
buf
 = 
p
;

834 
s
 = 
˘x
->
£ssi⁄
;

836 i‡(
s
 =
NULL
) {

837  
p
;

840 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, "%s, server: %V",

841 
s
->
°¨âls
 ? " using starttls" : "",

842 
s
->
addr_ãxt
);

843 
Àn
 -
p
 - 
buf
;

844 
buf
 = 
p
;

846 i‡(
s
->
logö
.
Àn
 == 0) {

847  
p
;

850 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Üogö: \"%V\"", &
s
->
logö
);

851 
Àn
 -
p
 - 
buf
;

852 
buf
 = 
p
;

854 i‡(
s
->
¥oxy
 =
NULL
) {

855  
p
;

858 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", up°ªam: %V", 
s
->
¥oxy
->
up°ªam
.
«me
);

860  
p
;

861 
	}
}

	@src/mail/ngx_mail_imap_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
,

16 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
,

18 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_öt_t
 
ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
,

20 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

22 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
u_ch¨
 
	gim≠_gªëög
[] = "* OK IMAP4Ñódy" 
CRLF
;

26 
u_ch¨
 
	gim≠_°¨
[] = "* ";

27 
u_ch¨
 
	gim≠_ok
[] = "OK com∂ëed" 
CRLF
;

28 
u_ch¨
 
	gim≠_√xt
[] = "+ OK" 
CRLF
;

29 
u_ch¨
 
	gim≠_∂aö_√xt
[] = "+ " 
CRLF
;

30 
u_ch¨
 
	gim≠_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

31 
u_ch¨
 
	gim≠_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

32 
u_ch¨
 
	gim≠_bye
[] = "* BYE" 
CRLF
;

33 
u_ch¨
 
	gim≠_övÆid_comm™d
[] = "BAD invÆid comm™d" 
CRLF
;

37 
	$ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

39 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

41 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

43 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_gªëög
);

45 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_öô_¥Ÿocﬁ
;

47 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

49 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

50 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

53 
	`ngx_maû_£nd
(
c
->
wrôe
);

54 
	}
}

58 
	$ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

60 
ngx_c⁄√˘i⁄_t
 *
c
;

61 
ngx_maû_£ssi⁄_t
 *
s
;

62 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

64 
c
 = 
ªv
->
d©a
;

66 
c
->
log
->
a˘i⁄
 = "ináuth state";

68 i‡(
ªv
->
timedout
) {

69 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

70 
c
->
timedout
 = 1;

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

75 
s
 = 
c
->
d©a
;

77 i‡(
s
->
buf„r
 =
NULL
) {

78 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

79 =
NGX_ERROR
)

81 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

85 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

87 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
iscf
->
˛õ¡_buf„r_size
);

88 i‡(
s
->
buf„r
 =
NULL
) {

89 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

94 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

95 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_auth_°©e
;

97 
	`ngx_maû_im≠_auth_°©e
(
ªv
);

98 
	}
}

102 
	$ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
)

104 
u_ch¨
 *
p
, *
d°
, *
§c
, *
íd
;

105 
ngx_°r_t
 *
¨g
;

106 
ngx_öt_t
 
rc
;

107 
ngx_uöt_t
 
èg
, 
i
;

108 
ngx_c⁄√˘i⁄_t
 *
c
;

109 
ngx_maû_£ssi⁄_t
 *
s
;

111 
c
 = 
ªv
->
d©a
;

112 
s
 = 
c
->
d©a
;

114 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth state");

116 i‡(
ªv
->
timedout
) {

117 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

118 
c
->
timedout
 = 1;

119 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

123 i‡(
s
->
out
.
Àn
) {

124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imap send handler busy");

125 
s
->
blocked
 = 1;

129 
s
->
blocked
 = 0;

131 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

133 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

137 
èg
 = 1;

138 
s
->
ãxt
.
Àn
 = 0;

139 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_ok
);

141 i‡(
rc
 =
NGX_OK
) {

143 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth command: %i",

144 
s
->
comm™d
);

146 i‡(
s
->
back¶ash
) {

148 
¨g
 = 
s
->
¨gs
.
ñts
;

150 
i
 = 0; i < 
s
->
¨gs
.
√…s
; i++) {

151 
d°
 = 
¨g
[
i
].
d©a
;

152 
íd
 = 
d°
 + 
¨g
[
i
].
Àn
;

154 
§c
 = 
d°
; sr¯< 
íd
; dst++) {

155 *
d°
 = *
§c
;

156 i‡(*
§c
++ == '\\') {

157 *
d°
 = *
§c
++;

161 
¨g
[
i
].
Àn
 = 
d°
 -árg[i].
d©a
;

164 
s
->
back¶ash
 = 0;

167 
s
->
maû_°©e
) {

169 
ngx_im≠_°¨t
:

171 
s
->
comm™d
) {

173 
NGX_IMAP_LOGIN
:

174 
rc
 = 
	`ngx_maû_im≠_logö
(
s
, 
c
);

177 
NGX_IMAP_AUTHENTICATE
:

178 
rc
 = 
	`ngx_maû_im≠_authítiˇã
(
s
, 
c
);

179 
èg
 = (
rc
 !
NGX_OK
);

182 
NGX_IMAP_CAPABILITY
:

183 
rc
 = 
	`ngx_maû_im≠_ˇ∑bûôy
(
s
, 
c
);

186 
NGX_IMAP_LOGOUT
:

187 
s
->
quô
 = 1;

188 
	`ngx_°r_£t
(&
s
->
ãxt
, 
im≠_bye
);

191 
NGX_IMAP_NOOP
:

194 
NGX_IMAP_STARTTLS
:

195 
rc
 = 
	`ngx_maû_im≠_°¨âls
(
s
, 
c
);

199 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

205 
ngx_im≠_auth_logö_u£∫ame
:

206 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

208 
èg
 = 0;

209 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

210 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

214 
ngx_im≠_auth_logö_∑ssw‹d
:

215 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

218 
ngx_im≠_auth_∂aö
:

219 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

222 
ngx_im≠_auth_¸am_md5
:

223 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

227 } i‡(
rc
 =
NGX_IMAP_NEXT
) {

228 
èg
 = 0;

229 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_√xt
);

232 
rc
) {

234 
NGX_DONE
:

235 
	`ngx_maû_auth
(
s
, 
c
);

238 
NGX_ERROR
:

239 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

242 
NGX_MAIL_PARSE_INVALID_COMMAND
:

243 
s
->
°©e
 = 0;

244 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_övÆid_comm™d
);

245 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

249 i‡(
èg
) {

250 i‡(
s
->
èg
.
Àn
 == 0) {

251 
	`ngx_°r_£t
(&
s
->
èg
, 
im≠_°¨
);

254 i‡(
s
->
ègged_löe
.
Àn
 < s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len) {

255 
s
->
ègged_löe
.
Àn
 = s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len;

256 
s
->
ègged_löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->ègged_löe.
Àn
);

257 i‡(
s
->
ègged_löe
.
d©a
 =
NULL
) {

258 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

263 
p
 = 
s
->
ègged_löe
.
d©a
;

265 i‡(
s
->
ãxt
.
Àn
) {

266 
p
 = 
	`ngx_˝ymem
’, 
s
->
ãxt
.
d©a
, s->ãxt.
Àn
);

269 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

270 
	`ngx_mem˝y
(
p
, 
s
->
out
.
d©a
, s->out.
Àn
);

272 
s
->
out
.
Àn
 = s->
ãxt
.À¿+ s->
èg
.len + s->out.len;

273 
s
->
out
.
d©a
 = s->
ègged_löe
.data;

276 i‡(
rc
 !
NGX_IMAP_NEXT
) {

277 
s
->
¨gs
.
√…s
 = 0;

279 i‡(
s
->
°©e
) {

281 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
 + s->
èg
.
Àn
;

282 
s
->
buf„r
->
pos
 = s->
¨g_°¨t
;

283 
s
->
buf„r
->
œ°
 = s->
¨g_°¨t
;

286 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

287 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

288 
s
->
èg
.
Àn
 = 0;

292 
	`ngx_maû_£nd
(
c
->
wrôe
);

293 
	}
}

296 
ngx_öt_t


297 
	$ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

299 
ngx_°r_t
 *
¨g
;

301 #i‡(
NGX_MAIL_SSL
)

302 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

303  
NGX_MAIL_PARSE_INVALID_COMMAND
;

307 
¨g
 = 
s
->
¨gs
.
ñts
;

309 i‡(
s
->
¨gs
.
√…s
 !2 || 
¨g
[0].
Àn
 == 0) {

310  
NGX_MAIL_PARSE_INVALID_COMMAND
;

313 
s
->
logö
.
Àn
 = 
¨g
[0].len;

314 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

315 i‡(
s
->
logö
.
d©a
 =
NULL
) {

316  
NGX_ERROR
;

319 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

321 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

332 &
s
->
logö
, &s->
∑sswd
);

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

335 "im≠Üogö:\"%V\"", &
s
->
logö
);

338  
NGX_DONE
;

339 
	}
}

342 
ngx_öt_t


343 
	$ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

345 
ngx_öt_t
 
rc
;

346 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

347 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

349 #i‡(
NGX_MAIL_SSL
)

350 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

351  
NGX_MAIL_PARSE_INVALID_COMMAND
;

355 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

357 
rc
) {

359 
NGX_MAIL_AUTH_LOGIN
:

361 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_u£∫ame
);

362 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_u£∫ame
;

364  
NGX_OK
;

366 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

368 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

369 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

371  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

373 
NGX_MAIL_AUTH_PLAIN
:

375 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∂aö_√xt
);

376 
s
->
maû_°©e
 = 
ngx_im≠_auth_∂aö
;

378  
NGX_OK
;

380 
NGX_MAIL_AUTH_CRAM_MD5
:

382 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

384 i‡(!(
iscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

385  
NGX_MAIL_PARSE_INVALID_COMMAND
;

388 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

389 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

391 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

392  
NGX_ERROR
;

396 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

397 
s
->
maû_°©e
 = 
ngx_im≠_auth_¸am_md5
;

398  
NGX_OK
;

401  
NGX_ERROR
;

404  
rc
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

411 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

413 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

415 #i‡(
NGX_MAIL_SSL
)

417 i‡(
c
->
s¶
 =
NULL
) {

418 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

420 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

422 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

423 
s
->
ãxt
 = 
iscf
->
°¨âls_ˇ∑bûôy
;

424  
NGX_OK
;

427 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

428 
s
->
ãxt
 = 
iscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

429  
NGX_OK
;

434 
s
->
ãxt
 = 
iscf
->
ˇ∑bûôy
;

436  
NGX_OK
;

437 
	}
}

440 
ngx_öt_t


441 
	$ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

443 #i‡(
NGX_MAIL_SSL
)

444 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

446 i‡(
c
->
s¶
 =
NULL
) {

447 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

448 i‡(
s¶cf
->
°¨âls
) {

449 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

450  
NGX_OK
;

456  
NGX_MAIL_PARSE_INVALID_COMMAND
;

457 
	}
}

	@src/mail/ngx_mail_imap_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 *
ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_im≠_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("IMAP4"),

22 
ngx_°rög
("IMAP4rev1"),

23 
ngx_°rög
("UIDPLUS"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_im≠_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_im≠_auth_mëhods_«mes
[] = {

37 
ngx_°rög
("AUTH=PLAIN"),

38 
ngx_°rög
("AUTH=LOGIN"),

39 
ngx_nuŒ_°rög
,

40 
ngx_°rög
("AUTH=CRAM-MD5"),

41 
ngx_nuŒ_°rög


45 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_im≠_¥Ÿocﬁ
 = {

46 
ngx_°rög
("imap"),

48 
NGX_MAIL_IMAP_PROTOCOL
,

50 
ngx_maû_im≠_öô_£ssi⁄
,

51 
ngx_maû_im≠_öô_¥Ÿocﬁ
,

52 
ngx_maû_im≠_∑r£_comm™d
,

53 
ngx_maû_im≠_auth_°©e
,

55 
ngx_°rög
("* BAD i¡î«»£rvîÉº‹" 
CRLF
),

56 
ngx_°rög
("* BYE SSL cîtifiˇãÉº‹" 
CRLF
),

57 
ngx_°rög
("* BYE Nÿªquúed SSL cîtifiˇã" 
CRLF
)

61 
ngx_comm™d_t
 
	gngx_maû_im≠_comm™ds
[] = {

63 { 
ngx_°rög
("imap_client_buffer"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_size_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

68 
NULL
 },

70 { 
ngx_°rög
("imap_capabilities"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

72 
ngx_maû_ˇ∑bûôõs
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
ˇ∑bûôõs
),

75 
NULL
 },

77 { 
ngx_°rög
("imap_auth"),

78 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

79 
ngx_c⁄f_£t_bômask_¶Ÿ
,

80 
NGX_MAIL_SRV_CONF_OFFSET
,

81 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
auth_mëhods
),

82 &
ngx_maû_im≠_auth_mëhods
 },

84 
ngx_nuŒ_comm™d


88 
ngx_maû_moduÀ_t
 
	gngx_maû_im≠_moduÀ_˘x
 = {

89 &
ngx_maû_im≠_¥Ÿocﬁ
,

91 
NULL
,

92 
NULL
,

94 
ngx_maû_im≠_¸óã_§v_c⁄f
,

95 
ngx_maû_im≠_mîge_§v_c⁄f


99 
ngx_moduÀ_t
 
	gngx_maû_im≠_moduÀ
 = {

100 
NGX_MODULE_V1
,

101 &
ngx_maû_im≠_moduÀ_˘x
,

102 
ngx_maû_im≠_comm™ds
,

103 
NGX_MAIL_MODULE
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NGX_MODULE_V1_PADDING


116 
	$ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

118 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

120 
iscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_im≠_§v_c⁄f_t
));

121 i‡(
iscf
 =
NULL
) {

122  
NULL
;

125 
iscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

127 i‡(
	`ngx_¨øy_öô
(&
iscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

128 !
NGX_OK
)

130  
NULL
;

133  
iscf
;

134 
	}
}

138 
	$ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

140 
ngx_maû_im≠_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

141 
ngx_maû_im≠_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

143 
u_ch¨
 *
p
, *
auth
;

144 
size_t
 
size
;

145 
ngx_°r_t
 *
c
, *
d
;

146 
ngx_uöt_t
 
i
, 
m
;

148 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

149 
¥ev
->
˛õ¡_buf„r_size
,

150 (
size_t
Ë
ngx_∑gesize
);

152 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

153 
¥ev
->
auth_mëhods
,

154 (
NGX_CONF_BITMASK_SET


155 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

158 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

159 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

162 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

164 
d
 = 
ngx_maû_im≠_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

165 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

166 i‡(
c
 =
NULL
) {

167  
NGX_CONF_ERROR
;

170 *
c
 = *
d
;

174 
size
 = ("* CAPABILITY" 
CRLF
) - 1;

176 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

177 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

178 
size
 +1 + 
c
[
i
].
Àn
;

181 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

182 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

183 
m
 <<1, 
i
++)

185 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

186 
size
 +1 + 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
;

190 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

191 i‡(
p
 =
NULL
) {

192  
NGX_CONF_ERROR
;

195 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

196 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

198 
p
 = 
	`ngx_˝ymem
(p, "* CAPABILITY", ("* CAPABILITY") - 1);

200 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

201 *
p
++ = ' ';

202 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

205 
auth
 = 
p
;

207 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

208 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

209 
m
 <<1, 
i
++)

211 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

212 *
p
++ = ' ';

213 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
d©a
,

214 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
);

218 *
p
++ = 
CR
; *∞
LF
;

221 
size
 += (" STARTTLS") - 1;

223 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

224 i‡(
p
 =
NULL
) {

225  
NGX_CONF_ERROR
;

228 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

229 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

231 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

232 
c⁄f
->
ˇ∑bûôy
.
Àn
 - ((
CRLF
) - 1));

233 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS", (" STARTTLS") - 1);

234 *
p
++ = 
CR
; *∞
LF
;

237 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
Ë+ (
CRLF
) - 1

240 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

241 i‡(
p
 =
NULL
) {

242  
NGX_CONF_ERROR
;

245 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

246 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

248 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

249 
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
);

250 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS LOGINDISABLED",

252 *
p
++ = 
CR
; *∞
LF
;

254  
NGX_CONF_OK
;

255 
	}
}

	@src/mail/ngx_mail_imap_module.h

8 #i‚de‡
_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
size_t
 
	m˛õ¡_buf„r_size
;

20 
ngx_°r_t
 
	mˇ∑bûôy
;

21 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

22 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

24 
ngx_uöt_t
 
	mauth_mëhods
;

26 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

27 } 
	tngx_maû_im≠_§v_c⁄f_t
;

30 
ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

32 
ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
);

33 
ngx_öt_t
 
ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

36 
ngx_moduÀ_t
 
ngx_maû_im≠_moduÀ
;

	@src/mail/ngx_mail_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

13 
	~<ngx_maû_im≠_moduÀ.h
>

14 
	~<ngx_maû_smç_moduÀ.h
>

17 
ngx_öt_t


18 
	$ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

20 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

21 
ngx_°r_t
 *
¨g
;

23 
sw_°¨t
 = 0,

24 
sw_•a˚s_bef‹e_¨gumít
,

25 
sw_¨gumít
,

26 
sw_Æmo°_d⁄e


27 } 
°©e
;

29 
°©e
 = 
s
->state;

31 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

32 
ch
 = *
p
;

34 
°©e
) {

37 
sw_°¨t
:

38 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

39 
c
 = 
s
->
buf„r
->
°¨t
;

41 i‡(
p
 - 
c
 == 4) {

43 
c0
 = 
	`ngx_touµî
(
c
[0]);

44 
c1
 = 
	`ngx_touµî
(
c
[1]);

45 
c2
 = 
	`ngx_touµî
(
c
[2]);

46 
c3
 = 
	`ngx_touµî
(
c
[3]);

48 i‡(
c0
 ='U' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'R')

50 
s
->
comm™d
 = 
NGX_POP3_USER
;

52 } i‡(
c0
 ='P' && 
c1
 ='A' && 
c2
 ='S' && 
c3
 == 'S')

54 
s
->
comm™d
 = 
NGX_POP3_PASS
;

56 } i‡(
c0
 ='A' && 
c1
 ='P' && 
c2
 ='O' && 
c3
 == 'P')

58 
s
->
comm™d
 = 
NGX_POP3_APOP
;

60 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

62 
s
->
comm™d
 = 
NGX_POP3_QUIT
;

64 } i‡(
c0
 ='C' && 
c1
 ='A' && 
c2
 ='P' && 
c3
 == 'A')

66 
s
->
comm™d
 = 
NGX_POP3_CAPA
;

68 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

70 
s
->
comm™d
 = 
NGX_POP3_AUTH
;

72 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

74 
s
->
comm™d
 = 
NGX_POP3_NOOP
;

75 #i‡(
NGX_MAIL_SSL
)

76 } i‡(
c0
 ='S' && 
c1
 ='T' && 
c2
 ='L' && 
c3
 == 'S')

78 
s
->
comm™d
 = 
NGX_POP3_STLS
;

81 
övÆid
;

85 
övÆid
;

88 
ch
) {

90 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

92 
CR
:

93 
°©e
 = 
sw_Æmo°_d⁄e
;

95 
LF
:

96 
d⁄e
;

101 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

102 
övÆid
;

107 
sw_•a˚s_bef‹e_¨gumít
:

108 
ch
) {

111 
CR
:

112 
°©e
 = 
sw_Æmo°_d⁄e
;

113 
s
->
¨g_íd
 = 
p
;

115 
LF
:

116 
s
->
¨g_íd
 = 
p
;

117 
d⁄e
;

119 i‡(
s
->
¨gs
.
√…s
 <= 2) {

120 
°©e
 = 
sw_¨gumít
;

121 
s
->
¨g_°¨t
 = 
p
;

124 
övÆid
;

128 
sw_¨gumít
:

129 
ch
) {

138 i‡(
s
->
comm™d
 =
NGX_POP3_USER


139 || 
s
->
comm™d
 =
NGX_POP3_PASS
)

146 
CR
:

147 
LF
:

148 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

149 i‡(
¨g
 =
NULL
) {

150  
NGX_ERROR
;

152 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

153 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

154 
s
->
¨g_°¨t
 = 
NULL
;

156 
ch
) {

158 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

160 
CR
:

161 
°©e
 = 
sw_Æmo°_d⁄e
;

163 
LF
:

164 
d⁄e
;

173 
sw_Æmo°_d⁄e
:

174 
ch
) {

175 
LF
:

176 
d⁄e
;

178 
övÆid
;

183 
s
->
buf„r
->
pos
 = 
p
;

184 
s
->
°©e
 = state;

186  
NGX_AGAIN
;

188 
d⁄e
:

190 
s
->
buf„r
->
pos
 = 
p
 + 1;

192 i‡(
s
->
¨g_°¨t
) {

193 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

194 i‡(
¨g
 =
NULL
) {

195  
NGX_ERROR
;

197 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

198 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

199 
s
->
¨g_°¨t
 = 
NULL
;

202 
s
->
°©e
 = (s->
comm™d
 !
NGX_POP3_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

204  
NGX_OK
;

206 
övÆid
:

208 
s
->
°©e
 = 
sw_°¨t
;

209 
s
->
¨g_°¨t
 = 
NULL
;

211  
NGX_MAIL_PARSE_INVALID_COMMAND
;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

218 
u_ch¨
 
ch
, *
p
, *
c
;

219 
ngx_°r_t
 *
¨g
;

221 
sw_°¨t
 = 0,

222 
sw_•a˚s_bef‹e_comm™d
,

223 
sw_comm™d
,

224 
sw_•a˚s_bef‹e_¨gumít
,

225 
sw_¨gumít
,

226 
sw_back¶ash
,

227 
sw_lôîÆ
,

228 
sw_no_sync_lôîÆ_¨gumít
,

229 
sw_°¨t_lôîÆ_¨gumít
,

230 
sw_lôîÆ_¨gumít
,

231 
sw_íd_lôîÆ_¨gumít
,

232 
sw_Æmo°_d⁄e


233 } 
°©e
;

235 
°©e
 = 
s
->state;

237 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

238 
ch
 = *
p
;

240 
°©e
) {

243 
sw_°¨t
:

244 
ch
) {

246 
s
->
èg
.
Àn
 = 
p
 - s->
buf„r
->
°¨t
 + 1;

247 
s
->
èg
.
d©a
 = s->
buf„r
->
°¨t
;

248 
°©e
 = 
sw_•a˚s_bef‹e_comm™d
;

250 
CR
:

251 
s
->
°©e
 = 
sw_°¨t
;

252  
NGX_MAIL_PARSE_INVALID_COMMAND
;

253 
LF
:

254 
s
->
°©e
 = 
sw_°¨t
;

255  
NGX_MAIL_PARSE_INVALID_COMMAND
;

259 
sw_•a˚s_bef‹e_comm™d
:

260 
ch
) {

263 
CR
:

264 
s
->
°©e
 = 
sw_°¨t
;

265  
NGX_MAIL_PARSE_INVALID_COMMAND
;

266 
LF
:

267 
s
->
°©e
 = 
sw_°¨t
;

268  
NGX_MAIL_PARSE_INVALID_COMMAND
;

270 
s
->
cmd_°¨t
 = 
p
;

271 
°©e
 = 
sw_comm™d
;

276 
sw_comm™d
:

277 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

279 
c
 = 
s
->
cmd_°¨t
;

281 
p
 - 
c
) {

284 i‡((
c
[0] == 'N' || c[0] == 'n')

285 && (
c
[1] == 'O'|| c[1] == 'o')

286 && (
c
[2] == 'O'|| c[2] == 'o')

287 && (
c
[3] == 'P'|| c[3] == 'p'))

289 
s
->
comm™d
 = 
NGX_IMAP_NOOP
;

292 
övÆid
;

297 i‡((
c
[0] == 'L'|| c[0] == 'l')

298 && (
c
[1] == 'O'|| c[1] == 'o')

299 && (
c
[2] == 'G'|| c[2] == 'g')

300 && (
c
[3] == 'I'|| c[3] == 'i')

301 && (
c
[4] == 'N'|| c[4] == 'n'))

303 
s
->
comm™d
 = 
NGX_IMAP_LOGIN
;

306 
övÆid
;

311 i‡((
c
[0] == 'L'|| c[0] == 'l')

312 && (
c
[1] == 'O'|| c[1] == 'o')

313 && (
c
[2] == 'G'|| c[2] == 'g')

314 && (
c
[3] == 'O'|| c[3] == 'o')

315 && (
c
[4] == 'U'|| c[4] == 'u')

316 && (
c
[5] == 'T'|| c[5] == 't'))

318 
s
->
comm™d
 = 
NGX_IMAP_LOGOUT
;

321 
övÆid
;

325 #i‡(
NGX_MAIL_SSL
)

327 i‡((
c
[0] == 'S'|| c[0] == 's')

328 && (
c
[1] == 'T'|| c[1] == 't')

329 && (
c
[2] == 'A'|| c[2] == 'a')

330 && (
c
[3] == 'R'|| c[3] == 'r')

331 && (
c
[4] == 'T'|| c[4] == 't')

332 && (
c
[5] == 'T'|| c[5] == 't')

333 && (
c
[6] == 'L'|| c[6] == 'l')

334 && (
c
[7] == 'S'|| c[7] == 's'))

336 
s
->
comm™d
 = 
NGX_IMAP_STARTTLS
;

339 
övÆid
;

345 i‡((
c
[0] == 'C'|| c[0] == 'c')

346 && (
c
[1] == 'A'|| c[1] == 'a')

347 && (
c
[2] == 'P'|| c[2] == 'p')

348 && (
c
[3] == 'A'|| c[3] == 'a')

349 && (
c
[4] == 'B'|| c[4] == 'b')

350 && (
c
[5] == 'I'|| c[5] == 'i')

351 && (
c
[6] == 'L'|| c[6] == 'l')

352 && (
c
[7] == 'I'|| c[7] == 'i')

353 && (
c
[8] == 'T'|| c[8] == 't')

354 && (
c
[9] == 'Y'|| c[9] == 'y'))

356 
s
->
comm™d
 = 
NGX_IMAP_CAPABILITY
;

359 
övÆid
;

364 i‡((
c
[0] == 'A'|| c[0] == 'a')

365 && (
c
[1] == 'U'|| c[1] == 'u')

366 && (
c
[2] == 'T'|| c[2] == 't')

367 && (
c
[3] == 'H'|| c[3] == 'h')

368 && (
c
[4] == 'E'|| c[4] == 'e')

369 && (
c
[5] == 'N'|| c[5] == 'n')

370 && (
c
[6] == 'T'|| c[6] == 't')

371 && (
c
[7] == 'I'|| c[7] == 'i')

372 && (
c
[8] == 'C'|| c[8] == 'c')

373 && (
c
[9] == 'A'|| c[9] == 'a')

374 && (
c
[10] == 'T'|| c[10] == 't')

375 && (
c
[11] == 'E'|| c[11] == 'e'))

377 
s
->
comm™d
 = 
NGX_IMAP_AUTHENTICATE
;

380 
övÆid
;

385 
övÆid
;

388 
ch
) {

390 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

392 
CR
:

393 
°©e
 = 
sw_Æmo°_d⁄e
;

395 
LF
:

396 
d⁄e
;

401 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

402 
övÆid
;

407 
sw_•a˚s_bef‹e_¨gumít
:

408 
ch
) {

411 
CR
:

412 
°©e
 = 
sw_Æmo°_d⁄e
;

413 
s
->
¨g_íd
 = 
p
;

415 
LF
:

416 
s
->
¨g_íd
 = 
p
;

417 
d⁄e
;

419 i‡(
s
->
¨gs
.
√…s
 <= 2) {

420 
s
->
quŸed
 = 1;

421 
s
->
¨g_°¨t
 = 
p
 + 1;

422 
°©e
 = 
sw_¨gumít
;

425 
övÆid
;

427 i‡(
s
->
¨gs
.
√…s
 <= 2) {

428 
°©e
 = 
sw_lôîÆ
;

431 
övÆid
;

433 i‡(
s
->
¨gs
.
√…s
 <= 2) {

434 
s
->
¨g_°¨t
 = 
p
;

435 
°©e
 = 
sw_¨gumít
;

438 
övÆid
;

442 
sw_¨gumít
:

443 i‡(
ch
 =' ' && 
s
->
quŸed
) {

447 
ch
) {

449 i‡(!
s
->
quŸed
) {

452 
s
->
quŸed
 = 0;

455 
CR
:

456 
LF
:

457 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

458 i‡(
¨g
 =
NULL
) {

459  
NGX_ERROR
;

461 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

462 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

463 
s
->
¨g_°¨t
 = 
NULL
;

465 
ch
) {

468 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

470 
CR
:

471 
°©e
 = 
sw_Æmo°_d⁄e
;

473 
LF
:

474 
d⁄e
;

478 i‡(
s
->
quŸed
) {

479 
s
->
back¶ash
 = 1;

480 
°©e
 = 
sw_back¶ash
;

486 
sw_back¶ash
:

487 
ch
) {

488 
CR
:

489 
LF
:

490 
övÆid
;

492 
°©e
 = 
sw_¨gumít
;

496 
sw_lôîÆ
:

497 i‡(
ch
 >= '0' && ch <= '9') {

498 
s
->
lôîÆ_Àn
 = s->lôîÆ_À¿* 10 + (
ch
 - '0');

501 i‡(
ch
 == '}') {

502 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

505 i‡(
ch
 == '+') {

506 
°©e
 = 
sw_no_sync_lôîÆ_¨gumít
;

509 
övÆid
;

511 
sw_no_sync_lôîÆ_¨gumít
:

512 i‡(
ch
 == '}') {

513 
s
->
no_sync_lôîÆ
 = 1;

514 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

517 
övÆid
;

519 
sw_°¨t_lôîÆ_¨gumít
:

520 
ch
) {

521 
CR
:

523 
LF
:

524 
s
->
buf„r
->
pos
 = 
p
 + 1;

525 
s
->
¨g_°¨t
 = 
p
 + 1;

526 i‡(
s
->
no_sync_lôîÆ
 == 0) {

527 
s
->
°©e
 = 
sw_lôîÆ_¨gumít
;

528  
NGX_IMAP_NEXT
;

530 
°©e
 = 
sw_lôîÆ_¨gumít
;

531 
s
->
no_sync_lôîÆ
 = 0;

534 
övÆid
;

538 
sw_lôîÆ_¨gumít
:

539 i‡(
s
->
lôîÆ_Àn
 && --s->literal_len) {

543 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

544 i‡(
¨g
 =
NULL
) {

545  
NGX_ERROR
;

547 
¨g
->
Àn
 = 
p
 + 1 - 
s
->
¨g_°¨t
;

548 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

549 
s
->
¨g_°¨t
 = 
NULL
;

550 
°©e
 = 
sw_íd_lôîÆ_¨gumít
;

554 
sw_íd_lôîÆ_¨gumít
:

555 
ch
) {

557 i‡(
s
->
¨gs
.
√…s
 <= 2) {

558 
°©e
 = 
sw_lôîÆ
;

561 
övÆid
;

562 
CR
:

563 
°©e
 = 
sw_Æmo°_d⁄e
;

565 
LF
:

566 
d⁄e
;

568 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

573 
sw_Æmo°_d⁄e
:

574 
ch
) {

575 
LF
:

576 
d⁄e
;

578 
övÆid
;

583 
s
->
buf„r
->
pos
 = 
p
;

584 
s
->
°©e
 = state;

586  
NGX_AGAIN
;

588 
d⁄e
:

590 
s
->
buf„r
->
pos
 = 
p
 + 1;

592 i‡(
s
->
¨g_°¨t
) {

593 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

594 i‡(
¨g
 =
NULL
) {

595  
NGX_ERROR
;

597 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

598 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

600 
s
->
¨g_°¨t
 = 
NULL
;

601 
s
->
cmd_°¨t
 = 
NULL
;

602 
s
->
quŸed
 = 0;

603 
s
->
no_sync_lôîÆ
 = 0;

604 
s
->
lôîÆ_Àn
 = 0;

607 
s
->
°©e
 = (s->
comm™d
 !
NGX_IMAP_AUTHENTICATE
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

609  
NGX_OK
;

611 
övÆid
:

613 
s
->
°©e
 = 
sw_°¨t
;

614 
s
->
quŸed
 = 0;

615 
s
->
no_sync_lôîÆ
 = 0;

616 
s
->
lôîÆ_Àn
 = 0;

618  
NGX_MAIL_PARSE_INVALID_COMMAND
;

619 
	}
}

622 
ngx_öt_t


623 
	$ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

625 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

626 
ngx_°r_t
 *
¨g
;

628 
sw_°¨t
 = 0,

629 
sw_comm™d
,

630 
sw_övÆid
,

631 
sw_•a˚s_bef‹e_¨gumít
,

632 
sw_¨gumít
,

633 
sw_Æmo°_d⁄e


634 } 
°©e
;

636 
°©e
 = 
s
->state;

638 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

639 
ch
 = *
p
;

641 
°©e
) {

644 
sw_°¨t
:

645 
s
->
cmd_°¨t
 = 
p
;

646 
°©e
 = 
sw_comm™d
;

650 
sw_comm™d
:

651 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

652 
c
 = 
s
->
cmd_°¨t
;

654 i‡(
p
 - 
c
 == 4) {

656 
c0
 = 
	`ngx_touµî
(
c
[0]);

657 
c1
 = 
	`ngx_touµî
(
c
[1]);

658 
c2
 = 
	`ngx_touµî
(
c
[2]);

659 
c3
 = 
	`ngx_touµî
(
c
[3]);

661 i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'O')

663 
s
->
comm™d
 = 
NGX_SMTP_HELO
;

665 } i‡(
c0
 ='E' && 
c1
 ='H' && 
c2
 ='L' && 
c3
 == 'O')

667 
s
->
comm™d
 = 
NGX_SMTP_EHLO
;

669 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

671 
s
->
comm™d
 = 
NGX_SMTP_QUIT
;

673 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

675 
s
->
comm™d
 = 
NGX_SMTP_AUTH
;

677 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

679 
s
->
comm™d
 = 
NGX_SMTP_NOOP
;

681 } i‡(
c0
 ='M' && 
c1
 ='A' && 
c2
 ='I' && 
c3
 == 'L')

683 
s
->
comm™d
 = 
NGX_SMTP_MAIL
;

685 } i‡(
c0
 ='R' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'T')

687 
s
->
comm™d
 = 
NGX_SMTP_RSET
;

689 } i‡(
c0
 ='R' && 
c1
 ='C' && 
c2
 ='P' && 
c3
 == 'T')

691 
s
->
comm™d
 = 
NGX_SMTP_RCPT
;

693 } i‡(
c0
 ='V' && 
c1
 ='R' && 
c2
 ='F' && 
c3
 == 'Y')

695 
s
->
comm™d
 = 
NGX_SMTP_VRFY
;

697 } i‡(
c0
 ='E' && 
c1
 ='X' && 
c2
 ='P' && 
c3
 == 'N')

699 
s
->
comm™d
 = 
NGX_SMTP_EXPN
;

701 } i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'P')

703 
s
->
comm™d
 = 
NGX_SMTP_HELP
;

706 
övÆid
;

708 #i‡(
NGX_MAIL_SSL
)

709 } i‡(
p
 - 
c
 == 8) {

711 i‡((
c
[0] == 'S'|| c[0] == 's')

712 && (
c
[1] == 'T'|| c[1] == 't')

713 && (
c
[2] == 'A'|| c[2] == 'a')

714 && (
c
[3] == 'R'|| c[3] == 'r')

715 && (
c
[4] == 'T'|| c[4] == 't')

716 && (
c
[5] == 'T'|| c[5] == 't')

717 && (
c
[6] == 'L'|| c[6] == 'l')

718 && (
c
[7] == 'S'|| c[7] == 's'))

720 
s
->
comm™d
 = 
NGX_SMTP_STARTTLS
;

723 
övÆid
;

727 
övÆid
;

730 
s
->
cmd
.
d©a
 = s->
cmd_°¨t
;

731 
s
->
cmd
.
Àn
 = 
p
 - s->
cmd_°¨t
;

733 
ch
) {

735 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

737 
CR
:

738 
°©e
 = 
sw_Æmo°_d⁄e
;

740 
LF
:

741 
d⁄e
;

746 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

747 
övÆid
;

752 
sw_övÆid
:

753 
övÆid
;

755 
sw_•a˚s_bef‹e_¨gumít
:

756 
ch
) {

759 
CR
:

760 
°©e
 = 
sw_Æmo°_d⁄e
;

761 
s
->
¨g_íd
 = 
p
;

763 
LF
:

764 
s
->
¨g_íd
 = 
p
;

765 
d⁄e
;

767 i‡(
s
->
¨gs
.
√…s
 <= 10) {

768 
°©e
 = 
sw_¨gumít
;

769 
s
->
¨g_°¨t
 = 
p
;

772 
övÆid
;

776 
sw_¨gumít
:

777 
ch
) {

779 
CR
:

780 
LF
:

781 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

782 i‡(
¨g
 =
NULL
) {

783  
NGX_ERROR
;

785 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

786 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

787 
s
->
¨g_°¨t
 = 
NULL
;

789 
ch
) {

791 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

793 
CR
:

794 
°©e
 = 
sw_Æmo°_d⁄e
;

796 
LF
:

797 
d⁄e
;

806 
sw_Æmo°_d⁄e
:

807 
ch
) {

808 
LF
:

809 
d⁄e
;

811 
övÆid
;

816 
s
->
buf„r
->
pos
 = 
p
;

817 
s
->
°©e
 = state;

819  
NGX_AGAIN
;

821 
d⁄e
:

823 
s
->
buf„r
->
pos
 = 
p
 + 1;

825 i‡(
s
->
¨g_°¨t
) {

826 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

827 i‡(
¨g
 =
NULL
) {

828  
NGX_ERROR
;

830 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

831 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

832 
s
->
¨g_°¨t
 = 
NULL
;

835 
s
->
°©e
 = (s->
comm™d
 !
NGX_SMTP_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

837  
NGX_OK
;

839 
övÆid
:

841 
s
->
°©e
 = 
sw_övÆid
;

842 
s
->
¨g_°¨t
 = 
NULL
;

846 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

847 i‡(*
p
 =
LF
) {

848 
s
->
°©e
 = 
sw_°¨t
;

849 
p
++;

854 
s
->
buf„r
->
pos
 = 
p
;

856  
NGX_MAIL_PARSE_INVALID_COMMAND
;

857 
	}
}

860 
ngx_öt_t


861 
	$ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

863 
ngx_°r_t
 *
¨g
;

865 #i‡(
NGX_MAIL_SSL
)

866 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

867  
NGX_MAIL_PARSE_INVALID_COMMAND
;

871 i‡(
s
->
¨gs
.
√…s
 == 0) {

872  
NGX_MAIL_PARSE_INVALID_COMMAND
;

875 
¨g
 = 
s
->
¨gs
.
ñts
;

877 i‡(
¨g
[0].
Àn
 == 5) {

879 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "LOGIN", 5) == 0) {

881 i‡(
s
->
¨gs
.
√…s
 == 1) {

882  
NGX_MAIL_AUTH_LOGIN
;

885 i‡(
s
->
¨gs
.
√…s
 == 2) {

886  
NGX_MAIL_AUTH_LOGIN_USERNAME
;

889  
NGX_MAIL_PARSE_INVALID_COMMAND
;

892 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "PLAIN", 5) == 0) {

894 i‡(
s
->
¨gs
.
√…s
 == 1) {

895  
NGX_MAIL_AUTH_PLAIN
;

898 i‡(
s
->
¨gs
.
√…s
 == 2) {

899  
	`ngx_maû_auth_∂aö
(
s
, 
c
, 1);

903  
NGX_MAIL_PARSE_INVALID_COMMAND
;

906 i‡(
¨g
[0].
Àn
 == 8) {

908 i‡(
s
->
¨gs
.
√…s
 != 1) {

909  
NGX_MAIL_PARSE_INVALID_COMMAND
;

912 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "CRAM-MD5", 8) == 0) {

913  
NGX_MAIL_AUTH_CRAM_MD5
;

917  
NGX_MAIL_PARSE_INVALID_COMMAND
;

918 
	}
}

	@src/mail/ngx_mail_pop3_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

16 
ngx_öt_t
 
ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

18 
ngx_öt_t
 
°ls
);

19 
ngx_öt_t
 
ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

20 
ngx_öt_t
 
ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
u_ch¨
 
	gp›3_gªëög
[] = "+OK POP3Ñódy" 
CRLF
;

25 
u_ch¨
 
	gp›3_ok
[] = "+OK" 
CRLF
;

26 
u_ch¨
 
	gp›3_√xt
[] = "+ " 
CRLF
;

27 
u_ch¨
 
	gp›3_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

28 
u_ch¨
 
	gp›3_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

29 
u_ch¨
 
	gp›3_övÆid_comm™d
[] = "-ERR invÆid comm™d" 
CRLF
;

33 
	$ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

35 
u_ch¨
 *
p
;

36 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

37 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

39 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

40 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

42 i‡(
pscf
->
auth_mëhods


43 & (
NGX_MAIL_AUTH_APOP_ENABLED
|
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
))

45 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

46 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

50 
s
->
out
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, (
p›3_gªëög
Ë+ s->
ß…
.
Àn
);

51 i‡(
s
->
out
.
d©a
 =
NULL
) {

52 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

56 
p
 = 
	`ngx_˝ymem
(
s
->
out
.
d©a
, 
p›3_gªëög
, (pop3_greeting) - 3);

57 *
p
++ = ' ';

58 
p
 = 
	`ngx_˝ymem
’, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

60 
s
->
out
.
Àn
 = 
p
 - s->out.
d©a
;

63 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_gªëög
);

66 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_öô_¥Ÿocﬁ
;

68 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

70 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

74 
	`ngx_maû_£nd
(
c
->
wrôe
);

75 
	}
}

79 
	$ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

81 
ngx_c⁄√˘i⁄_t
 *
c
;

82 
ngx_maû_£ssi⁄_t
 *
s
;

84 
c
 = 
ªv
->
d©a
;

86 
c
->
log
->
a˘i⁄
 = "ináuth state";

88 i‡(
ªv
->
timedout
) {

89 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

90 
c
->
timedout
 = 1;

91 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

95 
s
 = 
c
->
d©a
;

97 i‡(
s
->
buf„r
 =
NULL
) {

98 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

99 =
NGX_ERROR
)

101 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

105 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 128);

106 i‡(
s
->
buf„r
 =
NULL
) {

107 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

112 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

113 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_auth_°©e
;

115 
	`ngx_maû_p›3_auth_°©e
(
ªv
);

116 
	}
}

120 
	$ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
)

122 
ngx_öt_t
 
rc
;

123 
ngx_c⁄√˘i⁄_t
 *
c
;

124 
ngx_maû_£ssi⁄_t
 *
s
;

126 
c
 = 
ªv
->
d©a
;

127 
s
 = 
c
->
d©a
;

129 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3áuth state");

131 i‡(
ªv
->
timedout
) {

132 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

133 
c
->
timedout
 = 1;

134 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

138 i‡(
s
->
out
.
Àn
) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3 send handler busy");

140 
s
->
blocked
 = 1;

144 
s
->
blocked
 = 0;

146 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

148 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

152 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_ok
);

154 i‡(
rc
 =
NGX_OK
) {

155 
s
->
maû_°©e
) {

157 
ngx_p›3_°¨t
:

159 
s
->
comm™d
) {

161 
NGX_POP3_USER
:

162 
rc
 = 
	`ngx_maû_p›3_u£r
(
s
, 
c
);

165 
NGX_POP3_CAPA
:

166 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 1);

169 
NGX_POP3_APOP
:

170 
rc
 = 
	`ngx_maû_p›3_≠›
(
s
, 
c
);

173 
NGX_POP3_AUTH
:

174 
rc
 = 
	`ngx_maû_p›3_auth
(
s
, 
c
);

177 
NGX_POP3_QUIT
:

178 
s
->
quô
 = 1;

181 
NGX_POP3_NOOP
:

184 
NGX_POP3_STLS
:

185 
rc
 = 
	`ngx_maû_p›3_°ls
(
s
, 
c
);

189 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

195 
ngx_p›3_u£r
:

197 
s
->
comm™d
) {

199 
NGX_POP3_PASS
:

200 
rc
 = 
	`ngx_maû_p›3_∑ss
(
s
, 
c
);

203 
NGX_POP3_CAPA
:

204 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 0);

207 
NGX_POP3_QUIT
:

208 
s
->
quô
 = 1;

211 
NGX_POP3_NOOP
:

215 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

222 
ngx_p›3_∑sswd
:

225 
ngx_p›3_auth_logö_u£∫ame
:

226 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

228 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

229 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

232 
ngx_p›3_auth_logö_∑ssw‹d
:

233 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

236 
ngx_p›3_auth_∂aö
:

237 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

240 
ngx_p›3_auth_¸am_md5
:

241 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

246 
rc
) {

248 
NGX_DONE
:

249 
	`ngx_maû_auth
(
s
, 
c
);

252 
NGX_ERROR
:

253 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

256 
NGX_MAIL_PARSE_INVALID_COMMAND
:

257 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

258 
s
->
°©e
 = 0;

260 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_övÆid_comm™d
);

264 
NGX_OK
:

266 
s
->
¨gs
.
√…s
 = 0;

267 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

268 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

270 i‡(
s
->
°©e
) {

271 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
;

274 
	`ngx_maû_£nd
(
c
->
wrôe
);

276 
	}
}

278 
ngx_öt_t


279 
	$ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

281 
ngx_°r_t
 *
¨g
;

283 #i‡(
NGX_MAIL_SSL
)

284 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

285  
NGX_MAIL_PARSE_INVALID_COMMAND
;

289 i‡(
s
->
¨gs
.
√…s
 != 1) {

290  
NGX_MAIL_PARSE_INVALID_COMMAND
;

293 
¨g
 = 
s
->
¨gs
.
ñts
;

294 
s
->
logö
.
Àn
 = 
¨g
[0].len;

295 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

296 i‡(
s
->
logö
.
d©a
 =
NULL
) {

297  
NGX_ERROR
;

300 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

303 "p›3Üogö: \"%V\"", &
s
->
logö
);

305 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

307  
NGX_OK
;

308 
	}
}

311 
ngx_öt_t


312 
	$ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

314 
ngx_°r_t
 *
¨g
;

316 i‡(
s
->
¨gs
.
√…s
 != 1) {

317  
NGX_MAIL_PARSE_INVALID_COMMAND
;

320 
¨g
 = 
s
->
¨gs
.
ñts
;

321 
s
->
∑sswd
.
Àn
 = 
¨g
[0].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[0].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

331 "p›3Öasswd: \"%V\"", &
s
->
∑sswd
);

334  
NGX_DONE
;

335 
	}
}

338 
ngx_öt_t


339 
	$ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_öt_t
 
°ls
)

341 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

343 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

345 #i‡(
NGX_MAIL_SSL
)

347 i‡(
°ls
 && 
c
->
s¶
 =
NULL
) {

348 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

350 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

352 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

353 
s
->
out
 = 
pscf
->
°¨âls_ˇ∑bûôy
;

354  
NGX_OK
;

357 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

358 
s
->
out
 = 
pscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

359  
NGX_OK
;

365 
s
->
out
 = 
pscf
->
ˇ∑bûôy
;

366  
NGX_OK
;

367 
	}
}

370 
ngx_öt_t


371 
	$ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

373 #i‡(
NGX_MAIL_SSL
)

374 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

376 i‡(
c
->
s¶
 =
NULL
) {

377 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

378 i‡(
s¶cf
->
°¨âls
) {

379 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

380  
NGX_OK
;

386  
NGX_MAIL_PARSE_INVALID_COMMAND
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

393 
ngx_°r_t
 *
¨g
;

394 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

396 #i‡(
NGX_MAIL_SSL
)

397 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

398  
NGX_MAIL_PARSE_INVALID_COMMAND
;

402 i‡(
s
->
¨gs
.
√…s
 != 2) {

403  
NGX_MAIL_PARSE_INVALID_COMMAND
;

406 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

408 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_APOP_ENABLED
)) {

409  
NGX_MAIL_PARSE_INVALID_COMMAND
;

412 
¨g
 = 
s
->
¨gs
.
ñts
;

414 
s
->
logö
.
Àn
 = 
¨g
[0].len;

415 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

416 i‡(
s
->
logö
.
d©a
 =
NULL
) {

417  
NGX_ERROR
;

420 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

422 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

423 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

424 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

425  
NGX_ERROR
;

428 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

430 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

431 "p›3áp›: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

433 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_APOP
;

435  
NGX_DONE
;

436 
	}
}

439 
ngx_öt_t


440 
	$ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

442 
ngx_öt_t
 
rc
;

443 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

445 #i‡(
NGX_MAIL_SSL
)

446 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

447  
NGX_MAIL_PARSE_INVALID_COMMAND
;

451 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

453 i‡(
s
->
¨gs
.
√…s
 == 0) {

454 
s
->
out
 = 
pscf
->
auth_ˇ∑bûôy
;

455 
s
->
°©e
 = 0;

457  
NGX_OK
;

460 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

462 
rc
) {

464 
NGX_MAIL_AUTH_LOGIN
:

466 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_u£∫ame
);

467 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_u£∫ame
;

469  
NGX_OK
;

471 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

473 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

474 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

476  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

478 
NGX_MAIL_AUTH_PLAIN
:

480 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_√xt
);

481 
s
->
maû_°©e
 = 
ngx_p›3_auth_∂aö
;

483  
NGX_OK
;

485 
NGX_MAIL_AUTH_CRAM_MD5
:

487 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

488  
NGX_MAIL_PARSE_INVALID_COMMAND
;

491 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

492 
s
->
maû_°©e
 = 
ngx_p›3_auth_¸am_md5
;

493  
NGX_OK
;

496  
NGX_ERROR
;

499  
rc
;

500 
	}
}

	@src/mail/ngx_mail_pop3_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 *
ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_p›3_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("TOP"),

22 
ngx_°rög
("USER"),

23 
ngx_°rög
("UIDL"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_p›3_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("≠›"), 
NGX_MAIL_AUTH_APOP_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_p›3_auth_∂aö_ˇ∑bûôy
 =

37 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


38 "LOGIN" 
CRLF


39 "PLAIN" 
CRLF


40 "." 
CRLF
);

43 
ngx_°r_t
 
	gngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
 =

44 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


45 "LOGIN" 
CRLF


46 "PLAIN" 
CRLF


47 "CRAM-MD5" 
CRLF


48 "." 
CRLF
);

51 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_p›3_¥Ÿocﬁ
 = {

52 
ngx_°rög
("pop3"),

54 
NGX_MAIL_POP3_PROTOCOL
,

56 
ngx_maû_p›3_öô_£ssi⁄
,

57 
ngx_maû_p›3_öô_¥Ÿocﬁ
,

58 
ngx_maû_p›3_∑r£_comm™d
,

59 
ngx_maû_p›3_auth_°©e
,

61 
ngx_°rög
("-ERR i¡î«»£rvîÉº‹" 
CRLF
),

62 
ngx_°rög
("-ERR SSL cîtifiˇãÉº‹" 
CRLF
),

63 
ngx_°rög
("-ERR Nÿªquúed SSL cîtifiˇã" 
CRLF
)

67 
ngx_comm™d_t
 
	gngx_maû_p›3_comm™ds
[] = {

69 { 
ngx_°rög
("pop3_capabilities"),

70 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

71 
ngx_maû_ˇ∑bûôõs
,

72 
NGX_MAIL_SRV_CONF_OFFSET
,

73 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
ˇ∑bûôõs
),

74 
NULL
 },

76 { 
ngx_°rög
("pop3_auth"),

77 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

78 
ngx_c⁄f_£t_bômask_¶Ÿ
,

79 
NGX_MAIL_SRV_CONF_OFFSET
,

80 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
auth_mëhods
),

81 &
ngx_maû_p›3_auth_mëhods
 },

83 
ngx_nuŒ_comm™d


87 
ngx_maû_moduÀ_t
 
	gngx_maû_p›3_moduÀ_˘x
 = {

88 &
ngx_maû_p›3_¥Ÿocﬁ
,

90 
NULL
,

91 
NULL
,

93 
ngx_maû_p›3_¸óã_§v_c⁄f
,

94 
ngx_maû_p›3_mîge_§v_c⁄f


98 
ngx_moduÀ_t
 
	gngx_maû_p›3_moduÀ
 = {

99 
NGX_MODULE_V1
,

100 &
ngx_maû_p›3_moduÀ_˘x
,

101 
ngx_maû_p›3_comm™ds
,

102 
NGX_MAIL_MODULE
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NGX_MODULE_V1_PADDING


115 
	$ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

117 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

119 
pscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_p›3_§v_c⁄f_t
));

120 i‡(
pscf
 =
NULL
) {

121  
NULL
;

124 i‡(
	`ngx_¨øy_öô
(&
pscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

125 !
NGX_OK
)

127  
NULL
;

130  
pscf
;

131 
	}
}

135 
	$ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

137 
ngx_maû_p›3_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

138 
ngx_maû_p›3_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

140 
u_ch¨
 *
p
;

141 
size_t
 
size
, 
°ls_⁄ly_size
;

142 
ngx_°r_t
 *
c
, *
d
;

143 
ngx_uöt_t
 
i
;

145 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

146 
¥ev
->
auth_mëhods
,

147 (
NGX_CONF_BITMASK_SET


148 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

150 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

151 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

154 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

156 
d
 = 
ngx_maû_p›3_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

157 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

158 i‡(
c
 =
NULL
) {

159  
NGX_CONF_ERROR
;

162 *
c
 = *
d
;

166 
size
 = ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1

167 + ("." 
CRLF
) - 1;

169 
°ls_⁄ly_size
 = 
size
 + ("STLS" 
CRLF
) - 1;

171 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

172 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

173 
size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

175 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

179 
°ls_⁄ly_size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

182 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

183 
size
 +("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1;

186 
size
 +("SASL LOGIN PLAIN" 
CRLF
) - 1;

189 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

190 i‡(
p
 =
NULL
) {

191  
NGX_CONF_ERROR
;

194 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

195 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

197 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

198 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

200 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

201 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

202 *
p
++ = 
CR
; *p++ = 
LF
;

205 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

206 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN CRAM-MD5" 
CRLF
,

207 ("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1);

210 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN" 
CRLF
,

211 ("SASL LOGIN PLAIN" 
CRLF
) - 1);

214 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

217 
size
 +("STLS" 
CRLF
) - 1;

219 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

220 i‡(
p
 =
NULL
) {

221  
NGX_CONF_ERROR
;

224 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

225 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

227 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

228 
c⁄f
->
ˇ∑bûôy
.
Àn
 - (("." 
CRLF
) - 1));

230 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

231 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

234 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

235 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
;

238 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_∂aö_ˇ∑bûôy
;

242 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
°ls_⁄ly_size
);

243 i‡(
p
 =
NULL
) {

244  
NGX_CONF_ERROR
;

247 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
°ls_⁄ly_size
;

248 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

250 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

251 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

253 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

254 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

258 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

259 *
p
++ = 
CR
; *p++ = 
LF
;

262 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

263 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

265  
NGX_CONF_OK
;

266 
	}
}

	@src/mail/ngx_mail_pop3_module.h

8 #i‚de‡
_NGX_MAIL_POP3_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_POP3_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
ngx_°r_t
 
	mˇ∑bûôy
;

19 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

20 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

21 
ngx_°r_t
 
	mauth_ˇ∑bûôy
;

23 
ngx_uöt_t
 
	mauth_mëhods
;

25 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

26 } 
	tngx_maû_p›3_§v_c⁄f_t
;

29 
ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

30 
ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

31 
ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
);

32 
ngx_öt_t
 
ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

35 
ngx_moduÀ_t
 
ngx_maû_p›3_moduÀ
;

	@src/mail/ngx_mail_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	m∑ss_îr‹_mesßge
;

18 
ngx_Êag_t
 
	mx˛õ¡
;

19 
size_t
 
	mbuf„r_size
;

20 
ngx_m£c_t
 
	mtimeout
;

21 } 
	tngx_maû_¥oxy_c⁄f_t
;

24 
ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
);

25 
ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
);

26 
ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
);

27 
ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
);

28 
ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

29 
ngx_öt_t
 
ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
,

30 
ngx_uöt_t
 
°©e
);

31 
ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

33 
ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

34 
ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
);

35 *
ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

37 *
chûd
);

40 
ngx_comm™d_t
 
	gngx_maû_¥oxy_comm™ds
[] = {

42 { 
ngx_°rög
("proxy"),

43 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

44 
ngx_c⁄f_£t_Êag_¶Ÿ
,

45 
NGX_MAIL_SRV_CONF_OFFSET
,

46 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
íabÀ
),

47 
NULL
 },

49 { 
ngx_°rög
("proxy_buffer"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

51 
ngx_c⁄f_£t_size_¶Ÿ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
buf„r_size
),

54 
NULL
 },

56 { 
ngx_°rög
("proxy_timeout"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_m£c_¶Ÿ
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
timeout
),

61 
NULL
 },

63 { 
ngx_°rög
("proxy_pass_error_message"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
∑ss_îr‹_mesßge
),

68 
NULL
 },

70 { 
ngx_°rög
("xclient"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
x˛õ¡
),

75 
NULL
 },

77 
ngx_nuŒ_comm™d


81 
ngx_maû_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ_˘x
 = {

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
ngx_maû_¥oxy_¸óã_c⁄f
,

88 
ngx_maû_¥oxy_mîge_c⁄f


92 
ngx_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ
 = {

93 
NGX_MODULE_V1
,

94 &
ngx_maû_¥oxy_moduÀ_˘x
,

95 
ngx_maû_¥oxy_comm™ds
,

96 
NGX_MAIL_MODULE
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NGX_MODULE_V1_PADDING


108 
u_ch¨
 
	gsmç_auth_ok
[] = "235 2.0.0 OK" 
CRLF
;

112 
	$ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
)

114 
kì∑live
;

115 
ngx_öt_t
 
rc
;

116 
ngx_maû_¥oxy_˘x_t
 *
p
;

117 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

118 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

120 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

122 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

124 i‡(
cscf
->
so_kì∑live
) {

125 
kì∑live
 = 1;

127 i‡(
	`£tsock›t
(
s
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

128 (c⁄° *Ë&
kì∑live
, ())

131 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_sockë_î∫o
,

136 
p
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_maû_¥oxy_˘x_t
));

137 i‡(
p
 =
NULL
) {

138 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

142 
s
->
¥oxy
 = 
p
;

144 
p
->
up°ªam
.
sockaddr
 = 
≥î
->sockaddr;

145 
p
->
up°ªam
.
sockÀn
 = 
≥î
->socklen;

146 
p
->
up°ªam
.
«me
 = &
≥î
->name;

147 
p
->
up°ªam
.
gë
 = 
ngx_evít_gë_≥î
;

148 
p
->
up°ªam
.
log
 = 
s
->
c⁄√˘i⁄
->log;

149 
p
->
up°ªam
.
log_îr‹
 = 
NGX_ERROR_ERR
;

151 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
p
->
up°ªam
);

153 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

154 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

158 
	`ngx_add_timî
(
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
, 
cscf
->
timeout
);

160 
p
->
up°ªam
.
c⁄√˘i⁄
->
d©a
 = 
s
;

161 
p
->
up°ªam
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

163 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_block_ªad
;

164 
p
->
up°ªam
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_dummy_h™dÀr
;

166 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

168 
s
->
¥oxy
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(s->
c⁄√˘i⁄
->
poﬁ
,

169 
pcf
->
buf„r_size
);

170 i‡(
s
->
¥oxy
->
buf„r
 =
NULL
) {

171 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

175 
s
->
out
.
Àn
 = 0;

177 
s
->
¥Ÿocﬁ
) {

179 
NGX_MAIL_POP3_PROTOCOL
:

180 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_p›3_h™dÀr
;

181 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

184 
NGX_MAIL_IMAP_PROTOCOL
:

185 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_im≠_h™dÀr
;

186 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

190 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_smç_h™dÀr
;

191 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

194 
	}
}

198 
	$ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
)

200 
ngx_c⁄√˘i⁄_t
 *
c
;

201 
ngx_maû_£ssi⁄_t
 *
s
;

203 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy blockÑead");

205 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

206 
c
 = 
ªv
->
d©a
;

207 
s
 = 
c
->
d©a
;

209 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

211 
	}
}

215 
	$ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
)

217 
u_ch¨
 *
p
;

218 
ngx_öt_t
 
rc
;

219 
ngx_°r_t
 
löe
;

220 
ngx_c⁄√˘i⁄_t
 *
c
;

221 
ngx_maû_£ssi⁄_t
 *
s
;

222 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

224 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

227 
c
 = 
ªv
->
d©a
;

228 
s
 = 
c
->
d©a
;

230 i‡(
ªv
->
timedout
) {

231 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

233 
c
->
timedout
 = 1;

234 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

238 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, 0);

240 i‡(
rc
 =
NGX_AGAIN
) {

244 i‡(
rc
 =
NGX_ERROR
) {

245 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

249 
s
->
maû_°©e
) {

251 
ngx_p›3_°¨t
:

252 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

254 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

256 
löe
.
Àn
 = ("USER "Ë- 1 + 
s
->
logö
.len + 2;

257 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

258 i‡(
löe
.
d©a
 =
NULL
) {

259 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

263 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "USER ", ("USER ") - 1);

264 
p
 = 
	`ngx_˝ymem
’, 
s
->
logö
.
d©a
, s->logö.
Àn
);

265 *
p
++ = 
CR
; *∞
LF
;

267 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

270 
ngx_p›3_u£r
:

271 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÖass");

273 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

275 
löe
.
Àn
 = ("PASS "Ë- 1 + 
s
->
∑sswd
.len + 2;

276 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

277 i‡(
löe
.
d©a
 =
NULL
) {

278 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

282 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "PASS ", ("PASS ") - 1);

283 
p
 = 
	`ngx_˝ymem
’, 
s
->
∑sswd
.
d©a
, s->∑sswd.
Àn
);

284 *
p
++ = 
CR
; *∞
LF
;

286 
s
->
maû_°©e
 = 
ngx_p›3_∑sswd
;

289 
ngx_p›3_∑sswd
:

290 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

291 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

292 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

293 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

295 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

296 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

297 
	`ngx_dñ_timî
(
c
->
ªad
);

299 
c
->
log
->
a˘i⁄
 = 
NULL
;

300 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

302 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

307 #i‡(
NGX_SUPPRESS_WARN
)

308 
	`ngx_°r_nuŒ
(&
löe
);

313 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

318 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

322 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

323 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

324 
	}
}

328 
	$ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
)

330 
u_ch¨
 *
p
;

331 
ngx_öt_t
 
rc
;

332 
ngx_°r_t
 
löe
;

333 
ngx_c⁄√˘i⁄_t
 *
c
;

334 
ngx_maû_£ssi⁄_t
 *
s
;

335 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

337 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

340 
c
 = 
ªv
->
d©a
;

341 
s
 = 
c
->
d©a
;

343 i‡(
ªv
->
timedout
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

346 
c
->
timedout
 = 1;

347 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

351 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

353 i‡(
rc
 =
NGX_AGAIN
) {

357 i‡(
rc
 =
NGX_ERROR
) {

358 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

362 
s
->
maû_°©e
) {

364 
ngx_im≠_°¨t
:

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

368 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending LOGIN commandÅo upstream";

370 
löe
.
Àn
 = 
s
->
èg
.len + ("LOGIN ") - 1

371 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

372 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

373 i‡(
löe
.
d©a
 =
NULL
) {

374 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

378 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%VLOGIN {%uz}" 
CRLF
,

379 &
s
->
èg
, s->
logö
.
Àn
)

380 - 
löe
.
d©a
;

382 
s
->
maû_°©e
 = 
ngx_im≠_logö
;

385 
ngx_im≠_logö
:

386 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

388 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

390 
löe
.
Àn
 = 
s
->
logö
.À¿+ 1 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

391 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

392 i‡(
löe
.
d©a
 =
NULL
) {

393 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

397 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%V {%uz}" 
CRLF
,

398 &
s
->
logö
, s->
∑sswd
.
Àn
)

399 - 
löe
.
d©a
;

401 
s
->
maû_°©e
 = 
ngx_im≠_u£r
;

404 
ngx_im≠_u£r
:

405 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

408 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

410 
löe
.
Àn
 = 
s
->
∑sswd
.len + 2;

411 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

412 i‡(
löe
.
d©a
 =
NULL
) {

413 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

417 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
∑sswd
.d©a, s->∑sswd.
Àn
);

418 *
p
++ = 
CR
; *∞
LF
;

420 
s
->
maû_°©e
 = 
ngx_im≠_∑sswd
;

423 
ngx_im≠_∑sswd
:

424 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

425 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

426 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

427 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

429 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

430 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

431 
	`ngx_dñ_timî
(
c
->
ªad
);

433 
c
->
log
->
a˘i⁄
 = 
NULL
;

434 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

436 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

441 #i‡(
NGX_SUPPRESS_WARN
)

442 
	`ngx_°r_nuŒ
(&
löe
);

447 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

452 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

456 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

457 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

458 
	}
}

462 
	$ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
)

464 
u_ch¨
 *
p
;

465 
ngx_öt_t
 
rc
;

466 
ngx_°r_t
 
löe
;

467 
ngx_buf_t
 *
b
;

468 
ngx_c⁄√˘i⁄_t
 *
c
;

469 
ngx_maû_£ssi⁄_t
 *
s
;

470 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

471 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

473 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

476 
c
 = 
ªv
->
d©a
;

477 
s
 = 
c
->
d©a
;

479 i‡(
ªv
->
timedout
) {

480 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

482 
c
->
timedout
 = 1;

483 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

487 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

489 i‡(
rc
 =
NGX_AGAIN
) {

493 i‡(
rc
 =
NGX_ERROR
) {

494 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

498 
s
->
maû_°©e
) {

500 
ngx_smç_°¨t
:

501 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÉhlo");

503 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending HELO/EHLOÅo upstream";

505 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

507 
löe
.
Àn
 = ("HELO "Ë- 1 + 
cscf
->
£rvî_«me
.len + 2;

508 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

509 i‡(
löe
.
d©a
 =
NULL
) {

510 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

514 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

516 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
,

517 ((
s
->
esmç
 || 
pcf
->
x˛õ¡
) ? "EHLO " : "HELO "),

520 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

521 *
p
++ = 
CR
; *∞
LF
;

523 i‡(
pcf
->
x˛õ¡
) {

524 
s
->
maû_°©e
 = 
ngx_smç_hño_x˛õ¡
;

526 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

527 
s
->
maû_°©e
 = 
ngx_smç_hño_‰om
;

530 
s
->
maû_°©e
 = 
ngx_smç_hño
;

535 
ngx_smç_hño_x˛õ¡
:

536 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

539 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending XCLIENTÅo upstream";

541 
löe
.
Àn
 = ("XCLIENT ADDR= LOGIN= NAME="

542 
CRLF
) - 1

543 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
 + s->
logö
.À¿+ s->
ho°
.len;

545 #i‡(
NGX_HAVE_INET6
)

546 i‡(
s
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

547 
löe
.
Àn
 += ("IPV6:") - 1;

551 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

552 i‡(
löe
.
d©a
 =
NULL
) {

553 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

557 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "XCLIENT ADDR=", ("XCLIENT ADDR=") - 1);

559 #i‡(
NGX_HAVE_INET6
)

560 i‡(
s
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

561 
p
 = 
	`ngx_˝ymem
(p, "IPV6:", ("IPV6:") - 1);

565 
p
 = 
	`ngx_c›y
’, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

566 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

568 i‡(
s
->
logö
.
Àn
) {

569 
p
 = 
	`ngx_˝ymem
(p, " LOGIN=", (" LOGIN=") - 1);

570 
p
 = 
	`ngx_c›y
’, 
s
->
logö
.
d©a
, s->logö.
Àn
);

573 
p
 = 
	`ngx_˝ymem
(p, " NAME=", (" NAME=") - 1);

574 
p
 = 
	`ngx_c›y
’, 
s
->
ho°
.
d©a
, s->ho°.
Àn
);

576 *
p
++ = 
CR
; *p++ = 
LF
;

578 
löe
.
Àn
 = 
p
 -Üöe.
d©a
;

580 i‡(
s
->
smç_hño
.
Àn
) {

581 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_hño
;

583 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

584 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_‰om
;

587 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡
;

592 
ngx_smç_x˛õ¡_hño
:

593 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

596 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending client HELO/EHLOÅo upstream";

598 
löe
.
Àn
 = ("HELO " 
CRLF
Ë- 1 + 
s
->
smç_hño
.len;

600 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

601 i‡(
löe
.
d©a
 =
NULL
) {

602 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

606 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
,

607 ((
s
->
esmç
Ë? "EHLO %V" 
CRLF
 : "HELO %V" CRLF),

608 &
s
->
smç_hño
)

609 - 
löe
.
d©a
;

611 
s
->
maû_°©e
 = (s->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) ?

612 
ngx_smç_hño_‰om
 : 
ngx_smç_hño
;

616 
ngx_smç_hño_‰om
:

617 
ngx_smç_x˛õ¡_‰om
:

618 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

621 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending MAIL FROMÅo upstream";

623 
löe
.
Àn
 = 
s
->
smç_‰om
.À¿+ (
CRLF
) - 1;

624 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

625 i‡(
löe
.
d©a
 =
NULL
) {

626 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

630 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_‰om
.d©a, s->smç_‰om.
Àn
);

631 *
p
++ = 
CR
; *∞
LF
;

633 
s
->
maû_°©e
 = 
ngx_smç_‰om
;

637 
ngx_smç_‰om
:

638 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

641 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending RCPT TOÅo upstream";

643 
löe
.
Àn
 = 
s
->
smç_to
.À¿+ (
CRLF
) - 1;

644 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

645 i‡(
löe
.
d©a
 =
NULL
) {

646 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

650 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_to
.d©a, s->smç_to.
Àn
);

651 *
p
++ = 
CR
; *∞
LF
;

653 
s
->
maû_°©e
 = 
ngx_smç_to
;

657 
ngx_smç_hño
:

658 
ngx_smç_x˛õ¡
:

659 
ngx_smç_to
:

661 
b
 = 
s
->
¥oxy
->
buf„r
;

663 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

664 
b
->
pos
 = b->
°¨t
;

667 
	`ngx_mem˝y
(
b
->
°¨t
, 
smç_auth_ok
, (smtp_auth_ok) - 1);

668 
b
->
œ°
 = b->
°¨t
 + (
smç_auth_ok
) - 1;

671 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

672 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

673 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

674 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

676 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

677 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

678 
	`ngx_dñ_timî
(
c
->
ªad
);

680 
c
->
log
->
a˘i⁄
 = 
NULL
;

681 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

683 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

684 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

687 
	`ngx_maû_¥oxy_h™dÀr
(
c
->
wrôe
);

693 #i‡(
NGX_SUPPRESS_WARN
)

694 
	`ngx_°r_nuŒ
(&
löe
);

699 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

704 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

708 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

709 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

710 
	}
}

714 
	$ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
wev
)

716 
ngx_c⁄√˘i⁄_t
 *
c
;

717 
ngx_maû_£ssi⁄_t
 *
s
;

719 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0, "mailÖroxy dummy handler");

721 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

722 
c
 = 
wev
->
d©a
;

723 
s
 = 
c
->
d©a
;

725 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

727 
	}
}

730 
ngx_öt_t


731 
	$ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
°©e
)

733 
u_ch¨
 *
p
, *
m
;

734 
ssize_t
 
n
;

735 
ngx_buf_t
 *
b
;

736 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

738 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "readingÑesponse from upstream";

740 
b
 = 
s
->
¥oxy
->
buf„r
;

742 
n
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
	`ªcv
(s->proxy->upstream.connection,

743 
b
->
œ°
, b->
íd
 - b->last);

745 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

746  
NGX_ERROR
;

749 i‡(
n
 =
NGX_AGAIN
) {

750  
NGX_AGAIN
;

753 
b
->
œ°
 +
n
;

755 i‡(
b
->
œ°
 - b->
pos
 < 4) {

756  
NGX_AGAIN
;

759 i‡(*(
b
->
œ°
 - 2Ë!
CR
 || *(b->œ° - 1Ë!
LF
) {

760 i‡(
b
->
œ°
 =b->
íd
) {

761 *(
b
->
œ°
 - 1) = '\0';

762 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

764 
b
->
pos
);

765  
NGX_ERROR
;

768  
NGX_AGAIN
;

771 
p
 = 
b
->
pos
;

773 
s
->
¥Ÿocﬁ
) {

775 
NGX_MAIL_POP3_PROTOCOL
:

776 i‡(
p
[0] == '+' &&Ö[1] == 'O' &&Ö[2] == 'K') {

777  
NGX_OK
;

781 
NGX_MAIL_IMAP_PROTOCOL
:

782 
°©e
) {

784 
ngx_im≠_°¨t
:

785 i‡(
p
[0] == '*' &&Ö[1] == ' ' &&Ö[2] == 'O' &&Ö[3] == 'K') {

786  
NGX_OK
;

790 
ngx_im≠_logö
:

791 
ngx_im≠_u£r
:

792 i‡(
p
[0] == '+') {

793  
NGX_OK
;

797 
ngx_im≠_∑sswd
:

798 i‡(
	`ngx_°∫cmp
(
p
, 
s
->
èg
.
d©a
, s->èg.
Àn
) == 0) {

799 
p
 +
s
->
èg
.
Àn
;

800 i‡(
p
[0] == 'O' &&Ö[1] == 'K') {

801  
NGX_OK
;

811 i‡(
p
[3] == '-') {

814 
m
 = 
b
->
œ°
 - ((
CRLF
 "200" CRLF) - 1);

816 
m
 > 
p
) {

817 i‡(
m
[0] =
CR
 && m[1] =
LF
) {

821 
m
--;

824 i‡(
m
 <
p
 || m[5] == '-') {

825  
NGX_AGAIN
;

829 
°©e
) {

831 
ngx_smç_°¨t
:

832 i‡(
p
[0] == '2' &&Ö[1] == '2' &&Ö[2] == '0') {

833  
NGX_OK
;

837 
ngx_smç_hño
:

838 
ngx_smç_hño_x˛õ¡
:

839 
ngx_smç_hño_‰om
:

840 
ngx_smç_‰om
:

841 i‡(
p
[0] == '2' &&Ö[1] == '5' &&Ö[2] == '0') {

842  
NGX_OK
;

846 
ngx_smç_x˛õ¡
:

847 
ngx_smç_x˛õ¡_‰om
:

848 
ngx_smç_x˛õ¡_hño
:

849 i‡(
p
[0] == '2' && (p[1] == '2' ||Ö[1] == '5') &&Ö[2] == '0') {

850  
NGX_OK
;

854 
ngx_smç_to
:

855  
NGX_OK
;

861 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

863 i‡(
pcf
->
∑ss_îr‹_mesßge
 == 0) {

864 *(
b
->
œ°
 - 2) = '\0';

865 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

866 "up°ªam síàövÆidÑe•⁄£: \"%s\"", 
p
);

867  
NGX_ERROR
;

870 
s
->
out
.
Àn
 = 
b
->
œ°
 - 
p
 - 2;

871 
s
->
out
.
d©a
 = 
p
;

873 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

874 "up°ªam síàövÆidÑe•⁄£: \"%V\"", &
s
->
out
);

876 
s
->
out
.
Àn
 = 
b
->
œ°
 - b->
pos
;

877 
s
->
out
.
d©a
 = 
b
->
pos
;

879  
NGX_ERROR
;

880 
	}
}

884 
	$ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
)

886 *
a˘i⁄
, *
ªcv_a˘i⁄
, *
£nd_a˘i⁄
;

887 
size_t
 
size
;

888 
ssize_t
 
n
;

889 
ngx_buf_t
 *
b
;

890 
ngx_uöt_t
 
do_wrôe
;

891 
ngx_c⁄√˘i⁄_t
 *
c
, *
§c
, *
d°
;

892 
ngx_maû_£ssi⁄_t
 *
s
;

893 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

895 
c
 = 
ev
->
d©a
;

896 
s
 = 
c
->
d©a
;

898 i‡(
ev
->
timedout
) {

899 
c
->
log
->
a˘i⁄
 = "proxying";

901 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

902 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

904 
c
->
timedout
 = 1;

907 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

911 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

915 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

916 i‡(
ev
->
wrôe
) {

917 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

918 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

919 
§c
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

920 
d°
 = 
c
;

921 
b
 = 
s
->
¥oxy
->
buf„r
;

924 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

925 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

926 
§c
 = 
c
;

927 
d°
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

928 
b
 = 
s
->
buf„r
;

932 i‡(
ev
->
wrôe
) {

933 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

934 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

935 
§c
 = 
s
->
c⁄√˘i⁄
;

936 
d°
 = 
c
;

937 
b
 = 
s
->
buf„r
;

940 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

941 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

942 
§c
 = 
c
;

943 
d°
 = 
s
->
c⁄√˘i⁄
;

944 
b
 = 
s
->
¥oxy
->
buf„r
;

948 
do_wrôe
 = 
ev
->
wrôe
 ? 1 : 0;

950 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

952 
do_wrôe
, 
§c
->
fd
, 
d°
->fd);

956 i‡(
do_wrôe
) {

958 
size
 = 
b
->
œ°
 - b->
pos
;

960 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

961 
c
->
log
->
a˘i⁄
 = 
£nd_a˘i⁄
;

963 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

965 i‡(
n
 =
NGX_ERROR
) {

966 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

970 i‡(
n
 > 0) {

971 
b
->
pos
 +
n
;

973 i‡(
b
->
pos
 =b->
œ°
) {

974 
b
->
pos
 = b->
°¨t
;

975 
b
->
œ°
 = b->
°¨t
;

981 
size
 = 
b
->
íd
 - b->
œ°
;

983 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

984 
c
->
log
->
a˘i⁄
 = 
ªcv_a˘i⁄
;

986 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

988 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

992 i‡(
n
 > 0) {

993 
do_wrôe
 = 1;

994 
b
->
œ°
 +
n
;

999 i‡(
n
 =
NGX_ERROR
) {

1000 
§c
->
ªad
->
eof
 = 1;

1007 
c
->
log
->
a˘i⁄
 = "proxying";

1009 i‡((
s
->
c⁄√˘i⁄
->
ªad
->
eof
 && s->
buf„r
->
pos
 =s->buf„r->
œ°
)

1010 || (
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof


1011 && 
s
->
¥oxy
->
buf„r
->
pos
 =s->¥oxy->buf„r->
œ°
)

1012 || (
s
->
c⁄√˘i⁄
->
ªad
->
eof


1013 && 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof
))

1015 
a˘i⁄
 = 
c
->
log
->action;

1016 
c
->
log
->
a˘i⁄
 = 
NULL
;

1017 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "proxied session done");

1018 
c
->
log
->
a˘i⁄
 =áction;

1020 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1024 i‡(
	`ngx_h™dÀ_wrôe_evít
(
d°
->
wrôe
, 0Ë!
NGX_OK
) {

1025 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1029 i‡(
	`ngx_h™dÀ_ªad_evít
(
d°
->
ªad
, 0Ë!
NGX_OK
) {

1030 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1034 i‡(
	`ngx_h™dÀ_wrôe_evít
(
§c
->
wrôe
, 0Ë!
NGX_OK
) {

1035 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1039 i‡(
	`ngx_h™dÀ_ªad_evít
(
§c
->
ªad
, 0Ë!
NGX_OK
) {

1040 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

1044 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

1045 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

1046 
	`ngx_add_timî
(
c
->
ªad
, 
pcf
->
timeout
);

1048 
	}
}

1052 
	$ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1054 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1055 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1057 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1059 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1062 i‡(
s
->
out
.
Àn
 == 0) {

1063 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1067 
s
->
quô
 = 1;

1068 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

1069 
	}
}

1073 
	$ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1075 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1076 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1078 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1080 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1083 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1084 
	}
}

1088 
	$ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
)

1090 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1091 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1093 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1095 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1098 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
s
->
c⁄√˘i⁄
);

1099 
	}
}

1103 
	$ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1105 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

1107 
pcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_¥oxy_c⁄f_t
));

1108 i‡(
pcf
 =
NULL
) {

1109  
NULL
;

1112 
pcf
->
íabÀ
 = 
NGX_CONF_UNSET
;

1113 
pcf
->
∑ss_îr‹_mesßge
 = 
NGX_CONF_UNSET
;

1114 
pcf
->
x˛õ¡
 = 
NGX_CONF_UNSET
;

1115 
pcf
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1116 
pcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1118  
pcf
;

1119 
	}
}

1123 
	$ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1125 
ngx_maû_¥oxy_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1126 
ngx_maû_¥oxy_c⁄f_t
 *
c⁄f
 = 
chûd
;

1128 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1129 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∑ss_îr‹_mesßge
, 
¥ev
->pass_error_message, 0);

1130 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
x˛õ¡
, 
¥ev
->xclient, 1);

1131 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1132 (
size_t
Ë
ngx_∑gesize
);

1133 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 24 * 60 * 60000);

1135  
NGX_CONF_OK
;

1136 
	}
}

	@src/mail/ngx_mail_smtp_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

16 
ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
);

17 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

18 
ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
);

20 
ngx_öt_t
 
ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
,

21 
ngx_c⁄√˘i⁄_t
 *
c
);

23 
ngx_öt_t
 
ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
ngx_öt_t
 
ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
ngx_öt_t
 
ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

26 
ngx_öt_t
 
ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

27 
ngx_c⁄√˘i⁄_t
 *
c
);

28 
ngx_öt_t
 
ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

29 
ngx_öt_t
 
ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_öt_t
 
ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

32 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

33 
ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

34 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

37 
u_ch¨
 
	gsmç_ok
[] = "250 2.0.0 OK" 
CRLF
;

38 
u_ch¨
 
	gsmç_bye
[] = "221 2.0.0 Bye" 
CRLF
;

39 
u_ch¨
 
	gsmç_°¨âls
[] = "220 2.0.0 Sèπ TLS" 
CRLF
;

40 
u_ch¨
 
	gsmç_√xt
[] = "334 " 
CRLF
;

41 
u_ch¨
 
	gsmç_u£∫ame
[] = "334 VXNlcm5hbWU6" 
CRLF
;

42 
u_ch¨
 
	gsmç_∑ssw‹d
[] = "334 UGFzc3dvcmQ6" 
CRLF
;

43 
u_ch¨
 
	gsmç_övÆid_comm™d
[] = "500 5.5.1 InvÆid comm™d" 
CRLF
;

44 
u_ch¨
 
	gsmç_övÆid_pùñöög
[] =

45 "503 5.5.0 Im¥›î u£ o‡SMTP comm™dÖùñöög" 
CRLF
;

46 
u_ch¨
 
	gsmç_övÆid_¨gumít
[] = "501 5.5.4 InvÆidárgumít" 
CRLF
;

47 
u_ch¨
 
	gsmç_auth_ªquúed
[] = "530 5.7.1 Authítiˇti⁄Ñequúed" 
CRLF
;

48 
u_ch¨
 
	gsmç_bad_£quí˚
[] = "503 5.5.1 Bad sequí˚ o‡comm™ds" 
CRLF
;

51 
ngx_°r_t
 
	gsmç_u«vaûabÀ
 = 
ngx_°rög
("[UNAVAILABLE]");

52 
ngx_°r_t
 
	gsmç_ãmpu«vaû
 = 
ngx_°rög
("[TEMPUNAVAIL]");

56 
	$ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

58 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

59 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

61 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

63 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

64 
s
->
ho°
 = 
smç_u«vaûabÀ
;

65 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

69 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

70 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

71 
s
->
ho°
 = 
smç_ãmpu«vaû
;

72 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

77 
c
->
log
->
a˘i⁄
 = "inÑesolving clientáddress";

79 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

80 i‡(
˘x
 =
NULL
) {

81 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

85 
˘x
->
addr
.
sockaddr
 = 
c
->sockaddr;

86 
˘x
->
addr
.
sockÀn
 = 
c
->socklen;

87 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
;

88 
˘x
->
d©a
 = 
s
;

89 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

91 i‡(
	`ngx_ªsﬁve_addr
(
˘x
Ë!
NGX_OK
) {

92 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

94 
	}
}

98 
	$ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

100 
ngx_c⁄√˘i⁄_t
 *
c
;

101 
ngx_maû_£ssi⁄_t
 *
s
;

103 
s
 = 
˘x
->
d©a
;

104 
c
 = 
s
->
c⁄√˘i⁄
;

106 i‡(
˘x
->
°©e
) {

107 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

109 &
c
->
addr_ãxt
, 
˘x
->
°©e
,

110 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

112 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

113 
s
->
ho°
 = 
smç_u«vaûabÀ
;

116 
s
->
ho°
 = 
smç_ãmpu«vaû
;

119 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

121 
	`ngx_maû_smç_gªëög
(
s
, s->
c⁄√˘i⁄
);

126 
c
->
log
->
a˘i⁄
 = "inÑesolving client hostname";

128 
s
->
ho°
.
d©a
 = 
	`ngx_p°rdup
(
c
->
poﬁ
, &
˘x
->
«me
);

129 i‡(
s
->
ho°
.
d©a
 =
NULL
) {

130 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

131 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

135 
s
->
ho°
.
Àn
 = 
˘x
->
«me
.len;

137 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

139 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

140 "addªs†ªsﬁved: %V", &
s
->
ho°
);

142 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me
;

144 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

145 
	}
}

149 
	$ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
)

151 
ngx_c⁄√˘i⁄_t
 *
c
;

152 
ngx_maû_£ssi⁄_t
 *
s
;

153 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

154 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

156 
c
 = 
ªv
->
d©a
;

157 
s
 = 
c
->
d©a
;

159 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

161 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

162 i‡(
˘x
 =
NULL
) {

163 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

167 
˘x
->
«me
 = 
s
->
ho°
;

168 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
;

169 
˘x
->
d©a
 = 
s
;

170 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

172 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

173 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

175 
	}
}

179 
	$ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

181 
ngx_uöt_t
 
i
;

182 
ngx_c⁄√˘i⁄_t
 *
c
;

183 
ngx_maû_£ssi⁄_t
 *
s
;

185 
s
 = 
˘x
->
d©a
;

186 
c
 = 
s
->
c⁄√˘i⁄
;

188 i‡(
˘x
->
°©e
) {

189 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

191 &
˘x
->
«me
, ctx->
°©e
,

192 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

194 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

195 
s
->
ho°
 = 
smç_u«vaûabÀ
;

198 
s
->
ho°
 = 
smç_ãmpu«vaû
;

203 #i‡(
NGX_DEBUG
)

205 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

206 
ngx_°r_t
 
addr
;

208 
addr
.
d©a
 = 
ãxt
;

210 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

211 
addr
.
Àn
 = 
	`ngx_sock_¡›
(
˘x
->
addrs
[
i
].
sockaddr
,

212 
˘x
->
addrs
[
i
].
sockÀn
,

213 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

216 "«mêwa†ªsﬁvedÅÿ%V", &
addr
);

221 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

222 i‡(
	`ngx_cmp_sockaddr
(
˘x
->
addrs
[
i
].
sockaddr
, ctx->addrs[i].
sockÀn
,

223 
c
->
sockaddr
, c->
sockÀn
, 0)

224 =
NGX_OK
)

226 
found
;

230 
s
->
ho°
 = 
smç_u«vaûabÀ
;

233 
found
:

235 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

237 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

238 
	}
}

242 
	$ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

244 
ngx_m£c_t
 
timeout
;

245 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

246 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

248 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

249 "smç gªëög f‹ \"%V\"", &
s
->
ho°
);

251 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

252 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

254 
timeout
 = 
sscf
->
gªëög_dñay
 ? sscf->gªëög_dñay : 
cscf
->timeout;

255 
	`ngx_add_timî
(
c
->
ªad
, 
timeout
);

257 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

258 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

261 i‡(
sscf
->
gªëög_dñay
) {

262 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_övÆid_pùñöög
;

266 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

268 
s
->
out
 = 
sscf
->
gªëög
;

270 
	`ngx_maû_£nd
(
c
->
wrôe
);

271 
	}
}

275 
	$ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
)

277 
ngx_c⁄√˘i⁄_t
 *
c
;

278 
ngx_maû_£ssi⁄_t
 *
s
;

279 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

280 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

282 
c
 = 
ªv
->
d©a
;

283 
s
 = 
c
->
d©a
;

285 
c
->
log
->
a˘i⁄
 = "in delayÖipelining state";

287 i‡(
ªv
->
timedout
) {

289 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "delay greeting");

291 
ªv
->
timedout
 = 0;

293 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

295 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

297 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

299 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

300 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

304 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

306 
s
->
out
 = 
sscf
->
gªëög
;

310 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "invalidÖipelining");

312 i‡(
s
->
buf„r
 =
NULL
) {

313 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

318 i‡(
	`ngx_maû_smç_disˇrd_comm™d
(
s
, 
c
,

320 !
NGX_OK
)

325 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_pùñöög
);

326 
s
->
quô
 = 1;

329 
	`ngx_maû_£nd
(
c
->
wrôe
);

330 
	}
}

334 
	$ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

336 
ngx_c⁄√˘i⁄_t
 *
c
;

337 
ngx_maû_£ssi⁄_t
 *
s
;

339 
c
 = 
ªv
->
d©a
;

341 
c
->
log
->
a˘i⁄
 = "ináuth state";

343 i‡(
ªv
->
timedout
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

345 
c
->
timedout
 = 1;

346 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

350 
s
 = 
c
->
d©a
;

352 i‡(
s
->
buf„r
 =
NULL
) {

353 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

358 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

359 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_auth_°©e
;

361 
	`ngx_maû_smç_auth_°©e
(
ªv
);

362 
	}
}

365 
ngx_öt_t


366 
	$ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

368 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

370 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
)Ë=
NGX_ERROR
) {

371 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

372  
NGX_ERROR
;

375 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

377 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
sscf
->
˛õ¡_buf„r_size
);

378 i‡(
s
->
buf„r
 =
NULL
) {

379 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

380  
NGX_ERROR
;

383  
NGX_OK
;

384 
	}
}

388 
	$ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
)

390 
ngx_öt_t
 
rc
;

391 
ngx_c⁄√˘i⁄_t
 *
c
;

392 
ngx_maû_£ssi⁄_t
 *
s
;

394 
c
 = 
ªv
->
d©a
;

395 
s
 = 
c
->
d©a
;

397 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtpáuth state");

399 i‡(
ªv
->
timedout
) {

400 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

401 
c
->
timedout
 = 1;

402 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

406 i‡(
s
->
out
.
Àn
) {

407 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtp send handler busy");

408 
s
->
blocked
 = 1;

412 
s
->
blocked
 = 0;

414 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

416 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

420 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

422 i‡(
rc
 =
NGX_OK
) {

423 
s
->
maû_°©e
) {

425 
ngx_smç_°¨t
:

427 
s
->
comm™d
) {

429 
NGX_SMTP_HELO
:

430 
NGX_SMTP_EHLO
:

431 
rc
 = 
	`ngx_maû_smç_hño
(
s
, 
c
);

434 
NGX_SMTP_AUTH
:

435 
rc
 = 
	`ngx_maû_smç_auth
(
s
, 
c
);

438 
NGX_SMTP_QUIT
:

439 
s
->
quô
 = 1;

440 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bye
);

443 
NGX_SMTP_MAIL
:

444 
rc
 = 
	`ngx_maû_smç_maû
(
s
, 
c
);

447 
NGX_SMTP_RCPT
:

448 
rc
 = 
	`ngx_maû_smç_r˝t
(
s
, 
c
);

451 
NGX_SMTP_RSET
:

452 
rc
 = 
	`ngx_maû_smç_r£t
(
s
, 
c
);

455 
NGX_SMTP_NOOP
:

458 
NGX_SMTP_STARTTLS
:

459 
rc
 = 
	`ngx_maû_smç_°¨âls
(
s
, 
c
);

460 
	`ngx_°r_£t
(&
s
->
out
, 
smç_°¨âls
);

464 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

470 
ngx_smç_auth_logö_u£∫ame
:

471 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

473 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

474 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

477 
ngx_smç_auth_logö_∑ssw‹d
:

478 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

481 
ngx_smç_auth_∂aö
:

482 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

485 
ngx_smç_auth_¸am_md5
:

486 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

491 i‡(
s
->
buf„r
->
pos
 < s->buf„r->
œ°
) {

492 
s
->
blocked
 = 1;

495 
rc
) {

497 
NGX_DONE
:

498 
	`ngx_maû_auth
(
s
, 
c
);

501 
NGX_ERROR
:

502 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

505 
NGX_MAIL_PARSE_INVALID_COMMAND
:

506 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

507 
s
->
°©e
 = 0;

508 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_comm™d
);

512 
NGX_OK
:

513 
s
->
¨gs
.
√…s
 = 0;

515 i‡(
s
->
buf„r
->
pos
 =s->buf„r->
œ°
) {

516 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

517 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

520 i‡(
s
->
°©e
) {

521 
s
->
¨g_°¨t
 = s->
buf„r
->
pos
;

524 
	`ngx_maû_£nd
(
c
->
wrôe
);

526 
	}
}

529 
ngx_öt_t


530 
	$ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

532 
ngx_°r_t
 *
¨g
;

533 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

535 i‡(
s
->
¨gs
.
√…s
 != 1) {

536 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

537 
s
->
°©e
 = 0;

538  
NGX_OK
;

541 
¨g
 = 
s
->
¨gs
.
ñts
;

543 
s
->
smç_hño
.
Àn
 = 
¨g
[0].len;

545 
s
->
smç_hño
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
¨g
[0].
Àn
);

546 i‡(
s
->
smç_hño
.
d©a
 =
NULL
) {

547  
NGX_ERROR
;

550 
	`ngx_mem˝y
(
s
->
smç_hño
.
d©a
, 
¨g
[0].d©a,árg[0].
Àn
);

552 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

553 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

555 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

557 i‡(
s
->
comm™d
 =
NGX_SMTP_HELO
) {

558 
s
->
out
 = 
sscf
->
£rvî_«me
;

561 
s
->
esmç
 = 1;

563 #i‡(
NGX_MAIL_SSL
)

565 i‡(
c
->
s¶
 =
NULL
) {

566 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

568 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

570 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

571 
s
->
out
 = 
sscf
->
°¨âls_ˇ∑bûôy
;

572  
NGX_OK
;

575 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

576 
s
->
out
 = 
sscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

577  
NGX_OK
;

582 
s
->
out
 = 
sscf
->
ˇ∑bûôy
;

585  
NGX_OK
;

586 
	}
}

589 
ngx_öt_t


590 
	$ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

592 
ngx_öt_t
 
rc
;

593 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

594 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

596 #i‡(
NGX_MAIL_SSL
)

597 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

598  
NGX_MAIL_PARSE_INVALID_COMMAND
;

602 i‡(
s
->
¨gs
.
√…s
 == 0) {

603 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

604 
s
->
°©e
 = 0;

605  
NGX_OK
;

608 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

610 
rc
) {

612 
NGX_MAIL_AUTH_LOGIN
:

614 
	`ngx_°r_£t
(&
s
->
out
, 
smç_u£∫ame
);

615 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_u£∫ame
;

617  
NGX_OK
;

619 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

621 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

622 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

624  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

626 
NGX_MAIL_AUTH_PLAIN
:

628 
	`ngx_°r_£t
(&
s
->
out
, 
smç_√xt
);

629 
s
->
maû_°©e
 = 
ngx_smç_auth_∂aö
;

631  
NGX_OK
;

633 
NGX_MAIL_AUTH_CRAM_MD5
:

635 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

637 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

638  
NGX_MAIL_PARSE_INVALID_COMMAND
;

641 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

642 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

644 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

645  
NGX_ERROR
;

649 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "334 ", 4Ë=
NGX_OK
) {

650 
s
->
maû_°©e
 = 
ngx_smç_auth_¸am_md5
;

651  
NGX_OK
;

654  
NGX_ERROR
;

657  
rc
;

658 
	}
}

661 
ngx_öt_t


662 
	$ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

664 
ngx_°r_t
 *
¨g
, 
cmd
;

665 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

667 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

669 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_NONE_ENABLED
)) {

670 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, "client wasÑejected: \"%V\"");

671 
	`ngx_°r_£t
(&
s
->
out
, 
smç_auth_ªquúed
);

672  
NGX_OK
;

677 i‡(
s
->
smç_‰om
.
Àn
) {

678 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

679  
NGX_OK
;

682 i‡(
s
->
¨gs
.
√…s
 == 0) {

683 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

684  
NGX_OK
;

687 
¨g
 = 
s
->
¨gs
.
ñts
;

688 
¨g
 +
s
->
¨gs
.
√…s
 - 1;

690 
cmd
.
Àn
 = 
¨g
->
d©a
 +árg->À¿- 
s
->cmd.data;

691 
cmd
.
d©a
 = 
s
->cmd.data;

693 
s
->
smç_‰om
.
Àn
 = 
cmd
.len;

695 
s
->
smç_‰om
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
cmd
.
Àn
);

696 i‡(
s
->
smç_‰om
.
d©a
 =
NULL
) {

697  
NGX_ERROR
;

700 
	`ngx_mem˝y
(
s
->
smç_‰om
.
d©a
, 
cmd
.d©a, cmd.
Àn
);

702 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

703 "smç maû from:\"%V\"", &
s
->
smç_‰om
);

705 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

707  
NGX_OK
;

708 
	}
}

711 
ngx_öt_t


712 
	$ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

714 
ngx_°r_t
 *
¨g
, 
cmd
;

716 i‡(
s
->
smç_‰om
.
Àn
 == 0) {

717 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

718  
NGX_OK
;

721 i‡(
s
->
¨gs
.
√…s
 == 0) {

722 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

723  
NGX_OK
;

726 
¨g
 = 
s
->
¨gs
.
ñts
;

727 
¨g
 +
s
->
¨gs
.
√…s
 - 1;

729 
cmd
.
Àn
 = 
¨g
->
d©a
 +árg->À¿- 
s
->cmd.data;

730 
cmd
.
d©a
 = 
s
->cmd.data;

732 
s
->
smç_to
.
Àn
 = 
cmd
.len;

734 
s
->
smç_to
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
cmd
.
Àn
);

735 i‡(
s
->
smç_to
.
d©a
 =
NULL
) {

736  
NGX_ERROR
;

739 
	`ngx_mem˝y
(
s
->
smç_to
.
d©a
, 
cmd
.d©a, cmd.
Àn
);

741 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

742 "smçÑ˝àto:\"%V\"", &
s
->
smç_to
);

744 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_NONE
;

746  
NGX_DONE
;

747 
	}
}

750 
ngx_öt_t


751 
	$ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

753 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

754 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

755 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

757  
NGX_OK
;

758 
	}
}

761 
ngx_öt_t


762 
	$ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

764 #i‡(
NGX_MAIL_SSL
)

765 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

767 i‡(
c
->
s¶
 =
NULL
) {

768 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

769 i‡(
s¶cf
->
°¨âls
) {

776 
	`ngx_°r_nuŒ
(&
s
->
smç_hño
);

777 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

778 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

780 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

781 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

783 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

784  
NGX_OK
;

790  
NGX_MAIL_PARSE_INVALID_COMMAND
;

791 
	}
}

794 
ngx_öt_t


795 
	$ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

796 *
îr
)

798 
ssize_t
 
n
;

800 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

802 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

803 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

804  
NGX_ERROR
;

807 i‡(
n
 > 0) {

808 
s
->
buf„r
->
œ°
 +
n
;

811 i‡(
n
 =
NGX_AGAIN
) {

812 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

813 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

814  
NGX_ERROR
;

817  
NGX_AGAIN
;

820 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, 
îr
);

822 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

823 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

825  
NGX_OK
;

826 
	}
}

830 
	$ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

831 *
îr
)

833 
u_ch¨
 
ch
;

834 
ngx_°r_t
 
cmd
;

835 
ngx_uöt_t
 
i
;

837 i‡(
c
->
log
->
log_Àvñ
 < 
NGX_LOG_INFO
) {

841 
cmd
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

842 
cmd
.
d©a
 = 
s
->
buf„r
->
°¨t
;

844 
i
 = 0; i < 
cmd
.
Àn
; i++) {

845 
ch
 = 
cmd
.
d©a
[
i
];

847 i‡(
ch
 !
CR
 && ch !
LF
) {

851 
cmd
.
d©a
[
i
] = '_';

854 
cmd
.
Àn
 = 
i
;

856 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, 
îr
, &
cmd
);

857 
	}
}

	@src/mail/ngx_mail_smtp_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 *
ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_c⁄f_bômask_t
 
	gngx_maû_smç_auth_mëhods
[] = {

21 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

22 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

23 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

24 { 
ngx_°rög
("n⁄e"), 
NGX_MAIL_AUTH_NONE_ENABLED
 },

25 { 
ngx_nuŒ_°rög
, 0 }

29 
ngx_°r_t
 
	gngx_maû_smç_auth_mëhods_«mes
[] = {

30 
ngx_°rög
("PLAIN"),

31 
ngx_°rög
("LOGIN"),

32 
ngx_nuŒ_°rög
,

33 
ngx_°rög
("CRAM-MD5"),

34 
ngx_nuŒ_°rög


38 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_smç_¥Ÿocﬁ
 = {

39 
ngx_°rög
("smtp"),

41 
NGX_MAIL_SMTP_PROTOCOL
,

43 
ngx_maû_smç_öô_£ssi⁄
,

44 
ngx_maû_smç_öô_¥Ÿocﬁ
,

45 
ngx_maû_smç_∑r£_comm™d
,

46 
ngx_maû_smç_auth_°©e
,

48 
ngx_°rög
("451 4.3.2 I¡î«»£rvîÉº‹" 
CRLF
),

49 
ngx_°rög
("421 4.7.1 SSL cîtifiˇãÉº‹" 
CRLF
),

50 
ngx_°rög
("421 4.7.1 Nÿªquúed SSL cîtifiˇã" 
CRLF
)

54 
ngx_comm™d_t
 
	gngx_maû_smç_comm™ds
[] = {

56 { 
ngx_°rög
("smtp_client_buffer"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_size_¶Ÿ
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

61 
NULL
 },

63 { 
ngx_°rög
("smtp_greeting_delay"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_m£c_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
gªëög_dñay
),

68 
NULL
 },

70 { 
ngx_°rög
("smtp_capabilities"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

72 
ngx_maû_ˇ∑bûôõs
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
ˇ∑bûôõs
),

75 
NULL
 },

77 { 
ngx_°rög
("smtp_auth"),

78 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

79 
ngx_c⁄f_£t_bômask_¶Ÿ
,

80 
NGX_MAIL_SRV_CONF_OFFSET
,

81 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
auth_mëhods
),

82 &
ngx_maû_smç_auth_mëhods
 },

84 
ngx_nuŒ_comm™d


88 
ngx_maû_moduÀ_t
 
	gngx_maû_smç_moduÀ_˘x
 = {

89 &
ngx_maû_smç_¥Ÿocﬁ
,

91 
NULL
,

92 
NULL
,

94 
ngx_maû_smç_¸óã_§v_c⁄f
,

95 
ngx_maû_smç_mîge_§v_c⁄f


99 
ngx_moduÀ_t
 
	gngx_maû_smç_moduÀ
 = {

100 
NGX_MODULE_V1
,

101 &
ngx_maû_smç_moduÀ_˘x
,

102 
ngx_maû_smç_comm™ds
,

103 
NGX_MAIL_MODULE
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NGX_MODULE_V1_PADDING


116 
	$ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

118 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

120 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_smç_§v_c⁄f_t
));

121 i‡(
sscf
 =
NULL
) {

122  
NULL
;

125 
sscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

126 
sscf
->
gªëög_dñay
 = 
NGX_CONF_UNSET_MSEC
;

128 i‡(
	`ngx_¨øy_öô
(&
sscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

129 !
NGX_OK
)

131  
NULL
;

134  
sscf
;

135 
	}
}

139 
	$ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

141 
ngx_maû_smç_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

142 
ngx_maû_smç_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

144 
u_ch¨
 *
p
, *
auth
, *
œ°
;

145 
size_t
 
size
;

146 
ngx_°r_t
 *
c
;

147 
ngx_uöt_t
 
i
, 
m
, 
auth_íabÀd
;

148 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

150 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

151 
¥ev
->
˛õ¡_buf„r_size
,

152 (
size_t
Ë
ngx_∑gesize
);

154 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
gªëög_dñay
,

155 
¥ev
->
gªëög_dñay
, 0);

157 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

158 
¥ev
->
auth_mëhods
,

159 (
NGX_CONF_BITMASK_SET


160 |
NGX_MAIL_AUTH_PLAIN_ENABLED


161 |
NGX_MAIL_AUTH_LOGIN_ENABLED
));

164 
cscf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

166 
size
 = ("220 ESMTPÑódy" 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

168 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

169 i‡(
p
 =
NULL
) {

170  
NGX_CONF_ERROR
;

173 
c⁄f
->
gªëög
.
Àn
 = 
size
;

174 
c⁄f
->
gªëög
.
d©a
 = 
p
;

176 *
p
++ = '2'; *p++ = '2'; *p++ = '0'; *p++ = ' ';

177 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

178 
	`ngx_mem˝y
(
p
, " ESMTPÑódy" 
CRLF
, (" ESMTPÑeady" CRLF) - 1);

181 
size
 = ("250 " 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

183 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

184 i‡(
p
 =
NULL
) {

185  
NGX_CONF_ERROR
;

188 
c⁄f
->
£rvî_«me
.
Àn
 = 
size
;

189 
c⁄f
->
£rvî_«me
.
d©a
 = 
p
;

191 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

192 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

193 *
p
++ = 
CR
; *∞
LF
;

196 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

197 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

200 
size
 = ("250-"Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
 + (
CRLF
) - 1;

202 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

203 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

204 
size
 +("250 "Ë- 1 + 
c
[
i
].
Àn
 + (
CRLF
) - 1;

207 
auth_íabÀd
 = 0;

209 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

210 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

211 
m
 <<1, 
i
++)

213 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

214 
size
 +1 + 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
;

215 
auth_íabÀd
 = 1;

219 i‡(
auth_íabÀd
) {

220 
size
 +("250 AUTH"Ë- 1 + (
CRLF
) - 1;

223 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

224 i‡(
p
 =
NULL
) {

225  
NGX_CONF_ERROR
;

228 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

229 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

231 
œ°
 = 
p
;

233 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

234 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

235 *
p
++ = 
CR
; *p++ = 
LF
;

237 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

238 
œ°
 = 
p
;

239 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

240 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

241 *
p
++ = 
CR
; *p++ = 
LF
;

244 
auth
 = 
p
;

246 i‡(
auth_íabÀd
) {

247 
œ°
 = 
p
;

249 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

250 *
p
++ = 'A'; *p++ = 'U'; *p++ = 'T'; *p++ = 'H';

252 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

253 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

254 
m
 <<1, 
i
++)

256 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

257 *
p
++ = ' ';

258 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
d©a
,

259 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
);

263 *
p
++ = 
CR
; *∞
LF
;

266 
œ°
[3] = ' ';

269 
size
 +("250 STARTTLS" 
CRLF
) - 1;

271 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

272 i‡(
p
 =
NULL
) {

273  
NGX_CONF_ERROR
;

276 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

277 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

279 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, c⁄f->ˇ∑bûôy.
Àn
);

281 
p
 = 
	`ngx_˝ymem
’, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

283 
p
 = 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a


284 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

285 *
p
 = '-';

287 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
)

288 + ("250 STARTTLS" 
CRLF
) - 1;

290 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

291 i‡(
p
 =
NULL
) {

292  
NGX_CONF_ERROR
;

295 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

296 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

298 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, 
auth
 - conf->capability.data);

300 
	`ngx_mem˝y
(
p
, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

302 i‡(
œ°
 < 
auth
) {

303 
p
 = 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a


304 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

305 *
p
 = '-';

308  
NGX_CONF_OK
;

309 
	}
}

	@src/mail/ngx_mail_smtp_module.h

8 #i‚de‡
_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

15 
	~<ngx_maû_smç_moduÀ.h
>

19 
ngx_m£c_t
 
	mgªëög_dñay
;

21 
size_t
 
	m˛õ¡_buf„r_size
;

23 
ngx_°r_t
 
	mˇ∑bûôy
;

24 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

25 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

27 
ngx_°r_t
 
	m£rvî_«me
;

28 
ngx_°r_t
 
	mgªëög
;

30 
ngx_uöt_t
 
	mauth_mëhods
;

32 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

33 } 
	tngx_maû_smç_§v_c⁄f_t
;

36 
ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

37 
ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

38 
ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
);

39 
ngx_öt_t
 
ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

42 
ngx_moduÀ_t
 
ngx_maû_smç_moduÀ
;

	@src/mail/ngx_mail_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_maû.h
>

13 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

14 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

17 *
ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

18 *
ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

20 *
ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

26 *
ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

27 *
c⁄f
);

30 
ngx_c⁄f_íum_t
 
	gngx_maû_°¨âls_°©e
[] = {

31 { 
ngx_°rög
("off"), 
NGX_MAIL_STARTTLS_OFF
 },

32 { 
ngx_°rög
("⁄"), 
NGX_MAIL_STARTTLS_ON
 },

33 { 
ngx_°rög
("⁄ly"), 
NGX_MAIL_STARTTLS_ONLY
 },

34 { 
ngx_nuŒ_°rög
, 0 }

39 
ngx_c⁄f_bômask_t
 
	gngx_maû_s¶_¥Ÿocﬁs
[] = {

40 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

41 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

42 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

43 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

44 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

45 { 
ngx_nuŒ_°rög
, 0 }

49 
ngx_c⁄f_íum_t
 
	gngx_maû_s¶_vîify
[] = {

50 { 
ngx_°rög
("off"), 0 },

51 { 
ngx_°rög
("on"), 1 },

52 { 
ngx_°rög
("optional"), 2 },

53 { 
ngx_°rög
("optional_no_ca"), 3 },

54 { 
ngx_nuŒ_°rög
, 0 }

58 
ngx_comm™d_t
 
	gngx_maû_s¶_comm™ds
[] = {

60 { 
ngx_°rög
("ssl"),

61 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

62 
ngx_maû_s¶_íabÀ
,

63 
NGX_MAIL_SRV_CONF_OFFSET
,

64 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
íabÀ
),

65 
NULL
 },

67 { 
ngx_°rög
("starttls"),

68 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

69 
ngx_maû_s¶_°¨âls
,

70 
NGX_MAIL_SRV_CONF_OFFSET
,

71 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
°¨âls
),

72 
ngx_maû_°¨âls_°©e
 },

74 { 
ngx_°rög
("ssl_certificate"),

75 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

76 
ngx_c⁄f_£t_°r_¶Ÿ
,

77 
NGX_MAIL_SRV_CONF_OFFSET
,

78 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã
),

79 
NULL
 },

81 { 
ngx_°rög
("ssl_certificate_key"),

82 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

83 
ngx_c⁄f_£t_°r_¶Ÿ
,

84 
NGX_MAIL_SRV_CONF_OFFSET
,

85 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã_key
),

86 
NULL
 },

88 { 
ngx_°rög
("ssl_password_file"),

89 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

90 
ngx_maû_s¶_∑ssw‹d_fûe
,

91 
NGX_MAIL_SRV_CONF_OFFSET
,

93 
NULL
 },

95 { 
ngx_°rög
("ssl_dhparam"),

96 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_°r_¶Ÿ
,

98 
NGX_MAIL_SRV_CONF_OFFSET
,

99 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
dh∑øm
),

100 
NULL
 },

102 { 
ngx_°rög
("ssl_ecdh_curve"),

103 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

104 
ngx_c⁄f_£t_°r_¶Ÿ
,

105 
NGX_MAIL_SRV_CONF_OFFSET
,

106 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
ecdh_curve
),

107 
NULL
 },

109 { 
ngx_°rög
("ssl_protocols"),

110 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

111 
ngx_c⁄f_£t_bômask_¶Ÿ
,

112 
NGX_MAIL_SRV_CONF_OFFSET
,

113 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥Ÿocﬁs
),

114 &
ngx_maû_s¶_¥Ÿocﬁs
 },

116 { 
ngx_°rög
("ssl_ciphers"),

117 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

118 
ngx_c⁄f_£t_°r_¶Ÿ
,

119 
NGX_MAIL_SRV_CONF_OFFSET
,

120 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
cùhîs
),

121 
NULL
 },

123 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

124 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

125 
ngx_c⁄f_£t_Êag_¶Ÿ
,

126 
NGX_MAIL_SRV_CONF_OFFSET
,

127 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

128 
NULL
 },

130 { 
ngx_°rög
("ssl_session_cache"),

131 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

132 
ngx_maû_s¶_£ssi⁄_ˇche
,

133 
NGX_MAIL_SRV_CONF_OFFSET
,

135 
NULL
 },

137 { 
ngx_°rög
("ssl_session_tickets"),

138 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

139 
ngx_c⁄f_£t_Êag_¶Ÿ
,

140 
NGX_MAIL_SRV_CONF_OFFSET
,

141 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_tickës
),

142 
NULL
 },

144 { 
ngx_°rög
("ssl_session_ticket_key"),

145 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

147 
NGX_MAIL_SRV_CONF_OFFSET
,

148 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_tickë_keys
),

149 
NULL
 },

151 { 
ngx_°rög
("ssl_session_timeout"),

152 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_£c_¶Ÿ
,

154 
NGX_MAIL_SRV_CONF_OFFSET
,

155 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_timeout
),

156 
NULL
 },

158 { 
ngx_°rög
("ssl_verify_client"),

159 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

160 
ngx_c⁄f_£t_íum_¶Ÿ
,

161 
NGX_MAIL_SRV_CONF_OFFSET
,

162 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
vîify
),

163 &
ngx_maû_s¶_vîify
 },

165 { 
ngx_°rög
("ssl_verify_depth"),

166 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

167 
ngx_c⁄f_£t_num_¶Ÿ
,

168 
NGX_MAIL_SRV_CONF_OFFSET
,

169 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
vîify_dïth
),

170 
NULL
 },

172 { 
ngx_°rög
("ssl_client_certificate"),

173 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

174 
ngx_c⁄f_£t_°r_¶Ÿ
,

175 
NGX_MAIL_SRV_CONF_OFFSET
,

176 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˛õ¡_˚πifiˇã
),

177 
NULL
 },

179 { 
ngx_°rög
("ssl_trusted_certificate"),

180 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

181 
ngx_c⁄f_£t_°r_¶Ÿ
,

182 
NGX_MAIL_SRV_CONF_OFFSET
,

183 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
åu°ed_˚πifiˇã
),

184 
NULL
 },

186 { 
ngx_°rög
("ssl_crl"),

187 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

188 
ngx_c⁄f_£t_°r_¶Ÿ
,

189 
NGX_MAIL_SRV_CONF_OFFSET
,

190 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¸l
),

191 
NULL
 },

193 
ngx_nuŒ_comm™d


197 
ngx_maû_moduÀ_t
 
	gngx_maû_s¶_moduÀ_˘x
 = {

198 
NULL
,

200 
NULL
,

201 
NULL
,

203 
ngx_maû_s¶_¸óã_c⁄f
,

204 
ngx_maû_s¶_mîge_c⁄f


208 
ngx_moduÀ_t
 
	gngx_maû_s¶_moduÀ
 = {

209 
NGX_MODULE_V1
,

210 &
ngx_maû_s¶_moduÀ_˘x
,

211 
ngx_maû_s¶_comm™ds
,

212 
NGX_MAIL_MODULE
,

213 
NULL
,

214 
NULL
,

215 
NULL
,

216 
NULL
,

217 
NULL
,

218 
NULL
,

219 
NULL
,

220 
NGX_MODULE_V1_PADDING


224 
ngx_°r_t
 
	gngx_maû_s¶_£ss_id_˘x
 = 
ngx_°rög
("MAIL");

228 
	$ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

230 
ngx_maû_s¶_c⁄f_t
 *
scf
;

232 
scf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_s¶_c⁄f_t
));

233 i‡(
scf
 =
NULL
) {

234  
NULL
;

252 
scf
->
íabÀ
 = 
NGX_CONF_UNSET
;

253 
scf
->
°¨âls
 = 
NGX_CONF_UNSET_UINT
;

254 
scf
->
∑ssw‹ds
 = 
NGX_CONF_UNSET_PTR
;

255 
scf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

256 
scf
->
vîify
 = 
NGX_CONF_UNSET_UINT
;

257 
scf
->
vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

258 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

259 
scf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

260 
scf
->
£ssi⁄_tickës
 = 
NGX_CONF_UNSET
;

261 
scf
->
£ssi⁄_tickë_keys
 = 
NGX_CONF_UNSET_PTR
;

263  
scf
;

264 
	}
}

268 
	$ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

270 
ngx_maû_s¶_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

271 
ngx_maû_s¶_c⁄f_t
 *
c⁄f
 = 
chûd
;

273 *
mode
;

274 
ngx_poﬁ_˛ónup_t
 *
˛n
;

276 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

277 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°¨âls
, 
¥ev
->starttls,

278 
NGX_MAIL_STARTTLS_OFF
);

280 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

281 
¥ev
->
£ssi⁄_timeout
, 300);

283 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

284 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

286 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

287 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


288 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

290 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify
, 
¥ev
->verify, 0);

291 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify_dïth
, 
¥ev
->verify_depth, 1);

293 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

294 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

296 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
∑ssw‹ds
, 
¥ev
->∑ssw‹ds, 
NULL
);

298 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

300 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

301 
NGX_DEFAULT_ECDH_CURVE
);

303 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˛õ¡_˚πifiˇã
,

304 
¥ev
->
˛õ¡_˚πifiˇã
, "");

305 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
åu°ed_˚πifiˇã
,

306 
¥ev
->
åu°ed_˚πifiˇã
, "");

307 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
¸l
, 
¥ev
->crl, "");

309 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

312 
c⁄f
->
s¶
.
log
 = 
cf
->log;

314 i‡(
c⁄f
->
íabÀ
) {

315 
mode
 = "ssl";

317 } i‡(
c⁄f
->
°¨âls
 !
NGX_MAIL_STARTTLS_OFF
) {

318 
mode
 = "starttls";

321 
mode
 = "";

324 i‡(
c⁄f
->
fûe
 =
NULL
) {

325 
c⁄f
->
fûe
 = 
¥ev
->file;

326 
c⁄f
->
löe
 = 
¥ev
->line;

329 i‡(*
mode
) {

331 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

332 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

335 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

336  
NGX_CONF_ERROR
;

339 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

340 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

343 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

344  
NGX_CONF_ERROR
;

349 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

350  
NGX_CONF_OK
;

353 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

354 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

357 &
c⁄f
->
˚πifiˇã
);

358  
NGX_CONF_ERROR
;

362 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, 
NULL
Ë!
NGX_OK
) {

363  
NGX_CONF_ERROR
;

366 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

367 i‡(
˛n
 =
NULL
) {

368  
NGX_CONF_ERROR
;

371 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

372 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

374 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

375 &
c⁄f
->
˚πifiˇã_key
, c⁄f->
∑ssw‹ds
)

376 !
NGX_OK
)

378  
NGX_CONF_ERROR
;

381 i‡(
c⁄f
->
vîify
) {

383 i‡(
c⁄f
->
˛õ¡_˚πifiˇã
.
Àn
 =0 && c⁄f->
vîify
 != 3) {

384 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

386  
NGX_CONF_ERROR
;

389 i‡(
	`ngx_s¶_˛õ¡_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

390 &
c⁄f
->
˛õ¡_˚πifiˇã
,

391 
c⁄f
->
vîify_dïth
)

392 !
NGX_OK
)

394  
NGX_CONF_ERROR
;

397 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

398 &
c⁄f
->
åu°ed_˚πifiˇã
,

399 
c⁄f
->
vîify_dïth
)

400 !
NGX_OK
)

402  
NGX_CONF_ERROR
;

405 i‡(
	`ngx_s¶_¸l
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
¸l
Ë!
NGX_OK
) {

406  
NGX_CONF_ERROR
;

410 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

411 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

414 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

416 &
c⁄f
->
cùhîs
);

417  
NGX_CONF_ERROR
;

420 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

421 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

424 #i‚de‡
LIBRESSL_VERSION_NUMBER


425 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

428 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

429  
NGX_CONF_ERROR
;

432 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

433  
NGX_CONF_ERROR
;

436 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

437 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

439 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

440 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

443 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_maû_s¶_£ss_id_˘x
,

444 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

445 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

446 !
NGX_OK
)

448  
NGX_CONF_ERROR
;

451 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_tickës
,

452 
¥ev
->
£ssi⁄_tickës
, 1);

454 #ifde‡
SSL_OP_NO_TICKET


455 i‡(!
c⁄f
->
£ssi⁄_tickës
) {

456 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_NO_TICKET
);

460 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
£ssi⁄_tickë_keys
,

461 
¥ev
->
£ssi⁄_tickë_keys
, 
NULL
);

463 i‡(
	`ngx_s¶_£ssi⁄_tickë_keys
(
cf
, &
c⁄f
->
s¶
, c⁄f->
£ssi⁄_tickë_keys
)

464 !
NGX_OK
)

466  
NGX_CONF_ERROR
;

469  
NGX_CONF_OK
;

470 
	}
}

474 
	$ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

476 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

478 *
rv
;

480 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

482 i‡(
rv
 !
NGX_CONF_OK
) {

483  
rv
;

486 i‡(
scf
->
íabÀ
 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

487 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

489  
NGX_CONF_ERROR
;

492 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

493 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

495  
NGX_CONF_OK
;

496 
	}
}

500 
	$ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

502 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

504 *
rv
;

506 
rv
 = 
	`ngx_c⁄f_£t_íum_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

508 i‡(
rv
 !
NGX_CONF_OK
) {

509  
rv
;

512 i‡(
scf
->
íabÀ
 =1 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

513 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

515  
NGX_CONF_ERROR
;

518 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

519 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

521  
NGX_CONF_OK
;

522 
	}
}

526 
	$ngx_maû_s¶_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

528 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

530 
ngx_°r_t
 *
vÆue
;

532 i‡(
scf
->
∑ssw‹ds
 !
NGX_CONF_UNSET_PTR
) {

536 
vÆue
 = 
cf
->
¨gs
->
ñts
;

538 
scf
->
∑ssw‹ds
 = 
	`ngx_s¶_ªad_∑ssw‹d_fûe
(
cf
, &
vÆue
[1]);

540 i‡(
scf
->
∑ssw‹ds
 =
NULL
) {

541  
NGX_CONF_ERROR
;

544  
NGX_CONF_OK
;

545 
	}
}

549 
	$ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

551 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

553 
size_t
 
Àn
;

554 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

555 
ngx_öt_t
 
n
;

556 
ngx_uöt_t
 
i
, 
j
;

558 
vÆue
 = 
cf
->
¨gs
->
ñts
;

560 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

562 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

563 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

567 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

568 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

572 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

573 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

577 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

578 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

581 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

582 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

584 i‡(
n
 =
NGX_ERROR
) {

585 
övÆid
;

588 
scf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

593 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

594 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

597 
Àn
 = 0;

599 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

600 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

604 
Àn
++;

607 i‡(
Àn
 == 0) {

608 
övÆid
;

611 
«me
.
Àn
 =Üen;

612 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

614 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

615 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

617 
n
 = 
	`ngx_∑r£_size
(&
size
);

619 i‡(
n
 =
NGX_ERROR
) {

620 
övÆid
;

623 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

624 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

626 &
vÆue
[
i
]);

628  
NGX_CONF_ERROR
;

631 
scf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

632 &
ngx_maû_s¶_moduÀ
);

633 i‡(
scf
->
shm_z⁄e
 =
NULL
) {

634  
NGX_CONF_ERROR
;

637 
scf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

642 
övÆid
;

645 i‡(
scf
->
shm_z⁄e
 && scf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

646 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

649  
NGX_CONF_OK
;

651 
övÆid
:

653 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

654 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

656  
NGX_CONF_ERROR
;

657 
	}
}

	@src/mail/ngx_mail_ssl_module.h

8 #i‚de‡
_NGX_MAIL_SSL_H_INCLUDED_


9 
	#_NGX_MAIL_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

17 
	#NGX_MAIL_STARTTLS_OFF
 0

	)

18 
	#NGX_MAIL_STARTTLS_ON
 1

	)

19 
	#NGX_MAIL_STARTTLS_ONLY
 2

	)

23 
ngx_Êag_t
 
	míabÀ
;

24 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

26 
ngx_s¶_t
 
	ms¶
;

28 
ngx_uöt_t
 
	m°¨âls
;

29 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

31 
ngx_uöt_t
 
	mvîify
;

32 
ngx_uöt_t
 
	mvîify_dïth
;

34 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

36 
time_t
 
	m£ssi⁄_timeout
;

38 
ngx_°r_t
 
	m˚πifiˇã
;

39 
ngx_°r_t
 
	m˚πifiˇã_key
;

40 
ngx_°r_t
 
	mdh∑øm
;

41 
ngx_°r_t
 
	mecdh_curve
;

42 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

43 
ngx_°r_t
 
	måu°ed_˚πifiˇã
;

44 
ngx_°r_t
 
	m¸l
;

46 
ngx_°r_t
 
	mcùhîs
;

48 
ngx_¨øy_t
 *
	m∑ssw‹ds
;

50 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

52 
ngx_Êag_t
 
	m£ssi⁄_tickës
;

53 
ngx_¨øy_t
 *
	m£ssi⁄_tickë_keys
;

55 
u_ch¨
 *
	mfûe
;

56 
ngx_uöt_t
 
	mlöe
;

57 } 
	tngx_maû_s¶_c⁄f_t
;

60 
ngx_moduÀ_t
 
ngx_maû_s¶_moduÀ
;

	@src/misc/ngx_cpp_test_module.cpp

5 
	~<ngx_c⁄fig.h
>

6 
	~<ngx_c‹e.h
>

7 
	~<ngx_evít.h
>

8 
	~<ngx_evít_c⁄√˘.h
>

9 
	~<ngx_evít_pùe.h
>

11 
	~<ngx_hâp.h
>

13 
	~<ngx_maû.h
>

14 
	~<ngx_maû_p›3_moduÀ.h
>

15 
	~<ngx_maû_im≠_moduÀ.h
>

16 
	~<ngx_maû_smç_moduÀ.h
>

23 
ngx_˝p_ã°_h™dÀr
(*
d©a
);

26 
	$ngx_˝p_ã°_h™dÀr
(*
d©a
)

29 
	}
}

	@src/misc/ngx_google_perftools_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

16 
ProfûîSèπ
(
u_ch¨
* 
‚ame
);

17 
ProfûîSt›
();

18 
ProfûîRegi°îThªad
();

21 *
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_öt_t
 
ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_°r_t
 
	m¥ofûes
;

27 } 
	tngx_googÀ_≥r·oﬁs_c⁄f_t
;

30 
ngx_comm™d_t
 
	gngx_googÀ_≥r·oﬁs_comm™ds
[] = {

32 { 
ngx_°rög
("google_perftools_profiles"),

33 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

34 
ngx_c⁄f_£t_°r_¶Ÿ
,

36 
off£tof
(
ngx_googÀ_≥r·oﬁs_c⁄f_t
, 
¥ofûes
),

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_c‹e_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ_˘x
 = {

44 
ngx_°rög
("google_perftools"),

45 
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
,

46 
NULL


50 
ngx_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_googÀ_≥r·oﬁs_moduÀ_˘x
,

53 
ngx_googÀ_≥r·oﬁs_comm™ds
,

54 
NGX_CORE_MODULE
,

55 
NULL
,

56 
NULL
,

57 
ngx_googÀ_≥r·oﬁs_w‹kî
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
	$ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

69 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

71 
g±cf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_googÀ_≥r·oﬁs_c⁄f_t
));

72 i‡(
g±cf
 =
NULL
) {

73  
NULL
;

82  
g±cf
;

83 
	}
}

86 
ngx_öt_t


87 
	$ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

89 
u_ch¨
 *
¥ofûe
;

90 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

92 
g±cf
 = (
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *)

93 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_googÀ_≥r·oﬁs_moduÀ
);

95 i‡(
g±cf
->
¥ofûes
.
Àn
 == 0) {

96  
NGX_OK
;

99 
¥ofûe
 = 
	`ngx_Æloc
(
g±cf
->
¥ofûes
.
Àn
 + 
NGX_INT_T_LEN
 + 2, 
cy˛e
->
log
);

100 i‡(
¥ofûe
 =
NULL
) {

101  
NGX_OK
;

104 i‡(
	`gëív
("CPUPROFILE")) {

106 
	`ProfûîSt›
();

109 
	`ngx_•rötf
(
¥ofûe
, "%V.%d%Z", &
g±cf
->
¥ofûes
, 
ngx_pid
);

111 i‡(
	`ProfûîSèπ
(
¥ofûe
)) {

113 
	`ProfûîRegi°îThªad
();

116 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_î∫o
,

117 "ProfûîSèπ(%sËÁûed", 
¥ofûe
);

120 
	`ngx_‰ì
(
¥ofûe
);

122  
NGX_OK
;

123 
	}
}

	@src/os/unix/ngx_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(!
ªv
->
ªady
) {

25 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "secondáioÖost");

26  
NGX_AGAIN
;

29 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

30 "ªv->com∂ëe: %d", 
ªv
->
com∂ëe
);

31 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

32 "aiÿsize: %d", 
size
);

34 i‡(!
ªv
->
com∂ëe
) {

35 
	`ngx_memzîo
(&
ªv
->
aiocb
, (aiocb));

37 
ªv
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

38 
ªv
->
aiocb
.
aio_buf
 = 
buf
;

39 
ªv
->
aiocb
.
aio_nbyãs
 = 
size
;

41 #i‡(
NGX_HAVE_KQUEUE
)

42 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

43 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

44 
ªv
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 =Ñev;

47 i‡(
	`aio_ªad
(&
ªv
->
aiocb
) == -1) {

48 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ªv
->
log
, 
ngx_î∫o
,

50 
ªv
->
îr‹
 = 1;

51  
NGX_ERROR
;

54 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "aio_ªad: #%d OK", 
c
->
fd
);

57 
ªv
->
a˘ive
 = 1;

58 
ªv
->
ªady
 = 0;

61 
ªv
->
com∂ëe
 = 0;

63 
n
 = 
	`aio_îr‹
(&
ªv
->
aiocb
);

64 i‡(
n
 == -1) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
, "aio_error() failed");

66 
ªv
->
îr‹
 = 1;

67  
NGX_ERROR
;

70 i‡(
n
 != 0) {

71 i‡(
n
 =
NGX_EINPROGRESS
) {

72 i‡(
ªv
->
ªady
) {

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
n
,

75 
ªv
->
ªady
 = 0;

77  
NGX_AGAIN
;

80 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
n
, "aio_read() failed");

81 
ªv
->
îr‹
 = 1;

82 
ªv
->
ªady
 = 0;

83  
NGX_ERROR
;

86 
n
 = 
	`aio_ªtu∫
(&
ªv
->
aiocb
);

87 i‡(
n
 == -1) {

88 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

91 
ªv
->
îr‹
 = 1;

92 
ªv
->
ªady
 = 0;

93  
NGX_ERROR
;

96 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ªv
->
log
, 0,

97 "aio_ªad: #%d %d", 
c
->
fd
, 
n
);

99 i‡(
n
 == 0) {

100 
ªv
->
eof
 = 1;

101 
ªv
->
ªady
 = 0;

103 
ªv
->
ªady
 = 1;

106 
ªv
->
a˘ive
 = 0;

108  
n
;

109 
	}
}

	@src/os/unix/ngx_aio_read_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
, 
off_t
 
limô
)

16 
n
;

17 
u_ch¨
 *
buf
, *
¥ev
;

18 
size_t
 
size
;

19 
ssize_t
 
tŸÆ
;

21 i‡(
c
->
ªad
->
≥ndög_eof
) {

22 
c
->
ªad
->
ªady
 = 0;

26 
tŸÆ
 = 0;

28 
˛
) {

32 i‡(!
c
->
ªad
->
ªady
) {

33  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

36 
buf
 = 
˛
->buf->
œ°
;

37 
¥ev
 = 
˛
->
buf
->
œ°
;

38 
size
 = 0;

42 
˛
 && 
¥ev
 =˛->
buf
->
œ°
) {

43 
size
 +
˛
->
buf
->
íd
 - cl->buf->
œ°
;

44 
¥ev
 = 
˛
->
buf
->
íd
;

45 
˛
 = cl->
√xt
;

48 
n
 = 
	`ngx_aio_ªad
(
c
, 
buf
, 
size
);

50 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ªad: %d", 
n
);

52 i‡(
n
 =
NGX_AGAIN
) {

53  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

56 i‡(
n
 =
NGX_ERROR
) {

57  
NGX_ERROR
;

60 i‡(
n
 == 0) {

61 
c
->
ªad
->
≥ndög_eof
 = 1;

62 i‡(
tŸÆ
) {

63 
c
->
ªad
->
eof
 = 0;

64 
c
->
ªad
->
ªady
 = 1;

66  
tŸÆ
;

69 i‡(
n
 > 0) {

70 
tŸÆ
 +
n
;

73 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

74 "aio_ªadÅŸÆ: %d", 
tŸÆ
);

77  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

78 
	}
}

	@src/os/unix/ngx_aio_write.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
wev
;

22 
wev
 = 
c
->
wrôe
;

24 i‡(!
wev
->
ªady
) {

25  
NGX_AGAIN
;

28 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0,

29 "aio: wev->com∂ëe: %d", 
wev
->
com∂ëe
);

31 i‡(!
wev
->
com∂ëe
) {

32 
	`ngx_memzîo
(&
wev
->
aiocb
, (aiocb));

34 
wev
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

35 
wev
->
aiocb
.
aio_buf
 = 
buf
;

36 
wev
->
aiocb
.
aio_nbyãs
 = 
size
;

38 #i‡(
NGX_HAVE_KQUEUE
)

39 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

40 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

41 
wev
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = wev;

44 i‡(
	`aio_wrôe
(&
wev
->
aiocb
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
,

47  
NGX_ERROR
;

50 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_write: OK");

52 
wev
->
a˘ive
 = 1;

53 
wev
->
ªady
 = 0;

56 
wev
->
com∂ëe
 = 0;

58 
n
 = 
	`aio_îr‹
(&
wev
->
aiocb
);

59 i‡(
n
 == -1) {

60 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
, "aio_error() failed");

61 
wev
->
îr‹
 = 1;

62  
NGX_ERROR
;

65 i‡(
n
 != 0) {

66 i‡(
n
 =
NGX_EINPROGRESS
) {

67 i‡(
wev
->
ªady
) {

68 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
n
,

70 
wev
->
ªady
 = 0;

72  
NGX_AGAIN
;

75 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_write() failed");

76 
wev
->
îr‹
 = 1;

77 
wev
->
ªady
 = 0;

80 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

81 i‡(
n
 == -1) {

82 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

86 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_return() %d",Ç);

89  
NGX_ERROR
;

92 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

93 i‡(
n
 == -1) {

94 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

97 
wev
->
îr‹
 = 1;

98 
wev
->
ªady
 = 0;

99  
NGX_ERROR
;

103 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_wrôe: %d", 
n
);

105 
wev
->
a˘ive
 = 0;

106 
wev
->
ªady
 = 1;

108  
n
;

109 
	}
}

	@src/os/unix/ngx_aio_write_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_chaö_t
 *

14 
	$ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

16 
u_ch¨
 *
buf
, *
¥ev
;

17 
off_t
 
£nd
, 
£¡
;

18 
size_t
 
Àn
;

19 
ssize_t
 
n
, 
size
;

20 
ngx_chaö_t
 *
˛
;

24 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

25 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

28 
£nd
 = 0;

29 
£¡
 = 0;

30 
˛
 = 
ö
;

32 
˛
) {

34 i‡(
˛
->
buf
->
pos
 =˛->buf->
œ°
) {

35 
˛
 = cl->
√xt
;

41 i‡(!
c
->
wrôe
->
ªady
) {

42  
˛
;

45 
buf
 = 
˛
->buf->
pos
;

46 
¥ev
 = 
buf
;

47 
Àn
 = 0;

51 
˛
 && 
¥ev
 =˛->
buf
->
pos
 && 
£nd
 < 
limô
) {

52 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

56 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

58 i‡(
£nd
 + 
size
 > 
limô
) {

59 
size
 = 
limô
 - 
£nd
;

62 
Àn
 +
size
;

63 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

64 
£nd
 +
size
;

65 
˛
 = cl->
√xt
;

68 
n
 = 
	`ngx_aio_wrôe
(
c
, 
buf
, 
Àn
);

70 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_wrôe: %z", 
n
);

72 i‡(
n
 =
NGX_ERROR
) {

73  
NGX_CHAIN_ERROR
;

76 i‡(
n
 > 0) {

77 
£¡
 +
n
;

78 
c
->
£¡
 +
n
;

81 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

82 "aio_wrôê£¡: %O", 
c
->
£¡
);

84 
˛
 = 
ö
; cl; c»˛->
√xt
) {

86 i‡(
£¡
 >
˛
->
buf
->
œ°
 - cl->buf->
pos
) {

87 
£¡
 -
˛
->
buf
->
œ°
 - cl->buf->
pos
;

88 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

93 
˛
->
buf
->
pos
 +
£¡
;

99  
˛
;

100 
	}
}

	@src/os/unix/ngx_alloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	gngx_∑gesize
;

13 
ngx_uöt_t
 
	gngx_∑gesize_shi·
;

14 
ngx_uöt_t
 
	gngx_ˇchñöe_size
;

18 
	$ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

20 *
p
;

22 
p
 = 
	`mÆloc
(
size
);

23 i‡(
p
 =
NULL
) {

24 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

25 "mÆloc(%uzËÁûed", 
size
);

28 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0, "mÆloc: %p:%uz", 
p
, 
size
);

30  
p
;

31 
	}
}

35 
	$ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

37 *
p
;

39 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

41 i‡(
p
) {

42 
	`ngx_memzîo
(
p
, 
size
);

45  
p
;

46 
	}
}

49 #i‡(
NGX_HAVE_POSIX_MEMALIGN
)

52 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

54 *
p
;

55 
îr
;

57 
îr
 = 
	`posix_memÆign
(&
p
, 
Æignmít
, 
size
);

59 i‡(
îr
) {

60 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

61 "posix_memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

62 
p
 = 
NULL
;

65 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

66 "posix_memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

68  
p
;

69 
	}
}

71 #ñi‡(
NGX_HAVE_MEMALIGN
)

74 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

76 *
p
;

78 
p
 = 
	`memÆign
(
Æignmít
, 
size
);

79 i‡(
p
 =
NULL
) {

80 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

81 "memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

84 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

85 "memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

87  
p
;

88 
	}
}

	@src/os/unix/ngx_alloc.h

8 #i‚de‡
_NGX_ALLOC_H_INCLUDED_


9 
	#_NGX_ALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 *
ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

17 *
ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

19 
	#ngx_‰ì
 
‰ì


	)

29 #i‡(
NGX_HAVE_POSIX_MEMALIGN
 || 
NGX_HAVE_MEMALIGN
)

31 *
ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
);

35 
	#ngx_memÆign
(
Æignmít
, 
size
, 
log
Ë
	`ngx_Æloc
(size,Üog)

	)

40 
ngx_uöt_t
 
ngx_∑gesize
;

41 
ngx_uöt_t
 
ngx_∑gesize_shi·
;

42 
ngx_uöt_t
 
ngx_ˇchñöe_size
;

	@src/os/unix/ngx_atomic.h

8 #i‚de‡
_NGX_ATOMIC_H_INCLUDED_


9 
	#_NGX_ATOMIC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_LIBATOMIC
)

18 
	#AO_REQUIRE_CAS


	)

19 
	~<©omic_›s.h
>

21 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

23 
	tngx_©omic_öt_t
;

24 
AO_t
 
	tngx_©omic_uöt_t
;

25 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

27 #i‡(
NGX_PTR_SIZE
 == 8)

28 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

30 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

33 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

34 
	`AO_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
√w
)

	)

35 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

36 
	`AO_„tch_™d_add
(
vÆue
, 
add
)

	)

37 
	#ngx_mem‹y_b¨rõr
(Ë
	`AO_n›
()

	)

38 
	#ngx_˝u_∑u£
()

	)

41 #ñi‡(
NGX_DARWIN_ATOMIC
)

48 
	~<libkîn/OSAtomic.h
>

52 #unde‡
boﬁ


56 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

58 #i‡(
NGX_PTR_SIZE
 == 8)

60 
öt64_t
 
	tngx_©omic_öt_t
;

61 
uöt64_t
 
	tngx_©omic_uöt_t
;

62 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

64 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

65 
	`OSAtomicCom∑ªAndSw≠64B¨rõr
(
ﬁd
, 
√w
, (
öt64_t
 *Ë
lock
)

	)

67 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

68 (
	`OSAtomicAdd64
(
add
, (
öt64_t
 *Ë
vÆue
Ë-ádd)

	)

72 
öt32_t
 
	tngx_©omic_öt_t
;

73 
uöt32_t
 
	tngx_©omic_uöt_t
;

74 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

76 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

77 
	`OSAtomicCom∑ªAndSw≠32B¨rõr
(
ﬁd
, 
√w
, (
öt32_t
 *Ë
lock
)

	)

79 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

80 (
	`OSAtomicAdd32
(
add
, (
öt32_t
 *Ë
vÆue
Ë-ádd)

	)

84 
	#ngx_mem‹y_b¨rõr
(Ë
	`OSMem‹yB¨rõr
()

	)

86 
	#ngx_˝u_∑u£
()

	)

88 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

91 #ñi‡(
NGX_HAVE_GCC_ATOMIC
)

95 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

97 
	tngx_©omic_öt_t
;

98 
	tngx_©omic_uöt_t
;

100 #i‡(
NGX_PTR_SIZE
 == 8)

101 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

103 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

106 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

109 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
£t
) \

110 
	`__sync_boﬁ_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
£t
)

	)

112 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

113 
	`__sync_„tch_™d_add
(
vÆue
, 
add
)

	)

115 
	#ngx_mem‹y_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

117 #i‡–
__i386__
 || 
__i386
 || 
__amd64__
 || 
__amd64
 )

118 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

120 
	#ngx_˝u_∑u£
()

	)

124 #ñi‡–
__i386__
 || 
__i386
 )

126 
öt32_t
 
	tngx_©omic_öt_t
;

127 
uöt32_t
 
	tngx_©omic_uöt_t
;

128 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

129 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

132 #i‡–
__SUNPRO_C
 )

134 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

136 
ngx_©omic_uöt_t


137 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

138 
ngx_©omic_uöt_t
 
£t
);

140 
ngx_©omic_öt_t


141 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

149 
ngx_˝u_∑u£
();

153 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

158 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

160 
	~"ngx_gcc_©omic_x86.h
"

165 #ñi‡–
__amd64__
 || 
__amd64
 )

167 
öt64_t
 
	tngx_©omic_öt_t
;

168 
uöt64_t
 
	tngx_©omic_uöt_t
;

169 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

170 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

173 #i‡–
__SUNPRO_C
 )

175 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

177 
ngx_©omic_uöt_t


178 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

179 
ngx_©omic_uöt_t
 
£t
);

181 
ngx_©omic_öt_t


182 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

190 
ngx_˝u_∑u£
();

194 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

199 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

201 
	~"ngx_gcc_©omic_amd64.h
"

206 #ñi‡–
__•¨c__
 || 
__•¨c
 || 
__•¨cv9
 )

208 #i‡(
NGX_PTR_SIZE
 == 8)

210 
öt64_t
 
	tngx_©omic_öt_t
;

211 
uöt64_t
 
	tngx_©omic_uöt_t
;

212 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

216 
öt32_t
 
	tngx_©omic_öt_t
;

217 
uöt32_t
 
	tngx_©omic_uöt_t
;

218 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

222 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

225 #i‡–
__SUNPRO_C
 )

227 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

229 
	~"ngx_su≈ro_©omic_•¨c64.h
"

234 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

236 
	~"ngx_gcc_©omic_•¨c64.h
"

241 #ñi‡–
__powîpc__
 || 
__POWERPC__
 )

243 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

245 #i‡(
NGX_PTR_SIZE
 == 8)

247 
öt64_t
 
	tngx_©omic_öt_t
;

248 
uöt64_t
 
	tngx_©omic_uöt_t
;

249 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

253 
öt32_t
 
	tngx_©omic_öt_t
;

254 
uöt32_t
 
	tngx_©omic_uöt_t
;

255 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

259 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

262 
	~"ngx_gcc_©omic_µc.h
"

267 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

269 
	#NGX_HAVE_ATOMIC_OPS
 0

	)

271 
öt32_t
 
	tngx_©omic_öt_t
;

272 
uöt32_t
 
	tngx_©omic_uöt_t
;

273 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

274 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

277 
ngx_ölöe
 
ngx_©omic_uöt_t


278 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

279 
ngx_©omic_uöt_t
 
£t
)

281 i‡(*
lock
 =
ﬁd
) {

282 *
lock
 = 
£t
;

287 
	}
}

290 
ngx_ölöe
 
ngx_©omic_öt_t


291 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

293 
ngx_©omic_öt_t
 
ﬁd
;

295 
ﬁd
 = *
vÆue
;

296 *
vÆue
 +
add
;

298  
ﬁd
;

299 
	}
}

301 
	#ngx_mem‹y_b¨rõr
()

	)

302 
	#ngx_˝u_∑u£
()

	)

307 
ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
);

309 
	#ngx_åylock
(
lock
Ë(*÷ockË=0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 1))

	)

310 
	#ngx_u∆ock
(
lock
Ë*÷ockË0

	)

	@src/os/unix/ngx_channel.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_ch™√l.h
>

13 
ngx_öt_t


14 
	$ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

15 
ngx_log_t
 *
log
)

17 
ssize_t
 
n
;

18 
ngx_îr_t
 
îr
;

19 
iovec
 
iov
[1];

20 
msghdr
 
msg
;

22 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

25 
cmsghdr
 
cm
;

26 
•a˚
[
	`CMSG_SPACE
(())];

27 } 
cmsg
;

29 i‡(
ch
->
fd
 == -1) {

30 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

31 
msg
.
msg_c⁄åﬁÀn
 = 0;

34 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

35 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

37 
	`ngx_memzîo
(&
cmsg
, (cmsg));

39 
cmsg
.
cm
.
cmsg_Àn
 = 
	`CMSG_LEN
(());

40 
cmsg
.
cm
.
cmsg_Àvñ
 = 
SOL_SOCKET
;

41 
cmsg
.
cm
.
cmsg_ty≥
 = 
SCM_RIGHTS
;

53 
	`ngx_mem˝y
(
	`CMSG_DATA
(&
cmsg
.
cm
), &
ch
->
fd
, ());

56 
msg
.
msg_Êags
 = 0;

60 i‡(
ch
->
fd
 == -1) {

61 
msg
.
msg_ac¸ights
 = 
NULL
;

62 
msg
.
msg_ac¸ight¶í
 = 0;

65 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
ch
->
fd
;

66 
msg
.
msg_ac¸ight¶í
 = ();

71 
iov
[0].
iov_ba£
 = (*Ë
ch
;

72 
iov
[0].
iov_Àn
 = 
size
;

74 
msg
.
msg_«me
 = 
NULL
;

75 
msg
.
msg_«mñí
 = 0;

76 
msg
.
msg_iov
 = 
iov
;

77 
msg
.
msg_iovÀn
 = 1;

79 
n
 = 
	`£ndmsg
(
s
, &
msg
, 0);

81 i‡(
n
 == -1) {

82 
îr
 = 
ngx_î∫o
;

83 i‡(
îr
 =
NGX_EAGAIN
) {

84  
NGX_AGAIN
;

87 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "sendmsg() failed");

88  
NGX_ERROR
;

91  
NGX_OK
;

92 
	}
}

95 
ngx_öt_t


96 
	$ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
, 
ngx_log_t
 *
log
)

98 
ssize_t
 
n
;

99 
ngx_îr_t
 
îr
;

100 
iovec
 
iov
[1];

101 
msghdr
 
msg
;

103 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

105 
cmsghdr
 
cm
;

106 
•a˚
[
	`CMSG_SPACE
(())];

107 } 
cmsg
;

109 
fd
;

112 
iov
[0].
iov_ba£
 = (*Ë
ch
;

113 
iov
[0].
iov_Àn
 = 
size
;

115 
msg
.
msg_«me
 = 
NULL
;

116 
msg
.
msg_«mñí
 = 0;

117 
msg
.
msg_iov
 = 
iov
;

118 
msg
.
msg_iovÀn
 = 1;

120 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

121 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

122 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

124 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
fd
;

125 
msg
.
msg_ac¸ight¶í
 = ();

128 
n
 = 
	`ªcvmsg
(
s
, &
msg
, 0);

130 i‡(
n
 == -1) {

131 
îr
 = 
ngx_î∫o
;

132 i‡(
îr
 =
NGX_EAGAIN
) {

133  
NGX_AGAIN
;

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "recvmsg() failed");

137  
NGX_ERROR
;

140 i‡(
n
 == 0) {

141 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "recvmsg()Ñeturned zero");

142  
NGX_ERROR
;

145 i‡((
size_t
Ë
n
 < (
ngx_ch™√l_t
)) {

146 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

147 "ªcvmsg(Ëªtu∫edÇŸÉnough d©a: %z", 
n
);

148  
NGX_ERROR
;

151 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

153 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

155 i‡(
cmsg
.
cm
.
cmsg_Àn
 < (
sockÀn_t
Ë
	`CMSG_LEN
(())) {

156 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

158  
NGX_ERROR
;

161 i‡(
cmsg
.
cm
.
cmsg_Àvñ
 !
SOL_SOCKET
 || cmsg.cm.
cmsg_ty≥
 !
SCM_RIGHTS
)

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

166 
cmsg
.
cm
.
cmsg_Àvñ
, cmsg.cm.
cmsg_ty≥
);

167  
NGX_ERROR
;

172 
	`ngx_mem˝y
(&
ch
->
fd
, 
	`CMSG_DATA
(&
cmsg
.
cm
), ());

175 i‡(
msg
.
msg_Êags
 & (
MSG_TRUNC
|
MSG_CTRUNC
)) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

182 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

183 i‡(
msg
.
msg_ac¸ight¶í
 != ()) {

184 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

186  
NGX_ERROR
;

189 
ch
->
fd
 = fd;

194  
n
;

195 
	}
}

198 
ngx_öt_t


199 
	$ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
, 
ngx_öt_t
 
evít
,

200 
ngx_evít_h™dÀr_±
 
h™dÀr
)

202 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
;

203 
ngx_c⁄√˘i⁄_t
 *
c
;

205 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
fd
, 
cy˛e
->
log
);

207 i‡(
c
 =
NULL
) {

208  
NGX_ERROR
;

211 
c
->
poﬁ
 = 
cy˛e
->pool;

213 
ªv
 = 
c
->
ªad
;

214 
wev
 = 
c
->
wrôe
;

216 
ªv
->
log
 = 
cy˛e
->log;

217 
wev
->
log
 = 
cy˛e
->log;

219 
ªv
->
ch™√l
 = 1;

220 
wev
->
ch™√l
 = 1;

222 
ev
 = (
evít
 =
NGX_READ_EVENT
Ë? 
ªv
 : 
wev
;

224 
ev
->
h™dÀr
 = handler;

226 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

227 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

228 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

229  
NGX_ERROR
;

233 i‡(
	`ngx_add_evít
(
ev
, 
evít
, 0Ë=
NGX_ERROR
) {

234 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

235  
NGX_ERROR
;

239  
NGX_OK
;

240 
	}
}

244 
	$ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
)

246 i‡(
	`˛o£
(
fd
[0]) == -1) {

247 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

250 i‡(
	`˛o£
(
fd
[1]) == -1) {

251 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

253 
	}
}

	@src/os/unix/ngx_channel.h

8 #i‚de‡
_NGX_CHANNEL_H_INCLUDED_


9 
	#_NGX_CHANNEL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

18 
ngx_uöt_t
 
	mcomm™d
;

19 
ngx_pid_t
 
	mpid
;

20 
ngx_öt_t
 
	m¶Ÿ
;

21 
ngx_fd_t
 
	mfd
;

22 } 
	tngx_ch™√l_t
;

25 
ngx_öt_t
 
ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

26 
ngx_log_t
 *
log
);

27 
ngx_öt_t
 
ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

28 
ngx_log_t
 *
log
);

29 
ngx_öt_t
 
ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
,

30 
ngx_öt_t
 
evít
, 
ngx_evít_h™dÀr_±
 
h™dÀr
);

31 
ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
);

	@src/os/unix/ngx_daemon.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t


13 
	$ngx_d´m⁄
(
ngx_log_t
 *
log
)

15 
fd
;

17 
	`f‹k
()) {

19 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "fork() failed");

20  
NGX_ERROR
;

26 
	`exô
(0);

29 
ngx_pid
 = 
	`ngx_gëpid
();

31 i‡(
	`£tsid
() == -1) {

32 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "setsid() failed");

33  
NGX_ERROR
;

36 
	`umask
(0);

38 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

39 i‡(
fd
 == -1) {

40 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

42  
NGX_ERROR
;

45 i‡(
	`dup2
(
fd
, 
STDIN_FILENO
) == -1) {

46 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDIN) failed");

47  
NGX_ERROR
;

50 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) == -1) {

51 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDOUT) failed");

52  
NGX_ERROR
;

56 i‡(
	`dup2
(
fd
, 
STDERR_FILENO
) == -1) {

57 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDERR) failed");

58  
NGX_ERROR
;

62 i‡(
fd
 > 
STDERR_FILENO
) {

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "close() failed");

65  
NGX_ERROR
;

69  
NGX_OK
;

70 
	}
}

	@src/os/unix/ngx_darwin.h

8 #i‚de‡
_NGX_DARWIN_H_INCLUDED_


9 
	#_NGX_DARWIN_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_d¨wö_kîn_o§ñd©e
;

17 
ngx_d¨wö_hw_n˝u
;

18 
u_l⁄g
 
ngx_d¨wö_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@src/os/unix/ngx_darwin_config.h

8 #i‚de‡
_NGX_DARWIN_CONFIG_H_INCLUDED_


9 
	#_NGX_DARWIN_CONFIG_H_INCLUDED_


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

14 
	~<uni°d.h
>

15 
	~<öây≥s.h
>

16 
	~<°d¨g.h
>

17 
	~<°ddef.h
>

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<°rög.h
>

23 
	~<sig«l.h
>

24 
	~<pwd.h
>

25 
	~<gΩ.h
>

26 
	~<dúít.h
>

27 
	~<glob.h
>

28 
	~<sys/mou¡.h
>

30 
	~<sys/fûio.h
>

31 
	~<sys/io˘l.h
>

32 
	~<sys/uio.h
>

33 
	~<sys/°©.h
>

34 
	~<f˙é.h
>

36 
	~<sys/waô.h
>

37 
	~<sys/mm™.h
>

38 
	~<sys/ªsour˚.h
>

39 
	~<sched.h
>

41 
	~<sys/sockë.h
>

42 
	~<√töë/ö.h
>

43 
	~<√töë/t˝.h
>

44 
	~<¨∑/öë.h
>

45 
	~<√tdb.h
>

46 
	~<sys/un.h
>

48 
	~<sys/sys˘l.h
>

49 
	~<xloˇÀ.h
>

52 #i‚de‡
IOV_MAX


53 
	#IOV_MAX
 64

	)

57 
	~<ngx_auto_c⁄fig.h
>

60 #i‡(
NGX_HAVE_POSIX_SEM
)

61 
	~<£m≠h‹e.h
>

65 #i‡(
NGX_HAVE_POLL
)

66 
	~<pﬁl.h
>

70 #i‡(
NGX_HAVE_KQUEUE
)

71 
	~<sys/evít.h
>

75 
	#NGX_LISTEN_BACKLOG
 -1

	)

78 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


79 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

83 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


84 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

88 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

89 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

92 **
ívú⁄
;

	@src/os/unix/ngx_darwin_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_d¨wö_kîn_o°y≥
[16];

13 
	gngx_d¨wö_kîn_o§ñó£
[128];

14 
	gngx_d¨wö_hw_n˝u
;

15 
	gngx_d¨wö_kîn_ùc_somaxc⁄n
;

16 
u_l⁄g
 
	gngx_d¨wö_√t_öë_t˝_£nd•a˚
;

18 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

21 
ngx_os_io_t
 
	gngx_d¨wö_io
 = {

22 
ngx_unix_ªcv
,

23 
ngx_ªadv_chaö
,

24 
ngx_udp_unix_ªcv
,

25 
ngx_unix_£nd
,

26 #i‡(
NGX_HAVE_SENDFILE
)

27 
ngx_d¨wö_£ndfûe_chaö
,

28 
NGX_IO_SENDFILE


30 
ngx_wrôev_chaö
,

37 *
	m«me
;

38 *
	mvÆue
;

39 
size_t
 
	msize
;

40 
ngx_uöt_t
 
	mexi°s
;

41 } 
	tsys˘l_t
;

44 
sys˘l_t
 
	gsys˘ls
[] = {

46 &
ngx_d¨wö_hw_n˝u
,

47 (
ngx_d¨wö_hw_n˝u
), 0 },

50 &
ngx_d¨wö_√t_öë_t˝_£nd•a˚
,

51 (
ngx_d¨wö_√t_öë_t˝_£nd•a˚
), 0 },

54 &
ngx_d¨wö_kîn_ùc_somaxc⁄n
,

55 (
ngx_d¨wö_kîn_ùc_somaxc⁄n
), 0 },

57 { 
NULL
, NULL, 0, 0 }

62 
	$ngx_debug_öô
()

64 #i‡(
NGX_DEBUG_MALLOC
)

75 
	`£ãnv
("MallocScribble", "1", 0);

77 
ngx_debug_mÆloc
 = 1;

81 i‡(
	`gëív
("MallocScribble")) {

82 
ngx_debug_mÆloc
 = 1;

86 
	}
}

89 
ngx_öt_t


90 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

92 
size_t
 
size
;

93 
ngx_îr_t
 
îr
;

94 
ngx_uöt_t
 
i
;

96 
size
 = (
ngx_d¨wö_kîn_o°y≥
);

97 i‡(
	`sys˘lby«me
("kîn.o°y≥", 
ngx_d¨wö_kîn_o°y≥
, &
size
, 
NULL
, 0)

100 
îr
 = 
ngx_î∫o
;

102 i‡(
îr
 !
NGX_ENOENT
) {

104 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

107 i‡(
îr
 !
NGX_ENOMEM
) {

108  
NGX_ERROR
;

111 
ngx_d¨wö_kîn_o°y≥
[
size
 - 1] = '\0';

115 
size
 = (
ngx_d¨wö_kîn_o§ñó£
);

116 i‡(
	`sys˘lby«me
("kîn.o§ñó£", 
ngx_d¨wö_kîn_o§ñó£
, &
size
,

117 
NULL
, 0)

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 !
NGX_ENOENT
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

127 i‡(
îr
 !
NGX_ENOMEM
) {

128  
NGX_ERROR
;

131 
ngx_d¨wö_kîn_o§ñó£
[
size
 - 1] = '\0';

135 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

136 
size
 = 
sys˘ls
[
i
].size;

138 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

141 
sys˘ls
[
i
].
exi°s
 = 1;

145 
îr
 = 
ngx_î∫o
;

147 i‡(
îr
 =
NGX_ENOENT
) {

151 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

152 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

153  
NGX_ERROR
;

156 
ngx_n˝u
 = 
ngx_d¨wö_hw_n˝u
;

158 i‡(
ngx_d¨wö_kîn_ùc_somaxc⁄n
 > 32767) {

159 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

161  
NGX_ERROR
;

164 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

166 
ngx_os_io
 = 
ngx_d¨wö_io
;

168  
NGX_OK
;

169 
	}
}

173 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

175 
u_l⁄g
 
vÆue
;

176 
ngx_uöt_t
 
i
;

178 i‡(
ngx_d¨wö_kîn_o°y≥
[0]) {

179 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

180 
ngx_d¨wö_kîn_o°y≥
, 
ngx_d¨wö_kîn_o§ñó£
);

183 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

184 i‡(
sys˘ls
[
i
].
exi°s
) {

185 i‡(
sys˘ls
[
i
].
size
 == ()) {

186 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

189 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

192 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

193 
sys˘ls
[
i
].
«me
, 
vÆue
);

196 
	}
}

	@src/os/unix/ngx_darwin_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

30 
ngx_chaö_t
 *

31 
	$ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

33 
rc
;

34 
off_t
 
£nd
, 
¥ev_£nd
, 
£¡
;

35 
off_t
 
fûe_size
;

36 
ssize_t
 
n
;

37 
ngx_uöt_t
 
eöå
;

38 
ngx_îr_t
 
îr
;

39 
ngx_buf_t
 *
fûe
;

40 
ngx_evít_t
 *
wev
;

41 
ngx_chaö_t
 *
˛
;

42 
ngx_iovec_t
 
hódî
, 
åaûî
;

43 
sf_hdå
 
hdå
;

44 
iovec
 
hódîs
[
NGX_IOVS_PREALLOCATE
];

45 
iovec
 
åaûîs
[
NGX_IOVS_PREALLOCATE
];

47 
wev
 = 
c
->
wrôe
;

49 i‡(!
wev
->
ªady
) {

50  
ö
;

53 #i‡(
NGX_HAVE_KQUEUE
)

55 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

56 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

58 
wev
->
îr‹
 = 1;

59  
NGX_CHAIN_ERROR
;

66 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

67 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

70 
£nd
 = 0;

72 
hódî
.
iovs
 = 
hódîs
;

73 
hódî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

75 
åaûî
.
iovs
 = 
åaûîs
;

76 
åaûî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

79 
eöå
 = 0;

80 
¥ev_£nd
 = 
£nd
;

84 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
hódî
, 
ö
, 
limô
 - 
£nd
, 
c
->
log
);

86 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

87  
NGX_CHAIN_ERROR
;

90 
£nd
 +
hódî
.
size
;

92 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

93 
fûe
 = 
˛
->
buf
;

97 
fûe_size
 = 
	`ngx_chaö_cﬂÀs˚_fûe
(&
˛
, 
limô
 - 
£nd
);

99 
£nd
 +
fûe_size
;

101 i‡(
hódî
.
cou¡
 == 0) {

107 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
åaûî
, cl, 
limô
 - 
£nd
,

108 
c
->
log
);

109 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

110  
NGX_CHAIN_ERROR
;

113 
£nd
 +
åaûî
.
size
;

116 
åaûî
.
cou¡
 = 0;

124 
hdå
.
hódîs
 = 
hódî
.
cou¡
 ? hódî.
iovs
 : 
NULL
;

125 
hdå
.
hdr_˙t
 = 
hódî
.
cou¡
;

126 
hdå
.
åaûîs
 = 
åaûî
.
cou¡
 ?Åøûî.
iovs
 : 
NULL
;

127 
hdå
.
ål_˙t
 = 
åaûî
.
cou¡
;

129 
£¡
 = 
hódî
.
size
 + 
fûe_size
;

131 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

133 
fûe
->
fûe_pos
, 
£¡
, 
hódî
.
size
);

135 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

136 &
£¡
, &
hdå
, 0);

138 i‡(
rc
 == -1) {

139 
îr
 = 
ngx_î∫o
;

141 
îr
) {

142 
NGX_EAGAIN
:

145 
NGX_EINTR
:

146 
eöå
 = 1;

150 
wev
->
îr‹
 = 1;

151 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

152  
NGX_CHAIN_ERROR
;

155 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

156 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

159 i‡(
rc
 =0 && 
£¡
 == 0) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

169 
fûe
->fûe->
«me
.
d©a
);

171  
NGX_CHAIN_ERROR
;

174 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

176 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî
.
size
);

179 
n
 = 
	`ngx_wrôev
(
c
, &
hódî
);

181 i‡(
n
 =
NGX_ERROR
) {

182  
NGX_CHAIN_ERROR
;

185 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

188 
c
->
£¡
 += sent;

190 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

192 i‡(
eöå
) {

193 
£nd
 = 
¥ev_£nd
 + 
£¡
;

197 i‡(
£nd
 - 
¥ev_£nd
 !
£¡
) {

198 
wev
->
ªady
 = 0;

199  
ö
;

202 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

203  
ö
;

206 
	}
}

	@src/os/unix/ngx_errno.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

28 
ngx_°r_t
 *
	gngx_sys_îæi°
;

29 
ngx_°r_t
 
	gngx_unknown_îr‹
 = 
ngx_°rög
("UnknownÉrror");

32 
u_ch¨
 *

33 
	$ngx_°ªº‹
(
ngx_îr_t
 
îr
, 
u_ch¨
 *
îr°r
, 
size_t
 
size
)

35 
ngx_°r_t
 *
msg
;

37 
msg
 = ((
ngx_uöt_t
Ë
îr
 < 
NGX_SYS_NERR
Ë? &
ngx_sys_îæi°
[err]:

38 &
ngx_unknown_îr‹
;

39 
size
 = 
	`ngx_mö
(size, 
msg
->
Àn
);

41  
	`ngx_˝ymem
(
îr°r
, 
msg
->
d©a
, 
size
);

42 
	}
}

45 
ngx_öt_t


46 
	$ngx_°ªº‹_öô
()

48 *
msg
;

49 
u_ch¨
 *
p
;

50 
size_t
 
Àn
;

51 
ngx_îr_t
 
îr
;

58 
Àn
 = 
NGX_SYS_NERR
 * (
ngx_°r_t
);

60 
ngx_sys_îæi°
 = 
	`mÆloc
(
Àn
);

61 i‡(
ngx_sys_îæi°
 =
NULL
) {

62 
Áûed
;

65 
îr
 = 0;Éº < 
NGX_SYS_NERR
;Érr++) {

66 
msg
 = 
	`°ªº‹
(
îr
);

67 
Àn
 = 
	`ngx_°æí
(
msg
);

69 
p
 = 
	`mÆloc
(
Àn
);

70 i‡(
p
 =
NULL
) {

71 
Áûed
;

74 
	`ngx_mem˝y
(
p
, 
msg
, 
Àn
);

75 
ngx_sys_îæi°
[
îr
].
Àn
 =Üen;

76 
ngx_sys_îæi°
[
îr
].
d©a
 = 
p
;

79  
NGX_OK
;

81 
Áûed
:

83 
îr
 = 
î∫o
;

84 
	`ngx_log_°dîr
(0, "mÆloc(%uzËÁûed (%d: %s)", 
Àn
, 
îr
, 
	`°ªº‹
(err));

86  
NGX_ERROR
;

87 
	}
}

	@src/os/unix/ngx_errno.h

8 #i‚de‡
_NGX_ERRNO_H_INCLUDED_


9 
	#_NGX_ERRNO_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_îr_t
;

18 
	#NGX_EPERM
 
EPERM


	)

19 
	#NGX_ENOENT
 
ENOENT


	)

20 
	#NGX_ENOPATH
 
ENOENT


	)

21 
	#NGX_ESRCH
 
ESRCH


	)

22 
	#NGX_EINTR
 
EINTR


	)

23 
	#NGX_ECHILD
 
ECHILD


	)

24 
	#NGX_ENOMEM
 
ENOMEM


	)

25 
	#NGX_EACCES
 
EACCES


	)

26 
	#NGX_EBUSY
 
EBUSY


	)

27 
	#NGX_EEXIST
 
EEXIST


	)

28 
	#NGX_EXDEV
 
EXDEV


	)

29 
	#NGX_ENOTDIR
 
ENOTDIR


	)

30 
	#NGX_EISDIR
 
EISDIR


	)

31 
	#NGX_EINVAL
 
EINVAL


	)

32 
	#NGX_ENFILE
 
ENFILE


	)

33 
	#NGX_EMFILE
 
EMFILE


	)

34 
	#NGX_ENOSPC
 
ENOSPC


	)

35 
	#NGX_EPIPE
 
EPIPE


	)

36 
	#NGX_EINPROGRESS
 
EINPROGRESS


	)

37 
	#NGX_ENOPROTOOPT
 
ENOPROTOOPT


	)

38 
	#NGX_EOPNOTSUPP
 
EOPNOTSUPP


	)

39 
	#NGX_EADDRINUSE
 
EADDRINUSE


	)

40 
	#NGX_ECONNABORTED
 
ECONNABORTED


	)

41 
	#NGX_ECONNRESET
 
ECONNRESET


	)

42 
	#NGX_ENOTCONN
 
ENOTCONN


	)

43 
	#NGX_ETIMEDOUT
 
ETIMEDOUT


	)

44 
	#NGX_ECONNREFUSED
 
ECONNREFUSED


	)

45 
	#NGX_ENAMETOOLONG
 
ENAMETOOLONG


	)

46 
	#NGX_ENETDOWN
 
ENETDOWN


	)

47 
	#NGX_ENETUNREACH
 
ENETUNREACH


	)

48 
	#NGX_EHOSTDOWN
 
EHOSTDOWN


	)

49 
	#NGX_EHOSTUNREACH
 
EHOSTUNREACH


	)

50 
	#NGX_ENOSYS
 
ENOSYS


	)

51 
	#NGX_ECANCELED
 
ECANCELED


	)

52 
	#NGX_EILSEQ
 
EILSEQ


	)

53 
	#NGX_ENOMOREFILES
 0

	)

54 
	#NGX_ELOOP
 
ELOOP


	)

55 
	#NGX_EBADF
 
EBADF


	)

57 #i‡(
NGX_HAVE_OPENAT
)

58 
	#NGX_EMLINK
 
EMLINK


	)

61 #i‡(
__hpux__
)

62 
	#NGX_EAGAIN
 
EWOULDBLOCK


	)

64 
	#NGX_EAGAIN
 
EAGAIN


	)

68 
	#ngx_î∫o
 
î∫o


	)

69 
	#ngx_sockë_î∫o
 
î∫o


	)

70 
	#ngx_£t_î∫o
(
îr
Ë
î∫o
 = 
	)
err

71 
	#ngx_£t_sockë_î∫o
(
îr
Ë
î∫o
 = 
	)
err

74 
u_ch¨
 *
ngx_°ªº‹
(
ngx_îr_t
 
îr
, u_ch¨ *
îr°r
, 
size_t
 
size
);

75 
ngx_öt_t
 
ngx_°ªº‹_öô
();

	@src/os/unix/ngx_file_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

31 
ngx_kqueue
;

34 
ssize_t
 
ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
,

35 
ngx_evít_t
 *
ev
);

36 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

39 
ngx_öt_t


40 
	$ngx_fûe_aio_öô
(
ngx_fûe_t
 *
fûe
, 
ngx_poﬁ_t
 *
poﬁ
)

42 
ngx_evít_aio_t
 *
aio
;

44 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

45 i‡(
aio
 =
NULL
) {

46  
NGX_ERROR
;

49 
aio
->
fûe
 = file;

50 
aio
->
fd
 = 
fûe
->fd;

51 
aio
->
evít
.
d©a
 =áio;

52 
aio
->
evít
.
ªady
 = 1;

53 
aio
->
evít
.
log
 = 
fûe
->log;

55 
fûe
->
aio
 =áio;

57  
NGX_OK
;

58 
	}
}

61 
ssize_t


62 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

63 
ngx_poﬁ_t
 *
poﬁ
)

65 
n
;

66 
ngx_evít_t
 *
ev
;

67 
ngx_evít_aio_t
 *
aio
;

69 i‡(!
ngx_fûe_aio
) {

70  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

73 i‡(
fûe
->
aio
 =
NULL
 && 
	`ngx_fûe_aio_öô
(fûe, 
poﬁ
Ë!
NGX_OK
) {

74  
NGX_ERROR
;

77 
aio
 = 
fûe
->aio;

78 
ev
 = &
aio
->
evít
;

80 i‡(!
ev
->
ªady
) {

81 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

82 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

83  
NGX_AGAIN
;

86 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

88 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

90 i‡(
ev
->
com∂ëe
) {

91 
ev
->
com∂ëe
 = 0;

92 
	`ngx_£t_î∫o
(
aio
->
îr
);

94 i‡(
aio
->
îr
 == 0) {

95  
aio
->
nbyãs
;

98 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

99 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

101  
NGX_ERROR
;

104 
	`ngx_memzîo
(&
aio
->
aiocb
, (aiocb));

106 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

107 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

108 
aio
->
aiocb
.
aio_buf
 = 
buf
;

109 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

110 #i‡(
NGX_HAVE_KQUEUE
)

111 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

112 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

113 
aio
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = 
ev
;

115 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

117 
n
 = 
	`aio_ªad
(&
aio
->
aiocb
);

119 i‡(
n
 == -1) {

120 
n
 = 
ngx_î∫o
;

122 i‡(
n
 =
NGX_EAGAIN
) {

123  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

126 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
n
,

127 "aio_ªad(\"%V\"ËÁûed", &
fûe
->
«me
);

129 i‡(
n
 =
NGX_ENOSYS
) {

130 
ngx_fûe_aio
 = 0;

131  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

134  
NGX_ERROR
;

137 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

138 "aio_ªad: fd:%d %d", 
fûe
->
fd
, 
n
);

140 
ev
->
a˘ive
 = 1;

141 
ev
->
ªady
 = 0;

142 
ev
->
com∂ëe
 = 0;

144  
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
);

145 
	}
}

148 
ssize_t


149 
	$ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
, 
ngx_evít_t
 *
ev
)

151 
n
;

152 
ngx_îr_t
 
îr
;

154 
n
 = 
	`aio_îr‹
(&
aio
->
aiocb
);

156 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

157 "aio_îr‹: fd:%d %d", 
fûe
->
fd
, 
n
);

159 i‡(
n
 == -1) {

160 
îr
 = 
ngx_î∫o
;

161 
aio
->
îr
 =Érr;

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
îr
,

164 "aio_îr‹(\"%V\"ËÁûed", &
fûe
->
«me
);

165  
NGX_ERROR
;

168 i‡(
n
 =
NGX_EINPROGRESS
) {

169 i‡(
ev
->
ªady
) {

170 
ev
->
ªady
 = 0;

171 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
n
,

173 &
fûe
->
«me
);

176  
NGX_AGAIN
;

179 
n
 = 
	`aio_ªtu∫
(&
aio
->
aiocb
);

181 i‡(
n
 == -1) {

182 
îr
 = 
ngx_î∫o
;

183 
aio
->
îr
 =Érr;

184 
ev
->
ªady
 = 1;

186 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

187 "aio_ªtu∫(\"%V\"ËÁûed", &
fûe
->
«me
);

188  
NGX_ERROR
;

191 
aio
->
îr
 = 0;

192 
aio
->
nbyãs
 = 
n
;

193 
ev
->
ªady
 = 1;

194 
ev
->
a˘ive
 = 0;

196 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

197 "aio_ªtu∫: fd:%d %d", 
fûe
->
fd
, 
n
);

199  
n
;

200 
	}
}

204 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

206 
ngx_evít_aio_t
 *
aio
;

208 
aio
 = 
ev
->
d©a
;

210 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

211 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

213 i‡(
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
Ë!
NGX_AGAIN
) {

214 
aio
->
	`h™dÀr
(
ev
);

216 
	}
}

	@src/os/unix/ngx_files.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_THREADS
)

13 
	~<ngx_thªad_poﬁ.h
>

14 
ngx_thªad_ªad_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
);

18 #i‡(
NGX_HAVE_FILE_AIO
)

20 
ngx_uöt_t
 
	gngx_fûe_aio
 = 1;

25 
ssize_t


26 
	$ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

28 
ssize_t
 
n
;

30 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

31 "ªad: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

33 #i‡(
NGX_HAVE_PREAD
)

35 
n
 = 
	`¥ód
(
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

37 i‡(
n
 == -1) {

38 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

39 "¥ód(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

40  
NGX_ERROR
;

45 i‡(
fûe
->
sys_off£t
 !
off£t
) {

46 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

47 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

48 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

49  
NGX_ERROR
;

52 
fûe
->
sys_off£t
 = 
off£t
;

55 
n
 = 
	`ªad
(
fûe
->
fd
, 
buf
, 
size
);

57 i‡(
n
 == -1) {

58 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

59 "ªad(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

60  
NGX_ERROR
;

63 
fûe
->
sys_off£t
 +
n
;

67 
fûe
->
off£t
 +
n
;

69  
n
;

70 
	}
}

73 #i‡(
NGX_THREADS
)

76 
ngx_fd_t
 
	mfd
;

77 
u_ch¨
 *
	mbuf
;

78 
size_t
 
	msize
;

79 
off_t
 
	moff£t
;

81 
size_t
 
	mªad
;

82 
ngx_îr_t
 
	mîr
;

83 } 
	tngx_thªad_ªad_˘x_t
;

86 
ssize_t


87 
	$ngx_thªad_ªad
(
ngx_thªad_èsk_t
 **
èskp
, 
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
,

88 
size_t
 
size
, 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
)

90 
ngx_thªad_èsk_t
 *
èsk
;

91 
ngx_thªad_ªad_˘x_t
 *
˘x
;

93 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

95 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

97 
èsk
 = *
èskp
;

99 i‡(
èsk
 =
NULL
) {

100 
èsk
 = 
	`ngx_thªad_èsk_Æloc
(
poﬁ
, (
ngx_thªad_ªad_˘x_t
));

101 i‡(
èsk
 =
NULL
) {

102  
NGX_ERROR
;

105 
èsk
->
h™dÀr
 = 
ngx_thªad_ªad_h™dÀr
;

107 *
èskp
 = 
èsk
;

110 
˘x
 = 
èsk
->ctx;

112 i‡(
èsk
->
evít
.
com∂ëe
) {

113 
èsk
->
evít
.
com∂ëe
 = 0;

115 i‡(
˘x
->
îr
) {

116 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
˘x
->
îr
,

117 "¥ód(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

118  
NGX_ERROR
;

121  
˘x
->
ªad
;

124 
˘x
->
fd
 = 
fûe
->fd;

125 
˘x
->
buf
 = buf;

126 
˘x
->
size
 = size;

127 
˘x
->
off£t
 = offset;

129 i‡(
fûe
->
	`thªad_h™dÀr
(
èsk
, fûeË!
NGX_OK
) {

130  
NGX_ERROR
;

133  
NGX_AGAIN
;

134 
	}
}

137 #i‡(
NGX_HAVE_PREAD
)

140 
	$ngx_thªad_ªad_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
)

142 
ngx_thªad_ªad_˘x_t
 *
˘x
 = 
d©a
;

144 
ssize_t
 
n
;

146 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "threadÑead handler");

148 
n
 = 
	`¥ód
(
˘x
->
fd
, ctx->
buf
, ctx->
size
, ctx->
off£t
);

150 i‡(
n
 == -1) {

151 
˘x
->
îr
 = 
ngx_î∫o
;

154 
˘x
->
ªad
 = 
n
;

155 
˘x
->
îr
 = 0;

159 
	`ngx_time_upd©e
();

162 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

164 
n
, 
˘x
->
îr
, ctx->
size
, ctx->
off£t
);

165 
	}
}

169 #îr‹ 
¥ód
(Ë
is
 
ªquúed
!

176 
ssize_t


177 
	$ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

179 
ssize_t
 
n
, 
wrôãn
;

181 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

182 "wrôe: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

184 
wrôãn
 = 0;

186 #i‡(
NGX_HAVE_PWRITE
)

189 
n
 = 
	`pwrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
, 
off£t
);

191 i‡(
n
 == -1) {

192 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

193 "pwrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

194  
NGX_ERROR
;

197 
fûe
->
off£t
 +
n
;

198 
wrôãn
 +
n
;

200 i‡((
size_t
Ë
n
 =
size
) {

201  
wrôãn
;

204 
off£t
 +
n
;

205 
size
 -
n
;

210 i‡(
fûe
->
sys_off£t
 !
off£t
) {

211 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

212 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

213 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

214  
NGX_ERROR
;

217 
fûe
->
sys_off£t
 = 
off£t
;

221 
n
 = 
	`wrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
);

223 i‡(
n
 == -1) {

224 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

225 "wrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

226  
NGX_ERROR
;

229 
fûe
->
off£t
 +
n
;

230 
wrôãn
 +
n
;

232 i‡((
size_t
Ë
n
 =
size
) {

233  
wrôãn
;

236 
size
 -
n
;

239 
	}
}

242 
ngx_fd_t


243 
	$ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
ac˚ss
)

245 
ngx_fd_t
 
fd
;

247 
fd
 = 
	`›í
((c⁄° *Ë
«me
, 
O_CREAT
|
O_EXCL
|
O_RDWR
,

248 
ac˚ss
 ?áccess : 0600);

250 i‡(
fd
 !-1 && !
≥rsi°ít
) {

251 (Ë
	`u∆ök
((c⁄° *Ë
«me
);

254  
fd
;

255 
	}
}

258 
	#NGX_IOVS
 8

	)

260 
ssize_t


261 
	$ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˛
, 
off_t
 
off£t
,

262 
ngx_poﬁ_t
 *
poﬁ
)

264 
u_ch¨
 *
¥ev
;

265 
size_t
 
size
;

266 
ssize_t
 
tŸÆ
, 
n
;

267 
ngx_¨øy_t
 
vec
;

268 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

272 i‡(
˛
->
√xt
 =
NULL
) {

273  
	`ngx_wrôe_fûe
(
fûe
, 
˛
->
buf
->
pos
,

274 (
size_t
Ë(
˛
->
buf
->
œ°
 - cl->buf->
pos
),

275 
off£t
);

278 
tŸÆ
 = 0;

280 
vec
.
ñts
 = 
iovs
;

281 
vec
.
size
 = (
iovec
);

282 
vec
.
«Œoc
 = 
NGX_IOVS
;

283 
vec
.
poﬁ
 =Öool;

286 
¥ev
 = 
NULL
;

287 
iov
 = 
NULL
;

288 
size
 = 0;

290 
vec
.
√…s
 = 0;

294 
˛
 && 
vec
.
√…s
 < 
IOV_MAX
) {

295 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

296 
iov
->
iov_Àn
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

299 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

300 i‡(
iov
 =
NULL
) {

301  
NGX_ERROR
;

304 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

305 
iov
->
iov_Àn
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

308 
size
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

309 
¥ev
 = 
˛
->
buf
->
œ°
;

310 
˛
 = cl->
√xt
;

315 i‡(
vec
.
√…s
 == 1) {

316 
iov
 = 
vec
.
ñts
;

318 
n
 = 
	`ngx_wrôe_fûe
(
fûe
, (
u_ch¨
 *Ë
iov
[0].
iov_ba£
,

319 
iov
[0].
iov_Àn
, 
off£t
);

321 i‡(
n
 =
NGX_ERROR
) {

322  
n
;

325  
tŸÆ
 + 
n
;

328 i‡(
fûe
->
sys_off£t
 !
off£t
) {

329 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

330 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

331 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

332  
NGX_ERROR
;

335 
fûe
->
sys_off£t
 = 
off£t
;

338 
n
 = 
	`wrôev
(
fûe
->
fd
, 
vec
.
ñts
, vec.
√…s
);

340 i‡(
n
 == -1) {

341 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

342 "wrôev(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

343  
NGX_ERROR
;

346 i‡((
size_t
Ë
n
 !
size
) {

347 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 0,

349 
fûe
->
«me
.
d©a
, 
n
, 
size
);

350  
NGX_ERROR
;

353 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

354 "wrôev: %d, %z", 
fûe
->
fd
, 
n
);

356 
fûe
->
sys_off£t
 +
n
;

357 
fûe
->
off£t
 +
n
;

358 
off£t
 +
n
;

359 
tŸÆ
 +
n
;

361 } 
˛
);

363  
tŸÆ
;

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
)

370 
timevÆ
 
tv
[2];

372 
tv
[0].
tv_£c
 = 
	`ngx_time
();

373 
tv
[0].
tv_u£c
 = 0;

374 
tv
[1].
tv_£c
 = 
s
;

375 
tv
[1].
tv_u£c
 = 0;

377 i‡(
	`utimes
((*Ë
«me
, 
tv
) != -1) {

378  
NGX_OK
;

381  
NGX_ERROR
;

382 
	}
}

385 
ngx_öt_t


386 
	$ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

388 
fm
->
fd
 = 
	`ngx_›í_fûe
(fm->
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_TRUNCATE
,

389 
NGX_FILE_DEFAULT_ACCESS
);

390 i‡(
fm
->
fd
 =
NGX_INVALID_FILE
) {

391 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

392 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

393  
NGX_ERROR
;

396 i‡(
	`·runˇã
(
fm
->
fd
, fm->
size
) == -1) {

397 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

398 "·runˇã(Ë\"%s\" faûed", 
fm
->
«me
);

399 
Áûed
;

402 
fm
->
addr
 = 
	`mm≠
(
NULL
, fm->
size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
,

403 
fm
->
fd
, 0);

404 i‡(
fm
->
addr
 !
MAP_FAILED
) {

405  
NGX_OK
;

408 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

409 "mm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

411 
Áûed
:

413 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

414 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

415 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

418  
NGX_ERROR
;

419 
	}
}

423 
	$ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

425 i‡(
	`munm≠
(
fm
->
addr
, fm->
size
) == -1) {

426 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

427 "munm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

430 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

431 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

432 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

434 
	}
}

437 
ngx_öt_t


438 
	$ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
)

440 
dú
->dú = 
	`›ídú
((c⁄° *Ë
«me
->
d©a
);

442 i‡(
dú
->dú =
NULL
) {

443  
NGX_ERROR
;

446 
dú
->
vÆid_öfo
 = 0;

448  
NGX_OK
;

449 
	}
}

452 
ngx_öt_t


453 
	$ngx_ªad_dú
(
ngx_dú_t
 *
dú
)

455 
dú
->
de
 = 
	`ªaddú
(dir->dir);

457 i‡(
dú
->
de
) {

458 #i‡(
NGX_HAVE_D_TYPE
)

459 
dú
->
ty≥
 = dú->
de
->
d_ty≥
;

461 
dú
->
ty≥
 = 0;

463  
NGX_OK
;

466  
NGX_ERROR
;

467 
	}
}

470 
ngx_öt_t


471 
	$ngx_›í_glob
(
ngx_glob_t
 *
gl
)

473 
n
;

475 
n
 = 
	`glob
((*Ë
gl
->
∑âîn
, 0, 
NULL
, &gl->
pglob
);

477 i‡(
n
 == 0) {

478  
NGX_OK
;

481 #ifde‡
GLOB_NOMATCH


483 i‡(
n
 =
GLOB_NOMATCH
 && 
gl
->
ã°
) {

484  
NGX_OK
;

489  
NGX_ERROR
;

490 
	}
}

493 
ngx_öt_t


494 
	$ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
)

496 
size_t
 
cou¡
;

498 #ifde‡
GLOB_NOMATCH


499 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_∑thc
;

501 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_m©chc
;

504 i‡(
gl
->
n
 < 
cou¡
) {

506 
«me
->
Àn
 = (
size_t
Ë
	`ngx_°æí
(
gl
->
pglob
.
gl_∑thv
[gl->
n
]);

507 
«me
->
d©a
 = (
u_ch¨
 *Ë
gl
->
pglob
.
gl_∑thv
[gl->
n
];

508 
gl
->
n
++;

510  
NGX_OK
;

513  
NGX_DONE
;

514 
	}
}

518 
	$ngx_˛o£_glob
(
ngx_glob_t
 *
gl
)

520 
	`glob‰ì
(&
gl
->
pglob
);

521 
	}
}

524 
ngx_îr_t


525 
	$ngx_åylock_fd
(
ngx_fd_t
 
fd
)

527 
Êock
 
Ê
;

529 
	`ngx_memzîo
(&
Ê
, (
Êock
));

530 
Ê
.
l_ty≥
 = 
F_WRLCK
;

531 
Ê
.
l_whí˚
 = 
SEEK_SET
;

533 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

534  
ngx_î∫o
;

538 
	}
}

541 
ngx_îr_t


542 
	$ngx_lock_fd
(
ngx_fd_t
 
fd
)

544 
Êock
 
Ê
;

546 
	`ngx_memzîo
(&
Ê
, (
Êock
));

547 
Ê
.
l_ty≥
 = 
F_WRLCK
;

548 
Ê
.
l_whí˚
 = 
SEEK_SET
;

550 i‡(
	`f˙é
(
fd
, 
F_SETLKW
, &
Ê
) == -1) {

551  
ngx_î∫o
;

555 
	}
}

558 
ngx_îr_t


559 
	$ngx_u∆ock_fd
(
ngx_fd_t
 
fd
)

561 
Êock
 
Ê
;

563 
	`ngx_memzîo
(&
Ê
, (
Êock
));

564 
Ê
.
l_ty≥
 = 
F_UNLCK
;

565 
Ê
.
l_whí˚
 = 
SEEK_SET
;

567 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

568  
ngx_î∫o
;

572 
	}
}

575 #i‡(
NGX_HAVE_POSIX_FADVISE
Ë&& !(
NGX_HAVE_F_READAHEAD
)

577 
ngx_öt_t


578 
	$ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
)

580 
îr
;

582 
îr
 = 
	`posix_Ádvi£
(
fd
, 0, 0, 
POSIX_FADV_SEQUENTIAL
);

584 i‡(
îr
 == 0) {

588 
	`ngx_£t_î∫o
(
îr
);

589  
NGX_FILE_ERROR
;

590 
	}
}

595 #i‡(
NGX_HAVE_O_DIRECT
)

597 
ngx_öt_t


598 
	$ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
)

600 
Êags
;

602 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

604 i‡(
Êags
 == -1) {

605  
NGX_FILE_ERROR
;

608  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_DIRECT
);

609 
	}
}

612 
ngx_öt_t


613 
	$ngx_dúe˘io_off
(
ngx_fd_t
 
fd
)

615 
Êags
;

617 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

619 i‡(
Êags
 == -1) {

620  
NGX_FILE_ERROR
;

623  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 & ~
O_DIRECT
);

624 
	}
}

629 #i‡(
NGX_HAVE_STATFS
)

631 
size_t


632 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

634 
°©fs
 
fs
;

636 i‡(
	`°©fs
((*Ë
«me
, &
fs
) == -1) {

640 i‡((
fs
.
f_bsize
 % 512) != 0) {

644  (
size_t
Ë
fs
.
f_bsize
;

645 
	}
}

647 #ñi‡(
NGX_HAVE_STATVFS
)

649 
size_t


650 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

652 
°©vfs
 
fs
;

654 i‡(
	`°©vfs
((*Ë
«me
, &
fs
) == -1) {

658 i‡((
fs
.
f_‰size
 % 512) != 0) {

662  (
size_t
Ë
fs
.
f_‰size
;

663 
	}
}

667 
size_t


668 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

671 
	}
}

	@src/os/unix/ngx_files.h

8 #i‚de‡
_NGX_FILES_H_INCLUDED_


9 
	#_NGX_FILES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_fd_t
;

17 
°©
 
	tngx_fûe_öfo_t
;

18 
öo_t
 
	tngx_fûe_uniq_t
;

22 
u_ch¨
 *
	m«me
;

23 
size_t
 
	msize
;

24 *
	maddr
;

25 
ngx_fd_t
 
	mfd
;

26 
ngx_log_t
 *
	mlog
;

27 } 
	tngx_fûe_m≠pög_t
;

31 
DIR
 *
	mdú
;

32 
dúít
 *
	mde
;

33 
°©
 
	möfo
;

35 
	mty≥
:8;

36 
	mvÆid_öfo
:1;

37 } 
	tngx_dú_t
;

41 
size_t
 
	mn
;

42 
glob_t
 
	mpglob
;

43 
u_ch¨
 *
	m∑âîn
;

44 
ngx_log_t
 *
	mlog
;

45 
ngx_uöt_t
 
	mã°
;

46 } 
	tngx_glob_t
;

49 
	#NGX_INVALID_FILE
 -1

	)

50 
	#NGX_FILE_ERROR
 -1

	)

54 #ifde‡
__CYGWIN__


56 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


57 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

60 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

61 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
|
O_BINARY
, 
ac˚ss
)

	)

65 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

66 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

70 
	#ngx_›í_fûe_n
 "›í()"

	)

72 
	#NGX_FILE_RDONLY
 
O_RDONLY


	)

73 
	#NGX_FILE_WRONLY
 
O_WRONLY


	)

74 
	#NGX_FILE_RDWR
 
O_RDWR


	)

75 
	#NGX_FILE_CREATE_OR_OPEN
 
O_CREAT


	)

76 
	#NGX_FILE_OPEN
 0

	)

77 
	#NGX_FILE_TRUNCATE
 (
O_CREAT
|
O_TRUNC
)

	)

78 
	#NGX_FILE_APPEND
 (
O_WRONLY
|
O_APPEND
)

	)

79 
	#NGX_FILE_NONBLOCK
 
O_NONBLOCK


	)

81 #i‡(
NGX_HAVE_OPENAT
)

82 
	#NGX_FILE_NOFOLLOW
 
O_NOFOLLOW


	)

84 #i‡
deföed
(
O_DIRECTORY
)

85 
	#NGX_FILE_DIRECTORY
 
O_DIRECTORY


	)

87 
	#NGX_FILE_DIRECTORY
 0

	)

90 #i‡
deföed
(
O_SEARCH
)

91 
	#NGX_FILE_SEARCH
 (
O_SEARCH
|
NGX_FILE_DIRECTORY
)

	)

93 #ñi‡
deföed
(
O_EXEC
)

94 
	#NGX_FILE_SEARCH
 (
O_EXEC
|
NGX_FILE_DIRECTORY
)

	)

96 #ñi‡(
NGX_HAVE_O_PATH
)

97 
	#NGX_FILE_SEARCH
 (
O_PATH
|
O_RDONLY
|
NGX_FILE_DIRECTORY
)

	)

100 
	#NGX_FILE_SEARCH
 (
O_RDONLY
|
NGX_FILE_DIRECTORY
)

	)

105 
	#NGX_FILE_DEFAULT_ACCESS
 0644

	)

106 
	#NGX_FILE_OWNER_ACCESS
 0600

	)

109 
	#ngx_˛o£_fûe
 
˛o£


	)

110 
	#ngx_˛o£_fûe_n
 "˛o£()"

	)

113 
	#ngx_dñëe_fûe
(
«me
Ë
	`u∆ök
((c⁄° *Ë«me)

	)

114 
	#ngx_dñëe_fûe_n
 "u∆ök()"

	)

117 
ngx_fd_t
 
ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,

118 
ngx_uöt_t
 
ac˚ss
);

119 
	#ngx_›í_ãmpfûe_n
 "›í()"

	)

122 
ssize_t
 
ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
);

123 #i‡(
NGX_HAVE_PREAD
)

124 
	#ngx_ªad_fûe_n
 "¥ód()"

	)

126 
	#ngx_ªad_fûe_n
 "ªad()"

	)

129 
ssize_t
 
ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

130 
off_t
 
off£t
);

132 
ssize_t
 
ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˚
,

133 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

136 
	#ngx_ªad_fd
 
ªad


	)

137 
	#ngx_ªad_fd_n
 "ªad()"

	)

144 
ngx_ölöe
 
ssize_t


145 
	$ngx_wrôe_fd
(
ngx_fd_t
 
fd
, *
buf
, 
size_t
 
n
)

147  
	`wrôe
(
fd
, 
buf
, 
n
);

148 
	}
}

150 
	#ngx_wrôe_fd_n
 "wrôe()"

	)

153 
	#ngx_wrôe_c⁄sﬁe
 
ngx_wrôe_fd


	)

156 
	#ngx_löe„ed
(
p
Ë*p++ = 
LF
;

	)

157 
	#NGX_LINEFEED_SIZE
 1

	)

158 
	#NGX_LINEFEED
 "\x0a"

	)

161 
	#ngx_ª«me_fûe
(
o
, 
n
Ë
	`ª«me
((c⁄° *Ëo, (c⁄° *Ën)

	)

162 
	#ngx_ª«me_fûe_n
 "ª«me()"

	)

165 
	#ngx_ch™ge_fûe_ac˚ss
(
n
, 
a
Ë
	`chmod
((c⁄° *Ën,á)

	)

166 
	#ngx_ch™ge_fûe_ac˚ss_n
 "chmod()"

	)

169 
ngx_öt_t
 
ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
);

170 
	#ngx_£t_fûe_time_n
 "utimes()"

	)

173 
	#ngx_fûe_öfo
(
fûe
, 
sb
Ë
	`°©
((c⁄° *Ëfûe, sb)

	)

174 
	#ngx_fûe_öfo_n
 "°©()"

	)

176 
	#ngx_fd_öfo
(
fd
, 
sb
Ë
	`f°©
(fd, sb)

	)

177 
	#ngx_fd_öfo_n
 "f°©()"

	)

179 
	#ngx_lök_öfo
(
fûe
, 
sb
Ë
	`l°©
((c⁄° *Ëfûe, sb)

	)

180 
	#ngx_lök_öfo_n
 "l°©()"

	)

182 
	#ngx_is_dú
(
sb
Ë(
	`S_ISDIR
((sb)->
°_mode
))

	)

183 
	#ngx_is_fûe
(
sb
Ë(
	`S_ISREG
((sb)->
°_mode
))

	)

184 
	#ngx_is_lök
(
sb
Ë(
	`S_ISLNK
((sb)->
°_mode
))

	)

185 
	#ngx_is_exec
(
sb
Ë(((sb)->
°_mode
 & 
S_IXUSR
Ë=S_IXUSR)

	)

186 
	#ngx_fûe_ac˚ss
(
sb
Ë((sb)->
°_mode
 & 0777)

	)

187 
	#ngx_fûe_size
(
sb
Ë(sb)->
°_size


	)

188 
	#ngx_fûe_fs_size
(
sb
Ë
	`ngx_max
((sb)->
°_size
, (sb)->
°_blocks
 * 512)

	)

189 
	#ngx_fûe_mtime
(
sb
Ë(sb)->
°_mtime


	)

190 
	#ngx_fûe_uniq
(
sb
Ë(sb)->
°_öo


	)

193 
ngx_öt_t
 
ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

194 
ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

197 
	#ngx_ªÆ∑th
(
p
, 
r
Ë(
u_ch¨
 *Ë
	`ªÆ∑th
((*Ëp, (*Ër)

	)

198 
	#ngx_ªÆ∑th_n
 "ªÆ∑th()"

	)

199 
	#ngx_gëcwd
(
buf
, 
size
Ë(
	`gëcwd
((*Ëbuf, sizeË!
NULL
)

	)

200 
	#ngx_gëcwd_n
 "gëcwd()"

	)

201 
	#ngx_∑th_£∑øt‹
(
c
Ë((cË='/')

	)

204 #i‡
deföed
(
PATH_MAX
)

206 
	#NGX_HAVE_MAX_PATH
 1

	)

207 
	#NGX_MAX_PATH
 
PATH_MAX


	)

211 
	#NGX_MAX_PATH
 4096

	)

216 
	#NGX_DIR_MASK_LEN
 0

	)

219 
ngx_öt_t
 
ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
);

220 
	#ngx_›í_dú_n
 "›ídú()"

	)

223 
	#ngx_˛o£_dú
(
d
Ë
	`˛o£dú
((d)->
dú
)

	)

224 
	#ngx_˛o£_dú_n
 "˛o£dú()"

	)

227 
ngx_öt_t
 
ngx_ªad_dú
(
ngx_dú_t
 *
dú
);

228 
	#ngx_ªad_dú_n
 "ªaddú()"

	)

231 
	#ngx_¸óã_dú
(
«me
, 
ac˚ss
Ë
	`mkdú
((c⁄° *Ë«me,ác˚ss)

	)

232 
	#ngx_¸óã_dú_n
 "mkdú()"

	)

235 
	#ngx_dñëe_dú
(
«me
Ë
	`rmdú
((c⁄° *Ë«me)

	)

236 
	#ngx_dñëe_dú_n
 "rmdú()"

	)

239 
	#ngx_dú_ac˚ss
(
a
Ë◊ | (®& 0444Ë>> 2)

	)

242 
	#ngx_de_«me
(
dú
Ë((
u_ch¨
 *Ë(dú)->
de
->
d_«me
)

	)

243 #i‡(
NGX_HAVE_D_NAMLEN
)

244 
	#ngx_de_«mñí
(
dú
Ë(dú)->
de
->
d_«mÀn


	)

246 
	#ngx_de_«mñí
(
dú
Ë
	`ngx_°æí
((dú)->
de
->
d_«me
)

	)

249 
ngx_ölöe
 
ngx_öt_t


250 
	$ngx_de_öfo
(
u_ch¨
 *
«me
, 
ngx_dú_t
 *
dú
)

252 
dú
->
ty≥
 = 0;

253  
	`°©
((c⁄° *Ë
«me
, &
dú
->
öfo
);

254 
	}
}

256 
	#ngx_de_öfo_n
 "°©()"

	)

257 
	#ngx_de_lök_öfo
(
«me
, 
dú
Ë
	`l°©
((c⁄° *Ë«me, &(dú)->
öfo
)

	)

258 
	#ngx_de_lök_öfo_n
 "l°©()"

	)

260 #i‡(
NGX_HAVE_D_TYPE
)

267 
	#ngx_de_is_dú
(
dú
) \

268 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_DIR
Ë: (
	`S_ISDIR
((dú)->
öfo
.
°_mode
)))

	)

269 
	#ngx_de_is_fûe
(
dú
) \

270 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_REG
Ë: (
	`S_ISREG
((dú)->
öfo
.
°_mode
)))

	)

271 
	#ngx_de_is_lök
(
dú
) \

272 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_LNK
Ë: (
	`S_ISLNK
((dú)->
öfo
.
°_mode
)))

	)

276 
	#ngx_de_is_dú
(
dú
Ë(
	`S_ISDIR
((dú)->
öfo
.
°_mode
))

	)

277 
	#ngx_de_is_fûe
(
dú
Ë(
	`S_ISREG
((dú)->
öfo
.
°_mode
))

	)

278 
	#ngx_de_is_lök
(
dú
Ë(
	`S_ISLNK
((dú)->
öfo
.
°_mode
))

	)

282 
	#ngx_de_ac˚ss
(
dú
Ë(((dú)->
öfo
.
°_mode
Ë& 0777)

	)

283 
	#ngx_de_size
(
dú
Ë(dú)->
öfo
.
°_size


	)

284 
	#ngx_de_fs_size
(
dú
) \

285 
	`ngx_max
((
dú
)->
öfo
.
°_size
, (dú)->öfo.
°_blocks
 * 512)

	)

286 
	#ngx_de_mtime
(
dú
Ë(dú)->
öfo
.
°_mtime


	)

289 
ngx_öt_t
 
ngx_›í_glob
(
ngx_glob_t
 *
gl
);

290 
	#ngx_›í_glob_n
 "glob()"

	)

291 
ngx_öt_t
 
ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
);

292 
ngx_˛o£_glob
(
ngx_glob_t
 *
gl
);

295 
ngx_îr_t
 
ngx_åylock_fd
(
ngx_fd_t
 
fd
);

296 
ngx_îr_t
 
ngx_lock_fd
(
ngx_fd_t
 
fd
);

297 
ngx_îr_t
 
ngx_u∆ock_fd
(
ngx_fd_t
 
fd
);

299 
	#ngx_åylock_fd_n
 "f˙é(F_SETLK, F_WRLCK)"

	)

300 
	#ngx_lock_fd_n
 "f˙é(F_SETLKW, F_WRLCK)"

	)

301 
	#ngx_u∆ock_fd_n
 "f˙é(F_SETLK, F_UNLCK)"

	)

304 #i‡(
NGX_HAVE_F_READAHEAD
)

306 
	#NGX_HAVE_READ_AHEAD
 1

	)

308 
	#ngx_ªad_ahód
(
fd
, 
n
Ë
	`f˙é
(fd, 
F_READAHEAD
, (Ën)

	)

309 
	#ngx_ªad_ahód_n
 "f˙é(fd, F_READAHEAD)"

	)

311 #ñi‡(
NGX_HAVE_POSIX_FADVISE
)

313 
	#NGX_HAVE_READ_AHEAD
 1

	)

315 
ngx_öt_t
 
ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
);

316 
	#ngx_ªad_ahód_n
 "posix_Ádvi£(POSIX_FADV_SEQUENTIAL)"

	)

320 
	#ngx_ªad_ahód
(
fd
, 
n
Ë0

	)

321 
	#ngx_ªad_ahód_n
 "ngx_ªad_ahód_n"

	)

326 #i‡(
NGX_HAVE_O_DIRECT
)

328 
ngx_öt_t
 
ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
);

329 
	#ngx_dúe˘io_⁄_n
 "f˙é(O_DIRECT)"

	)

331 
ngx_öt_t
 
ngx_dúe˘io_off
(
ngx_fd_t
 
fd
);

332 
	#ngx_dúe˘io_off_n
 "f˙é(!O_DIRECT)"

	)

334 #ñi‡(
NGX_HAVE_F_NOCACHE
)

336 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`f˙é
(fd, 
F_NOCACHE
, 1)

	)

337 
	#ngx_dúe˘io_⁄_n
 "f˙é(F_NOCACHE, 1)"

	)

339 #ñi‡(
NGX_HAVE_DIRECTIO
)

341 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`dúe˘io
(fd, 
DIRECTIO_ON
)

	)

342 
	#ngx_dúe˘io_⁄_n
 "dúe˘io(DIRECTIO_ON)"

	)

346 
	#ngx_dúe˘io_⁄
(
fd
Ë0

	)

347 
	#ngx_dúe˘io_⁄_n
 "ngx_dúe˘io_⁄_n"

	)

351 
size_t
 
ngx_fs_bsize
(
u_ch¨
 *
«me
);

354 #i‡(
NGX_HAVE_OPENAT
)

356 
	#ngx_›í©_fûe
(
fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

357 
	`›í©
(
fd
, (c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

359 
	#ngx_›í©_fûe_n
 "›í©()"

	)

361 
	#ngx_fûe_©_öfo
(
fd
, 
«me
, 
sb
, 
Êag
) \

362 
	`f°©©
(
fd
, (c⁄° *Ë
«me
, 
sb
, 
Êag
)

	)

364 
	#ngx_fûe_©_öfo_n
 "f°©©()"

	)

366 
	#NGX_AT_FDCWD
 (
ngx_fd_t
Ë
AT_FDCWD


	)

371 
	#ngx_°dîr
 
STDERR_FILENO


	)

372 
	#ngx_£t_°dîr
(
fd
Ë
	`dup2
(fd, 
STDERR_FILENO
)

	)

373 
	#ngx_£t_°dîr_n
 "dup2(STDERR_FILENO)"

	)

376 #i‡(
NGX_HAVE_FILE_AIO
)

378 
ngx_öt_t
 
ngx_fûe_aio_öô
(
ngx_fûe_t
 *
fûe
, 
ngx_poﬁ_t
 *
poﬁ
);

379 
ssize_t
 
ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

380 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

382 
ngx_uöt_t
 
ngx_fûe_aio
;

386 #i‡(
NGX_THREADS
)

387 
ssize_t
 
ngx_thªad_ªad
(
ngx_thªad_èsk_t
 **
èskp
, 
ngx_fûe_t
 *
fûe
,

388 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

	@src/os/unix/ngx_freebsd.h

8 #i‚de‡
_NGX_FREEBSD_H_INCLUDED_


9 
	#_NGX_FREEBSD_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_‰ìbsd_kîn_o§ñd©e
;

17 
ngx_‰ìbsd_hw_n˝u
;

18 
u_l⁄g
 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
;

21 
ngx_uöt_t
 
ngx_‰ìbsd_u£_t˝_n›ush
;

22 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@src/os/unix/ngx_freebsd_config.h

8 #i‚de‡
_NGX_FREEBSD_CONFIG_H_INCLUDED_


9 
	#_NGX_FREEBSD_CONFIG_H_INCLUDED_


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

14 
	~<uni°d.h
>

15 
	~<°d¨g.h
>

16 
	~<°ddef.h
>

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<˘y≥.h
>

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

22 
	~<sig«l.h
>

23 
	~<pwd.h
>

24 
	~<gΩ.h
>

25 
	~<dúít.h
>

26 
	~<glob.h
>

27 
	~<time.h
>

28 
	~<sys/∑øm.h
>

29 
	~<sys/mou¡.h
>

31 
	~<sys/fûio.h
>

32 
	~<sys/uio.h
>

33 
	~<sys/°©.h
>

34 
	~<f˙é.h
>

36 
	~<sys/waô.h
>

37 
	~<sys/mm™.h
>

38 
	~<sys/ªsour˚.h
>

39 
	~<sched.h
>

41 
	~<sys/sockë.h
>

42 
	~<√töë/ö.h
>

43 
	~<√töë/t˝.h
>

44 
	~<¨∑/öë.h
>

45 
	~<√tdb.h
>

46 
	~<sys/un.h
>

48 
	~<libutû.h
>

49 
	~<o§ñd©e.h
>

50 
	~<sys/sys˘l.h
>

53 #i‡
__FªeBSD_vîsi⁄
 < 400017

59 #unde‡
CMSG_SPACE


60 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

62 #unde‡
CMSG_LEN


63 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

65 #unde‡
CMSG_DATA


66 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

71 
	~<ngx_auto_c⁄fig.h
>

74 #i‡(
NGX_HAVE_POSIX_SEM
)

75 
	~<£m≠h‹e.h
>

79 #i‡(
NGX_HAVE_POLL
)

80 
	~<pﬁl.h
>

84 #i‡(
NGX_HAVE_KQUEUE
)

85 
	~<sys/evít.h
>

89 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_HAVE_AIO
)

90 
	~<aio.h
>

91 
aiocb
 
	tngx_aiocb_t
;

95 
	#NGX_LISTEN_BACKLOG
 -1

	)

98 #ifde‡
__Døg⁄Fly__


99 
	#NGX_KEEPALIVE_FACTOR
 1000

	)

103 #i‚de‡
IOV_MAX


104 
	#IOV_MAX
 1024

	)

108 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


109 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

113 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

114 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

117 **
ívú⁄
;

118 *
mÆloc_›ti⁄s
;

	@src/os/unix/ngx_freebsd_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	gngx_‰ìbsd_kîn_o°y≥
[16];

14 
	gngx_‰ìbsd_kîn_o§ñó£
[128];

15 
	gngx_‰ìbsd_kîn_o§ñd©e
;

16 
	gngx_‰ìbsd_hw_n˝u
;

17 
	gngx_‰ìbsd_kîn_ùc_somaxc⁄n
;

18 
u_l⁄g
 
	gngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

21 
	gngx_‰ìbsd_machdï_h…_logiˇl_˝us
;

24 
ngx_uöt_t
 
	gngx_‰ìbsd_£ndfûe_nbyãs_bug
;

25 
ngx_uöt_t
 
	gngx_‰ìbsd_u£_t˝_n›ush
;

27 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

30 
ngx_os_io_t
 
	gngx_‰ìbsd_io
 = {

31 
ngx_unix_ªcv
,

32 
ngx_ªadv_chaö
,

33 
ngx_udp_unix_ªcv
,

34 
ngx_unix_£nd
,

35 #i‡(
NGX_HAVE_SENDFILE
)

36 
ngx_‰ìbsd_£ndfûe_chaö
,

37 
NGX_IO_SENDFILE


39 
ngx_wrôev_chaö
,

46 *
	m«me
;

47 *
	mvÆue
;

48 
size_t
 
	msize
;

49 
ngx_uöt_t
 
	mexi°s
;

50 } 
	tsys˘l_t
;

53 
sys˘l_t
 
	gsys˘ls
[] = {

55 &
ngx_‰ìbsd_hw_n˝u
,

56 (
ngx_‰ìbsd_hw_n˝u
), 0 },

59 &
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
,

60 (
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
), 0 },

63 &
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
,

64 (
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
), 0 },

67 &
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
,

68 (
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
), 0 },

70 { 
NULL
, NULL, 0, 0 }

75 
	$ngx_debug_öô
()

77 #i‡(
NGX_DEBUG_MALLOC
)

79 #i‡
__FªeBSD_vîsi⁄
 >= 500014 && __FreeBSD_version < 1000011

80 
_mÆloc_›ti⁄s
 = "J";

81 #ñi‡
__FªeBSD_vîsi⁄
 < 500014

82 
mÆloc_›ti⁄s
 = "J";

85 
ngx_debug_mÆloc
 = 1;

88 *
mo
;

90 
mo
 = 
	`gëív
("MALLOC_OPTIONS");

92 i‡(
mo
 && 
	`ngx_°rchr
(mo, 'J')) {

93 
ngx_debug_mÆloc
 = 1;

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

102 
vîsi⁄
;

103 
size_t
 
size
;

104 
ngx_îr_t
 
îr
;

105 
ngx_uöt_t
 
i
;

107 
size
 = (
ngx_‰ìbsd_kîn_o°y≥
);

108 i‡(
	`sys˘lby«me
("kern.ostype",

109 
ngx_‰ìbsd_kîn_o°y≥
, &
size
, 
NULL
, 0) == -1) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

113 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

114  
NGX_ERROR
;

117 
ngx_‰ìbsd_kîn_o°y≥
[
size
 - 1] = '\0';

120 
size
 = (
ngx_‰ìbsd_kîn_o§ñó£
);

121 i‡(
	`sys˘lby«me
("kern.osrelease",

122 
ngx_‰ìbsd_kîn_o§ñó£
, &
size
, 
NULL
, 0) == -1) {

123 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

126 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

127  
NGX_ERROR
;

130 
ngx_‰ìbsd_kîn_o§ñó£
[
size
 - 1] = '\0';

134 
size
 = ();

135 i‡(
	`sys˘lby«me
("kern.osreldate",

136 &
ngx_‰ìbsd_kîn_o§ñd©e
, &
size
, 
NULL
, 0) == -1) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

139  
NGX_ERROR
;

142 
vîsi⁄
 = 
ngx_‰ìbsd_kîn_o§ñd©e
;

145 #i‡(
NGX_HAVE_SENDFILE
)

163 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 460102) \

164 || 
__FªeBSD_vîsi⁄
 == 460002 || __FreeBSD_version >= 500039

168 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 0;

174 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 1;

181 i‡((
vîsi⁄
 < 500000 && version >= 440003) || version >= 500017) {

182 
ngx_‰ìbsd_u£_t˝_n›ush
 = 1;

186 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

187 
size
 = 
sys˘ls
[
i
].size;

189 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

192 
sys˘ls
[
i
].
exi°s
 = 1;

196 
îr
 = 
ngx_î∫o
;

198 i‡(
îr
 =
NGX_ENOENT
) {

202 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

203 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

204  
NGX_ERROR
;

207 i‡(
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
) {

208 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
 / 2;

211 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
;

214 i‡(
vîsi⁄
 < 600008 && 
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
 > 32767) {

215 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

217  
NGX_ERROR
;

220 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

222 
ngx_os_io
 = 
ngx_‰ìbsd_io
;

224  
NGX_OK
;

225 
	}
}

229 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

231 
u_l⁄g
 
vÆue
;

232 
ngx_uöt_t
 
i
;

234 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

235 
ngx_‰ìbsd_kîn_o°y≥
, 
ngx_‰ìbsd_kîn_o§ñó£
);

237 #ifde‡
__Døg⁄Fly_vîsi⁄


238 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

240 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__Døg⁄Fly_vîsi⁄
);

242 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

244 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__FªeBSD_vîsi⁄
);

247 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

248 i‡(
sys˘ls
[
i
].
exi°s
) {

249 i‡(
sys˘ls
[
i
].
size
 == ()) {

250 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

253 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

256 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

257 
sys˘ls
[
i
].
«me
, 
vÆue
);

260 
	}
}

	@src/os/unix/ngx_freebsd_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

32 
ngx_chaö_t
 *

33 
	$ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

35 
rc
, 
Êags
;

36 
off_t
 
£nd
, 
¥ev_£nd
, 
£¡
;

37 
size_t
 
fûe_size
;

38 
ssize_t
 
n
;

39 
ngx_uöt_t
 
eöå
, 
ógaö
;

40 
ngx_îr_t
 
îr
;

41 
ngx_buf_t
 *
fûe
;

42 
ngx_evít_t
 *
wev
;

43 
ngx_chaö_t
 *
˛
;

44 
ngx_iovec_t
 
hódî
, 
åaûî
;

45 
sf_hdå
 
hdå
;

46 
iovec
 
hódîs
[
NGX_IOVS_PREALLOCATE
];

47 
iovec
 
åaûîs
[
NGX_IOVS_PREALLOCATE
];

48 #i‡(
NGX_HAVE_AIO_SENDFILE
)

49 
ngx_uöt_t
 
ebusy
;

50 
ngx_evít_aio_t
 *
aio
;

53 
wev
 = 
c
->
wrôe
;

55 i‡(!
wev
->
ªady
) {

56  
ö
;

59 #i‡(
NGX_HAVE_KQUEUE
)

61 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

62 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

64 
wev
->
îr‹
 = 1;

65  
NGX_CHAIN_ERROR
;

72 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

73 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

76 
£nd
 = 0;

77 
ógaö
 = 0;

78 
Êags
 = 0;

80 #i‡(
NGX_HAVE_AIO_SENDFILE
 && 
NGX_SUPPRESS_WARN
)

81 
aio
 = 
NULL
;

82 
fûe
 = 
NULL
;

85 
hódî
.
iovs
 = 
hódîs
;

86 
hódî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

88 
åaûî
.
iovs
 = 
åaûîs
;

89 
åaûî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

92 
eöå
 = 0;

93 #i‡(
NGX_HAVE_AIO_SENDFILE
)

94 
ebusy
 = 0;

96 
¥ev_£nd
 = 
£nd
;

100 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
hódî
, 
ö
, 
limô
 - 
£nd
, 
c
->
log
);

102 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

103  
NGX_CHAIN_ERROR
;

106 
£nd
 +
hódî
.
size
;

108 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

109 
fûe
 = 
˛
->
buf
;

113 
fûe_size
 = (
size_t
Ë
	`ngx_chaö_cﬂÀs˚_fûe
(&
˛
, 
limô
 - 
£nd
);

115 
£nd
 +
fûe_size
;

119 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
åaûî
, cl, 
limô
 - 
£nd
, 
c
->
log
);

121 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

122  
NGX_CHAIN_ERROR
;

125 
£nd
 +
åaûî
.
size
;

127 i‡(
ngx_‰ìbsd_u£_t˝_n›ush


128 && 
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET
)

130 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

131 
îr
 = 
ngx_sockë_î∫o
;

138 i‡(
îr
 !
NGX_EINTR
) {

139 
wev
->
îr‹
 = 1;

140 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

141 
ngx_t˝_n›ush_n
 " failed");

142  
NGX_CHAIN_ERROR
;

146 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

148 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

158 
hdå
.
hódîs
 = 
hódî
.
cou¡
 ? hódî.
iovs
 : 
NULL
;

159 
hdå
.
hdr_˙t
 = 
hódî
.
cou¡
;

160 
hdå
.
åaûîs
 = 
åaûî
.
cou¡
 ?Åøûî.
iovs
 : 
NULL
;

161 
hdå
.
ål_˙t
 = 
åaûî
.
cou¡
;

168 i‡(!
ngx_‰ìbsd_£ndfûe_nbyãs_bug
) {

169 
hódî
.
size
 = 0;

172 
£¡
 = 0;

174 #i‡(
NGX_HAVE_AIO_SENDFILE
)

175 
aio
 = 
fûe
->file->aio;

176 
Êags
 = (
aio
 &&áio->
¥ñﬂd_h™dÀr
Ë? 
SF_NODISKIO
 : 0;

179 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

180 
fûe_size
 + 
hódî
.
size
, &
hdå
, &
£¡
, 
Êags
);

182 i‡(
rc
 == -1) {

183 
îr
 = 
ngx_î∫o
;

185 
îr
) {

186 
NGX_EAGAIN
:

187 
ógaö
 = 1;

190 
NGX_EINTR
:

191 
eöå
 = 1;

194 #i‡(
NGX_HAVE_AIO_SENDFILE
)

195 
NGX_EBUSY
:

196 
ebusy
 = 1;

201 
wev
->
îr‹
 = 1;

202 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

203  
NGX_CHAIN_ERROR
;

206 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

207 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

214 } i‡(
rc
 >0 && 
£¡
 == 0) {

222 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

224 
fûe
->fûe->
«me
.
d©a
, fûe->
fûe_pos
);

226  
NGX_CHAIN_ERROR
;

229 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

231 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî
.
size
);

234 
n
 = 
	`ngx_wrôev
(
c
, &
hódî
);

236 i‡(
n
 =
NGX_ERROR
) {

237  
NGX_CHAIN_ERROR
;

240 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

243 
c
->
£¡
 += sent;

245 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

247 #i‡(
NGX_HAVE_AIO_SENDFILE
)

249 i‡(
ebusy
) {

250 i‡(
£¡
 == 0) {

251 
c
->
busy_cou¡
++;

253 i‡(
c
->
busy_cou¡
 > 2) {

254 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

256 &
fûe
->fûe->
«me
);

258 
c
->
busy_cou¡
 = 0;

259 
aio
->
¥ñﬂd_h™dÀr
 = 
NULL
;

261 
£nd
 = 
¥ev_£nd
;

266 
c
->
busy_cou¡
 = 0;

269 
n
 = 
aio
->
	`¥ñﬂd_h™dÀr
(
fûe
);

271 i‡(
n
 > 0) {

272 
£nd
 = 
¥ev_£nd
 + 
£¡
;

276  
ö
;

279 i‡(
Êags
 =
SF_NODISKIO
) {

280 
c
->
busy_cou¡
 = 0;

285 i‡(
ógaö
) {

294 
wev
->
ªady
 = 0;

295  
ö
;

298 i‡(
eöå
) {

299 
£nd
 = 
¥ev_£nd
 + 
£¡
;

303 i‡(
£nd
 - 
¥ev_£nd
 !
£¡
) {

304 
wev
->
ªady
 = 0;

305  
ö
;

308 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

309  
ö
;

312 
	}
}

	@src/os/unix/ngx_gcc_atomic_amd64.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

36 
ngx_ölöe
 
ngx_©omic_uöt_t


37 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

38 
ngx_©omic_uöt_t
 
£t
)

40 
u_ch¨
 
ªs
;

42 
__asm__
 volatile (

44 
NGX_SMP_LOCK


48 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

50  
ªs
;

51 
	}
}

66 
ngx_ölöe
 
ngx_©omic_öt_t


67 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

69 
__asm__
 volatile (

71 
NGX_SMP_LOCK


74 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

76  
add
;

77 
	}
}

80 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

	@src/os/unix/ngx_gcc_atomic_ppc.h

26 #i‡(
NGX_PTR_SIZE
 == 8)

28 
ngx_ölöe
 
ngx_©omic_uöt_t


29 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

30 
ngx_©omic_uöt_t
 
£t
)

32 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

34 
__asm__
 volatile (

50 : "=&b" (
ªs
), "=&b" (
ãmp
)

51 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

54  
ªs
;

55 
	}
}

58 
ngx_ölöe
 
ngx_©omic_öt_t


59 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

61 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

63 
__asm__
 volatile (

74 : "=&b" (
ªs
), "=&b" (
ãmp
)

75 : "b" (
vÆue
), "b" (
add
)

78  
ªs
;

79 
	}
}

82 #i‡(
NGX_SMP
)

83 
	#ngx_mem‹y_b¨rõr
() \

84 
__asm__
 vﬁ©ûê("isyn¯ \¿Üwsyn¯ \n" ::: "mem‹y")

	)

86 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

91 
ngx_ölöe
 
ngx_©omic_uöt_t


92 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

93 
ngx_©omic_uöt_t
 
£t
)

95 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

97 
__asm__
 volatile (

113 : "=&b" (
ªs
), "=&b" (
ãmp
)

114 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

117  
ªs
;

118 
	}
}

121 
ngx_ölöe
 
ngx_©omic_öt_t


122 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

124 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

126 
__asm__
 volatile (

137 : "=&b" (
ªs
), "=&b" (
ãmp
)

138 : "b" (
vÆue
), "b" (
add
)

141  
ªs
;

142 
	}
}

145 #i‡(
NGX_SMP
)

146 
	#ngx_mem‹y_b¨rõr
() \

147 
__asm__
 vﬁ©ûê("isyn¯ \¿Éõiÿ \n" ::: "mem‹y")

	)

149 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

155 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_sparc64.h

26 #i‡(
NGX_PTR_SIZE
 == 4)

27 
	#NGX_CASA
 "ˇß"

	)

29 
	#NGX_CASA
 "ˇsxa"

	)

33 
ngx_ölöe
 
ngx_©omic_uöt_t


34 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

35 
ngx_©omic_uöt_t
 
£t
)

37 
__asm__
 volatile (

39 
NGX_CASA
 " [%1] 0x80, %2, %0"

41 : "+r" (
£t
Ë: "r" (
lock
), "r" (
ﬁd
) : "memory");

43  (
£t
 =
ﬁd
);

44 
	}
}

47 
ngx_ölöe
 
ngx_©omic_öt_t


48 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

50 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

52 
ﬁd
 = *
vÆue
;

56 
ªs
 = 
ﬁd
 + 
add
;

58 
__asm__
 volatile (

60 
NGX_CASA
 " [%1] 0x80, %2, %0"

62 : "+r" (
ªs
Ë: "r" (
vÆue
), "r" (
ﬁd
) : "memory");

64 i‡(
ªs
 =
ﬁd
) {

65  
ªs
;

68 
ﬁd
 = 
ªs
;

70 
	}
}

73 #i‡(
NGX_SMP
)

74 
	#ngx_mem‹y_b¨rõr
() \

75 
__asm__
 volatile ( \

77 ::: "mem‹y")

	)

79 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_x86.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

37 
ngx_ölöe
 
ngx_©omic_uöt_t


38 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

39 
ngx_©omic_uöt_t
 
£t
)

41 
u_ch¨
 
ªs
;

43 
__asm__
 volatile (

45 
NGX_SMP_LOCK


49 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

51  
ªs
;

52 
	}
}

68 #i‡!(–
__GNUC__
 =2 && 
__GNUC_MINOR__
 <7 ) || ( 
__INTEL_COMPILER
 >= 800 ))

79 
ngx_ölöe
 
ngx_©omic_öt_t


80 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

82 
__asm__
 volatile (

84 
NGX_SMP_LOCK


87 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

89  
add
;

90 
	}
}

101 
ngx_ölöe
 
ngx_©omic_öt_t


102 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

104 
ngx_©omic_uöt_t
 
ﬁd
;

106 
__asm__
 volatile (

108 
NGX_SMP_LOCK


111 : "˜" (
ﬁd
Ë: "m" (*
vÆue
), "a" (
add
) : "cc", "memory");

113  
ﬁd
;

114 
	}
}

124 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

127 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 (".byã 0xf3, 0x90")

	)

	@src/os/unix/ngx_linux.h

8 #i‚de‡
_NGX_LINUX_H_INCLUDED_


9 
	#_NGX_LINUX_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

15 
ngx_löux_πsig_max
;

	@src/os/unix/ngx_linux_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evítfd
;

14 
aio_c⁄ãxt_t
 
ngx_aio_˘x
;

17 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

21 
	$io_submô
(
aio_c⁄ãxt_t
 
˘x
, 
n
, 
iocb
 **
∑iocb
)

23  
	`sysˇŒ
(
SYS_io_submô
, 
˘x
, 
n
, 
∑iocb
);

24 
	}
}

27 
ngx_öt_t


28 
	$ngx_fûe_aio_öô
(
ngx_fûe_t
 *
fûe
, 
ngx_poﬁ_t
 *
poﬁ
)

30 
ngx_evít_aio_t
 *
aio
;

32 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

33 i‡(
aio
 =
NULL
) {

34  
NGX_ERROR
;

37 
aio
->
fûe
 = file;

38 
aio
->
fd
 = 
fûe
->fd;

39 
aio
->
evít
.
d©a
 =áio;

40 
aio
->
evít
.
ªady
 = 1;

41 
aio
->
evít
.
log
 = 
fûe
->log;

43 
fûe
->
aio
 =áio;

45  
NGX_OK
;

46 
	}
}

49 
ssize_t


50 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

51 
ngx_poﬁ_t
 *
poﬁ
)

53 
ngx_îr_t
 
îr
;

54 
iocb
 *
piocb
[1];

55 
ngx_evít_t
 *
ev
;

56 
ngx_evít_aio_t
 *
aio
;

58 i‡(!
ngx_fûe_aio
) {

59  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

62 i‡(
fûe
->
aio
 =
NULL
 && 
	`ngx_fûe_aio_öô
(fûe, 
poﬁ
Ë!
NGX_OK
) {

63  
NGX_ERROR
;

66 
aio
 = 
fûe
->aio;

67 
ev
 = &
aio
->
evít
;

69 i‡(!
ev
->
ªady
) {

70 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

71 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

72  
NGX_AGAIN
;

75 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

77 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

79 i‡(
ev
->
com∂ëe
) {

80 
ev
->
a˘ive
 = 0;

81 
ev
->
com∂ëe
 = 0;

83 i‡(
aio
->
ªs
 >= 0) {

84 
	`ngx_£t_î∫o
(0);

85  
aio
->
ªs
;

88 
	`ngx_£t_î∫o
(-
aio
->
ªs
);

90 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

91 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

93  
NGX_ERROR
;

96 
	`ngx_memzîo
(&
aio
->
aiocb
, (
iocb
));

98 
aio
->
aiocb
.
aio_d©a
 = (
uöt64_t
Ë(
uöçå_t
Ë
ev
;

99 
aio
->
aiocb
.
aio_lio_›code
 = 
IOCB_CMD_PREAD
;

100 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

101 
aio
->
aiocb
.
aio_buf
 = (
uöt64_t
Ë(
uöçå_t
Ë
buf
;

102 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

103 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

104 
aio
->
aiocb
.
aio_Êags
 = 
IOCB_FLAG_RESFD
;

105 
aio
->
aiocb
.
aio_ªsfd
 = 
ngx_evítfd
;

107 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

109 
piocb
[0] = &
aio
->
aiocb
;

111 i‡(
	`io_submô
(
ngx_aio_˘x
, 1, 
piocb
) == 1) {

112 
ev
->
a˘ive
 = 1;

113 
ev
->
ªady
 = 0;

114 
ev
->
com∂ëe
 = 0;

116  
NGX_AGAIN
;

119 
îr
 = 
ngx_î∫o
;

121 i‡(
îr
 =
NGX_EAGAIN
) {

122  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

125 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

126 "io_submô(\"%V\"ËÁûed", &
fûe
->
«me
);

128 i‡(
îr
 =
NGX_ENOSYS
) {

129 
ngx_fûe_aio
 = 0;

130  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

133  
NGX_ERROR
;

134 
	}
}

138 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

140 
ngx_evít_aio_t
 *
aio
;

142 
aio
 = 
ev
->
d©a
;

144 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

145 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

147 
aio
->
	`h™dÀr
(
ev
);

148 
	}
}

	@src/os/unix/ngx_linux_config.h

8 #i‚de‡
_NGX_LINUX_CONFIG_H_INCLUDED_


9 
	#_NGX_LINUX_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_GNU_SOURCE


13 
	#_GNU_SOURCE


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<pwd.h
>

30 
	~<gΩ.h
>

31 
	~<dúít.h
>

32 
	~<glob.h
>

33 
	~<sys/vfs.h
>

35 
	~<sys/uio.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

39 
	~<sys/waô.h
>

40 
	~<sys/mm™.h
>

41 
	~<sys/ªsour˚.h
>

42 
	~<sched.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<√töë/t˝.h
>

47 
	~<¨∑/öë.h
>

48 
	~<√tdb.h
>

49 
	~<sys/un.h
>

51 
	~<time.h
>

52 
	~<mÆloc.h
>

53 
	~<limôs.h
>

54 
	~<sys/io˘l.h
>

55 
	~<¸y±.h
>

56 
	~<sys/ut¢ame.h
>

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_SYS_PRCTL_H
)

68 
	~<sys/¥˘l.h
>

72 #i‡(
NGX_HAVE_SENDFILE64
)

73 
	~<sys/£ndfûe.h
>

75 
ssize_t
 
£ndfûe
(
s
, 
fd
, 
öt32_t
 *
off£t
, 
size_t
 
size
);

76 
	#NGX_SENDFILE_LIMIT
 0x80000000

	)

80 #i‡(
NGX_HAVE_POLL
)

81 
	~<pﬁl.h
>

85 #i‡(
NGX_HAVE_RTSIG
)

86 
	~<pﬁl.h
>

87 
	~<sys/sys˘l.h
>

91 #i‡(
NGX_HAVE_EPOLL
)

92 
	~<sys/ïﬁl.h
>

96 #i‡(
NGX_HAVE_SYS_EVENTFD_H
)

97 
	~<sys/evítfd.h
>

99 
	~<sys/sysˇŒ.h
>

100 #i‡(
NGX_HAVE_FILE_AIO
)

101 
	~<löux/aio_abi.h
>

102 
iocb
 
	tngx_aiocb_t
;

106 
	#NGX_LISTEN_BACKLOG
 511

	)

109 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


111 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

115 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


116 
	#NGX_HAVE_INHERITED_NONBLOCK
 0

	)

120 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

121 
	#ngx_debug_öô
()

	)

124 **
ívú⁄
;

	@src/os/unix/ngx_linux_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 
	gngx_löux_kîn_o°y≥
[50];

13 
u_ch¨
 
	gngx_löux_kîn_o§ñó£
[50];

15 
	gngx_löux_πsig_max
;

18 
ngx_os_io_t
 
	gngx_löux_io
 = {

19 
ngx_unix_ªcv
,

20 
ngx_ªadv_chaö
,

21 
ngx_udp_unix_ªcv
,

22 
ngx_unix_£nd
,

23 #i‡(
NGX_HAVE_SENDFILE
)

24 
ngx_löux_£ndfûe_chaö
,

25 
NGX_IO_SENDFILE


27 
ngx_wrôev_chaö
,

33 
ngx_öt_t


34 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

36 
ut¢ame
 
u
;

38 i‡(
	`u«me
(&
u
) == -1) {

39 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "uname() failed");

40  
NGX_ERROR
;

43 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o°y≥
, (
u_ch¨
 *Ë
u
.
sy¢ame
,

44 (
ngx_löux_kîn_o°y≥
));

46 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o§ñó£
, (
u_ch¨
 *Ë
u
.
ªÀa£
,

47 (
ngx_löux_kîn_o§ñó£
));

49 #i‡(
NGX_HAVE_RTSIG
)

51 
«me
[2];

52 
size_t
 
Àn
;

53 
ngx_îr_t
 
îr
;

55 
«me
[0] = 
CTL_KERN
;

56 
«me
[1] = 
KERN_RTSIGMAX
;

57 
Àn
 = (
ngx_löux_πsig_max
);

59 i‡(
	`sys˘l
(
«me
, 2, &
ngx_löux_πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

60 
îr
 = 
ngx_î∫o
;

62 i‡(
îr
 !
NGX_ENOTDIR
 &&Éº !
NGX_ENOSYS
) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

66  
NGX_ERROR
;

69 
ngx_löux_πsig_max
 = 0;

75 
ngx_os_io
 = 
ngx_löux_io
;

77  
NGX_OK
;

78 
	}
}

82 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

84 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

85 
ngx_löux_kîn_o°y≥
, 
ngx_löux_kîn_o§ñó£
);

87 #i‡(
NGX_HAVE_RTSIG
)

88 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "sysctl(KERN_RTSIGMAX): %d",

89 
ngx_löux_πsig_max
);

91 
	}
}

	@src/os/unix/ngx_linux_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t
 
ngx_löux_£ndfûe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_buf_t
 *
fûe
,

14 
size_t
 
size
);

16 #i‡(
NGX_THREADS
)

17 
	~<ngx_thªad_poﬁ.h
>

19 #i‡!(
NGX_HAVE_SENDFILE64
)

20 #îr‹ 
£ndfûe64
(Ë
is
 
ªquúed
!

23 
ngx_öt_t
 
ngx_löux_£ndfûe_thªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_buf_t
 *
fûe
,

24 
size_t
 
size
, size_à*
£¡
);

25 
ngx_löux_£ndfûe_thªad_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
);

43 
	#NGX_SENDFILE_MAXSIZE
 2147483647L

	)

46 
ngx_chaö_t
 *

47 
	$ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

49 
t˝_nodñay
;

50 
off_t
 
£nd
, 
¥ev_£nd
;

51 
size_t
 
fûe_size
, 
£¡
;

52 
ssize_t
 
n
;

53 
ngx_îr_t
 
îr
;

54 
ngx_buf_t
 *
fûe
;

55 
ngx_evít_t
 *
wev
;

56 
ngx_chaö_t
 *
˛
;

57 
ngx_iovec_t
 
hódî
;

58 
iovec
 
hódîs
[
NGX_IOVS_PREALLOCATE
];

59 #i‡(
NGX_THREADS
)

60 
ngx_öt_t
 
rc
;

61 
ngx_uöt_t
 
thªad_h™dÀd
, 
thªad_com∂ëe
;

64 
wev
 = 
c
->
wrôe
;

66 i‡(!
wev
->
ªady
) {

67  
ö
;

73 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_SENDFILE_MAXSIZE
 - 
ngx_∑gesize
)) {

74 
limô
 = 
NGX_SENDFILE_MAXSIZE
 - 
ngx_∑gesize
;

78 
£nd
 = 0;

80 
hódî
.
iovs
 = 
hódîs
;

81 
hódî
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

84 
¥ev_£nd
 = 
£nd
;

85 #i‡(
NGX_THREADS
)

86 
thªad_h™dÀd
 = 0;

87 
thªad_com∂ëe
 = 0;

92 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
hódî
, 
ö
, 
limô
 - 
£nd
, 
c
->
log
);

94 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

95  
NGX_CHAIN_ERROR
;

98 
£nd
 +
hódî
.
size
;

102 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET


103 && 
hódî
.
cou¡
 != 0

104 && 
˛


105 && 
˛
->
buf
->
ö_fûe
)

109 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_SET
) {

111 
t˝_nodñay
 = 0;

113 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

114 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

116 
îr
 = 
ngx_sockë_î∫o
;

124 i‡(
îr
 !
NGX_EINTR
) {

125 
wev
->
îr‹
 = 1;

126 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

128  
NGX_CHAIN_ERROR
;

132 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_UNSET
;

134 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

139 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

141 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

142 
îr
 = 
ngx_sockë_î∫o
;

149 i‡(
îr
 !
NGX_EINTR
) {

150 
wev
->
îr‹
 = 1;

151 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

152 
ngx_t˝_n›ush_n
 " failed");

153  
NGX_CHAIN_ERROR
;

157 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

159 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

167 i‡(
hódî
.
cou¡
 =0 && 
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

168 
fûe
 = 
˛
->
buf
;

172 
fûe_size
 = (
size_t
Ë
	`ngx_chaö_cﬂÀs˚_fûe
(&
˛
, 
limô
 - 
£nd
);

174 
£nd
 +
fûe_size
;

176 i‡(
fûe_size
 == 0) {

177 
	`ngx_debug_poöt
();

178  
NGX_CHAIN_ERROR
;

182 #i‡(
NGX_THREADS
)

183 i‡(
fûe
->fûe->
thªad_h™dÀr
) {

184 
rc
 = 
	`ngx_löux_£ndfûe_thªad
(
c
, 
fûe
, 
fûe_size
, &
£¡
);

186 
rc
) {

187 
NGX_OK
:

188 
thªad_h™dÀd
 = 1;

191 
NGX_DONE
:

192 
thªad_com∂ëe
 = 1;

195 
NGX_AGAIN
:

199  
NGX_CHAIN_ERROR
;

205 
n
 = 
	`ngx_löux_£ndfûe
(
c
, 
fûe
, 
fûe_size
);

207 i‡(
n
 =
NGX_ERROR
) {

208  
NGX_CHAIN_ERROR
;

211 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

215 
n
 = 
	`ngx_wrôev
(
c
, &
hódî
);

217 i‡(
n
 =
NGX_ERROR
) {

218  
NGX_CHAIN_ERROR
;

221 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

224 
c
->
£¡
 += sent;

226 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

228 i‡((
size_t
Ë(
£nd
 - 
¥ev_£nd
Ë!
£¡
) {

229 #i‡(
NGX_THREADS
)

230 i‡(
thªad_h™dÀd
) {

231  
ö
;

234 i‡(
thªad_com∂ëe
) {

235 
£nd
 = 
¥ev_£nd
 + 
£¡
;

239 
wev
->
ªady
 = 0;

240  
ö
;

243 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

244  
ö
;

247 
	}
}

250 
ssize_t


251 
	$ngx_löux_£ndfûe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_buf_t
 *
fûe
, 
size_t
 
size
)

253 #i‡(
NGX_HAVE_SENDFILE64
)

254 
off_t
 
off£t
;

256 
öt32_t
 
off£t
;

258 
ssize_t
 
n
;

259 
ngx_îr_t
 
îr
;

261 #i‡(
NGX_HAVE_SENDFILE64
)

262 
off£t
 = 
fûe
->
fûe_pos
;

264 
off£t
 = (
öt32_t
Ë
fûe
->
fûe_pos
;

267 
eöå
:

269 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

270 "£ndfûe: @%O %uz", 
fûe
->
fûe_pos
, 
size
);

272 
n
 = 
	`£ndfûe
(
c
->
fd
, 
fûe
->fûe->fd, &
off£t
, 
size
);

274 i‡(
n
 == -1) {

275 
îr
 = 
ngx_î∫o
;

277 
îr
) {

278 
NGX_EAGAIN
:

279 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

281  
NGX_AGAIN
;

283 
NGX_EINTR
:

284 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

286 
eöå
;

289 
c
->
wrôe
->
îr‹
 = 1;

290 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

291  
NGX_ERROR
;

295 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "sendfile: %z of %uz @%O",

296 
n
, 
size
, 
fûe
->
fûe_pos
);

298  
n
;

299 
	}
}

302 #i‡(
NGX_THREADS
)

305 
ngx_buf_t
 *
	mfûe
;

306 
ngx_sockë_t
 
	msockë
;

307 
size_t
 
	msize
;

309 
size_t
 
	m£¡
;

310 
ngx_îr_t
 
	mîr
;

311 } 
	tngx_löux_£ndfûe_˘x_t
;

314 
ngx_öt_t


315 
	$ngx_löux_£ndfûe_thªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_buf_t
 *
fûe
, 
size_t
 
size
,

316 
size_t
 *
£¡
)

318 
ngx_uöt_t
 
Êags
;

319 
ngx_evít_t
 *
wev
;

320 
ngx_thªad_èsk_t
 *
èsk
;

321 
ngx_löux_£ndfûe_˘x_t
 *
˘x
;

323 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

325 
fûe
->fûe->
fd
, 
size
, fûe->
fûe_pos
);

327 
èsk
 = 
c
->
£ndfûe_èsk
;

329 i‡(
èsk
 =
NULL
) {

330 
èsk
 = 
	`ngx_thªad_èsk_Æloc
(
c
->
poﬁ
, (
ngx_löux_£ndfûe_˘x_t
));

331 i‡(
èsk
 =
NULL
) {

332  
NGX_ERROR
;

335 
èsk
->
h™dÀr
 = 
ngx_löux_£ndfûe_thªad_h™dÀr
;

337 
c
->
£ndfûe_èsk
 = 
èsk
;

340 
˘x
 = 
èsk
->ctx;

341 
wev
 = 
c
->
wrôe
;

343 i‡(
èsk
->
evít
.
com∂ëe
) {

344 
èsk
->
evít
.
com∂ëe
 = 0;

346 i‡(
˘x
->
îr
 && ctx->î∏!
NGX_EAGAIN
) {

347 
wev
->
îr‹
 = 1;

348 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
˘x
->
îr
, "sendfile() failed");

349  
NGX_ERROR
;

352 *
£¡
 = 
˘x
->sent;

354  (
˘x
->
£¡
 =˘x->
size
Ë? 
NGX_DONE
 : 
NGX_AGAIN
;

357 
˘x
->
fûe
 = file;

358 
˘x
->
sockë
 = 
c
->
fd
;

359 
˘x
->
size
 = size;

361 i‡(
wev
->
a˘ive
) {

362 
Êags
 = (
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
Ë? 
NGX_CLEAR_EVENT


363 : 
NGX_LEVEL_EVENT
;

365 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 
Êags
Ë=
NGX_ERROR
) {

366  
NGX_ERROR
;

370 i‡(
fûe
->fûe->
	`thªad_h™dÀr
(
èsk
, fûe->fûeË!
NGX_OK
) {

371  
NGX_ERROR
;

374 *
£¡
 = 0;

376  
NGX_OK
;

377 
	}
}

381 
	$ngx_löux_£ndfûe_thªad_h™dÀr
(*
d©a
, 
ngx_log_t
 *
log
)

383 
ngx_löux_£ndfûe_˘x_t
 *
˘x
 = 
d©a
;

385 
off_t
 
off£t
;

386 
ssize_t
 
n
;

387 
ngx_buf_t
 *
fûe
;

389 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "linux sendfileÅhread handler");

391 
fûe
 = 
˘x
->file;

392 
off£t
 = 
fûe
->
fûe_pos
;

394 
agaö
:

396 
n
 = 
	`£ndfûe
(
˘x
->
sockë
, 
fûe
->fûe->
fd
, &
off£t
, ctx->
size
);

398 i‡(
n
 == -1) {

399 
˘x
->
îr
 = 
ngx_î∫o
;

402 
˘x
->
£¡
 = 
n
;

403 
˘x
->
îr
 = 0;

407 
	`ngx_time_upd©e
();

410 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

412 
n
, 
˘x
->
îr
, ctx->
size
, 
fûe
->
fûe_pos
);

414 i‡(
˘x
->
îr
 =
NGX_EINTR
) {

415 
agaö
;

417 
	}
}

	@src/os/unix/ngx_os.h

8 #i‚de‡
_NGX_OS_H_INCLUDED_


9 
	#_NGX_OS_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_IO_SENDFILE
 1

	)

19 
	$ssize_t
 (*
	tngx_ªcv_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

20 
	$ssize_t
 (*
	tngx_ªcv_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

21 
	toff_t
 
	tlimô
);

22 
	$ssize_t
 (*
	tngx_£nd_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

23 
ngx_chaö_t
 *(*
	tngx_£nd_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

24 
	toff_t
 
	tlimô
);

27 
ngx_ªcv_±
 
ªcv
;

28 
ngx_ªcv_chaö_±
 
ªcv_chaö
;

29 
ngx_ªcv_±
 
udp_ªcv
;

30 
ngx_£nd_±
 
£nd
;

31 
ngx_£nd_chaö_±
 
£nd_chaö
;

32 
ngx_uöt_t
 
Êags
;

33 } 
	tngx_os_io_t
;

36 
ngx_öt_t
 
	`ngx_os_öô
(
ngx_log_t
 *
log
);

37 
	`ngx_os_°©us
(
ngx_log_t
 *
log
);

38 
ngx_öt_t
 
	`ngx_os_•ecific_öô
(
ngx_log_t
 *
log
);

39 
	`ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
);

40 
ngx_öt_t
 
	`ngx_d´m⁄
(
ngx_log_t
 *
log
);

41 
ngx_öt_t
 
	`ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
,Çgx_öt_à
pid
);

44 
ssize_t
 
	`ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

45 
ssize_t
 
	`ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
íåy
, 
off_t
 
limô
);

46 
ssize_t
 
	`ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

47 
ssize_t
 
	`ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

48 
ngx_chaö_t
 *
	`ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

49 
off_t
 
limô
);

51 #i‡(
NGX_HAVE_AIO
)

52 
ssize_t
 
	`ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

53 
ssize_t
 
	`ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
, 
off_t
 
limô
);

54 
ssize_t
 
	`ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

55 
ngx_chaö_t
 *
	`ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

56 
off_t
 
limô
);

60 #i‡(
IOV_MAX
 > 64)

61 
	#NGX_IOVS_PREALLOCATE
 64

	)

63 
	#NGX_IOVS_PREALLOCATE
 
IOV_MAX


	)

68 
iovec
 *
iovs
;

69 
ngx_uöt_t
 
cou¡
;

70 
size_t
 
size
;

71 
ngx_uöt_t
 
«Œoc
;

72 } 
	tngx_iovec_t
;

74 
ngx_chaö_t
 *
	`ngx_ouçut_chaö_to_iovec
(
ngx_iovec_t
 *
vec
,Çgx_chaö_à*
ö
,

75 
size_t
 
limô
, 
ngx_log_t
 *
log
);

78 
ssize_t
 
	`ngx_wrôev
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_iovec_t
 *
vec
);

81 
ngx_os_io_t
 
ngx_os_io
;

82 
ngx_öt_t
 
ngx_n˝u
;

83 
ngx_öt_t
 
ngx_max_sockës
;

84 
ngx_uöt_t
 
ngx_öhîôed_n⁄blockög
;

85 
ngx_uöt_t
 
ngx_t˝_nodñay_™d_t˝_n›ush
;

88 #i‡(
NGX_FREEBSD
)

89 
	~<ngx_‰ìbsd.h
>

92 #ñi‡(
NGX_LINUX
)

93 
	~<ngx_löux.h
>

96 #ñi‡(
NGX_SOLARIS
)

97 
	~<ngx_sﬁ¨is.h
>

100 #ñi‡(
NGX_DARWIN
)

101 
	~<ngx_d¨wö.h
>

	@src/os/unix/ngx_posix_config.h

8 #i‚de‡
_NGX_POSIX_CONFIG_H_INCLUDED_


9 
	#_NGX_POSIX_CONFIG_H_INCLUDED_


	)

12 #i‡(
NGX_HPUX
)

13 
	#_XOPEN_SOURCE


	)

14 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

15 
	#_HPUX_ALT_XOPEN_SOCKET_API


	)

19 #i‡(
NGX_TRU64
)

20 
	#_REENTRANT


	)

24 #ifde‡
__CYGWIN__


25 
	#timez⁄ev¨


	)

26 
	#NGX_BROKEN_SCM_RIGHTS
 1

	)

30 
	~<sys/ty≥s.h
>

31 
	~<sys/time.h
>

32 #i‡(
NGX_HAVE_UNISTD_H
)

33 
	~<uni°d.h
>

35 #i‡(
NGX_HAVE_INTTYPES_H
)

36 
	~<öây≥s.h
>

38 
	~<°d¨g.h
>

39 
	~<°ddef.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<˘y≥.h
>

43 
	~<î∫o.h
>

44 
	~<°rög.h
>

45 
	~<sig«l.h
>

46 
	~<pwd.h
>

47 
	~<gΩ.h
>

48 
	~<dúít.h
>

49 
	~<glob.h
>

50 
	~<time.h
>

51 #i‡(
NGX_HAVE_SYS_PARAM_H
)

52 
	~<sys/∑øm.h
>

54 #i‡(
NGX_HAVE_SYS_MOUNT_H
)

55 
	~<sys/mou¡.h
>

57 #i‡(
NGX_HAVE_SYS_STATVFS_H
)

58 
	~<sys/°©vfs.h
>

61 #i‡(
NGX_HAVE_SYS_FILIO_H
)

62 
	~<sys/fûio.h
>

64 
	~<sys/io˘l.h
>

66 
	~<sys/uio.h
>

67 
	~<sys/°©.h
>

68 
	~<f˙é.h
>

70 
	~<sys/waô.h
>

71 
	~<sys/mm™.h
>

72 
	~<sys/ªsour˚.h
>

73 
	~<sched.h
>

75 
	~<sys/sockë.h
>

76 
	~<√töë/ö.h
>

77 
	~<√töë/t˝.h
>

78 
	~<¨∑/öë.h
>

79 
	~<√tdb.h
>

80 
	~<sys/un.h
>

82 #i‡(
NGX_HAVE_LIMITS_H
)

83 
	~<limôs.h
>

86 #ifde‡
__CYGWIN__


87 
	~<mÆloc.h
>

90 #i‡(
NGX_HAVE_CRYPT_H
)

91 
	~<¸y±.h
>

95 #i‚de‡
IOV_MAX


96 
	#IOV_MAX
 16

	)

100 
	~<ngx_auto_c⁄fig.h
>

103 #i‡(
NGX_HAVE_POSIX_SEM
)

104 
	~<£m≠h‹e.h
>

108 #i‡(
NGX_HAVE_POLL
)

109 
	~<pﬁl.h
>

113 #i‡(
NGX_HAVE_KQUEUE
)

114 
	~<sys/evít.h
>

118 #i‡(
NGX_HAVE_DEVPOLL
)

119 
	~<sys/io˘l.h
>

120 
	~<sys/devpﬁl.h
>

124 #i‡(
NGX_HAVE_FILE_AIO
)

125 
	~<aio.h
>

126 
aiocb
 
	tngx_aiocb_t
;

130 
	#NGX_LISTEN_BACKLOG
 511

	)

132 
	#ngx_debug_öô
()

	)

135 #i‡(
__FªeBSD__
Ë&& (
__FªeBSD_vîsi⁄
 < 400017)

137 
	~<sys/∑øm.h
>

143 #unde‡
CMSG_SPACE


144 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

146 #unde‡
CMSG_LEN


147 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

149 #unde‡
CMSG_DATA


150 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

155 **
ívú⁄
;

	@src/os/unix/ngx_posix_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
	gngx_n˝u
;

14 
ngx_öt_t
 
	gngx_max_sockës
;

15 
ngx_uöt_t
 
	gngx_öhîôed_n⁄blockög
;

16 
ngx_uöt_t
 
	gngx_t˝_nodñay_™d_t˝_n›ush
;

19 
æimô
 
	gæmt
;

22 
ngx_os_io_t
 
	gngx_os_io
 = {

23 
ngx_unix_ªcv
,

24 
ngx_ªadv_chaö
,

25 
ngx_udp_unix_ªcv
,

26 
ngx_unix_£nd
,

27 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_öô
(
ngx_log_t
 *
log
)

35 
ngx_uöt_t
 
n
;

37 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

38 i‡(
	`ngx_os_•ecific_öô
(
log
Ë!
NGX_OK
) {

39  
NGX_ERROR
;

43 i‡(
	`ngx_öô_£çro˘ôÀ
(
log
Ë!
NGX_OK
) {

44  
NGX_ERROR
;

47 
ngx_∑gesize
 = 
	`gë∑gesize
();

48 
ngx_ˇchñöe_size
 = 
NGX_CPU_CACHE_LINE
;

50 
n
 = 
ngx_∑gesize
;Ç >>1; 
ngx_∑gesize_shi·
++) { }

52 #i‡(
NGX_HAVE_SC_NPROCESSORS_ONLN
)

53 i‡(
ngx_n˝u
 == 0) {

54 
ngx_n˝u
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

58 i‡(
ngx_n˝u
 < 1) {

59 
ngx_n˝u
 = 1;

62 
	`ngx_˝uöfo
();

64 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
î∫o
,

67  
NGX_ERROR
;

70 
ngx_max_sockës
 = (
ngx_öt_t
Ë
æmt
.
æim_cur
;

72 #i‡(
NGX_HAVE_INHERITED_NONBLOCK
 || 
NGX_HAVE_ACCEPT4
)

73 
ngx_öhîôed_n⁄blockög
 = 1;

75 
ngx_öhîôed_n⁄blockög
 = 0;

78 
	`§™dom
(
	`ngx_time
());

80  
NGX_OK
;

81 
	}
}

85 
	$ngx_os_°©us
(
ngx_log_t
 *
log
)

87 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, 
NGINX_VER_BUILD
);

89 #ifde‡
NGX_COMPILER


90 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "buûàby " 
NGX_COMPILER
);

93 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

94 
	`ngx_os_•ecific_°©us
(
log
);

97 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

99 
æmt
.
æim_cur
,Ñlmt.
æim_max
);

100 
	}
}

105 
ngx_öt_t


106 
	$ngx_posix_po°_c⁄f_öô
(
ngx_log_t
 *
log
)

108 
ngx_fd_t
 
µ
[2];

110 i‡(
	`pùe
(
µ
) == -1) {

111 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "pipe() failed");

112  
NGX_ERROR
;

115 i‡(
	`dup2
(
µ
[1], 
STDERR_FILENO
) == -1) {

116 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "dup2(STDERR) failed");

117  
NGX_ERROR
;

120 i‡(
µ
[1] > 
STDERR_FILENO
) {

121 i‡(
	`˛o£
(
µ
[1]) == -1) {

122 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "close() failed");

123  
NGX_ERROR
;

127  
NGX_OK
;

128 
	}
}

	@src/os/unix/ngx_process.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

15 
	msigno
;

16 *
	msig«me
;

17 *
	m«me
;

18 (*
	mh™dÀr
)(
	msigno
);

19 } 
	tngx_sig«l_t
;

23 
ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

24 
ngx_sig«l_h™dÀr
(
signo
);

25 
ngx_¥o˚ss_gë_°©us
();

26 
ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
);

29 
	gngx_¨gc
;

30 **
	gngx_¨gv
;

31 **
	gngx_os_¨gv
;

33 
ngx_öt_t
 
	gngx_¥o˚ss_¶Ÿ
;

34 
ngx_sockë_t
 
	gngx_ch™√l
;

35 
ngx_öt_t
 
	gngx_œ°_¥o˚ss
;

36 
ngx_¥o˚ss_t
 
	gngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

39 
ngx_sig«l_t
 
	gsig«ls
[] = {

40 { 
ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

41 "SIG" 
ngx_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

43 
ngx_sig«l_h™dÀr
 },

45 { 
ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
),

46 "SIG" 
ngx_vÆue
(
NGX_REOPEN_SIGNAL
),

48 
ngx_sig«l_h™dÀr
 },

50 { 
ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
),

51 "SIG" 
ngx_vÆue
(
NGX_NOACCEPT_SIGNAL
),

53 
ngx_sig«l_h™dÀr
 },

55 { 
ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
),

56 "SIG" 
ngx_vÆue
(
NGX_TERMINATE_SIGNAL
),

58 
ngx_sig«l_h™dÀr
 },

60 { 
ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

61 "SIG" 
ngx_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

63 
ngx_sig«l_h™dÀr
 },

65 { 
ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

66 "SIG" 
ngx_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

68 
ngx_sig«l_h™dÀr
 },

70 { 
SIGALRM
, "SIGALRM", "", 
ngx_sig«l_h™dÀr
 },

72 { 
SIGINT
, "SIGINT", "", 
ngx_sig«l_h™dÀr
 },

74 { 
SIGIO
, "SIGIO", "", 
ngx_sig«l_h™dÀr
 },

76 { 
SIGCHLD
, "SIGCHLD", "", 
ngx_sig«l_h™dÀr
 },

78 { 
SIGSYS
, "SIGSYS, SIG_IGN", "", 
SIG_IGN
 },

80 { 
SIGPIPE
, "SIGPIPE, SIG_IGN", "", 
SIG_IGN
 },

82 { 0, 
NULL
, "", NULL }

86 
ngx_pid_t


87 
	$ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
,

88 *
«me
, 
ngx_öt_t
 
ª•awn
)

90 
u_l⁄g
 
⁄
;

91 
ngx_pid_t
 
pid
;

92 
ngx_öt_t
 
s
;

94 i‡(
ª•awn
 >= 0) {

95 
s
 = 
ª•awn
;

98 
s
 = 0; s < 
ngx_œ°_¥o˚ss
; s++) {

99 i‡(
ngx_¥o˚s£s
[
s
].
pid
 == -1) {

104 i‡(
s
 =
NGX_MAX_PROCESSES
) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

107 
NGX_MAX_PROCESSES
);

108  
NGX_INVALID_PID
;

113 i‡(
ª•awn
 !
NGX_PROCESS_DETACHED
) {

117 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ngx_¥o˚s£s
[
s
].
ch™√l
) == -1)

119 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

120 "sockë∑ú(ËÁûed whûê•awnög \"%s\"", 
«me
);

121  
NGX_INVALID_PID
;

124 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

126 
ngx_¥o˚s£s
[
s
].
ch™√l
[0],

127 
ngx_¥o˚s£s
[
s
].
ch™√l
[1]);

129 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0]) == -1) {

130 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

131 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

132 
«me
);

133 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

134  
NGX_INVALID_PID
;

137 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1]) == -1) {

138 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

140 
«me
);

141 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

142  
NGX_INVALID_PID
;

145 
⁄
 = 1;

146 i‡(
	`io˘l
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
FIOASYNC
, &
⁄
) == -1) {

147 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

148 "io˘l(FIOASYNCËÁûed whûê•awnög \"%s\"", 
«me
);

149 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

150  
NGX_INVALID_PID
;

153 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETOWN
, 
ngx_pid
) == -1) {

154 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

155 "f˙é(F_SETOWNËÁûed whûê•awnög \"%s\"", 
«me
);

156 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

157  
NGX_INVALID_PID
;

160 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

163 
«me
);

164 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

165  
NGX_INVALID_PID
;

168 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

169 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

171 
«me
);

172 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

173  
NGX_INVALID_PID
;

176 
ngx_ch™√l
 = 
ngx_¥o˚s£s
[
s
].
ch™√l
[1];

179 
ngx_¥o˚s£s
[
s
].
ch™√l
[0] = -1;

180 
ngx_¥o˚s£s
[
s
].
ch™√l
[1] = -1;

183 
ngx_¥o˚ss_¶Ÿ
 = 
s
;

186 
pid
 = 
	`f‹k
();

188 
pid
) {

191 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

192 "f‹k(ËÁûed whûê•awnög \"%s\"", 
«me
);

193 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

194  
NGX_INVALID_PID
;

197 
ngx_pid
 = 
	`ngx_gëpid
();

198 
	`¥oc
(
cy˛e
, 
d©a
);

205 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "°¨à%†%P", 
«me
, 
pid
);

207 
ngx_¥o˚s£s
[
s
].
pid
 =Öid;

208 
ngx_¥o˚s£s
[
s
].
exôed
 = 0;

210 i‡(
ª•awn
 >= 0) {

211  
pid
;

214 
ngx_¥o˚s£s
[
s
].
¥oc
 =Öroc;

215 
ngx_¥o˚s£s
[
s
].
d©a
 = data;

216 
ngx_¥o˚s£s
[
s
].
«me
 =Çame;

217 
ngx_¥o˚s£s
[
s
].
exôög
 = 0;

219 
ª•awn
) {

221 
NGX_PROCESS_NORESPAWN
:

222 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

223 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

224 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

227 
NGX_PROCESS_JUST_SPAWN
:

228 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

229 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

230 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

233 
NGX_PROCESS_RESPAWN
:

234 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

235 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

236 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

239 
NGX_PROCESS_JUST_RESPAWN
:

240 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

241 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

242 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

245 
NGX_PROCESS_DETACHED
:

246 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

247 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

248 
ngx_¥o˚s£s
[
s
].
dëached
 = 1;

252 i‡(
s
 =
ngx_œ°_¥o˚ss
) {

253 
ngx_œ°_¥o˚ss
++;

256  
pid
;

257 
	}
}

260 
ngx_pid_t


261 
	$ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
)

263  
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_execuã_¥oc
, 
˘x
, ctx->
«me
,

264 
NGX_PROCESS_DETACHED
);

265 
	}
}

269 
	$ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

271 
ngx_exec_˘x_t
 *
˘x
 = 
d©a
;

273 i‡(
	`execve
(
˘x
->
∑th
, ctx->
¨gv
, ctx->
ívp
) == -1) {

274 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

276 
˘x
->
«me
, ctx->
∑th
);

279 
	`exô
(1);

280 
	}
}

283 
ngx_öt_t


284 
	$ngx_öô_sig«ls
(
ngx_log_t
 *
log
)

286 
ngx_sig«l_t
 *
sig
;

287 
siga˘i⁄
 
ß
;

289 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

290 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

291 
ß
.
ß_h™dÀr
 = 
sig
->
h™dÀr
;

292 
	`sigem±y£t
(&
ß
.
ß_mask
);

293 i‡(
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
) == -1) {

294 #i‡(
NGX_VALGRIND
)

295 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

296 "siga˘i⁄(%sËÁûed, ign‹ed", 
sig
->
sig«me
);

298 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

299 "siga˘i⁄(%sËÁûed", 
sig
->
sig«me
);

300  
NGX_ERROR
;

305  
NGX_OK
;

306 
	}
}

310 
	$ngx_sig«l_h™dÀr
(
signo
)

312 *
a˘i⁄
;

313 
ngx_öt_t
 
ign‹e
;

314 
ngx_îr_t
 
îr
;

315 
ngx_sig«l_t
 *
sig
;

317 
ign‹e
 = 0;

319 
îr
 = 
ngx_î∫o
;

321 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

322 i‡(
sig
->
signo
 == signo) {

327 
	`ngx_time_sigß„_upd©e
();

329 
a˘i⁄
 = "";

331 
ngx_¥o˚ss
) {

333 
NGX_PROCESS_MASTER
:

334 
NGX_PROCESS_SINGLE
:

335 
signo
) {

337 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

338 
ngx_quô
 = 1;

339 
a˘i⁄
 = ", shutting down";

342 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

343 
SIGINT
:

344 
ngx_ãrmö©e
 = 1;

345 
a˘i⁄
 = ",Éxiting";

348 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

349 i‡(
ngx_d´m⁄ized
) {

350 
ngx_nﬂc˚±
 = 1;

351 
a˘i⁄
 = ", stopáccepting connections";

355 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

356 
ngx_ªc⁄figuª
 = 1;

357 
a˘i⁄
 = ",Ñeconfiguring";

360 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

361 
ngx_ª›í
 = 1;

362 
a˘i⁄
 = ",ÑeopeningÜogs";

365 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

366 i‡(
	`gëµid
(Ë> 1 || 
ngx_√w_bö¨y
 > 0) {

375 
a˘i⁄
 = ", ignoring";

376 
ign‹e
 = 1;

380 
ngx_ch™ge_bö¨y
 = 1;

381 
a˘i⁄
 = ", changing binary";

384 
SIGALRM
:

385 
ngx_sigÆrm
 = 1;

388 
SIGIO
:

389 
ngx_sigio
 = 1;

392 
SIGCHLD
:

393 
ngx_ª≠
 = 1;

399 
NGX_PROCESS_WORKER
:

400 
NGX_PROCESS_HELPER
:

401 
signo
) {

403 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

404 i‡(!
ngx_d´m⁄ized
) {

407 
ngx_debug_quô
 = 1;

408 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

409 
ngx_quô
 = 1;

410 
a˘i⁄
 = ", shutting down";

413 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

414 
SIGINT
:

415 
ngx_ãrmö©e
 = 1;

416 
a˘i⁄
 = ",Éxiting";

419 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

420 
ngx_ª›í
 = 1;

421 
a˘i⁄
 = ",ÑeopeningÜogs";

424 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

425 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

426 
SIGIO
:

427 
a˘i⁄
 = ", ignoring";

434 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

435 "sig«»%d (%sËª˚ived%s", 
signo
, 
sig
->
sig«me
, 
a˘i⁄
);

437 i‡(
ign‹e
) {

438 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 0,

444 i‡(
signo
 =
SIGCHLD
) {

445 
	`ngx_¥o˚ss_gë_°©us
();

448 
	`ngx_£t_î∫o
(
îr
);

449 
	}
}

453 
	$ngx_¥o˚ss_gë_°©us
()

455 
°©us
;

456 *
¥o˚ss
;

457 
ngx_pid_t
 
pid
;

458 
ngx_îr_t
 
îr
;

459 
ngx_öt_t
 
i
;

460 
ngx_uöt_t
 
⁄e
;

462 
⁄e
 = 0;

465 
pid
 = 
	`waôpid
(-1, &
°©us
, 
WNOHANG
);

467 i‡(
pid
 == 0) {

471 i‡(
pid
 == -1) {

472 
îr
 = 
ngx_î∫o
;

474 i‡(
îr
 =
NGX_EINTR
) {

478 i‡(
îr
 =
NGX_ECHILD
 && 
⁄e
) {

491 i‡(
îr
 =
NGX_ECHILD
) {

492 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ngx_cy˛e
->
log
, 
îr
,

497 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

503 
⁄e
 = 1;

504 
¥o˚ss
 = "unknownÖrocess";

506 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

507 i‡(
ngx_¥o˚s£s
[
i
].
pid
 ==Öid) {

508 
ngx_¥o˚s£s
[
i
].
°©us
 = status;

509 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

510 
¥o˚ss
 = 
ngx_¥o˚s£s
[
i
].
«me
;

515 i‡(
	`WTERMSIG
(
°©us
)) {

516 #ifde‡
WCOREDUMP


517 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

519 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
),

520 
	`WCOREDUMP
(
°©us
) ? " (core dumped)" : "");

522 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

524 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
));

528 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

530 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

533 i‡(
	`WEXITSTATUS
(
°©us
Ë=2 && 
ngx_¥o˚s£s
[
i
].
ª•awn
) {

534 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

537 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

538 
ngx_¥o˚s£s
[
i
].
ª•awn
 = 0;

541 
	`ngx_u∆ock_muãxes
(
pid
);

543 
	}
}

547 
	$ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
)

549 
ngx_uöt_t
 
i
;

550 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

551 
ngx_li°_∑π_t
 *
∑π
;

552 
ngx_¶ab_poﬁ_t
 *
•
;

559 i‡(
ngx_ac˚±_muãx_±r
) {

560 (Ë
	`ngx_shmtx_f‹˚_u∆ock
(&
ngx_ac˚±_muãx
, 
pid
);

568 
∑π
 = (
ngx_li°_∑π_t
 *Ë&
ngx_cy˛e
->
sh¨ed_mem‹y
.part;

569 
shm_z⁄e
 = 
∑π
->
ñts
;

571 
i
 = 0; ; i++) {

573 i‡(
i
 >
∑π
->
√…s
) {

574 i‡(
∑π
->
√xt
 =
NULL
) {

577 
∑π
 =Ö¨t->
√xt
;

578 
shm_z⁄e
 = 
∑π
->
ñts
;

579 
i
 = 0;

582 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
[
i
].
shm
.
addr
;

584 i‡(
	`ngx_shmtx_f‹˚_u∆ock
(&
•
->
muãx
, 
pid
)) {

585 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

587 &
shm_z⁄e
[
i
].
shm
.
«me
, 
pid
);

590 
	}
}

594 
	$ngx_debug_poöt
()

596 
ngx_c‹e_c⁄f_t
 *
ccf
;

598 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

599 
ngx_c‹e_moduÀ
);

601 
ccf
->
debug_poöts
) {

603 
NGX_DEBUG_POINTS_STOP
:

604 
	`øi£
(
SIGSTOP
);

607 
NGX_DEBUG_POINTS_ABORT
:

608 
	`ngx_ab‹t
();

610 
	}
}

613 
ngx_öt_t


614 
	$ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
«me
, 
ngx_öt_t
 
pid
)

616 
ngx_sig«l_t
 *
sig
;

618 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

619 i‡(
	`ngx_°rcmp
(
«me
, 
sig
->name) == 0) {

620 i‡(
	`kûl
(
pid
, 
sig
->
signo
) != -1) {

624 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

625 "kûl(%P, %dËÁûed", 
pid
, 
sig
->
signo
);

630 
	}
}

	@src/os/unix/ngx_process.h

8 #i‚de‡
_NGX_PROCESS_H_INCLUDED_


9 
	#_NGX_PROCESS_H_INCLUDED_


	)

12 
	~<ngx_£èfföôy.h
>

13 
	~<ngx_£çro˘ôÀ.h
>

16 
pid_t
 
	tngx_pid_t
;

18 
	#NGX_INVALID_PID
 -1

	)

20 (*
	tngx_•awn_¥oc_±
Ë(
	tngx_cy˛e_t
 *
	tcy˛e
, *
	td©a
);

23 
ngx_pid_t
 
pid
;

24 
°©us
;

25 
ngx_sockë_t
 
ch™√l
[2];

27 
ngx_•awn_¥oc_±
 
¥oc
;

28 *
d©a
;

29 *
«me
;

31 
ª•awn
:1;

32 
ju°_•awn
:1;

33 
dëached
:1;

34 
exôög
:1;

35 
exôed
:1;

36 } 
	tngx_¥o˚ss_t
;

40 *
∑th
;

41 *
«me
;

42 *c⁄° *
¨gv
;

43 *c⁄° *
ívp
;

44 } 
	tngx_exec_˘x_t
;

47 
	#NGX_MAX_PROCESSES
 1024

	)

49 
	#NGX_PROCESS_NORESPAWN
 -1

	)

50 
	#NGX_PROCESS_JUST_SPAWN
 -2

	)

51 
	#NGX_PROCESS_RESPAWN
 -3

	)

52 
	#NGX_PROCESS_JUST_RESPAWN
 -4

	)

53 
	#NGX_PROCESS_DETACHED
 -5

	)

56 
	#ngx_gëpid
 
gëpid


	)

58 #i‚de‡
ngx_log_pid


59 
	#ngx_log_pid
 
ngx_pid


	)

63 
ngx_pid_t
 
	`ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
,

64 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
, *
«me
, 
ngx_öt_t
 
ª•awn
);

65 
ngx_pid_t
 
	`ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
	`ngx_öô_sig«ls
(
ngx_log_t
 *
log
);

67 
	`ngx_debug_poöt
();

70 #i‡(
NGX_HAVE_SCHED_YIELD
)

71 
	#ngx_sched_yõld
(Ë
	`sched_yõld
()

	)

73 
	#ngx_sched_yõld
(Ë
	`u¶ìp
(1)

	)

77 
ngx_¨gc
;

78 **
ngx_¨gv
;

79 **
ngx_os_¨gv
;

81 
ngx_pid_t
 
ngx_pid
;

82 
ngx_sockë_t
 
ngx_ch™√l
;

83 
ngx_öt_t
 
ngx_¥o˚ss_¶Ÿ
;

84 
ngx_öt_t
 
ngx_œ°_¥o˚ss
;

85 
ngx_¥o˚ss_t
 
ngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

	@src/os/unix/ngx_process_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

14 
ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,

15 
ngx_öt_t
 
ty≥
);

16 
ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
,

17 
ngx_uöt_t
 
ª•awn
);

18 
ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
);

19 
ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
);

20 
ngx_uöt_t
 
ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

23 
ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
);

24 
ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

25 
ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

27 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

28 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

31 
ngx_uöt_t
 
	gngx_¥o˚ss
;

32 
ngx_pid_t
 
	gngx_pid
;

34 
sig_©omic_t
 
	gngx_ª≠
;

35 
sig_©omic_t
 
	gngx_sigio
;

36 
sig_©omic_t
 
	gngx_sigÆrm
;

37 
sig_©omic_t
 
	gngx_ãrmö©e
;

38 
sig_©omic_t
 
	gngx_quô
;

39 
sig_©omic_t
 
	gngx_debug_quô
;

40 
ngx_uöt_t
 
	gngx_exôög
;

41 
sig_©omic_t
 
	gngx_ªc⁄figuª
;

42 
sig_©omic_t
 
	gngx_ª›í
;

44 
sig_©omic_t
 
	gngx_ch™ge_bö¨y
;

45 
ngx_pid_t
 
	gngx_√w_bö¨y
;

46 
ngx_uöt_t
 
	gngx_öhîôed
;

47 
ngx_uöt_t
 
	gngx_d´m⁄ized
;

49 
sig_©omic_t
 
	gngx_nﬂc˚±
;

50 
ngx_uöt_t
 
	gngx_nﬂc˚±ög
;

51 
ngx_uöt_t
 
	gngx_ª°¨t
;

54 
u_ch¨
 
	gma°î_¥o˚ss
[] = "masterÖrocess";

57 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_m™agî_˘x
 = {

58 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
, "cache managerÖrocess", 0

61 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_lﬂdî_˘x
 = {

62 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
, "cacheÜoaderÖrocess", 60000

66 
ngx_cy˛e_t
 
	gngx_exô_cy˛e
;

67 
ngx_log_t
 
	gngx_exô_log
;

68 
ngx_›í_fûe_t
 
	gngx_exô_log_fûe
;

72 
	$ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

74 *
tôÀ
;

75 
u_ch¨
 *
p
;

76 
size_t
 
size
;

77 
ngx_öt_t
 
i
;

78 
ngx_uöt_t
 
n
, 
sigio
;

79 
sig£t_t
 
£t
;

80 
ôimîvÆ
 
ôv
;

81 
ngx_uöt_t
 
live
;

82 
ngx_m£c_t
 
dñay
;

83 
ngx_li°íög_t
 *
ls
;

84 
ngx_c‹e_c⁄f_t
 *
ccf
;

86 
	`sigem±y£t
(&
£t
);

87 
	`sigadd£t
(&
£t
, 
SIGCHLD
);

88 
	`sigadd£t
(&
£t
, 
SIGALRM
);

89 
	`sigadd£t
(&
£t
, 
SIGIO
);

90 
	`sigadd£t
(&
£t
, 
SIGINT
);

91 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

92 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

93 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
));

94 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

95 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

96 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

98 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

99 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

103 
	`sigem±y£t
(&
£t
);

106 
size
 = (
ma°î_¥o˚ss
);

108 
i
 = 0; i < 
ngx_¨gc
; i++) {

109 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

112 
tôÀ
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
size
);

113 i‡(
tôÀ
 =
NULL
) {

115 
	`exô
(2);

118 
p
 = 
	`ngx_˝ymem
(
tôÀ
, 
ma°î_¥o˚ss
, (master_process) - 1);

119 
i
 = 0; i < 
ngx_¨gc
; i++) {

120 *
p
++ = ' ';

121 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
], 
size
);

124 
	`ngx_£çro˘ôÀ
(
tôÀ
);

127 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

129 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

130 
NGX_PROCESS_RESPAWN
);

131 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

133 
ngx_√w_bö¨y
 = 0;

134 
dñay
 = 0;

135 
sigio
 = 0;

136 
live
 = 1;

139 i‡(
dñay
) {

140 i‡(
ngx_sigÆrm
) {

141 
sigio
 = 0;

142 
dñay
 *= 2;

143 
ngx_sigÆrm
 = 0;

146 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

147 "ãrmö©i⁄ cy˛e: %d", 
dñay
);

149 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 0;

150 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = 0;

151 
ôv
.
ô_vÆue
.
tv_£c
 = 
dñay
 / 1000;

152 
ôv
.
ô_vÆue
.
tv_u£c
 = (
dñay
 % 1000 ) * 1000;

154 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

160 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "sigsuspend");

162 
	`sigsu•íd
(&
£t
);

164 
	`ngx_time_upd©e
();

166 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

167 "wakêup, sigiÿ%i", 
sigio
);

169 i‡(
ngx_ª≠
) {

170 
ngx_ª≠
 = 0;

171 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "reap children");

173 
live
 = 
	`ngx_ª≠_chûdªn
(
cy˛e
);

176 i‡(!
live
 && (
ngx_ãrmö©e
 || 
ngx_quô
)) {

177 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

180 i‡(
ngx_ãrmö©e
) {

181 i‡(
dñay
 == 0) {

182 
dñay
 = 50;

185 i‡(
sigio
) {

186 
sigio
--;

190 
sigio
 = 
ccf
->
w‹kî_¥o˚s£s
 + 2 ;

192 i‡(
dñay
 > 1000) {

193 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
, 
SIGKILL
);

195 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

196 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

202 i‡(
ngx_quô
) {

203 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

204 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

206 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

207 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

208 i‡(
	`ngx_˛o£_sockë
(
ls
[
n
].
fd
) == -1) {

209 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

210 
ngx_˛o£_sockë_n
 " %V failed",

211 &
ls
[
n
].
addr_ãxt
);

214 
cy˛e
->
li°íög
.
√…s
 = 0;

219 i‡(
ngx_ªc⁄figuª
) {

220 
ngx_ªc⁄figuª
 = 0;

222 i‡(
ngx_√w_bö¨y
) {

223 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

224 
NGX_PROCESS_RESPAWN
);

225 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

226 
ngx_nﬂc˚±ög
 = 0;

231 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

233 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

234 i‡(
cy˛e
 =
NULL
) {

235 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

239 
ngx_cy˛e
 = 
cy˛e
;

240 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

241 
ngx_c‹e_moduÀ
);

242 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

243 
NGX_PROCESS_JUST_RESPAWN
);

244 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 1);

247 
	`ngx_m¶ìp
(100);

249 
live
 = 1;

250 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

251 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

254 i‡(
ngx_ª°¨t
) {

255 
ngx_ª°¨t
 = 0;

256 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

257 
NGX_PROCESS_RESPAWN
);

258 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

259 
live
 = 1;

262 i‡(
ngx_ª›í
) {

263 
ngx_ª›í
 = 0;

264 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

265 
	`ngx_ª›í_fûes
(
cy˛e
, 
ccf
->
u£r
);

266 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

267 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

270 i‡(
ngx_ch™ge_bö¨y
) {

271 
ngx_ch™ge_bö¨y
 = 0;

272 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "changing binary");

273 
ngx_√w_bö¨y
 = 
	`ngx_exec_√w_bö¨y
(
cy˛e
, 
ngx_¨gv
);

276 i‡(
ngx_nﬂc˚±
) {

277 
ngx_nﬂc˚±
 = 0;

278 
ngx_nﬂc˚±ög
 = 1;

279 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

280 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

283 
	}
}

287 
	$ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

289 
ngx_uöt_t
 
i
;

291 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

293 
	`exô
(2);

296 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

297 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

298 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

300 
	`exô
(2);

306 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

308 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

310 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

312 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

313 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

314 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

318 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

321 i‡(
ngx_ªc⁄figuª
) {

322 
ngx_ªc⁄figuª
 = 0;

323 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

325 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

326 i‡(
cy˛e
 =
NULL
) {

327 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

331 
ngx_cy˛e
 = 
cy˛e
;

334 i‡(
ngx_ª›í
) {

335 
ngx_ª›í
 = 0;

336 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

337 
	`ngx_ª›í_fûes
(
cy˛e
, (
ngx_uid_t
) -1);

340 
	}
}

344 
	$ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,Çgx_öt_à
ty≥
)

346 
ngx_öt_t
 
i
;

347 
ngx_ch™√l_t
 
ch
;

349 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "start workerÖrocesses");

351 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

353 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

355 
i
 = 0; i < 
n
; i++) {

357 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_w‹kî_¥o˚ss_cy˛e
,

358 (*Ë(
öçå_t
Ë
i
, "w‹kîÖro˚ss", 
ty≥
);

360 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

361 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

362 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

364 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

366 
	}
}

370 
	$ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
ª•awn
)

372 
ngx_uöt_t
 
i
, 
m™agî
, 
lﬂdî
;

373 
ngx_∑th_t
 **
∑th
;

374 
ngx_ch™√l_t
 
ch
;

376 
m™agî
 = 0;

377 
lﬂdî
 = 0;

379 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

380 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

382 i‡(
∑th
[
i
]->
m™agî
) {

383 
m™agî
 = 1;

386 i‡(
∑th
[
i
]->
lﬂdî
) {

387 
lﬂdî
 = 1;

391 i‡(
m™agî
 == 0) {

395 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

396 &
ngx_ˇche_m™agî_˘x
, "cache managerÖrocess",

397 
ª•awn
 ? 
NGX_PROCESS_JUST_RESPAWN
 : 
NGX_PROCESS_RESPAWN
);

399 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

401 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

402 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

403 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

404 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

406 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

408 i‡(
lﬂdî
 == 0) {

412 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

413 &
ngx_ˇche_lﬂdî_˘x
, "cacheÜoaderÖrocess",

414 
ª•awn
 ? 
NGX_PROCESS_JUST_SPAWN
 : 
NGX_PROCESS_NORESPAWN
);

416 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

417 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

418 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

419 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

421 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

422 
	}
}

426 
	$ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
)

428 
ngx_öt_t
 
i
;

430 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

432 i‡(
i
 =
ngx_¥o˚ss_¶Ÿ


433 || 
ngx_¥o˚s£s
[
i
].
pid
 == -1

434 || 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] == -1)

439 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

441 
ch
->
¶Ÿ
, ch->
pid
, ch->
fd
,

442 
i
, 
ngx_¥o˚s£s
[i].
pid
,

443 
ngx_¥o˚s£s
[
i
].
ch™√l
[0]);

447 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

448 
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

450 
	}
}

454 
	$ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
)

456 
ngx_öt_t
 
i
;

457 
ngx_îr_t
 
îr
;

458 
ngx_ch™√l_t
 
ch
;

460 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

462 #i‡(
NGX_BROKEN_SCM_RIGHTS
)

464 
ch
.
comm™d
 = 0;

468 
signo
) {

470 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

471 
ch
.
comm™d
 = 
NGX_CMD_QUIT
;

474 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

475 
ch
.
comm™d
 = 
NGX_CMD_TERMINATE
;

478 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

479 
ch
.
comm™d
 = 
NGX_CMD_REOPEN
;

483 
ch
.
comm™d
 = 0;

488 
ch
.
fd
 = -1;

491 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

493 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

495 
i
,

496 
ngx_¥o˚s£s
[
i
].
pid
,

497 
ngx_¥o˚s£s
[
i
].
exôög
,

498 
ngx_¥o˚s£s
[
i
].
exôed
,

499 
ngx_¥o˚s£s
[
i
].
dëached
,

500 
ngx_¥o˚s£s
[
i
].
ª•awn
,

501 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

503 i‡(
ngx_¥o˚s£s
[
i
].
dëached
 ||Çgx_¥o˚s£s[i].
pid
 == -1) {

507 i‡(
ngx_¥o˚s£s
[
i
].
ju°_•awn
) {

508 
ngx_¥o˚s£s
[
i
].
ju°_•awn
 = 0;

512 i‡(
ngx_¥o˚s£s
[
i
].
exôög


513 && 
signo
 =
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
))

518 i‡(
ch
.
comm™d
) {

519 i‡(
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

520 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
)

521 =
NGX_OK
)

523 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

524 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

531 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

532 "kû»(%P, %d)", 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

534 i‡(
	`kûl
(
ngx_¥o˚s£s
[
i
].
pid
, 
signo
) == -1) {

535 
îr
 = 
ngx_î∫o
;

536 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

537 "kûl(%P, %dËÁûed", 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

539 i‡(
îr
 =
NGX_ESRCH
) {

540 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

541 
ngx_¥o˚s£s
[
i
].
exôög
 = 0;

542 
ngx_ª≠
 = 1;

548 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

549 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

552 
	}
}

555 
ngx_uöt_t


556 
	$ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
)

558 
ngx_öt_t
 
i
, 
n
;

559 
ngx_uöt_t
 
live
;

560 
ngx_ch™√l_t
 
ch
;

561 
ngx_c‹e_c⁄f_t
 *
ccf
;

563 
	`ngx_memzîo
(&
ch
, (
ngx_ch™√l_t
));

565 
ch
.
comm™d
 = 
NGX_CMD_CLOSE_CHANNEL
;

566 
ch
.
fd
 = -1;

568 
live
 = 0;

569 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

571 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

573 
i
,

574 
ngx_¥o˚s£s
[
i
].
pid
,

575 
ngx_¥o˚s£s
[
i
].
exôög
,

576 
ngx_¥o˚s£s
[
i
].
exôed
,

577 
ngx_¥o˚s£s
[
i
].
dëached
,

578 
ngx_¥o˚s£s
[
i
].
ª•awn
,

579 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

581 i‡(
ngx_¥o˚s£s
[
i
].
pid
 == -1) {

585 i‡(
ngx_¥o˚s£s
[
i
].
exôed
) {

587 i‡(!
ngx_¥o˚s£s
[
i
].
dëached
) {

588 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
, 
cy˛e
->
log
);

590 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] = -1;

591 
ngx_¥o˚s£s
[
i
].
ch™√l
[1] = -1;

593 
ch
.
pid
 = 
ngx_¥o˚s£s
[
i
].pid;

594 
ch
.
¶Ÿ
 = 
i
;

596 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

597 i‡(
ngx_¥o˚s£s
[
n
].
exôed


598 || 
ngx_¥o˚s£s
[
n
].
pid
 == -1

599 || 
ngx_¥o˚s£s
[
n
].
ch™√l
[0] == -1)

604 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

606 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[
n
].pid);

610 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
n
].
ch™√l
[0],

611 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

615 i‡(
ngx_¥o˚s£s
[
i
].
ª•awn


616 && !
ngx_¥o˚s£s
[
i
].
exôög


617 && !
ngx_ãrmö©e


618 && !
ngx_quô
)

620 i‡(
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_¥o˚s£s
[
i
].
¥oc
,

621 
ngx_¥o˚s£s
[
i
].
d©a
,

622 
ngx_¥o˚s£s
[
i
].
«me
, i)

623 =
NGX_INVALID_PID
)

625 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

627 
ngx_¥o˚s£s
[
i
].
«me
);

632 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

633 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

634 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

635 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

637 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

639 
live
 = 1;

644 i‡(
ngx_¥o˚s£s
[
i
].
pid
 =
ngx_√w_bö¨y
) {

646 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

647 
ngx_c‹e_moduÀ
);

649 i‡(
	`ngx_ª«me_fûe
((*Ë
ccf
->
ﬁdpid
.
d©a
,

650 (*Ë
ccf
->
pid
.
d©a
)

651 =
NGX_FILE_ERROR
)

653 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

654 
ngx_ª«me_fûe_n
 " %s backÅo %s failed "

656 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
ngx_¨gv
[0]);

659 
ngx_√w_bö¨y
 = 0;

660 i‡(
ngx_nﬂc˚±ög
) {

661 
ngx_ª°¨t
 = 1;

662 
ngx_nﬂc˚±ög
 = 0;

666 i‡(
i
 =
ngx_œ°_¥o˚ss
 - 1) {

667 
ngx_œ°_¥o˚ss
--;

670 
ngx_¥o˚s£s
[
i
].
pid
 = -1;

673 } i‡(
ngx_¥o˚s£s
[
i
].
exôög
 || !ngx_¥o˚s£s[i].
dëached
) {

674 
live
 = 1;

678  
live
;

679 
	}
}

683 
	$ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

685 
ngx_uöt_t
 
i
;

687 
	`ngx_dñëe_pidfûe
(
cy˛e
);

689 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exit");

691 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

692 i‡(
ngx_moduÀs
[
i
]->
exô_ma°î
) {

693 
ngx_moduÀs
[
i
]->
	`exô_ma°î
(
cy˛e
);

697 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

707 
ngx_exô_log
 = *
	`ngx_log_gë_fûe_log
(
ngx_cy˛e
->
log
);

709 
ngx_exô_log_fûe
.
fd
 = 
ngx_exô_log
.
fûe
->fd;

710 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

711 
ngx_exô_log
.
√xt
 = 
NULL
;

712 
ngx_exô_log
.
wrôî
 = 
NULL
;

714 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

715 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

716 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

717 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

719 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

721 
	`exô
(0);

722 
	}
}

726 
	$ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

728 
ngx_öt_t
 
w‹kî
 = (
öçå_t
Ë
d©a
;

730 
ngx_uöt_t
 
i
;

731 
ngx_c⁄√˘i⁄_t
 *
c
;

733 
ngx_¥o˚ss
 = 
NGX_PROCESS_WORKER
;

735 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, 
w‹kî
);

737 
	`ngx_£çro˘ôÀ
("workerÖrocess");

741 i‡(
ngx_exôög
) {

743 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

745 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

749 i‡(
c
[
i
].
fd
 !-1 && c[i].
idÀ
) {

750 
c
[
i
].
˛o£
 = 1;

751 
c
[
i
].
ªad
->
	`h™dÀr
(c[i].read);

755 
	`ngx_evít_ˇn˚l_timîs
();

757 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =ngx_evít_timî_rbåì.
£¡öñ
)

759 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

761 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

765 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

767 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

769 i‡(
ngx_ãrmö©e
) {

770 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

772 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

775 i‡(
ngx_quô
) {

776 
ngx_quô
 = 0;

777 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

779 
	`ngx_£çro˘ôÀ
("workerÖrocess is shutting down");

781 i‡(!
ngx_exôög
) {

782 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

783 
ngx_exôög
 = 1;

787 i‡(
ngx_ª›í
) {

788 
ngx_ª›í
 = 0;

789 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

790 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

793 
	}
}

797 
	$ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
)

799 
sig£t_t
 
£t
;

800 
uöt64_t
 
˝u_afföôy
;

801 
ngx_öt_t
 
n
;

802 
ngx_uöt_t
 
i
;

803 
æimô
 
æmt
;

804 
ngx_c‹e_c⁄f_t
 *
ccf
;

805 
ngx_li°íög_t
 *
ls
;

807 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

809 
	`exô
(2);

812 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

814 i‡(
w‹kî
 >0 && 
ccf
->
¥i‹ôy
 != 0) {

815 i‡(
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 
ccf
->
¥i‹ôy
) == -1) {

816 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

817 "£çri‹ôy(%dËÁûed", 
ccf
->
¥i‹ôy
);

821 i‡(
ccf
->
æimô_nofûe
 !
NGX_CONF_UNSET
) {

822 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

823 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

825 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

826 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

828 
ccf
->
æimô_nofûe
);

832 i‡(
ccf
->
æimô_c‹e
 !
NGX_CONF_UNSET
) {

833 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

834 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

836 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
æmt
) == -1) {

837 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

839 
ccf
->
æimô_c‹e
);

843 #ifde‡
RLIMIT_SIGPENDING


844 i‡(
ccf
->
æimô_sig≥ndög
 !
NGX_CONF_UNSET
) {

845 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

846 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

848 i‡(
	`£ålimô
(
RLIMIT_SIGPENDING
, &
æmt
) == -1) {

849 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

851 
ccf
->
æimô_sig≥ndög
);

856 i‡(
	`gëeuid
() == 0) {

857 i‡(
	`£tgid
(
ccf
->
group
) == -1) {

858 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

859 "£tgid(%dËÁûed", 
ccf
->
group
);

861 
	`exô
(2);

864 i‡(
	`öôgroups
(
ccf
->
u£∫ame
, ccf->
group
) == -1) {

865 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

867 
ccf
->
u£∫ame
, ccf->
group
);

870 i‡(
	`£tuid
(
ccf
->
u£r
) == -1) {

871 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

872 "£tuid(%dËÁûed", 
ccf
->
u£r
);

874 
	`exô
(2);

878 i‡(
w‹kî
 >= 0) {

879 
˝u_afföôy
 = 
	`ngx_gë_˝u_afföôy
(
w‹kî
);

881 i‡(
˝u_afföôy
) {

882 
	`ngx_£èfföôy
(
˝u_afföôy
, 
cy˛e
->
log
);

886 #i‡(
NGX_HAVE_PR_SET_DUMPABLE
)

890 i‡(
	`¥˘l
(
PR_SET_DUMPABLE
, 1, 0, 0, 0) == -1) {

891 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

897 i‡(
ccf
->
w‹kög_dúe˘‹y
.
Àn
) {

898 i‡(
	`chdú
((*Ë
ccf
->
w‹kög_dúe˘‹y
.
d©a
) == -1) {

899 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

900 "chdú(\"%s\"ËÁûed", 
ccf
->
w‹kög_dúe˘‹y
.
d©a
);

902 
	`exô
(2);

906 
	`sigem±y£t
(&
£t
);

908 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
£t
, 
NULL
) == -1) {

909 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

913 
	`§™dom
((
ngx_pid
 << 16Ë^ 
	`ngx_time
());

919 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

920 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

921 
ls
[
i
].
¥evious
 = 
NULL
;

924 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

925 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

926 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

928 
	`exô
(2);

933 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

935 i‡(
ngx_¥o˚s£s
[
n
].
pid
 == -1) {

939 i‡(
n
 =
ngx_¥o˚ss_¶Ÿ
) {

943 i‡(
ngx_¥o˚s£s
[
n
].
ch™√l
[1] == -1) {

947 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
n
].
ch™√l
[1]) == -1) {

948 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

953 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0]) == -1) {

954 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

959 
ngx_œ°_¥o˚ss
 = 0;

962 i‡(
	`ngx_add_ch™√l_evít
(
cy˛e
, 
ngx_ch™√l
, 
NGX_READ_EVENT
,

963 
ngx_ch™√l_h™dÀr
)

964 =
NGX_ERROR
)

967 
	`exô
(2);

969 
	}
}

973 
	$ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

975 
ngx_uöt_t
 
i
;

976 
ngx_c⁄√˘i⁄_t
 *
c
;

978 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

979 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

980 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

984 i‡(
ngx_exôög
) {

985 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

986 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

987 i‡(
c
[
i
].
fd
 != -1

988 && 
c
[
i
].
ªad


989 && !
c
[
i
].
ªad
->
ac˚±


990 && !
c
[
i
].
ªad
->
ch™√l


991 && !
c
[
i
].
ªad
->
ªsﬁvî
)

993 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

995 
c
[
i
].
numbî
, c[i].
fd
, i);

996 
ngx_debug_quô
 = 1;

1000 i‡(
ngx_debug_quô
) {

1001 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "aborting");

1002 
	`ngx_debug_poöt
();

1013 
ngx_exô_log
 = *
	`ngx_log_gë_fûe_log
(
ngx_cy˛e
->
log
);

1015 
ngx_exô_log_fûe
.
fd
 = 
ngx_exô_log
.
fûe
->fd;

1016 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

1017 
ngx_exô_log
.
√xt
 = 
NULL
;

1018 
ngx_exô_log
.
wrôî
 = 
NULL
;

1020 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

1021 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

1022 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

1023 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

1025 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

1027 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0, "exit");

1029 
	`exô
(0);

1030 
	}
}

1034 
	$ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
)

1036 
ngx_öt_t
 
n
;

1037 
ngx_ch™√l_t
 
ch
;

1038 
ngx_c⁄√˘i⁄_t
 *
c
;

1040 i‡(
ev
->
timedout
) {

1041 
ev
->
timedout
 = 0;

1045 
c
 = 
ev
->
d©a
;

1047 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "channel handler");

1051 
n
 = 
	`ngx_ªad_ch™√l
(
c
->
fd
, &
ch
, (
ngx_ch™√l_t
), 
ev
->
log
);

1053 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "ch™√l: %i", 
n
);

1055 i‡(
n
 =
NGX_ERROR
) {

1057 i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

1058 
	`ngx_dñ_c⁄n
(
c
, 0);

1061 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

1065 i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

1066 i‡(
	`ngx_add_evít
(
ev
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

1071 i‡(
n
 =
NGX_AGAIN
) {

1075 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1076 "ch™√»comm™d: %d", 
ch
.
comm™d
);

1078 
ch
.
comm™d
) {

1080 
NGX_CMD_QUIT
:

1081 
ngx_quô
 = 1;

1084 
NGX_CMD_TERMINATE
:

1085 
ngx_ãrmö©e
 = 1;

1088 
NGX_CMD_REOPEN
:

1089 
ngx_ª›í
 = 1;

1092 
NGX_CMD_OPEN_CHANNEL
:

1094 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1096 
ch
.
¶Ÿ
, ch.
pid
, ch.
fd
);

1098 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
pid
 = ch.pid;

1099 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = ch.
fd
;

1102 
NGX_CMD_CLOSE_CHANNEL
:

1104 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1106 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[ch.slot].pid,

1107 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]);

1109 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]) == -1) {

1110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

1114 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = -1;

1118 
	}
}

1122 
	$ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

1124 
ngx_ˇche_m™agî_˘x_t
 *
˘x
 = 
d©a
;

1126 *
idít
[4];

1127 
ngx_evít_t
 
ev
;

1133 
ngx_¥o˚ss
 = 
NGX_PROCESS_HELPER
;

1135 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

1138 
cy˛e
->
c⁄√˘i⁄_n
 = 512;

1140 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, -1);

1142 
	`ngx_memzîo
(&
ev
, (
ngx_evít_t
));

1143 
ev
.
h™dÀr
 = 
˘x
->handler;

1144 
ev
.
d©a
 = 
idít
;

1145 
ev
.
log
 = 
cy˛e
->log;

1146 
idít
[3] = (*) -1;

1148 
ngx_u£_ac˚±_muãx
 = 0;

1150 
	`ngx_£çro˘ôÀ
(
˘x
->
«me
);

1152 
	`ngx_add_timî
(&
ev
, 
˘x
->
dñay
);

1156 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1157 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

1158 
	`exô
(0);

1161 i‡(
ngx_ª›í
) {

1162 
ngx_ª›í
 = 0;

1163 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

1164 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

1167 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

1169 
	}
}

1173 
	$ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1175 
time_t
 
√xt
, 
n
;

1176 
ngx_uöt_t
 
i
;

1177 
ngx_∑th_t
 **
∑th
;

1179 
√xt
 = 60 * 60;

1181 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

1182 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

1184 i‡(
∑th
[
i
]->
m™agî
) {

1185 
n
 = 
∑th
[
i
]->
	`m™agî
’©h[i]->
d©a
);

1187 
√xt
 = (
n
 <=Çext) ?Ç :Çext;

1189 
	`ngx_time_upd©e
();

1193 i‡(
√xt
 == 0) {

1194 
√xt
 = 1;

1197 
	`ngx_add_timî
(
ev
, 
√xt
 * 1000);

1198 
	}
}

1202 
	$ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1204 
ngx_uöt_t
 
i
;

1205 
ngx_∑th_t
 **
∑th
;

1206 
ngx_cy˛e_t
 *
cy˛e
;

1208 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1210 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

1211 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

1213 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1217 i‡(
∑th
[
i
]->
lﬂdî
) {

1218 
∑th
[
i
]->
	`lﬂdî
’©h[i]->
d©a
);

1219 
	`ngx_time_upd©e
();

1223 
	`exô
(0);

1224 
	}
}

	@src/os/unix/ngx_process_cycle.h

8 #i‚de‡
_NGX_PROCESS_CYCLE_H_INCLUDED_


9 
	#_NGX_PROCESS_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_CMD_OPEN_CHANNEL
 1

	)

17 
	#NGX_CMD_CLOSE_CHANNEL
 2

	)

18 
	#NGX_CMD_QUIT
 3

	)

19 
	#NGX_CMD_TERMINATE
 4

	)

20 
	#NGX_CMD_REOPEN
 5

	)

23 
	#NGX_PROCESS_SINGLE
 0

	)

24 
	#NGX_PROCESS_MASTER
 1

	)

25 
	#NGX_PROCESS_SIGNALLER
 2

	)

26 
	#NGX_PROCESS_WORKER
 3

	)

27 
	#NGX_PROCESS_HELPER
 4

	)

31 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

32 *
	m«me
;

33 
ngx_m£c_t
 
	mdñay
;

34 } 
	tngx_ˇche_m™agî_˘x_t
;

37 
ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

41 
ngx_uöt_t
 
ngx_¥o˚ss
;

42 
ngx_pid_t
 
ngx_pid
;

43 
ngx_pid_t
 
ngx_√w_bö¨y
;

44 
ngx_uöt_t
 
ngx_öhîôed
;

45 
ngx_uöt_t
 
ngx_d´m⁄ized
;

46 
ngx_uöt_t
 
ngx_exôög
;

48 
sig_©omic_t
 
ngx_ª≠
;

49 
sig_©omic_t
 
ngx_sigio
;

50 
sig_©omic_t
 
ngx_sigÆrm
;

51 
sig_©omic_t
 
ngx_quô
;

52 
sig_©omic_t
 
ngx_debug_quô
;

53 
sig_©omic_t
 
ngx_ãrmö©e
;

54 
sig_©omic_t
 
ngx_nﬂc˚±
;

55 
sig_©omic_t
 
ngx_ªc⁄figuª
;

56 
sig_©omic_t
 
ngx_ª›í
;

57 
sig_©omic_t
 
ngx_ch™ge_bö¨y
;

	@src/os/unix/ngx_readv_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
, 
off_t
 
limô
)

16 
u_ch¨
 *
¥ev
;

17 
ssize_t
 
n
, 
size
;

18 
ngx_îr_t
 
îr
;

19 
ngx_¨øy_t
 
vec
;

20 
ngx_evít_t
 *
ªv
;

21 
iovec
 *
iov
, 
iovs
[
NGX_IOVS_PREALLOCATE
];

23 
ªv
 = 
c
->
ªad
;

25 #i‡(
NGX_HAVE_KQUEUE
)

27 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

28 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

30 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

32 i‡(
ªv
->
avaûabÀ
 == 0) {

33 i‡(
ªv
->
≥ndög_eof
) {

34 
ªv
->
ªady
 = 0;

35 
ªv
->
eof
 = 1;

37 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

40 i‡(
ªv
->
kq_î∫o
) {

41 
ªv
->
îr‹
 = 1;

42 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

43  
NGX_ERROR
;

49  
NGX_AGAIN
;

56 
¥ev
 = 
NULL
;

57 
iov
 = 
NULL
;

58 
size
 = 0;

60 
vec
.
ñts
 = 
iovs
;

61 
vec
.
√…s
 = 0;

62 
vec
.
size
 = (
iovec
);

63 
vec
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

64 
vec
.
poﬁ
 = 
c
->pool;

68 
chaö
) {

69 
n
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

71 i‡(
limô
) {

72 i‡(
size
 >
limô
) {

76 i‡(
size
 + 
n
 > 
limô
) {

77 
n
 = (
ssize_t
Ë(
limô
 - 
size
);

81 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

82 
iov
->
iov_Àn
 +
n
;

85 i‡(
vec
.
√…s
 >
IOV_MAX
) {

89 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

90 i‡(
iov
 =
NULL
) {

91  
NGX_ERROR
;

94 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

95 
iov
->
iov_Àn
 = 
n
;

98 
size
 +
n
;

99 
¥ev
 = 
chaö
->
buf
->
íd
;

100 
chaö
 = chaö->
√xt
;

103 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

104 "ªadv: %d,Üa°:%d", 
vec
.
√…s
, 
iov
->
iov_Àn
);

107 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

109 i‡(
n
 >= 0) {

111 #i‡(
NGX_HAVE_KQUEUE
)

113 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

114 
ªv
->
avaûabÀ
 -
n
;

121 i‡(
ªv
->
avaûabÀ
 <= 0) {

122 i‡(!
ªv
->
≥ndög_eof
) {

123 
ªv
->
ªady
 = 0;

126 i‡(
ªv
->
avaûabÀ
 < 0) {

127 
ªv
->
avaûabÀ
 = 0;

131 i‡(
n
 == 0) {

139 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

141 "%dávaûabÀ byãs", 
ªv
->
avaûabÀ
);

144 
ªv
->
ªady
 = 0;

145 
ªv
->
eof
 = 1;

146 
ªv
->
avaûabÀ
 = 0;

149  
n
;

154 i‡(
n
 < 
size
 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
)) {

155 
ªv
->
ªady
 = 0;

158 i‡(
n
 == 0) {

159 
ªv
->
eof
 = 1;

162  
n
;

165 
îr
 = 
ngx_sockë_î∫o
;

167 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

168 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

170 
n
 = 
NGX_AGAIN
;

173 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

177 } 
îr
 =
NGX_EINTR
);

179 
ªv
->
ªady
 = 0;

181 i‡(
n
 =
NGX_ERROR
) {

182 
c
->
ªad
->
îr‹
 = 1;

185  
n
;

186 
	}
}

	@src/os/unix/ngx_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

25 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

27 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

29 i‡(
ªv
->
avaûabÀ
 == 0) {

30 i‡(
ªv
->
≥ndög_eof
) {

31 
ªv
->
ªady
 = 0;

32 
ªv
->
eof
 = 1;

34 i‡(
ªv
->
kq_î∫o
) {

35 
ªv
->
îr‹
 = 1;

36 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

38  
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ªv
->
kq_î∫o
,

45 
ªv
->
ªady
 = 0;

46  
NGX_AGAIN
;

52 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

54 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

57 i‡(
n
 >= 0) {

58 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

59 
ªv
->
avaûabÀ
 -
n
;

66 i‡(
ªv
->
avaûabÀ
 <= 0) {

67 i‡(!
ªv
->
≥ndög_eof
) {

68 
ªv
->
ªady
 = 0;

71 i‡(
ªv
->
avaûabÀ
 < 0) {

72 
ªv
->
avaûabÀ
 = 0;

76 i‡(
n
 == 0) {

83 
ªv
->
ªady
 = 0;

84 
ªv
->
eof
 = 1;

85 
ªv
->
avaûabÀ
 = 0;

88  
n
;

91 i‡((
size_t
Ë
n
 < 
size


92 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
))

94 
ªv
->
ªady
 = 0;

97 i‡(
n
 == 0) {

98 
ªv
->
eof
 = 1;

101  
n
;

104 
îr
 = 
ngx_sockë_î∫o
;

106 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

107 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

109 
n
 = 
NGX_AGAIN
;

112 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

116 } 
îr
 =
NGX_EINTR
);

118 
ªv
->
ªady
 = 0;

120 i‡(
n
 =
NGX_ERROR
) {

121 
ªv
->
îr‹
 = 1;

124  
n
;

125 
	}
}

129 
ssize_t


130 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

132 
ssize_t
 
n
;

133 
ngx_îr_t
 
îr
;

134 
ngx_evít_t
 *
ªv
;

136 
ªv
 = 
c
->
ªad
;

139 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

141 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

142 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

144 i‡(
n
 == 0) {

145 
ªv
->
ªady
 = 0;

146 
ªv
->
eof
 = 1;

147  
n
;

149 } i‡(
n
 > 0) {

151 i‡((
size_t
Ë
n
 < 
size


152 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
))

154 
ªv
->
ªady
 = 0;

157  
n
;

160 
îr
 = 
ngx_sockë_î∫o
;

162 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

163 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

165 
n
 = 
NGX_AGAIN
;

168 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

172 } 
îr
 =
NGX_EINTR
);

174 
ªv
->
ªady
 = 0;

176 i‡(
n
 =
NGX_ERROR
) {

177 
ªv
->
îr‹
 = 1;

180  
n
;

181 
	}
}

	@src/os/unix/ngx_send.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

16 
ssize_t
 
n
;

17 
ngx_îr_t
 
îr
;

18 
ngx_evít_t
 *
wev
;

20 
wev
 = 
c
->
wrôe
;

22 #i‡(
NGX_HAVE_KQUEUE
)

24 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

25 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

27 
wev
->
îr‹
 = 1;

28  
NGX_ERROR
;

34 
n
 = 
	`£nd
(
c
->
fd
, 
buf
, 
size
, 0);

36 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

37 "£nd: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

39 i‡(
n
 > 0) {

40 i‡(
n
 < (
ssize_t
Ë
size
) {

41 
wev
->
ªady
 = 0;

44 
c
->
£¡
 +
n
;

46  
n
;

49 
îr
 = 
ngx_sockë_î∫o
;

51 i‡(
n
 == 0) {

52 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
îr
, "send()Ñeturned zero");

53 
wev
->
ªady
 = 0;

54  
n
;

57 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

58 
wev
->
ªady
 = 0;

60 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

63 i‡(
îr
 =
NGX_EAGAIN
) {

64  
NGX_AGAIN
;

68 
wev
->
îr‹
 = 1;

69 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "send() failed");

70  
NGX_ERROR
;

73 
	}
}

	@src/os/unix/ngx_setaffinity.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 #i‡(
NGX_HAVE_CPUSET_SETAFFINITY
)

13 
	~<sys/˝u£t.h
>

16 
	$ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
)

18 
˝u£t_t
 
mask
;

19 
ngx_uöt_t
 
i
;

21 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

22 "˝u£t_£èfföôy(0x%08Xl)", 
˝u_afföôy
);

24 
	`CPU_ZERO
(&
mask
);

25 
i
 = 0;

27 i‡(
˝u_afföôy
 & 1) {

28 
	`CPU_SET
(
i
, &
mask
);

30 
i
++;

31 
˝u_afföôy
 >>= 1;

32 } 
˝u_afföôy
);

34 i‡(
	`˝u£t_£èfföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_PID
, -1,

35 (
˝u£t_t
), &
mask
) == -1)

37 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

40 
	}
}

42 #ñi‡(
NGX_HAVE_SCHED_SETAFFINITY
)

45 
	$ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
)

47 
˝u_£t_t
 
mask
;

48 
ngx_uöt_t
 
i
;

50 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

51 "sched_£èfföôy(0x%08Xl)", 
˝u_afföôy
);

53 
	`CPU_ZERO
(&
mask
);

54 
i
 = 0;

56 i‡(
˝u_afföôy
 & 1) {

57 
	`CPU_SET
(
i
, &
mask
);

59 
i
++;

60 
˝u_afföôy
 >>= 1;

61 } 
˝u_afföôy
);

63 i‡(
	`sched_£èfföôy
(0, (
˝u_£t_t
), &
mask
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

67 
	}
}

	@src/os/unix/ngx_setaffinity.h

6 #i‚de‡
_NGX_SETAFFINITY_H_INCLUDED_


7 
	#_NGX_SETAFFINITY_H_INCLUDED_


	)

10 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
 || 
NGX_HAVE_CPUSET_SETAFFINITY
)

12 
	#NGX_HAVE_CPU_AFFINITY
 1

	)

14 
ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
);

18 
	#ngx_£èfföôy
(
˝u_afföôy
, 
log
)

	)

	@src/os/unix/ngx_setproctitle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

30 **
ívú⁄
;

32 *
	gngx_os_¨gv_œ°
;

34 
ngx_öt_t


35 
	$ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
)

37 
u_ch¨
 *
p
;

38 
size_t
 
size
;

39 
ngx_uöt_t
 
i
;

41 
size
 = 0;

43 
i
 = 0; 
ívú⁄
[i]; i++) {

44 
size
 +
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

47 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

48 i‡(
p
 =
NULL
) {

49  
NGX_ERROR
;

52 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[0];

54 
i
 = 0; 
ngx_os_¨gv
[i]; i++) {

55 i‡(
ngx_os_¨gv_œ°
 =
ngx_os_¨gv
[
i
]) {

56 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[
i
] + 
	`ngx_°æí
(ngx_os_argv[i]) + 1;

60 
i
 = 0; 
ívú⁄
[i]; i++) {

61 i‡(
ngx_os_¨gv_œ°
 =
ívú⁄
[
i
]) {

63 
size
 = 
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

64 
ngx_os_¨gv_œ°
 = 
ívú⁄
[
i
] + 
size
;

66 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
ívú⁄
[
i
], 
size
);

67 
ívú⁄
[
i
] = (*Ë
p
;

68 
p
 +
size
;

72 
ngx_os_¨gv_œ°
--;

74  
NGX_OK
;

75 
	}
}

79 
	$ngx_£çro˘ôÀ
(*
tôÀ
)

81 
u_ch¨
 *
p
;

83 #i‡(
NGX_SOLARIS
)

85 
ngx_öt_t
 
i
;

86 
size_t
 
size
;

90 
ngx_os_¨gv
[1] = 
NULL
;

92 
p
 = 
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_os_¨gv
[0], (u_char *) "nginx: ",

93 
ngx_os_¨gv_œ°
 - 
ngx_os_¨gv
[0]);

95 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
tôÀ
, 
ngx_os_¨gv_œ°
 - (*)Ö);

97 #i‡(
NGX_SOLARIS
)

99 
size
 = 0;

101 
i
 = 0; i < 
ngx_¨gc
; i++) {

102 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

105 i‡(
size
 > (
size_t
Ë((*Ë
p
 - 
ngx_os_¨gv
[0])) {

112 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (", 
ngx_os_¨gv_œ°
 - (*)Ö);

114 
i
 = 0; i < 
ngx_¨gc
; i++) {

115 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
],

116 
ngx_os_¨gv_œ°
 - (*Ë
p
);

117 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" ", 
ngx_os_¨gv_œ°
 - (*)Ö);

120 i‡(*(
p
 - 1) == ' ') {

121 *(
p
 - 1) = ')';

127 i‡(
ngx_os_¨gv_œ°
 - (*Ë
p
) {

128 
	`ngx_mem£t
(
p
, 
NGX_SETPROCTITLE_PAD
, 
ngx_os_¨gv_œ°
 - (*)Ö);

131 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

132 "£çro˘ôÀ: \"%s\"", 
ngx_os_¨gv
[0]);

133 
	}
}

	@src/os/unix/ngx_setproctitle.h

8 #i‚de‡
_NGX_SETPROCTITLE_H_INCLUDED_


9 
	#_NGX_SETPROCTITLE_H_INCLUDED_


	)

12 #i‡(
NGX_HAVE_SETPROCTITLE
)

16 
	#ngx_öô_£çro˘ôÀ
(
log
Ë
NGX_OK


	)

17 
	#ngx_£çro˘ôÀ
(
tôÀ
Ë
	`£çro˘ôÀ
("%s",ÅôÀ)

	)

22 #i‡!
deföed
 
NGX_SETPROCTITLE_USES_ENV


24 #i‡(
NGX_SOLARIS
)

26 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

27 
	#NGX_SETPROCTITLE_PAD
 ' '

	)

29 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

30 
ngx_£çro˘ôÀ
(*
tôÀ
);

32 #ñi‡(
NGX_LINUX
Ë|| (
NGX_DARWIN
)

34 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

35 
	#NGX_SETPROCTITLE_PAD
 '\0'

	)

37 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

38 
ngx_£çro˘ôÀ
(*
tôÀ
);

42 
	#ngx_öô_£çro˘ôÀ
(
log
Ë
NGX_OK


	)

43 
	#ngx_£çro˘ôÀ
(
tôÀ
)

	)

	@src/os/unix/ngx_shmem.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_MAP_ANON
)

14 
ngx_öt_t


15 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

17 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
,

18 
PROT_READ
|
PROT_WRITE
,

19 
MAP_ANON
|
MAP_SHARED
, -1, 0);

21 i‡(
shm
->
addr
 =
MAP_FAILED
) {

22 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

23 "mm≠(MAP_ANON|MAP_SHARED, %uzËÁûed", 
shm
->
size
);

24  
NGX_ERROR
;

27  
NGX_OK
;

28 
	}
}

32 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

34 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

36 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

38 
	}
}

40 #ñi‡(
NGX_HAVE_MAP_DEVZERO
)

42 
ngx_öt_t


43 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

45 
ngx_fd_t
 
fd
;

47 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
);

49 i‡(
fd
 == -1) {

50 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

52  
NGX_ERROR
;

55 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
, 
PROT_READ
|
PROT_WRITE
,

56 
MAP_SHARED
, 
fd
, 0);

58 i‡(
shm
->
addr
 =
MAP_FAILED
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

60 "mm≠(/dev/zîo, MAP_SHARED, %uzËÁûed", 
shm
->
size
);

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

68  (
shm
->
addr
 =
MAP_FAILED
Ë? 
NGX_ERROR
 : 
NGX_OK
;

69 
	}
}

73 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

75 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

76 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

77 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

79 
	}
}

81 #ñi‡(
NGX_HAVE_SYSVSHM
)

83 
	~<sys/ùc.h
>

84 
	~<sys/shm.h
>

87 
ngx_öt_t


88 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

90 
id
;

92 
id
 = 
	`shmgë
(
IPC_PRIVATE
, 
shm
->
size
, (
SHM_R
|
SHM_W
|
IPC_CREAT
));

94 i‡(
id
 == -1) {

95 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

96 "shmgë(%uzËÁûed", 
shm
->
size
);

97  
NGX_ERROR
;

100 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
shm
->
log
, 0, "shmgë id: %d", 
id
);

102 
shm
->
addr
 = 
	`shm©
(
id
, 
NULL
, 0);

104 i‡(
shm
->
addr
 == (*) -1) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
, "shmat() failed");

108 i‡(
	`shm˘l
(
id
, 
IPC_RMID
, 
NULL
) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

113  (
shm
->
addr
 =(*Ë-1Ë? 
NGX_ERROR
 : 
NGX_OK
;

114 
	}
}

118 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

120 i‡(
	`shmdt
(
shm
->
addr
) == -1) {

121 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

122 "shmdt(%pËÁûed", 
shm
->
addr
);

124 
	}
}

	@src/os/unix/ngx_shmem.h

8 #i‚de‡
_NGX_SHMEM_H_INCLUDED_


9 
	#_NGX_SHMEM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
u_ch¨
 *
	maddr
;

18 
size_t
 
	msize
;

19 
ngx_°r_t
 
	m«me
;

20 
ngx_log_t
 *
	mlog
;

21 
ngx_uöt_t
 
	mexi°s
;

22 } 
	tngx_shm_t
;

25 
ngx_öt_t
 
ngx_shm_Æloc
(
ngx_shm_t
 *
shm
);

26 
ngx_shm_‰ì
(
ngx_shm_t
 *
shm
);

	@src/os/unix/ngx_socket.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

24 #i‡(
NGX_HAVE_FIONBIO
)

27 
	$ngx_n⁄blockög
(
ngx_sockë_t
 
s
)

29 
nb
;

31 
nb
 = 1;

33  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

34 
	}
}

38 
	$ngx_blockög
(
ngx_sockë_t
 
s
)

40 
nb
;

42 
nb
 = 0;

44  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

45 
	}
}

50 #i‡(
NGX_FREEBSD
)

53 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

55 
t˝_n›ush
;

57 
t˝_n›ush
 = 1;

59  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

60 (c⁄° *Ë&
t˝_n›ush
, ());

61 
	}
}

65 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

67 
t˝_n›ush
;

69 
t˝_n›ush
 = 0;

71  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

72 (c⁄° *Ë&
t˝_n›ush
, ());

73 
	}
}

75 #ñi‡(
NGX_LINUX
)

79 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

81 
c‹k
;

83 
c‹k
 = 1;

85  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

86 (c⁄° *Ë&
c‹k
, ());

87 
	}
}

91 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

93 
c‹k
;

95 
c‹k
 = 0;

97  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

98 (c⁄° *Ë&
c‹k
, ());

99 
	}
}

104 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

107 
	}
}

111 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

114 
	}
}

	@src/os/unix/ngx_socket.h

8 #i‚de‡
_NGX_SOCKET_H_INCLUDED_


9 
	#_NGX_SOCKET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

15 
	#NGX_WRITE_SHUTDOWN
 
SHUT_WR


	)

17 
	tngx_sockë_t
;

19 
	#ngx_sockë
 
sockë


	)

20 
	#ngx_sockë_n
 "sockë()"

	)

23 #i‡(
NGX_HAVE_FIONBIO
)

25 
ngx_n⁄blockög
(
ngx_sockë_t
 
s
);

26 
ngx_blockög
(
ngx_sockë_t
 
s
);

28 
	#ngx_n⁄blockög_n
 "io˘l(FIONBIO)"

	)

29 
	#ngx_blockög_n
 "io˘l(!FIONBIO)"

	)

33 
	#ngx_n⁄blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë| 
O_NONBLOCK
)

	)

34 
	#ngx_n⁄blockög_n
 "f˙é(O_NONBLOCK)"

	)

36 
	#ngx_blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë& ~
O_NONBLOCK
)

	)

37 
	#ngx_blockög_n
 "f˙é(!O_NONBLOCK)"

	)

41 
ngx_t˝_n›ush
(
ngx_sockë_t
 
s
);

42 
ngx_t˝_push
(
ngx_sockë_t
 
s
);

44 #i‡(
NGX_LINUX
)

46 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_CORK)"

	)

47 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_CORK)"

	)

51 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_NOPUSH)"

	)

52 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_NOPUSH)"

	)

57 
	#ngx_shutdown_sockë
 
shutdown


	)

58 
	#ngx_shutdown_sockë_n
 "shutdown()"

	)

60 
	#ngx_˛o£_sockë
 
˛o£


	)

61 
	#ngx_˛o£_sockë_n
 "˛o£(Ësockë"

	)

	@src/os/unix/ngx_solaris.h

8 #i‚de‡
_NGX_SOLARIS_H_INCLUDED_


9 
	#_NGX_SOLARIS_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

	@src/os/unix/ngx_solaris_config.h

8 #i‚de‡
_NGX_SOLARIS_CONFIG_H_INCLUDED_


9 
	#_NGX_SOLARIS_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_REENTRANT


13 
	#_REENTRANT


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<pwd.h
>

30 
	~<gΩ.h
>

31 
	~<dúít.h
>

32 
	~<glob.h
>

33 
	~<time.h
>

34 
	~<sys/°©vfs.h
>

36 
	~<sys/fûio.h
>

37 
	~<sys/uio.h
>

38 
	~<sys/°©.h
>

39 
	~<f˙é.h
>

41 
	~<sys/waô.h
>

42 
	~<sys/mm™.h
>

43 
	~<sys/ªsour˚.h
>

44 
	~<sched.h
>

46 
	~<sys/sockë.h
>

47 
	~<√töë/ö.h
>

48 
	~<√töë/t˝.h
>

49 
	~<¨∑/öë.h
>

50 
	~<√tdb.h
>

51 
	~<sys/un.h
>

53 
	~<sys/sy°emöfo.h
>

54 
	~<limôs.h
>

55 
	~<öây≥s.h
>

56 
	~<¸y±.h
>

58 
	#NGX_ALIGNMENT
 
_MAX_ALIGNMENT


	)

60 
	~<ngx_auto_c⁄fig.h
>

63 #i‡(
NGX_HAVE_POSIX_SEM
)

64 
	~<£m≠h‹e.h
>

68 #i‡(
NGX_HAVE_POLL
)

69 
	~<pﬁl.h
>

73 #i‡(
NGX_HAVE_DEVPOLL
)

74 
	~<sys/io˘l.h
>

75 
	~<sys/devpﬁl.h
>

79 #i‡(
NGX_HAVE_EVENTPORT
)

80 
	~<p‹t.h
>

84 #i‡(
NGX_HAVE_SENDFILE
)

85 
	~<sys/£ndfûe.h
>

89 
	#NGX_LISTEN_BACKLOG
 511

	)

92 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


93 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

97 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


99 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

103 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

104 
	#ngx_debug_öô
()

	)

107 **
ívú⁄
;

	@src/os/unix/ngx_solaris_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_sﬁ¨is_sy¢ame
[20];

13 
	gngx_sﬁ¨is_ªÀa£
[10];

14 
	gngx_sﬁ¨is_vîsi⁄
[50];

17 
ngx_os_io_t
 
	gngx_sﬁ¨is_io
 = {

18 
ngx_unix_ªcv
,

19 
ngx_ªadv_chaö
,

20 
ngx_udp_unix_ªcv
,

21 
ngx_unix_£nd
,

22 #i‡(
NGX_HAVE_SENDFILE
)

23 
ngx_sﬁ¨is_£ndfûev_chaö
,

24 
NGX_IO_SENDFILE


26 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

35 i‡(
	`sysöfo
(
SI_SYSNAME
, 
ngx_sﬁ¨is_sy¢ame
, (ngx_solaris_sysname))

38 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

40  
NGX_ERROR
;

43 i‡(
	`sysöfo
(
SI_RELEASE
, 
ngx_sﬁ¨is_ªÀa£
, (ngx_solaris_release))

46 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

48  
NGX_ERROR
;

51 i‡(
	`sysöfo
(
SI_VERSION
, 
ngx_sﬁ¨is_vîsi⁄
, (ngx_solaris_version))

54 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

56  
NGX_ERROR
;

60 
ngx_os_io
 = 
ngx_sﬁ¨is_io
;

62  
NGX_OK
;

63 
	}
}

67 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

70 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

71 
ngx_sﬁ¨is_sy¢ame
, 
ngx_sﬁ¨is_ªÀa£
);

73 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "version: %s",

74 
ngx_sﬁ¨is_vîsi⁄
);

75 
	}
}

	@src/os/unix/ngx_solaris_sendfilev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_SOLARIS_SENDFILEV
)

17 
	s£ndfûevec
 {

18 
	msfv_fd
;

19 
u_öt
 
	msfv_Êag
;

20 
off_t
 
	msfv_off
;

21 
size_t
 
	msfv_Àn
;

22 } 
	t£ndfûevec_t
;

24 
	#SFV_FD_SELF
 -2

	)

26 
ssize_t
 
	$£ndfûev
(
fd
, c⁄° 
£ndfûevec
 *
vec
,

27 
sfv˙t
, 
size_t
 *
x„ºed
)

30 
	}
}

32 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

33 
off_t
 
limô
);

38 
	#NGX_SENDFILEVECS
 
NGX_IOVS_PREALLOCATE


	)

41 
ngx_chaö_t
 *

42 
	$ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

44 
fd
;

45 
u_ch¨
 *
¥ev
;

46 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
Âªv
;

47 
size_t
 
£¡
;

48 
ssize_t
 
n
;

49 
ngx_öt_t
 
eöå
;

50 
ngx_îr_t
 
îr
;

51 
ngx_uöt_t
 
nsfv
;

52 
£ndfûevec_t
 *
sfv
, 
sfvs
[
NGX_SENDFILEVECS
];

53 
ngx_evít_t
 *
wev
;

54 
ngx_chaö_t
 *
˛
;

56 
wev
 = 
c
->
wrôe
;

58 i‡(!
wev
->
ªady
) {

59  
ö
;

62 i‡(!
c
->
£ndfûe
) {

63  
	`ngx_wrôev_chaö
(
c
, 
ö
, 
limô
);

69 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

70 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

74 
£nd
 = 0;

77 
fd
 = 
SFV_FD_SELF
;

78 
¥ev
 = 
NULL
;

79 
Âªv
 = 0;

80 
sfv
 = 
NULL
;

81 
eöå
 = 0;

82 
£¡
 = 0;

83 
¥ev_£nd
 = 
£nd
;

85 
nsfv
 = 0;

89 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

91 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

95 i‡(
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

96 
fd
 = 
SFV_FD_SELF
;

98 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

100 i‡(
£nd
 + 
size
 > 
limô
) {

101 
size
 = 
limô
 - 
£nd
;

104 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

105 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

108 i‡(
nsfv
 =
NGX_SENDFILEVECS
) {

112 
sfv
 = &
sfvs
[
nsfv
++];

114 
sfv
->
sfv_fd
 = 
SFV_FD_SELF
;

115 
sfv
->
sfv_Êag
 = 0;

116 
sfv
->
sfv_off
 = (
off_t
Ë(
uöçå_t
Ë
˛
->
buf
->
pos
;

117 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

120 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

121 
£nd
 +
size
;

124 
¥ev
 = 
NULL
;

126 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

128 i‡(
£nd
 + 
size
 > 
limô
) {

129 
size
 = 
limô
 - 
£nd
;

131 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

132 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

134 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

135 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

139 i‡(
fd
 =
˛
->
buf
->
fûe
->fd && 
Âªv
 =˛->buf->
fûe_pos
) {

140 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

143 i‡(
nsfv
 =
NGX_SENDFILEVECS
) {

147 
sfv
 = &
sfvs
[
nsfv
++];

149 
fd
 = 
˛
->
buf
->
fûe
->fd;

150 
sfv
->
sfv_fd
 = 
fd
;

151 
sfv
->
sfv_Êag
 = 0;

152 
sfv
->
sfv_off
 = 
˛
->
buf
->
fûe_pos
;

153 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

156 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

157 
£nd
 +
size
;

161 
n
 = 
	`£ndfûev
(
c
->
fd
, 
sfvs
, 
nsfv
, &
£¡
);

163 i‡(
n
 == -1) {

164 
îr
 = 
ngx_î∫o
;

166 
îr
) {

167 
NGX_EAGAIN
:

170 
NGX_EINTR
:

171 
eöå
 = 1;

175 
wev
->
îr‹
 = 1;

176 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfilev() failed");

177  
NGX_CHAIN_ERROR
;

180 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

181 "£ndfûev(Ë£¡ o∆y %uz byãs", 
£¡
);

184 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

185 "£ndfûev: %z %z", 
n
, 
£¡
);

187 
c
->
£¡
 += sent;

189 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

191 i‡(
eöå
) {

192 
£nd
 = 
¥ev_£nd
 + 
£¡
;

196 i‡(
£nd
 - 
¥ev_£nd
 !(
off_t
Ë
£¡
) {

197 
wev
->
ªady
 = 0;

198  
ö
;

201 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

202  
ö
;

205 
	}
}

	@src/os/unix/ngx_sunpro_atomic_sparc64.h

8 #i‡(
NGX_PTR_SIZE
 == 4)

9 
	#NGX_CASA
 
ngx_ˇß


	)

11 
	#NGX_CASA
 
ngx_ˇsxa


	)

15 
ngx_©omic_uöt_t


16 
ngx_ˇß
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

18 
ngx_©omic_uöt_t


19 
ngx_ˇsxa
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

24 
ngx_ölöe
 
ngx_©omic_uöt_t


25 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

26 
ngx_©omic_uöt_t
 
£t
)

28 
£t
 = 
	`NGX_CASA
(£t, 
ﬁd
, 
lock
);

30  (
£t
 =
ﬁd
);

31 
	}
}

34 
ngx_ölöe
 
ngx_©omic_öt_t


35 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

37 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

39 
ﬁd
 = *
vÆue
;

43 
ªs
 = 
ﬁd
 + 
add
;

45 
ªs
 = 
	`NGX_CASA
‘es, 
ﬁd
, 
vÆue
);

47 i‡(
ªs
 =
ﬁd
) {

48  
ªs
;

51 
ﬁd
 = 
ªs
;

53 
	}
}

56 
	#ngx_mem‹y_b¨rõr
() \

57 
	`__asm
 (".volatile"); \

58 
	`__asm
 ("membar #LoadLoad | #LoadStore | #StoreStore | #StoreLoad"); \

59 
	`__asm
 (".n⁄vﬁ©ûe")

	)

61 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_thread.h

8 #i‚de‡
_NGX_THREAD_H_INCLUDED_


9 
	#_NGX_THREAD_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 #i‡(
NGX_THREADS
)

17 
	~<±hªad.h
>

20 
±hªad_muãx_t
 
	tngx_thªad_muãx_t
;

22 
ngx_öt_t
 
ngx_thªad_muãx_¸óã
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
);

23 
ngx_öt_t
 
ngx_thªad_muãx_de°roy
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
);

24 
ngx_öt_t
 
ngx_thªad_muãx_lock
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
);

25 
ngx_öt_t
 
ngx_thªad_muãx_u∆ock
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
);

28 
±hªad_c⁄d_t
 
	tngx_thªad_c⁄d_t
;

30 
ngx_öt_t
 
ngx_thªad_c⁄d_¸óã
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
);

31 
ngx_öt_t
 
ngx_thªad_c⁄d_de°roy
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
);

32 
ngx_öt_t
 
ngx_thªad_c⁄d_sig«l
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
);

33 
ngx_öt_t
 
ngx_thªad_c⁄d_waô
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_thªad_muãx_t
 *
mtx
,

34 
ngx_log_t
 *
log
);

37 #i‡(
NGX_LINUX
)

39 
pid_t
 
	tngx_tid_t
;

40 
	#NGX_TID_T_FMT
 "%P"

	)

42 #ñi‡(
NGX_FREEBSD
)

44 
uöt32_t
 
	tngx_tid_t
;

45 
	#NGX_TID_T_FMT
 "%uD"

	)

47 #ñi‡(
NGX_DARWIN
)

49 
uöt64_t
 
	tngx_tid_t
;

50 
	#NGX_TID_T_FMT
 "%uA"

	)

54 
uöt64_t
 
	tngx_tid_t
;

55 
	#NGX_TID_T_FMT
 "%uA"

	)

59 
ngx_tid_t
 
ngx_thªad_tid
();

61 
	#ngx_log_tid
 
	`ngx_thªad_tid
()

	)

65 
	#ngx_log_tid
 0

	)

66 
	#NGX_TID_T_FMT
 "%d"

	)

	@src/os/unix/ngx_thread_cond.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t


13 
	$ngx_thªad_c⁄d_¸óã
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
)

15 
ngx_îr_t
 
îr
;

17 
îr
 = 
	`±hªad_c⁄d_öô
(
c⁄d
, 
NULL
);

18 i‡(
îr
 == 0) {

19 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

20 "±hªad_c⁄d_öô(%p)", 
c⁄d
);

21  
NGX_OK
;

24 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
, "pthread_cond_init() failed");

25  
NGX_ERROR
;

26 
	}
}

29 
ngx_öt_t


30 
	$ngx_thªad_c⁄d_de°roy
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
)

32 
ngx_îr_t
 
îr
;

34 
îr
 = 
	`±hªad_c⁄d_de°roy
(
c⁄d
);

35 i‡(
îr
 == 0) {

36 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

37 "±hªad_c⁄d_de°roy(%p)", 
c⁄d
);

38  
NGX_OK
;

41 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
, "pthread_cond_destroy() failed");

42  
NGX_ERROR
;

43 
	}
}

46 
ngx_öt_t


47 
	$ngx_thªad_c⁄d_sig«l
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_log_t
 *
log
)

49 
ngx_îr_t
 
îr
;

51 
îr
 = 
	`±hªad_c⁄d_sig«l
(
c⁄d
);

52 i‡(
îr
 == 0) {

53 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

54 "±hªad_c⁄d_sig«l(%p)", 
c⁄d
);

55  
NGX_OK
;

58 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
, "pthread_cond_signal() failed");

59  
NGX_ERROR
;

60 
	}
}

63 
ngx_öt_t


64 
	$ngx_thªad_c⁄d_waô
(
ngx_thªad_c⁄d_t
 *
c⁄d
, 
ngx_thªad_muãx_t
 *
mtx
,

65 
ngx_log_t
 *
log
)

67 
ngx_îr_t
 
îr
;

69 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

70 "±hªad_c⁄d_waô(%pËíãr", 
c⁄d
);

72 
îr
 = 
	`±hªad_c⁄d_waô
(
c⁄d
, 
mtx
);

75 
	`ngx_time_upd©e
();

78 i‡(
îr
 == 0) {

79 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

80 "±hªad_c⁄d_waô(%pËexô", 
c⁄d
);

81  
NGX_OK
;

84 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_cond_wait() failed");

86  
NGX_ERROR
;

87 
	}
}

	@src/os/unix/ngx_thread_id.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_thªad_poﬁ.h
>

13 #i‡(
NGX_LINUX
)

20 
ngx_tid_t


21 
	$ngx_thªad_tid
()

23  
	`sysˇŒ
(
SYS_gëtid
);

24 
	}
}

26 #ñi‡(
NGX_FREEBSD
Ë&& (
__FªeBSD_vîsi⁄
 >= 900031)

28 
	~<±hªad_≈.h
>

30 
ngx_tid_t


31 
	$ngx_thªad_tid
()

33  
	`±hªad_gëthªadid_≈
();

34 
	}
}

36 #ñi‡(
NGX_DARWIN
)

46 
ngx_tid_t


47 
	$ngx_thªad_tid
()

49 
uöt64_t
 
tid
;

51 (Ë
	`±hªad_thªadid_≈
(
NULL
, &
tid
);

52  
tid
;

53 
	}
}

64 
ngx_tid_t


65 
	$ngx_thªad_tid
()

67  (
uöt64_t
Ë(
uöçå_t
Ë
	`±hªad_£lf
();

68 
	}
}

	@src/os/unix/ngx_thread_mutex.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

77 
ngx_öt_t


78 
	$ngx_thªad_muãx_¸óã
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
)

80 
ngx_îr_t
 
îr
;

81 
±hªad_muãx©å_t
 
©å
;

83 
îr
 = 
	`±hªad_muãx©å_öô
(&
©å
);

84 i‡(
îr
 != 0) {

85 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

87  
NGX_ERROR
;

90 
îr
 = 
	`±hªad_muãx©å_£ây≥
(&
©å
, 
PTHREAD_MUTEX_ERRORCHECK
);

91 i‡(
îr
 != 0) {

92 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

95  
NGX_ERROR
;

98 
îr
 = 
	`±hªad_muãx_öô
(
mtx
, &
©å
);

99 i‡(
îr
 != 0) {

100 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

102  
NGX_ERROR
;

105 
îr
 = 
	`±hªad_muãx©å_de°roy
(&
©å
);

106 i‡(
îr
 != 0) {

107 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

111 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

112 "±hªad_muãx_öô(%p)", 
mtx
);

113  
NGX_OK
;

114 
	}
}

117 
ngx_öt_t


118 
	$ngx_thªad_muãx_de°roy
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
)

120 
ngx_îr_t
 
îr
;

122 
îr
 = 
	`±hªad_muãx_de°roy
(
mtx
);

123 i‡(
îr
 != 0) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

126  
NGX_ERROR
;

129 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

130 "±hªad_muãx_de°roy(%p)", 
mtx
);

131  
NGX_OK
;

132 
	}
}

135 
ngx_öt_t


136 
	$ngx_thªad_muãx_lock
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
)

138 
ngx_îr_t
 
îr
;

140 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

141 "±hªad_muãx_lock(%pËíãr", 
mtx
);

143 
îr
 = 
	`±hªad_muãx_lock
(
mtx
);

144 i‡(
îr
 == 0) {

145  
NGX_OK
;

148 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_mutex_lock() failed");

150  
NGX_ERROR
;

151 
	}
}

154 
ngx_öt_t


155 
	$ngx_thªad_muãx_u∆ock
(
ngx_thªad_muãx_t
 *
mtx
, 
ngx_log_t
 *
log
)

157 
ngx_îr_t
 
îr
;

159 
îr
 = 
	`±hªad_muãx_u∆ock
(
mtx
);

162 
	`ngx_time_upd©e
();

165 i‡(
îr
 == 0) {

166 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

167 "±hªad_muãx_u∆ock(%pËexô", 
mtx
);

168  
NGX_OK
;

171 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_mutex_unlock() failed");

173  
NGX_ERROR
;

174 
	}
}

	@src/os/unix/ngx_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

25 
	$ngx_timez⁄e_upd©e
()

27 #i‡(
NGX_FREEBSD
)

29 i‡(
	`gëív
("TZ")) {

33 
	`puãnv
("TZ=UTC");

35 
	`tz£t
();

37 
	`un£ãnv
("TZ");

39 
	`tz£t
();

41 #ñi‡(
NGX_LINUX
)

42 
time_t
 
s
;

43 
tm
 *
t
;

44 
buf
[4];

46 
s
 = 
	`time
(0);

48 
t
 = 
	`loˇ…ime
(&
s
);

50 
	`°r·ime
(
buf
, 4, "%H", 
t
);

53 
	}
}

57 
	$ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
)

59 #i‡(
NGX_HAVE_LOCALTIME_R
)

60 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

63 
ngx_tm_t
 *
t
;

65 
t
 = 
	`loˇ…ime
(&
s
);

66 *
tm
 = *
t
;

70 
tm
->
ngx_tm_m⁄
++;

71 
tm
->
ngx_tm_yór
 += 1900;

72 
	}
}

76 
	$ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm)

78 #i‡(
NGX_HAVE_LOCALTIME_R
)

79 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

82 
tm
 *
t
;

84 
t
 = 
	`loˇ…ime
(&
s
);

85 *
tm
 = *
t
;

88 
	}
}

92 
	$ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm)

94 #i‡(
NGX_HAVE_LOCALTIME_R
)

95 (Ë
	`gmtime_r
(&
s
, 
tm
);

98 
tm
 *
t
;

100 
t
 = 
	`gmtime
(&
s
);

101 *
tm
 = *
t
;

104 
	}
}

	@src/os/unix/ngx_time.h

8 #i‚de‡
_NGX_TIME_H_INCLUDED_


9 
	#_NGX_TIME_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_rbåì_key_t
 
	tngx_m£c_t
;

17 
ngx_rbåì_key_öt_t
 
	tngx_m£c_öt_t
;

19 
tm
 
	tngx_tm_t
;

21 
	#ngx_tm_£c
 
tm_£c


	)

22 
	#ngx_tm_mö
 
tm_mö


	)

23 
	#ngx_tm_hour
 
tm_hour


	)

24 
	#ngx_tm_mday
 
tm_mday


	)

25 
	#ngx_tm_m⁄
 
tm_m⁄


	)

26 
	#ngx_tm_yór
 
tm_yór


	)

27 
	#ngx_tm_wday
 
tm_wday


	)

28 
	#ngx_tm_isd°
 
tm_isd°


	)

30 
	#ngx_tm_£c_t
 

	)

31 
	#ngx_tm_mö_t
 

	)

32 
	#ngx_tm_hour_t
 

	)

33 
	#ngx_tm_mday_t
 

	)

34 
	#ngx_tm_m⁄_t
 

	)

35 
	#ngx_tm_yór_t
 

	)

36 
	#ngx_tm_wday_t
 

	)

39 #i‡(
NGX_HAVE_GMTOFF
)

40 
	#ngx_tm_gmtoff
 
tm_gmtoff


	)

41 
	#ngx_tm_z⁄e
 
tm_z⁄e


	)

45 #i‡(
NGX_SOLARIS
)

47 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
Ætz⁄e
 : 
timez⁄e
Ë/ 60)

	)

51 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
timez⁄e
 + 3600 :Åimez⁄eË/ 60)

	)

56 
ngx_timez⁄e_upd©e
();

57 
ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
);

58 
ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm);

59 
ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm);

61 
	#ngx_gëtimeofday
(
ç
Ë(Ë
	`gëtimeofday
—p, 
NULL
);

	)

62 
	#ngx_m¶ìp
(
ms
Ë(Ë
	`u¶ìp
(m†* 1000)

	)

63 
	#ngx_¶ìp
(
s
Ë(Ë
	`¶ìp
(s)

	)

	@src/os/unix/ngx_udp_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

25 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

27 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

28 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

30 i‡(
n
 >= 0) {

31 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

32 
ªv
->
avaûabÀ
 -
n
;

39 i‡(
ªv
->
avaûabÀ
 <= 0) {

40 
ªv
->
ªady
 = 0;

41 
ªv
->
avaûabÀ
 = 0;

45  
n
;

48 
îr
 = 
ngx_sockë_î∫o
;

50 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

51 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

53 
n
 = 
NGX_AGAIN
;

56 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

60 } 
îr
 =
NGX_EINTR
);

62 
ªv
->
ªady
 = 0;

64 i‡(
n
 =
NGX_ERROR
) {

65 
ªv
->
îr‹
 = 1;

68  
n
;

69 
	}
}

73 
ssize_t


74 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

76 
ssize_t
 
n
;

77 
ngx_îr_t
 
îr
;

78 
ngx_evít_t
 *
ªv
;

80 
ªv
 = 
c
->
ªad
;

83 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

85 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

86 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

88 i‡(
n
 >= 0) {

89  
n
;

92 
îr
 = 
ngx_sockë_î∫o
;

94 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

95 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

97 
n
 = 
NGX_AGAIN
;

100 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

104 } 
îr
 =
NGX_EINTR
);

106 
ªv
->
ªady
 = 0;

108 i‡(
n
 =
NGX_ERROR
) {

109 
ªv
->
îr‹
 = 1;

112  
n
;

113 
	}
}

	@src/os/unix/ngx_user.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

22 #i‡(
NGX_CRYPT
)

24 #i‡(
NGX_HAVE_GNU_CRYPT_R
)

26 
ngx_öt_t


27 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

29 *
vÆue
;

30 
size_t
 
Àn
;

31 
¸y±_d©a
 
cd
;

33 
cd
.
öôülized
 = 0;

34 #ifde‡
__GLIBC__


36 
cd
.
cuºít_ß…
[0] = ~
ß…
[0];

39 
vÆue
 = 
	`¸y±_r
((*Ë
key
, (*Ë
ß…
, &
cd
);

41 i‡(
vÆue
) {

42 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

44 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

45 i‡(*
í¸y±ed
 =
NULL
) {

46  
NGX_ERROR
;

49 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

50  
NGX_OK
;

53 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
ngx_î∫o
, "crypt_r() failed");

55  
NGX_ERROR
;

56 
	}
}

60 
ngx_öt_t


61 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

63 *
vÆue
;

64 
size_t
 
Àn
;

65 
ngx_îr_t
 
îr
;

67 
vÆue
 = 
	`¸y±
((*Ë
key
, (*Ë
ß…
);

69 i‡(
vÆue
) {

70 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

72 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

73 i‡(*
í¸y±ed
 =
NULL
) {

74  
NGX_ERROR
;

77 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

78  
NGX_OK
;

81 
îr
 = 
ngx_î∫o
;

83 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
îr
, "crypt() failed");

85  
NGX_ERROR
;

86 
	}
}

	@src/os/unix/ngx_user.h

8 #i‚de‡
_NGX_USER_H_INCLUDED_


9 
	#_NGX_USER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uid_t
 
	tngx_uid_t
;

17 
gid_t
 
	tngx_gid_t
;

20 
ngx_öt_t
 
ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

	@src/os/unix/ngx_writev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_chaö_t
 *

14 
	$ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

16 
ssize_t
 
n
, 
£¡
;

17 
off_t
 
£nd
, 
¥ev_£nd
;

18 
ngx_chaö_t
 *
˛
;

19 
ngx_evít_t
 *
wev
;

20 
ngx_iovec_t
 
vec
;

21 
iovec
 
iovs
[
NGX_IOVS_PREALLOCATE
];

23 
wev
 = 
c
->
wrôe
;

25 i‡(!
wev
->
ªady
) {

26  
ö
;

29 #i‡(
NGX_HAVE_KQUEUE
)

31 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

32 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

34 
wev
->
îr‹
 = 1;

35  
NGX_CHAIN_ERROR
;

42 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

43 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

46 
£nd
 = 0;

48 
vec
.
iovs
 = iovs;

49 
vec
.
«Œoc
 = 
NGX_IOVS_PREALLOCATE
;

52 
¥ev_£nd
 = 
£nd
;

56 
˛
 = 
	`ngx_ouçut_chaö_to_iovec
(&
vec
, 
ö
, 
limô
 - 
£nd
, 
c
->
log
);

58 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

59  
NGX_CHAIN_ERROR
;

62 i‡(
˛
 && cl->
buf
->
ö_fûe
) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

66 
˛
->
buf
->
ãmp‹¨y
,

67 
˛
->
buf
->
ªcy˛ed
,

68 
˛
->
buf
->
ö_fûe
,

69 
˛
->
buf
->
°¨t
,

70 
˛
->
buf
->
pos
,

71 
˛
->
buf
->
œ°
,

72 
˛
->
buf
->
fûe
,

73 
˛
->
buf
->
fûe_pos
,

74 
˛
->
buf
->
fûe_œ°
);

76 
	`ngx_debug_poöt
();

78  
NGX_CHAIN_ERROR
;

81 
£nd
 +
vec
.
size
;

83 
n
 = 
	`ngx_wrôev
(
c
, &
vec
);

85 i‡(
n
 =
NGX_ERROR
) {

86  
NGX_CHAIN_ERROR
;

89 
£¡
 = (
n
 =
NGX_AGAIN
) ? 0 :Ç;

91 
c
->
£¡
 += sent;

93 
ö
 = 
	`ngx_chaö_upd©e_£¡
(ö, 
£¡
);

95 i‡(
£nd
 - 
¥ev_£nd
 !
£¡
) {

96 
wev
->
ªady
 = 0;

97  
ö
;

100 i‡(
£nd
 >
limô
 || 
ö
 =
NULL
) {

101  
ö
;

104 
	}
}

107 
ngx_chaö_t
 *

108 
	$ngx_ouçut_chaö_to_iovec
(
ngx_iovec_t
 *
vec
, 
ngx_chaö_t
 *
ö
, 
size_t
 
limô
,

109 
ngx_log_t
 *
log
)

111 
size_t
 
tŸÆ
, 
size
;

112 
u_ch¨
 *
¥ev
;

113 
ngx_uöt_t
 
n
;

114 
iovec
 *
iov
;

116 
iov
 = 
NULL
;

117 
¥ev
 = 
NULL
;

118 
tŸÆ
 = 0;

119 
n
 = 0;

121  ; 
ö
 && 
tŸÆ
 < 
limô
; i¿ö->
√xt
) {

123 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

127 i‡(
ö
->
buf
->
ö_fûe
) {

131 i‡(!
	`ngx_buf_ö_mem‹y
(
ö
->
buf
)) {

132 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

135 
ö
->
buf
->
ãmp‹¨y
,

136 
ö
->
buf
->
ªcy˛ed
,

137 
ö
->
buf
->
ö_fûe
,

138 
ö
->
buf
->
°¨t
,

139 
ö
->
buf
->
pos
,

140 
ö
->
buf
->
œ°
,

141 
ö
->
buf
->
fûe
,

142 
ö
->
buf
->
fûe_pos
,

143 
ö
->
buf
->
fûe_œ°
);

145 
	`ngx_debug_poöt
();

147  
NGX_CHAIN_ERROR
;

150 
size
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

152 i‡(
size
 > 
limô
 - 
tŸÆ
) {

153 
size
 = 
limô
 - 
tŸÆ
;

156 i‡(
¥ev
 =
ö
->
buf
->
pos
) {

157 
iov
->
iov_Àn
 +
size
;

160 i‡(
n
 =
vec
->
«Œoc
) {

164 
iov
 = &
vec
->
iovs
[
n
++];

166 
iov
->
iov_ba£
 = (*Ë
ö
->
buf
->
pos
;

167 
iov
->
iov_Àn
 = 
size
;

170 
¥ev
 = 
ö
->
buf
->
pos
 + 
size
;

171 
tŸÆ
 +
size
;

174 
vec
->
cou¡
 = 
n
;

175 
vec
->
size
 = 
tŸÆ
;

177  
ö
;

178 
	}
}

181 
ssize_t


182 
	$ngx_wrôev
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_iovec_t
 *
vec
)

184 
ssize_t
 
n
;

185 
ngx_îr_t
 
îr
;

187 
eöå
:

189 
n
 = 
	`wrôev
(
c
->
fd
, 
vec
->
iovs
, vec->
cou¡
);

191 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

192 "wrôev: %z o‡%uz", 
n
, 
vec
->
size
);

194 i‡(
n
 == -1) {

195 
îr
 = 
ngx_î∫o
;

197 
îr
) {

198 
NGX_EAGAIN
:

199 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

201  
NGX_AGAIN
;

203 
NGX_EINTR
:

204 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

206 
eöå
;

209 
c
->
wrôe
->
îr‹
 = 1;

210 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

211  
NGX_ERROR
;

215  
n
;

216 
	}
}

	@zlib-1.2.8/adler32.c

8 
	~"zutû.h
"

10 
	#loˇl
 

	)

12 
loˇl
 
uL⁄g
 
adÀr32_comböe_
 
OF
((uL⁄g 
adÀr1
, uL⁄g 
adÀr2
, 
z_off64_t
 
Àn2
));

14 
	#BASE
 65521

	)

15 
	#NMAX
 5552

	)

18 
	#DO1
(
buf
,
i
Ë{
adÀr
 +(buf)[i]; 
sum2
 +adÀr;}

	)

19 
	#DO2
(
buf
,
i
Ë
	`DO1
(buf,i); DO1(buf,i+1);

	)

20 
	#DO4
(
buf
,
i
Ë
	`DO2
(buf,i); DO2(buf,i+2);

	)

21 
	#DO8
(
buf
,
i
Ë
	`DO4
(buf,i); DO4(buf,i+4);

	)

22 
	#DO16
(
buf
Ë
	`DO8
(buf,0); DO8(buf,8);

	)

26 #ifde‡
NO_DIVIDE


29 
	#CHOP
(
a
) \

31 
tmp
 = 
a
 >> 16; \

32 
a
 &= 0xffffUL; \

33 
a
 +(
tmp
 << 4) -Åmp; \

34 } 0)

	)

35 
	#MOD28
(
a
) \

37 
	`CHOP
(
a
); \

38 i‡(
a
 >
BASE
)á -= BASE; \

39 } 0)

	)

40 
	#MOD
(
a
) \

42 
	`CHOP
(
a
); \

43 
	`MOD28
(
a
); \

44 } 0)

	)

45 
	#MOD63
(
a
) \

47 
z_off64_t
 
tmp
 = 
a
 >> 32; \

48 
a
 &= 0xffffffffL; \

49 
a
 +(
tmp
 << 8) - (tmp << 5) +Åmp; \

50 
tmp
 = 
a
 >> 16; \

51 
a
 &= 0xffffL; \

52 
a
 +(
tmp
 << 4) -Åmp; \

53 
tmp
 = 
a
 >> 16; \

54 
a
 &= 0xffffL; \

55 
a
 +(
tmp
 << 4) -Åmp; \

56 i‡(
a
 >
BASE
)á -= BASE; \

57 } 0)

	)

59 
	#MOD
(
a
Ë®%
BASE


	)

60 
	#MOD28
(
a
Ë®%
BASE


	)

61 
	#MOD63
(
a
Ë®%
BASE


	)

65 
uL⁄g
 
ZEXPORT
 
	$adÀr32
(
adÀr
, 
buf
, 
Àn
)

66 
uL⁄g
 
adÀr
;

67 c⁄° 
Byãf
 *
buf
;

68 
uI¡
 
Àn
;

70 
sum2
;

71 
n
;

74 
sum2
 = (
adÀr
 >> 16) & 0xffff;

75 
adÀr
 &= 0xffff;

78 i‡(
Àn
 == 1) {

79 
adÀr
 +
buf
[0];

80 i‡(
adÀr
 >
BASE
)

81 
adÀr
 -
BASE
;

82 
sum2
 +
adÀr
;

83 i‡(
sum2
 >
BASE
)

84 
sum2
 -
BASE
;

85  
adÀr
 | (
sum2
 << 16);

89 i‡(
buf
 =
Z_NULL
)

93 i‡(
Àn
 < 16) {

94 
Àn
--) {

95 
adÀr
 +*
buf
++;

96 
sum2
 +
adÀr
;

98 i‡(
adÀr
 >
BASE
)

99 
adÀr
 -
BASE
;

100 
	`MOD28
(
sum2
);

101  
adÀr
 | (
sum2
 << 16);

105 
Àn
 >
NMAX
) {

106 
Àn
 -
NMAX
;

107 
n
 = 
NMAX
 / 16;

109 
	`DO16
(
buf
);

110 
buf
 += 16;

111 } --
n
);

112 
	`MOD
(
adÀr
);

113 
	`MOD
(
sum2
);

117 i‡(
Àn
) {

118 
Àn
 >= 16) {

119 
Àn
 -= 16;

120 
	`DO16
(
buf
);

121 
buf
 += 16;

123 
Àn
--) {

124 
adÀr
 +*
buf
++;

125 
sum2
 +
adÀr
;

127 
	`MOD
(
adÀr
);

128 
	`MOD
(
sum2
);

132  
adÀr
 | (
sum2
 << 16);

133 
	}
}

136 
loˇl
 
uL⁄g
 
	$adÀr32_comböe_
(
adÀr1
, 
adÀr2
, 
Àn2
)

137 
uL⁄g
 
adÀr1
;

138 
uL⁄g
 
adÀr2
;

139 
z_off64_t
 
Àn2
;

141 
sum1
;

142 
sum2
;

143 
ªm
;

146 i‡(
Àn2
 < 0)

150 
	`MOD63
(
Àn2
);

151 
ªm
 = ()
Àn2
;

152 
sum1
 = 
adÀr1
 & 0xffff;

153 
sum2
 = 
ªm
 * 
sum1
;

154 
	`MOD
(
sum2
);

155 
sum1
 +(
adÀr2
 & 0xffffË+ 
BASE
 - 1;

156 
sum2
 +((
adÀr1
 >> 16Ë& 0xffffË+ ((
adÀr2
 >> 16Ë& 0xffffË+ 
BASE
 - 
ªm
;

157 i‡(
sum1
 >
BASE
) sum1 -= BASE;

158 i‡(
sum1
 >
BASE
) sum1 -= BASE;

159 i‡(
sum2
 >(
BASE
 << 1)) sum2 -= (BASE << 1);

160 i‡(
sum2
 >
BASE
) sum2 -= BASE;

161  
sum1
 | (
sum2
 << 16);

162 
	}
}

165 
uL⁄g
 
ZEXPORT
 
	$adÀr32_comböe
(
adÀr1
, 
adÀr2
, 
Àn2
)

166 
uL⁄g
 
adÀr1
;

167 
uL⁄g
 
adÀr2
;

168 
z_off_t
 
Àn2
;

170  
	`adÀr32_comböe_
(
adÀr1
, 
adÀr2
, 
Àn2
);

171 
	}
}

173 
uL⁄g
 
ZEXPORT
 
	$adÀr32_comböe64
(
adÀr1
, 
adÀr2
, 
Àn2
)

174 
uL⁄g
 
adÀr1
;

175 
uL⁄g
 
adÀr2
;

176 
z_off64_t
 
Àn2
;

178  
	`adÀr32_comböe_
(
adÀr1
, 
adÀr2
, 
Àn2
);

179 
	}
}

	@zlib-1.2.8/compress.c

8 
	#ZLIB_INTERNAL


	)

9 
	~"zlib.h
"

22 
ZEXPORT
 
	$com¥ess2
 (
de°
, 
de°Lí
, 
sour˚
, 
sour˚Lí
, 
Àvñ
)

23 
Byãf
 *
de°
;

24 
uL⁄gf
 *
de°Lí
;

25 c⁄° 
Byãf
 *
sour˚
;

26 
uL⁄g
 
sour˚Lí
;

27 
Àvñ
;

29 
z_°ªam
 
°ªam
;

30 
îr
;

32 
°ªam
.
√xt_ö
 = (
z_c⁄°
 
Byãf
 *)
sour˚
;

33 
°ªam
.
avaû_ö
 = (
uI¡
)
sour˚Lí
;

34 #ifde‡
MAXSEG_64K


36 i‡((
uL⁄g
)
°ªam
.
avaû_ö
 !
sour˚Lí
Ë 
Z_BUF_ERROR
;

38 
°ªam
.
√xt_out
 = 
de°
;

39 
°ªam
.
avaû_out
 = (
uI¡
)*
de°Lí
;

40 i‡((
uL⁄g
)
°ªam
.
avaû_out
 !*
de°Lí
Ë 
Z_BUF_ERROR
;

42 
°ªam
.
zÆloc
 = (
Æloc_func
)0;

43 
°ªam
.
z‰ì
 = (
‰ì_func
)0;

44 
°ªam
.
›aque
 = (
voidpf
)0;

46 
îr
 = 
	`deÊ©eInô
(&
°ªam
, 
Àvñ
);

47 i‡(
îr
 !
Z_OK
) Érr;

49 
îr
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

50 i‡(
îr
 !
Z_STREAM_END
) {

51 
	`deÊ©eEnd
(&
°ªam
);

52  
îr
 =
Z_OK
 ? 
Z_BUF_ERROR
 :Érr;

54 *
de°Lí
 = 
°ªam
.
tŸÆ_out
;

56 
îr
 = 
	`deÊ©eEnd
(&
°ªam
);

57  
îr
;

58 
	}
}

62 
ZEXPORT
 
	$com¥ess
 (
de°
, 
de°Lí
, 
sour˚
, 
sour˚Lí
)

63 
Byãf
 *
de°
;

64 
uL⁄gf
 *
de°Lí
;

65 c⁄° 
Byãf
 *
sour˚
;

66 
uL⁄g
 
sour˚Lí
;

68  
	`com¥ess2
(
de°
, 
de°Lí
, 
sour˚
, 
sour˚Lí
, 
Z_DEFAULT_COMPRESSION
);

69 
	}
}

75 
uL⁄g
 
ZEXPORT
 
	$com¥essBound
 (
sour˚Lí
)

76 
uL⁄g
 
sour˚Lí
;

78  
sour˚Lí
 + (sourceLen >> 12) + (sourceLen >> 14) +

79 (
sour˚Lí
 >> 25) + 13;

80 
	}
}

	@zlib-1.2.8/contrib/blast/blast.c

29 
	~<£tjmp.h
>

30 
	~"bœ°.h
"

32 
	#loˇl
 

	)

33 
	#MAXBITS
 13

	)

34 
	#MAXWIN
 4096

	)

37 
	s°©e
 {

39 
bœ°_ö
 
	möfun
;

40 *
	möhow
;

41 *
	mö
;

42 
	mÀ·
;

43 
	mbôbuf
;

44 
	mbô˙t
;

47 
jmp_buf
 
	mív
;

50 
bœ°_out
 
	moutfun
;

51 *
	mouthow
;

52 
	m√xt
;

53 
	mfú°
;

54 
	mout
[
MAXWIN
];

68 
loˇl
 
	$bôs
(
°©e
 *
s
, 
√ed
)

70 
vÆ
;

73 
vÆ
 = 
s
->
bôbuf
;

74 
s
->
bô˙t
 < 
√ed
) {

75 i‡(
s
->
À·
 == 0) {

76 
s
->
À·
 = s->
	`öfun
(s->
öhow
, &(s->
ö
));

77 i‡(
s
->
À·
 =0Ë
	`l⁄gjmp
(s->
ív
, 1);

79 
vÆ
 |()(*(
s
->
ö
)++Ë<< s->
bô˙t
;

80 
s
->
À·
--;

81 
s
->
bô˙t
 += 8;

85 
s
->
bôbuf
 = 
vÆ
 >> 
√ed
;

86 
s
->
bô˙t
 -
√ed
;

89  
vÆ
 & ((1 << 
√ed
) - 1);

90 
	}
}

99 
	shuffm™
 {

100 *
	mcou¡
;

101 *
	msymbﬁ
;

125 
loˇl
 
	$decode
(
°©e
 *
s
, 
huffm™
 *
h
)

127 
Àn
;

128 
code
;

129 
fú°
;

130 
cou¡
;

131 
ödex
;

132 
bôbuf
;

133 
À·
;

134 *
√xt
;

136 
bôbuf
 = 
s
->bitbuf;

137 
À·
 = 
s
->
bô˙t
;

138 
code
 = 
fú°
 = 
ödex
 = 0;

139 
Àn
 = 1;

140 
√xt
 = 
h
->
cou¡
 + 1;

142 
À·
--) {

143 
code
 |(
bôbuf
 & 1) ^ 1;

144 
bôbuf
 >>= 1;

145 
cou¡
 = *
√xt
++;

146 i‡(
code
 < 
fú°
 + 
cou¡
) {

147 
s
->
bôbuf
 = bitbuf;

148 
s
->
bô˙t
 = (s->bô˙à- 
Àn
) & 7;

149  
h
->
symbﬁ
[
ödex
 + (
code
 - 
fú°
)];

151 
ödex
 +
cou¡
;

152 
fú°
 +
cou¡
;

153 
fú°
 <<= 1;

154 
code
 <<= 1;

155 
Àn
++;

157 
À·
 = (
MAXBITS
+1Ë- 
Àn
;

158 i‡(
À·
 == 0) ;

159 i‡(
s
->
À·
 == 0) {

160 
s
->
À·
 = s->
	`öfun
(s->
öhow
, &(s->
ö
));

161 i‡(
s
->
À·
 =0Ë
	`l⁄gjmp
(s->
ív
, 1);

163 
bôbuf
 = *(
s
->
ö
)++;

164 
s
->
À·
--;

165 i‡(
À·
 > 8)Üeft = 8;

168 
	}
}

187 
loˇl
 
	$c⁄°ru˘
(
huffm™
 *
h
, c⁄° *
ªp
, 
n
)

189 
symbﬁ
;

190 
Àn
;

191 
À·
;

192 
offs
[
MAXBITS
+1];

193 
Àngth
[256];

196 
symbﬁ
 = 0;

198 
Àn
 = *
ªp
++;

199 
À·
 = (
Àn
 >> 4) + 1;

200 
Àn
 &= 15;

202 
Àngth
[
symbﬁ
++] = 
Àn
;

203 } --
À·
);

204 } --
n
);

205 
n
 = 
symbﬁ
;

208 
Àn
 = 0;Üí <
MAXBITS
;Üen++)

209 
h
->
cou¡
[
Àn
] = 0;

210 
symbﬁ
 = 0; symbﬁ < 
n
; symbol++)

211 (
h
->
cou¡
[
Àngth
[
symbﬁ
]])++;

212 i‡(
h
->
cou¡
[0] =
n
)

216 
À·
 = 1;

217 
Àn
 = 1;Üí <
MAXBITS
;Üen++) {

218 
À·
 <<= 1;

219 
À·
 -
h
->
cou¡
[
Àn
];

220 i‡(
À·
 < 0) Üeft;

224 
offs
[1] = 0;

225 
Àn
 = 1;Üí < 
MAXBITS
;Üen++)

226 
offs
[
Àn
 + 1] = offs[Àn] + 
h
->
cou¡
[len];

232 
symbﬁ
 = 0; symbﬁ < 
n
; symbol++)

233 i‡(
Àngth
[
symbﬁ
] != 0)

234 
h
->
symbﬁ
[
offs
[
Àngth
[symbol]]++] = symbol;

237  
À·
;

238 
	}
}

278 
loˇl
 
	$decomp
(
°©e
 *
s
)

280 
lô
;

281 
di˘
;

282 
symbﬁ
;

283 
Àn
;

284 
di°
;

285 
c›y
;

286 *
‰om
, *
to
;

287 
vúgö
 = 1;

288 
lô˙t
[
MAXBITS
+1], 
lôsym
[256];

289 
Àn˙t
[
MAXBITS
+1], 
Ànsym
[16];

290 
di°˙t
[
MAXBITS
+1], 
di°sym
[64];

291 
huffm™
 
lôcode
 = {
lô˙t
, 
lôsym
};

292 
huffm™
 
Àncode
 = {
Àn˙t
, 
Ànsym
};

293 
huffm™
 
di°code
 = {
di°˙t
, 
di°sym
};

295 c⁄° 
lôÀn
[] = {

303 c⁄° 
À∆í
[] = {2, 35, 36, 53, 38, 23};

305 c⁄° 
di°Àn
[] = {2, 20, 53, 230, 247, 151, 248};

306 c⁄° 
ba£
[16] = {

308 c⁄° 
exåa
[16] = {

312 i‡(
vúgö
) {

313 
	`c⁄°ru˘
(&
lôcode
, 
lôÀn
, (litlen));

314 
	`c⁄°ru˘
(&
Àncode
, 
À∆í
, (lenlen));

315 
	`c⁄°ru˘
(&
di°code
, 
di°Àn
, (distlen));

316 
vúgö
 = 0;

320 
lô
 = 
	`bôs
(
s
, 8);

321 i‡(
lô
 > 1)  -1;

322 
di˘
 = 
	`bôs
(
s
, 8);

323 i‡(
di˘
 < 4 || dict > 6)  -2;

327 i‡(
	`bôs
(
s
, 1)) {

329 
symbﬁ
 = 
	`decode
(
s
, &
Àncode
);

330 
Àn
 = 
ba£
[
symbﬁ
] + 
	`bôs
(
s
, 
exåa
[symbol]);

331 i‡(
Àn
 == 519) ;

334 
symbﬁ
 = 
Àn
 =2 ? 2 : 
di˘
;

335 
di°
 = 
	`decode
(
s
, &
di°code
Ë<< 
symbﬁ
;

336 
di°
 +
	`bôs
(
s
, 
symbﬁ
);

337 
di°
++;

338 i‡(
s
->
fú°
 && 
di°
 > s->
√xt
)

343 
to
 = 
s
->
out
 + s->
√xt
;

344 
‰om
 = 
to
 - 
di°
;

345 
c›y
 = 
MAXWIN
;

346 i‡(
s
->
√xt
 < 
di°
) {

347 
‰om
 +
c›y
;

348 
c›y
 = 
di°
;

350 
c›y
 -
s
->
√xt
;

351 i‡(
c›y
 > 
Àn
) copy =Üen;

352 
Àn
 -
c›y
;

353 
s
->
√xt
 +
c›y
;

355 *
to
++ = *
‰om
++;

356 } --
c›y
);

357 i‡(
s
->
√xt
 =
MAXWIN
) {

358 i‡(
s
->
	`outfun
(s->
outhow
, s->
out
, s->
√xt
))  1;

359 
s
->
√xt
 = 0;

360 
s
->
fú°
 = 0;

362 } 
Àn
 != 0);

366 
symbﬁ
 = 
lô
 ? 
	`decode
(
s
, &
lôcode
Ë: 
	`bôs
(s, 8);

367 
s
->
out
[s->
√xt
++] = 
symbﬁ
;

368 i‡(
s
->
√xt
 =
MAXWIN
) {

369 i‡(
s
->
	`outfun
(s->
outhow
, s->
out
, s->
√xt
))  1;

370 
s
->
√xt
 = 0;

371 
s
->
fú°
 = 0;

376 
	}
}

379 
	$bœ°
(
bœ°_ö
 
öfun
, *
öhow
, 
bœ°_out
 
outfun
, *
outhow
)

381 
°©e
 
s
;

382 
îr
;

385 
s
.
öfun
 = infun;

386 
s
.
öhow
 = inhow;

387 
s
.
À·
 = 0;

388 
s
.
bôbuf
 = 0;

389 
s
.
bô˙t
 = 0;

392 
s
.
outfun
 = outfun;

393 
s
.
outhow
 = outhow;

394 
s
.
√xt
 = 0;

395 
s
.
fú°
 = 1;

398 i‡(
	`£tjmp
(
s
.
ív
) != 0)

399 
îr
 = 2;

401 
îr
 = 
	`decomp
(&
s
);

404 i‡(
îr
 !1 && 
s
.
√xt
 && s.
	`outfun
(s.
outhow
, s.
out
, s.next) &&Érr == 0)

405 
îr
 = 1;

406  
îr
;

407 
	}
}

409 #ifde‡
TEST


411 
	~<°dio.h
>

412 
	~<°dlib.h
>

414 
	#CHUNK
 16384

	)

416 
loˇl
 
	$öf
(*
how
, **
buf
)

418 
hﬁd
[
CHUNK
];

420 *
buf
 = 
hﬁd
;

421  
	`‰ód
(
hﬁd
, 1, 
CHUNK
, (
FILE
 *)
how
);

422 
	}
}

424 
loˇl
 
	$outf
(*
how
, *
buf
, 
Àn
)

426  
	`fwrôe
(
buf
, 1, 
Àn
, (
FILE
 *)
how
) !=Üen;

427 
	}
}

430 
	$maö
()

432 
ªt
, 
n
;

435 
ªt
 = 
	`bœ°
(
öf
, 
°dö
, 
outf
, 
°dout
);

436 i‡(
ªt
 !0Ë
	`Ârötf
(
°dîr
, "blastÉrror: %d\n",Ñet);

439 
n
 = 0;

440 
	`gëch¨
(Ë!
EOF
Ë
n
++;

441 i‡(
n
Ë
	`Ârötf
(
°dîr
, "blast warning: %d unused bytes of input\n",Ç);

444  
ªt
;

445 
	}
}

	@zlib-1.2.8/contrib/blast/blast.h

38 (*
	tbœ°_ö
)(*
	thow
, **
	tbuf
);

39 (*
	tbœ°_out
)(*
	thow
, *
	tbuf
, 
	tÀn
);

45 
	`bœ°
(
bœ°_ö
 
öfun
, *
öhow
, 
bœ°_out
 
outfun
, *
outhow
);

	@zlib-1.2.8/contrib/infback9/infback9.c

6 
	~"zutû.h
"

7 
	~"öfback9.h
"

8 
	~"ö·ªe9.h
"

9 
	~"öÊ©e9.h
"

11 
	#WSIZE
 65536UL

	)

19 
ZEXPORT
 
	$öÊ©eBack9Inô_
(
°rm
, 
wödow
, 
vîsi⁄
, 
°ªam_size
)

20 
z_°ªam
 
FAR
 *
°rm
;

21 
FAR
 *
wödow
;

22 c⁄° *
vîsi⁄
;

23 
°ªam_size
;

25 
öÊ©e_°©e
 
FAR
 *
°©e
;

27 i‡(
vîsi⁄
 =
Z_NULL
 || vîsi⁄[0] !
ZLIB_VERSION
[0] ||

28 
°ªam_size
 !()((
z_°ªam
)))

29  
Z_VERSION_ERROR
;

30 i‡(
°rm
 =
Z_NULL
 || 
wödow
 == Z_NULL)

31  
Z_STREAM_ERROR
;

32 
°rm
->
msg
 = 
Z_NULL
;

33 i‡(
°rm
->
zÆloc
 =(
Æloc_func
)0) {

34 
°rm
->
zÆloc
 = 
zˇŒoc
;

35 
°rm
->
›aque
 = (
voidpf
)0;

37 i‡(
°rm
->
z‰ì
 =(
‰ì_func
)0Ë°rm->z‰ì = 
zc‰ì
;

38 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
	`ZALLOC
(
°rm
, 1,

39 (
öÊ©e_°©e
));

40 i‡(
°©e
 =
Z_NULL
Ë 
Z_MEM_ERROR
;

41 
	`Tø˚v
((
°dîr
, "inflate:állocated\n"));

42 
°rm
->
°©e
 = (
voidpf
)state;

43 
°©e
->
wödow
 = window;

44  
Z_OK
;

45 
	}
}

51 #ifde‡
MAKEFIXED


52 
	~<°dio.h
>

54 
	$makefixed9
()

56 
sym
, 
bôs
, 
low
, 
size
;

57 
code
 *
√xt
, *
Ànfix
, *
di°fix
;

58 
öÊ©e_°©e
 
°©e
;

59 
code
 
fixed
[544];

62 
sym
 = 0;

63 
sym
 < 144Ë
°©e
.
Àns
[sym++] = 8;

64 
sym
 < 256Ë
°©e
.
Àns
[sym++] = 9;

65 
sym
 < 280Ë
°©e
.
Àns
[sym++] = 7;

66 
sym
 < 288Ë
°©e
.
Àns
[sym++] = 8;

67 
√xt
 = 
fixed
;

68 
Ànfix
 = 
√xt
;

69 
bôs
 = 9;

70 
	`öÊ©e_èbÀ9
(
LENS
, 
°©e
.
Àns
, 288, &(
√xt
), &(
bôs
), sèã.
w‹k
);

73 
sym
 = 0;

74 
sym
 < 32Ë
°©e
.
Àns
[sym++] = 5;

75 
di°fix
 = 
√xt
;

76 
bôs
 = 5;

77 
	`öÊ©e_èbÀ9
(
DISTS
, 
°©e
.
Àns
, 32, &(
√xt
), &(
bôs
), sèã.
w‹k
);

80 
	`puts
(" /* inffix9.h --Åable for decoding deflate64 fixed codes");

81 
	`puts
(" * Generatedáutomatically by makefixed9().");

82 
	`puts
(" */");

83 
	`puts
("");

84 
	`puts
(" /* WARNING:Åhis file should *not* be used byápplications.");

85 
	`puts
(" It isÖart ofÅhe implementation ofÅhisÜibraryánd is");

86 
	`puts
(" subjectÅo change. Applications should only use zlib.h.");

87 
	`puts
(" */");

88 
	`puts
("");

89 
size
 = 1U << 9;

90 
	`¥ötf
(" sèti¯c⁄° codêÀnfix[%u] = {", 
size
);

91 
low
 = 0;

93 i‡((
low
 % 6Ë=0Ë
	`¥ötf
("\n ");

94 
	`¥ötf
("{%u,%u,%d}", 
Ànfix
[
low
].
›
,Üífix[low].
bôs
,

95 
Ànfix
[
low
].
vÆ
);

96 i‡(++
low
 =
size
) ;

97 
	`putch¨
(',');

99 
	`puts
("\n };");

100 
size
 = 1U << 5;

101 
	`¥ötf
("\¿ sèti¯c⁄° codêdi°fix[%u] = {", 
size
);

102 
low
 = 0;

104 i‡((
low
 % 5Ë=0Ë
	`¥ötf
("\n ");

105 
	`¥ötf
("{%u,%u,%d}", 
di°fix
[
low
].
›
, di°fix[low].
bôs
,

106 
di°fix
[
low
].
vÆ
);

107 i‡(++
low
 =
size
) ;

108 
	`putch¨
(',');

110 
	`puts
("\n };");

111 
	}
}

117 
	#INITBITS
() \

119 
hﬁd
 = 0; \

120 
bôs
 = 0; \

121 } 0)

	)

125 
	#PULL
() \

127 i‡(
have
 == 0) { \

128 
have
 = 
	`ö
(
ö_desc
, &
√xt
); \

129 i‡(
have
 == 0) { \

130 
√xt
 = 
Z_NULL
; \

131 
ªt
 = 
Z_BUF_ERROR
; \

132 
öf_Àave
; \

135 } 0)

	)

139 
	#PULLBYTE
() \

141 
	`PULL
(); \

142 
have
--; \

143 
hﬁd
 +()(*
√xt
++Ë<< 
bôs
; \

144 
bôs
 += 8; \

145 } 0)

	)

150 
	#NEEDBITS
(
n
) \

152 
bôs
 < ()(
n
)) \

153 
	`PULLBYTE
(); \

154 } 0)

	)

157 
	#BITS
(
n
) \

158 (()
hﬁd
 & ((1U << (
n
)Ë- 1))

	)

161 
	#DROPBITS
(
n
) \

163 
hﬁd
 >>(
n
); \

164 
bôs
 -()(
n
); \

165 } 0)

	)

168 
	#BYTEBITS
() \

170 
hﬁd
 >>
bôs
 & 7; \

171 
bôs
 -= bits & 7; \

172 } 0)

	)

177 
	#ROOM
() \

179 i‡(
À·
 == 0) { \

180 
put
 = 
wödow
; \

181 
À·
 = 
WSIZE
; \

182 
wøp
 = 1; \

183 i‡(
	`out
(
out_desc
, 
put
, ()
À·
)) { \

184 
ªt
 = 
Z_BUF_ERROR
; \

185 
öf_Àave
; \

188 } 0)

	)

217 
ZEXPORT
 
	$öÊ©eBack9
(
°rm
, 
ö
, 
ö_desc
, 
out
, 
out_desc
)

218 
z_°ªam
 
FAR
 *
°rm
;

219 
ö_func
 
ö
;

220 
FAR
 *
ö_desc
;

221 
out_func
 
out
;

222 
FAR
 *
out_desc
;

224 
öÊ©e_°©e
 
FAR
 *
°©e
;

225 
z_c⁄°
 
FAR
 *
√xt
;

226 
FAR
 *
put
;

227 
have
;

228 
À·
;

229 
öÊ©e_mode
 
mode
;

230 
œ°block
;

231 
wøp
;

232 
FAR
 *
wödow
;

233 
hﬁd
;

234 
bôs
;

235 
exåa
;

236 
Àngth
;

237 
off£t
;

238 
c›y
;

239 
FAR
 *
‰om
;

240 
code
 c⁄° 
FAR
 *
Àncode
;

241 
code
 c⁄° 
FAR
 *
di°code
;

242 
Ànbôs
;

243 
di°bôs
;

244 
code
 
hîe
;

245 
code
 
œ°
;

246 
Àn
;

247 
ªt
;

248 c⁄° 
‹dî
[19] =

250 
	~"öffix9.h
"

253 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL)

254  
Z_STREAM_ERROR
;

255 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

258 
°rm
->
msg
 = 
Z_NULL
;

259 
mode
 = 
TYPE
;

260 
œ°block
 = 0;

261 
wøp
 = 0;

262 
wödow
 = 
°©e
->window;

263 
√xt
 = 
°rm
->
√xt_ö
;

264 
have
 = 
√xt
 !
Z_NULL
 ? 
°rm
->
avaû_ö
 : 0;

265 
hﬁd
 = 0;

266 
bôs
 = 0;

267 
put
 = 
wödow
;

268 
À·
 = 
WSIZE
;

269 
Àncode
 = 
Z_NULL
;

270 
di°code
 = 
Z_NULL
;

274 
mode
) {

275 
TYPE
:

277 i‡(
œ°block
) {

278 
	`BYTEBITS
();

279 
mode
 = 
DONE
;

282 
	`NEEDBITS
(3);

283 
œ°block
 = 
	`BITS
(1);

284 
	`DROPBITS
(1);

285 
	`BITS
(2)) {

287 
	`Tø˚v
((
°dîr
, "inflate: stored block%s\n",

288 
œ°block
 ? " (last)" : ""));

289 
mode
 = 
STORED
;

292 
Àncode
 = 
Ànfix
;

293 
Ànbôs
 = 9;

294 
di°code
 = 
di°fix
;

295 
di°bôs
 = 5;

296 
	`Tø˚v
((
°dîr
, "inflate: fixed codes block%s\n",

297 
œ°block
 ? " (last)" : ""));

298 
mode
 = 
LEN
;

301 
	`Tø˚v
((
°dîr
, "inflate: dynamic codes block%s\n",

302 
œ°block
 ? " (last)" : ""));

303 
mode
 = 
TABLE
;

306 
°rm
->
msg
 = (*)"invalid blockÅype";

307 
mode
 = 
BAD
;

309 
	`DROPBITS
(2);

312 
STORED
:

314 
	`BYTEBITS
();

315 
	`NEEDBITS
(32);

316 i‡((
hﬁd
 & 0xffff) != ((hold >> 16) ^ 0xffff)) {

317 
°rm
->
msg
 = (*)"invalid stored blockÜengths";

318 
mode
 = 
BAD
;

321 
Àngth
 = ()
hﬁd
 & 0xffff;

322 
	`Tø˚v
((
°dîr
, "inflate: storedÜength %lu\n",

323 
Àngth
));

324 
	`INITBITS
();

327 
Àngth
 != 0) {

328 
c›y
 = 
Àngth
;

329 
	`PULL
();

330 
	`ROOM
();

331 i‡(
c›y
 > 
have
) copy = have;

332 i‡(
c›y
 > 
À·
) copy =Üeft;

333 
	`zmem˝y
(
put
, 
√xt
, 
c›y
);

334 
have
 -
c›y
;

335 
√xt
 +
c›y
;

336 
À·
 -
c›y
;

337 
put
 +
c›y
;

338 
Àngth
 -
c›y
;

340 
	`Tø˚v
((
°dîr
, "inflate: storedÉnd\n"));

341 
mode
 = 
TYPE
;

344 
TABLE
:

346 
	`NEEDBITS
(14);

347 
°©e
->
∆í
 = 
	`BITS
(5) + 257;

348 
	`DROPBITS
(5);

349 
°©e
->
ndi°
 = 
	`BITS
(5) + 1;

350 
	`DROPBITS
(5);

351 
°©e
->
ncode
 = 
	`BITS
(4) + 4;

352 
	`DROPBITS
(4);

353 i‡(
°©e
->
∆í
 > 286) {

354 
°rm
->
msg
 = (*)"too manyÜength symbols";

355 
mode
 = 
BAD
;

358 
	`Tø˚v
((
°dîr
, "inflate:Åable sizes ok\n"));

361 
°©e
->
have
 = 0;

362 
°©e
->
have
 < sèã->
ncode
) {

363 
	`NEEDBITS
(3);

364 
°©e
->
Àns
[
‹dî
[°©e->
have
++]] = ()
	`BITS
(3);

365 
	`DROPBITS
(3);

367 
°©e
->
have
 < 19)

368 
°©e
->
Àns
[
‹dî
[°©e->
have
++]] = 0;

369 
°©e
->
√xt
 = sèã->
codes
;

370 
Àncode
 = (
code
 c⁄° 
FAR
 *)(
°©e
->
√xt
);

371 
Ànbôs
 = 7;

372 
ªt
 = 
	`öÊ©e_èbÀ9
(
CODES
, 
°©e
->
Àns
, 19, &(°©e->
√xt
),

373 &(
Ànbôs
), 
°©e
->
w‹k
);

374 i‡(
ªt
) {

375 
°rm
->
msg
 = (*)"invalid codeÜengths set";

376 
mode
 = 
BAD
;

379 
	`Tø˚v
((
°dîr
, "inflate: codeÜengths ok\n"));

382 
°©e
->
have
 = 0;

383 
°©e
->
have
 < sèã->
∆í
 + sèã->
ndi°
) {

385 
hîe
 = 
Àncode
[
	`BITS
(
Ànbôs
)];

386 i‡(()(
hîe
.
bôs
) <= bits) ;

387 
	`PULLBYTE
();

389 i‡(
hîe
.
vÆ
 < 16) {

390 
	`NEEDBITS
(
hîe
.
bôs
);

391 
	`DROPBITS
(
hîe
.
bôs
);

392 
°©e
->
Àns
[°©e->
have
++] = 
hîe
.
vÆ
;

395 i‡(
hîe
.
vÆ
 == 16) {

396 
	`NEEDBITS
(
hîe
.
bôs
 + 2);

397 
	`DROPBITS
(
hîe
.
bôs
);

398 i‡(
°©e
->
have
 == 0) {

399 
°rm
->
msg
 = (*)"invalid bitÜengthÑepeat";

400 
mode
 = 
BAD
;

403 
Àn
 = ()(
°©e
->
Àns
[°©e->
have
 - 1]);

404 
c›y
 = 3 + 
	`BITS
(2);

405 
	`DROPBITS
(2);

407 i‡(
hîe
.
vÆ
 == 17) {

408 
	`NEEDBITS
(
hîe
.
bôs
 + 3);

409 
	`DROPBITS
(
hîe
.
bôs
);

410 
Àn
 = 0;

411 
c›y
 = 3 + 
	`BITS
(3);

412 
	`DROPBITS
(3);

415 
	`NEEDBITS
(
hîe
.
bôs
 + 7);

416 
	`DROPBITS
(
hîe
.
bôs
);

417 
Àn
 = 0;

418 
c›y
 = 11 + 
	`BITS
(7);

419 
	`DROPBITS
(7);

421 i‡(
°©e
->
have
 + 
c›y
 > sèã->
∆í
 + sèã->
ndi°
) {

422 
°rm
->
msg
 = (*)"invalid bitÜengthÑepeat";

423 
mode
 = 
BAD
;

426 
c›y
--)

427 
°©e
->
Àns
[°©e->
have
++] = ()
Àn
;

432 i‡(
mode
 =
BAD
) ;

435 i‡(
°©e
->
Àns
[256] == 0) {

436 
°rm
->
msg
 = (*)"invalid code -- missingÉnd-of-block";

437 
mode
 = 
BAD
;

444 
°©e
->
√xt
 = sèã->
codes
;

445 
Àncode
 = (
code
 c⁄° 
FAR
 *)(
°©e
->
√xt
);

446 
Ànbôs
 = 9;

447 
ªt
 = 
	`öÊ©e_èbÀ9
(
LENS
, 
°©e
->
Àns
, sèã->
∆í
,

448 &(
°©e
->
√xt
), &(
Ànbôs
), sèã->
w‹k
);

449 i‡(
ªt
) {

450 
°rm
->
msg
 = (*)"invalidÜiteral/lengths set";

451 
mode
 = 
BAD
;

454 
di°code
 = (
code
 c⁄° 
FAR
 *)(
°©e
->
√xt
);

455 
di°bôs
 = 6;

456 
ªt
 = 
	`öÊ©e_èbÀ9
(
DISTS
, 
°©e
->
Àns
 + sèã->
∆í
,

457 
°©e
->
ndi°
, &(°©e->
√xt
), &(
di°bôs
),

458 
°©e
->
w‹k
);

459 i‡(
ªt
) {

460 
°rm
->
msg
 = (*)"invalid distances set";

461 
mode
 = 
BAD
;

464 
	`Tø˚v
((
°dîr
, "inflate: codes ok\n"));

465 
mode
 = 
LEN
;

467 
LEN
:

470 
hîe
 = 
Àncode
[
	`BITS
(
Ànbôs
)];

471 i‡(()(
hîe
.
bôs
) <= bits) ;

472 
	`PULLBYTE
();

474 i‡(
hîe
.
›
 && (here.op & 0xf0) == 0) {

475 
œ°
 = 
hîe
;

477 
hîe
 = 
Àncode
[
œ°
.
vÆ
 +

478 (
	`BITS
(
œ°
.
bôs
 +Üa°.
›
) >>Üast.bits)];

479 i‡(()(
œ°
.
bôs
 + 
hîe
.bits) <= bits) ;

480 
	`PULLBYTE
();

482 
	`DROPBITS
(
œ°
.
bôs
);

484 
	`DROPBITS
(
hîe
.
bôs
);

485 
Àngth
 = ()
hîe
.
vÆ
;

488 i‡(
hîe
.
›
 == 0) {

489 
	`Tø˚vv
((
°dîr
, 
hîe
.
vÆ
 >= 0x20 && here.val < 0x7f ?

491 "öÊ©e:ÜôîÆ 0x%02x\n", 
hîe
.
vÆ
));

492 
	`ROOM
();

493 *
put
++ = ()(
Àngth
);

494 
À·
--;

495 
mode
 = 
LEN
;

500 i‡(
hîe
.
›
 & 32) {

501 
	`Tø˚vv
((
°dîr
, "inflate:Énd of block\n"));

502 
mode
 = 
TYPE
;

507 i‡(
hîe
.
›
 & 64) {

508 
°rm
->
msg
 = (*)"invalidÜiteral/length code";

509 
mode
 = 
BAD
;

514 
exåa
 = ()(
hîe
.
›
) & 31;

515 i‡(
exåa
 != 0) {

516 
	`NEEDBITS
(
exåa
);

517 
Àngth
 +
	`BITS
(
exåa
);

518 
	`DROPBITS
(
exåa
);

520 
	`Tø˚vv
((
°dîr
, "öÊ©e:Üígth %lu\n", 
Àngth
));

524 
hîe
 = 
di°code
[
	`BITS
(
di°bôs
)];

525 i‡(()(
hîe
.
bôs
) <= bits) ;

526 
	`PULLBYTE
();

528 i‡((
hîe
.
›
 & 0xf0) == 0) {

529 
œ°
 = 
hîe
;

531 
hîe
 = 
di°code
[
œ°
.
vÆ
 +

532 (
	`BITS
(
œ°
.
bôs
 +Üa°.
›
) >>Üast.bits)];

533 i‡(()(
œ°
.
bôs
 + 
hîe
.bits) <= bits) ;

534 
	`PULLBYTE
();

536 
	`DROPBITS
(
œ°
.
bôs
);

538 
	`DROPBITS
(
hîe
.
bôs
);

539 i‡(
hîe
.
›
 & 64) {

540 
°rm
->
msg
 = (*)"invalid distance code";

541 
mode
 = 
BAD
;

544 
off£t
 = ()
hîe
.
vÆ
;

547 
exåa
 = ()(
hîe
.
›
) & 15;

548 i‡(
exåa
 != 0) {

549 
	`NEEDBITS
(
exåa
);

550 
off£t
 +
	`BITS
(
exåa
);

551 
	`DROPBITS
(
exåa
);

553 i‡(
off£t
 > 
WSIZE
 - (
wøp
 ? 0: 
À·
)) {

554 
°rm
->
msg
 = (*)"invalid distanceÅoo far back";

555 
mode
 = 
BAD
;

558 
	`Tø˚vv
((
°dîr
, "öÊ©e: di°™˚ %lu\n", 
off£t
));

562 
	`ROOM
();

563 
c›y
 = 
WSIZE
 - 
off£t
;

564 i‡(
c›y
 < 
À·
) {

565 
‰om
 = 
put
 + 
c›y
;

566 
c›y
 = 
À·
 - copy;

569 
‰om
 = 
put
 - 
off£t
;

570 
c›y
 = 
À·
;

572 i‡(
c›y
 > 
Àngth
) copy =Üength;

573 
Àngth
 -
c›y
;

574 
À·
 -
c›y
;

576 *
put
++ = *
‰om
++;

577 } --
c›y
);

578 } 
Àngth
 != 0);

581 
DONE
:

583 
ªt
 = 
Z_STREAM_END
;

584 i‡(
À·
 < 
WSIZE
) {

585 i‡(
	`out
(
out_desc
, 
wödow
, ()(
WSIZE
 - 
À·
)))

586 
ªt
 = 
Z_BUF_ERROR
;

588 
öf_Àave
;

590 
BAD
:

591 
ªt
 = 
Z_DATA_ERROR
;

592 
öf_Àave
;

595 
ªt
 = 
Z_STREAM_ERROR
;

596 
öf_Àave
;

600 
öf_Àave
:

601 
°rm
->
√xt_ö
 = 
√xt
;

602 
°rm
->
avaû_ö
 = 
have
;

603  
ªt
;

604 
	}
}

606 
ZEXPORT
 
	$öÊ©eBack9End
(
°rm
)

607 
z_°ªam
 
FAR
 *
°rm
;

609 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULL || såm->
z‰ì
 =(
‰ì_func
)0)

610  
Z_STREAM_ERROR
;

611 
	`ZFREE
(
°rm
, såm->
°©e
);

612 
°rm
->
°©e
 = 
Z_NULL
;

613 
	`Tø˚v
((
°dîr
, "inflate:Énd\n"));

614  
Z_OK
;

615 
	}
}

	@zlib-1.2.8/contrib/infback9/infback9.h

19 #ifde‡
__˝lu•lus


23 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack9
 
OF
((
z_°ªam
 
FAR
 *
°rm
,

24 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

25 
out_func
 
out
, 
FAR
 *
out_desc
));

26 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack9End
 
OF
((
z_°ªam
 
FAR
 *
°rm
));

27 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack9Inô_
 
OF
((
z_°ªam
 
FAR
 *
°rm
,

28 
FAR
 *
wödow
,

29 c⁄° *
vîsi⁄
,

30 
°ªam_size
));

31 
	#öÊ©eBack9Inô
(
°rm
, 
wödow
) \

32 
	`öÊ©eBack9Inô_
((
°rm
), (
wödow
), \

33 
ZLIB_VERSION
, (
z_°ªam
))

	)

35 #ifde‡
__˝lu•lus


	@zlib-1.2.8/contrib/infback9/inffix9.h

10 c⁄° 
code
 
	gÀnfix
[512] = {

99 c⁄° 
code
 
	gdi°fix
[32] = {

	@zlib-1.2.8/contrib/infback9/inflate9.h

13 
	mTYPE
,

14 
	mSTORED
,

15 
	mTABLE
,

16 
	mLEN
,

17 
	mDONE
,

18 
	mBAD


19 } 
	töÊ©e_mode
;

35 
	söÊ©e_°©e
 {

37 
FAR
 *
	mwödow
;

39 
	mncode
;

40 
	m∆í
;

41 
	mndi°
;

42 
	mhave
;

43 
code
 
FAR
 *
	m√xt
;

44 
	mÀns
[320];

45 
	mw‹k
[288];

46 
code
 
	mcodes
[
ENOUGH
];

	@zlib-1.2.8/contrib/infback9/inftree9.c

6 
	~"zutû.h
"

7 
	~"ö·ªe9.h
"

9 
	#MAXBITS
 15

	)

11 c⁄° 
	göÊ©e9_c›yright
[] =

32 
	$öÊ©e_èbÀ9
(
ty≥
, 
Àns
, 
codes
, 
èbÀ
, 
bôs
, 
w‹k
)

33 
codëy≥
 
ty≥
;

34 
FAR
 *
Àns
;

35 
codes
;

36 
code
 
FAR
 * FAR *
èbÀ
;

37 
FAR
 *
bôs
;

38 
FAR
 *
w‹k
;

40 
Àn
;

41 
sym
;

42 
mö
, 
max
;

43 
roŸ
;

44 
cuº
;

45 
dr›
;

46 
À·
;

47 
u£d
;

48 
huff
;

49 
ö¸
;

50 
fûl
;

51 
low
;

52 
mask
;

53 
code
 
this
;

54 
code
 
FAR
 *
√xt
;

55 c⁄° 
FAR
 *
ba£
;

56 c⁄° 
FAR
 *
exåa
;

57 
íd
;

58 
cou¡
[
MAXBITS
+1];

59 
offs
[
MAXBITS
+1];

60 c⁄° 
lba£
[31] = {

64 c⁄° 
Àxt
[31] = {

68 c⁄° 
dba£
[32] = {

72 c⁄° 
dext
[32] = {

109 
Àn
 = 0;Üí <
MAXBITS
;Üen++)

110 
cou¡
[
Àn
] = 0;

111 
sym
 = 0; sym < 
codes
; sym++)

112 
cou¡
[
Àns
[
sym
]]++;

115 
roŸ
 = *
bôs
;

116 
max
 = 
MAXBITS
; max >= 1; max--)

117 i‡(
cou¡
[
max
] != 0) ;

118 i‡(
roŸ
 > 
max
)Ñoot = max;

119 i‡(
max
 == 0)  -1;

120 
mö
 = 1; mö <
MAXBITS
; min++)

121 i‡(
cou¡
[
mö
] != 0) ;

122 i‡(
roŸ
 < 
mö
)Ñoot = min;

125 
À·
 = 1;

126 
Àn
 = 1;Üí <
MAXBITS
;Üen++) {

127 
À·
 <<= 1;

128 
À·
 -
cou¡
[
Àn
];

129 i‡(
À·
 < 0)  -1;

131 i‡(
À·
 > 0 && (
ty≥
 =
CODES
 || 
max
 != 1))

135 
offs
[1] = 0;

136 
Àn
 = 1;Üí < 
MAXBITS
;Üen++)

137 
offs
[
Àn
 + 1] = offs[Àn] + 
cou¡
[len];

140 
sym
 = 0; sym < 
codes
; sym++)

141 i‡(
Àns
[
sym
] !0Ë
w‹k
[
offs
[lens[sym]]++] = ()sym;

175 
ty≥
) {

176 
CODES
:

177 
ba£
 = 
exåa
 = 
w‹k
;

178 
íd
 = 19;

180 
LENS
:

181 
ba£
 = 
lba£
;

182 
ba£
 -= 257;

183 
exåa
 = 
Àxt
;

184 
exåa
 -= 257;

185 
íd
 = 256;

188 
ba£
 = 
dba£
;

189 
exåa
 = 
dext
;

190 
íd
 = -1;

194 
huff
 = 0;

195 
sym
 = 0;

196 
Àn
 = 
mö
;

197 
√xt
 = *
èbÀ
;

198 
cuº
 = 
roŸ
;

199 
dr›
 = 0;

200 
low
 = ()(-1);

201 
u£d
 = 1U << 
roŸ
;

202 
mask
 = 
u£d
 - 1;

205 i‡((
ty≥
 =
LENS
 && 
u£d
 >
ENOUGH_LENS
) ||

206 (
ty≥
 =
DISTS
 && 
u£d
 >
ENOUGH_DISTS
))

212 
this
.
bôs
 = ()(
Àn
 - 
dr›
);

213 i‡(()(
w‹k
[
sym
]Ë< 
íd
) {

214 
this
.
›
 = ()0;

215 
this
.
vÆ
 = 
w‹k
[
sym
];

217 i‡(()(
w‹k
[
sym
]Ë> 
íd
) {

218 
this
.
›
 = ()(
exåa
[
w‹k
[
sym
]]);

219 
this
.
vÆ
 = 
ba£
[
w‹k
[
sym
]];

222 
this
.
›
 = ()(32 + 64);

223 
this
.
vÆ
 = 0;

227 
ö¸
 = 1U << (
Àn
 - 
dr›
);

228 
fûl
 = 1U << 
cuº
;

230 
fûl
 -
ö¸
;

231 
√xt
[(
huff
 >> 
dr›
Ë+ 
fûl
] = 
this
;

232 } 
fûl
 != 0);

235 
ö¸
 = 1U << (
Àn
 - 1);

236 
huff
 & 
ö¸
)

237 
ö¸
 >>= 1;

238 i‡(
ö¸
 != 0) {

239 
huff
 &
ö¸
 - 1;

240 
huff
 +
ö¸
;

243 
huff
 = 0;

246 
sym
++;

247 i‡(--(
cou¡
[
Àn
]) == 0) {

248 i‡(
Àn
 =
max
) ;

249 
Àn
 = 
Àns
[
w‹k
[
sym
]];

253 i‡(
Àn
 > 
roŸ
 && (
huff
 & 
mask
Ë!
low
) {

255 i‡(
dr›
 == 0)

256 
dr›
 = 
roŸ
;

259 
√xt
 +1U << 
cuº
;

262 
cuº
 = 
Àn
 - 
dr›
;

263 
À·
 = ()(1 << 
cuº
);

264 
cuº
 + 
dr›
 < 
max
) {

265 
À·
 -
cou¡
[
cuº
 + 
dr›
];

266 i‡(
À·
 <= 0) ;

267 
cuº
++;

268 
À·
 <<= 1;

272 
u£d
 +1U << 
cuº
;

273 i‡((
ty≥
 =
LENS
 && 
u£d
 >
ENOUGH_LENS
) ||

274 (
ty≥
 =
DISTS
 && 
u£d
 >
ENOUGH_DISTS
))

278 
low
 = 
huff
 & 
mask
;

279 (*
èbÀ
)[
low
].
›
 = ()
cuº
;

280 (*
èbÀ
)[
low
].
bôs
 = ()
roŸ
;

281 (*
èbÀ
)[
low
].
vÆ
 = ()(
√xt
 - *table);

292 
this
.
›
 = ()64;

293 
this
.
bôs
 = ()(
Àn
 - 
dr›
);

294 
this
.
vÆ
 = ()0;

295 
huff
 != 0) {

297 i‡(
dr›
 !0 && (
huff
 & 
mask
Ë!
low
) {

298 
dr›
 = 0;

299 
Àn
 = 
roŸ
;

300 
√xt
 = *
èbÀ
;

301 
cuº
 = 
roŸ
;

302 
this
.
bôs
 = ()
Àn
;

306 
√xt
[
huff
 >> 
dr›
] = 
this
;

309 
ö¸
 = 1U << (
Àn
 - 1);

310 
huff
 & 
ö¸
)

311 
ö¸
 >>= 1;

312 i‡(
ö¸
 != 0) {

313 
huff
 &
ö¸
 - 1;

314 
huff
 +
ö¸
;

317 
huff
 = 0;

321 *
èbÀ
 +
u£d
;

322 *
bôs
 = 
roŸ
;

324 
	}
}

	@zlib-1.2.8/contrib/infback9/inftree9.h

25 
	m›
;

26 
	mbôs
;

27 
	mvÆ
;

28 } 
	tcode
;

48 
	#ENOUGH_LENS
 852

	)

49 
	#ENOUGH_DISTS
 594

	)

50 
	#ENOUGH
 (
ENOUGH_LENS
+
ENOUGH_DISTS
)

	)

54 
	mCODES
,

55 
	mLENS
,

56 
	mDISTS


57 } 
	tcodëy≥
;

59 
öÊ©e_èbÀ9
 
OF
((
codëy≥
 
ty≥
, 
FAR
 *
Àns
,

60 
codes
, 
code
 
FAR
 * FAR *
èbÀ
,

61 
FAR
 *
bôs
, FAR *
w‹k
));

	@zlib-1.2.8/contrib/inflate86/inffas86.c

29 
	~"zutû.h
"

30 
	~"ö·ªes.h
"

31 
	~"öÊ©e.h
"

32 
	~"öfÁ°.h
"

71 
	$öÊ©e_Á°
(
°rm
, 
°¨t
)

72 
z_°ªamp
 
°rm
;

73 
°¨t
;

75 
öÊ©e_°©e
 
FAR
 *
°©e
;

76 
	söfÁ°_¨
 {

79  *
e•
;

80  *
ebp
;

81  
FAR
 *
ö
;

82  
FAR
 *
œ°
;

83  
FAR
 *
out
;

84  
FAR
 *
beg
;

85  
FAR
 *
íd
;

86  
FAR
 *
wödow
;

87  
code
 c⁄° 
FAR
 *
lcode
;

88  
code
 c⁄° 
FAR
 *
dcode
;

89  
hﬁd
;

90  
bôs
;

91  
wsize
;

92  
wrôe
;

93  
lmask
;

94  
dmask
;

95  
Àn
;

96  
di°
;

97  
°©us
;

98 } 
¨
;

100 #i‡
	`deföed
–
__GNUC__
 ) && deföed–
__amd64__
 ) && ! deföed–
__i386
 )

101 
	#PAD_AVAIL_IN
 6

	)

102 
	#PAD_AVAIL_OUT
 258

	)

104 
	#PAD_AVAIL_IN
 5

	)

105 
	#PAD_AVAIL_OUT
 257

	)

109 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

110 
¨
.
ö
 = 
°rm
->
√xt_ö
;

111 
¨
.
œ°
 =ár.
ö
 + (
°rm
->
avaû_ö
 - 
PAD_AVAIL_IN
);

112 
¨
.
out
 = 
°rm
->
√xt_out
;

113 
¨
.
beg
 =ár.
out
 - (
°¨t
 - 
°rm
->
avaû_out
);

114 
¨
.
íd
 =ár.
out
 + (
°rm
->
avaû_out
 - 
PAD_AVAIL_OUT
);

115 
¨
.
wsize
 = 
°©e
->wsize;

116 
¨
.
wrôe
 = 
°©e
->
w√xt
;

117 
¨
.
wödow
 = 
°©e
->window;

118 
¨
.
hﬁd
 = 
°©e
->hold;

119 
¨
.
bôs
 = 
°©e
->bits;

120 
¨
.
lcode
 = 
°©e
->
Àncode
;

121 
¨
.
dcode
 = 
°©e
->
di°code
;

122 
¨
.
lmask
 = (1U << 
°©e
->
Ànbôs
) - 1;

123 
¨
.
dmask
 = (1U << 
°©e
->
di°bôs
) - 1;

129 (()(*)
¨
.
ö
 & (◊r.
hﬁd
) / 2 - 1)) != 0) {

130 
¨
.
hﬁd
 +()*¨.
ö
++ <<ár.
bôs
;

131 
¨
.
bôs
 += 8;

134 #i‡
	`deföed
–
__GNUC__
 ) && deföed–
__amd64__
 ) && ! deföed–
__i386
 )

135 
__asm__
 
	`__vﬁ©ûe__
 (

466 : "m" (
¨
)

470 #ñi‡–
	`deföed
–
__GNUC__
 ) || deföed–
__ICC
 ) ) && deföed–
__i386
 )

471 
__asm__
 
	`__vﬁ©ûe__
 (

794 : "m" (
¨
)

797 #ñi‡
	`deföed
–
_MSC_VER
 ) && ! deföed–
_M_AMD64
 )

798 
__asm
 {

799 
Àa
 
óx
, 
¨


800 
mov
 [
óx
], 
e•


801 
mov
 [
óx
+4], 
ebp


802 
mov
 
e•
, 
óx


803 
mov
 
esi
, [
e•
+8]

804 
mov
 
edi
, [
e•
+16]

805 
mov
 
edx
, [
e•
+40]

806 
mov
 
ebx
, [
e•
+44]

807 
mov
 
ebp
, [
e•
+32]

809 
˛d


810 
jmp
 
L_do_lo›


812 
ALIGN
 4

813 
L_whûe_ã°
:

814 
cmp
 [
e•
+24], 
edi


815 
jbe
 
L_bªak_lo›


816 
cmp
 [
e•
+12], 
esi


817 
jbe
 
L_bªak_lo›


819 
L_do_lo›
:

820 
cmp
 
bl
, 15

821 
ja
 
L_gë_Àngth_code


823 
x‹
 
óx
,Éax

824 
lodsw


825 
mov
 
˛
, 
bl


826 
add
 
bl
, 16

827 
shl
 
óx
, 
˛


828 
‹
 
edx
, 
óx


830 
L_gë_Àngth_code
:

831 
mov
 
óx
, [
e•
+56]

832 
™d
 
óx
, 
edx


833 
mov
 
óx
, [
ebp
+eax*4]

835 
L_dﬁí
:

836 
mov
 
˛
, 
ah


837 
sub
 
bl
, 
ah


838 
shr
 
edx
, 
˛


840 
ã°
 
Æ
,ál

841 
jnz
 
L_ã°_f‹_Àngth_ba£


843 
shr
 
óx
, 16

844 
°osb


845 
jmp
 
L_whûe_ã°


847 
ALIGN
 4

848 
L_ã°_f‹_Àngth_ba£
:

849 
mov
 
ecx
, 
óx


850 
shr
 
ecx
, 16

851 
mov
 [
e•
+64], 
ecx


852 
mov
 
˛
, 
Æ


854 
ã°
 
Æ
, 16

855 
jz
 
L_ã°_f‹_£c⁄d_Àvñ_Àngth


856 
™d
 
˛
, 15

857 
jz
 
L_decode_di°™˚


858 
cmp
 
bl
, 
˛


859 
j´
 
L_add_bôs_to_Àn


861 
mov
 
ch
, 
˛


862 
x‹
 
óx
,Éax

863 
lodsw


864 
mov
 
˛
, 
bl


865 
add
 
bl
, 16

866 
shl
 
óx
, 
˛


867 
‹
 
edx
, 
óx


868 
mov
 
˛
, 
ch


870 
L_add_bôs_to_Àn
:

871 
sub
 
bl
, 
˛


872 
x‹
 
óx
,Éax

873 
öc
 
óx


874 
shl
 
óx
, 
˛


875 
dec
 
óx


876 
™d
 
óx
, 
edx


877 
shr
 
edx
, 
˛


878 
add
 [
e•
+64], 
óx


880 
L_decode_di°™˚
:

881 
cmp
 
bl
, 15

882 
ja
 
L_gë_di°™˚_code


884 
x‹
 
óx
,Éax

885 
lodsw


886 
mov
 
˛
, 
bl


887 
add
 
bl
, 16

888 
shl
 
óx
, 
˛


889 
‹
 
edx
, 
óx


891 
L_gë_di°™˚_code
:

892 
mov
 
óx
, [
e•
+60]

893 
mov
 
ecx
, [
e•
+36]

894 
™d
 
óx
, 
edx


895 
mov
 
óx
, [
ecx
+eax*4]

897 
L_dodi°
:

898 
mov
 
ebp
, 
óx


899 
shr
 
ebp
, 16

900 
mov
 
˛
, 
ah


901 
sub
 
bl
, 
ah


902 
shr
 
edx
, 
˛


903 
mov
 
˛
, 
Æ


905 
ã°
 
Æ
, 16

906 
jz
 
L_ã°_f‹_£c⁄d_Àvñ_di°


907 
™d
 
˛
, 15

908 
jz
 
L_check_di°_⁄e


909 
cmp
 
bl
, 
˛


910 
j´
 
L_add_bôs_to_di°


912 
mov
 
ch
, 
˛


913 
x‹
 
óx
,Éax

914 
lodsw


915 
mov
 
˛
, 
bl


916 
add
 
bl
, 16

917 
shl
 
óx
, 
˛


918 
‹
 
edx
, 
óx


919 
mov
 
˛
, 
ch


921 
L_add_bôs_to_di°
:

922 
sub
 
bl
, 
˛


923 
x‹
 
óx
,Éax

924 
öc
 
óx


925 
shl
 
óx
, 
˛


926 
dec
 
óx


927 
™d
 
óx
, 
edx


928 
shr
 
edx
, 
˛


929 
add
 
ebp
, 
óx


931 
L_check_wödow
:

932 
mov
 [
e•
+8], 
esi


933 
mov
 
óx
, 
edi


934 
sub
 
óx
, [
e•
+20]

936 
cmp
 
óx
, 
ebp


937 
jb
 
L_˛ù_wödow


939 
mov
 
ecx
, [
e•
+64]

940 
mov
 
esi
, 
edi


941 
sub
 
esi
, 
ebp


943 
ßr
 
ecx
, 1

944 
jnc
 
L_c›y_two


946 
ªp
 
movsw


947 
mov
 
Æ
, [
esi
]

948 
mov
 [
edi
], 
Æ


949 
öc
 
edi


951 
mov
 
esi
, [
e•
+8]

952 
mov
 
ebp
, [
e•
+32]

953 
jmp
 
L_whûe_ã°


955 
L_c›y_two
:

956 
ªp
 
movsw


957 
mov
 
esi
, [
e•
+8]

958 
mov
 
ebp
, [
e•
+32]

959 
jmp
 
L_whûe_ã°


961 
ALIGN
 4

962 
L_check_di°_⁄e
:

963 
cmp
 
ebp
, 1

964 
j√
 
L_check_wödow


965 
cmp
 [
e•
+20], 
edi


966 
je
 
L_check_wödow


968 
mov
 
ecx
, [
e•
+64]

969 
mov
 
Æ
, [
edi
-1]

970 
mov
 
ah
, 
Æ


972 
ßr
 
ecx
, 1

973 
jnc
 
L_£t_two


974 
mov
 [
edi
], 
Æ


975 
öc
 
edi


977 
L_£t_two
:

978 
ªp
 
°osw


979 
mov
 
ebp
, [
e•
+32]

980 
jmp
 
L_whûe_ã°


982 
ALIGN
 4

983 
L_ã°_f‹_£c⁄d_Àvñ_Àngth
:

984 
ã°
 
Æ
, 64

985 
jnz
 
L_ã°_f‹_íd_of_block


987 
x‹
 
óx
,Éax

988 
öc
 
óx


989 
shl
 
óx
, 
˛


990 
dec
 
óx


991 
™d
 
óx
, 
edx


992 
add
 
óx
, [
e•
+64]

993 
mov
 
óx
, [
ebp
+eax*4]

994 
jmp
 
L_dﬁí


996 
ALIGN
 4

997 
L_ã°_f‹_£c⁄d_Àvñ_di°
:

998 
ã°
 
Æ
, 64

999 
jnz
 
L_övÆid_di°™˚_code


1001 
x‹
 
óx
,Éax

1002 
öc
 
óx


1003 
shl
 
óx
, 
˛


1004 
dec
 
óx


1005 
™d
 
óx
, 
edx


1006 
add
 
óx
, 
ebp


1007 
mov
 
ecx
, [
e•
+36]

1008 
mov
 
óx
, [
ecx
+eax*4]

1009 
jmp
 
L_dodi°


1011 
ALIGN
 4

1012 
L_˛ù_wödow
:

1013 
mov
 
ecx
, 
óx


1014 
mov
 
óx
, [
e•
+48]

1015 
√g
 
ecx


1016 
mov
 
esi
, [
e•
+28]

1018 
cmp
 
óx
, 
ebp


1019 
jb
 
L_övÆid_di°™˚_too_Ár


1021 
add
 
ecx
, 
ebp


1022 
cmp
 
dw‹d
 
±r
 [
e•
+52], 0

1023 
j√
 
L_wøp_¨ound_wödow


1025 
sub
 
óx
, 
ecx


1026 
add
 
esi
, 
óx


1028 
mov
 
óx
, [
e•
+64]

1029 
cmp
 
óx
, 
ecx


1030 
jbe
 
L_do_c›y


1032 
sub
 
óx
, 
ecx


1033 
ªp
 
movsb


1034 
mov
 
esi
, 
edi


1035 
sub
 
esi
, 
ebp


1036 
jmp
 
L_do_c›y


1038 
ALIGN
 4

1039 
L_wøp_¨ound_wödow
:

1040 
mov
 
óx
, [
e•
+52]

1041 
cmp
 
ecx
, 
óx


1042 
jbe
 
L_c⁄tiguous_ö_wödow


1044 
add
 
esi
, [
e•
+48]

1045 
add
 
esi
, 
óx


1046 
sub
 
esi
, 
ecx


1047 
sub
 
ecx
, 
óx


1049 
mov
 
óx
, [
e•
+64]

1050 
cmp
 
óx
, 
ecx


1051 
jbe
 
L_do_c›y


1053 
sub
 
óx
, 
ecx


1054 
ªp
 
movsb


1055 
mov
 
esi
, [
e•
+28]

1056 
mov
 
ecx
, [
e•
+52]

1057 
cmp
 
óx
, 
ecx


1058 
jbe
 
L_do_c›y


1060 
sub
 
óx
, 
ecx


1061 
ªp
 
movsb


1062 
mov
 
esi
, 
edi


1063 
sub
 
esi
, 
ebp


1064 
jmp
 
L_do_c›y


1066 
ALIGN
 4

1067 
L_c⁄tiguous_ö_wödow
:

1068 
add
 
esi
, 
óx


1069 
sub
 
esi
, 
ecx


1071 
mov
 
óx
, [
e•
+64]

1072 
cmp
 
óx
, 
ecx


1073 
jbe
 
L_do_c›y


1075 
sub
 
óx
, 
ecx


1076 
ªp
 
movsb


1077 
mov
 
esi
, 
edi


1078 
sub
 
esi
, 
ebp


1079 
jmp
 
L_do_c›y


1081 
ALIGN
 4

1082 
L_do_c›y
:

1083 
mov
 
ecx
, 
óx


1084 
ªp
 
movsb


1086 
mov
 
esi
, [
e•
+8]

1087 
mov
 
ebp
, [
e•
+32]

1088 
jmp
 
L_whûe_ã°


1090 
L_ã°_f‹_íd_of_block
:

1091 
ã°
 
Æ
, 32

1092 
jz
 
L_övÆid_lôîÆ_Àngth_code


1093 
mov
 
dw‹d
 
±r
 [
e•
+72], 1

1094 
jmp
 
L_bªak_lo›_wôh_°©us


1096 
L_övÆid_lôîÆ_Àngth_code
:

1097 
mov
 
dw‹d
 
±r
 [
e•
+72], 2

1098 
jmp
 
L_bªak_lo›_wôh_°©us


1100 
L_övÆid_di°™˚_code
:

1101 
mov
 
dw‹d
 
±r
 [
e•
+72], 3

1102 
jmp
 
L_bªak_lo›_wôh_°©us


1104 
L_övÆid_di°™˚_too_Ár
:

1105 
mov
 
esi
, [
e•
+4]

1106 
mov
 
dw‹d
 
±r
 [
e•
+72], 4

1107 
jmp
 
L_bªak_lo›_wôh_°©us


1109 
L_bªak_lo›
:

1110 
mov
 
dw‹d
 
±r
 [
e•
+72], 0

1112 
L_bªak_lo›_wôh_°©us
:

1114 
mov
 [
e•
+8], 
esi


1115 
mov
 [
e•
+16], 
edi


1116 
mov
 [
e•
+44], 
ebx


1117 
mov
 [
e•
+40], 
edx


1118 
mov
 
ebp
, [
e•
+4]

1119 
mov
 
e•
, [esp]

1125 i‡(
¨
.
°©us
 > 1) {

1126 i‡(
¨
.
°©us
 == 2)

1127 
°rm
->
msg
 = "invalidÜiteral/length code";

1128 i‡(
¨
.
°©us
 == 3)

1129 
°rm
->
msg
 = "invalid distance code";

1131 
°rm
->
msg
 = "invalid distanceÅoo far back";

1132 
°©e
->
mode
 = 
BAD
;

1134 i‡–
¨
.
°©us
 == 1 ) {

1135 
°©e
->
mode
 = 
TYPE
;

1139 
¨
.
Àn
 =ár.
bôs
 >> 3;

1140 
¨
.
ö
 -¨.
Àn
;

1141 
¨
.
bôs
 -¨.
Àn
 << 3;

1142 
¨
.
hﬁd
 &(1U <<ár.
bôs
) - 1;

1145 
°rm
->
√xt_ö
 = 
¨
.
ö
;

1146 
°rm
->
√xt_out
 = 
¨
.
out
;

1147 
°rm
->
avaû_ö
 = ()(
¨
.
ö
 <ár.
œ°
 ?

1148 
PAD_AVAIL_IN
 + (
¨
.
œ°
 -ár.
ö
) :

1149 
PAD_AVAIL_IN
 - (
¨
.
ö
 -ár.
œ°
));

1150 
°rm
->
avaû_out
 = ()(
¨
.
out
 <ár.
íd
 ?

1151 
PAD_AVAIL_OUT
 + (
¨
.
íd
 -ár.
out
) :

1152 
PAD_AVAIL_OUT
 - (
¨
.
out
 -ár.
íd
));

1153 
°©e
->
hﬁd
 = 
¨
.hold;

1154 
°©e
->
bôs
 = 
¨
.bits;

1156 
	}
}

	@zlib-1.2.8/contrib/iostream/test.cpp

2 
	~"zf°ªam.h
"

4 
	$maö
() {

8 
gzof°ªam
 
	`os
–1, 
ios
::
out
 );

12 
os
 << "Hñlo, Mommy" << 
ídl
;

14 
os
 << 
	`£tcom¥essi⁄Àvñ
–
Z_NO_COMPRESSION
 );

15 
os
 << "hñlo, hñlo, hi, ho!" << 
ídl
;

17 
	`£tcom¥essi⁄Àvñ
–
os
, 
Z_DEFAULT_COMPRESSION
 )

18 << "I'm com¥essögágaö" << 
ídl
;

20 
os
.
	`˛o£
();

24 
	}
}

	@zlib-1.2.8/contrib/iostream/zfstream.cpp

2 
	~"zf°ªam.h
"

4 
	ggzfûebuf
::
	$gzfûebuf
() :

5 
	`fûe
(
NULL
),

6 
	`mode
(0),

7 
	$own_fûe_des¸ùt‹
(0)

8 { 
	}
}

10 
	ggzfûebuf
::~
	$gzfûebuf
() {

12 
	`sync
();

13 i‡–
own_fûe_des¸ùt‹
 )

14 
	`˛o£
();

16 
	}
}

18 
gzfûebuf
 *
	ggzfûebuf
::
	$›í
–c⁄° *
«me
,

19 
io_mode
 ) {

21 i‡–
	`is_›í
() )

22  
NULL
;

24 
ch¨_mode
[10];

25 *
p
 = 
ch¨_mode
;

27 i‡–
io_mode
 & 
ios
::
ö
 ) {

28 
mode
 = 
ios
::
ö
;

29 *
p
++ = 'r';

30 } i‡–
io_mode
 & 
ios
::
≠p
 ) {

31 
mode
 = 
ios
::
≠p
;

32 *
p
++ = 'a';

34 
mode
 = 
ios
::
out
;

35 *
p
++ = 'w';

38 i‡–
io_mode
 & 
ios
::
bö¨y
 ) {

39 
mode
 |
ios
::
bö¨y
;

40 *
p
++ = 'b';

44 i‡–
io_mode
 & (
ios
::
out
|ios::
≠p
 )) {

45 *
p
++ = '9';

49 *
p
 = '\0';

51 i‡–(
fûe
 = 
	`gz›í
(
«me
, 
ch¨_mode
)Ë=
NULL
 )

52  
NULL
;

54 
own_fûe_des¸ùt‹
 = 1;

56  
this
;

58 
	}
}

60 
gzfûebuf
 *
	ggzfûebuf
::
	$©èch
–
fûe_des¸ùt‹
,

61 
io_mode
 ) {

63 i‡–
	`is_›í
() )

64  
NULL
;

66 
ch¨_mode
[10];

67 *
p
 = 
ch¨_mode
;

69 i‡–
io_mode
 & 
ios
::
ö
 ) {

70 
mode
 = 
ios
::
ö
;

71 *
p
++ = 'r';

72 } i‡–
io_mode
 & 
ios
::
≠p
 ) {

73 
mode
 = 
ios
::
≠p
;

74 *
p
++ = 'a';

76 
mode
 = 
ios
::
out
;

77 *
p
++ = 'w';

80 i‡–
io_mode
 & 
ios
::
bö¨y
 ) {

81 
mode
 |
ios
::
bö¨y
;

82 *
p
++ = 'b';

86 i‡–
io_mode
 & (
ios
::
out
|ios::
≠p
 )) {

87 *
p
++ = '9';

91 *
p
 = '\0';

93 i‡–(
fûe
 = 
	`gzd›í
(
fûe_des¸ùt‹
, 
ch¨_mode
)Ë=
NULL
 )

94  
NULL
;

96 
own_fûe_des¸ùt‹
 = 0;

98  
this
;

100 
	}
}

102 
gzfûebuf
 *
	ggzfûebuf
::
	$˛o£
() {

104 i‡–
	`is_›í
() ) {

106 
	`sync
();

107 
	`gz˛o£
–
fûe
 );

108 
fûe
 = 
NULL
;

112  
this
;

114 
	}
}

116 
	ggzfûebuf
::
	$£tcom¥essi⁄Àvñ
–
comp_Àvñ
 ) {

118  
	`gz£ç¨ams
(
fûe
, 
comp_Àvñ
, -2);

120 
	}
}

122 
	ggzfûebuf
::
	$£tcom¥essi⁄°øãgy
–
comp_°øãgy
 ) {

124  
	`gz£ç¨ams
(
fûe
, -2, 
comp_°øãgy
);

126 
	}
}

129 
°ªampos
 
	ggzfûebuf
::
	$£ekoff
–
°ªamoff
 
off
, 
ios
::
£ek_dú
 
dú
, 
which
 ) {

131  
	`°ªampos
(
EOF
);

133 
	}
}

135 
	ggzfûebuf
::
	$undîÊow
() {

138 i‡–!
	`is_›í
(Ë|| !(
mode
 & 
ios
::
ö
) )

139  
EOF
;

142 i‡–!
	`ba£
() ) {

144 i‡–(
	`Æloˇã
()Ë=
EOF
 )

145  
EOF
;

146 
	`£ç
(0,0);

150 i‡–
	`ö_avaû
() )

151  (Ë*
	`g±r
();

153 i‡–
	`out_waôög
() ) {

154 i‡–
	`Êushbuf
(Ë=
EOF
 )

155  
EOF
;

162 
ªsu…
 = 
	`fûlbuf
();

163 i‡–
ªsu…
 =
EOF
 ) {

165 
	`£tg
(0,0,0);

166  
EOF
;

169  (Ë*
	`g±r
();

171 
	}
}

173 
	ggzfûebuf
::
	$ovîÊow
–
c
 ) {

175 i‡–!
	`is_›í
(Ë|| !(
mode
 & 
ios
::
out
) )

176  
EOF
;

178 i‡–!
	`ba£
() ) {

179 i‡–
	`Æloˇã
(Ë=
EOF
 )

180  
EOF
;

181 
	`£tg
(0,0,0);

183 i‡(
	`ö_avaû
()) {

184  
EOF
;

186 i‡(
	`out_waôög
()) {

187 i‡(
	`Êushbuf
(Ë=
EOF
)

188  
EOF
;

192 
bl
 = 
	`bÀn
();

193 
	`£ç
–
	`ba£
(), ba£(Ë+ 
bl
);

195 i‡–
c
 !
EOF
 ) {

197 *
	`µå
(Ë
c
;

198 
	`pbump
(1);

204 
	}
}

206 
	ggzfûebuf
::
	$sync
() {

208 i‡–!
	`is_›í
() )

209  
EOF
;

211 i‡–
	`out_waôög
() )

212  
	`Êushbuf
();

216 
	}
}

218 
	ggzfûebuf
::
	$Êushbuf
() {

220 
n
;

221 *
q
;

223 
q
 = 
	`pba£
();

224 
n
 = 
	`µå
(Ë- 
q
;

226 i‡–
	`gzwrôe
–
fûe
, 
q
, 
n
) <Ç )

227  
EOF
;

229 
	`£ç
(0,0);

233 
	}
}

235 
	ggzfûebuf
::
	$fûlbuf
() {

237 
ªquúed
;

238 *
p
;

240 
p
 = 
	`ba£
();

242 
ªquúed
 = 
	`bÀn
();

244 
t
 = 
	`gzªad
–
fûe
, 
p
, 
ªquúed
 );

246 i‡–
t
 <0Ë 
EOF
;

248 
	`£tg
–
	`ba£
(), ba£(), ba£()+
t
);

250  
t
;

252 
	}
}

254 
	ggzfûe°ªam_comm⁄
::
	$gzfûe°ªam_comm⁄
() :

255 
	`ios
–
gzfûe°ªam_comm⁄
::
	$rdbuf
() )

256 { 
	}
}

258 
gzfûe°ªam_comm⁄
::~
	$gzfûe°ªam_comm⁄
()

259 { 
	}
}

261 
gzfûe°ªam_comm⁄
::
	$©èch
–
fd
, 
io_mode
 ) {

263 i‡–!
buf„r
.
	`©èch
–
fd
, 
io_mode
) )

264 
	`˛ór
–
ios
::
Áûbô
 | ios::
badbô
 );

266 
	`˛ór
();

268 
	}
}

270 
	ggzfûe°ªam_comm⁄
::
	$›í
–c⁄° *
«me
, 
io_mode
 ) {

272 i‡–!
buf„r
.
	`›í
–
«me
, 
io_mode
 ) )

273 
	`˛ór
–
ios
::
Áûbô
 | ios::
badbô
 );

275 
	`˛ór
();

277 
	}
}

279 
	ggzfûe°ªam_comm⁄
::
	$˛o£
() {

281 i‡–!
buf„r
.
	`˛o£
() )

282 
	`˛ór
–
ios
::
Áûbô
 | ios::
badbô
 );

284 
	}
}

286 
gzfûebuf
 *
	ggzfûe°ªam_comm⁄
::
	$rdbuf
()

288  &
buf„r
;

289 
	}
}

291 
	ggzif°ªam
::
	$gzif°ªam
() :

292 
	`ios
–
gzfûe°ªam_comm⁄
::
	$rdbuf
() )

294 
	`˛ór
–
ios
::
badbô
 );

295 
	}
}

297 
	ggzif°ªam
::
	$gzif°ªam
–c⁄° *
«me
, 
io_mode
 ) :

298 
	`ios
–
gzfûe°ªam_comm⁄
::
	$rdbuf
() )

300 
gzfûe°ªam_comm⁄
::
	`›í
–
«me
, 
io_mode
 );

301 
	}
}

303 
	ggzif°ªam
::
	$gzif°ªam
–
fd
, 
io_mode
 ) :

304 
	`ios
–
gzfûe°ªam_comm⁄
::
	$rdbuf
() )

306 
gzfûe°ªam_comm⁄
::
	`©èch
–
fd
, 
io_mode
 );

307 
	}
}

309 
	ggzif°ªam
::~
	$gzif°ªam
(Ë{ 
	}
}

311 
gzof°ªam
::
	$gzof°ªam
() :

312 
	`ios
–
gzfûe°ªam_comm⁄
::
	$rdbuf
() )

314 
	`˛ór
–
ios
::
badbô
 );

315 
	}
}

317 
	ggzof°ªam
::
	$gzof°ªam
–c⁄° *
«me
, 
io_mode
 ) :

318 
	`ios
–
gzfûe°ªam_comm⁄
::
	$rdbuf
() )

320 
gzfûe°ªam_comm⁄
::
	`›í
–
«me
, 
io_mode
 );

321 
	}
}

323 
	ggzof°ªam
::
	$gzof°ªam
–
fd
, 
io_mode
 ) :

324 
	`ios
–
gzfûe°ªam_comm⁄
::
	$rdbuf
() )

326 
gzfûe°ªam_comm⁄
::
	`©èch
–
fd
, 
io_mode
 );

327 
	}
}

329 
	ggzof°ªam
::~
	$gzof°ªam
(Ë{ 
	}
}

	@zlib-1.2.8/contrib/iostream/zfstream.h

2 #i‚de‡
zf°ªam_h


3 
	#zf°ªam_h


	)

5 
	~<f°ªam.h
>

6 
	~"zlib.h
"

8 ˛as†
	cgzfûebuf
 : 
public
 
°ªambuf
 {

10 
public
:

12 
gzfûebuf
( );

13 
	mvútuÆ
 ~
gzfûebuf
();

15 
gzfûebuf
 *
›í
–c⁄° *
«me
, 
io_mode
 );

16 
gzfûebuf
 *
©èch
–
fûe_des¸ùt‹
, 
io_mode
 );

17 
gzfûebuf
 *
˛o£
();

19 
£tcom¥essi⁄Àvñ
–
comp_Àvñ
 );

20 
£tcom¥essi⁄°øãgy
–
comp_°øãgy
 );

22 
ölöe
 
	$is_›í
(Ëc⁄° {  (
fûe
 !=
NULL
); }

24 
vútuÆ
 
°ªampos
 
	`£ekoff
–
°ªamoff
, 
ios
::
£ek_dú
, );

26 
vútuÆ
 
	`sync
();

28 
¥Ÿe˘ed
:

30 
vútuÆ
 
	`undîÊow
();

31 
vútuÆ
 
	`ovîÊow
–
EOF
 );

33 
¥iv©e
:

35 
gzFûe
 
fûe
;

36 
mode
;

37 
own_fûe_des¸ùt‹
;

39 
	`Êushbuf
();

40 
	`fûlbuf
();

42 
	}
};

44 ˛as†
	cgzfûe°ªam_comm⁄
 : 
vútuÆ
 
public
 
ios
 {

46 
‰õnd
 
˛ass
 
gzif°ªam
;

47 
‰õnd
 
˛ass
 
	mgzof°ªam
;

48 
‰õnd
 
	mgzof°ªam
 &
£tcom¥essi⁄Àvñ
–
gzof°ªam
 &, );

49 
‰õnd
 
	mgzof°ªam
 &
£tcom¥essi⁄°øãgy
–
gzof°ªam
 &, );

51 
	mpublic
:

52 
vútuÆ
 ~
gzfûe°ªam_comm⁄
();

54 
©èch
–
fd
, 
io_mode
 );

55 
›í
–c⁄° *
«me
, 
io_mode
 );

56 
˛o£
();

58 
	m¥Ÿe˘ed
:

59 
gzfûe°ªam_comm⁄
();

61 
	m¥iv©e
:

62 
gzfûebuf
 *
rdbuf
();

64 
gzfûebuf
 
	mbuf„r
;

68 
˛ass
 
	ggzif°ªam
 : 
public
 
gzfûe°ªam_comm⁄
,Öubli¯
	gi°ªam
 {

70 
	gpublic
:

72 
gzif°ªam
();

73 
gzif°ªam
–c⁄° *
«me
, 
io_mode
 = 
ios
::
ö
 );

74 
gzif°ªam
–
fd
, 
io_mode
 = 
ios
::
ö
 );

76 
	gvútuÆ
 ~
gzif°ªam
();

80 
˛ass
 
	ggzof°ªam
 : 
public
 
gzfûe°ªam_comm⁄
,Öubli¯
	go°ªam
 {

82 
	gpublic
:

84 
gzof°ªam
();

85 
gzof°ªam
–c⁄° *
«me
, 
io_mode
 = 
ios
::
out
 );

86 
gzof°ªam
–
fd
, 
io_mode
 = 
ios
::
out
 );

88 
	gvútuÆ
 ~
gzof°ªam
();

92 
	gãm∂©e
<
˛ass
 
	gT
> cœs†
	cgzom™ù
 {

93 
‰õnd
 
	mgzof°ªam
 &
	m›î©‹
<<(gzof°ªam &, c⁄° 
	mgzom™ù
<
	mT
> &);

94 
	mpublic
:

95 
gzom™ù
(
gzof°ªam
 &(*
f
)(gzof°ªam &, 
T
), T 
v
Ë: 
func
(f), 
	$vÆ
(
v
) { }

96 
¥iv©e
:

97 
gzof°ªam
 &(*
func
)(gzof°ªam &, 
T
);

98 
T
 
vÆ
;

99 
	}
};

101 
	gãm∂©e
<
˛ass
 
	gT
> 
	ggzof°ªam
 &
	g›î©‹
<<(gzof°ªam &
	gs
, c⁄° 
	ggzom™ù
<T> &
	gm
)

103  (*
	gm
.
	gfunc
)(
	gs
, m.
	gvÆ
);

106 
ölöe
 
	ggzof°ªam
 &
	$£tcom¥essi⁄Àvñ
–
gzof°ªam
 &
s
, 
l
 )

108 (
s
.
	`rdbuf
())->
	`£tcom¥essi⁄Àvñ
(
l
);

109  
s
;

110 
	}
}

112 
ölöe
 
	ggzof°ªam
 &
	$£tcom¥essi⁄°øãgy
–
gzof°ªam
 &
s
, 
l
 )

114 (
s
.
	`rdbuf
())->
	`£tcom¥essi⁄°øãgy
(
l
);

115  
s
;

116 
	}
}

118 
ölöe
 
	ggzom™ù
<> 
	$£tcom¥essi⁄Àvñ
(
l
)

120  
gzom™ù
<>(&
£tcom¥essi⁄Àvñ
,
l
);

121 
	}
}

123 
ölöe
 
	ggzom™ù
<> 
	$£tcom¥essi⁄°øãgy
(
l
)

125  
gzom™ù
<>(&
£tcom¥essi⁄°øãgy
,
l
);

126 
	}
}

	@zlib-1.2.8/contrib/iostream2/zstream.h

19 #i‚de‡
ZSTREAM__H


20 
	#ZSTREAM__H


	)

27 
	~<°r°ªam.h
>

28 
	~<°rög.h
>

29 
	~<°dio.h
>

30 
	~"zlib.h
"

32 #i‡
deföed
(
_WIN32
)

33 
	~<f˙é.h
>

34 
	~<io.h
>

35 
	#SET_BINARY_MODE
(
fûe
Ë
	`£tmode
(
	`fûío
(fûe), 
O_BINARY
)

	)

37 
	#SET_BINARY_MODE
(
fûe
)

	)

40 ˛as†
	cz°rögÀn
 {

41 
	mpublic
:

42 
z°rögÀn
(
˛ass
 
iz°ªam
&);

43 
z°rögÀn
(
˛ass
 
oz°ªam
&, const *);

44 
size_t
 
	$vÆue
(Ëc⁄° {  
vÆ
.
w‹d
; }

45 
¥iv©e
:

46 
	sVÆ
 { 
byã
; 
size_t
 
w‹d
; 
	}
} 
	gvÆ
;

51 ˛as†
	ciz°ªam


53 
	mpublic
:

54 
	$iz°ªam
(Ë: 
	$m_Â
(0) {}

55 
	$iz°ªam
(
FILE
* 
Â
Ë: 
	$m_Â
(0Ë{ 
	`›í
(
Â
); 
	}
}

56 
	$iz°ªam
(c⁄° * 
«me
Ë: 
	$m_Â
(0Ë{ 
	`›í
(
«me
); 
	}
}

57 ~
	$iz°ªam
(Ë{ 
	`˛o£
(); 
	}
}

65 
	$›í
(c⁄° * 
«me
) {

66 i‡(
m_Â
Ë
	`˛o£
();

67 
m_Â
 = ::
	`gz›í
(
«me
, "rb");

68 
	}
}

70 
	$›í
(
FILE
* 
Â
) {

71 
	`SET_BINARY_MODE
(
Â
);

72 i‡(
m_Â
Ë
	`˛o£
();

73 
m_Â
 = ::
	`gzd›í
(
	`fûío
(
Â
), "rb");

74 
	}
}

80 
	$˛o£
() {

81 
r
 = ::
	`gz˛o£
(
m_Â
);

82 
m_Â
 = 0;  
r
;

83 
	}
}

87 
	$ªad
(* 
buf
, 
size_t
 
Àn
) {

88  ::
	`gzªad
(
m_Â
, 
buf
, 
Àn
);

89 
	}
}

97 c⁄° * 
	$îr‹
(* 
î∫um
) {

98  ::
	`gzîr‹
(
m_Â
, 
î∫um
);

99 
	}
}

101 
gzFûe
 
	$Â
(Ë{  
m_Â
; 
	}
}

103 
	g¥iv©e
:

104 
gzFûe
 
m_Â
;

114 
	gãm∂©e
 <
˛ass
 
	gT
, cœs†
	gIãms
>

115 
ölöe
 
	$ªad
(
iz°ªam
& 
zs
, 
T
* 
x
, 
Iãms
 
ôems
) {

116  ::
	`gzªad
(
zs
.
	`Â
(), 
x
, 
ôems
*(
T
));

117 
	}
}

122 
	gãm∂©e
 <
˛ass
 
	gT
>

123 
ölöe
 
	giz°ªam
& 
	g›î©‹
>(iz°ªam& 
	gzs
, 
	gT
& 
	gx
) {

124 ::
gzªad
(
zs
.
Â
(), &
x
, (
T
));

125  
	gzs
;

129 
ölöe
 
	gz°rögÀn
::
	$z°rögÀn
(
iz°ªam
& 
zs
) {

130 
zs
 > 
vÆ
.
byã
;

131 i‡(
vÆ
.
byã
 =255Ë
zs
 > vÆ.
w‹d
;

132 
vÆ
.
w‹d
 = vÆ.
byã
;

133 
	}
}

138 
ölöe
 
	giz°ªam
& 
	g›î©‹
>(iz°ªam& 
	gzs
, * 
	gx
) {

139 
z°rögÀn
 
Àn
(
zs
);

140 ::
gzªad
(
zs
.
Â
(), 
x
, 
Àn
.
vÆue
());

141 
	gx
[
Àn
.
vÆue
()] = '\0';

142  
	gzs
;

145 
ölöe
 * 
	$ªad_°rög
(
iz°ªam
& 
zs
) {

146 
z°rögÀn
 
	`Àn
(
zs
);

147 * 
x
 = 
√w
 [
Àn
.
	`vÆue
()+1];

148 ::
	`gzªad
(
zs
.
	`Â
(), 
x
, 
Àn
.
	`vÆue
());

149 
x
[
Àn
.
	`vÆue
()] = '\0';

150  
x
;

151 
	}
}

155 ˛as†
	coz°ªam


157 
	mpublic
:

158 
	$oz°ªam
(Ë: 
	`m_Â
(0), 
	$m_os
(0) {

160 
	$oz°ªam
(
FILE
* 
Â
, 
Àvñ
 = 
Z_DEFAULT_COMPRESSION
)

161 : 
	`m_Â
(0), 
	$m_os
(0) {

162 
	`›í
(
Â
, 
Àvñ
);

163 
	}
}

164 
	$oz°ªam
(c⁄° * 
«me
, 
Àvñ
 = 
Z_DEFAULT_COMPRESSION
)

165 : 
	`m_Â
(0), 
	$m_os
(0) {

166 
	`›í
(
«me
, 
Àvñ
);

167 
	}
}

168 ~
	$oz°ªam
() {

169 
	`˛o£
();

170 
	}
}

177 
	$›í
(c⁄° * 
«me
, 
Àvñ
 = 
Z_DEFAULT_COMPRESSION
) {

178 
mode
[4] = "wb\0";

179 i‡(
Àvñ
 !
Z_DEFAULT_COMPRESSION
Ë
mode
[2] = '0'+level;

180 i‡(
m_Â
Ë
	`˛o£
();

181 
m_Â
 = ::
	`gz›í
(
«me
, 
mode
);

182 
	}
}

186 
	$›í
(
FILE
* 
Â
, 
Àvñ
 = 
Z_DEFAULT_COMPRESSION
) {

187 
	`SET_BINARY_MODE
(
Â
);

188 
mode
[4] = "wb\0";

189 i‡(
Àvñ
 !
Z_DEFAULT_COMPRESSION
Ë
mode
[2] = '0'+level;

190 i‡(
m_Â
Ë
	`˛o£
();

191 
m_Â
 = ::
	`gzd›í
(
	`fûío
(
Â
), 
mode
);

192 
	}
}

198 
	$˛o£
() {

199 i‡(
m_os
) {

200 ::
	`gzwrôe
(
m_Â
, 
m_os
->
	`°r
(), m_os->
	`pcou¡
());

201 
dñëe
[] 
m_os
->
	`°r
(); delete m_os; m_os = 0;

203 
r
 = ::
	`gz˛o£
(
m_Â
); m_fp = 0; Ñ;

204 
	}
}

208 
	$wrôe
(c⁄° * 
buf
, 
size_t
 
Àn
) {

209  ::
	`gzwrôe
(
m_Â
, (
voidp
Ë
buf
, 
Àn
);

210 
	}
}

219 
	$Êush
(
_Êush
) {

220 
	`os_Êush
();

221  ::
	`gzÊush
(
m_Â
, 
_Êush
);

222 
	}
}

230 c⁄° * 
	$îr‹
(* 
î∫um
) {

231  ::
	`gzîr‹
(
m_Â
, 
î∫um
);

232 
	}
}

234 
gzFûe
 
	$Â
(Ë{  
m_Â
; 
	}
}

236 
	go°ªam
& 
	$os
() {

237 i‡(
m_os
 =0Ëm_o†
√w
 
o°r°ªam
;

238  *
m_os
;

239 
	}
}

241 
	$os_Êush
() {

242 i‡(
m_os
 && m_os->
	`pcou¡
()>0) {

243 
o°r°ªam
* 
oss
 = 
√w
 ostrstream;

244 
oss
->
	`fûl
(
m_os
->fill());

245 
oss
->
	`Êags
(
m_os
->flags());

246 
oss
->
	`¥ecisi⁄
(
m_os
->precision());

247 
oss
->
	`width
(
m_os
->width());

248 ::
	`gzwrôe
(
m_Â
, 
m_os
->
	`°r
(), m_os->
	`pcou¡
());

249 
dñëe
[] 
m_os
->
	`°r
(); dñëêm_os; m_o†
oss
;

251 
	}
}

253 
	g¥iv©e
:

254 
gzFûe
 
m_Â
;

255 
o°r°ªam
* 
	gm_os
;

263 
	gãm∂©e
 <
˛ass
 
	gT
, cœs†
	gIãms
>

264 
ölöe
 
	$wrôe
(
oz°ªam
& 
zs
, c⁄° 
T
* 
x
, 
Iãms
 
ôems
) {

265  ::
	`gzwrôe
(
zs
.
	`Â
(), (
voidp
Ë
x
, 
ôems
*(
T
));

266 
	}
}

271 
	gãm∂©e
 <
˛ass
 
	gT
>

272 
ölöe
 
	goz°ªam
& 
	g›î©‹
<(oz°ªam& 
	gzs
, c⁄° 
	gT
& 
	gx
) {

273 ::
gzwrôe
(
zs
.
Â
(), (
voidp
Ë&
x
, (
T
));

274  
	gzs
;

277 
ölöe
 
	gz°rögÀn
::
	$z°rögÀn
(
oz°ªam
& 
zs
, c⁄° * 
x
) {

278 
vÆ
.
byã
 = 255; vÆ.
w‹d
 = ::
	`°æí
(
x
);

279 i‡(
vÆ
.
w‹d
 < 255Ë
zs
 < (vÆ.
byã
 = val.word);

280 
zs
 < 
vÆ
;

281 
	}
}

286 
ölöe
 
	goz°ªam
& 
	g›î©‹
<(oz°ªam& 
	gzs
, c⁄° * 
	gx
) {

287 
z°rögÀn
 
Àn
(
zs
, 
x
);

288 ::
gzwrôe
(
zs
.
Â
(), (
voidp
Ë
x
, 
Àn
.
vÆue
());

289  
	gzs
;

292 #ifde‡
_MSC_VER


293 
ölöe
 
	goz°ªam
& 
	g›î©‹
<(oz°ªam& 
	gzs
, * c⁄°& 
	gx
) {

294  
	gzs
 < (c⁄° *Ë
	gx
;

301 
	gãm∂©e
 <
˛ass
 
	gT
>

302 
ölöe
 
	go°ªam
& 
	g›î©‹
<<(
	goz°ªam
& 
	gzs
, c⁄° 
	gT
& 
	gx
) {

303 
	gzs
.
os_Êush
();

304  
	gzs
.
os
(Ë<< 
	gx
;

	@zlib-1.2.8/contrib/iostream2/zstream_test.cpp

1 
	~"z°ªam.h
"

2 
	~<m©h.h
>

3 
	~<°dlib.h
>

4 
	~<iom™ù.h
>

6 
	$maö
() {

7 
h
[256] = "Hello";

8 * 
g
 = "Goodbye";

9 
oz°ªam
 
	`out
("temp.gz");

10 
out
 < "Thi†w‹k†wñl" < 
h
 < 
g
;

11 
out
.
	`˛o£
();

13 
iz°ªam
 
	`ö
("temp.gz");

14 *
x
 = 
	`ªad_°rög
(
ö
), *
y
 = 
√w
 [256], 
z
[256];

15 
ö
 > 
y
 > 
z
;

16 
ö
.
	`˛o£
();

17 
cout
 << 
x
 << 
ídl
 << 
y
 <<Énd»<< 
z
 <<Éndl;

19 
out
.
	`›í
("temp.gz");

20 
out
 << 
	`£tw
(50Ë<< 
	`£tfûl
('#'Ë<< 
	`£çªcisi⁄
(20Ë<< 
x
 << 
ídl
 << 
y
 <<Énd»<< 
z
 <<Éndl;

21 
out
 << 
z
 << 
ídl
 << 
y
 <<Énd»<< 
x
 <<Éndl;

22 
out
 << 1.1234567890123456789 << 
ídl
;

24 
dñëe
[] 
x
; dñëe[] 
y
;

25 
	}
}

	@zlib-1.2.8/contrib/iostream3/test.cc

8 
	~"zf°ªam.h
"

9 
	~<io°ªam
>

11 
	$maö
() {

13 
gzof°ªam
 
outf
;

14 
gzif°ªam
 
öf
;

15 
buf
[80];

17 
outf
.
	`›í
("test1.txt.gz");

18 
outf
 << "The quick brown fox sidesteppedÅheÜazy canine\n"

19 << 1.3 << "\nPœ¿" << 9 << 
°d
::
ídl
;

20 
outf
.
	`˛o£
();

21 
°d
::
cout
 << "WroteÅhe following messageÅo 'test1.txt.gz' (check with zcat or zless):\n"

23 << 1.3 << "\nPœ¿" << 9 << 
°d
::
ídl
;

25 
°d
::
cout
 << "\nReading 'test1.txt.gz' (buffered)Öroduces:\n";

26 
öf
.
	`›í
("test1.txt.gz");

27 
öf
.
	`gëlöe
(
buf
,80,'\n')) {

28 
°d
::
cout
 << 
buf
 << "\t(" << 
öf
.
	`rdbuf
()->
	`ö_avaû
() << " charsÜeft in buffer)\n";

30 
öf
.
	`˛o£
();

32 
outf
.
	`rdbuf
()->
	`pub£tbuf
(0,0);

33 
outf
.
	`›í
("test2.txt.gz");

34 
outf
 << 
	`£tcom¥essi⁄
(
Z_NO_COMPRESSION
)

36 << 1.3 << "\nPœ¿" << 9 << 
°d
::
ídl
;

37 
outf
.
	`˛o£
();

38 
°d
::
cout
 << "\nWroteÅhe same messageÅo 'test2.txt.gz' in uncompressed form";

40 
°d
::
cout
 << "\nReading 'test2.txt.gz' (unbuffered)Öroduces:\n";

41 
öf
.
	`rdbuf
()->
	`pub£tbuf
(0,0);

42 
öf
.
	`›í
("test2.txt.gz");

43 
öf
.
	`gëlöe
(
buf
,80,'\n')) {

44 
°d
::
cout
 << 
buf
 << "\t(" << 
öf
.
	`rdbuf
()->
	`ö_avaû
() << " charsÜeft in buffer)\n";

46 
öf
.
	`˛o£
();

50 
	}
}

	@zlib-1.2.8/contrib/iostream3/zfstream.cc

10 
	~"zf°ªam.h
"

11 
	~<c°rög
>

12 
	~<c°dio
>

15 
	#BIGBUFSIZE
 
BUFSIZ


	)

16 
	#SMALLBUFSIZE
 1

	)

21 
	ggzfûebuf
::
	$gzfûebuf
()

22 : 
	`fûe
(
NULL
), 
	`io_mode
(
°d
::
ios_ba£
::
	`›ímode
(0)), 
	`own_fd
(
Ál£
),

23 
	`buf„r
(
NULL
), 
	`buf„r_size
(
BIGBUFSIZE
), 
	$own_buf„r
(
åue
)

26 
this
->
	`dißbÀ_buf„r
();

27 
	}
}

30 
	ggzfûebuf
::~
	$gzfûebuf
()

34 
this
->
	`sync
();

35 i‡(
own_fd
)

36 
this
->
	`˛o£
();

38 
this
->
	`dißbÀ_buf„r
();

39 
	}
}

43 
	ggzfûebuf
::
	$£tcom¥essi⁄
(
comp_Àvñ
,

44 
comp_°øãgy
)

46  
	`gz£ç¨ams
(
fûe
, 
comp_Àvñ
, 
comp_°øãgy
);

47 
	}
}

50 
gzfûebuf
*

51 
	ggzfûebuf
::
	$›í
(c⁄° *
«me
,

52 
°d
::
ios_ba£
::
›ímode
 
mode
)

55 i‡(
this
->
	`is_›í
())

56  
NULL
;

58 i‡((
mode
 & 
°d
::
ios_ba£
::
ö
Ë&& (modê& std::ios_ba£::
out
))

59  
NULL
;

62 
ch¨_mode
[6] = "\0\0\0\0\0";

63 i‡(!
this
->
	`›í_mode
(
mode
, 
ch¨_mode
))

64  
NULL
;

67 i‡((
fûe
 = 
	`gz›í
(
«me
, 
ch¨_mode
)Ë=
NULL
)

68  
NULL
;

71 
this
->
	`íabÀ_buf„r
();

72 
io_mode
 = 
mode
;

73 
own_fd
 = 
åue
;

74  
this
;

75 
	}
}

78 
gzfûebuf
*

79 
	ggzfûebuf
::
	$©èch
(
fd
,

80 
°d
::
ios_ba£
::
›ímode
 
mode
)

83 i‡(
this
->
	`is_›í
())

84  
NULL
;

86 i‡((
mode
 & 
°d
::
ios_ba£
::
ö
Ë&& (modê& std::ios_ba£::
out
))

87  
NULL
;

90 
ch¨_mode
[6] = "\0\0\0\0\0";

91 i‡(!
this
->
	`›í_mode
(
mode
, 
ch¨_mode
))

92  
NULL
;

95 i‡((
fûe
 = 
	`gzd›í
(
fd
, 
ch¨_mode
)Ë=
NULL
)

96  
NULL
;

99 
this
->
	`íabÀ_buf„r
();

100 
io_mode
 = 
mode
;

101 
own_fd
 = 
Ál£
;

102  
this
;

103 
	}
}

106 
gzfûebuf
*

107 
	ggzfûebuf
::
	$˛o£
()

110 i‡(!
this
->
	`is_›í
())

111  
NULL
;

113 
gzfûebuf
* 
ªtvÆ
 = 
this
;

115 i‡(
this
->
	`sync
() == -1)

116 
ªtvÆ
 = 
NULL
;

117 i‡(
	`gz˛o£
(
fûe
) < 0)

118 
ªtvÆ
 = 
NULL
;

120 
fûe
 = 
NULL
;

121 
own_fd
 = 
Ál£
;

123 
this
->
	`dißbÀ_buf„r
();

124  
ªtvÆ
;

125 
	}
}

130 
boﬁ


131 
	ggzfûebuf
::
	$›í_mode
(
°d
::
ios_ba£
::
›ímode
 
mode
,

132 * 
c_mode
) const

134 
boﬁ
 
ã°b
 = 
mode
 & 
°d
::
ios_ba£
::
bö¨y
;

135 
boﬁ
 
ã°i
 = 
mode
 & 
°d
::
ios_ba£
::
ö
;

136 
boﬁ
 
ã°o
 = 
mode
 & 
°d
::
ios_ba£
::
out
;

137 
boﬁ
 
ã°t
 = 
mode
 & 
°d
::
ios_ba£
::
åunc
;

138 
boﬁ
 
ã°a
 = 
mode
 & 
°d
::
ios_ba£
::
≠p
;

145 i‡(!
ã°i
 && 
ã°o
 && !
ã°t
 && !
ã°a
)

146 
	`°r˝y
(
c_mode
, "w");

147 i‡(!
ã°i
 && 
ã°o
 && !
ã°t
 && 
ã°a
)

148 
	`°r˝y
(
c_mode
, "a");

149 i‡(!
ã°i
 && 
ã°o
 && 
ã°t
 && !
ã°a
)

150 
	`°r˝y
(
c_mode
, "w");

151 i‡(
ã°i
 && !
ã°o
 && !
ã°t
 && !
ã°a
)

152 
	`°r˝y
(
c_mode
, "r");

160 i‡(
	`°æí
(
c_mode
) == 0)

161  
Ál£
;

162 i‡(
ã°b
)

163 
	`°rˇt
(
c_mode
, "b");

164  
åue
;

165 
	}
}

168 
	g°d
::
°ªamsize


169 
gzfûebuf
::
	$showm™yc
()

172 i‡(!
this
->
	`is_›í
(Ë|| !(
io_mode
 & 
°d
::
ios_ba£
::
ö
))

175 i‡(
this
->
	`g±r
(Ë&& (this->g±r(Ë<Åhis->
	`eg±r
()))

176  
°d
::
	`°ªamsize
(
this
->
	`eg±r
(Ë-Åhis->
	`g±r
());

179 
	}
}

182 
	ggzfûebuf
::
öt_ty≥


183 
gzfûebuf
::
	$undîÊow
()

188 i‡(
this
->
	`g±r
(Ë&& (this->g±r(Ë<Åhis->
	`eg±r
()))

189  
åaôs_ty≥
::
	`to_öt_ty≥
(*(
this
->
	`g±r
()));

192 i‡(!
this
->
	`is_›í
(Ë|| !(
io_mode
 & 
°d
::
ios_ba£
::
ö
))

193  
åaôs_ty≥
::
	`eof
();

197 
byãs_ªad
 = 
	`gzªad
(
fûe
, 
buf„r
, 
buf„r_size
);

199 i‡(
byãs_ªad
 <= 0)

202 
this
->
	`£tg
(
buf„r
, buffer, buffer);

203  
åaôs_ty≥
::
	`eof
();

206 
this
->
	`£tg
(
buf„r
, buf„r, buf„∏+ 
byãs_ªad
);

209  
åaôs_ty≥
::
	`to_öt_ty≥
(*(
this
->
	`g±r
()));

210 
	}
}

213 
	ggzfûebuf
::
öt_ty≥


214 
gzfûebuf
::
	$ovîÊow
(
öt_ty≥
 
c
)

217 i‡(
this
->
	`pba£
())

220 i‡(
this
->
	`µå
(Ë>Åhis->
	`ï±r
(Ë||Åhis->µå(Ë<Åhis->
	`pba£
())

221  
åaôs_ty≥
::
	`eof
();

223 i‡(!
åaôs_ty≥
::
	`eq_öt_ty≥
(
c
,Åøôs_ty≥::
	`eof
()))

225 *(
this
->
	`µå
()Ë
åaôs_ty≥
::
	`to_ch¨_ty≥
(
c
);

226 
this
->
	`pbump
(1);

229 
byãs_to_wrôe
 = 
this
->
	`µå
(Ë-Åhis->
	`pba£
();

231 i‡(
byãs_to_wrôe
 > 0)

234 i‡(!
this
->
	`is_›í
(Ë|| !(
io_mode
 & 
°d
::
ios_ba£
::
out
))

235  
åaôs_ty≥
::
	`eof
();

237 i‡(
	`gzwrôe
(
fûe
, 
this
->
	`pba£
(), 
byãs_to_wrôe
) != bytes_to_write)

238  
åaôs_ty≥
::
	`eof
();

240 
this
->
	`pbump
(-
byãs_to_wrôe
);

244 i‡(!
åaôs_ty≥
::
	`eq_öt_ty≥
(
c
,Åøôs_ty≥::
	`eof
()))

247 i‡(!
this
->
	`is_›í
(Ë|| !(
io_mode
 & 
°d
::
ios_ba£
::
out
))

248  
åaôs_ty≥
::
	`eof
();

250 
ch¨_ty≥
 
œ°_ch¨
 = 
åaôs_ty≥
::
	`to_ch¨_ty≥
(
c
);

252 i‡(
	`gzwrôe
(
fûe
, &
œ°_ch¨
, 1) != 1)

253  
åaôs_ty≥
::
	`eof
();

258 i‡(
åaôs_ty≥
::
	`eq_öt_ty≥
(
c
,Åøôs_ty≥::
	`eof
()))

259  
åaôs_ty≥
::
	`nŸ_eof
(
c
);

261  
c
;

262 
	}
}

265 
	g°d
::
°ªambuf
*

266 
gzfûebuf
::
	$£tbuf
(
ch¨_ty≥
* 
p
,

267 
°d
::
°ªamsize
 
n
)

270 i‡(
this
->
	`sync
() == -1)

271  
NULL
;

276 i‡(!
p
 || !
n
)

279 
this
->
	`dißbÀ_buf„r
();

280 
buf„r
 = 
NULL
;

281 
buf„r_size
 = 0;

282 
own_buf„r
 = 
åue
;

283 
this
->
	`íabÀ_buf„r
();

288 
this
->
	`dißbÀ_buf„r
();

289 
buf„r
 = 
p
;

290 
buf„r_size
 = 
n
;

291 
own_buf„r
 = 
Ál£
;

292 
this
->
	`íabÀ_buf„r
();

294  
this
;

295 
	}
}

299 
	ggzfûebuf
::
	$sync
()

301  
åaôs_ty≥
::
	`eq_öt_ty≥
(
this
->
	`ovîÊow
(),Åøôs_ty≥::
	`eof
()) ? -1 : 0;

302 
	}
}

308 
	ggzfûebuf
::
	$íabÀ_buf„r
()

311 i‡(
own_buf„r
 && !
buf„r
)

314 i‡(
buf„r_size
 > 0)

317 
buf„r
 = 
√w
 
ch¨_ty≥
[
buf„r_size
];

319 
this
->
	`£tg
(
buf„r
, buffer, buffer);

324 
this
->
	`£ç
(
buf„r
, buf„∏+ 
buf„r_size
 - 1);

329 
buf„r_size
 = 
SMALLBUFSIZE
;

330 
buf„r
 = 
√w
 
ch¨_ty≥
[
buf„r_size
];

331 
this
->
	`£tg
(
buf„r
, buffer, buffer);

333 
this
->
	`£ç
(0, 0);

340 
this
->
	`£tg
(
buf„r
, buffer, buffer);

341 
this
->
	`£ç
(
buf„r
, buf„∏+ 
buf„r_size
 - 1);

343 
	}
}

347 
	ggzfûebuf
::
	$dißbÀ_buf„r
()

350 i‡(
own_buf„r
 && 
buf„r
)

353 i‡(!
this
->
	`pba£
())

354 
buf„r_size
 = 0;

355 
dñëe
[] 
buf„r
;

356 
buf„r
 = 
NULL
;

357 
this
->
	`£tg
(0, 0, 0);

358 
this
->
	`£ç
(0, 0);

363 
this
->
	`£tg
(
buf„r
, buffer, buffer);

364 i‡(
buf„r
)

365 
this
->
	`£ç
(
buf„r
, buf„∏+ 
buf„r_size
 - 1);

367 
this
->
	`£ç
(0, 0);

369 
	}
}

374 
	ggzif°ªam
::
	$gzif°ªam
()

375 : 
°d
::
	`i°ªam
(
NULL
), 
	$sb
()

376 { 
this
->
	`öô
(&
sb
); 
	}
}

379 
	ggzif°ªam
::
	$gzif°ªam
(c⁄° * 
«me
,

380 
°d
::
ios_ba£
::
›ímode
 
mode
)

381 : 
°d
::
	`i°ªam
(
NULL
), 
	$sb
()

383 
this
->
	`öô
(&
sb
);

384 
this
->
	`›í
(
«me
, 
mode
);

385 
	}
}

388 
	ggzif°ªam
::
	$gzif°ªam
(
fd
,

389 
°d
::
ios_ba£
::
›ímode
 
mode
)

390 : 
°d
::
	`i°ªam
(
NULL
), 
	$sb
()

392 
this
->
	`öô
(&
sb
);

393 
this
->
	`©èch
(
fd
, 
mode
);

394 
	}
}

398 
	ggzif°ªam
::
	$›í
(c⁄° * 
«me
,

399 
°d
::
ios_ba£
::
›ímode
 
mode
)

401 i‡(!
sb
.
	`›í
(
«me
, 
mode
 | 
°d
::
ios_ba£
::
ö
))

402 
this
->
	`£t°©e
(
°d
::
ios_ba£
::
Áûbô
);

404 
this
->
	`˛ór
();

405 
	}
}

409 
	ggzif°ªam
::
	$©èch
(
fd
,

410 
°d
::
ios_ba£
::
›ímode
 
mode
)

412 i‡(!
sb
.
	`©èch
(
fd
, 
mode
 | 
°d
::
ios_ba£
::
ö
))

413 
this
->
	`£t°©e
(
°d
::
ios_ba£
::
Áûbô
);

415 
this
->
	`˛ór
();

416 
	}
}

420 
	ggzif°ªam
::
	$˛o£
()

422 i‡(!
sb
.
	`˛o£
())

423 
this
->
	`£t°©e
(
°d
::
ios_ba£
::
Áûbô
);

424 
	}
}

429 
	ggzof°ªam
::
	$gzof°ªam
()

430 : 
°d
::
	`o°ªam
(
NULL
), 
	$sb
()

431 { 
this
->
	`öô
(&
sb
); 
	}
}

434 
	ggzof°ªam
::
	$gzof°ªam
(c⁄° * 
«me
,

435 
°d
::
ios_ba£
::
›ímode
 
mode
)

436 : 
°d
::
	`o°ªam
(
NULL
), 
	$sb
()

438 
this
->
	`öô
(&
sb
);

439 
this
->
	`›í
(
«me
, 
mode
);

440 
	}
}

443 
	ggzof°ªam
::
	$gzof°ªam
(
fd
,

444 
°d
::
ios_ba£
::
›ímode
 
mode
)

445 : 
°d
::
	`o°ªam
(
NULL
), 
	$sb
()

447 
this
->
	`öô
(&
sb
);

448 
this
->
	`©èch
(
fd
, 
mode
);

449 
	}
}

453 
	ggzof°ªam
::
	$›í
(c⁄° * 
«me
,

454 
°d
::
ios_ba£
::
›ímode
 
mode
)

456 i‡(!
sb
.
	`›í
(
«me
, 
mode
 | 
°d
::
ios_ba£
::
out
))

457 
this
->
	`£t°©e
(
°d
::
ios_ba£
::
Áûbô
);

459 
this
->
	`˛ór
();

460 
	}
}

464 
	ggzof°ªam
::
	$©èch
(
fd
,

465 
°d
::
ios_ba£
::
›ímode
 
mode
)

467 i‡(!
sb
.
	`©èch
(
fd
, 
mode
 | 
°d
::
ios_ba£
::
out
))

468 
this
->
	`£t°©e
(
°d
::
ios_ba£
::
Áûbô
);

470 
this
->
	`˛ór
();

471 
	}
}

475 
	ggzof°ªam
::
	$˛o£
()

477 i‡(!
sb
.
	`˛o£
())

478 
this
->
	`£t°©e
(
°d
::
ios_ba£
::
Áûbô
);

479 
	}
}

	@zlib-1.2.8/contrib/iostream3/zfstream.h

10 #i‚de‡
ZFSTREAM_H


11 
	#ZFSTREAM_H


	)

13 
	~<i°ªam
>

14 
	~<o°ªam
>

15 
	~"zlib.h
"

27 ˛as†
	cgzfûebuf
 : 
public
 
°d
::
°ªambuf


29 
public
:

31 
gzfûebuf
();

34 
	mvútuÆ


35 ~
gzfûebuf
();

49 
£tcom¥essi⁄
(
comp_Àvñ
,

50 
comp_°øãgy
 = 
Z_DEFAULT_STRATEGY
);

56 
boﬁ


57 
	$is_›í
(Ëc⁄° {  (
fûe
 !
NULL
); }

65 
gzfûebuf
*

66 
	`›í
(c⁄° * 
«me
,

67 
°d
::
ios_ba£
::
›ímode
 
mode
);

75 
gzfûebuf
*

76 
	`©èch
(
fd
,

77 
°d
::
ios_ba£
::
›ímode
 
mode
);

83 
gzfûebuf
*

84 
	`˛o£
();

86 
¥Ÿe˘ed
:

91 
boﬁ


92 
	$›í_mode
(
°d
::
ios_ba£
::
›ímode
 
mode
,

93 * 
c_mode
) const;

102 
vútuÆ
 
°d
::
°ªamsize


103 
	`showm™yc
();

112 
vútuÆ
 
öt_ty≥


113 
	`undîÊow
();

124 
vútuÆ
 
öt_ty≥


125 
	`ovîÊow
(
öt_ty≥
 
c
 = 
åaôs_ty≥
::
	`eof
());

135 
vútuÆ
 
°d
::
°ªambuf
*

136 
	`£tbuf
(
ch¨_ty≥
* 
p
,

137 
°d
::
°ªamsize
 
n
);

145 
vútuÆ
 

146 
	`sync
();

161 
¥iv©e
:

171 
	`íabÀ_buf„r
();

181 
	`dißbÀ_buf„r
();

186 
gzFûe
 
fûe
;

191 
°d
::
ios_ba£
::
›ímode
 
io_mode
;

199 
boﬁ
 
own_fd
;

207 
ch¨_ty≥
* 
buf„r
;

215 
°d
::
°ªamsize
 
buf„r_size
;

223 
boﬁ
 
own_buf„r
;

224 
	}
};

234 ˛as†
	cgzif°ªam
 : 
public
 
°d
::
i°ªam


236 
public
:

238 
gzif°ªam
();

245 
ex∂icô


246 
gzif°ªam
(c⁄° * 
«me
,

247 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
ö
);

254 
ex∂icô


255 
gzif°ªam
(
fd
,

256 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
ö
);

261 
gzfûebuf
*

262 
	$rdbuf
() const

263 {  
c⁄°_ˇ°
<
gzfûebuf
*>(&
sb
); }

269 
boﬁ


270 
	$is_›í
(Ë{  
sb
.
	`is_›í
(); 
	}
}

285 
›í
(c⁄° * 
«me
,

286 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
ö
);

297 
©èch
(
fd
,

298 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
ö
);

306 
˛o£
();

308 
	g¥iv©e
:

312 
gzfûebuf
 
sb
;

323 ˛as†
	cgzof°ªam
 : 
public
 
°d
::
o°ªam


325 
public
:

327 
gzof°ªam
();

334 
ex∂icô


335 
gzof°ªam
(c⁄° * 
«me
,

336 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
out
);

343 
ex∂icô


344 
gzof°ªam
(
fd
,

345 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
out
);

350 
gzfûebuf
*

351 
	$rdbuf
() const

352 {  
c⁄°_ˇ°
<
gzfûebuf
*>(&
sb
); }

358 
boﬁ


359 
	$is_›í
(Ë{  
sb
.
	`is_›í
(); 
	}
}

374 
›í
(c⁄° * 
«me
,

375 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
out
);

386 
©èch
(
fd
,

387 
°d
::
ios_ba£
::
›ímode
 
mode
 = std::ios_ba£::
out
);

395 
˛o£
();

397 
	g¥iv©e
:

401 
gzfûebuf
 
sb
;

412 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

413 ˛as†
	cgzom™ù2


415 
	mpublic
:

417 
ãm∂©e
 <
ty≥«me
 
Ta
,Åy≥«mê
	mTb
>

418 
‰õnd
 
	mgzof°ªam
&

419 
	m›î©‹
<<(
	mgzof°ªam
&,

420 c⁄° 
	mgzom™ù2
<
	mTa
,
	mTb
>&);

423 
gzom™ù2
(
gzof°ªam
& (*
f
)(gzof°ªam&, 
T1
, 
T2
),

424 
T1
 
v1
,

425 
T2
 
v2
);

426 
	m¥iv©e
:

428 
gzof°ªam
&

429 (*
func
)(
gzof°ªam
&, 
	mT1
, 
	mT2
);

432 
T1
 
	mvÆ1
;

433 
T2
 
	mvÆ2
;

439 
ölöe
 
	ggzof°ªam
&

440 
	$£tcom¥essi⁄
(
gzof°ªam
 &
gzs
, 
l
, 
s
 = 
Z_DEFAULT_STRATEGY
)

442 (
gzs
.
	`rdbuf
())->
	`£tcom¥essi⁄
(
l
, 
s
);

443  
gzs
;

444 
	}
}

447 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

448 
ölöe


449 
	ggzom™ù2
<
	gT1
,
	gT2
>::
gzom™ù2
(
gzof°ªam
 &(*
f
)(gzof°ªam &, 
T1
, 
T2
),

450 
T1
 
v1
,

451 
T2
 
v2
)

452 : 
func
(
f
), 
vÆ1
(
v1
), 
	$vÆ2
(
v2
)

453 { 
	}
}

456 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

457 
ölöe
 
	ggzof°ªam
&

458 
	g›î©‹
<<(
	ggzof°ªam
& 
	gs
, c⁄° 
	ggzom™ù2
<
	gT1
,
	gT2
>& 
	gm
)

459 {  (*
	gm
.
	gfunc
)(
	gs
, m.
	gvÆ1
, m.
	gvÆ2
); }

462 
ölöe
 
	ggzom™ù2
<,>

463 
	$£tcom¥essi⁄
(
l
, 
s
 = 
Z_DEFAULT_STRATEGY
)

464 {  
gzom™ù2
<,>(&
£tcom¥essi⁄
, 
l
, 
s
); 
	}
}

	@zlib-1.2.8/contrib/masmx64/inffas8664.c

35 
	~<°dio.h
>

36 
	~"zutû.h
"

37 
	~"ö·ªes.h
"

38 
	~"öÊ©e.h
"

39 
	~"öfÁ°.h
"

81 
	söfÁ°_¨
 {

84  *
	me•
;

85  *
	mebp
;

86  
FAR
 *
	mö
;

87  
FAR
 *
	mœ°
;

88  
FAR
 *
	mout
;

89  
FAR
 *
	mbeg
;

90  
FAR
 *
	míd
;

91  
FAR
 *
	mwödow
;

92  
code
 c⁄° 
FAR
 *
	mlcode
;

93  
code
 c⁄° 
FAR
 *
	mdcode
;

94  
size_t
 
	mhﬁd
;

95  
	mbôs
;

96  
	mwsize
;

97  
	mwrôe
;

98  
	mlmask
;

99  
	mdmask
;

100  
	mÀn
;

101  
	mdi°
;

102  
	m°©us
;

103 } 
	tty≥_¨
;

104 #ifde‡
ASMINF


106 
	$öÊ©e_Á°
(
°rm
, 
°¨t
)

107 
z_°ªamp
 
°rm
;

108 
°¨t
;

110 
öÊ©e_°©e
 
FAR
 *
°©e
;

111 
ty≥_¨
 
¨
;

112 
	`öfÁs8664‚c
(
öfÁ°_¨
 * 
∑r
);

116 #i‡(
	`deföed
–
__GNUC__
 ) && deföed–
__amd64__
 ) && ! deföed–
__i386
 )Ë|| (deföed(
_MSC_VER
Ë&& deföed(
_M_AMD64
))

117 
	#PAD_AVAIL_IN
 6

	)

118 
	#PAD_AVAIL_OUT
 258

	)

120 
	#PAD_AVAIL_IN
 5

	)

121 
	#PAD_AVAIL_OUT
 257

	)

125 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

127 
¨
.
ö
 = 
°rm
->
√xt_ö
;

128 
¨
.
œ°
 =ár.
ö
 + (
°rm
->
avaû_ö
 - 
PAD_AVAIL_IN
);

129 
¨
.
out
 = 
°rm
->
√xt_out
;

130 
¨
.
beg
 =ár.
out
 - (
°¨t
 - 
°rm
->
avaû_out
);

131 
¨
.
íd
 =ár.
out
 + (
°rm
->
avaû_out
 - 
PAD_AVAIL_OUT
);

132 
¨
.
wsize
 = 
°©e
->wsize;

133 
¨
.
wrôe
 = 
°©e
->
w√xt
;

134 
¨
.
wödow
 = 
°©e
->window;

135 
¨
.
hﬁd
 = 
°©e
->hold;

136 
¨
.
bôs
 = 
°©e
->bits;

137 
¨
.
lcode
 = 
°©e
->
Àncode
;

138 
¨
.
dcode
 = 
°©e
->
di°code
;

139 
¨
.
lmask
 = (1U << 
°©e
->
Ànbôs
) - 1;

140 
¨
.
dmask
 = (1U << 
°©e
->
di°bôs
) - 1;

146 ((
size_t
)(*)
¨
.
ö
 & (◊r.
hﬁd
) / 2 - 1)) != 0) {

147 
¨
.
hﬁd
 +()*¨.
ö
++ <<ár.
bôs
;

148 
¨
.
bôs
 += 8;

151 
	`öfÁs8664‚c
(&
¨
);

153 i‡(
¨
.
°©us
 > 1) {

154 i‡(
¨
.
°©us
 == 2)

155 
°rm
->
msg
 = "invalidÜiteral/length code";

156 i‡(
¨
.
°©us
 == 3)

157 
°rm
->
msg
 = "invalid distance code";

159 
°rm
->
msg
 = "invalid distanceÅoo far back";

160 
°©e
->
mode
 = 
BAD
;

162 i‡–
¨
.
°©us
 == 1 ) {

163 
°©e
->
mode
 = 
TYPE
;

167 
¨
.
Àn
 =ár.
bôs
 >> 3;

168 
¨
.
ö
 -¨.
Àn
;

169 
¨
.
bôs
 -¨.
Àn
 << 3;

170 
¨
.
hﬁd
 &(1U <<ár.
bôs
) - 1;

173 
°rm
->
√xt_ö
 = 
¨
.
ö
;

174 
°rm
->
√xt_out
 = 
¨
.
out
;

175 
°rm
->
avaû_ö
 = ()(
¨
.
ö
 <ár.
œ°
 ?

176 
PAD_AVAIL_IN
 + (
¨
.
œ°
 -ár.
ö
) :

177 
PAD_AVAIL_IN
 - (
¨
.
ö
 -ár.
œ°
));

178 
°rm
->
avaû_out
 = ()(
¨
.
out
 <ár.
íd
 ?

179 
PAD_AVAIL_OUT
 + (
¨
.
íd
 -ár.
out
) :

180 
PAD_AVAIL_OUT
 - (
¨
.
out
 -ár.
íd
));

181 
°©e
->
hﬁd
 = ()
¨
.hold;

182 
°©e
->
bôs
 = 
¨
.bits;

184 
	}
}

	@zlib-1.2.8/contrib/minizip/crypt.h

30 
	#CRC32
(
c
, 
b
Ë((*(
p¸c_32_èb
+((()(cË^ (b)Ë& 0xff))Ë^ ((cË>> 8))

	)

35 
	$de¸y±_byã
(* 
pkeys
, c⁄° 
z_¸c_t
* 
p¸c_32_èb
)

37 
ãmp
;

41 
ãmp
 = (()(*(
pkeys
+2)) & 0xffff) | 2;

42  ()(((
ãmp
 * (temp ^ 1)) >> 8) & 0xff);

43 
	}
}

48 
	$upd©e_keys
(* 
pkeys
,c⁄° 
z_¸c_t
* 
p¸c_32_èb
,
c
)

50 (*(
pkeys
+0)Ë
	`CRC32
((*’keys+0)), 
c
);

51 (*(
pkeys
+1)) += (*(pkeys+0)) & 0xff;

52 (*(
pkeys
+1)) = (*(pkeys+1)) * 134775813L + 1;

54 
keyshi·
 = ()((*(
pkeys
+1)) >> 24);

55 (*(
pkeys
+2)Ë
	`CRC32
((*’keys+2)), 
keyshi·
);

57  
c
;

58 
	}
}

65 
	$öô_keys
(c⁄° * 
∑sswd
,* 
pkeys
,c⁄° 
z_¸c_t
* 
p¸c_32_èb
)

67 *(
pkeys
+0) = 305419896L;

68 *(
pkeys
+1) = 591751049L;

69 *(
pkeys
+2) = 878082192L;

70 *
∑sswd
 != '\0') {

71 
	`upd©e_keys
(
pkeys
,
p¸c_32_èb
,()*
∑sswd
);

72 
∑sswd
++;

74 
	}
}

76 
	#zdecode
(
pkeys
,
p¸c_32_èb
,
c
) \

77 (
	`upd©e_keys
(
pkeys
,
p¸c_32_èb
,
c
 ^
	`de¸y±_byã
’keys,p¸c_32_èb)))

	)

79 
	#zícode
(
pkeys
,
p¸c_32_èb
,
c
,
t
) \

80 (
t
=
	`de¸y±_byã
(
pkeys
,
p¸c_32_èb
), 
	`upd©e_keys
’keys,p¸c_32_èb,
c
),Å^(c))

	)

82 #ifde‡
INCLUDECRYPTINGCODE_IFCRYPTALLOWED


84 
	#RAND_HEAD_LEN
 12

	)

86 #i‚de‡
ZCR_SEED2


87 
	#ZCR_SEED2
 3141592654UL

	)

90 
	$¸y±hód
(c⁄° * 
∑sswd
,

91 * 
buf
,

92 
bufSize
,

93 * 
pkeys
,

94 c⁄° 
z_¸c_t
* 
p¸c_32_èb
,

95 
¸cF‹Cry±ög
)

97 
n
;

98 
t
;

99 
c
;

100 
hódî
[
RAND_HEAD_LEN
-2];

101 
ˇŒs
 = 0;

103 i‡(
bufSize
<
RAND_HEAD_LEN
)

110 i‡(++
ˇŒs
 == 1)

112 
	`§™d
(()(
	`time
(
NULL
Ë^ 
ZCR_SEED2
));

114 
	`öô_keys
(
∑sswd
, 
pkeys
, 
p¸c_32_èb
);

115 
n
 = 0;Ç < 
RAND_HEAD_LEN
-2;Ç++)

117 
c
 = (
	`ønd
() >> 7) & 0xff;

118 
hódî
[
n
] = ()
	`zícode
(
pkeys
, 
p¸c_32_èb
, 
c
, 
t
);

121 
	`öô_keys
(
∑sswd
, 
pkeys
, 
p¸c_32_èb
);

122 
n
 = 0;Ç < 
RAND_HEAD_LEN
-2;Ç++)

124 
buf
[
n
] = ()
	`zícode
(
pkeys
, 
p¸c_32_èb
, 
hódî
[n], 
t
);

126 
buf
[
n
++] = ()
	`zícode
(
pkeys
, 
p¸c_32_èb
, ()(
¸cF‹Cry±ög
 >> 16Ë& 0xff, 
t
);

127 
buf
[
n
++] = ()
	`zícode
(
pkeys
, 
p¸c_32_èb
, ()(
¸cF‹Cry±ög
 >> 24Ë& 0xff, 
t
);

128  
n
;

129 
	}
}

	@zlib-1.2.8/contrib/minizip/ioapi.c

13 #i‡
deföed
(
_WIN32
Ë&& (!(deföed(
_CRT_SECURE_NO_WARNINGS
)))

14 
	#_CRT_SECURE_NO_WARNINGS


	)

17 #i‡
deföed
(
__APPLE__
Ë|| deföed(
IOAPI_NO_64
)

19 
	#FOPEN_FUNC
(
fûíame
, 
mode
Ë
	`f›í
(fûíame, mode)

	)

20 
	#FTELLO_FUNC
(
°ªam
Ë
	`·ñlo
(°ªam)

	)

21 
	#FSEEKO_FUNC
(
°ªam
, 
off£t
, 
‹igö
Ë
	`f£eko
(°ªam, off£t, origö)

	)

23 
	#FOPEN_FUNC
(
fûíame
, 
mode
Ë
	`f›í64
(fûíame, mode)

	)

24 
	#FTELLO_FUNC
(
°ªam
Ë
	`·ñlo64
(°ªam)

	)

25 
	#FSEEKO_FUNC
(
°ªam
, 
off£t
, 
‹igö
Ë
	`f£eko64
(°ªam, off£t, origö)

	)

29 
	~"iﬂpi.h
"

31 
voidpf
 
	$ˇŒ_z›í64
 (c⁄° 
zlib_fûefunc64_32_def
* 
pfûefunc
,c⁄° *
fûíame
,
mode
)

33 i‡(
pfûefunc
->
zfûe_func64
.
z›í64_fûe
 !
NULL
)

34  (*(
pfûefunc
->
zfûe_func64
.
z›í64_fûe
)Ë’fûefunc->zfûe_func64.
›aque
,
fûíame
,
mode
);

37  (*(
pfûefunc
->
z›í32_fûe
))’fûefunc->
zfûe_func64
.
›aque
,(c⁄° *)
fûíame
,
mode
);

39 
	}
}

41 
	$ˇŒ_z£ek64
 (c⁄° 
zlib_fûefunc64_32_def
* 
pfûefunc
,
voidpf
 
fûe°ªam
, 
ZPOS64_T
 
off£t
, 
‹igö
)

43 i‡(
pfûefunc
->
zfûe_func64
.
z£ek64_fûe
 !
NULL
)

44  (*(
pfûefunc
->
zfûe_func64
.
z£ek64_fûe
)Ë’fûefunc->zfûe_func64.
›aque
,
fûe°ªam
,
off£t
,
‹igö
);

47 
uL⁄g
 
off£tTrunˇãd
 = (uL⁄g)
off£t
;

48 i‡(
off£tTrunˇãd
 !
off£t
)

51  (*(
pfûefunc
->
z£ek32_fûe
))’fûefunc->
zfûe_func64
.
›aque
,
fûe°ªam
,
off£tTrunˇãd
,
‹igö
);

53 
	}
}

55 
ZPOS64_T
 
	$ˇŒ_zãŒ64
 (c⁄° 
zlib_fûefunc64_32_def
* 
pfûefunc
,
voidpf
 
fûe°ªam
)

57 i‡(
pfûefunc
->
zfûe_func64
.
z£ek64_fûe
 !
NULL
)

58  (*(
pfûefunc
->
zfûe_func64
.
zãŒ64_fûe
)Ë’fûefunc->zfûe_func64.
›aque
,
fûe°ªam
);

61 
uL⁄g
 
ãŒ_uL⁄g
 = (*(
pfûefunc
->
zãŒ32_fûe
))’fûefunc->
zfûe_func64
.
›aque
,
fûe°ªam
);

62 i‡((
ãŒ_uL⁄g
Ë=
MAXU32
)

63  (
ZPOS64_T
)-1;

65  
ãŒ_uL⁄g
;

67 
	}
}

69 
	$fûl_zlib_fûefunc64_32_def_‰om_fûefunc32
(
zlib_fûefunc64_32_def
* 
p_fûefunc64_32
,c⁄° 
zlib_fûefunc_def
* 
p_fûefunc32
)

71 
p_fûefunc64_32
->
zfûe_func64
.
z›í64_fûe
 = 
NULL
;

72 
p_fûefunc64_32
->
z›í32_fûe
 = 
p_fûefunc32
->
z›í_fûe
;

73 
p_fûefunc64_32
->
zfûe_func64
.
zîr‹_fûe
 = 
p_fûefunc32
->zerror_file;

74 
p_fûefunc64_32
->
zfûe_func64
.
zªad_fûe
 = 
p_fûefunc32
->zread_file;

75 
p_fûefunc64_32
->
zfûe_func64
.
zwrôe_fûe
 = 
p_fûefunc32
->zwrite_file;

76 
p_fûefunc64_32
->
zfûe_func64
.
zãŒ64_fûe
 = 
NULL
;

77 
p_fûefunc64_32
->
zfûe_func64
.
z£ek64_fûe
 = 
NULL
;

78 
p_fûefunc64_32
->
zfûe_func64
.
z˛o£_fûe
 = 
p_fûefunc32
->zclose_file;

79 
p_fûefunc64_32
->
zfûe_func64
.
zîr‹_fûe
 = 
p_fûefunc32
->zerror_file;

80 
p_fûefunc64_32
->
zfûe_func64
.
›aque
 = 
p_fûefunc32
->opaque;

81 
p_fûefunc64_32
->
z£ek32_fûe
 = 
p_fûefunc32
->
z£ek_fûe
;

82 
p_fûefunc64_32
->
zãŒ32_fûe
 = 
p_fûefunc32
->
zãŒ_fûe
;

83 
	}
}

87 
voidpf
 
ZCALLBACK
 
f›í_fûe_func
 
OF
((voidp‡
›aque
, c⁄° * 
fûíame
, 
mode
));

88 
uL⁄g
 
ZCALLBACK
 
‰ód_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
, * 
buf
, uL⁄g 
size
));

89 
uL⁄g
 
ZCALLBACK
 
fwrôe_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
, c⁄° * 
buf
,uL⁄g 
size
));

90 
ZPOS64_T
 
ZCALLBACK
 
·ñl64_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
));

91 
ZCALLBACK
 
f£ek64_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
, 
ZPOS64_T
 
off£t
, 
‹igö
));

92 
ZCALLBACK
 
f˛o£_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
));

93 
ZCALLBACK
 
„º‹_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
));

95 
voidpf
 
ZCALLBACK
 
	$f›í_fûe_func
 (
voidpf
 
›aque
, c⁄° * 
fûíame
, 
mode
)

97 
FILE
* 
fûe
 = 
NULL
;

98 c⁄° * 
mode_f›í
 = 
NULL
;

99 i‡((
mode
 & 
ZLIB_FILEFUNC_MODE_READWRITEFILTER
)==
ZLIB_FILEFUNC_MODE_READ
)

100 
mode_f›í
 = "rb";

102 i‡(
mode
 & 
ZLIB_FILEFUNC_MODE_EXISTING
)

103 
mode_f›í
 = "r+b";

105 i‡(
mode
 & 
ZLIB_FILEFUNC_MODE_CREATE
)

106 
mode_f›í
 = "wb";

108 i‡((
fûíame
!=
NULL
Ë&& (
mode_f›í
 != NULL))

109 
fûe
 = 
	`f›í
(
fûíame
, 
mode_f›í
);

110  
fûe
;

111 
	}
}

113 
voidpf
 
ZCALLBACK
 
	$f›í64_fûe_func
 (
voidpf
 
›aque
, c⁄° * 
fûíame
, 
mode
)

115 
FILE
* 
fûe
 = 
NULL
;

116 c⁄° * 
mode_f›í
 = 
NULL
;

117 i‡((
mode
 & 
ZLIB_FILEFUNC_MODE_READWRITEFILTER
)==
ZLIB_FILEFUNC_MODE_READ
)

118 
mode_f›í
 = "rb";

120 i‡(
mode
 & 
ZLIB_FILEFUNC_MODE_EXISTING
)

121 
mode_f›í
 = "r+b";

123 i‡(
mode
 & 
ZLIB_FILEFUNC_MODE_CREATE
)

124 
mode_f›í
 = "wb";

126 i‡((
fûíame
!=
NULL
Ë&& (
mode_f›í
 != NULL))

127 
fûe
 = 
	`FOPEN_FUNC
((c⁄° *)
fûíame
, 
mode_f›í
);

128  
fûe
;

129 
	}
}

132 
uL⁄g
 
ZCALLBACK
 
	$‰ód_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
, * 
buf
, 
uL⁄g
 
size
)

134 
uL⁄g
 
ªt
;

135 
ªt
 = (
uL⁄g
)
	`‰ód
(
buf
, 1, (
size_t
)
size
, (
FILE
 *)
°ªam
);

136  
ªt
;

137 
	}
}

139 
uL⁄g
 
ZCALLBACK
 
	$fwrôe_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
, c⁄° * 
buf
, 
uL⁄g
 
size
)

141 
uL⁄g
 
ªt
;

142 
ªt
 = (
uL⁄g
)
	`fwrôe
(
buf
, 1, (
size_t
)
size
, (
FILE
 *)
°ªam
);

143  
ªt
;

144 
	}
}

146 
ZCALLBACK
 
	$·ñl_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
)

148 
ªt
;

149 
ªt
 = 
	`·ñl
((
FILE
 *)
°ªam
);

150  
ªt
;

151 
	}
}

154 
ZPOS64_T
 
ZCALLBACK
 
	$·ñl64_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
)

156 
ZPOS64_T
 
ªt
;

157 
ªt
 = 
	`FTELLO_FUNC
((
FILE
 *)
°ªam
);

158  
ªt
;

159 
	}
}

161 
ZCALLBACK
 
	$f£ek_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
, 
uL⁄g
 
off£t
, 
‹igö
)

163 
f£ek_‹igö
=0;

164 
ªt
;

165 
‹igö
)

167 
ZLIB_FILEFUNC_SEEK_CUR
 :

168 
f£ek_‹igö
 = 
SEEK_CUR
;

170 
ZLIB_FILEFUNC_SEEK_END
 :

171 
f£ek_‹igö
 = 
SEEK_END
;

173 
ZLIB_FILEFUNC_SEEK_SET
 :

174 
f£ek_‹igö
 = 
SEEK_SET
;

178 
ªt
 = 0;

179 i‡(
	`f£ek
((
FILE
 *)
°ªam
, 
off£t
, 
f£ek_‹igö
) != 0)

180 
ªt
 = -1;

181  
ªt
;

182 
	}
}

184 
ZCALLBACK
 
	$f£ek64_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
, 
ZPOS64_T
 
off£t
, 
‹igö
)

186 
f£ek_‹igö
=0;

187 
ªt
;

188 
‹igö
)

190 
ZLIB_FILEFUNC_SEEK_CUR
 :

191 
f£ek_‹igö
 = 
SEEK_CUR
;

193 
ZLIB_FILEFUNC_SEEK_END
 :

194 
f£ek_‹igö
 = 
SEEK_END
;

196 
ZLIB_FILEFUNC_SEEK_SET
 :

197 
f£ek_‹igö
 = 
SEEK_SET
;

201 
ªt
 = 0;

203 if(
	`FSEEKO_FUNC
((
FILE
 *)
°ªam
, 
off£t
, 
f£ek_‹igö
) != 0)

204 
ªt
 = -1;

206  
ªt
;

207 
	}
}

210 
ZCALLBACK
 
	$f˛o£_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
)

212 
ªt
;

213 
ªt
 = 
	`f˛o£
((
FILE
 *)
°ªam
);

214  
ªt
;

215 
	}
}

217 
ZCALLBACK
 
	$„º‹_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
)

219 
ªt
;

220 
ªt
 = 
	`„º‹
((
FILE
 *)
°ªam
);

221  
ªt
;

222 
	}
}

224 
	$fûl_f›í_fûefunc
 (
pzlib_fûefunc_def
)

225 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
;

227 
pzlib_fûefunc_def
->
z›í_fûe
 = 
f›í_fûe_func
;

228 
pzlib_fûefunc_def
->
zªad_fûe
 = 
‰ód_fûe_func
;

229 
pzlib_fûefunc_def
->
zwrôe_fûe
 = 
fwrôe_fûe_func
;

230 
pzlib_fûefunc_def
->
zãŒ_fûe
 = 
·ñl_fûe_func
;

231 
pzlib_fûefunc_def
->
z£ek_fûe
 = 
f£ek_fûe_func
;

232 
pzlib_fûefunc_def
->
z˛o£_fûe
 = 
f˛o£_fûe_func
;

233 
pzlib_fûefunc_def
->
zîr‹_fûe
 = 
„º‹_fûe_func
;

234 
pzlib_fûefunc_def
->
›aque
 = 
NULL
;

235 
	}
}

237 
	$fûl_f›í64_fûefunc
 (
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
)

239 
pzlib_fûefunc_def
->
z›í64_fûe
 = 
f›í64_fûe_func
;

240 
pzlib_fûefunc_def
->
zªad_fûe
 = 
‰ód_fûe_func
;

241 
pzlib_fûefunc_def
->
zwrôe_fûe
 = 
fwrôe_fûe_func
;

242 
pzlib_fûefunc_def
->
zãŒ64_fûe
 = 
·ñl64_fûe_func
;

243 
pzlib_fûefunc_def
->
z£ek64_fûe
 = 
f£ek64_fûe_func
;

244 
pzlib_fûefunc_def
->
z˛o£_fûe
 = 
f˛o£_fûe_func
;

245 
pzlib_fûefunc_def
->
zîr‹_fûe
 = 
„º‹_fûe_func
;

246 
pzlib_fûefunc_def
->
›aque
 = 
NULL
;

247 
	}
}

	@zlib-1.2.8/contrib/minizip/ioapi.h

21 #i‚de‡
_ZLIBIOAPI64_H


22 
	#_ZLIBIOAPI64_H


	)

24 #i‡(!
deföed
(
_WIN32
)Ë&& (!deföed(
WIN32
)Ë&& (!deföed(
__APPLE__
))

29 #i‚de‡
__USE_FILE_OFFSET64


30 
	#__USE_FILE_OFFSET64


	)

32 #i‚de‡
__USE_LARGEFILE64


33 
	#__USE_LARGEFILE64


	)

35 #i‚de‡
_LARGEFILE64_SOURCE


36 
	#_LARGEFILE64_SOURCE


	)

38 #i‚de‡
_FILE_OFFSET_BIT


39 
	#_FILE_OFFSET_BIT
 64

	)

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~"zlib.h
"

48 #i‡
deföed
(
USE_FILE32API
)

49 
	#f›í64
 
f›í


	)

50 
	#·ñlo64
 
·ñl


	)

51 
	#f£eko64
 
f£ek


	)

53 #ifde‡
__FªeBSD__


54 
	#f›í64
 
f›í


	)

55 
	#·ñlo64
 
·ñlo


	)

56 
	#f£eko64
 
f£eko


	)

58 #ifde‡
_MSC_VER


59 
	#f›í64
 
f›í


	)

60 #i‡(
_MSC_VER
 >1400Ë&& (!(
deföed
(
NO_MSCVER_FILE64_FUNC
)))

61 
	#·ñlo64
 
_·ñli64


	)

62 
	#f£eko64
 
_f£eki64


	)

64 
	#·ñlo64
 
·ñl


	)

65 
	#f£eko64
 
f£ek


	)

81 #ifde‡
HAVE_MINIZIP64_CONF_H


82 
	~"mz64c⁄f.h
"

86 #ifde‡
HAVE_64BIT_INT_CUSTOM


87 64B
IT_INT_CUSTOM_TYPE
 
	tZPOS64_T
;

89 #ifde‡
HAS_STDINT_H


90 
	~"°döt.h
"

91 
uöt64_t
 
	tZPOS64_T
;

95 
	#MAXU32
 0xffffffff

	)

97 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

98 
	t__öt64
 
	tZPOS64_T
;

100 
	tZPOS64_T
;

107 #ifde‡
__˝lu•lus


112 
	#ZLIB_FILEFUNC_SEEK_CUR
 (1)

	)

113 
	#ZLIB_FILEFUNC_SEEK_END
 (2)

	)

114 
	#ZLIB_FILEFUNC_SEEK_SET
 (0)

	)

116 
	#ZLIB_FILEFUNC_MODE_READ
 (1)

	)

117 
	#ZLIB_FILEFUNC_MODE_WRITE
 (2)

	)

118 
	#ZLIB_FILEFUNC_MODE_READWRITEFILTER
 (3)

	)

120 
	#ZLIB_FILEFUNC_MODE_EXISTING
 (4)

	)

121 
	#ZLIB_FILEFUNC_MODE_CREATE
 (8)

	)

124 #i‚de‡
ZCALLBACK


125 #i‡(
deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| deföed (
WINDOWS
Ë|| deföed (
_WINDOWS
)Ë&& deföed(
CALLBACK
Ë&& deföed (
USEWINDOWS_CALLBACK
)

126 
	#ZCALLBACK
 
CALLBACK


	)

128 
	#ZCALLBACK


	)

135 
voidpf
 (
	tZCALLBACK
 *
	t›í_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, c⁄° * 
	tfûíame
, 
	tmode
));

136 
uL⁄g
 (
	tZCALLBACK
 *
	tªad_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
, * 
	tbuf
, 
	tuL⁄g
 
	tsize
));

137 
uL⁄g
 (
	tZCALLBACK
 *
	twrôe_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
, c⁄° * 
	tbuf
, 
	tuL⁄g
 
	tsize
));

138 (
ZCALLBACK
 *
	t˛o£_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
));

139 (
ZCALLBACK
 *
	tã°îr‹_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
));

141 (
ZCALLBACK
 *
	tãŒ_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
));

142 (
ZCALLBACK
 *
	t£ek_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
, 
	tuL⁄g
 
	toff£t
, 
	t‹igö
));

146 
	szlib_fûefunc_def_s


148 
›í_fûe_func
 
z›í_fûe
;

149 
ªad_fûe_func
 
zªad_fûe
;

150 
wrôe_fûe_func
 
zwrôe_fûe
;

151 
ãŒ_fûe_func
 
zãŒ_fûe
;

152 
£ek_fûe_func
 
z£ek_fûe
;

153 
˛o£_fûe_func
 
z˛o£_fûe
;

154 
ã°îr‹_fûe_func
 
zîr‹_fûe
;

155 
voidpf
 
›aque
;

156 } 
	tzlib_fûefunc_def
;

158 
ZPOS64_T
 (
	tZCALLBACK
 *
	tãŒ64_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
));

159 (
ZCALLBACK
 *
	t£ek64_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	t°ªam
, 
	tZPOS64_T
 
	toff£t
, 
	t‹igö
));

160 
voidpf
 (
	tZCALLBACK
 *
	t›í64_fûe_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, c⁄° * 
	tfûíame
, 
	tmode
));

162 
	szlib_fûefunc64_def_s


164 
›í64_fûe_func
 
z›í64_fûe
;

165 
ªad_fûe_func
 
zªad_fûe
;

166 
wrôe_fûe_func
 
zwrôe_fûe
;

167 
ãŒ64_fûe_func
 
zãŒ64_fûe
;

168 
£ek64_fûe_func
 
z£ek64_fûe
;

169 
˛o£_fûe_func
 
z˛o£_fûe
;

170 
ã°îr‹_fûe_func
 
zîr‹_fûe
;

171 
voidpf
 
›aque
;

172 } 
	tzlib_fûefunc64_def
;

174 
fûl_f›í64_fûefunc
 
OF
((
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
));

175 
fûl_f›í_fûefunc
 
OF
((
zlib_fûefunc_def
* 
pzlib_fûefunc_def
));

178 
	szlib_fûefunc64_32_def_s


180 
zlib_fûefunc64_def
 
zfûe_func64
;

181 
›í_fûe_func
 
z›í32_fûe
;

182 
ãŒ_fûe_func
 
zãŒ32_fûe
;

183 
£ek_fûe_func
 
z£ek32_fûe
;

184 } 
	tzlib_fûefunc64_32_def
;

187 
	#ZREAD64
(
fûefunc
,
fûe°ªam
,
buf
,
size
Ë((*((fûefunc).
zfûe_func64
.
zªad_fûe
)Ë((fûefunc).zfûe_func64.
›aque
,fûe°ªam,buf,size))

	)

188 
	#ZWRITE64
(
fûefunc
,
fûe°ªam
,
buf
,
size
Ë((*((fûefunc).
zfûe_func64
.
zwrôe_fûe
)Ë((fûefunc).zfûe_func64.
›aque
,fûe°ªam,buf,size))

	)

191 
	#ZCLOSE64
(
fûefunc
,
fûe°ªam
Ë((*((fûefunc).
zfûe_func64
.
z˛o£_fûe
)Ë((fûefunc).zfûe_func64.
›aque
,fûe°ªam))

	)

192 
	#ZERROR64
(
fûefunc
,
fûe°ªam
Ë((*((fûefunc).
zfûe_func64
.
zîr‹_fûe
)Ë((fûefunc).zfûe_func64.
›aque
,fûe°ªam))

	)

194 
voidpf
 
ˇŒ_z›í64
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pfûefunc
,c⁄° *
fûíame
,
mode
));

195 
ˇŒ_z£ek64
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pfûefunc
,
voidpf
 
fûe°ªam
, 
ZPOS64_T
 
off£t
, 
‹igö
));

196 
ZPOS64_T
 
ˇŒ_zãŒ64
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pfûefunc
,
voidpf
 
fûe°ªam
));

198 
fûl_zlib_fûefunc64_32_def_‰om_fûefunc32
(
zlib_fûefunc64_32_def
* 
p_fûefunc64_32
,c⁄° 
zlib_fûefunc_def
* 
p_fûefunc32
);

200 
	#ZOPEN64
(
fûefunc
,
fûíame
,
mode
Ë(
	`ˇŒ_z›í64
((&(fûefunc)),(fûíame),(mode)))

	)

201 
	#ZTELL64
(
fûefunc
,
fûe°ªam
Ë(
	`ˇŒ_zãŒ64
((&(fûefunc)),(fûe°ªam)))

	)

202 
	#ZSEEK64
(
fûefunc
,
fûe°ªam
,
pos
,
mode
Ë(
	`ˇŒ_z£ek64
((&(fûefunc)),(fûe°ªam),’os),(mode)))

	)

204 #ifde‡
__˝lu•lus


	@zlib-1.2.8/contrib/minizip/iowin32.c

14 
	~<°dlib.h
>

16 
	~"zlib.h
"

17 
	~"iﬂpi.h
"

18 
	~"iowö32.h
"

20 #i‚de‡
INVALID_HANDLE_VALUE


21 
	#INVALID_HANDLE_VALUE
 (0xFFFFFFFF)

	)

24 #i‚de‡
INVALID_SET_FILE_POINTER


25 
	#INVALID_SET_FILE_POINTER
 ((
DWORD
)-1)

	)

29 #i‡
deföed
(
WINAPI_FAMILY_PARTITION
Ë&& (!(deföed(
IOWIN32_USING_WINRT_API
)))

30 #i‡
WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_APP
)

31 
	#IOWIN32_USING_WINRT_API
 1

	)

35 
voidpf
 
ZCALLBACK
 
wö32_›í_fûe_func
 
OF
((voidp‡
›aque
, c⁄° * 
fûíame
, 
mode
));

36 
uL⁄g
 
ZCALLBACK
 
wö32_ªad_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
, * 
buf
, uL⁄g 
size
));

37 
uL⁄g
 
ZCALLBACK
 
wö32_wrôe_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
, c⁄° * 
buf
, uL⁄g 
size
));

38 
ZPOS64_T
 
ZCALLBACK
 
wö32_ãŒ64_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
));

39 
ZCALLBACK
 
wö32_£ek64_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
, 
ZPOS64_T
 
off£t
, 
‹igö
));

40 
ZCALLBACK
 
wö32_˛o£_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
));

41 
ZCALLBACK
 
wö32_îr‹_fûe_func
 
OF
((
voidpf
 
›aque
, voidp‡
°ªam
));

45 
HANDLE
 
	mhf
;

46 
	mîr‹
;

47 } 
	tWIN32FILE_IOWIN
;

50 
	$wö32_å™¶©e_›í_mode
(
mode
,

51 
DWORD
* 
ÕdwDesúedAc˚ss
,

52 
DWORD
* 
ÕdwCª©i⁄Di•osôi⁄
,

53 
DWORD
* 
ÕdwSh¨eMode
,

54 
DWORD
* 
ÕdwFœgsAndAâribuãs
)

56 *
ÕdwDesúedAc˚ss
 = *
ÕdwSh¨eMode
 = *
ÕdwFœgsAndAâribuãs
 = *
ÕdwCª©i⁄Di•osôi⁄
 = 0;

58 i‡((
mode
 & 
ZLIB_FILEFUNC_MODE_READWRITEFILTER
)==
ZLIB_FILEFUNC_MODE_READ
)

60 *
ÕdwDesúedAc˚ss
 = 
GENERIC_READ
;

61 *
ÕdwCª©i⁄Di•osôi⁄
 = 
OPEN_EXISTING
;

62 *
ÕdwSh¨eMode
 = 
FILE_SHARE_READ
;

64 i‡(
mode
 & 
ZLIB_FILEFUNC_MODE_EXISTING
)

66 *
ÕdwDesúedAc˚ss
 = 
GENERIC_WRITE
 | 
GENERIC_READ
;

67 *
ÕdwCª©i⁄Di•osôi⁄
 = 
OPEN_EXISTING
;

69 i‡(
mode
 & 
ZLIB_FILEFUNC_MODE_CREATE
)

71 *
ÕdwDesúedAc˚ss
 = 
GENERIC_WRITE
 | 
GENERIC_READ
;

72 *
ÕdwCª©i⁄Di•osôi⁄
 = 
CREATE_ALWAYS
;

74 
	}
}

76 
voidpf
 
	$wö32_buûd_iowö
(
HANDLE
 
hFûe
)

78 
voidpf
 
ªt
=
NULL
;

80 i‡((
hFûe
 !
NULL
Ë&& (hFûê!
INVALID_HANDLE_VALUE
))

82 
WIN32FILE_IOWIN
 
w32fiow
;

83 
w32fiow
.
hf
 = 
hFûe
;

84 
w32fiow
.
îr‹
 = 0;

85 
ªt
 = 
	`mÆloc
((
WIN32FILE_IOWIN
));

87 i‡(
ªt
==
NULL
)

88 
	`Clo£H™dÀ
(
hFûe
);

90 *((
WIN32FILE_IOWIN
*)
ªt
Ë
w32fiow
;

92  
ªt
;

93 
	}
}

95 
voidpf
 
ZCALLBACK
 
	$wö32_›í64_fûe_func
 (
voidpf
 
›aque
,c⁄° * 
fûíame
,
mode
)

97 c⁄° * 
mode_f›í
 = 
NULL
;

98 
DWORD
 
dwDesúedAc˚ss
,
dwCª©i⁄Di•osôi⁄
,
dwSh¨eMode
,
dwFœgsAndAâribuãs
 ;

99 
HANDLE
 
hFûe
 = 
NULL
;

101 
	`wö32_å™¶©e_›í_mode
(
mode
,&
dwDesúedAc˚ss
,&
dwCª©i⁄Di•osôi⁄
,&
dwSh¨eMode
,&
dwFœgsAndAâribuãs
);

103 #ifde‡
IOWIN32_USING_WINRT_API


104 #ifde‡
UNICODE


105 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

106 
hFûe
 = 
	`Cª©eFûe2
((
LPCTSTR
)
fûíame
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
dwCª©i⁄Di•osôi⁄
, 
NULL
);

108 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

110 
WCHAR
 
fûíameW
[
FILENAME_MAX
 + 0x200 + 1];

111 
	`Mu…iByãToWideCh¨
(
CP_ACP
,0,(c⁄° *)
fûíame
,-1,
fûíameW
,
FILENAME_MAX
 + 0x200);

112 
hFûe
 = 
	`Cª©eFûe2
(
fûíameW
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
dwCª©i⁄Di•osôi⁄
, 
NULL
);

116 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

117 
hFûe
 = 
	`Cª©eFûe
((
LPCTSTR
)
fûíame
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
NULL
, 
dwCª©i⁄Di•osôi⁄
, 
dwFœgsAndAâribuãs
, NULL);

120  
	`wö32_buûd_iowö
(
hFûe
);

121 
	}
}

124 
voidpf
 
ZCALLBACK
 
	$wö32_›í64_fûe_funcA
 (
voidpf
 
›aque
,c⁄° * 
fûíame
,
mode
)

126 c⁄° * 
mode_f›í
 = 
NULL
;

127 
DWORD
 
dwDesúedAc˚ss
,
dwCª©i⁄Di•osôi⁄
,
dwSh¨eMode
,
dwFœgsAndAâribuãs
 ;

128 
HANDLE
 
hFûe
 = 
NULL
;

130 
	`wö32_å™¶©e_›í_mode
(
mode
,&
dwDesúedAc˚ss
,&
dwCª©i⁄Di•osôi⁄
,&
dwSh¨eMode
,&
dwFœgsAndAâribuãs
);

132 #ifde‡
IOWIN32_USING_WINRT_API


133 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

135 
WCHAR
 
fûíameW
[
FILENAME_MAX
 + 0x200 + 1];

136 
	`Mu…iByãToWideCh¨
(
CP_ACP
,0,(c⁄° *)
fûíame
,-1,
fûíameW
,
FILENAME_MAX
 + 0x200);

137 
hFûe
 = 
	`Cª©eFûe2
(
fûíameW
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
dwCª©i⁄Di•osôi⁄
, 
NULL
);

140 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

141 
hFûe
 = 
	`Cª©eFûeA
((
LPCSTR
)
fûíame
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
NULL
, 
dwCª©i⁄Di•osôi⁄
, 
dwFœgsAndAâribuãs
, NULL);

144  
	`wö32_buûd_iowö
(
hFûe
);

145 
	}
}

148 
voidpf
 
ZCALLBACK
 
	$wö32_›í64_fûe_funcW
 (
voidpf
 
›aque
,c⁄° * 
fûíame
,
mode
)

150 c⁄° * 
mode_f›í
 = 
NULL
;

151 
DWORD
 
dwDesúedAc˚ss
,
dwCª©i⁄Di•osôi⁄
,
dwSh¨eMode
,
dwFœgsAndAâribuãs
 ;

152 
HANDLE
 
hFûe
 = 
NULL
;

154 
	`wö32_å™¶©e_›í_mode
(
mode
,&
dwDesúedAc˚ss
,&
dwCª©i⁄Di•osôi⁄
,&
dwSh¨eMode
,&
dwFœgsAndAâribuãs
);

156 #ifde‡
IOWIN32_USING_WINRT_API


157 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

158 
hFûe
 = 
	`Cª©eFûe2
((
LPCWSTR
)
fûíame
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
dwCª©i⁄Di•osôi⁄
,
NULL
);

160 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

161 
hFûe
 = 
	`Cª©eFûeW
((
LPCWSTR
)
fûíame
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
NULL
, 
dwCª©i⁄Di•osôi⁄
, 
dwFœgsAndAâribuãs
, NULL);

164  
	`wö32_buûd_iowö
(
hFûe
);

165 
	}
}

168 
voidpf
 
ZCALLBACK
 
	$wö32_›í_fûe_func
 (
voidpf
 
›aque
,c⁄° * 
fûíame
,
mode
)

170 c⁄° * 
mode_f›í
 = 
NULL
;

171 
DWORD
 
dwDesúedAc˚ss
,
dwCª©i⁄Di•osôi⁄
,
dwSh¨eMode
,
dwFœgsAndAâribuãs
 ;

172 
HANDLE
 
hFûe
 = 
NULL
;

174 
	`wö32_å™¶©e_›í_mode
(
mode
,&
dwDesúedAc˚ss
,&
dwCª©i⁄Di•osôi⁄
,&
dwSh¨eMode
,&
dwFœgsAndAâribuãs
);

176 #ifde‡
IOWIN32_USING_WINRT_API


177 #ifde‡
UNICODE


178 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

179 
hFûe
 = 
	`Cª©eFûe2
((
LPCTSTR
)
fûíame
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
dwCª©i⁄Di•osôi⁄
, 
NULL
);

181 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

183 
WCHAR
 
fûíameW
[
FILENAME_MAX
 + 0x200 + 1];

184 
	`Mu…iByãToWideCh¨
(
CP_ACP
,0,(c⁄° *)
fûíame
,-1,
fûíameW
,
FILENAME_MAX
 + 0x200);

185 
hFûe
 = 
	`Cª©eFûe2
(
fûíameW
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
dwCª©i⁄Di•osôi⁄
, 
NULL
);

189 i‡((
fûíame
!=
NULL
Ë&& (
dwDesúedAc˚ss
 != 0))

190 
hFûe
 = 
	`Cª©eFûe
((
LPCTSTR
)
fûíame
, 
dwDesúedAc˚ss
, 
dwSh¨eMode
, 
NULL
, 
dwCª©i⁄Di•osôi⁄
, 
dwFœgsAndAâribuãs
, NULL);

193  
	`wö32_buûd_iowö
(
hFûe
);

194 
	}
}

197 
uL⁄g
 
ZCALLBACK
 
	$wö32_ªad_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
, * 
buf
,
uL⁄g
 
size
)

199 
uL⁄g
 
ªt
=0;

200 
HANDLE
 
hFûe
 = 
NULL
;

201 i‡(
°ªam
!=
NULL
)

202 
hFûe
 = ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
hf
;

204 i‡(
hFûe
 !
NULL
)

206 i‡(!
	`RódFûe
(
hFûe
, 
buf
, 
size
, &
ªt
, 
NULL
))

208 
DWORD
 
dwEº
 = 
	`GëLa°Eº‹
();

209 i‡(
dwEº
 =
ERROR_HANDLE_EOF
)

210 
dwEº
 = 0;

211 ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
îr‹
=()
dwEº
;

215  
ªt
;

216 
	}
}

219 
uL⁄g
 
ZCALLBACK
 
	$wö32_wrôe_fûe_func
 (
voidpf
 
›aque
,voidp‡
°ªam
,c⁄° * 
buf
,
uL⁄g
 
size
)

221 
uL⁄g
 
ªt
=0;

222 
HANDLE
 
hFûe
 = 
NULL
;

223 i‡(
°ªam
!=
NULL
)

224 
hFûe
 = ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
hf
;

226 i‡(
hFûe
 !
NULL
)

228 i‡(!
	`WrôeFûe
(
hFûe
, 
buf
, 
size
, &
ªt
, 
NULL
))

230 
DWORD
 
dwEº
 = 
	`GëLa°Eº‹
();

231 i‡(
dwEº
 =
ERROR_HANDLE_EOF
)

232 
dwEº
 = 0;

233 ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
îr‹
=()
dwEº
;

237  
ªt
;

238 
	}
}

240 
BOOL
 
	$MySëFûePoöãrEx
(
HANDLE
 
hFûe
, 
LARGE_INTEGER
 
pos
, LARGE_INTEGER *
√wPos
, 
DWORD
 
dwMoveMëhod
)

242 #ifde‡
IOWIN32_USING_WINRT_API


243  
	`SëFûePoöãrEx
(
hFûe
, 
pos
, 
√wPos
, 
dwMoveMëhod
);

245 
LONG
 
lHigh
 = 
pos
.
HighP¨t
;

246 
DWORD
 
dwNewPos
 = 
	`SëFûePoöãr
(
hFûe
, 
pos
.
LowP¨t
, &
lHigh
, 
FILE_CURRENT
);

247 
BOOL
 
fOk
 = 
TRUE
;

248 i‡(
dwNewPos
 == 0xFFFFFFFF)

249 i‡(
	`GëLa°Eº‹
(Ë!
NO_ERROR
)

250 
fOk
 = 
FALSE
;

251 i‡((
√wPos
 !
NULL
Ë&& (
fOk
))

253 
√wPos
->
LowP¨t
 = 
dwNewPos
;

254 
√wPos
->
HighP¨t
 = 
lHigh
;

256  
fOk
;

258 
	}
}

260 
ZCALLBACK
 
	$wö32_ãŒ_fûe_func
 (
voidpf
 
›aque
,voidp‡
°ªam
)

262 
ªt
=-1;

263 
HANDLE
 
hFûe
 = 
NULL
;

264 i‡(
°ªam
!=
NULL
)

265 
hFûe
 = ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
hf
;

266 i‡(
hFûe
 !
NULL
)

268 
LARGE_INTEGER
 
pos
;

269 
pos
.
QuadP¨t
 = 0;

271 i‡(!
	`MySëFûePoöãrEx
(
hFûe
, 
pos
, &pos, 
FILE_CURRENT
))

273 
DWORD
 
dwEº
 = 
	`GëLa°Eº‹
();

274 ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
îr‹
=()
dwEº
;

275 
ªt
 = -1;

278 
ªt
=()
pos
.
LowP¨t
;

280  
ªt
;

281 
	}
}

283 
ZPOS64_T
 
ZCALLBACK
 
	$wö32_ãŒ64_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
)

285 
ZPOS64_T
 
ªt
= (ZPOS64_T)-1;

286 
HANDLE
 
hFûe
 = 
NULL
;

287 i‡(
°ªam
!=
NULL
)

288 
hFûe
 = ((
WIN32FILE_IOWIN
*)
°ªam
)->
hf
;

290 i‡(
hFûe
)

292 
LARGE_INTEGER
 
pos
;

293 
pos
.
QuadP¨t
 = 0;

295 i‡(!
	`MySëFûePoöãrEx
(
hFûe
, 
pos
, &pos, 
FILE_CURRENT
))

297 
DWORD
 
dwEº
 = 
	`GëLa°Eº‹
();

298 ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
îr‹
=()
dwEº
;

299 
ªt
 = (
ZPOS64_T
)-1;

302 
ªt
=
pos
.
QuadP¨t
;

304  
ªt
;

305 
	}
}

308 
ZCALLBACK
 
	$wö32_£ek_fûe_func
 (
voidpf
 
›aque
,voidp‡
°ªam
,
uL⁄g
 
off£t
,
‹igö
)

310 
DWORD
 
dwMoveMëhod
=0xFFFFFFFF;

311 
HANDLE
 
hFûe
 = 
NULL
;

313 
ªt
=-1;

314 i‡(
°ªam
!=
NULL
)

315 
hFûe
 = ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
hf
;

316 
‹igö
)

318 
ZLIB_FILEFUNC_SEEK_CUR
 :

319 
dwMoveMëhod
 = 
FILE_CURRENT
;

321 
ZLIB_FILEFUNC_SEEK_END
 :

322 
dwMoveMëhod
 = 
FILE_END
;

324 
ZLIB_FILEFUNC_SEEK_SET
 :

325 
dwMoveMëhod
 = 
FILE_BEGIN
;

330 i‡(
hFûe
 !
NULL
)

332 
LARGE_INTEGER
 
pos
;

333 
pos
.
QuadP¨t
 = 
off£t
;

334 i‡(!
	`MySëFûePoöãrEx
(
hFûe
, 
pos
, 
NULL
, 
dwMoveMëhod
))

336 
DWORD
 
dwEº
 = 
	`GëLa°Eº‹
();

337 ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
îr‹
=()
dwEº
;

338 
ªt
 = -1;

341 
ªt
=0;

343  
ªt
;

344 
	}
}

346 
ZCALLBACK
 
	$wö32_£ek64_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
,
ZPOS64_T
 
off£t
,
‹igö
)

348 
DWORD
 
dwMoveMëhod
=0xFFFFFFFF;

349 
HANDLE
 
hFûe
 = 
NULL
;

350 
ªt
=-1;

352 i‡(
°ªam
!=
NULL
)

353 
hFûe
 = ((
WIN32FILE_IOWIN
*)
°ªam
)->
hf
;

355 
‹igö
)

357 
ZLIB_FILEFUNC_SEEK_CUR
 :

358 
dwMoveMëhod
 = 
FILE_CURRENT
;

360 
ZLIB_FILEFUNC_SEEK_END
 :

361 
dwMoveMëhod
 = 
FILE_END
;

363 
ZLIB_FILEFUNC_SEEK_SET
 :

364 
dwMoveMëhod
 = 
FILE_BEGIN
;

369 i‡(
hFûe
)

371 
LARGE_INTEGER
 
pos
;

372 
pos
.
QuadP¨t
 = 
off£t
;

373 i‡(!
	`MySëFûePoöãrEx
(
hFûe
, 
pos
, 
NULL
, 
FILE_CURRENT
))

375 
DWORD
 
dwEº
 = 
	`GëLa°Eº‹
();

376 ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
îr‹
=()
dwEº
;

377 
ªt
 = -1;

380 
ªt
=0;

382  
ªt
;

383 
	}
}

385 
ZCALLBACK
 
	$wö32_˛o£_fûe_func
 (
voidpf
 
›aque
, voidp‡
°ªam
)

387 
ªt
=-1;

389 i‡(
°ªam
!=
NULL
)

391 
HANDLE
 
hFûe
;

392 
hFûe
 = ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
hf
;

393 i‡(
hFûe
 !
NULL
)

395 
	`Clo£H™dÀ
(
hFûe
);

396 
ªt
=0;

398 
	`‰ì
(
°ªam
);

400  
ªt
;

401 
	}
}

403 
ZCALLBACK
 
	$wö32_îr‹_fûe_func
 (
voidpf
 
›aque
,voidp‡
°ªam
)

405 
ªt
=-1;

406 i‡(
°ªam
!=
NULL
)

408 
ªt
 = ((
WIN32FILE_IOWIN
*)
°ªam
Ë-> 
îr‹
;

410  
ªt
;

411 
	}
}

413 
	$fûl_wö32_fûefunc
 (
zlib_fûefunc_def
* 
pzlib_fûefunc_def
)

415 
pzlib_fûefunc_def
->
z›í_fûe
 = 
wö32_›í_fûe_func
;

416 
pzlib_fûefunc_def
->
zªad_fûe
 = 
wö32_ªad_fûe_func
;

417 
pzlib_fûefunc_def
->
zwrôe_fûe
 = 
wö32_wrôe_fûe_func
;

418 
pzlib_fûefunc_def
->
zãŒ_fûe
 = 
wö32_ãŒ_fûe_func
;

419 
pzlib_fûefunc_def
->
z£ek_fûe
 = 
wö32_£ek_fûe_func
;

420 
pzlib_fûefunc_def
->
z˛o£_fûe
 = 
wö32_˛o£_fûe_func
;

421 
pzlib_fûefunc_def
->
zîr‹_fûe
 = 
wö32_îr‹_fûe_func
;

422 
pzlib_fûefunc_def
->
›aque
 = 
NULL
;

423 
	}
}

425 
	$fûl_wö32_fûefunc64
(
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
)

427 
pzlib_fûefunc_def
->
z›í64_fûe
 = 
wö32_›í64_fûe_func
;

428 
pzlib_fûefunc_def
->
zªad_fûe
 = 
wö32_ªad_fûe_func
;

429 
pzlib_fûefunc_def
->
zwrôe_fûe
 = 
wö32_wrôe_fûe_func
;

430 
pzlib_fûefunc_def
->
zãŒ64_fûe
 = 
wö32_ãŒ64_fûe_func
;

431 
pzlib_fûefunc_def
->
z£ek64_fûe
 = 
wö32_£ek64_fûe_func
;

432 
pzlib_fûefunc_def
->
z˛o£_fûe
 = 
wö32_˛o£_fûe_func
;

433 
pzlib_fûefunc_def
->
zîr‹_fûe
 = 
wö32_îr‹_fûe_func
;

434 
pzlib_fûefunc_def
->
›aque
 = 
NULL
;

435 
	}
}

438 
	$fûl_wö32_fûefunc64A
(
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
)

440 
pzlib_fûefunc_def
->
z›í64_fûe
 = 
wö32_›í64_fûe_funcA
;

441 
pzlib_fûefunc_def
->
zªad_fûe
 = 
wö32_ªad_fûe_func
;

442 
pzlib_fûefunc_def
->
zwrôe_fûe
 = 
wö32_wrôe_fûe_func
;

443 
pzlib_fûefunc_def
->
zãŒ64_fûe
 = 
wö32_ãŒ64_fûe_func
;

444 
pzlib_fûefunc_def
->
z£ek64_fûe
 = 
wö32_£ek64_fûe_func
;

445 
pzlib_fûefunc_def
->
z˛o£_fûe
 = 
wö32_˛o£_fûe_func
;

446 
pzlib_fûefunc_def
->
zîr‹_fûe
 = 
wö32_îr‹_fûe_func
;

447 
pzlib_fûefunc_def
->
›aque
 = 
NULL
;

448 
	}
}

451 
	$fûl_wö32_fûefunc64W
(
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
)

453 
pzlib_fûefunc_def
->
z›í64_fûe
 = 
wö32_›í64_fûe_funcW
;

454 
pzlib_fûefunc_def
->
zªad_fûe
 = 
wö32_ªad_fûe_func
;

455 
pzlib_fûefunc_def
->
zwrôe_fûe
 = 
wö32_wrôe_fûe_func
;

456 
pzlib_fûefunc_def
->
zãŒ64_fûe
 = 
wö32_ãŒ64_fûe_func
;

457 
pzlib_fûefunc_def
->
z£ek64_fûe
 = 
wö32_£ek64_fûe_func
;

458 
pzlib_fûefunc_def
->
z˛o£_fûe
 = 
wö32_˛o£_fûe_func
;

459 
pzlib_fûefunc_def
->
zîr‹_fûe
 = 
wö32_îr‹_fûe_func
;

460 
pzlib_fûefunc_def
->
›aque
 = 
NULL
;

461 
	}
}

	@zlib-1.2.8/contrib/minizip/iowin32.h

14 
	~<wödows.h
>

17 #ifde‡
__˝lu•lus


21 
fûl_wö32_fûefunc
 
OF
((
zlib_fûefunc_def
* 
pzlib_fûefunc_def
));

22 
fûl_wö32_fûefunc64
 
OF
((
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
));

23 
fûl_wö32_fûefunc64A
 
OF
((
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
));

24 
fûl_wö32_fûefunc64W
 
OF
((
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
));

26 #ifde‡
__˝lu•lus


	@zlib-1.2.8/contrib/minizip/miniunz.c

15 #i‡(!
deföed
(
_WIN32
)Ë&& (!deföed(
WIN32
)Ë&& (!deföed(
__APPLE__
))

16 #i‚de‡
__USE_FILE_OFFSET64


17 
	#__USE_FILE_OFFSET64


	)

19 #i‚de‡
__USE_LARGEFILE64


20 
	#__USE_LARGEFILE64


	)

22 #i‚de‡
_LARGEFILE64_SOURCE


23 
	#_LARGEFILE64_SOURCE


	)

25 #i‚de‡
_FILE_OFFSET_BIT


26 
	#_FILE_OFFSET_BIT
 64

	)

30 #ifde‡
__APPLE__


32 
	#FOPEN_FUNC
(
fûíame
, 
mode
Ë
	`f›í
(fûíame, mode)

	)

33 
	#FTELLO_FUNC
(
°ªam
Ë
	`·ñlo
(°ªam)

	)

34 
	#FSEEKO_FUNC
(
°ªam
, 
off£t
, 
‹igö
Ë
	`f£eko
(°ªam, off£t, origö)

	)

36 
	#FOPEN_FUNC
(
fûíame
, 
mode
Ë
	`f›í64
(fûíame, mode)

	)

37 
	#FTELLO_FUNC
(
°ªam
Ë
	`·ñlo64
(°ªam)

	)

38 
	#FSEEKO_FUNC
(
°ªam
, 
off£t
, 
‹igö
Ë
	`f£eko64
(°ªam, off£t, origö)

	)

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<time.h
>

46 
	~<î∫o.h
>

47 
	~<f˙é.h
>

49 #ifde‡
_WIN32


50 
	~<dúe˘.h
>

51 
	~<io.h
>

53 
	~<uni°d.h
>

54 
	~<utime.h
>

58 
	~"unzù.h
"

60 
	#CASESENSITIVITY
 (0)

	)

61 
	#WRITEBUFFERSIZE
 (8192)

	)

62 
	#MAXFILENAME
 (256)

	)

64 #ifde‡
_WIN32


65 
	#USEWIN32IOAPI


	)

66 
	~"iowö32.h
"

83 
	$ch™ge_fûe_d©e
(
fûíame
,
dosd©e
,
tmu_d©e
)

84 c⁄° *
fûíame
;

85 
uL⁄g
 
dosd©e
;

86 
tm_unz
 
tmu_d©e
;

88 #ifde‡
_WIN32


89 
HANDLE
 
hFûe
;

90 
FILETIME
 
·m
,
·Loˇl
,
·Cª©e
,
·La°Acc
,
·La°Wrôe
;

92 
hFûe
 = 
	`Cª©eFûeA
(
fûíame
,
GENERIC_READ
 | 
GENERIC_WRITE
,

93 0,
NULL
,
OPEN_EXISTING
,0,NULL);

94 
	`GëFûeTime
(
hFûe
,&
·Cª©e
,&
·La°Acc
,&
·La°Wrôe
);

95 
	`DosD©eTimeToFûeTime
((
WORD
)(
dosd©e
>>16),(WORD)dosd©e,&
·Loˇl
);

96 
	`LoˇlFûeTimeToFûeTime
(&
·Loˇl
,&
·m
);

97 
	`SëFûeTime
(
hFûe
,&
·m
,&
·La°Acc
,&ftm);

98 
	`Clo£H™dÀ
(
hFûe
);

100 #ifde‡
unix
 || 
__APPLE__


101 
utimbuf
 
ut
;

102 
tm
 
√wd©e
;

103 
√wd©e
.
tm_£c
 = 
tmu_d©e
.tm_sec;

104 
√wd©e
.
tm_mö
=
tmu_d©e
.tm_min;

105 
√wd©e
.
tm_hour
=
tmu_d©e
.tm_hour;

106 
√wd©e
.
tm_mday
=
tmu_d©e
.tm_mday;

107 
√wd©e
.
tm_m⁄
=
tmu_d©e
.tm_mon;

108 i‡(
tmu_d©e
.
tm_yór
 > 1900)

109 
√wd©e
.
tm_yór
=
tmu_d©e
.tm_year - 1900;

111 
√wd©e
.
tm_yór
=
tmu_d©e
.tm_year ;

112 
√wd©e
.
tm_isd°
=-1;

114 
ut
.
a˘ime
=ut.
modtime
=
	`mktime
(&
√wd©e
);

115 
	`utime
(
fûíame
,&
ut
);

118 
	}
}

124 
	$mymkdú
(
dú«me
)

125 c⁄° * 
dú«me
;

127 
ªt
=0;

128 #ifde‡
_WIN32


129 
ªt
 = 
	`_mkdú
(
dú«me
);

130 #ñi‡
unix


131 
ªt
 = 
	`mkdú
 (
dú«me
,0775);

132 #ñi‡
__APPLE__


133 
ªt
 = 
	`mkdú
 (
dú«me
,0775);

135  
ªt
;

136 
	}
}

138 
	$makedú
 (
√wdú
)

139 *
√wdú
;

141 *
buf„r
 ;

142 *
p
;

143 
Àn
 = ()
	`°æí
(
√wdú
);

145 i‡(
Àn
 <= 0)

148 
buf„r
 = (*)
	`mÆloc
(
Àn
+1);

149 i‡(
buf„r
==
NULL
)

151 
	`¥ötf
("Errorállocating memory\n");

152  
UNZ_INTERNALERROR
;

154 
	`°r˝y
(
buf„r
,
√wdú
);

156 i‡(
buf„r
[
Àn
-1] == '/') {

157 
buf„r
[
Àn
-1] = '\0';

159 i‡(
	`mymkdú
(
buf„r
) == 0)

161 
	`‰ì
(
buf„r
);

165 
p
 = 
buf„r
+1;

168 
hﬁd
;

170 *
p
 && *p != '\\' && *p != '/')

171 
p
++;

172 
hﬁd
 = *
p
;

173 *
p
 = 0;

174 i‡((
	`mymkdú
(
buf„r
Ë=-1Ë&& (
î∫o
 =
ENOENT
))

176 
	`¥ötf
("couldn'à¸óã dúe˘‹y %s\n",
buf„r
);

177 
	`‰ì
(
buf„r
);

180 i‡(
hﬁd
 == 0)

182 *
p
++ = 
hﬁd
;

184 
	`‰ì
(
buf„r
);

186 
	}
}

188 
	$do_b™√r
()

190 
	`¥ötf
("MiniUnz 1.01b, demo of zLib + UnzÖackage written by Gilles Vollant\n");

191 
	`¥ötf
("more infoát http://www.winimage.com/zLibDll/unzip.html\n\n");

192 
	}
}

194 
	$do_hñp
()

196 
	`¥ötf
("Usage : miniunz [-e] [-x] [-v] [-l] [-o] [-pÖassword] file.zip [file_to_extr.] [-dÉxtractdir]\n\n" \

204 
	}
}

206 
	$Di•œy64BôsSize
(
ZPOS64_T
 
n
, 
size_ch¨
)

209 
numbî
[21];

210 
off£t
=19;

211 
pos_°rög
 = 19;

212 
numbî
[20]=0;

214 
numbî
[
off£t
]=()((
n
%10)+'0');

215 i‡(
numbî
[
off£t
] != '0')

216 
pos_°rög
=
off£t
;

217 
n
/=10;

218 i‡(
off£t
==0)

220 
off£t
--;

223 
size_di•œy_°rög
 = 19-
pos_°rög
;

224 
size_ch¨
 > 
size_di•œy_°rög
)

226 
size_ch¨
--;

227 
	`¥ötf
(" ");

231 
	`¥ötf
("%s",&
numbî
[
pos_°rög
]);

232 
	}
}

234 
	$do_li°
(
uf
)

235 
unzFûe
 
uf
;

237 
uL⁄g
 
i
;

238 
unz_globÆ_öfo64
 
gi
;

239 
îr
;

241 
îr
 = 
	`unzGëGlobÆInfo64
(
uf
,&
gi
);

242 i‡(
îr
!=
UNZ_OK
)

243 
	`¥ötf
("îr‹ %d wôh zùfûêö unzGëGlobÆInfÿ\n",
îr
);

244 
	`¥ötf
(" Length Method Size Ratio Date Time CRC-32 Name\n");

245 
	`¥ötf
(" ------ ------ ---- ----- ---- ---- ------ ----\n");

246 
i
=0;i<
gi
.
numbî_íåy
;i++)

248 
fûíame_özù
[256];

249 
unz_fûe_öfo64
 
fûe_öfo
;

250 
uL⁄g
 
øtio
=0;

251 c⁄° *
°rög_mëhod
;

252 
ch¨Cry±
=' ';

253 
îr
 = 
	`unzGëCuºítFûeInfo64
(
uf
,&
fûe_öfo
,
fûíame_özù
,(fûíame_özù),
NULL
,0,NULL,0);

254 i‡(
îr
!=
UNZ_OK
)

256 
	`¥ötf
("îr‹ %d wôh zùfûêö unzGëCuºítFûeInfo\n",
îr
);

259 i‡(
fûe_öfo
.
uncom¥es£d_size
>0)

260 
øtio
 = (
uL⁄g
)((
fûe_öfo
.
com¥es£d_size
*100)/fûe_öfo.
uncom¥es£d_size
);

263 i‡((
fûe_öfo
.
Êag
 & 1) != 0)

264 
ch¨Cry±
='*';

266 i‡(
fûe_öfo
.
com¥essi⁄_mëhod
==0)

267 
°rög_mëhod
="Stored";

269 i‡(
fûe_öfo
.
com¥essi⁄_mëhod
==
Z_DEFLATED
)

271 
uI¡
 
iLevñ
=(uI¡)((
fûe_öfo
.
Êag
 & 0x6)/2);

272 i‡(
iLevñ
==0)

273 
°rög_mëhod
="Defl:N";

274 i‡(
iLevñ
==1)

275 
°rög_mëhod
="Defl:X";

276 i‡((
iLevñ
==2) || (iLevel==3))

277 
°rög_mëhod
="Defl:F";

280 i‡(
fûe_öfo
.
com¥essi⁄_mëhod
==
Z_BZIP2ED
)

282 
°rög_mëhod
="BZip2 ";

285 
°rög_mëhod
="Unkn. ";

287 
	`Di•œy64BôsSize
(
fûe_öfo
.
uncom¥es£d_size
,7);

288 
	`¥ötf
(" %6s%c",
°rög_mëhod
,
ch¨Cry±
);

289 
	`Di•œy64BôsSize
(
fûe_öfo
.
com¥es£d_size
,7);

290 
	`¥ötf
(" %3lu%% %2.2lu-%2.2lu-%2.2lu %2.2lu:%2.2lu %8.8lx %s\n",

291 
øtio
,

292 (
uL⁄g
)
fûe_öfo
.
tmu_d©e
.
tm_m⁄
 + 1,

293 (
uL⁄g
)
fûe_öfo
.
tmu_d©e
.
tm_mday
,

294 (
uL⁄g
)
fûe_öfo
.
tmu_d©e
.
tm_yór
 % 100,

295 (
uL⁄g
)
fûe_öfo
.
tmu_d©e
.
tm_hour
,(uL⁄g)fûe_öfo.tmu_d©e.
tm_mö
,

296 (
uL⁄g
)
fûe_öfo
.
¸c
,
fûíame_özù
);

297 i‡((
i
+1)<
gi
.
numbî_íåy
)

299 
îr
 = 
	`unzGoToNextFûe
(
uf
);

300 i‡(
îr
!=
UNZ_OK
)

302 
	`¥ötf
("îr‹ %d wôh zùfûêö unzGoToNextFûe\n",
îr
);

309 
	}
}

312 
	$do_exåa˘_cuºítfûe
(
uf
,
p›t_exåa˘_wôhout_∑th
,
p›t_ovîwrôe
,
∑ssw‹d
)

313 
unzFûe
 
uf
;

314 c⁄° * 
p›t_exåa˘_wôhout_∑th
;

315 * 
p›t_ovîwrôe
;

316 c⁄° * 
∑ssw‹d
;

318 
fûíame_özù
[256];

319 * 
fûíame_wôhouç©h
;

320 * 
p
;

321 
îr
=
UNZ_OK
;

322 
FILE
 *
fout
=
NULL
;

323 * 
buf
;

324 
uI¡
 
size_buf
;

326 
unz_fûe_öfo64
 
fûe_öfo
;

327 
uL⁄g
 
øtio
=0;

328 
îr
 = 
	`unzGëCuºítFûeInfo64
(
uf
,&
fûe_öfo
,
fûíame_özù
,(fûíame_özù),
NULL
,0,NULL,0);

330 i‡(
îr
!=
UNZ_OK
)

332 
	`¥ötf
("îr‹ %d wôh zùfûêö unzGëCuºítFûeInfo\n",
îr
);

333  
îr
;

336 
size_buf
 = 
WRITEBUFFERSIZE
;

337 
buf
 = (*)
	`mÆloc
(
size_buf
);

338 i‡(
buf
==
NULL
)

340 
	`¥ötf
("Errorállocating memory\n");

341  
UNZ_INTERNALERROR
;

344 
p
 = 
fûíame_wôhouç©h
 = 
fûíame_özù
;

345 (*
p
) != '\0')

347 i‡(((*
p
)=='/') || ((*p)=='\\'))

348 
fûíame_wôhouç©h
 = 
p
+1;

349 
p
++;

352 i‡((*
fûíame_wôhouç©h
)=='\0')

354 i‡((*
p›t_exåa˘_wôhout_∑th
)==0)

356 
	`¥ötf
("¸ótög dúe˘‹y: %s\n",
fûíame_özù
);

357 
	`mymkdú
(
fûíame_özù
);

362 c⁄° * 
wrôe_fûíame
;

363 
skù
=0;

365 i‡((*
p›t_exåa˘_wôhout_∑th
)==0)

366 
wrôe_fûíame
 = 
fûíame_özù
;

368 
wrôe_fûíame
 = 
fûíame_wôhouç©h
;

370 
îr
 = 
	`unzO≥nCuºítFûePassw‹d
(
uf
,
∑ssw‹d
);

371 i‡(
îr
!=
UNZ_OK
)

373 
	`¥ötf
("îr‹ %d wôh zùfûêö unzO≥nCuºítFûePassw‹d\n",
îr
);

376 i‡(((*
p›t_ovîwrôe
)==0Ë&& (
îr
==
UNZ_OK
))

378 
ªp
=0;

379 
FILE
* 
·e°exi°
;

380 
·e°exi°
 = 
	`FOPEN_FUNC
(
wrôe_fûíame
,"rb");

381 i‡(
·e°exi°
!=
NULL
)

383 
	`f˛o£
(
·e°exi°
);

386 
™swî
[128];

387 
ªt
;

389 
	`¥ötf
("Thêfûê%†exi°s. Ovîwrôê? [y]es, [n]o, [A]Œ: ",
wrôe_fûíame
);

390 
ªt
 = 
	`sˇnf
("%1s",
™swî
);

391 i‡(
ªt
 != 1)

393 
	`exô
(
EXIT_FAILURE
);

395 
ªp
 = 
™swî
[0] ;

396 i‡((
ªp
>='a') && (rep<='z'))

397 
ªp
 -= 0x20;

399 (
ªp
!='Y') && (rep!='N') && (rep!='A'));

402 i‡(
ªp
 == 'N')

403 
skù
 = 1;

405 i‡(
ªp
 == 'A')

406 *
p›t_ovîwrôe
=1;

409 i‡((
skù
==0Ë&& (
îr
==
UNZ_OK
))

411 
fout
=
	`FOPEN_FUNC
(
wrôe_fûíame
,"wb");

413 i‡((
fout
==
NULL
Ë&& ((*
p›t_exåa˘_wôhout_∑th
)==0) &&

414 (
fûíame_wôhouç©h
!=(*)
fûíame_özù
))

416 
c
=*(
fûíame_wôhouç©h
-1);

417 *(
fûíame_wôhouç©h
-1)='\0';

418 
	`makedú
(
wrôe_fûíame
);

419 *(
fûíame_wôhouç©h
-1)=
c
;

420 
fout
=
	`FOPEN_FUNC
(
wrôe_fûíame
,"wb");

423 i‡(
fout
==
NULL
)

425 
	`¥ötf
("îr‹ o≥nög %s\n",
wrôe_fûíame
);

429 i‡(
fout
!=
NULL
)

431 
	`¥ötf
("Éxåa˘ög: %s\n",
wrôe_fûíame
);

435 
îr
 = 
	`unzRódCuºítFûe
(
uf
,
buf
,
size_buf
);

436 i‡(
îr
<0)

438 
	`¥ötf
("îr‹ %d wôh zùfûêö unzRódCuºítFûe\n",
îr
);

441 i‡(
îr
>0)

442 i‡(
	`fwrôe
(
buf
,
îr
,1,
fout
)!=1)

444 
	`¥ötf
("error in writingÉxtracted file\n");

445 
îr
=
UNZ_ERRNO
;

449 
îr
>0);

450 i‡(
fout
)

451 
	`f˛o£
(
fout
);

453 i‡(
îr
==0)

454 
	`ch™ge_fûe_d©e
(
wrôe_fûíame
,
fûe_öfo
.
dosD©e
,

455 
fûe_öfo
.
tmu_d©e
);

458 i‡(
îr
==
UNZ_OK
)

460 
îr
 = 
	`unzClo£CuºítFûe
 (
uf
);

461 i‡(
îr
!=
UNZ_OK
)

463 
	`¥ötf
("îr‹ %d wôh zùfûêö unzClo£CuºítFûe\n",
îr
);

467 
	`unzClo£CuºítFûe
(
uf
);

470 
	`‰ì
(
buf
);

471  
îr
;

472 
	}
}

475 
	$do_exåa˘
(
uf
,
›t_exåa˘_wôhout_∑th
,
›t_ovîwrôe
,
∑ssw‹d
)

476 
unzFûe
 
uf
;

477 
›t_exåa˘_wôhout_∑th
;

478 
›t_ovîwrôe
;

479 c⁄° * 
∑ssw‹d
;

481 
uL⁄g
 
i
;

482 
unz_globÆ_öfo64
 
gi
;

483 
îr
;

484 
FILE
* 
fout
=
NULL
;

486 
îr
 = 
	`unzGëGlobÆInfo64
(
uf
,&
gi
);

487 i‡(
îr
!=
UNZ_OK
)

488 
	`¥ötf
("îr‹ %d wôh zùfûêö unzGëGlobÆInfÿ\n",
îr
);

490 
i
=0;i<
gi
.
numbî_íåy
;i++)

492 i‡(
	`do_exåa˘_cuºítfûe
(
uf
,&
›t_exåa˘_wôhout_∑th
,

493 &
›t_ovîwrôe
,

494 
∑ssw‹d
Ë!
UNZ_OK
)

497 i‡((
i
+1)<
gi
.
numbî_íåy
)

499 
îr
 = 
	`unzGoToNextFûe
(
uf
);

500 i‡(
îr
!=
UNZ_OK
)

502 
	`¥ötf
("îr‹ %d wôh zùfûêö unzGoToNextFûe\n",
îr
);

509 
	}
}

511 
	$do_exåa˘_⁄efûe
(
uf
,
fûíame
,
›t_exåa˘_wôhout_∑th
,
›t_ovîwrôe
,
∑ssw‹d
)

512 
unzFûe
 
uf
;

513 c⁄° * 
fûíame
;

514 
›t_exåa˘_wôhout_∑th
;

515 
›t_ovîwrôe
;

516 c⁄° * 
∑ssw‹d
;

518 
îr
 = 
UNZ_OK
;

519 i‡(
	`unzLoˇãFûe
(
uf
,
fûíame
,
CASESENSITIVITY
)!=
UNZ_OK
)

521 
	`¥ötf
("fûê%†nŸ found i¿thêzùfûe\n",
fûíame
);

525 i‡(
	`do_exåa˘_cuºítfûe
(
uf
,&
›t_exåa˘_wôhout_∑th
,

526 &
›t_ovîwrôe
,

527 
∑ssw‹d
Ë=
UNZ_OK
)

531 
	}
}

534 
	$maö
(
¨gc
,
¨gv
)

535 
¨gc
;

536 *
¨gv
[];

538 c⁄° *
zùfûíame
=
NULL
;

539 c⁄° *
fûíame_to_exåa˘
=
NULL
;

540 c⁄° *
∑ssw‹d
=
NULL
;

541 
fûíame_åy
[
MAXFILENAME
+16] = "";

542 
i
;

543 
ªt_vÆue
=0;

544 
›t_do_li°
=0;

545 
›t_do_exåa˘
=1;

546 
›t_do_exåa˘_wôhouç©h
=0;

547 
›t_ovîwrôe
=0;

548 
›t_exåa˘dú
=0;

549 c⁄° *
dú«me
=
NULL
;

550 
unzFûe
 
uf
=
NULL
;

552 
	`do_b™√r
();

553 i‡(
¨gc
==1)

555 
	`do_hñp
();

560 
i
=1;i<
¨gc
;i++)

562 i‡((*
¨gv
[
i
])=='-')

564 c⁄° *
p
=
¨gv
[
i
]+1;

566 (*
p
)!='\0')

568 
c
=*(
p
++);;

569 i‡((
c
=='l') || (c=='L'))

570 
›t_do_li°
 = 1;

571 i‡((
c
=='v') || (c=='V'))

572 
›t_do_li°
 = 1;

573 i‡((
c
=='x') || (c=='X'))

574 
›t_do_exåa˘
 = 1;

575 i‡((
c
=='e') || (c=='E'))

576 
›t_do_exåa˘
 = 
›t_do_exåa˘_wôhouç©h
 = 1;

577 i‡((
c
=='o') || (c=='O'))

578 
›t_ovîwrôe
=1;

579 i‡((
c
=='d') || (c=='D'))

581 
›t_exåa˘dú
=1;

582 
dú«me
=
¨gv
[
i
+1];

585 i‡(((
c
=='p'Ë|| (c=='P')Ë&& (
i
+1<
¨gc
))

587 
∑ssw‹d
=
¨gv
[
i
+1];

588 
i
++;

594 i‡(
zùfûíame
 =
NULL
)

595 
zùfûíame
 = 
¨gv
[
i
];

596 i‡((
fûíame_to_exåa˘
==
NULL
Ë&& (!
›t_exåa˘dú
))

597 
fûíame_to_exåa˘
 = 
¨gv
[
i
] ;

602 i‡(
zùfûíame
!=
NULL
)

605 #ifde‡
USEWIN32IOAPI


606 
zlib_fûefunc64_def
 
ffunc
;

609 
	`°∫˝y
(
fûíame_åy
, 
zùfûíame
,
MAXFILENAME
-1);

611 
fûíame_åy
[ 
MAXFILENAME
 ] = '\0';

613 #ifde‡
USEWIN32IOAPI


614 
	`fûl_wö32_fûefunc64A
(&
ffunc
);

615 
uf
 = 
	`unzO≥n2_64
(
zùfûíame
,&
ffunc
);

617 
uf
 = 
	`unzO≥n64
(
zùfûíame
);

619 i‡(
uf
==
NULL
)

621 
	`°rˇt
(
fûíame_åy
,".zip");

622 #ifde‡
USEWIN32IOAPI


623 
uf
 = 
	`unzO≥n2_64
(
fûíame_åy
,&
ffunc
);

625 
uf
 = 
	`unzO≥n64
(
fûíame_åy
);

630 i‡(
uf
==
NULL
)

632 
	`¥ötf
("C™nŸ o≥¿%†‹ %s.zù\n",
zùfûíame
,zipfilename);

635 
	`¥ötf
("%†›íed\n",
fûíame_åy
);

637 i‡(
›t_do_li°
==1)

638 
ªt_vÆue
 = 
	`do_li°
(
uf
);

639 i‡(
›t_do_exåa˘
==1)

641 #ifde‡
_WIN32


642 i‡(
›t_exåa˘dú
 && 
	`_chdú
(
dú«me
))

644 i‡(
›t_exåa˘dú
 && 
	`chdú
(
dú«me
))

647 
	`¥ötf
("Eº‹ ch™gög i¡ÿ%s,áb‹tög\n", 
dú«me
);

648 
	`exô
(-1);

651 i‡(
fûíame_to_exåa˘
 =
NULL
)

652 
ªt_vÆue
 = 
	`do_exåa˘
(
uf
, 
›t_do_exåa˘_wôhouç©h
, 
›t_ovîwrôe
, 
∑ssw‹d
);

654 
ªt_vÆue
 = 
	`do_exåa˘_⁄efûe
(
uf
, 
fûíame_to_exåa˘
, 
›t_do_exåa˘_wôhouç©h
, 
›t_ovîwrôe
, 
∑ssw‹d
);

657 
	`unzClo£
(
uf
);

659  
ªt_vÆue
;

660 
	}
}

	@zlib-1.2.8/contrib/minizip/minizip.c

16 #i‡(!
deföed
(
_WIN32
)Ë&& (!deföed(
WIN32
)Ë&& (!deföed(
__APPLE__
))

17 #i‚de‡
__USE_FILE_OFFSET64


18 
	#__USE_FILE_OFFSET64


	)

20 #i‚de‡
__USE_LARGEFILE64


21 
	#__USE_LARGEFILE64


	)

23 #i‚de‡
_LARGEFILE64_SOURCE


24 
	#_LARGEFILE64_SOURCE


	)

26 #i‚de‡
_FILE_OFFSET_BIT


27 
	#_FILE_OFFSET_BIT
 64

	)

31 #ifde‡
__APPLE__


33 
	#FOPEN_FUNC
(
fûíame
, 
mode
Ë
	`f›í
(fûíame, mode)

	)

34 
	#FTELLO_FUNC
(
°ªam
Ë
	`·ñlo
(°ªam)

	)

35 
	#FSEEKO_FUNC
(
°ªam
, 
off£t
, 
‹igö
Ë
	`f£eko
(°ªam, off£t, origö)

	)

37 
	#FOPEN_FUNC
(
fûíame
, 
mode
Ë
	`f›í64
(fûíame, mode)

	)

38 
	#FTELLO_FUNC
(
°ªam
Ë
	`·ñlo64
(°ªam)

	)

39 
	#FSEEKO_FUNC
(
°ªam
, 
off£t
, 
‹igö
Ë
	`f£eko64
(°ªam, off£t, origö)

	)

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<time.h
>

48 
	~<î∫o.h
>

49 
	~<f˙é.h
>

51 #ifde‡
_WIN32


52 
	~<dúe˘.h
>

53 
	~<io.h
>

55 
	~<uni°d.h
>

56 
	~<utime.h
>

57 
	~<sys/ty≥s.h
>

58 
	~<sys/°©.h
>

61 
	~"zù.h
"

63 #ifde‡
_WIN32


64 
	#USEWIN32IOAPI


	)

65 
	~"iowö32.h
"

70 
	#WRITEBUFFERSIZE
 (16384)

	)

71 
	#MAXFILENAME
 (256)

	)

73 #ifde‡
_WIN32


74 
uL⁄g
 
	$fûëime
(
f
, 
tmzù
, 
dt
)

75 *
f
;

76 
tm_zù
 *
tmzù
;

77 
uL⁄g
 *
dt
;

79 
ªt
 = 0;

81 
FILETIME
 
·Loˇl
;

82 
HANDLE
 
hFöd
;

83 
WIN32_FIND_DATAA
 
ff32
;

85 
hFöd
 = 
	`FödFú°FûeA
(
f
,&
ff32
);

86 i‡(
hFöd
 !
INVALID_HANDLE_VALUE
)

88 
	`FûeTimeToLoˇlFûeTime
(&(
ff32
.
·La°WrôeTime
),&
·Loˇl
);

89 
	`FûeTimeToDosD©eTime
(&
·Loˇl
,((
LPWORD
)
dt
)+1,((LPWORD)dt)+0);

90 
	`FödClo£
(
hFöd
);

91 
ªt
 = 1;

94  
ªt
;

95 
	}
}

97 #ifde‡
unix
 || 
__APPLE__


98 
uL⁄g
 
	$fûëime
(
f
, 
tmzù
, 
dt
)

99 *
f
;

100 
tm_zù
 *
tmzù
;

101 
uL⁄g
 *
dt
;

103 
ªt
=0;

104 
°©
 
s
;

105 
tm
* 
fûed©e
;

106 
time_t
 
tm_t
=0;

108 i‡(
	`°rcmp
(
f
,"-")!=0)

110 
«me
[
MAXFILENAME
+1];

111 
Àn
 = 
	`°æí
(
f
);

112 i‡(
Àn
 > 
MAXFILENAME
)

113 
Àn
 = 
MAXFILENAME
;

115 
	`°∫˝y
(
«me
, 
f
,
MAXFILENAME
-1);

117 
«me
[ 
MAXFILENAME
 ] = '\0';

119 i‡(
«me
[
Àn
 - 1] == '/')

120 
«me
[
Àn
 - 1] = '\0';

122 i‡(
	`°©
(
«me
,&
s
)==0)

124 
tm_t
 = 
s
.
°_mtime
;

125 
ªt
 = 1;

128 
fûed©e
 = 
	`loˇ…ime
(&
tm_t
);

130 
tmzù
->
tm_£c
 = 
fûed©e
->tm_sec;

131 
tmzù
->
tm_mö
 = 
fûed©e
->tm_min;

132 
tmzù
->
tm_hour
 = 
fûed©e
->tm_hour;

133 
tmzù
->
tm_mday
 = 
fûed©e
->tm_mday;

134 
tmzù
->
tm_m⁄
 = 
fûed©e
->tm_mon ;

135 
tmzù
->
tm_yór
 = 
fûed©e
->tm_year;

137  
ªt
;

138 
	}
}

140 
uL⁄g
 
	$fûëime
(
f
, 
tmzù
, 
dt
)

141 *
f
;

142 
tm_zù
 *
tmzù
;

143 
uL⁄g
 *
dt
;

146 
	}
}

153 
	$check_exi°_fûe
(
fûíame
)

154 c⁄° * 
fûíame
;

156 
FILE
* 
·e°exi°
;

157 
ªt
 = 1;

158 
·e°exi°
 = 
	`FOPEN_FUNC
(
fûíame
,"rb");

159 i‡(
·e°exi°
==
NULL
)

160 
ªt
 = 0;

162 
	`f˛o£
(
·e°exi°
);

163  
ªt
;

164 
	}
}

166 
	$do_b™√r
()

168 
	`¥ötf
("MiniZip 1.1, demo of zLib + MiniZip64Öackage, written by Gilles Vollant\n");

169 
	`¥ötf
("more info on MiniZipát http://www.winimage.com/zLibDll/minizip.html\n\n");

170 
	}
}

172 
	$do_hñp
()

174 
	`¥ötf
("Usage : minizip [-o] [-a] [-0Åo -9] [-pÖassword] [-j] file.zip [files_to_add]\n\n" \

181 
	}
}

185 
	$gëFûeCrc
(c⁄° * 
fûíameözù
,*
buf
,
size_buf
,* 
ªsu…_¸c
)

187 
ˇlcuœã_¸c
=0;

188 
îr
=
ZIP_OK
;

189 
FILE
 * 
fö
 = 
	`FOPEN_FUNC
(
fûíameözù
,"rb");

191 
size_ªad
 = 0;

192 
tŸÆ_ªad
 = 0;

193 i‡(
fö
==
NULL
)

195 
îr
 = 
ZIP_ERRNO
;

198 i‡(
îr
 =
ZIP_OK
)

201 
îr
 = 
ZIP_OK
;

202 
size_ªad
 = ()
	`‰ód
(
buf
,1,
size_buf
,
fö
);

203 i‡(
size_ªad
 < 
size_buf
)

204 i‡(
	`„of
(
fö
)==0)

206 
	`¥ötf
("îr‹ i¿ªadög %s\n",
fûíameözù
);

207 
îr
 = 
ZIP_ERRNO
;

210 i‡(
size_ªad
>0)

211 
ˇlcuœã_¸c
 = 
	`¸c32
(ˇlcuœã_¸c,
buf
,
size_ªad
);

212 
tŸÆ_ªad
 +
size_ªad
;

214 } (
îr
 =
ZIP_OK
Ë&& (
size_ªad
>0));

216 i‡(
fö
)

217 
	`f˛o£
(
fö
);

219 *
ªsu…_¸c
=
ˇlcuœã_¸c
;

220 
	`¥ötf
("fûê%†¸¯%lx\n", 
fûíameözù
, 
ˇlcuœã_¸c
);

221  
îr
;

222 
	}
}

224 
	$isL¨geFûe
(c⁄° * 
fûíame
)

226 
œrgeFûe
 = 0;

227 
ZPOS64_T
 
pos
 = 0;

228 
FILE
* 
pFûe
 = 
	`FOPEN_FUNC
(
fûíame
, "rb");

230 if(
pFûe
 !
NULL
)

232 
n
 = 
	`FSEEKO_FUNC
(
pFûe
, 0, 
SEEK_END
);

233 
pos
 = 
	`FTELLO_FUNC
(
pFûe
);

235 
	`¥ötf
("Fûê: %†i†%Œd byãs\n", 
fûíame
, 
pos
);

237 if(
pos
 >= 0xffffffff)

238 
œrgeFûe
 = 1;

240 
	`f˛o£
(
pFûe
);

243  
œrgeFûe
;

244 
	}
}

246 
	$maö
(
¨gc
,
¨gv
)

247 
¨gc
;

248 *
¨gv
[];

250 
i
;

251 
›t_ovîwrôe
=0;

252 
›t_com¥ess_Àvñ
=
Z_DEFAULT_COMPRESSION
;

253 
›t_ex˛ude_∑th
=0;

254 
zùfûíamórg
 = 0;

255 
fûíame_åy
[
MAXFILENAME
+16];

256 
zùok
;

257 
îr
=0;

258 
size_buf
=0;

259 * 
buf
=
NULL
;

260 c⁄° * 
∑ssw‹d
=
NULL
;

263 
	`do_b™√r
();

264 i‡(
¨gc
==1)

266 
	`do_hñp
();

271 
i
=1;i<
¨gc
;i++)

273 i‡((*
¨gv
[
i
])=='-')

275 c⁄° *
p
=
¨gv
[
i
]+1;

277 (*
p
)!='\0')

279 
c
=*(
p
++);;

280 i‡((
c
=='o') || (c=='O'))

281 
›t_ovîwrôe
 = 1;

282 i‡((
c
=='a') || (c=='A'))

283 
›t_ovîwrôe
 = 2;

284 i‡((
c
>='0') && (c<='9'))

285 
›t_com¥ess_Àvñ
 = 
c
-'0';

286 i‡((
c
=='j') || (c=='J'))

287 
›t_ex˛ude_∑th
 = 1;

289 i‡(((
c
=='p'Ë|| (c=='P')Ë&& (
i
+1<
¨gc
))

291 
∑ssw‹d
=
¨gv
[
i
+1];

292 
i
++;

298 i‡(
zùfûíamórg
 == 0)

300 
zùfûíamórg
 = 
i
 ;

306 
size_buf
 = 
WRITEBUFFERSIZE
;

307 
buf
 = (*)
	`mÆloc
(
size_buf
);

308 i‡(
buf
==
NULL
)

310 
	`¥ötf
("Errorállocating memory\n");

311  
ZIP_INTERNALERROR
;

314 i‡(
zùfûíamórg
==0)

316 
zùok
=0;

320 
i
,
Àn
;

321 
dŸ_found
=0;

323 
zùok
 = 1 ;

324 
	`°∫˝y
(
fûíame_åy
, 
¨gv
[
zùfûíamórg
],
MAXFILENAME
-1);

326 
fûíame_åy
[ 
MAXFILENAME
 ] = '\0';

328 
Àn
=()
	`°æí
(
fûíame_åy
);

329 
i
=0;i<
Àn
;i++)

330 i‡(
fûíame_åy
[
i
]=='.')

331 
dŸ_found
=1;

333 i‡(
dŸ_found
==0)

334 
	`°rˇt
(
fûíame_åy
,".zip");

336 i‡(
›t_ovîwrôe
==2)

339 i‡(
	`check_exi°_fûe
(
fûíame_åy
)==0)

340 
›t_ovîwrôe
=1;

343 i‡(
›t_ovîwrôe
==0)

344 i‡(
	`check_exi°_fûe
(
fûíame_åy
)!=0)

346 
ªp
=0;

349 
™swî
[128];

350 
ªt
;

351 
	`¥ötf
("Thêfûê%†exi°s. Ovîwrôê? [y]es, [n]o, [a]µíd : ",
fûíame_åy
);

352 
ªt
 = 
	`sˇnf
("%1s",
™swî
);

353 i‡(
ªt
 != 1)

355 
	`exô
(
EXIT_FAILURE
);

357 
ªp
 = 
™swî
[0] ;

358 i‡((
ªp
>='a') && (rep<='z'))

359 
ªp
 -= 0x20;

361 (
ªp
!='Y') && (rep!='N') && (rep!='A'));

362 i‡(
ªp
=='N')

363 
zùok
 = 0;

364 i‡(
ªp
=='A')

365 
›t_ovîwrôe
 = 2;

369 i‡(
zùok
==1)

371 
zùFûe
 
zf
;

372 
îr˛o£
;

373 #ifde‡
USEWIN32IOAPI


374 
zlib_fûefunc64_def
 
ffunc
;

375 
	`fûl_wö32_fûefunc64A
(&
ffunc
);

376 
zf
 = 
	`zùO≥n2_64
(
fûíame_åy
,(
›t_ovîwrôe
==2Ë? 2 : 0,
NULL
,&
ffunc
);

378 
zf
 = 
	`zùO≥n64
(
fûíame_åy
,(
›t_ovîwrôe
==2) ? 2 : 0);

381 i‡(
zf
 =
NULL
)

383 
	`¥ötf
("îr‹ o≥nög %s\n",
fûíame_åy
);

384 
îr

ZIP_ERRNO
;

387 
	`¥ötf
("¸ótög %s\n",
fûíame_åy
);

389 
i
=
zùfûíamórg
+1;(i<
¨gc
Ë&& (
îr
==
ZIP_OK
);i++)

391 i‡(!((((*(
¨gv
[
i
]))=='-') || ((*(argv[i]))=='/')) &&

392 ((
¨gv
[
i
][1]=='o') || (argv[i][1]=='O') ||

393 (
¨gv
[
i
][1]=='a') || (argv[i][1]=='A') ||

394 (
¨gv
[
i
][1]=='p') || (argv[i][1]=='P') ||

395 ((
¨gv
[
i
][1]>='0') || (argv[i][1]<='9'))) &&

396 (
	`°æí
(
¨gv
[
i
]) == 2)))

398 
FILE
 * 
fö
;

399 
size_ªad
;

400 c⁄° * 
fûíameözù
 = 
¨gv
[
i
];

401 c⁄° *
ßvefûíameözù
;

402 
zù_fûeöfo
 
zi
;

403 
¸cFûe
=0;

404 
zù64
 = 0;

406 
zi
.
tmz_d©e
.
tm_£c
 = zi.tmz_d©e.
tm_mö
 = zi.tmz_d©e.
tm_hour
 =

407 
zi
.
tmz_d©e
.
tm_mday
 = zi.tmz_d©e.
tm_m⁄
 = zi.tmz_d©e.
tm_yór
 = 0;

408 
zi
.
dosD©e
 = 0;

409 
zi
.
öã∫Æ_Á
 = 0;

410 
zi
.
exã∫Æ_Á
 = 0;

411 
	`fûëime
(
fûíameözù
,&
zi
.
tmz_d©e
,&zi.
dosD©e
);

419 i‡((
∑ssw‹d
 !
NULL
Ë&& (
îr
==
ZIP_OK
))

420 
îr
 = 
	`gëFûeCrc
(
fûíameözù
,
buf
,
size_buf
,&
¸cFûe
);

422 
zù64
 = 
	`isL¨geFûe
(
fûíameözù
);

426 
ßvefûíameözù
 = 
fûíameözù
;

427  
ßvefûíameözù
[0] == '\\' || savefilenameinzip[0] == '/' )

429 
ßvefûíameözù
++;

433 if–
›t_ex˛ude_∑th
 )

435 c⁄° *
tmµå
;

436 c⁄° *
œ°¶ash
 = 0;

437  
tmµå
 = 
ßvefûíameözù
; *tmpptr;Åmpptr++)

439 if–*
tmµå
 == '\\' || *tmpptr == '/')

441 
œ°¶ash
 = 
tmµå
;

444 if–
œ°¶ash
 !
NULL
 )

446 
ßvefûíameözù
 = 
œ°¶ash
+1;

451 
îr
 = 
	`zùO≥nNewFûeInZù3_64
(
zf
,
ßvefûíameözù
,&
zi
,

452 
NULL
,0,NULL,0,NULL ,

453 (
›t_com¥ess_Àvñ
 !0Ë? 
Z_DEFLATED
 : 0,

454 
›t_com¥ess_Àvñ
,0,

456 -
MAX_WBITS
, 
DEF_MEM_LEVEL
, 
Z_DEFAULT_STRATEGY
,

457 
∑ssw‹d
,
¸cFûe
, 
zù64
);

459 i‡(
îr
 !
ZIP_OK
)

460 
	`¥ötf
("îr‹ i¿›íög %†ö zùfûe\n",
fûíameözù
);

463 
fö
 = 
	`FOPEN_FUNC
(
fûíameözù
,"rb");

464 i‡(
fö
==
NULL
)

466 
îr
=
ZIP_ERRNO
;

467 
	`¥ötf
("îr‹ i¿›íög %†f‹Ñódög\n",
fûíameözù
);

471 i‡(
îr
 =
ZIP_OK
)

474 
îr
 = 
ZIP_OK
;

475 
size_ªad
 = ()
	`‰ód
(
buf
,1,
size_buf
,
fö
);

476 i‡(
size_ªad
 < 
size_buf
)

477 i‡(
	`„of
(
fö
)==0)

479 
	`¥ötf
("îr‹ i¿ªadög %s\n",
fûíameözù
);

480 
îr
 = 
ZIP_ERRNO
;

483 i‡(
size_ªad
>0)

485 
îr
 = 
	`zùWrôeInFûeInZù
 (
zf
,
buf
,
size_ªad
);

486 i‡(
îr
<0)

488 
	`¥ötf
("error in writing %s inÅhe zipfile\n",

489 
fûíameözù
);

493 } (
îr
 =
ZIP_OK
Ë&& (
size_ªad
>0));

495 i‡(
fö
)

496 
	`f˛o£
(
fö
);

498 i‡(
îr
<0)

499 
îr
=
ZIP_ERRNO
;

502 
îr
 = 
	`zùClo£FûeInZù
(
zf
);

503 i‡(
îr
!=
ZIP_OK
)

504 
	`¥ötf
("error in closing %s inÅhe zipfile\n",

505 
fûíameözù
);

509 
îr˛o£
 = 
	`zùClo£
(
zf
,
NULL
);

510 i‡(
îr˛o£
 !
ZIP_OK
)

511 
	`¥ötf
("îr‹ i¿˛osög %s\n",
fûíame_åy
);

515 
	`do_hñp
();

518 
	`‰ì
(
buf
);

520 
	}
}

	@zlib-1.2.8/contrib/minizip/mztools.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~"zlib.h
"

12 
	~"unzù.h
"

14 
	#READ_8
(
adr
Ë(()*◊dr))

	)

15 
	#READ_16
(
adr
Ë–
	`READ_8
◊drË| (READ_8◊dr+1Ë<< 8Ë)

	)

16 
	#READ_32
(
adr
Ë–
	`READ_16
◊drË| (READ_16(◊dr)+2Ë<< 16Ë)

	)

18 
	#WRITE_8
(
buff
, 
n
) do { \

19 *((*)(
buff
)Ë(Ë((
n
) & 0xff); \

20 } 0)

	)

21 
	#WRITE_16
(
buff
, 
n
) do { \

22 
	`WRITE_8
((*)(
buff
), 
n
); \

23 
	`WRITE_8
(((*)(
buff
)Ë+ 1, (
n
) >> 8); \

24 } 0)

	)

25 
	#WRITE_32
(
buff
, 
n
) do { \

26 
	`WRITE_16
((*)(
buff
), (
n
) & 0xffff); \

27 
	`WRITE_16
((*)(
buff
Ë+ 2, (
n
) >> 16); \

28 } 0)

	)

30 
ZEXPORT
 
	$unzRïaú
(
fûe
, 
fûeOut
, 
fûeOutTmp
, 
nRecovîed
, 
byãsRecovîed
)

31 c⁄° * 
fûe
;

32 c⁄° * 
fûeOut
;

33 c⁄° * 
fûeOutTmp
;

34 
uL⁄g
* 
nRecovîed
;

35 
uL⁄g
* 
byãsRecovîed
;

37 
îr
 = 
Z_OK
;

38 
FILE
* 
ÂZù
 = 
	`f›í
(
fûe
, "rb");

39 
FILE
* 
ÂOut
 = 
	`f›í
(
fûeOut
, "wb");

40 
FILE
* 
ÂOutCD
 = 
	`f›í
(
fûeOutTmp
, "wb");

41 i‡(
ÂZù
 !
NULL
 && 
ÂOut
 != NULL) {

42 
íåõs
 = 0;

43 
uL⁄g
 
tŸÆByãs
 = 0;

44 
hódî
[30];

45 
fûíame
[1024];

46 
exåa
[1024];

47 
off£t
 = 0;

48 
off£tCD
 = 0;

49  
	`‰ód
(
hódî
, 1, 30, 
ÂZù
) == 30 ) {

50 
cuºítOff£t
 = 
off£t
;

53 i‡(
	`READ_32
(
hódî
) == 0x04034b50) {

54 
vîsi⁄
 = 
	`READ_16
(
hódî
 + 4);

55 
gpÊag
 = 
	`READ_16
(
hódî
 + 6);

56 
mëhod
 = 
	`READ_16
(
hódî
 + 8);

57 
fûëime
 = 
	`READ_16
(
hódî
 + 10);

58 
fûed©e
 = 
	`READ_16
(
hódî
 + 12);

59 
¸c
 = 
	`READ_32
(
hódî
 + 14);

60 
˝size
 = 
	`READ_32
(
hódî
 + 18);

61 
un˝size
 = 
	`READ_32
(
hódî
 + 22);

62 
‚size
 = 
	`READ_16
(
hódî
 + 26);

63 
extsize
 = 
	`READ_16
(
hódî
 + 28);

64 
fûíame
[0] = 
exåa
[0] = '\0';

67 i‡(
	`fwrôe
(
hódî
, 1, 30, 
ÂOut
) == 30) {

68 
off£t
 += 30;

70 
îr
 = 
Z_ERRNO
;

75 i‡(
‚size
 > 0) {

76 i‡(
‚size
 < (
fûíame
)) {

77 i‡(
	`‰ód
(
fûíame
, 1, 
‚size
, 
ÂZù
) == fnsize) {

78 i‡(
	`fwrôe
(
fûíame
, 1, 
‚size
, 
ÂOut
) == fnsize) {

79 
off£t
 +
‚size
;

81 
îr
 = 
Z_ERRNO
;

85 
îr
 = 
Z_ERRNO
;

89 
îr
 = 
Z_ERRNO
;

93 
îr
 = 
Z_STREAM_ERROR
;

98 i‡(
extsize
 > 0) {

99 i‡(
extsize
 < (
exåa
)) {

100 i‡(
	`‰ód
(
exåa
, 1, 
extsize
, 
ÂZù
) ==Éxtsize) {

101 i‡(
	`fwrôe
(
exåa
, 1, 
extsize
, 
ÂOut
) ==Éxtsize) {

102 
off£t
 +
extsize
;

104 
îr
 = 
Z_ERRNO
;

108 
îr
 = 
Z_ERRNO
;

112 
îr
 = 
Z_ERRNO
;

119 
d©aSize
 = 
˝size
;

120 i‡(
d©aSize
 == 0) {

121 
d©aSize
 = 
un˝size
;

123 i‡(
d©aSize
 > 0) {

124 * 
d©a
 = 
	`mÆloc
(
d©aSize
);

125 i‡(
d©a
 !
NULL
) {

126 i‡(()
	`‰ód
(
d©a
, 1, 
d©aSize
, 
ÂZù
) == dataSize) {

127 i‡(()
	`fwrôe
(
d©a
, 1, 
d©aSize
, 
ÂOut
) == dataSize) {

128 
off£t
 +
d©aSize
;

129 
tŸÆByãs
 +
d©aSize
;

131 
îr
 = 
Z_ERRNO
;

134 
îr
 = 
Z_ERRNO
;

136 
	`‰ì
(
d©a
);

137 i‡(
îr
 !
Z_OK
) {

141 
îr
 = 
Z_MEM_ERROR
;

149 
hódî
[46];

150 * 
commít
 = "";

151 
comsize
 = (Ë
	`°æí
(
commít
);

152 
	`WRITE_32
(
hódî
, 0x02014b50);

153 
	`WRITE_16
(
hódî
 + 4, 
vîsi⁄
);

154 
	`WRITE_16
(
hódî
 + 6, 
vîsi⁄
);

155 
	`WRITE_16
(
hódî
 + 8, 
gpÊag
);

156 
	`WRITE_16
(
hódî
 + 10, 
mëhod
);

157 
	`WRITE_16
(
hódî
 + 12, 
fûëime
);

158 
	`WRITE_16
(
hódî
 + 14, 
fûed©e
);

159 
	`WRITE_32
(
hódî
 + 16, 
¸c
);

160 
	`WRITE_32
(
hódî
 + 20, 
˝size
);

161 
	`WRITE_32
(
hódî
 + 24, 
un˝size
);

162 
	`WRITE_16
(
hódî
 + 28, 
‚size
);

163 
	`WRITE_16
(
hódî
 + 30, 
extsize
);

164 
	`WRITE_16
(
hódî
 + 32, 
comsize
);

165 
	`WRITE_16
(
hódî
 + 34, 0);

166 
	`WRITE_16
(
hódî
 + 36, 0);

167 
	`WRITE_32
(
hódî
 + 38, 0);

168 
	`WRITE_32
(
hódî
 + 42, 
cuºítOff£t
);

170 i‡(
	`fwrôe
(
hódî
, 1, 46, 
ÂOutCD
) == 46) {

171 
off£tCD
 += 46;

174 i‡(
‚size
 > 0) {

175 i‡(
	`fwrôe
(
fûíame
, 1, 
‚size
, 
ÂOutCD
) == fnsize) {

176 
off£tCD
 +
‚size
;

178 
îr
 = 
Z_ERRNO
;

182 
îr
 = 
Z_STREAM_ERROR
;

187 i‡(
extsize
 > 0) {

188 i‡(
	`fwrôe
(
exåa
, 1, 
extsize
, 
ÂOutCD
) ==Éxtsize) {

189 
off£tCD
 +
extsize
;

191 
îr
 = 
Z_ERRNO
;

197 i‡(
comsize
 > 0) {

198 i‡(()
	`fwrôe
(
commít
, 1, 
comsize
, 
ÂOutCD
) == comsize) {

199 
off£tCD
 +
comsize
;

201 
îr
 = 
Z_ERRNO
;

208 
îr
 = 
Z_ERRNO
;

214 
íåõs
++;

223 
íåõsZù
 = 
íåõs
;

224 
hódî
[22];

225 * 
commít
 = "";

226 
comsize
 = (Ë
	`°æí
(
commít
);

227 i‡(
íåõsZù
 > 0xffff) {

228 
íåõsZù
 = 0xffff;

230 
	`WRITE_32
(
hódî
, 0x06054b50);

231 
	`WRITE_16
(
hódî
 + 4, 0);

232 
	`WRITE_16
(
hódî
 + 6, 0);

233 
	`WRITE_16
(
hódî
 + 8, 
íåõsZù
);

234 
	`WRITE_16
(
hódî
 + 10, 
íåõsZù
);

235 
	`WRITE_32
(
hódî
 + 12, 
off£tCD
);

236 
	`WRITE_32
(
hódî
 + 16, 
off£t
);

237 
	`WRITE_16
(
hódî
 + 20, 
comsize
);

240 i‡(
	`fwrôe
(
hódî
, 1, 22, 
ÂOutCD
) == 22) {

243 i‡(
comsize
 > 0) {

244 i‡(()
	`fwrôe
(
commít
, 1, 
comsize
, 
ÂOutCD
) != comsize) {

245 
îr
 = 
Z_ERRNO
;

250 
îr
 = 
Z_ERRNO
;

255 
	`f˛o£
(
ÂOutCD
);

256 i‡(
îr
 =
Z_OK
) {

257 
ÂOutCD
 = 
	`f›í
(
fûeOutTmp
, "rb");

258 i‡(
ÂOutCD
 !
NULL
) {

259 
nRód
;

260 
buf„r
[8192];

261  (
nRód
 = ()
	`‰ód
(
buf„r
, 1, (buf„r), 
ÂOutCD
)) > 0) {

262 i‡(()
	`fwrôe
(
buf„r
, 1, 
nRód
, 
ÂOut
) !=ÇRead) {

263 
îr
 = 
Z_ERRNO
;

267 
	`f˛o£
(
ÂOutCD
);

272 
	`f˛o£
(
ÂZù
);

273 
	`f˛o£
(
ÂOut
);

276 ()
	`ªmove
(
fûeOutTmp
);

279 i‡(
îr
 =
Z_OK
) {

280 i‡(
nRecovîed
 !
NULL
) {

281 *
nRecovîed
 = 
íåõs
;

283 i‡(
byãsRecovîed
 !
NULL
) {

284 *
byãsRecovîed
 = 
tŸÆByãs
;

288 
îr
 = 
Z_STREAM_ERROR
;

290  
îr
;

291 
	}
}

	@zlib-1.2.8/contrib/minizip/mztools.h

7 #i‚de‡
_zù_toﬁs_H


8 
	#_zù_toﬁs_H


	)

10 #ifde‡
__˝lu•lus


14 #i‚de‡
_ZLIB_H


15 
	~"zlib.h
"

18 
	~"unzù.h
"

25 
ZEXPORT
 
unzRïaú
(c⁄° * 
fûe
,

26 c⁄° * 
fûeOut
,

27 c⁄° * 
fûeOutTmp
,

28 
uL⁄g
* 
nRecovîed
,

29 
uL⁄g
* 
byãsRecovîed
);

32 #ifde‡
__˝lu•lus


	@zlib-1.2.8/contrib/minizip/unzip.c

67 
	~<°dio.h
>

68 
	~<°dlib.h
>

69 
	~<°rög.h
>

71 #i‚de‡
NOUNCRYPT


72 
	#NOUNCRYPT


	)

75 
	~"zlib.h
"

76 
	~"unzù.h
"

78 #ifde‡
STDC


79 
	~<°ddef.h
>

80 
	~<°rög.h
>

81 
	~<°dlib.h
>

83 #ifde‡
NO_ERRNO_H


84 
î∫o
;

86 
	~<î∫o.h
>

90 #i‚de‡
loˇl


91 
	#loˇl
 

	)

96 #i‚de‡
CASESENSITIVITYDEFAULT_NO


97 #i‡!
deföed
(
unix
Ë&& !deföed(
CASESENSITIVITYDEFAULT_YES
)

98 
	#CASESENSITIVITYDEFAULT_NO


	)

103 #i‚de‡
UNZ_BUFSIZE


104 
	#UNZ_BUFSIZE
 (16384)

	)

107 #i‚de‡
UNZ_MAXFILENAMEINZIP


108 
	#UNZ_MAXFILENAMEINZIP
 (256)

	)

111 #i‚de‡
ALLOC


112 
	#ALLOC
(
size
Ë(
	`mÆloc
(size))

	)

114 #i‚de‡
TRYFREE


115 
	#TRYFREE
(
p
Ë{i‡’Ë
	`‰ì
’);}

	)

118 
	#SIZECENTRALDIRITEM
 (0x2e)

	)

119 
	#SIZEZIPLOCALHEADER
 (0x1e)

	)

122 c⁄° 
	gunz_c›yright
[] =

126 
	sunz_fûe_öfo64_öã∫Æ_s


128 
ZPOS64_T
 
	moff£t_curfûe
;

129 } 
	tunz_fûe_öfo64_öã∫Æ
;

136 *
	mªad_buf„r
;

137 
z_°ªam
 
	m°ªam
;

139 #ifde‡
HAVE_BZIP2


140 
bz_°ªam
 
	mb°ªam
;

143 
ZPOS64_T
 
	mpos_ö_zùfûe
;

144 
uL⁄g
 
	m°ªam_öôüli£d
;

146 
ZPOS64_T
 
	moff£t_loˇl_exåafõld
;

147 
uI¡
 
	msize_loˇl_exåafõld
;

148 
ZPOS64_T
 
	mpos_loˇl_exåafõld
;

149 
ZPOS64_T
 
	mtŸÆ_out_64
;

151 
uL⁄g
 
	m¸c32
;

152 
uL⁄g
 
	m¸c32_waô
;

153 
ZPOS64_T
 
	mª°_ªad_com¥es£d
;

154 
ZPOS64_T
 
	mª°_ªad_uncom¥es£d
;

155 
zlib_fûefunc64_32_def
 
	mz_fûefunc
;

156 
voidpf
 
	mfûe°ªam
;

157 
uL⁄g
 
	mcom¥essi⁄_mëhod
;

158 
ZPOS64_T
 
	mbyã_bef‹e_the_zùfûe
;

159 
	møw
;

160 } 
	tfûe_ö_zù64_ªad_öfo_s
;

167 
zlib_fûefunc64_32_def
 
	mz_fûefunc
;

168 
	mis64bôO≥nFun˘i⁄
;

169 
voidpf
 
	mfûe°ªam
;

170 
unz_globÆ_öfo64
 
	mgi
;

171 
ZPOS64_T
 
	mbyã_bef‹e_the_zùfûe
;

172 
ZPOS64_T
 
	mnum_fûe
;

173 
ZPOS64_T
 
	mpos_ö_˚¡øl_dú
;

174 
ZPOS64_T
 
	mcuºít_fûe_ok
;

175 
ZPOS64_T
 
	m˚¡øl_pos
;

177 
ZPOS64_T
 
	msize_˚¡øl_dú
;

178 
ZPOS64_T
 
	moff£t_˚¡øl_dú
;

181 
unz_fûe_öfo64
 
	mcur_fûe_öfo
;

182 
unz_fûe_öfo64_öã∫Æ
 
	mcur_fûe_öfo_öã∫Æ
;

183 
fûe_ö_zù64_ªad_öfo_s
* 
	mpfûe_ö_zù_ªad
;

185 
	mí¸y±ed
;

187 
	misZù64
;

189 #i‚de‡
NOUNCRYPT


190 
	mkeys
[3];

191 c⁄° 
z_¸c_t
* 
	mp¸c_32_èb
;

193 } 
	tunz64_s
;

196 #i‚de‡
NOUNCRYPT


197 
	~"¸y±.h
"

207 
loˇl
 
unz64loˇl_gëByã
 
OF
((

208 c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,

209 
voidpf
 
fûe°ªam
,

210 *
pi
));

212 
loˇl
 
	$unz64loˇl_gëByã
(c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, *
pi
)

214 
c
;

215 
îr
 = ()
	`ZREAD64
(*
pzlib_fûefunc_def
,
fûe°ªam
,&
c
,1);

216 i‡(
îr
==1)

218 *
pi
 = ()
c
;

219  
UNZ_OK
;

223 i‡(
	`ZERROR64
(*
pzlib_fûefunc_def
,
fûe°ªam
))

224  
UNZ_ERRNO
;

226  
UNZ_EOF
;

228 
	}
}

234 
loˇl
 
unz64loˇl_gëSh‹t
 
OF
((

235 c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,

236 
voidpf
 
fûe°ªam
,

237 
uL⁄g
 *
pX
));

239 
loˇl
 
	$unz64loˇl_gëSh‹t
 (c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,

240 
voidpf
 
fûe°ªam
,

241 
uL⁄g
 *
pX
)

243 
uL⁄g
 
x
 ;

244 
i
 = 0;

245 
îr
;

247 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

248 
x
 = (
uL⁄g
)
i
;

250 i‡(
îr
==
UNZ_OK
)

251 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

252 
x
 |((
uL⁄g
)
i
)<<8;

254 i‡(
îr
==
UNZ_OK
)

255 *
pX
 = 
x
;

257 *
pX
 = 0;

258  
îr
;

259 
	}
}

261 
loˇl
 
unz64loˇl_gëL⁄g
 
OF
((

262 c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,

263 
voidpf
 
fûe°ªam
,

264 
uL⁄g
 *
pX
));

266 
loˇl
 
	$unz64loˇl_gëL⁄g
 (c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,

267 
voidpf
 
fûe°ªam
,

268 
uL⁄g
 *
pX
)

270 
uL⁄g
 
x
 ;

271 
i
 = 0;

272 
îr
;

274 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

275 
x
 = (
uL⁄g
)
i
;

277 i‡(
îr
==
UNZ_OK
)

278 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

279 
x
 |((
uL⁄g
)
i
)<<8;

281 i‡(
îr
==
UNZ_OK
)

282 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

283 
x
 |((
uL⁄g
)
i
)<<16;

285 i‡(
îr
==
UNZ_OK
)

286 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

287 
x
 +((
uL⁄g
)
i
)<<24;

289 i‡(
îr
==
UNZ_OK
)

290 *
pX
 = 
x
;

292 *
pX
 = 0;

293  
îr
;

294 
	}
}

296 
loˇl
 
unz64loˇl_gëL⁄g64
 
OF
((

297 c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,

298 
voidpf
 
fûe°ªam
,

299 
ZPOS64_T
 *
pX
));

302 
loˇl
 
	$unz64loˇl_gëL⁄g64
 (c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,

303 
voidpf
 
fûe°ªam
,

304 
ZPOS64_T
 *
pX
)

306 
ZPOS64_T
 
x
 ;

307 
i
 = 0;

308 
îr
;

310 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

311 
x
 = (
ZPOS64_T
)
i
;

313 i‡(
îr
==
UNZ_OK
)

314 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

315 
x
 |((
ZPOS64_T
)
i
)<<8;

317 i‡(
îr
==
UNZ_OK
)

318 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

319 
x
 |((
ZPOS64_T
)
i
)<<16;

321 i‡(
îr
==
UNZ_OK
)

322 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

323 
x
 |((
ZPOS64_T
)
i
)<<24;

325 i‡(
îr
==
UNZ_OK
)

326 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

327 
x
 |((
ZPOS64_T
)
i
)<<32;

329 i‡(
îr
==
UNZ_OK
)

330 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

331 
x
 |((
ZPOS64_T
)
i
)<<40;

333 i‡(
îr
==
UNZ_OK
)

334 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

335 
x
 |((
ZPOS64_T
)
i
)<<48;

337 i‡(
îr
==
UNZ_OK
)

338 
îr
 = 
	`unz64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

339 
x
 |((
ZPOS64_T
)
i
)<<56;

341 i‡(
îr
==
UNZ_OK
)

342 *
pX
 = 
x
;

344 *
pX
 = 0;

345  
îr
;

346 
	}
}

349 
loˇl
 
	$°rcmpˇ£no£nsôive_öã∫Æ
 (c⁄° * 
fûeName1
, c⁄° * 
fûeName2
)

353 
c1
=*(
fûeName1
++);

354 
c2
=*(
fûeName2
++);

355 i‡((
c1
>='a') && (c1<='z'))

356 
c1
 -= 0x20;

357 i‡((
c2
>='a') && (c2<='z'))

358 
c2
 -= 0x20;

359 i‡(
c1
=='\0')

360  ((
c2
=='\0') ? 0 : -1);

361 i‡(
c2
=='\0')

363 i‡(
c1
<
c2
)

365 i‡(
c1
>
c2
)

368 
	}
}

371 #ifde‡ 
CASESENSITIVITYDEFAULT_NO


372 
	#CASESENSITIVITYDEFAULTVALUE
 2

	)

374 
	#CASESENSITIVITYDEFAULTVALUE
 1

	)

377 #i‚de‡
STRCMPCASENOSENTIVEFUNCTION


378 
	#STRCMPCASENOSENTIVEFUNCTION
 
°rcmpˇ£no£nsôive_öã∫Æ


	)

390 
ZEXPORT
 
	$unzSåögFûeNameCom∑ª
 (c⁄° * 
fûeName1
,

391 c⁄° * 
fûeName2
,

392 
iCa£Sísôivôy
)

395 i‡(
iCa£Sísôivôy
==0)

396 
iCa£Sísôivôy
=
CASESENSITIVITYDEFAULTVALUE
;

398 i‡(
iCa£Sísôivôy
==1)

399  
	`°rcmp
(
fûeName1
,
fûeName2
);

401  
	`STRCMPCASENOSENTIVEFUNCTION
(
fûeName1
,
fûeName2
);

402 
	}
}

404 #i‚de‡
BUFREADCOMMENT


405 
	#BUFREADCOMMENT
 (0x400)

	)

412 
loˇl
 
ZPOS64_T
 
unz64loˇl_SórchCíåÆDú
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
));

413 
loˇl
 
ZPOS64_T
 
	$unz64loˇl_SórchCíåÆDú
(c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
)

415 * 
buf
;

416 
ZPOS64_T
 
uSizeFûe
;

417 
ZPOS64_T
 
uBackRód
;

418 
ZPOS64_T
 
uMaxBack
=0xffff;

419 
ZPOS64_T
 
uPosFound
=0;

421 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
,0,
ZLIB_FILEFUNC_SEEK_END
) != 0)

425 
uSizeFûe
 = 
	`ZTELL64
(*
pzlib_fûefunc_def
,
fûe°ªam
);

427 i‡(
uMaxBack
>
uSizeFûe
)

428 
uMaxBack
 = 
uSizeFûe
;

430 
buf
 = (*)
	`ALLOC
(
BUFREADCOMMENT
+4);

431 i‡(
buf
==
NULL
)

434 
uBackRód
 = 4;

435 
uBackRód
<
uMaxBack
)

437 
uL⁄g
 
uRódSize
;

438 
ZPOS64_T
 
uRódPos
 ;

439 
i
;

440 i‡(
uBackRód
+
BUFREADCOMMENT
>
uMaxBack
)

441 
uBackRód
 = 
uMaxBack
;

443 
uBackRód
+=
BUFREADCOMMENT
;

444 
uRódPos
 = 
uSizeFûe
-
uBackRód
 ;

446 
uRódSize
 = ((
BUFREADCOMMENT
+4Ë< (
uSizeFûe
-
uRódPos
)) ?

447 (
BUFREADCOMMENT
+4Ë: (
uL⁄g
)(
uSizeFûe
-
uRódPos
);

448 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
,
uRódPos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

451 i‡(
	`ZREAD64
(*
pzlib_fûefunc_def
,
fûe°ªam
,
buf
,
uRódSize
)!=uReadSize)

454 
i
=()
uRódSize
-3; (i--)>0;)

455 i‡(((*(
buf
+
i
))==0x50) && ((*(buf+i+1))==0x4b) &&

456 ((*(
buf
+
i
+2))==0x05) && ((*(buf+i+3))==0x06))

458 
uPosFound
 = 
uRódPos
+
i
;

462 i‡(
uPosFound
!=0)

465 
	`TRYFREE
(
buf
);

466  
uPosFound
;

467 
	}
}

474 
loˇl
 
ZPOS64_T
 
unz64loˇl_SórchCíåÆDú64
 
OF
((

475 c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,

476 
voidpf
 
fûe°ªam
));

478 
loˇl
 
ZPOS64_T
 
	$unz64loˇl_SórchCíåÆDú64
(c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,

479 
voidpf
 
fûe°ªam
)

481 * 
buf
;

482 
ZPOS64_T
 
uSizeFûe
;

483 
ZPOS64_T
 
uBackRód
;

484 
ZPOS64_T
 
uMaxBack
=0xffff;

485 
ZPOS64_T
 
uPosFound
=0;

486 
uL⁄g
 
uL
;

487 
ZPOS64_T
 
ªœtiveOff£t
;

489 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
,0,
ZLIB_FILEFUNC_SEEK_END
) != 0)

493 
uSizeFûe
 = 
	`ZTELL64
(*
pzlib_fûefunc_def
,
fûe°ªam
);

495 i‡(
uMaxBack
>
uSizeFûe
)

496 
uMaxBack
 = 
uSizeFûe
;

498 
buf
 = (*)
	`ALLOC
(
BUFREADCOMMENT
+4);

499 i‡(
buf
==
NULL
)

502 
uBackRód
 = 4;

503 
uBackRód
<
uMaxBack
)

505 
uL⁄g
 
uRódSize
;

506 
ZPOS64_T
 
uRódPos
;

507 
i
;

508 i‡(
uBackRód
+
BUFREADCOMMENT
>
uMaxBack
)

509 
uBackRód
 = 
uMaxBack
;

511 
uBackRód
+=
BUFREADCOMMENT
;

512 
uRódPos
 = 
uSizeFûe
-
uBackRód
 ;

514 
uRódSize
 = ((
BUFREADCOMMENT
+4Ë< (
uSizeFûe
-
uRódPos
)) ?

515 (
BUFREADCOMMENT
+4Ë: (
uL⁄g
)(
uSizeFûe
-
uRódPos
);

516 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
,
uRódPos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

519 i‡(
	`ZREAD64
(*
pzlib_fûefunc_def
,
fûe°ªam
,
buf
,
uRódSize
)!=uReadSize)

522 
i
=()
uRódSize
-3; (i--)>0;)

523 i‡(((*(
buf
+
i
))==0x50) && ((*(buf+i+1))==0x4b) &&

524 ((*(
buf
+
i
+2))==0x06) && ((*(buf+i+3))==0x07))

526 
uPosFound
 = 
uRódPos
+
i
;

530 i‡(
uPosFound
!=0)

533 
	`TRYFREE
(
buf
);

534 i‡(
uPosFound
 == 0)

538 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
, 
uPosFound
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

542 i‡(
	`unz64loˇl_gëL⁄g
(
pzlib_fûefunc_def
,
fûe°ªam
,&
uL
)!=
UNZ_OK
)

546 i‡(
	`unz64loˇl_gëL⁄g
(
pzlib_fûefunc_def
,
fûe°ªam
,&
uL
)!=
UNZ_OK
)

548 i‡(
uL
 != 0)

552 i‡(
	`unz64loˇl_gëL⁄g64
(
pzlib_fûefunc_def
,
fûe°ªam
,&
ªœtiveOff£t
)!=
UNZ_OK
)

556 i‡(
	`unz64loˇl_gëL⁄g
(
pzlib_fûefunc_def
,
fûe°ªam
,&
uL
)!=
UNZ_OK
)

558 i‡(
uL
 != 1)

562 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
, 
ªœtiveOff£t
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

566 i‡(
	`unz64loˇl_gëL⁄g
(
pzlib_fûefunc_def
,
fûe°ªam
,&
uL
)!=
UNZ_OK
)

569 i‡(
uL
 != 0x06064b50)

572  
ªœtiveOff£t
;

573 
	}
}

584 
loˇl
 
unzFûe
 
	$unzO≥nI¡î«l
 (c⁄° *
∑th
,

585 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc64_32_def
,

586 
is64bôO≥nFun˘i⁄
)

588 
unz64_s
 
us
;

589 
unz64_s
 *
s
;

590 
ZPOS64_T
 
˚¡øl_pos
;

591 
uL⁄g
 
uL
;

593 
uL⁄g
 
numbî_disk
;

595 
uL⁄g
 
numbî_disk_wôh_CD
;

597 
ZPOS64_T
 
numbî_íåy_CD
;

601 
îr
=
UNZ_OK
;

603 i‡(
unz_c›yright
[0]!=' ')

604  
NULL
;

606 
us
.
z_fûefunc
.
z£ek32_fûe
 = 
NULL
;

607 
us
.
z_fûefunc
.
zãŒ32_fûe
 = 
NULL
;

608 i‡(
pzlib_fûefunc64_32_def
==
NULL
)

609 
	`fûl_f›í64_fûefunc
(&
us
.
z_fûefunc
.
zfûe_func64
);

611 
us
.
z_fûefunc
 = *
pzlib_fûefunc64_32_def
;

612 
us
.
is64bôO≥nFun˘i⁄
 = is64bitOpenFunction;

616 
us
.
fûe°ªam
 = 
	`ZOPEN64
(us.
z_fûefunc
,

617 
∑th
,

618 
ZLIB_FILEFUNC_MODE_READ
 |

619 
ZLIB_FILEFUNC_MODE_EXISTING
);

620 i‡(
us
.
fûe°ªam
==
NULL
)

621  
NULL
;

623 
˚¡øl_pos
 = 
	`unz64loˇl_SórchCíåÆDú64
(&
us
.
z_fûefunc
,us.
fûe°ªam
);

624 i‡(
˚¡øl_pos
)

626 
uL⁄g
 
uS
;

627 
ZPOS64_T
 
uL64
;

629 
us
.
isZù64
 = 1;

631 i‡(
	`ZSEEK64
(
us
.
z_fûefunc
, us.
fûe°ªam
,

632 
˚¡øl_pos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

633 
îr
=
UNZ_ERRNO
;

636 i‡(
	`unz64loˇl_gëL⁄g
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uL
)!=
UNZ_OK
)

637 
îr
=
UNZ_ERRNO
;

640 i‡(
	`unz64loˇl_gëL⁄g64
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uL64
)!=
UNZ_OK
)

641 
îr
=
UNZ_ERRNO
;

644 i‡(
	`unz64loˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uS
)!=
UNZ_OK
)

645 
îr
=
UNZ_ERRNO
;

648 i‡(
	`unz64loˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uS
)!=
UNZ_OK
)

649 
îr
=
UNZ_ERRNO
;

652 i‡(
	`unz64loˇl_gëL⁄g
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
numbî_disk
)!=
UNZ_OK
)

653 
îr
=
UNZ_ERRNO
;

656 i‡(
	`unz64loˇl_gëL⁄g
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
numbî_disk_wôh_CD
)!=
UNZ_OK
)

657 
îr
=
UNZ_ERRNO
;

660 i‡(
	`unz64loˇl_gëL⁄g64
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&us.
gi
.
numbî_íåy
)!=
UNZ_OK
)

661 
îr
=
UNZ_ERRNO
;

664 i‡(
	`unz64loˇl_gëL⁄g64
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
numbî_íåy_CD
)!=
UNZ_OK
)

665 
îr
=
UNZ_ERRNO
;

667 i‡((
numbî_íåy_CD
!=
us
.
gi
.
numbî_íåy
) ||

668 (
numbî_disk_wôh_CD
!=0) ||

669 (
numbî_disk
!=0))

670 
îr
=
UNZ_BADZIPFILE
;

673 i‡(
	`unz64loˇl_gëL⁄g64
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&us.
size_˚¡øl_dú
)!=
UNZ_OK
)

674 
îr
=
UNZ_ERRNO
;

678 i‡(
	`unz64loˇl_gëL⁄g64
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&us.
off£t_˚¡øl_dú
)!=
UNZ_OK
)

679 
îr
=
UNZ_ERRNO
;

681 
us
.
gi
.
size_commít
 = 0;

685 
˚¡øl_pos
 = 
	`unz64loˇl_SórchCíåÆDú
(&
us
.
z_fûefunc
,us.
fûe°ªam
);

686 i‡(
˚¡øl_pos
==0)

687 
îr
=
UNZ_ERRNO
;

689 
us
.
isZù64
 = 0;

691 i‡(
	`ZSEEK64
(
us
.
z_fûefunc
, us.
fûe°ªam
,

692 
˚¡øl_pos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

693 
îr
=
UNZ_ERRNO
;

696 i‡(
	`unz64loˇl_gëL⁄g
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uL
)!=
UNZ_OK
)

697 
îr
=
UNZ_ERRNO
;

700 i‡(
	`unz64loˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
numbî_disk
)!=
UNZ_OK
)

701 
îr
=
UNZ_ERRNO
;

704 i‡(
	`unz64loˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
numbî_disk_wôh_CD
)!=
UNZ_OK
)

705 
îr
=
UNZ_ERRNO
;

708 i‡(
	`unz64loˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uL
)!=
UNZ_OK
)

709 
îr
=
UNZ_ERRNO
;

710 
us
.
gi
.
numbî_íåy
 = 
uL
;

713 i‡(
	`unz64loˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uL
)!=
UNZ_OK
)

714 
îr
=
UNZ_ERRNO
;

715 
numbî_íåy_CD
 = 
uL
;

717 i‡((
numbî_íåy_CD
!=
us
.
gi
.
numbî_íåy
) ||

718 (
numbî_disk_wôh_CD
!=0) ||

719 (
numbî_disk
!=0))

720 
îr
=
UNZ_BADZIPFILE
;

723 i‡(
	`unz64loˇl_gëL⁄g
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uL
)!=
UNZ_OK
)

724 
îr
=
UNZ_ERRNO
;

725 
us
.
size_˚¡øl_dú
 = 
uL
;

729 i‡(
	`unz64loˇl_gëL⁄g
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&
uL
)!=
UNZ_OK
)

730 
îr
=
UNZ_ERRNO
;

731 
us
.
off£t_˚¡øl_dú
 = 
uL
;

734 i‡(
	`unz64loˇl_gëSh‹t
(&
us
.
z_fûefunc
, us.
fûe°ªam
,&us.
gi
.
size_commít
)!=
UNZ_OK
)

735 
îr
=
UNZ_ERRNO
;

738 i‡((
˚¡øl_pos
<
us
.
off£t_˚¡øl_dú
+us.
size_˚¡øl_dú
) &&

739 (
îr
==
UNZ_OK
))

740 
îr
=
UNZ_BADZIPFILE
;

742 i‡(
îr
!=
UNZ_OK
)

744 
	`ZCLOSE64
(
us
.
z_fûefunc
, us.
fûe°ªam
);

745  
NULL
;

748 
us
.
byã_bef‹e_the_zùfûe
 = 
˚¡øl_pos
 -

749 (
us
.
off£t_˚¡øl_dú
+us.
size_˚¡øl_dú
);

750 
us
.
˚¡øl_pos
 = central_pos;

751 
us
.
pfûe_ö_zù_ªad
 = 
NULL
;

752 
us
.
í¸y±ed
 = 0;

755 
s
=(
unz64_s
*)
	`ALLOC
((unz64_s));

756 if–
s
 !
NULL
)

758 *
s
=
us
;

759 
	`unzGoToFú°Fûe
((
unzFûe
)
s
);

761  (
unzFûe
)
s
;

762 
	}
}

765 
unzFûe
 
ZEXPORT
 
	$unzO≥n2
 (c⁄° *
∑th
,

766 
zlib_fûefunc_def
* 
pzlib_fûefunc32_def
)

768 i‡(
pzlib_fûefunc32_def
 !
NULL
)

770 
zlib_fûefunc64_32_def
 
zlib_fûefunc64_32_def_fûl
;

771 
	`fûl_zlib_fûefunc64_32_def_‰om_fûefunc32
(&
zlib_fûefunc64_32_def_fûl
,
pzlib_fûefunc32_def
);

772  
	`unzO≥nI¡î«l
(
∑th
, &
zlib_fûefunc64_32_def_fûl
, 0);

775  
	`unzO≥nI¡î«l
(
∑th
, 
NULL
, 0);

776 
	}
}

778 
unzFûe
 
ZEXPORT
 
	$unzO≥n2_64
 (c⁄° *
∑th
,

779 
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
)

781 i‡(
pzlib_fûefunc_def
 !
NULL
)

783 
zlib_fûefunc64_32_def
 
zlib_fûefunc64_32_def_fûl
;

784 
zlib_fûefunc64_32_def_fûl
.
zfûe_func64
 = *
pzlib_fûefunc_def
;

785 
zlib_fûefunc64_32_def_fûl
.
zãŒ32_fûe
 = 
NULL
;

786 
zlib_fûefunc64_32_def_fûl
.
z£ek32_fûe
 = 
NULL
;

787  
	`unzO≥nI¡î«l
(
∑th
, &
zlib_fûefunc64_32_def_fûl
, 1);

790  
	`unzO≥nI¡î«l
(
∑th
, 
NULL
, 1);

791 
	}
}

793 
unzFûe
 
ZEXPORT
 
	$unzO≥n
 (c⁄° *
∑th
)

795  
	`unzO≥nI¡î«l
(
∑th
, 
NULL
, 0);

796 
	}
}

798 
unzFûe
 
ZEXPORT
 
	$unzO≥n64
 (c⁄° *
∑th
)

800  
	`unzO≥nI¡î«l
(
∑th
, 
NULL
, 1);

801 
	}
}

808 
ZEXPORT
 
	$unzClo£
 (
unzFûe
 
fûe
)

810 
unz64_s
* 
s
;

811 i‡(
fûe
==
NULL
)

812  
UNZ_PARAMERROR
;

813 
s
=(
unz64_s
*)
fûe
;

815 i‡(
s
->
pfûe_ö_zù_ªad
!=
NULL
)

816 
	`unzClo£CuºítFûe
(
fûe
);

818 
	`ZCLOSE64
(
s
->
z_fûefunc
, s->
fûe°ªam
);

819 
	`TRYFREE
(
s
);

820  
UNZ_OK
;

821 
	}
}

828 
ZEXPORT
 
	$unzGëGlobÆInfo64
 (
unzFûe
 
fûe
, 
unz_globÆ_öfo64
* 
pglobÆ_öfo
)

830 
unz64_s
* 
s
;

831 i‡(
fûe
==
NULL
)

832  
UNZ_PARAMERROR
;

833 
s
=(
unz64_s
*)
fûe
;

834 *
pglobÆ_öfo
=
s
->
gi
;

835  
UNZ_OK
;

836 
	}
}

838 
ZEXPORT
 
	$unzGëGlobÆInfo
 (
unzFûe
 
fûe
, 
unz_globÆ_öfo
* 
pglobÆ_öfo32
)

840 
unz64_s
* 
s
;

841 i‡(
fûe
==
NULL
)

842  
UNZ_PARAMERROR
;

843 
s
=(
unz64_s
*)
fûe
;

845 
pglobÆ_öfo32
->
numbî_íåy
 = (
uL⁄g
)
s
->
gi
.number_entry;

846 
pglobÆ_öfo32
->
size_commít
 = 
s
->
gi
.size_comment;

847  
UNZ_OK
;

848 
	}
}

852 
loˇl
 
	$unz64loˇl_DosD©eToTmuD©e
 (
ZPOS64_T
 
ulDosD©e
, 
tm_unz
* 
±m
)

854 
ZPOS64_T
 
uD©e
;

855 
uD©e
 = (
ZPOS64_T
)(
ulDosD©e
>>16);

856 
±m
->
tm_mday
 = (
uI¡
)(
uD©e
&0x1f) ;

857 
±m
->
tm_m⁄
 = (
uI¡
)((((
uD©e
)&0x1E0)/0x20)-1) ;

858 
±m
->
tm_yór
 = (
uI¡
)(((
uD©e
&0x0FE00)/0x0200)+1980) ;

860 
±m
->
tm_hour
 = (
uI¡
Ë((
ulDosD©e
 &0xF800)/0x800);

861 
±m
->
tm_mö
 = (
uI¡
Ë((
ulDosD©e
&0x7E0)/0x20) ;

862 
±m
->
tm_£c
 = (
uI¡
Ë(2*(
ulDosD©e
&0x1f)) ;

863 
	}
}

868 
loˇl
 
unz64loˇl_GëCuºítFûeInfoI¡î«l
 
OF
((
unzFûe
 
fûe
,

869 
unz_fûe_öfo64
 *
pfûe_öfo
,

870 
unz_fûe_öfo64_öã∫Æ


871 *
pfûe_öfo_öã∫Æ
,

872 *
szFûeName
,

873 
uL⁄g
 
fûeNameBuf„rSize
,

874 *
exåaFõld
,

875 
uL⁄g
 
exåaFõldBuf„rSize
,

876 *
szCommít
,

877 
uL⁄g
 
commítBuf„rSize
));

879 
loˇl
 
	$unz64loˇl_GëCuºítFûeInfoI¡î«l
 (
unzFûe
 
fûe
,

880 
unz_fûe_öfo64
 *
pfûe_öfo
,

881 
unz_fûe_öfo64_öã∫Æ


882 *
pfûe_öfo_öã∫Æ
,

883 *
szFûeName
,

884 
uL⁄g
 
fûeNameBuf„rSize
,

885 *
exåaFõld
,

886 
uL⁄g
 
exåaFõldBuf„rSize
,

887 *
szCommít
,

888 
uL⁄g
 
commítBuf„rSize
)

890 
unz64_s
* 
s
;

891 
unz_fûe_öfo64
 
fûe_öfo
;

892 
unz_fûe_öfo64_öã∫Æ
 
fûe_öfo_öã∫Æ
;

893 
îr
=
UNZ_OK
;

894 
uL⁄g
 
uMagic
;

895 
lSìk
=0;

896 
uL⁄g
 
uL
;

898 i‡(
fûe
==
NULL
)

899  
UNZ_PARAMERROR
;

900 
s
=(
unz64_s
*)
fûe
;

901 i‡(
	`ZSEEK64
(
s
->
z_fûefunc
, s->
fûe°ªam
,

902 
s
->
pos_ö_˚¡øl_dú
+s->
byã_bef‹e_the_zùfûe
,

903 
ZLIB_FILEFUNC_SEEK_SET
)!=0)

904 
îr
=
UNZ_ERRNO
;

908 i‡(
îr
==
UNZ_OK
)

910 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uMagic
Ë!
UNZ_OK
)

911 
îr
=
UNZ_ERRNO
;

912 i‡(
uMagic
!=0x02014b50)

913 
îr
=
UNZ_BADZIPFILE
;

916 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
vîsi⁄
Ë!
UNZ_OK
)

917 
îr
=
UNZ_ERRNO
;

919 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
vîsi⁄_√eded
Ë!
UNZ_OK
)

920 
îr
=
UNZ_ERRNO
;

922 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
Êag
Ë!
UNZ_OK
)

923 
îr
=
UNZ_ERRNO
;

925 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
com¥essi⁄_mëhod
Ë!
UNZ_OK
)

926 
îr
=
UNZ_ERRNO
;

928 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
dosD©e
Ë!
UNZ_OK
)

929 
îr
=
UNZ_ERRNO
;

931 
	`unz64loˇl_DosD©eToTmuD©e
(
fûe_öfo
.
dosD©e
,&fûe_öfo.
tmu_d©e
);

933 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
¸c
Ë!
UNZ_OK
)

934 
îr
=
UNZ_ERRNO
;

936 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uL
Ë!
UNZ_OK
)

937 
îr
=
UNZ_ERRNO
;

938 
fûe_öfo
.
com¥es£d_size
 = 
uL
;

940 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uL
Ë!
UNZ_OK
)

941 
îr
=
UNZ_ERRNO
;

942 
fûe_öfo
.
uncom¥es£d_size
 = 
uL
;

944 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
size_fûíame
Ë!
UNZ_OK
)

945 
îr
=
UNZ_ERRNO
;

947 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
size_fûe_exåa
Ë!
UNZ_OK
)

948 
îr
=
UNZ_ERRNO
;

950 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
size_fûe_commít
Ë!
UNZ_OK
)

951 
îr
=
UNZ_ERRNO
;

953 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
disk_num_°¨t
Ë!
UNZ_OK
)

954 
îr
=
UNZ_ERRNO
;

956 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
öã∫Æ_Á
Ë!
UNZ_OK
)

957 
îr
=
UNZ_ERRNO
;

959 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
exã∫Æ_Á
Ë!
UNZ_OK
)

960 
îr
=
UNZ_ERRNO
;

963 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uL
Ë!
UNZ_OK
)

964 
îr
=
UNZ_ERRNO
;

965 
fûe_öfo_öã∫Æ
.
off£t_curfûe
 = 
uL
;

967 
lSìk
+=
fûe_öfo
.
size_fûíame
;

968 i‡((
îr
==
UNZ_OK
Ë&& (
szFûeName
!=
NULL
))

970 
uL⁄g
 
uSizeRód
 ;

971 i‡(
fûe_öfo
.
size_fûíame
<
fûeNameBuf„rSize
)

973 *(
szFûeName
+
fûe_öfo
.
size_fûíame
)='\0';

974 
uSizeRód
 = 
fûe_öfo
.
size_fûíame
;

977 
uSizeRód
 = 
fûeNameBuf„rSize
;

979 i‡((
fûe_öfo
.
size_fûíame
>0Ë&& (
fûeNameBuf„rSize
>0))

980 i‡(
	`ZREAD64
(
s
->
z_fûefunc
, s->
fûe°ªam
,
szFûeName
,
uSizeRód
)!=uSizeRead)

981 
îr
=
UNZ_ERRNO
;

982 
lSìk
 -
uSizeRód
;

986 i‡((
îr
==
UNZ_OK
Ë&& (
exåaFõld
!=
NULL
))

988 
ZPOS64_T
 
uSizeRód
 ;

989 i‡(
fûe_öfo
.
size_fûe_exåa
<
exåaFõldBuf„rSize
)

990 
uSizeRód
 = 
fûe_öfo
.
size_fûe_exåa
;

992 
uSizeRód
 = 
exåaFõldBuf„rSize
;

994 i‡(
lSìk
!=0)

996 i‡(
	`ZSEEK64
(
s
->
z_fûefunc
, s->
fûe°ªam
,
lSìk
,
ZLIB_FILEFUNC_SEEK_CUR
)==0)

997 
lSìk
=0;

999 
îr
=
UNZ_ERRNO
;

1002 i‡((
fûe_öfo
.
size_fûe_exåa
>0Ë&& (
exåaFõldBuf„rSize
>0))

1003 i‡(
	`ZREAD64
(
s
->
z_fûefunc
, s->
fûe°ªam
,
exåaFõld
,(
uL⁄g
)
uSizeRód
)!=uSizeRead)

1004 
îr
=
UNZ_ERRNO
;

1006 
lSìk
 +
fûe_öfo
.
size_fûe_exåa
 - (
uL⁄g
)
uSizeRód
;

1009 
lSìk
 +
fûe_öfo
.
size_fûe_exåa
;

1012 i‡((
îr
==
UNZ_OK
Ë&& (
fûe_öfo
.
size_fûe_exåa
 != 0))

1014 
uL⁄g
 
acc
 = 0;

1017 
lSìk
 -
fûe_öfo
.
size_fûe_exåa
;

1019 i‡(
lSìk
!=0)

1021 i‡(
	`ZSEEK64
(
s
->
z_fûefunc
, s->
fûe°ªam
,
lSìk
,
ZLIB_FILEFUNC_SEEK_CUR
)==0)

1022 
lSìk
=0;

1024 
îr
=
UNZ_ERRNO
;

1027 
acc
 < 
fûe_öfo
.
size_fûe_exåa
)

1029 
uL⁄g
 
hódîId
;

1030 
uL⁄g
 
d©aSize
;

1032 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
hódîId
Ë!
UNZ_OK
)

1033 
îr
=
UNZ_ERRNO
;

1035 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
d©aSize
Ë!
UNZ_OK
)

1036 
îr
=
UNZ_ERRNO
;

1039 i‡(
hódîId
 == 0x0001)

1041 
uL⁄g
 
uL
;

1043 if(
fûe_öfo
.
uncom¥es£d_size
 =
MAXU32
)

1045 i‡(
	`unz64loˇl_gëL⁄g64
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
uncom¥es£d_size
Ë!
UNZ_OK
)

1046 
îr
=
UNZ_ERRNO
;

1049 if(
fûe_öfo
.
com¥es£d_size
 =
MAXU32
)

1051 i‡(
	`unz64loˇl_gëL⁄g64
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo
.
com¥es£d_size
Ë!
UNZ_OK
)

1052 
îr
=
UNZ_ERRNO
;

1055 if(
fûe_öfo_öã∫Æ
.
off£t_curfûe
 =
MAXU32
)

1058 i‡(
	`unz64loˇl_gëL⁄g64
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
fûe_öfo_öã∫Æ
.
off£t_curfûe
Ë!
UNZ_OK
)

1059 
îr
=
UNZ_ERRNO
;

1062 if(
fûe_öfo
.
disk_num_°¨t
 =
MAXU32
)

1065 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uL
Ë!
UNZ_OK
)

1066 
îr
=
UNZ_ERRNO
;

1072 i‡(
	`ZSEEK64
(
s
->
z_fûefunc
, s->
fûe°ªam
,
d©aSize
,
ZLIB_FILEFUNC_SEEK_CUR
)!=0)

1073 
îr
=
UNZ_ERRNO
;

1076 
acc
 +2 + 2 + 
d©aSize
;

1080 i‡((
îr
==
UNZ_OK
Ë&& (
szCommít
!=
NULL
))

1082 
uL⁄g
 
uSizeRód
 ;

1083 i‡(
fûe_öfo
.
size_fûe_commít
<
commítBuf„rSize
)

1085 *(
szCommít
+
fûe_öfo
.
size_fûe_commít
)='\0';

1086 
uSizeRód
 = 
fûe_öfo
.
size_fûe_commít
;

1089 
uSizeRód
 = 
commítBuf„rSize
;

1091 i‡(
lSìk
!=0)

1093 i‡(
	`ZSEEK64
(
s
->
z_fûefunc
, s->
fûe°ªam
,
lSìk
,
ZLIB_FILEFUNC_SEEK_CUR
)==0)

1094 
lSìk
=0;

1096 
îr
=
UNZ_ERRNO
;

1099 i‡((
fûe_öfo
.
size_fûe_commít
>0Ë&& (
commítBuf„rSize
>0))

1100 i‡(
	`ZREAD64
(
s
->
z_fûefunc
, s->
fûe°ªam
,
szCommít
,
uSizeRód
)!=uSizeRead)

1101 
îr
=
UNZ_ERRNO
;

1102 
lSìk
+=
fûe_öfo
.
size_fûe_commít
 - 
uSizeRód
;

1105 
lSìk
+=
fûe_öfo
.
size_fûe_commít
;

1108 i‡((
îr
==
UNZ_OK
Ë&& (
pfûe_öfo
!=
NULL
))

1109 *
pfûe_öfo
=
fûe_öfo
;

1111 i‡((
îr
==
UNZ_OK
Ë&& (
pfûe_öfo_öã∫Æ
!=
NULL
))

1112 *
pfûe_öfo_öã∫Æ
=
fûe_öfo_öã∫Æ
;

1114  
îr
;

1115 
	}
}

1124 
ZEXPORT
 
	$unzGëCuºítFûeInfo64
 (
unzFûe
 
fûe
,

1125 
unz_fûe_öfo64
 * 
pfûe_öfo
,

1126 * 
szFûeName
, 
uL⁄g
 
fûeNameBuf„rSize
,

1127 *
exåaFõld
, 
uL⁄g
 
exåaFõldBuf„rSize
,

1128 * 
szCommít
, 
uL⁄g
 
commítBuf„rSize
)

1130  
	`unz64loˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,
pfûe_öfo
,
NULL
,

1131 
szFûeName
,
fûeNameBuf„rSize
,

1132 
exåaFõld
,
exåaFõldBuf„rSize
,

1133 
szCommít
,
commítBuf„rSize
);

1134 
	}
}

1136 
ZEXPORT
 
	$unzGëCuºítFûeInfo
 (
unzFûe
 
fûe
,

1137 
unz_fûe_öfo
 * 
pfûe_öfo
,

1138 * 
szFûeName
, 
uL⁄g
 
fûeNameBuf„rSize
,

1139 *
exåaFõld
, 
uL⁄g
 
exåaFõldBuf„rSize
,

1140 * 
szCommít
, 
uL⁄g
 
commítBuf„rSize
)

1142 
îr
;

1143 
unz_fûe_öfo64
 
fûe_öfo64
;

1144 
îr
 = 
	`unz64loˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
fûe_öfo64
,
NULL
,

1145 
szFûeName
,
fûeNameBuf„rSize
,

1146 
exåaFõld
,
exåaFõldBuf„rSize
,

1147 
szCommít
,
commítBuf„rSize
);

1148 i‡((
îr
==
UNZ_OK
Ë&& (
pfûe_öfo
 !
NULL
))

1150 
pfûe_öfo
->
vîsi⁄
 = 
fûe_öfo64
.version;

1151 
pfûe_öfo
->
vîsi⁄_√eded
 = 
fûe_öfo64
.version_needed;

1152 
pfûe_öfo
->
Êag
 = 
fûe_öfo64
.flag;

1153 
pfûe_öfo
->
com¥essi⁄_mëhod
 = 
fûe_öfo64
.compression_method;

1154 
pfûe_öfo
->
dosD©e
 = 
fûe_öfo64
.dosDate;

1155 
pfûe_öfo
->
¸c
 = 
fûe_öfo64
.crc;

1157 
pfûe_öfo
->
size_fûíame
 = 
fûe_öfo64
.size_filename;

1158 
pfûe_öfo
->
size_fûe_exåa
 = 
fûe_öfo64
.size_file_extra;

1159 
pfûe_öfo
->
size_fûe_commít
 = 
fûe_öfo64
.size_file_comment;

1161 
pfûe_öfo
->
disk_num_°¨t
 = 
fûe_öfo64
.disk_num_start;

1162 
pfûe_öfo
->
öã∫Æ_Á
 = 
fûe_öfo64
.internal_fa;

1163 
pfûe_öfo
->
exã∫Æ_Á
 = 
fûe_öfo64
.external_fa;

1165 
pfûe_öfo
->
tmu_d©e
 = 
fûe_öfo64
.tmu_date,

1168 
pfûe_öfo
->
com¥es£d_size
 = (
uL⁄g
)
fûe_öfo64
.compressed_size;

1169 
pfûe_öfo
->
uncom¥es£d_size
 = (
uL⁄g
)
fûe_öfo64
.uncompressed_size;

1172  
îr
;

1173 
	}
}

1178 
ZEXPORT
 
	$unzGoToFú°Fûe
 (
unzFûe
 
fûe
)

1180 
îr
=
UNZ_OK
;

1181 
unz64_s
* 
s
;

1182 i‡(
fûe
==
NULL
)

1183  
UNZ_PARAMERROR
;

1184 
s
=(
unz64_s
*)
fûe
;

1185 
s
->
pos_ö_˚¡øl_dú
=s->
off£t_˚¡øl_dú
;

1186 
s
->
num_fûe
=0;

1187 
îr
=
	`unz64loˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

1188 &
s
->
cur_fûe_öfo_öã∫Æ
,

1189 
NULL
,0,NULL,0,NULL,0);

1190 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

1191  
îr
;

1192 
	}
}

1199 
ZEXPORT
 
	$unzGoToNextFûe
 (
unzFûe
 
fûe
)

1201 
unz64_s
* 
s
;

1202 
îr
;

1204 i‡(
fûe
==
NULL
)

1205  
UNZ_PARAMERROR
;

1206 
s
=(
unz64_s
*)
fûe
;

1207 i‡(!
s
->
cuºít_fûe_ok
)

1208  
UNZ_END_OF_LIST_OF_FILE
;

1209 i‡(
s
->
gi
.
numbî_íåy
 != 0xffff)

1210 i‡(
s
->
num_fûe
+1==s->
gi
.
numbî_íåy
)

1211  
UNZ_END_OF_LIST_OF_FILE
;

1213 
s
->
pos_ö_˚¡øl_dú
 +
SIZECENTRALDIRITEM
 + s->
cur_fûe_öfo
.
size_fûíame
 +

1214 
s
->
cur_fûe_öfo
.
size_fûe_exåa
 + s->cur_fûe_öfo.
size_fûe_commít
 ;

1215 
s
->
num_fûe
++;

1216 
îr
 = 
	`unz64loˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

1217 &
s
->
cur_fûe_öfo_öã∫Æ
,

1218 
NULL
,0,NULL,0,NULL,0);

1219 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

1220  
îr
;

1221 
	}
}

1232 
ZEXPORT
 
	$unzLoˇãFûe
 (
unzFûe
 
fûe
, c⁄° *
szFûeName
, 
iCa£Sísôivôy
)

1234 
unz64_s
* 
s
;

1235 
îr
;

1240 
unz_fûe_öfo64
 
cur_fûe_öfoSaved
;

1241 
unz_fûe_öfo64_öã∫Æ
 
cur_fûe_öfo_öã∫ÆSaved
;

1242 
ZPOS64_T
 
num_fûeSaved
;

1243 
ZPOS64_T
 
pos_ö_˚¡øl_dúSaved
;

1246 i‡(
fûe
==
NULL
)

1247  
UNZ_PARAMERROR
;

1249 i‡(
	`°æí
(
szFûeName
)>=
UNZ_MAXFILENAMEINZIP
)

1250  
UNZ_PARAMERROR
;

1252 
s
=(
unz64_s
*)
fûe
;

1253 i‡(!
s
->
cuºít_fûe_ok
)

1254  
UNZ_END_OF_LIST_OF_FILE
;

1257 
num_fûeSaved
 = 
s
->
num_fûe
;

1258 
pos_ö_˚¡øl_dúSaved
 = 
s
->
pos_ö_˚¡øl_dú
;

1259 
cur_fûe_öfoSaved
 = 
s
->
cur_fûe_öfo
;

1260 
cur_fûe_öfo_öã∫ÆSaved
 = 
s
->
cur_fûe_öfo_öã∫Æ
;

1262 
îr
 = 
	`unzGoToFú°Fûe
(
fûe
);

1264 
îr
 =
UNZ_OK
)

1266 
szCuºítFûeName
[
UNZ_MAXFILENAMEINZIP
+1];

1267 
îr
 = 
	`unzGëCuºítFûeInfo64
(
fûe
,
NULL
,

1268 
szCuºítFûeName
,(szCurrentFileName)-1,

1269 
NULL
,0,NULL,0);

1270 i‡(
îr
 =
UNZ_OK
)

1272 i‡(
	`unzSåögFûeNameCom∑ª
(
szCuºítFûeName
,

1273 
szFûeName
,
iCa£Sísôivôy
)==0)

1274  
UNZ_OK
;

1275 
îr
 = 
	`unzGoToNextFûe
(
fûe
);

1282 
s
->
num_fûe
 = 
num_fûeSaved
 ;

1283 
s
->
pos_ö_˚¡øl_dú
 = 
pos_ö_˚¡øl_dúSaved
 ;

1284 
s
->
cur_fûe_öfo
 = 
cur_fûe_öfoSaved
;

1285 
s
->
cur_fûe_öfo_öã∫Æ
 = 
cur_fûe_öfo_öã∫ÆSaved
;

1286  
îr
;

1287 
	}
}

1308 
ZEXPORT
 
	$unzGëFûePos64
(
unzFûe
 
fûe
, 
unz64_fûe_pos
* 
fûe_pos
)

1310 
unz64_s
* 
s
;

1312 i‡(
fûe
==
NULL
 || 
fûe_pos
==NULL)

1313  
UNZ_PARAMERROR
;

1314 
s
=(
unz64_s
*)
fûe
;

1315 i‡(!
s
->
cuºít_fûe_ok
)

1316  
UNZ_END_OF_LIST_OF_FILE
;

1318 
fûe_pos
->
pos_ö_zù_dúe˘‹y
 = 
s
->
pos_ö_˚¡øl_dú
;

1319 
fûe_pos
->
num_of_fûe
 = 
s
->
num_fûe
;

1321  
UNZ_OK
;

1322 
	}
}

1324 
ZEXPORT
 
	$unzGëFûePos
(

1325 
unzFûe
 
fûe
,

1326 
unz_fûe_pos
* 
fûe_pos
)

1328 
unz64_fûe_pos
 
fûe_pos64
;

1329 
îr
 = 
	`unzGëFûePos64
(
fûe
,&
fûe_pos64
);

1330 i‡(
îr
==
UNZ_OK
)

1332 
fûe_pos
->
pos_ö_zù_dúe˘‹y
 = (
uL⁄g
)
fûe_pos64
.pos_in_zip_directory;

1333 
fûe_pos
->
num_of_fûe
 = (
uL⁄g
)
fûe_pos64
.num_of_file;

1335  
îr
;

1336 
	}
}

1338 
ZEXPORT
 
	$unzGoToFûePos64
(
unzFûe
 
fûe
, c⁄° 
unz64_fûe_pos
* 
fûe_pos
)

1340 
unz64_s
* 
s
;

1341 
îr
;

1343 i‡(
fûe
==
NULL
 || 
fûe_pos
==NULL)

1344  
UNZ_PARAMERROR
;

1345 
s
=(
unz64_s
*)
fûe
;

1348 
s
->
pos_ö_˚¡øl_dú
 = 
fûe_pos
->
pos_ö_zù_dúe˘‹y
;

1349 
s
->
num_fûe
 = 
fûe_pos
->
num_of_fûe
;

1352 
îr
 = 
	`unz64loˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

1353 &
s
->
cur_fûe_öfo_öã∫Æ
,

1354 
NULL
,0,NULL,0,NULL,0);

1356 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

1357  
îr
;

1358 
	}
}

1360 
ZEXPORT
 
	$unzGoToFûePos
(

1361 
unzFûe
 
fûe
,

1362 
unz_fûe_pos
* 
fûe_pos
)

1364 
unz64_fûe_pos
 
fûe_pos64
;

1365 i‡(
fûe_pos
 =
NULL
)

1366  
UNZ_PARAMERROR
;

1368 
fûe_pos64
.
pos_ö_zù_dúe˘‹y
 = 
fûe_pos
->pos_in_zip_directory;

1369 
fûe_pos64
.
num_of_fûe
 = 
fûe_pos
->num_of_file;

1370  
	`unzGoToFûePos64
(
fûe
,&
fûe_pos64
);

1371 
	}
}

1385 
loˇl
 
	$unz64loˇl_CheckCuºítFûeCohîícyHódî
 (
unz64_s
* 
s
, 
uI¡
* 
piSizeV¨
,

1386 
ZPOS64_T
 * 
poff£t_loˇl_exåafõld
,

1387 
uI¡
 * 
psize_loˇl_exåafõld
)

1389 
uL⁄g
 
uMagic
,
uD©a
,
uFœgs
;

1390 
uL⁄g
 
size_fûíame
;

1391 
uL⁄g
 
size_exåa_fõld
;

1392 
îr
=
UNZ_OK
;

1394 *
piSizeV¨
 = 0;

1395 *
poff£t_loˇl_exåafõld
 = 0;

1396 *
psize_loˇl_exåafõld
 = 0;

1398 i‡(
	`ZSEEK64
(
s
->
z_fûefunc
, s->
fûe°ªam
,s->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 +

1399 
s
->
byã_bef‹e_the_zùfûe
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1400  
UNZ_ERRNO
;

1403 i‡(
îr
==
UNZ_OK
)

1405 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uMagic
Ë!
UNZ_OK
)

1406 
îr
=
UNZ_ERRNO
;

1407 i‡(
uMagic
!=0x04034b50)

1408 
îr
=
UNZ_BADZIPFILE
;

1411 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1412 
îr
=
UNZ_ERRNO
;

1417 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uFœgs
Ë!
UNZ_OK
)

1418 
îr
=
UNZ_ERRNO
;

1420 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1421 
îr
=
UNZ_ERRNO
;

1422 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
))

1423 
îr
=
UNZ_BADZIPFILE
;

1425 i‡((
îr
==
UNZ_OK
Ë&& (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=0) &&

1427 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_BZIP2ED
) &&

1429 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_DEFLATED
))

1430 
îr
=
UNZ_BADZIPFILE
;

1432 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1433 
îr
=
UNZ_ERRNO
;

1435 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1436 
îr
=
UNZ_ERRNO
;

1437 i‡((
îr
==
UNZ_OK
Ë&& (
uD©a
!=
s
->
cur_fûe_öfo
.
¸c
Ë&& ((
uFœgs
 & 8)==0))

1438 
îr
=
UNZ_BADZIPFILE
;

1440 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1441 
îr
=
UNZ_ERRNO
;

1442 i‡(
uD©a
 !0xFFFFFFFF && (
îr
==
UNZ_OK
Ë&& (uD©a!=
s
->
cur_fûe_öfo
.
com¥es£d_size
Ë&& ((
uFœgs
 & 8)==0))

1443 
îr
=
UNZ_BADZIPFILE
;

1445 i‡(
	`unz64loˇl_gëL⁄g
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
uD©a
Ë!
UNZ_OK
)

1446 
îr
=
UNZ_ERRNO
;

1447 i‡(
uD©a
 !0xFFFFFFFF && (
îr
==
UNZ_OK
Ë&& (uD©a!=
s
->
cur_fûe_öfo
.
uncom¥es£d_size
Ë&& ((
uFœgs
 & 8)==0))

1448 
îr
=
UNZ_BADZIPFILE
;

1450 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
size_fûíame
Ë!
UNZ_OK
)

1451 
îr
=
UNZ_ERRNO
;

1452 i‡((
îr
==
UNZ_OK
Ë&& (
size_fûíame
!=
s
->
cur_fûe_öfo
.size_filename))

1453 
îr
=
UNZ_BADZIPFILE
;

1455 *
piSizeV¨
 +(
uI¡
)
size_fûíame
;

1457 i‡(
	`unz64loˇl_gëSh‹t
(&
s
->
z_fûefunc
, s->
fûe°ªam
,&
size_exåa_fõld
Ë!
UNZ_OK
)

1458 
îr
=
UNZ_ERRNO
;

1459 *
poff£t_loˇl_exåafõld

s
->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 +

1460 
SIZEZIPLOCALHEADER
 + 
size_fûíame
;

1461 *
psize_loˇl_exåafõld
 = (
uI¡
)
size_exåa_fõld
;

1463 *
piSizeV¨
 +(
uI¡
)
size_exåa_fõld
;

1465  
îr
;

1466 
	}
}

1472 
ZEXPORT
 
	$unzO≥nCuºítFûe3
 (
unzFûe
 
fûe
, * 
mëhod
,

1473 * 
Àvñ
, 
øw
, c⁄° * 
∑ssw‹d
)

1475 
îr
=
UNZ_OK
;

1476 
uI¡
 
iSizeV¨
;

1477 
unz64_s
* 
s
;

1478 
fûe_ö_zù64_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1479 
ZPOS64_T
 
off£t_loˇl_exåafõld
;

1480 
uI¡
 
size_loˇl_exåafõld
;

1481 #i‚de‡
NOUNCRYPT


1482 
sour˚
[12];

1484 i‡(
∑ssw‹d
 !
NULL
)

1485  
UNZ_PARAMERROR
;

1488 i‡(
fûe
==
NULL
)

1489  
UNZ_PARAMERROR
;

1490 
s
=(
unz64_s
*)
fûe
;

1491 i‡(!
s
->
cuºít_fûe_ok
)

1492  
UNZ_PARAMERROR
;

1494 i‡(
s
->
pfûe_ö_zù_ªad
 !
NULL
)

1495 
	`unzClo£CuºítFûe
(
fûe
);

1497 i‡(
	`unz64loˇl_CheckCuºítFûeCohîícyHódî
(
s
,&
iSizeV¨
, &
off£t_loˇl_exåafõld
,&
size_loˇl_exåafõld
)!=
UNZ_OK
)

1498  
UNZ_BADZIPFILE
;

1500 
pfûe_ö_zù_ªad_öfo
 = (
fûe_ö_zù64_ªad_öfo_s
*)
	`ALLOC
((file_in_zip64_read_info_s));

1501 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1502  
UNZ_INTERNALERROR
;

1504 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
=(*)
	`ALLOC
(
UNZ_BUFSIZE
);

1505 
pfûe_ö_zù_ªad_öfo
->
off£t_loˇl_exåafõld
 = offset_local_extrafield;

1506 
pfûe_ö_zù_ªad_öfo
->
size_loˇl_exåafõld
 = size_local_extrafield;

1507 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
=0;

1508 
pfûe_ö_zù_ªad_öfo
->
øw
=raw;

1510 i‡(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
==
NULL
)

1512 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

1513  
UNZ_INTERNALERROR
;

1516 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
=0;

1518 i‡(
mëhod
!=
NULL
)

1519 *
mëhod
 = ()
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
;

1521 i‡(
Àvñ
!=
NULL
)

1523 *
Àvñ
 = 6;

1524 
s
->
cur_fûe_öfo
.
Êag
 & 0x06)

1526 6 : *
Àvñ
 = 1; ;

1527 4 : *
Àvñ
 = 2; ;

1528 2 : *
Àvñ
 = 9; ;

1532 i‡((
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=0) &&

1534 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_BZIP2ED
) &&

1536 (
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
!=
Z_DEFLATED
))

1538 
îr
=
UNZ_BADZIPFILE
;

1540 
pfûe_ö_zù_ªad_öfo
->
¸c32_waô
=
s
->
cur_fûe_öfo
.
¸c
;

1541 
pfûe_ö_zù_ªad_öfo
->
¸c32
=0;

1542 
pfûe_ö_zù_ªad_öfo
->
tŸÆ_out_64
=0;

1543 
pfûe_ö_zù_ªad_öfo
->
com¥essi⁄_mëhod
 = 
s
->
cur_fûe_öfo
.compression_method;

1544 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
=
s
->filestream;

1545 
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
=
s
->z_filefunc;

1546 
pfûe_ö_zù_ªad_öfo
->
byã_bef‹e_the_zùfûe
=
s
->byte_before_the_zipfile;

1548 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
 = 0;

1550 i‡((
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
==
Z_BZIP2ED
Ë&& (!
øw
))

1552 #ifde‡
HAVE_BZIP2


1553 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
bzÆloc
 = (*(*) (*, , ))0;

1554 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
bz‰ì
 = (
‰ì_func
)0;

1555 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
›aque
 = (
voidpf
)0;

1556 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
°©e
 = (
voidpf
)0;

1558 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
zÆloc
 = (
Æloc_func
)0;

1559 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
z‰ì
 = (
‰ì_func
)0;

1560 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
›aque
 = (
voidpf
)0;

1561 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 = (
voidpf
)0;

1562 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = 0;

1564 
îr
=
	`BZ2_bzDecom¥essInô
(&
pfûe_ö_zù_ªad_öfo
->
b°ªam
, 0, 0);

1565 i‡(
îr
 =
Z_OK
)

1566 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
=
Z_BZIP2ED
;

1569 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

1570  
îr
;

1573 
pfûe_ö_zù_ªad_öfo
->
øw
=1;

1576 i‡((
s
->
cur_fûe_öfo
.
com¥essi⁄_mëhod
==
Z_DEFLATED
Ë&& (!
øw
))

1578 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
zÆloc
 = (
Æloc_func
)0;

1579 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
z‰ì
 = (
‰ì_func
)0;

1580 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
›aque
 = (
voidpf
)0;

1581 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 = 0;

1582 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = 0;

1584 
îr
=
	`öÊ©eInô2
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
, -
MAX_WBITS
);

1585 i‡(
îr
 =
Z_OK
)

1586 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
=
Z_DEFLATED
;

1589 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

1590  
îr
;

1600 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
 =

1601 
s
->
cur_fûe_öfo
.
com¥es£d_size
 ;

1602 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 =

1603 
s
->
cur_fûe_öfo
.
uncom¥es£d_size
 ;

1606 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 =

1607 
s
->
cur_fûe_öfo_öã∫Æ
.
off£t_curfûe
 + 
SIZEZIPLOCALHEADER
 +

1608 
iSizeV¨
;

1610 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = (
uI¡
)0;

1612 
s
->
pfûe_ö_zù_ªad
 = 
pfûe_ö_zù_ªad_öfo
;

1613 
s
->
í¸y±ed
 = 0;

1615 #i‚de‡
NOUNCRYPT


1616 i‡(
∑ssw‹d
 !
NULL
)

1618 
i
;

1619 
s
->
p¸c_32_èb
 = 
	`gë_¸c_èbÀ
();

1620 
	`öô_keys
(
∑ssw‹d
,
s
->
keys
,s->
p¸c_32_èb
);

1621 i‡(
	`ZSEEK64
(
s
->
z_fûefunc
, s->
fûe°ªam
,

1622 
s
->
pfûe_ö_zù_ªad
->
pos_ö_zùfûe
 +

1623 
s
->
pfûe_ö_zù_ªad
->
byã_bef‹e_the_zùfûe
,

1624 
SEEK_SET
)!=0)

1625  
UNZ_INTERNALERROR
;

1626 if(
	`ZREAD64
(
s
->
z_fûefunc
, s->
fûe°ªam
,
sour˚
, 12)<12)

1627  
UNZ_INTERNALERROR
;

1629 
i
 = 0; i<12; i++)

1630 
	`zdecode
(
s
->
keys
,s->
p¸c_32_èb
,
sour˚
[
i
]);

1632 
s
->
pfûe_ö_zù_ªad
->
pos_ö_zùfûe
+=12;

1633 
s
->
í¸y±ed
=1;

1638  
UNZ_OK
;

1639 
	}
}

1641 
ZEXPORT
 
	$unzO≥nCuºítFûe
 (
unzFûe
 
fûe
)

1643  
	`unzO≥nCuºítFûe3
(
fûe
, 
NULL
, NULL, 0, NULL);

1644 
	}
}

1646 
ZEXPORT
 
	$unzO≥nCuºítFûePassw‹d
 (
unzFûe
 
fûe
, c⁄° * 
∑ssw‹d
)

1648  
	`unzO≥nCuºítFûe3
(
fûe
, 
NULL
, NULL, 0, 
∑ssw‹d
);

1649 
	}
}

1651 
ZEXPORT
 
	$unzO≥nCuºítFûe2
 (
unzFûe
 
fûe
, * 
mëhod
, * 
Àvñ
, 
øw
)

1653  
	`unzO≥nCuºítFûe3
(
fûe
, 
mëhod
, 
Àvñ
, 
øw
, 
NULL
);

1654 
	}
}

1658 
ZPOS64_T
 
ZEXPORT
 
	$unzGëCuºítFûeZSåómPos64
–
unzFûe
 
fûe
)

1660 
unz64_s
* 
s
;

1661 
fûe_ö_zù64_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1662 
s
=(
unz64_s
*)
fûe
;

1663 i‡(
fûe
==
NULL
)

1665 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1666 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1668  
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 +

1669 
pfûe_ö_zù_ªad_öfo
->
byã_bef‹e_the_zùfûe
;

1670 
	}
}

1684 
ZEXPORT
 
	$unzRódCuºítFûe
 (
unzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
)

1686 
îr
=
UNZ_OK
;

1687 
uI¡
 
iRód
 = 0;

1688 
unz64_s
* 
s
;

1689 
fûe_ö_zù64_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1690 i‡(
fûe
==
NULL
)

1691  
UNZ_PARAMERROR
;

1692 
s
=(
unz64_s
*)
fûe
;

1693 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1695 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1696  
UNZ_PARAMERROR
;

1699 i‡(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
 =
NULL
)

1700  
UNZ_END_OF_LIST_OF_FILE
;

1701 i‡(
Àn
==0)

1704 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
 = (
Byãf
*)
buf
;

1706 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 = (
uI¡
)
Àn
;

1708 i‡((
Àn
>
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
) &&

1709 (!(
pfûe_ö_zù_ªad_öfo
->
øw
)))

1710 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 =

1711 (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
;

1713 i‡((
Àn
>
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
+

1714 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
) &&

1715 (
pfûe_ö_zù_ªad_öfo
->
øw
))

1716 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 =

1717 (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
+

1718 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
;

1720 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
>0)

1722 i‡((
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
==0) &&

1723 (
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
>0))

1725 
uI¡
 
uRódThis
 = 
UNZ_BUFSIZE
;

1726 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
<
uRódThis
)

1727 
uRódThis
 = (
uI¡
)
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
;

1728 i‡(
uRódThis
 == 0)

1729  
UNZ_EOF
;

1730 i‡(
	`ZSEEK64
(
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
,

1731 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
,

1732 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 +

1733 
pfûe_ö_zù_ªad_öfo
->
byã_bef‹e_the_zùfûe
,

1734 
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1735  
UNZ_ERRNO
;

1736 i‡(
	`ZREAD64
(
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
,

1737 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
,

1738 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
,

1739 
uRódThis
)!=uReadThis)

1740  
UNZ_ERRNO
;

1743 #i‚de‡
NOUNCRYPT


1744 if(
s
->
í¸y±ed
)

1746 
uI¡
 
i
;

1747 
i
=0;i<
uRódThis
;i++)

1748 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
[
i
] =

1749 
	`zdecode
(
s
->
keys
,s->
p¸c_32_èb
,

1750 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
[
i
]);

1755 
pfûe_ö_zù_ªad_öfo
->
pos_ö_zùfûe
 +
uRódThis
;

1757 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
-=
uRódThis
;

1759 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 =

1760 (
Byãf
*)
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
;

1761 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 = (
uI¡
)
uRódThis
;

1764 i‡((
pfûe_ö_zù_ªad_öfo
->
com¥essi⁄_mëhod
==0Ë|| (pfûe_ö_zù_ªad_öfo->
øw
))

1766 
uI¡
 
uDoC›y
,
i
 ;

1768 i‡((
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 == 0) &&

1769 (
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_com¥es£d
 == 0))

1770  (
iRód
==0Ë? 
UNZ_EOF
 : iRead;

1772 i‡(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 <

1773 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
)

1774 
uDoC›y
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 ;

1776 
uDoC›y
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 ;

1778 
i
=0;i<
uDoC›y
;i++)

1779 *(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
+
i
) =

1780 *(
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
+
i
);

1782 
pfûe_ö_zù_ªad_öfo
->
tŸÆ_out_64
 =Öfûe_ö_zù_ªad_öfo->tŸÆ_out_64 + 
uDoC›y
;

1784 
pfûe_ö_zù_ªad_öfo
->
¸c32
 = 
	`¸c32
(pfile_in_zip_read_info->crc32,

1785 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
,

1786 
uDoC›y
);

1787 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
-=
uDoC›y
;

1788 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 -
uDoC›y
;

1789 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 -
uDoC›y
;

1790 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
 +
uDoC›y
;

1791 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 +
uDoC›y
;

1792 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
 +
uDoC›y
;

1793 
iRód
 +
uDoC›y
;

1795 i‡(
pfûe_ö_zù_ªad_öfo
->
com¥essi⁄_mëhod
==
Z_BZIP2ED
)

1797 #ifde‡
HAVE_BZIP2


1798 
uL⁄g
 
uTŸÆOutBef‹e
,
uTŸÆOutA·î
;

1799 c⁄° 
Byãf
 *
bufBef‹e
;

1800 
uL⁄g
 
uOutThis
;

1802 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
√xt_ö
 = (*Ìfûe_ö_zù_ªad_öfo->
°ªam
.next_in;

1803 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
avaû_ö
 =Öfûe_ö_zù_ªad_öfo->
°ªam
.avail_in;

1804 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
tŸÆ_ö_lo32
 =Öfûe_ö_zù_ªad_öfo->
°ªam
.
tŸÆ_ö
;

1805 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
tŸÆ_ö_hi32
 = 0;

1806 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
√xt_out
 = (*Ìfûe_ö_zù_ªad_öfo->
°ªam
.next_out;

1807 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
avaû_out
 =Öfûe_ö_zù_ªad_öfo->
°ªam
.avail_out;

1808 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
tŸÆ_out_lo32
 =Öfûe_ö_zù_ªad_öfo->
°ªam
.
tŸÆ_out
;

1809 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
tŸÆ_out_hi32
 = 0;

1811 
uTŸÆOutBef‹e
 = 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
tŸÆ_out_lo32
;

1812 
bufBef‹e
 = (c⁄° 
Byãf
 *)
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
√xt_out
;

1814 
îr
=
	`BZ2_bzDecom¥ess
(&
pfûe_ö_zù_ªad_öfo
->
b°ªam
);

1816 
uTŸÆOutA·î
 = 
pfûe_ö_zù_ªad_öfo
->
b°ªam
.
tŸÆ_out_lo32
;

1817 
uOutThis
 = 
uTŸÆOutA·î
-
uTŸÆOutBef‹e
;

1819 
pfûe_ö_zù_ªad_öfo
->
tŸÆ_out_64
 =Öfûe_ö_zù_ªad_öfo->tŸÆ_out_64 + 
uOutThis
;

1821 
pfûe_ö_zù_ªad_öfo
->
¸c32
 = 
	`¸c32
’fûe_ö_zù_ªad_öfo->¸c32,
bufBef‹e
, (
uI¡
)(
uOutThis
));

1822 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 -
uOutThis
;

1823 
iRód
 +(
uI¡
)(
uTŸÆOutA·î
 - 
uTŸÆOutBef‹e
);

1825 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_ö
 = (
Byãf
*Ìfûe_ö_zù_ªad_öfo->
b°ªam
.next_in;

1826 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_ö
 =Öfûe_ö_zù_ªad_öfo->
b°ªam
.avail_in;

1827 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_ö
 =Öfûe_ö_zù_ªad_öfo->
b°ªam
.
tŸÆ_ö_lo32
;

1828 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
 = (
Byãf
*Ìfûe_ö_zù_ªad_öfo->
b°ªam
.next_out;

1829 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
avaû_out
 =Öfûe_ö_zù_ªad_öfo->
b°ªam
.avail_out;

1830 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
 =Öfûe_ö_zù_ªad_öfo->
b°ªam
.
tŸÆ_out_lo32
;

1832 i‡(
îr
==
BZ_STREAM_END
)

1833  (
iRód
==0Ë? 
UNZ_EOF
 : iRead;

1834 i‡(
îr
!=
BZ_OK
)

1840 
ZPOS64_T
 
uTŸÆOutBef‹e
,
uTŸÆOutA·î
;

1841 c⁄° 
Byãf
 *
bufBef‹e
;

1842 
ZPOS64_T
 
uOutThis
;

1843 
Êush
=
Z_SYNC_FLUSH
;

1845 
uTŸÆOutBef‹e
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1846 
bufBef‹e
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
√xt_out
;

1854 
îr
=
	`öÊ©e
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
,
Êush
);

1856 i‡((
îr
>=0Ë&& (
pfûe_ö_zù_ªad_öfo
->
°ªam
.
msg
!=
NULL
))

1857 
îr
 = 
Z_DATA_ERROR
;

1859 
uTŸÆOutA·î
 = 
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1860 
uOutThis
 = 
uTŸÆOutA·î
-
uTŸÆOutBef‹e
;

1862 
pfûe_ö_zù_ªad_öfo
->
tŸÆ_out_64
 =Öfûe_ö_zù_ªad_öfo->tŸÆ_out_64 + 
uOutThis
;

1864 
pfûe_ö_zù_ªad_öfo
->
¸c32
 =

1865 
	`¸c32
(
pfûe_ö_zù_ªad_öfo
->
¸c32
,
bufBef‹e
,

1866 (
uI¡
)(
uOutThis
));

1868 
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 -=

1869 
uOutThis
;

1871 
iRód
 +(
uI¡
)(
uTŸÆOutA·î
 - 
uTŸÆOutBef‹e
);

1873 i‡(
îr
==
Z_STREAM_END
)

1874  (
iRód
==0Ë? 
UNZ_EOF
 : iRead;

1875 i‡(
îr
!=
Z_OK
)

1880 i‡(
îr
==
Z_OK
)

1881  
iRód
;

1882  
îr
;

1883 
	}
}

1889 
z_off_t
 
ZEXPORT
 
	$unzãŒ
 (
unzFûe
 
fûe
)

1891 
unz64_s
* 
s
;

1892 
fûe_ö_zù64_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1893 i‡(
fûe
==
NULL
)

1894  
UNZ_PARAMERROR
;

1895 
s
=(
unz64_s
*)
fûe
;

1896 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1898 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1899  
UNZ_PARAMERROR
;

1901  (
z_off_t
)
pfûe_ö_zù_ªad_öfo
->
°ªam
.
tŸÆ_out
;

1902 
	}
}

1904 
ZPOS64_T
 
ZEXPORT
 
	$unzãŒ64
 (
unzFûe
 
fûe
)

1907 
unz64_s
* 
s
;

1908 
fûe_ö_zù64_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1909 i‡(
fûe
==
NULL
)

1910  (
ZPOS64_T
)-1;

1911 
s
=(
unz64_s
*)
fûe
;

1912 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1914 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1915  (
ZPOS64_T
)-1;

1917  
pfûe_ö_zù_ªad_öfo
->
tŸÆ_out_64
;

1918 
	}
}

1924 
ZEXPORT
 
	$unzeof
 (
unzFûe
 
fûe
)

1926 
unz64_s
* 
s
;

1927 
fûe_ö_zù64_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1928 i‡(
fûe
==
NULL
)

1929  
UNZ_PARAMERROR
;

1930 
s
=(
unz64_s
*)
fûe
;

1931 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1933 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1934  
UNZ_PARAMERROR
;

1936 i‡(
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 == 0)

1940 
	}
}

1956 
ZEXPORT
 
	$unzGëLoˇlExåafõld
 (
unzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
)

1958 
unz64_s
* 
s
;

1959 
fûe_ö_zù64_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

1960 
uI¡
 
ªad_now
;

1961 
ZPOS64_T
 
size_to_ªad
;

1963 i‡(
fûe
==
NULL
)

1964  
UNZ_PARAMERROR
;

1965 
s
=(
unz64_s
*)
fûe
;

1966 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

1968 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

1969  
UNZ_PARAMERROR
;

1971 
size_to_ªad
 = (
pfûe_ö_zù_ªad_öfo
->
size_loˇl_exåafõld
 -

1972 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
);

1974 i‡(
buf
==
NULL
)

1975  ()
size_to_ªad
;

1977 i‡(
Àn
>
size_to_ªad
)

1978 
ªad_now
 = (
uI¡
)
size_to_ªad
;

1980 
ªad_now
 = (
uI¡
)
Àn
 ;

1982 i‡(
ªad_now
==0)

1985 i‡(
	`ZSEEK64
(
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
,

1986 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
,

1987 
pfûe_ö_zù_ªad_öfo
->
off£t_loˇl_exåafõld
 +

1988 
pfûe_ö_zù_ªad_öfo
->
pos_loˇl_exåafõld
,

1989 
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1990  
UNZ_ERRNO
;

1992 i‡(
	`ZREAD64
(
pfûe_ö_zù_ªad_öfo
->
z_fûefunc
,

1993 
pfûe_ö_zù_ªad_öfo
->
fûe°ªam
,

1994 
buf
,
ªad_now
)!=read_now)

1995  
UNZ_ERRNO
;

1997  ()
ªad_now
;

1998 
	}
}

2004 
ZEXPORT
 
	$unzClo£CuºítFûe
 (
unzFûe
 
fûe
)

2006 
îr
=
UNZ_OK
;

2008 
unz64_s
* 
s
;

2009 
fûe_ö_zù64_ªad_öfo_s
* 
pfûe_ö_zù_ªad_öfo
;

2010 i‡(
fûe
==
NULL
)

2011  
UNZ_PARAMERROR
;

2012 
s
=(
unz64_s
*)
fûe
;

2013 
pfûe_ö_zù_ªad_öfo
=
s
->
pfûe_ö_zù_ªad
;

2015 i‡(
pfûe_ö_zù_ªad_öfo
==
NULL
)

2016  
UNZ_PARAMERROR
;

2019 i‡((
pfûe_ö_zù_ªad_öfo
->
ª°_ªad_uncom¥es£d
 == 0) &&

2020 (!
pfûe_ö_zù_ªad_öfo
->
øw
))

2022 i‡(
pfûe_ö_zù_ªad_öfo
->
¸c32
 !pfûe_ö_zù_ªad_öfo->
¸c32_waô
)

2023 
îr
=
UNZ_CRCERROR
;

2027 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
);

2028 
pfûe_ö_zù_ªad_öfo
->
ªad_buf„r
 = 
NULL
;

2029 i‡(
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
 =
Z_DEFLATED
)

2030 
	`öÊ©eEnd
(&
pfûe_ö_zù_ªad_öfo
->
°ªam
);

2031 #ifde‡
HAVE_BZIP2


2032 i‡(
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
 =
Z_BZIP2ED
)

2033 
	`BZ2_bzDecom¥essEnd
(&
pfûe_ö_zù_ªad_öfo
->
b°ªam
);

2037 
pfûe_ö_zù_ªad_öfo
->
°ªam_öôüli£d
 = 0;

2038 
	`TRYFREE
(
pfûe_ö_zù_ªad_öfo
);

2040 
s
->
pfûe_ö_zù_ªad
=
NULL
;

2042  
îr
;

2043 
	}
}

2051 
ZEXPORT
 
	$unzGëGlobÆCommít
 (
unzFûe
 
fûe
, * 
szCommít
, 
uL⁄g
 
uSizeBuf
)

2053 
unz64_s
* 
s
;

2054 
uL⁄g
 
uRódThis
 ;

2055 i‡(
fûe
==
NULL
)

2056  ()
UNZ_PARAMERROR
;

2057 
s
=(
unz64_s
*)
fûe
;

2059 
uRódThis
 = 
uSizeBuf
;

2060 i‡(
uRódThis
>
s
->
gi
.
size_commít
)

2061 
uRódThis
 = 
s
->
gi
.
size_commít
;

2063 i‡(
	`ZSEEK64
(
s
->
z_fûefunc
,s->
fûe°ªam
,s->
˚¡øl_pos
+22,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

2064  
UNZ_ERRNO
;

2066 i‡(
uRódThis
>0)

2068 *
szCommít
='\0';

2069 i‡(
	`ZREAD64
(
s
->
z_fûefunc
,s->
fûe°ªam
,
szCommít
,
uRódThis
)!=uReadThis)

2070  
UNZ_ERRNO
;

2073 i‡((
szCommít
 !
NULL
Ë&& (
uSizeBuf
 > 
s
->
gi
.
size_commít
))

2074 *(
szCommít
+
s
->
gi
.
size_commít
)='\0';

2075  ()
uRódThis
;

2076 
	}
}

2079 
ZPOS64_T
 
ZEXPORT
 
	$unzGëOff£t64
(
unzFûe
 
fûe
)

2081 
unz64_s
* 
s
;

2083 i‡(
fûe
==
NULL
)

2085 
s
=(
unz64_s
*)
fûe
;

2086 i‡(!
s
->
cuºít_fûe_ok
)

2088 i‡(
s
->
gi
.
numbî_íåy
 != 0 && s->gi.number_entry != 0xffff)

2089 i‡(
s
->
num_fûe
==s->
gi
.
numbî_íåy
)

2091  
s
->
pos_ö_˚¡øl_dú
;

2092 
	}
}

2094 
uL⁄g
 
ZEXPORT
 
	$unzGëOff£t
 (
unzFûe
 
fûe
)

2096 
ZPOS64_T
 
off£t64
;

2098 i‡(
fûe
==
NULL
)

2100 
off£t64
 = 
	`unzGëOff£t64
(
fûe
);

2101  (
uL⁄g
)
off£t64
;

2102 
	}
}

2104 
ZEXPORT
 
	$unzSëOff£t64
(
unzFûe
 
fûe
, 
ZPOS64_T
 
pos
)

2106 
unz64_s
* 
s
;

2107 
îr
;

2109 i‡(
fûe
==
NULL
)

2110  
UNZ_PARAMERROR
;

2111 
s
=(
unz64_s
*)
fûe
;

2113 
s
->
pos_ö_˚¡øl_dú
 = 
pos
;

2114 
s
->
num_fûe
 = s->
gi
.
numbî_íåy
;

2115 
îr
 = 
	`unz64loˇl_GëCuºítFûeInfoI¡î«l
(
fûe
,&
s
->
cur_fûe_öfo
,

2116 &
s
->
cur_fûe_öfo_öã∫Æ
,

2117 
NULL
,0,NULL,0,NULL,0);

2118 
s
->
cuºít_fûe_ok
 = (
îr
 =
UNZ_OK
);

2119  
îr
;

2120 
	}
}

2122 
ZEXPORT
 
	$unzSëOff£t
 (
unzFûe
 
fûe
, 
uL⁄g
 
pos
)

2124  
	`unzSëOff£t64
(
fûe
,
pos
);

2125 
	}
}

	@zlib-1.2.8/contrib/minizip/unzip.h

43 #i‚de‡
_unz64_H


44 
	#_unz64_H


	)

46 #ifde‡
__˝lu•lus


50 #i‚de‡
_ZLIB_H


51 
	~"zlib.h
"

54 #i‚de‡ 
_ZLIBIOAPI_H


55 
	~"iﬂpi.h
"

58 #ifde‡
HAVE_BZIP2


59 
	~"bzlib.h
"

62 
	#Z_BZIP2ED
 12

	)

64 #i‡
deföed
(
STRICTUNZIP
Ë|| deföed(
STRICTZIPUNZIP
)

67 
	sTagunzFûe__
 { 
unu£d
; } 
	tunzFûe__
;

68 
unzFûe__
 *
	tunzFûe
;

70 
voidp
 
	tunzFûe
;

74 
	#UNZ_OK
 (0)

	)

75 
	#UNZ_END_OF_LIST_OF_FILE
 (-100)

	)

76 
	#UNZ_ERRNO
 (
Z_ERRNO
)

	)

77 
	#UNZ_EOF
 (0)

	)

78 
	#UNZ_PARAMERROR
 (-102)

	)

79 
	#UNZ_BADZIPFILE
 (-103)

	)

80 
	#UNZ_INTERNALERROR
 (-104)

	)

81 
	#UNZ_CRCERROR
 (-105)

	)

84 
	stm_unz_s


86 
uI¡
 
tm_£c
;

87 
uI¡
 
tm_mö
;

88 
uI¡
 
tm_hour
;

89 
uI¡
 
tm_mday
;

90 
uI¡
 
tm_m⁄
;

91 
uI¡
 
tm_yór
;

92 } 
	ttm_unz
;

96 
	sunz_globÆ_öfo64_s


98 
ZPOS64_T
 
numbî_íåy
;

100 
uL⁄g
 
size_commít
;

101 } 
	tunz_globÆ_öfo64
;

103 
	sunz_globÆ_öfo_s


105 
uL⁄g
 
numbî_íåy
;

107 
uL⁄g
 
size_commít
;

108 } 
	tunz_globÆ_öfo
;

111 
	sunz_fûe_öfo64_s


113 
uL⁄g
 
vîsi⁄
;

114 
uL⁄g
 
vîsi⁄_√eded
;

115 
uL⁄g
 
Êag
;

116 
uL⁄g
 
com¥essi⁄_mëhod
;

117 
uL⁄g
 
dosD©e
;

118 
uL⁄g
 
¸c
;

119 
ZPOS64_T
 
com¥es£d_size
;

120 
ZPOS64_T
 
uncom¥es£d_size
;

121 
uL⁄g
 
size_fûíame
;

122 
uL⁄g
 
size_fûe_exåa
;

123 
uL⁄g
 
size_fûe_commít
;

125 
uL⁄g
 
disk_num_°¨t
;

126 
uL⁄g
 
öã∫Æ_Á
;

127 
uL⁄g
 
exã∫Æ_Á
;

129 
tm_unz
 
tmu_d©e
;

130 } 
	tunz_fûe_öfo64
;

132 
	sunz_fûe_öfo_s


134 
uL⁄g
 
vîsi⁄
;

135 
uL⁄g
 
vîsi⁄_√eded
;

136 
uL⁄g
 
Êag
;

137 
uL⁄g
 
com¥essi⁄_mëhod
;

138 
uL⁄g
 
dosD©e
;

139 
uL⁄g
 
¸c
;

140 
uL⁄g
 
com¥es£d_size
;

141 
uL⁄g
 
uncom¥es£d_size
;

142 
uL⁄g
 
size_fûíame
;

143 
uL⁄g
 
size_fûe_exåa
;

144 
uL⁄g
 
size_fûe_commít
;

146 
uL⁄g
 
disk_num_°¨t
;

147 
uL⁄g
 
öã∫Æ_Á
;

148 
uL⁄g
 
exã∫Æ_Á
;

150 
tm_unz
 
tmu_d©e
;

151 } 
	tunz_fûe_öfo
;

153 
ZEXPORT
 
unzSåögFûeNameCom∑ª
 
OF
 ((c⁄° * 
fûeName1
,

154 c⁄° * 
fûeName2
,

155 
iCa£Sísôivôy
));

166 
unzFûe
 
ZEXPORT
 
unzO≥n
 
OF
((c⁄° *
∑th
));

167 
unzFûe
 
ZEXPORT
 
unzO≥n64
 
OF
((c⁄° *
∑th
));

184 
unzFûe
 
ZEXPORT
 
unzO≥n2
 
OF
((c⁄° *
∑th
,

185 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
));

191 
unzFûe
 
ZEXPORT
 
unzO≥n2_64
 
OF
((c⁄° *
∑th
,

192 
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
));

198 
ZEXPORT
 
unzClo£
 
OF
((
unzFûe
 
fûe
));

205 
ZEXPORT
 
unzGëGlobÆInfo
 
OF
((
unzFûe
 
fûe
,

206 
unz_globÆ_öfo
 *
pglobÆ_öfo
));

208 
ZEXPORT
 
unzGëGlobÆInfo64
 
OF
((
unzFûe
 
fûe
,

209 
unz_globÆ_öfo64
 *
pglobÆ_öfo
));

216 
ZEXPORT
 
unzGëGlobÆCommít
 
OF
((
unzFûe
 
fûe
,

217 *
szCommít
,

218 
uL⁄g
 
uSizeBuf
));

229 
ZEXPORT
 
unzGoToFú°Fûe
 
OF
((
unzFûe
 
fûe
));

235 
ZEXPORT
 
unzGoToNextFûe
 
OF
((
unzFûe
 
fûe
));

242 
ZEXPORT
 
unzLoˇãFûe
 
OF
((
unzFûe
 
fûe
,

243 c⁄° *
szFûeName
,

244 
iCa£Sísôivôy
));

258 
	sunz_fûe_pos_s


260 
uL⁄g
 
	gpos_ö_zù_dúe˘‹y
;

261 
uL⁄g
 
	gnum_of_fûe
;

262 } 
	tunz_fûe_pos
;

264 
ZEXPORT
 
unzGëFûePos
(

265 
unzFûe
 
fûe
,

266 
unz_fûe_pos
* 
fûe_pos
);

268 
ZEXPORT
 
unzGoToFûePos
(

269 
unzFûe
 
fûe
,

270 
unz_fûe_pos
* 
fûe_pos
);

272 
	sunz64_fûe_pos_s


274 
ZPOS64_T
 
	gpos_ö_zù_dúe˘‹y
;

275 
ZPOS64_T
 
	gnum_of_fûe
;

276 } 
	tunz64_fûe_pos
;

278 
ZEXPORT
 
unzGëFûePos64
(

279 
unzFûe
 
fûe
,

280 
unz64_fûe_pos
* 
fûe_pos
);

282 
ZEXPORT
 
unzGoToFûePos64
(

283 
unzFûe
 
fûe
,

284 c⁄° 
unz64_fûe_pos
* 
fûe_pos
);

288 
ZEXPORT
 
unzGëCuºítFûeInfo64
 
OF
((
unzFûe
 
fûe
,

289 
unz_fûe_öfo64
 *
pfûe_öfo
,

290 *
szFûeName
,

291 
uL⁄g
 
fûeNameBuf„rSize
,

292 *
exåaFõld
,

293 
uL⁄g
 
exåaFõldBuf„rSize
,

294 *
szCommít
,

295 
uL⁄g
 
commítBuf„rSize
));

297 
ZEXPORT
 
unzGëCuºítFûeInfo
 
OF
((
unzFûe
 
fûe
,

298 
unz_fûe_öfo
 *
pfûe_öfo
,

299 *
szFûeName
,

300 
uL⁄g
 
fûeNameBuf„rSize
,

301 *
exåaFõld
,

302 
uL⁄g
 
exåaFõldBuf„rSize
,

303 *
szCommít
,

304 
uL⁄g
 
commítBuf„rSize
));

321 
ZPOS64_T
 
ZEXPORT
 
unzGëCuºítFûeZSåómPos64
 
OF
((
unzFûe
 
fûe
));

331 
ZEXPORT
 
unzO≥nCuºítFûe
 
OF
((
unzFûe
 
fûe
));

337 
ZEXPORT
 
unzO≥nCuºítFûePassw‹d
 
OF
((
unzFûe
 
fûe
,

338 c⁄° * 
∑ssw‹d
));

345 
ZEXPORT
 
unzO≥nCuºítFûe2
 
OF
((
unzFûe
 
fûe
,

346 * 
mëhod
,

347 * 
Àvñ
,

348 
øw
));

358 
ZEXPORT
 
unzO≥nCuºítFûe3
 
OF
((
unzFûe
 
fûe
,

359 * 
mëhod
,

360 * 
Àvñ
,

361 
øw
,

362 c⁄° * 
∑ssw‹d
));

373 
ZEXPORT
 
unzClo£CuºítFûe
 
OF
((
unzFûe
 
fûe
));

379 
ZEXPORT
 
unzRódCuºítFûe
 
OF
((
unzFûe
 
fûe
,

380 
voidp
 
buf
,

381 
Àn
));

393 
z_off_t
 
ZEXPORT
 
unzãŒ
 
OF
((
unzFûe
 
fûe
));

395 
ZPOS64_T
 
ZEXPORT
 
unzãŒ64
 
OF
((
unzFûe
 
fûe
));

400 
ZEXPORT
 
unzeof
 
OF
((
unzFûe
 
fûe
));

405 
ZEXPORT
 
unzGëLoˇlExåafõld
 
OF
((
unzFûe
 
fûe
,

406 
voidp
 
buf
,

407 
Àn
));

424 
ZPOS64_T
 
ZEXPORT
 
unzGëOff£t64
 (
unzFûe
 
fûe
);

425 
uL⁄g
 
ZEXPORT
 
unzGëOff£t
 (
unzFûe
 
fûe
);

428 
ZEXPORT
 
unzSëOff£t64
 (
unzFûe
 
fûe
, 
ZPOS64_T
 
pos
);

429 
ZEXPORT
 
unzSëOff£t
 (
unzFûe
 
fûe
, 
uL⁄g
 
pos
);

433 #ifde‡
__˝lu•lus


	@zlib-1.2.8/contrib/minizip/zip.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

28 
	~<time.h
>

29 
	~"zlib.h
"

30 
	~"zù.h
"

32 #ifde‡
STDC


33 
	~<°ddef.h
>

34 
	~<°rög.h
>

35 
	~<°dlib.h
>

37 #ifde‡
NO_ERRNO_H


38 
î∫o
;

40 
	~<î∫o.h
>

44 #i‚de‡
loˇl


45 
	#loˇl
 

	)

49 #i‚de‡
VERSIONMADEBY


50 
	#VERSIONMADEBY
 (0x0Ë

	)

53 #i‚de‡
Z_BUFSIZE


54 
	#Z_BUFSIZE
 (64*1024)

56 

	)

57 #i‚de‡
Z_MAXFILENAMEINZIP


58 
	#Z_MAXFILENAMEINZIP
 (256)

	)

61 #i‚de‡
ALLOC


62 
	#ALLOC
(
size
Ë(
	`mÆloc
(size))

	)

64 #i‚de‡
TRYFREE


65 
	#TRYFREE
(
p
Ë{i‡’Ë
	`‰ì
’);}

	)

77 
	#MAKEULONG64
(
a
, 
b
Ë((
ZPOS64_T
)((()◊)Ë| ((ZPOS64_T)(()(b))Ë<< 32))

	)

79 #i‚de‡
SEEK_CUR


80 
	#SEEK_CUR
 1

	)

83 #i‚de‡
SEEK_END


84 
	#SEEK_END
 2

	)

87 #i‚de‡
SEEK_SET


88 
	#SEEK_SET
 0

	)

91 #i‚de‡
DEF_MEM_LEVEL


92 #i‡
MAX_MEM_LEVEL
 >= 8

93 
	#DEF_MEM_LEVEL
 8

	)

95 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

98 c⁄° 
	gzù_c›yright
[] =" zip 1.01 Copyright 1998-2004 Gilles Vollant - http://www.winimage.com/zLibDll";

101 
	#SIZEDATA_INDATABLOCK
 (4096-(4*4))

	)

103 
	#LOCALHEADERMAGIC
 (0x04034b50)

	)

104 
	#CENTRALHEADERMAGIC
 (0x02014b50)

	)

105 
	#ENDHEADERMAGIC
 (0x06054b50)

	)

106 
	#ZIP64ENDHEADERMAGIC
 (0x6064b50)

	)

107 
	#ZIP64ENDLOCHEADERMAGIC
 (0x7064b50)

	)

109 
	#FLAG_LOCALHEADER_OFFSET
 (0x06)

	)

110 
	#CRC_LOCALHEADER_OFFSET
 (0x0e)

	)

112 
	#SIZECENTRALHEADER
 (0x2eË

	)

114 
	slökedli°_d©ablock_öã∫Æ_s


116 
lökedli°_d©ablock_öã∫Æ_s
* 
	m√xt_d©ablock
;

117 
uL⁄g
 
	mavaû_ö_this_block
;

118 
uL⁄g
 
	mfûÀd_ö_this_block
;

119 
uL⁄g
 
	munu£d
;

120 
	md©a
[
SIZEDATA_INDATABLOCK
];

121 } 
	tlökedli°_d©ablock_öã∫Æ
;

123 
	slökedli°_d©a_s


125 
lökedli°_d©ablock_öã∫Æ
* 
	mfú°_block
;

126 
lökedli°_d©ablock_öã∫Æ
* 
	mœ°_block
;

127 } 
	tlökedli°_d©a
;

132 
z_°ªam
 
	m°ªam
;

133 #ifde‡
HAVE_BZIP2


134 
bz_°ªam
 
	mb°ªam
;

137 
	m°ªam_öôüli£d
;

138 
uI¡
 
	mpos_ö_buf„ªd_d©a
;

140 
ZPOS64_T
 
	mpos_loˇl_hódî
;

142 * 
	m˚¡øl_hódî
;

143 
uL⁄g
 
	msize_˚¡ølExåa
;

144 
uL⁄g
 
	msize_˚¡ølhódî
;

145 
uL⁄g
 
	msize_˚¡ølExåaFªe
;

146 
uL⁄g
 
	mÊag
;

148 
	mmëhod
;

149 
	møw
;

150 
Byã
 
	mbuf„ªd_d©a
[
Z_BUFSIZE
];

151 
uL⁄g
 
	mdosD©e
;

152 
uL⁄g
 
	m¸c32
;

153 
	mí¸y±
;

154 
	mzù64
;

155 
ZPOS64_T
 
	mpos_zù64exåaöfo
;

156 
ZPOS64_T
 
	mtŸÆCom¥es£dD©a
;

157 
ZPOS64_T
 
	mtŸÆUncom¥es£dD©a
;

158 #i‚de‡
NOCRYPT


159 
	mkeys
[3];

160 c⁄° 
z_¸c_t
* 
	mp¸c_32_èb
;

161 
	m¸y±_hódî_size
;

163 } 
	tcurfûe64_öfo
;

167 
zlib_fûefunc64_32_def
 
	mz_fûefunc
;

168 
voidpf
 
	mfûe°ªam
;

169 
lökedli°_d©a
 
	m˚¡øl_dú
;

170 
	mö_›íed_fûe_özù
;

171 
curfûe64_öfo
 
	mci
;

173 
ZPOS64_T
 
	mbegö_pos
;

174 
ZPOS64_T
 
	madd_posôi⁄_whí_wrôtög_off£t
;

175 
ZPOS64_T
 
	mnumbî_íåy
;

177 #i‚de‡
NO_ADDFILEINEXISTINGZIP


178 *
	mglobÆcommít
;

181 } 
	tzù64_öã∫Æ
;

184 #i‚de‡
NOCRYPT


185 
	#INCLUDECRYPTINGCODE_IFCRYPTALLOWED


	)

186 
	~"¸y±.h
"

189 
loˇl
 
lökedli°_d©ablock_öã∫Æ
* 
	$Æloˇã_√w_d©ablock
()

191 
lökedli°_d©ablock_öã∫Æ
* 
ldi
;

192 
ldi
 = (
lökedli°_d©ablock_öã∫Æ
*)

193 
	`ALLOC
((
lökedli°_d©ablock_öã∫Æ
));

194 i‡(
ldi
!=
NULL
)

196 
ldi
->
√xt_d©ablock
 = 
NULL
 ;

197 
ldi
->
fûÀd_ö_this_block
 = 0 ;

198 
ldi
->
avaû_ö_this_block
 = 
SIZEDATA_INDATABLOCK
 ;

200  
ldi
;

201 
	}
}

203 
loˇl
 
	$‰ì_d©ablock
(
lökedli°_d©ablock_öã∫Æ
* 
ldi
)

205 
ldi
!=
NULL
)

207 
lökedli°_d©ablock_öã∫Æ
* 
ldöext
 = 
ldi
->
√xt_d©ablock
;

208 
	`TRYFREE
(
ldi
);

209 
ldi
 = 
ldöext
;

211 
	}
}

213 
loˇl
 
	$öô_lökedli°
(
lökedli°_d©a
* 
Œ
)

215 
Œ
->
fú°_block
 =Ül->
œ°_block
 = 
NULL
;

216 
	}
}

218 
loˇl
 
	$‰ì_lökedli°
(
lökedli°_d©a
* 
Œ
)

220 
	`‰ì_d©ablock
(
Œ
->
fú°_block
);

221 
Œ
->
fú°_block
 =Ül->
œ°_block
 = 
NULL
;

222 
	}
}

225 
loˇl
 
	$add_d©a_ö_d©ablock
(
lökedli°_d©a
* 
Œ
, c⁄° * 
buf
, 
uL⁄g
 
Àn
)

227 
lökedli°_d©ablock_öã∫Æ
* 
ldi
;

228 c⁄° * 
‰om_c›y
;

230 i‡(
Œ
==
NULL
)

231  
ZIP_INTERNALERROR
;

233 i‡(
Œ
->
œ°_block
 =
NULL
)

235 
Œ
->
fú°_block
 =Ül->
œ°_block
 = 
	`Æloˇã_√w_d©ablock
();

236 i‡(
Œ
->
fú°_block
 =
NULL
)

237  
ZIP_INTERNALERROR
;

240 
ldi
 = 
Œ
->
œ°_block
;

241 
‰om_c›y
 = (*)
buf
;

243 
Àn
>0)

245 
uI¡
 
c›y_this
;

246 
uI¡
 
i
;

247 * 
to_c›y
;

249 i‡(
ldi
->
avaû_ö_this_block
==0)

251 
ldi
->
√xt_d©ablock
 = 
	`Æloˇã_√w_d©ablock
();

252 i‡(
ldi
->
√xt_d©ablock
 =
NULL
)

253  
ZIP_INTERNALERROR
;

254 
ldi
 =Üdi->
√xt_d©ablock
 ;

255 
Œ
->
œ°_block
 = 
ldi
;

258 i‡(
ldi
->
avaû_ö_this_block
 < 
Àn
)

259 
c›y_this
 = (
uI¡
)
ldi
->
avaû_ö_this_block
;

261 
c›y_this
 = (
uI¡
)
Àn
;

263 
to_c›y
 = &(
ldi
->
d©a
[ldi->
fûÀd_ö_this_block
]);

265 
i
=0;i<
c›y_this
;i++)

266 *(
to_c›y
+
i
)=*(
‰om_c›y
+i);

268 
ldi
->
fûÀd_ö_this_block
 +
c›y_this
;

269 
ldi
->
avaû_ö_this_block
 -
c›y_this
;

270 
‰om_c›y
 +
c›y_this
 ;

271 
Àn
 -
c›y_this
;

273  
ZIP_OK
;

274 
	}
}

280 #i‚de‡
NO_ADDFILEINEXISTINGZIP


286 
loˇl
 
zù64loˇl_putVÆue
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, 
ZPOS64_T
 
x
, 
nbByã
));

287 
loˇl
 
	$zù64loˇl_putVÆue
 (c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, 
ZPOS64_T
 
x
, 
nbByã
)

289 
buf
[8];

290 
n
;

291 
n
 = 0;Ç < 
nbByã
;Ç++)

293 
buf
[
n
] = ()(
x
 & 0xff);

294 
x
 >>= 8;

296 i‡(
x
 != 0)

298 
n
 = 0;Ç < 
nbByã
;Ç++)

300 
buf
[
n
] = 0xff;

304 i‡(
	`ZWRITE64
(*
pzlib_fûefunc_def
,
fûe°ªam
,
buf
,
nbByã
)!=(
uL⁄g
)nbByte)

305  
ZIP_ERRNO
;

307  
ZIP_OK
;

308 
	}
}

310 
loˇl
 
zù64loˇl_putVÆue_ömem‹y
 
OF
((* 
de°
, 
ZPOS64_T
 
x
, 
nbByã
));

311 
loˇl
 
	$zù64loˇl_putVÆue_ömem‹y
 (* 
de°
, 
ZPOS64_T
 
x
, 
nbByã
)

313 * 
buf
=(*)
de°
;

314 
n
;

315 
n
 = 0;Ç < 
nbByã
;Ç++) {

316 
buf
[
n
] = ()(
x
 & 0xff);

317 
x
 >>= 8;

320 i‡(
x
 != 0)

322 
n
 = 0;Ç < 
nbByã
;Ç++)

324 
buf
[
n
] = 0xff;

327 
	}
}

332 
loˇl
 
uL⁄g
 
	$zù64loˇl_TmzD©eToDosD©e
(c⁄° 
tm_zù
* 
±m
)

334 
uL⁄g
 
yór
 = (uL⁄g)
±m
->
tm_yór
;

335 i‡(
yór
>=1980)

336 
yór
-=1980;

337 i‡(
yór
>=80)

338 
yór
-=80;

340 (
uL⁄g
Ë(((
±m
->
tm_mday
Ë+ (32 * (±m->
tm_m⁄
+1)Ë+ (512 * 
yór
)) << 16) |

341 ((
±m
->
tm_£c
/2Ë+ (32*Ötm->
tm_mö
Ë+ (2048 * (
uL⁄g
Ìtm->
tm_hour
));

342 
	}
}

347 
loˇl
 
zù64loˇl_gëByã
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, *
pi
));

349 
loˇl
 
	$zù64loˇl_gëByã
(c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
,
voidpf
 
fûe°ªam
,* 
pi
)

351 
c
;

352 
îr
 = ()
	`ZREAD64
(*
pzlib_fûefunc_def
,
fûe°ªam
,&
c
,1);

353 i‡(
îr
==1)

355 *
pi
 = ()
c
;

356  
ZIP_OK
;

360 i‡(
	`ZERROR64
(*
pzlib_fûefunc_def
,
fûe°ªam
))

361  
ZIP_ERRNO
;

363  
ZIP_EOF
;

365 
	}
}

371 
loˇl
 
zù64loˇl_gëSh‹t
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, 
uL⁄g
 *
pX
));

373 
loˇl
 
	$zù64loˇl_gëSh‹t
 (c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, 
uL⁄g
* 
pX
)

375 
uL⁄g
 
x
 ;

376 
i
 = 0;

377 
îr
;

379 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

380 
x
 = (
uL⁄g
)
i
;

382 i‡(
îr
==
ZIP_OK
)

383 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

384 
x
 +((
uL⁄g
)
i
)<<8;

386 i‡(
îr
==
ZIP_OK
)

387 *
pX
 = 
x
;

389 *
pX
 = 0;

390  
îr
;

391 
	}
}

393 
loˇl
 
zù64loˇl_gëL⁄g
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, 
uL⁄g
 *
pX
));

395 
loˇl
 
	$zù64loˇl_gëL⁄g
 (c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, 
uL⁄g
* 
pX
)

397 
uL⁄g
 
x
 ;

398 
i
 = 0;

399 
îr
;

401 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

402 
x
 = (
uL⁄g
)
i
;

404 i‡(
îr
==
ZIP_OK
)

405 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

406 
x
 +((
uL⁄g
)
i
)<<8;

408 i‡(
îr
==
ZIP_OK
)

409 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

410 
x
 +((
uL⁄g
)
i
)<<16;

412 i‡(
îr
==
ZIP_OK
)

413 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

414 
x
 +((
uL⁄g
)
i
)<<24;

416 i‡(
îr
==
ZIP_OK
)

417 *
pX
 = 
x
;

419 *
pX
 = 0;

420  
îr
;

421 
	}
}

423 
loˇl
 
zù64loˇl_gëL⁄g64
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, 
ZPOS64_T
 *
pX
));

426 
loˇl
 
	$zù64loˇl_gëL⁄g64
 (c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
, 
ZPOS64_T
 *
pX
)

428 
ZPOS64_T
 
x
;

429 
i
 = 0;

430 
îr
;

432 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

433 
x
 = (
ZPOS64_T
)
i
;

435 i‡(
îr
==
ZIP_OK
)

436 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

437 
x
 +((
ZPOS64_T
)
i
)<<8;

439 i‡(
îr
==
ZIP_OK
)

440 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

441 
x
 +((
ZPOS64_T
)
i
)<<16;

443 i‡(
îr
==
ZIP_OK
)

444 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

445 
x
 +((
ZPOS64_T
)
i
)<<24;

447 i‡(
îr
==
ZIP_OK
)

448 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

449 
x
 +((
ZPOS64_T
)
i
)<<32;

451 i‡(
îr
==
ZIP_OK
)

452 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

453 
x
 +((
ZPOS64_T
)
i
)<<40;

455 i‡(
îr
==
ZIP_OK
)

456 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

457 
x
 +((
ZPOS64_T
)
i
)<<48;

459 i‡(
îr
==
ZIP_OK
)

460 
îr
 = 
	`zù64loˇl_gëByã
(
pzlib_fûefunc_def
,
fûe°ªam
,&
i
);

461 
x
 +((
ZPOS64_T
)
i
)<<56;

463 i‡(
îr
==
ZIP_OK
)

464 *
pX
 = 
x
;

466 *
pX
 = 0;

468  
îr
;

469 
	}
}

471 #i‚de‡
BUFREADCOMMENT


472 
	#BUFREADCOMMENT
 (0x400)

	)

478 
loˇl
 
ZPOS64_T
 
zù64loˇl_SórchCíåÆDú
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
));

480 
loˇl
 
ZPOS64_T
 
	$zù64loˇl_SórchCíåÆDú
(c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
)

482 * 
buf
;

483 
ZPOS64_T
 
uSizeFûe
;

484 
ZPOS64_T
 
uBackRód
;

485 
ZPOS64_T
 
uMaxBack
=0xffff;

486 
ZPOS64_T
 
uPosFound
=0;

488 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
,0,
ZLIB_FILEFUNC_SEEK_END
) != 0)

492 
uSizeFûe
 = 
	`ZTELL64
(*
pzlib_fûefunc_def
,
fûe°ªam
);

494 i‡(
uMaxBack
>
uSizeFûe
)

495 
uMaxBack
 = 
uSizeFûe
;

497 
buf
 = (*)
	`ALLOC
(
BUFREADCOMMENT
+4);

498 i‡(
buf
==
NULL
)

501 
uBackRód
 = 4;

502 
uBackRód
<
uMaxBack
)

504 
uL⁄g
 
uRódSize
;

505 
ZPOS64_T
 
uRódPos
 ;

506 
i
;

507 i‡(
uBackRód
+
BUFREADCOMMENT
>
uMaxBack
)

508 
uBackRód
 = 
uMaxBack
;

510 
uBackRód
+=
BUFREADCOMMENT
;

511 
uRódPos
 = 
uSizeFûe
-
uBackRód
 ;

513 
uRódSize
 = ((
BUFREADCOMMENT
+4Ë< (
uSizeFûe
-
uRódPos
)) ?

514 (
BUFREADCOMMENT
+4Ë: (
uL⁄g
)(
uSizeFûe
-
uRódPos
);

515 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
,
uRódPos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

518 i‡(
	`ZREAD64
(*
pzlib_fûefunc_def
,
fûe°ªam
,
buf
,
uRódSize
)!=uReadSize)

521 
i
=()
uRódSize
-3; (i--)>0;)

522 i‡(((*(
buf
+
i
))==0x50) && ((*(buf+i+1))==0x4b) &&

523 ((*(
buf
+
i
+2))==0x05) && ((*(buf+i+3))==0x06))

525 
uPosFound
 = 
uRódPos
+
i
;

529 i‡(
uPosFound
!=0)

532 
	`TRYFREE
(
buf
);

533  
uPosFound
;

534 
	}
}

540 
loˇl
 
ZPOS64_T
 
zù64loˇl_SórchCíåÆDú64
 
OF
((c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
));

542 
loˇl
 
ZPOS64_T
 
	$zù64loˇl_SórchCíåÆDú64
(c⁄° 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc_def
, 
voidpf
 
fûe°ªam
)

544 * 
buf
;

545 
ZPOS64_T
 
uSizeFûe
;

546 
ZPOS64_T
 
uBackRód
;

547 
ZPOS64_T
 
uMaxBack
=0xffff;

548 
ZPOS64_T
 
uPosFound
=0;

549 
uL⁄g
 
uL
;

550 
ZPOS64_T
 
ªœtiveOff£t
;

552 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
,0,
ZLIB_FILEFUNC_SEEK_END
) != 0)

555 
uSizeFûe
 = 
	`ZTELL64
(*
pzlib_fûefunc_def
,
fûe°ªam
);

557 i‡(
uMaxBack
>
uSizeFûe
)

558 
uMaxBack
 = 
uSizeFûe
;

560 
buf
 = (*)
	`ALLOC
(
BUFREADCOMMENT
+4);

561 i‡(
buf
==
NULL
)

564 
uBackRód
 = 4;

565 
uBackRód
<
uMaxBack
)

567 
uL⁄g
 
uRódSize
;

568 
ZPOS64_T
 
uRódPos
;

569 
i
;

570 i‡(
uBackRód
+
BUFREADCOMMENT
>
uMaxBack
)

571 
uBackRód
 = 
uMaxBack
;

573 
uBackRód
+=
BUFREADCOMMENT
;

574 
uRódPos
 = 
uSizeFûe
-
uBackRód
 ;

576 
uRódSize
 = ((
BUFREADCOMMENT
+4Ë< (
uSizeFûe
-
uRódPos
)) ?

577 (
BUFREADCOMMENT
+4Ë: (
uL⁄g
)(
uSizeFûe
-
uRódPos
);

578 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
,
uRódPos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

581 i‡(
	`ZREAD64
(*
pzlib_fûefunc_def
,
fûe°ªam
,
buf
,
uRódSize
)!=uReadSize)

584 
i
=()
uRódSize
-3; (i--)>0;)

587 i‡(((*(
buf
+
i
))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

589 
uPosFound
 = 
uRódPos
+
i
;

594 i‡(
uPosFound
!=0)

598 
	`TRYFREE
(
buf
);

599 i‡(
uPosFound
 == 0)

603 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
, 
uPosFound
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

607 i‡(
	`zù64loˇl_gëL⁄g
(
pzlib_fûefunc_def
,
fûe°ªam
,&
uL
)!=
ZIP_OK
)

611 i‡(
	`zù64loˇl_gëL⁄g
(
pzlib_fûefunc_def
,
fûe°ªam
,&
uL
)!=
ZIP_OK
)

613 i‡(
uL
 != 0)

617 i‡(
	`zù64loˇl_gëL⁄g64
(
pzlib_fûefunc_def
,
fûe°ªam
,&
ªœtiveOff£t
)!=
ZIP_OK
)

621 i‡(
	`zù64loˇl_gëL⁄g
(
pzlib_fûefunc_def
,
fûe°ªam
,&
uL
)!=
ZIP_OK
)

623 i‡(
uL
 != 1)

627 i‡(
	`ZSEEK64
(*
pzlib_fûefunc_def
,
fûe°ªam
, 
ªœtiveOff£t
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

631 i‡(
	`zù64loˇl_gëL⁄g
(
pzlib_fûefunc_def
,
fûe°ªam
,&
uL
)!=
ZIP_OK
)

634 i‡(
uL
 != 0x06064b50)

637  
ªœtiveOff£t
;

638 
	}
}

640 
	$LﬂdCíåÆDúe˘‹yRec‹d
(
zù64_öã∫Æ
* 
pziöô
)

642 
îr
=
ZIP_OK
;

643 
ZPOS64_T
 
byã_bef‹e_the_zùfûe
;

645 
ZPOS64_T
 
size_˚¡øl_dú
;

646 
ZPOS64_T
 
off£t_˚¡øl_dú
;

647 
ZPOS64_T
 
˚¡øl_pos
;

648 
uL⁄g
 
uL
;

650 
uL⁄g
 
numbî_disk
;

652 
uL⁄g
 
numbî_disk_wôh_CD
;

654 
ZPOS64_T
 
numbî_íåy
;

655 
ZPOS64_T
 
numbî_íåy_CD
;

658 
uL⁄g
 
Vîsi⁄MadeBy
;

659 
uL⁄g
 
Vîsi⁄Nìded
;

660 
uL⁄g
 
size_commít
;

662 
hasZIP64Rec‹d
 = 0;

665 
˚¡øl_pos
 = 
	`zù64loˇl_SórchCíåÆDú64
(&
pziöô
->
z_fûefunc
,pziöô->
fûe°ªam
);

666 if(
˚¡øl_pos
 > 0)

668 
hasZIP64Rec‹d
 = 1;

670 if(
˚¡øl_pos
 == 0)

672 
˚¡øl_pos
 = 
	`zù64loˇl_SórchCíåÆDú
(&
pziöô
->
z_fûefunc
,pziöô->
fûe°ªam
);

680 if(
hasZIP64Rec‹d
)

682 
ZPOS64_T
 
sizeEndOfCíåÆDúe˘‹y
;

683 i‡(
	`ZSEEK64
(
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, 
˚¡øl_pos
, 
ZLIB_FILEFUNC_SEEK_SET
) != 0)

684 
îr
=
ZIP_ERRNO
;

687 i‡(
	`zù64loˇl_gëL⁄g
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,&
uL
)!=
ZIP_OK
)

688 
îr
=
ZIP_ERRNO
;

691 i‡(
	`zù64loˇl_gëL⁄g64
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, &
sizeEndOfCíåÆDúe˘‹y
)!=
ZIP_OK
)

692 
îr
=
ZIP_ERRNO
;

695 i‡(
	`zù64loˇl_gëSh‹t
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, &
Vîsi⁄MadeBy
)!=
ZIP_OK
)

696 
îr
=
ZIP_ERRNO
;

699 i‡(
	`zù64loˇl_gëSh‹t
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, &
Vîsi⁄Nìded
)!=
ZIP_OK
)

700 
îr
=
ZIP_ERRNO
;

703 i‡(
	`zù64loˇl_gëL⁄g
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,&
numbî_disk
)!=
ZIP_OK
)

704 
îr
=
ZIP_ERRNO
;

707 i‡(
	`zù64loˇl_gëL⁄g
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,&
numbî_disk_wôh_CD
)!=
ZIP_OK
)

708 
îr
=
ZIP_ERRNO
;

711 i‡(
	`zù64loˇl_gëL⁄g64
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, &
numbî_íåy
)!=
ZIP_OK
)

712 
îr
=
ZIP_ERRNO
;

715 i‡(
	`zù64loˇl_gëL⁄g64
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,&
numbî_íåy_CD
)!=
ZIP_OK
)

716 
îr
=
ZIP_ERRNO
;

718 i‡((
numbî_íåy_CD
!=
numbî_íåy
Ë|| (
numbî_disk_wôh_CD
!=0Ë|| (
numbî_disk
!=0))

719 
îr
=
ZIP_BADZIPFILE
;

722 i‡(
	`zù64loˇl_gëL⁄g64
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,&
size_˚¡øl_dú
)!=
ZIP_OK
)

723 
îr
=
ZIP_ERRNO
;

727 i‡(
	`zù64loˇl_gëL⁄g64
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,&
off£t_˚¡øl_dú
)!=
ZIP_OK
)

728 
îr
=
ZIP_ERRNO
;

732 
size_commít
 = 0;

737 i‡(
	`ZSEEK64
(
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, 
˚¡øl_pos
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

738 
îr
=
ZIP_ERRNO
;

741 i‡(
	`zù64loˇl_gëL⁄g
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,&
uL
)!=
ZIP_OK
)

742 
îr
=
ZIP_ERRNO
;

745 i‡(
	`zù64loˇl_gëSh‹t
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,&
numbî_disk
)!=
ZIP_OK
)

746 
îr
=
ZIP_ERRNO
;

749 i‡(
	`zù64loˇl_gëSh‹t
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,&
numbî_disk_wôh_CD
)!=
ZIP_OK
)

750 
îr
=
ZIP_ERRNO
;

753 
numbî_íåy
 = 0;

754 i‡(
	`zù64loˇl_gëSh‹t
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, &
uL
)!=
ZIP_OK
)

755 
îr
=
ZIP_ERRNO
;

757 
numbî_íåy
 = 
uL
;

760 
numbî_íåy_CD
 = 0;

761 i‡(
	`zù64loˇl_gëSh‹t
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, &
uL
)!=
ZIP_OK
)

762 
îr
=
ZIP_ERRNO
;

764 
numbî_íåy_CD
 = 
uL
;

766 i‡((
numbî_íåy_CD
!=
numbî_íåy
Ë|| (
numbî_disk_wôh_CD
!=0Ë|| (
numbî_disk
!=0))

767 
îr
=
ZIP_BADZIPFILE
;

770 
size_˚¡øl_dú
 = 0;

771 i‡(
	`zù64loˇl_gëL⁄g
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, &
uL
)!=
ZIP_OK
)

772 
îr
=
ZIP_ERRNO
;

774 
size_˚¡øl_dú
 = 
uL
;

777 
off£t_˚¡øl_dú
 = 0;

778 i‡(
	`zù64loˇl_gëL⁄g
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, &
uL
)!=
ZIP_OK
)

779 
îr
=
ZIP_ERRNO
;

781 
off£t_˚¡øl_dú
 = 
uL
;

785 i‡(
	`zù64loˇl_gëSh‹t
(&
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, &
size_commít
)!=
ZIP_OK
)

786 
îr
=
ZIP_ERRNO
;

789 i‡((
˚¡øl_pos
<
off£t_˚¡øl_dú
+
size_˚¡øl_dú
) &&

790 (
îr
==
ZIP_OK
))

791 
îr
=
ZIP_BADZIPFILE
;

793 i‡(
îr
!=
ZIP_OK
)

795 
	`ZCLOSE64
(
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
);

796  
ZIP_ERRNO
;

799 i‡(
size_commít
>0)

801 
pziöô
->
globÆcommít
 = (*)
	`ALLOC
(
size_commít
+1);

802 i‡(
pziöô
->
globÆcommít
)

804 
size_commít
 = 
	`ZREAD64
(
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,Öziöô->
globÆcommít
,size_comment);

805 
pziöô
->
globÆcommít
[
size_commít
]=0;

809 
byã_bef‹e_the_zùfûe
 = 
˚¡øl_pos
 - (
off£t_˚¡øl_dú
+
size_˚¡øl_dú
);

810 
pziöô
->
add_posôi⁄_whí_wrôtög_off£t
 = 
byã_bef‹e_the_zùfûe
;

813 
ZPOS64_T
 
size_˚¡øl_dú_to_ªad
 = 
size_˚¡øl_dú
;

814 
size_t
 
buf_size
 = 
SIZEDATA_INDATABLOCK
;

815 * 
buf_ªad
 = (*)
	`ALLOC
(
buf_size
);

816 i‡(
	`ZSEEK64
(
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, 
off£t_˚¡øl_dú
 + 
byã_bef‹e_the_zùfûe
, 
ZLIB_FILEFUNC_SEEK_SET
) != 0)

817 
îr
=
ZIP_ERRNO
;

819 (
size_˚¡øl_dú_to_ªad
>0Ë&& (
îr
==
ZIP_OK
))

821 
ZPOS64_T
 
ªad_this
 = 
SIZEDATA_INDATABLOCK
;

822 i‡(
ªad_this
 > 
size_˚¡øl_dú_to_ªad
)

823 
ªad_this
 = 
size_˚¡øl_dú_to_ªad
;

825 i‡(
	`ZREAD64
(
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
,
buf_ªad
,(
uL⁄g
)
ªad_this
) !=Ñead_this)

826 
îr
=
ZIP_ERRNO
;

828 i‡(
îr
==
ZIP_OK
)

829 
îr
 = 
	`add_d©a_ö_d©ablock
(&
pziöô
->
˚¡øl_dú
,
buf_ªad
, (
uL⁄g
)
ªad_this
);

831 
size_˚¡øl_dú_to_ªad
-=
ªad_this
;

833 
	`TRYFREE
(
buf_ªad
);

835 
pziöô
->
begö_pos
 = 
byã_bef‹e_the_zùfûe
;

836 
pziöô
->
numbî_íåy
 = 
numbî_íåy_CD
;

838 i‡(
	`ZSEEK64
(
pziöô
->
z_fûefunc
,Öziöô->
fûe°ªam
, 
off£t_˚¡øl_dú
+
byã_bef‹e_the_zùfûe
,
ZLIB_FILEFUNC_SEEK_SET
) != 0)

839 
îr
=
ZIP_ERRNO
;

841  
îr
;

842 
	}
}

849 
zùFûe
 
ZEXPORT
 
	$zùO≥n3
 (c⁄° *
∑th«me
, 
≠≥nd
, 
zùch¨pc
* 
globÆcommít
, 
zlib_fûefunc64_32_def
* 
pzlib_fûefunc64_32_def
)

851 
zù64_öã∫Æ
 
ziöô
;

852 
zù64_öã∫Æ
* 
zi
;

853 
îr
=
ZIP_OK
;

855 
ziöô
.
z_fûefunc
.
z£ek32_fûe
 = 
NULL
;

856 
ziöô
.
z_fûefunc
.
zãŒ32_fûe
 = 
NULL
;

857 i‡(
pzlib_fûefunc64_32_def
==
NULL
)

858 
	`fûl_f›í64_fûefunc
(&
ziöô
.
z_fûefunc
.
zfûe_func64
);

860 
ziöô
.
z_fûefunc
 = *
pzlib_fûefunc64_32_def
;

862 
ziöô
.
fûe°ªam
 = 
	`ZOPEN64
(ziöô.
z_fûefunc
,

863 
∑th«me
,

864 (
≠≥nd
 =
APPEND_STATUS_CREATE
) ?

865 (
ZLIB_FILEFUNC_MODE_READ
 | 
ZLIB_FILEFUNC_MODE_WRITE
 | 
ZLIB_FILEFUNC_MODE_CREATE
) :

866 (
ZLIB_FILEFUNC_MODE_READ
 | 
ZLIB_FILEFUNC_MODE_WRITE
 | 
ZLIB_FILEFUNC_MODE_EXISTING
));

868 i‡(
ziöô
.
fûe°ªam
 =
NULL
)

869  
NULL
;

871 i‡(
≠≥nd
 =
APPEND_STATUS_CREATEAFTER
)

872 
	`ZSEEK64
(
ziöô
.
z_fûefunc
,ziöô.
fûe°ªam
,0,
SEEK_END
);

874 
ziöô
.
begö_pos
 = 
	`ZTELL64
(ziöô.
z_fûefunc
,ziöô.
fûe°ªam
);

875 
ziöô
.
ö_›íed_fûe_özù
 = 0;

876 
ziöô
.
ci
.
°ªam_öôüli£d
 = 0;

877 
ziöô
.
numbî_íåy
 = 0;

878 
ziöô
.
add_posôi⁄_whí_wrôtög_off£t
 = 0;

879 
	`öô_lökedli°
(&(
ziöô
.
˚¡øl_dú
));

883 
zi
 = (
zù64_öã∫Æ
*)
	`ALLOC
((zip64_internal));

884 i‡(
zi
==
NULL
)

886 
	`ZCLOSE64
(
ziöô
.
z_fûefunc
,ziöô.
fûe°ªam
);

887  
NULL
;

891 #i‚de‡
NO_ADDFILEINEXISTINGZIP


892 
ziöô
.
globÆcommít
 = 
NULL
;

893 i‡(
≠≥nd
 =
APPEND_STATUS_ADDINZIP
)

896 
îr
 = 
	`LﬂdCíåÆDúe˘‹yRec‹d
(&
ziöô
);

897 
	}
}

899 i‡(
	gglobÆcommít
)

901 *
	gglobÆcommít
 = 
ziöô
.
globÆcommít
;

905 i‡(
	gîr
 !
ZIP_OK
)

907 #i‚de‡
NO_ADDFILEINEXISTINGZIP


908 
TRYFREE
(
ziöô
.
globÆcommít
);

910 
TRYFREE
(
zi
);

911  
	gNULL
;

915 *
	gzi
 = 
ziöô
;

916  (
	gzùFûe
)
	gzi
;

920 
zùFûe
 
ZEXPORT
 
	$zùO≥n2
 (c⁄° *
∑th«me
, 
≠≥nd
, 
zùch¨pc
* 
globÆcommít
, 
zlib_fûefunc_def
* 
pzlib_fûefunc32_def
)

922 i‡(
pzlib_fûefunc32_def
 !
NULL
)

924 
zlib_fûefunc64_32_def
 
zlib_fûefunc64_32_def_fûl
;

925 
	`fûl_zlib_fûefunc64_32_def_‰om_fûefunc32
(&
zlib_fûefunc64_32_def_fûl
,
pzlib_fûefunc32_def
);

926  
	`zùO≥n3
(
∑th«me
, 
≠≥nd
, 
globÆcommít
, &
zlib_fûefunc64_32_def_fûl
);

929  
	`zùO≥n3
(
∑th«me
, 
≠≥nd
, 
globÆcommít
, 
NULL
);

930 
	}
}

932 
zùFûe
 
ZEXPORT
 
	$zùO≥n2_64
 (c⁄° *
∑th«me
, 
≠≥nd
, 
zùch¨pc
* 
globÆcommít
, 
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
)

934 i‡(
pzlib_fûefunc_def
 !
NULL
)

936 
zlib_fûefunc64_32_def
 
zlib_fûefunc64_32_def_fûl
;

937 
zlib_fûefunc64_32_def_fûl
.
zfûe_func64
 = *
pzlib_fûefunc_def
;

938 
zlib_fûefunc64_32_def_fûl
.
zãŒ32_fûe
 = 
NULL
;

939 
zlib_fûefunc64_32_def_fûl
.
z£ek32_fûe
 = 
NULL
;

940  
	`zùO≥n3
(
∑th«me
, 
≠≥nd
, 
globÆcommít
, &
zlib_fûefunc64_32_def_fûl
);

943  
	`zùO≥n3
(
∑th«me
, 
≠≥nd
, 
globÆcommít
, 
NULL
);

944 
	}
}

948 
zùFûe
 
ZEXPORT
 
	$zùO≥n
 (c⁄° * 
∑th«me
, 
≠≥nd
)

950  
	`zùO≥n3
((c⁄° *)
∑th«me
,
≠≥nd
,
NULL
,NULL);

951 
	}
}

953 
zùFûe
 
ZEXPORT
 
	$zùO≥n64
 (c⁄° * 
∑th«me
, 
≠≥nd
)

955  
	`zùO≥n3
(
∑th«me
,
≠≥nd
,
NULL
,NULL);

956 
	}
}

958 
	$Wrôe_LoˇlFûeHódî
(
zù64_öã∫Æ
* 
zi
, c⁄° * 
fûíame
, 
uI¡
 
size_exåafõld_loˇl
, c⁄° * 
exåafõld_loˇl
)

961 
îr
;

962 
uI¡
 
size_fûíame
 = (uI¡)
	`°æí
(
fûíame
);

963 
uI¡
 
size_exåafõld
 = 
size_exåafõld_loˇl
;

965 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
LOCALHEADERMAGIC
, 4);

967 i‡(
îr
==
ZIP_OK
)

969 if(
zi
->
ci
.
zù64
)

970 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)45,2);

972 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)20,2);

975 i‡(
îr
==
ZIP_OK
)

976 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
ci
.
Êag
,2);

978 i‡(
îr
==
ZIP_OK
)

979 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
ci
.
mëhod
,2);

981 i‡(
îr
==
ZIP_OK
)

982 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
ci
.
dosD©e
,4);

985 i‡(
îr
==
ZIP_OK
)

986 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,4);

987 i‡(
îr
==
ZIP_OK
)

989 if(
zi
->
ci
.
zù64
)

990 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0xFFFFFFFF,4);

992 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,4);

994 i‡(
îr
==
ZIP_OK
)

996 if(
zi
->
ci
.
zù64
)

997 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0xFFFFFFFF,4);

999 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,4);

1002 i‡(
îr
==
ZIP_OK
)

1003 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
size_fûíame
,2);

1005 if(
zi
->
ci
.
zù64
)

1007 
size_exåafõld
 += 20;

1010 i‡(
îr
==
ZIP_OK
)

1011 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
size_exåafõld
,2);

1013 i‡((
îr
==
ZIP_OK
Ë&& (
size_fûíame
 > 0))

1015 i‡(
	`ZWRITE64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,
fûíame
,
size_fûíame
)!=size_filename)

1016 
îr
 = 
ZIP_ERRNO
;

1019 i‡((
îr
==
ZIP_OK
Ë&& (
size_exåafõld_loˇl
 > 0))

1021 i‡(
	`ZWRITE64
(
zi
->
z_fûefunc
, zi->
fûe°ªam
, 
exåafõld_loˇl
, 
size_exåafõld_loˇl
) != size_extrafield_local)

1022 
îr
 = 
ZIP_ERRNO
;

1026 i‡((
îr
==
ZIP_OK
Ë&& (
zi
->
ci
.
zù64
))

1029 
HódîID
 = 1;

1030 
D©aSize
 = 16;

1031 
ZPOS64_T
 
Com¥es£dSize
 = 0;

1032 
ZPOS64_T
 
Uncom¥es£dSize
 = 0;

1035 
zi
->
ci
.
pos_zù64exåaöfo
 = 
	`ZTELL64
(zi->
z_fûefunc
,zi->
fûe°ªam
);

1037 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
, zi->
fûe°ªam
, ()
HódîID
,2);

1038 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
, zi->
fûe°ªam
, ()
D©aSize
,2);

1040 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
, zi->
fûe°ªam
, (
ZPOS64_T
)
Uncom¥es£dSize
,8);

1041 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
, zi->
fûe°ªam
, (
ZPOS64_T
)
Com¥es£dSize
,8);

1044  
îr
;

1045 
	}
}

1055 
ZEXPORT
 
	$zùO≥nNewFûeInZù4_64
 (
zùFûe
 
fûe
, c⁄° * 
fûíame
, c⁄° 
zù_fûeöfo
* 
zùfi
,

1056 c⁄° * 
exåafõld_loˇl
, 
uI¡
 
size_exåafõld_loˇl
,

1057 c⁄° * 
exåafõld_globÆ
, 
uI¡
 
size_exåafõld_globÆ
,

1058 c⁄° * 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

1059 
wödowBôs
,
memLevñ
, 
°øãgy
,

1060 c⁄° * 
∑ssw‹d
, 
uL⁄g
 
¸cF‹Cry±ög
,

1061 
uL⁄g
 
vîsi⁄MadeBy
, uL⁄g 
ÊagBa£
, 
zù64
)

1063 
zù64_öã∫Æ
* 
zi
;

1064 
uI¡
 
size_fûíame
;

1065 
uI¡
 
size_commít
;

1066 
uI¡
 
i
;

1067 
îr
 = 
ZIP_OK
;

1069 #ifde‡
NOCRYPT


1070 (
¸cF‹Cry±ög
);

1071 i‡(
∑ssw‹d
 !
NULL
)

1072  
ZIP_PARAMERROR
;

1075 i‡(
fûe
 =
NULL
)

1076  
ZIP_PARAMERROR
;

1078 #ifde‡
HAVE_BZIP2


1079 i‡((
mëhod
!=0Ë&& (mëhod!=
Z_DEFLATED
Ë&& (mëhod!=
Z_BZIP2ED
))

1080  
ZIP_PARAMERROR
;

1082 i‡((
mëhod
!=0Ë&& (mëhod!=
Z_DEFLATED
))

1083  
ZIP_PARAMERROR
;

1086 
zi
 = (
zù64_öã∫Æ
*)
fûe
;

1088 i‡(
zi
->
ö_›íed_fûe_özù
 == 1)

1090 
îr
 = 
	`zùClo£FûeInZù
 (
fûe
);

1091 i‡(
îr
 !
ZIP_OK
)

1092  
îr
;

1095 i‡(
fûíame
==
NULL
)

1096 
fûíame
="-";

1098 i‡(
commít
==
NULL
)

1099 
size_commít
 = 0;

1101 
size_commít
 = (
uI¡
)
	`°æí
(
commít
);

1103 
size_fûíame
 = (
uI¡
)
	`°æí
(
fûíame
);

1105 i‡(
zùfi
 =
NULL
)

1106 
zi
->
ci
.
dosD©e
 = 0;

1109 i‡(
zùfi
->
dosD©e
 != 0)

1110 
zi
->
ci
.
dosD©e
 = 
zùfi
->dosDate;

1112 
zi
->
ci
.
dosD©e
 = 
	`zù64loˇl_TmzD©eToDosD©e
(&
zùfi
->
tmz_d©e
);

1115 
zi
->
ci
.
Êag
 = 
ÊagBa£
;

1116 i‡((
Àvñ
==8) || (level==9))

1117 
zi
->
ci
.
Êag
 |= 2;

1118 i‡(
Àvñ
==2)

1119 
zi
->
ci
.
Êag
 |= 4;

1120 i‡(
Àvñ
==1)

1121 
zi
->
ci
.
Êag
 |= 6;

1122 i‡(
∑ssw‹d
 !
NULL
)

1123 
zi
->
ci
.
Êag
 |= 1;

1125 
zi
->
ci
.
¸c32
 = 0;

1126 
zi
->
ci
.
mëhod
 = method;

1127 
zi
->
ci
.
í¸y±
 = 0;

1128 
zi
->
ci
.
°ªam_öôüli£d
 = 0;

1129 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 = 0;

1130 
zi
->
ci
.
øw
 =Ñaw;

1131 
zi
->
ci
.
pos_loˇl_hódî
 = 
	`ZTELL64
(zi->
z_fûefunc
,zi->
fûe°ªam
);

1133 
zi
->
ci
.
size_˚¡ølhódî
 = 
SIZECENTRALHEADER
 + 
size_fûíame
 + 
size_exåafõld_globÆ
 + 
size_commít
;

1134 
zi
->
ci
.
size_˚¡ølExåaFªe
 = 32;

1136 
zi
->
ci
.
˚¡øl_hódî
 = (*)
	`ALLOC
((
uI¡
)zi->ci.
size_˚¡ølhódî
 + zi->ci.
size_˚¡ølExåaFªe
);

1138 
zi
->
ci
.
size_˚¡ølExåa
 = 
size_exåafõld_globÆ
;

1139 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
,(
uL⁄g
)
CENTRALHEADERMAGIC
,4);

1141 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+4,(
uL⁄g
)
vîsi⁄MadeBy
,2);

1142 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+6,(
uL⁄g
)20,2);

1143 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+8,(
uL⁄g
)zi->ci.
Êag
,2);

1144 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+10,(
uL⁄g
)zi->ci.
mëhod
,2);

1145 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+12,(
uL⁄g
)zi->ci.
dosD©e
,4);

1146 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+16,(
uL⁄g
)0,4);

1147 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+20,(
uL⁄g
)0,4);

1148 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+24,(
uL⁄g
)0,4);

1149 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+28,(
uL⁄g
)
size_fûíame
,2);

1150 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+30,(
uL⁄g
)
size_exåafõld_globÆ
,2);

1151 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+32,(
uL⁄g
)
size_commít
,2);

1152 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+34,(
uL⁄g
)0,2);

1154 i‡(
zùfi
==
NULL
)

1155 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+36,(
uL⁄g
)0,2);

1157 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+36,(
uL⁄g
)
zùfi
->
öã∫Æ_Á
,2);

1159 i‡(
zùfi
==
NULL
)

1160 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+38,(
uL⁄g
)0,4);

1162 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+38,(
uL⁄g
)
zùfi
->
exã∫Æ_Á
,4);

1164 if(
zi
->
ci
.
pos_loˇl_hódî
 >= 0xffffffff)

1165 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+42,(
uL⁄g
)0xffffffff,4);

1167 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+42,(
uL⁄g
)zi->ci.
pos_loˇl_hódî
 - zi->
add_posôi⁄_whí_wrôtög_off£t
,4);

1169 
i
=0;i<
size_fûíame
;i++)

1170 *(
zi
->
ci
.
˚¡øl_hódî
+
SIZECENTRALHEADER
+
i
Ë*(
fûíame
+i);

1172 
i
=0;i<
size_exåafõld_globÆ
;i++)

1173 *(
zi
->
ci
.
˚¡øl_hódî
+
SIZECENTRALHEADER
+
size_fûíame
+
i
) =

1174 *(((c⁄° *)
exåafõld_globÆ
)+
i
);

1176 
i
=0;i<
size_commít
;i++)

1177 *(
zi
->
ci
.
˚¡øl_hódî
+
SIZECENTRALHEADER
+
size_fûíame
+

1178 
size_exåafõld_globÆ
+
i
Ë*(
commít
+i);

1179 i‡(
zi
->
ci
.
˚¡øl_hódî
 =
NULL
)

1180  
ZIP_INTERNALERROR
;

1182 
zi
->
ci
.
zù64
 = zip64;

1183 
zi
->
ci
.
tŸÆCom¥es£dD©a
 = 0;

1184 
zi
->
ci
.
tŸÆUncom¥es£dD©a
 = 0;

1185 
zi
->
ci
.
pos_zù64exåaöfo
 = 0;

1187 
îr
 = 
	`Wrôe_LoˇlFûeHódî
(
zi
, 
fûíame
, 
size_exåafõld_loˇl
, 
exåafõld_loˇl
);

1189 #ifde‡
HAVE_BZIP2


1190 
zi
->
ci
.
b°ªam
.
avaû_ö
 = (
uI¡
)0;

1191 
zi
->
ci
.
b°ªam
.
avaû_out
 = (
uI¡
)
Z_BUFSIZE
;

1192 
zi
->
ci
.
b°ªam
.
√xt_out
 = (*)zi->ci.
buf„ªd_d©a
;

1193 
zi
->
ci
.
b°ªam
.
tŸÆ_ö_hi32
 = 0;

1194 
zi
->
ci
.
b°ªam
.
tŸÆ_ö_lo32
 = 0;

1195 
zi
->
ci
.
b°ªam
.
tŸÆ_out_hi32
 = 0;

1196 
zi
->
ci
.
b°ªam
.
tŸÆ_out_lo32
 = 0;

1199 
zi
->
ci
.
°ªam
.
avaû_ö
 = (
uI¡
)0;

1200 
zi
->
ci
.
°ªam
.
avaû_out
 = (
uI¡
)
Z_BUFSIZE
;

1201 
zi
->
ci
.
°ªam
.
√xt_out
 = zi->ci.
buf„ªd_d©a
;

1202 
zi
->
ci
.
°ªam
.
tŸÆ_ö
 = 0;

1203 
zi
->
ci
.
°ªam
.
tŸÆ_out
 = 0;

1204 
zi
->
ci
.
°ªam
.
d©a_ty≥
 = 
Z_BINARY
;

1206 #ifde‡
HAVE_BZIP2


1207 i‡((
îr
==
ZIP_OK
Ë&& (
zi
->
ci
.
mëhod
 =
Z_DEFLATED
 || zi->ci.mëhod =
Z_BZIP2ED
Ë&& (!zi->ci.
øw
))

1209 i‡((
îr
==
ZIP_OK
Ë&& (
zi
->
ci
.
mëhod
 =
Z_DEFLATED
Ë&& (!zi->ci.
øw
))

1212 if(
zi
->
ci
.
mëhod
 =
Z_DEFLATED
)

1214 
zi
->
ci
.
°ªam
.
zÆloc
 = (
Æloc_func
)0;

1215 
zi
->
ci
.
°ªam
.
z‰ì
 = (
‰ì_func
)0;

1216 
zi
->
ci
.
°ªam
.
›aque
 = (
voidpf
)0;

1218 i‡(
wödowBôs
>0)

1219 
wödowBôs
 = -windowBits;

1221 
îr
 = 
	`deÊ©eInô2
(&
zi
->
ci
.
°ªam
, 
Àvñ
, 
Z_DEFLATED
, 
wödowBôs
, 
memLevñ
, 
°øãgy
);

1223 i‡(
îr
==
Z_OK
)

1224 
zi
->
ci
.
°ªam_öôüli£d
 = 
Z_DEFLATED
;

1226 if(
zi
->
ci
.
mëhod
 =
Z_BZIP2ED
)

1228 #ifde‡
HAVE_BZIP2


1230 
zi
->
ci
.
b°ªam
.
bzÆloc
 = 0;

1231 
zi
->
ci
.
b°ªam
.
bz‰ì
 = 0;

1232 
zi
->
ci
.
b°ªam
.
›aque
 = (
voidpf
)0;

1234 
îr
 = 
	`BZ2_bzCom¥essInô
(&
zi
->
ci
.
b°ªam
, 
Àvñ
, 0,35);

1235 if(
îr
 =
BZ_OK
)

1236 
zi
->
ci
.
°ªam_öôüli£d
 = 
Z_BZIP2ED
;

1242 #i‚de‡
NOCRYPT


1243 
zi
->
ci
.
¸y±_hódî_size
 = 0;

1244 i‡((
îr
==
Z_OK
Ë&& (
∑ssw‹d
 !
NULL
))

1246 
bufHód
[
RAND_HEAD_LEN
];

1247 
sizeHód
;

1248 
zi
->
ci
.
í¸y±
 = 1;

1249 
zi
->
ci
.
p¸c_32_èb
 = 
	`gë_¸c_èbÀ
();

1252 
sizeHód
=
	`¸y±hód
(
∑ssw‹d
,
bufHód
,
RAND_HEAD_LEN
,
zi
->
ci
.
keys
,zi->ci.
p¸c_32_èb
,
¸cF‹Cry±ög
);

1253 
zi
->
ci
.
¸y±_hódî_size
 = 
sizeHód
;

1255 i‡(
	`ZWRITE64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,
bufHód
,
sizeHód
) != sizeHead)

1256 
îr
 = 
ZIP_ERRNO
;

1260 i‡(
îr
==
Z_OK
)

1261 
zi
->
ö_›íed_fûe_özù
 = 1;

1262  
îr
;

1263 
	}
}

1265 
ZEXPORT
 
	$zùO≥nNewFûeInZù4
 (
zùFûe
 
fûe
, c⁄° * 
fûíame
, c⁄° 
zù_fûeöfo
* 
zùfi
,

1266 c⁄° * 
exåafõld_loˇl
, 
uI¡
 
size_exåafõld_loˇl
,

1267 c⁄° * 
exåafõld_globÆ
, 
uI¡
 
size_exåafõld_globÆ
,

1268 c⁄° * 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

1269 
wödowBôs
,
memLevñ
, 
°øãgy
,

1270 c⁄° * 
∑ssw‹d
, 
uL⁄g
 
¸cF‹Cry±ög
,

1271 
uL⁄g
 
vîsi⁄MadeBy
, uL⁄g 
ÊagBa£
)

1273  
	`zùO≥nNewFûeInZù4_64
 (
fûe
, 
fûíame
, 
zùfi
,

1274 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

1275 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

1276 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

1277 
wödowBôs
, 
memLevñ
, 
°øãgy
,

1278 
∑ssw‹d
, 
¸cF‹Cry±ög
, 
vîsi⁄MadeBy
, 
ÊagBa£
, 0);

1279 
	}
}

1281 
ZEXPORT
 
	$zùO≥nNewFûeInZù3
 (
zùFûe
 
fûe
, c⁄° * 
fûíame
, c⁄° 
zù_fûeöfo
* 
zùfi
,

1282 c⁄° * 
exåafõld_loˇl
, 
uI¡
 
size_exåafõld_loˇl
,

1283 c⁄° * 
exåafõld_globÆ
, 
uI¡
 
size_exåafõld_globÆ
,

1284 c⁄° * 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

1285 
wödowBôs
,
memLevñ
, 
°øãgy
,

1286 c⁄° * 
∑ssw‹d
, 
uL⁄g
 
¸cF‹Cry±ög
)

1288  
	`zùO≥nNewFûeInZù4_64
 (
fûe
, 
fûíame
, 
zùfi
,

1289 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

1290 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

1291 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

1292 
wödowBôs
, 
memLevñ
, 
°øãgy
,

1293 
∑ssw‹d
, 
¸cF‹Cry±ög
, 
VERSIONMADEBY
, 0, 0);

1294 
	}
}

1296 
ZEXPORT
 
	$zùO≥nNewFûeInZù3_64
(
zùFûe
 
fûe
, c⁄° * 
fûíame
, c⁄° 
zù_fûeöfo
* 
zùfi
,

1297 c⁄° * 
exåafõld_loˇl
, 
uI¡
 
size_exåafõld_loˇl
,

1298 c⁄° * 
exåafõld_globÆ
, 
uI¡
 
size_exåafõld_globÆ
,

1299 c⁄° * 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

1300 
wödowBôs
,
memLevñ
, 
°øãgy
,

1301 c⁄° * 
∑ssw‹d
, 
uL⁄g
 
¸cF‹Cry±ög
, 
zù64
)

1303  
	`zùO≥nNewFûeInZù4_64
 (
fûe
, 
fûíame
, 
zùfi
,

1304 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

1305 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

1306 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

1307 
wödowBôs
, 
memLevñ
, 
°øãgy
,

1308 
∑ssw‹d
, 
¸cF‹Cry±ög
, 
VERSIONMADEBY
, 0, 
zù64
);

1309 
	}
}

1311 
ZEXPORT
 
	$zùO≥nNewFûeInZù2
(
zùFûe
 
fûe
, c⁄° * 
fûíame
, c⁄° 
zù_fûeöfo
* 
zùfi
,

1312 c⁄° * 
exåafõld_loˇl
, 
uI¡
 
size_exåafõld_loˇl
,

1313 c⁄° * 
exåafõld_globÆ
, 
uI¡
 
size_exåafõld_globÆ
,

1314 c⁄° * 
commít
, 
mëhod
, 
Àvñ
, 
øw
)

1316  
	`zùO≥nNewFûeInZù4_64
 (
fûe
, 
fûíame
, 
zùfi
,

1317 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

1318 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

1319 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

1320 -
MAX_WBITS
, 
DEF_MEM_LEVEL
, 
Z_DEFAULT_STRATEGY
,

1321 
NULL
, 0, 
VERSIONMADEBY
, 0, 0);

1322 
	}
}

1324 
ZEXPORT
 
	$zùO≥nNewFûeInZù2_64
(
zùFûe
 
fûe
, c⁄° * 
fûíame
, c⁄° 
zù_fûeöfo
* 
zùfi
,

1325 c⁄° * 
exåafõld_loˇl
, 
uI¡
 
size_exåafõld_loˇl
,

1326 c⁄° * 
exåafõld_globÆ
, 
uI¡
 
size_exåafõld_globÆ
,

1327 c⁄° * 
commít
, 
mëhod
, 
Àvñ
, 
øw
, 
zù64
)

1329  
	`zùO≥nNewFûeInZù4_64
 (
fûe
, 
fûíame
, 
zùfi
,

1330 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

1331 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

1332 
commít
, 
mëhod
, 
Àvñ
, 
øw
,

1333 -
MAX_WBITS
, 
DEF_MEM_LEVEL
, 
Z_DEFAULT_STRATEGY
,

1334 
NULL
, 0, 
VERSIONMADEBY
, 0, 
zù64
);

1335 
	}
}

1337 
ZEXPORT
 
	$zùO≥nNewFûeInZù64
 (
zùFûe
 
fûe
, c⁄° * 
fûíame
, c⁄° 
zù_fûeöfo
* 
zùfi
,

1338 c⁄° * 
exåafõld_loˇl
, 
uI¡
 
size_exåafõld_loˇl
,

1339 c⁄° *
exåafõld_globÆ
, 
uI¡
 
size_exåafõld_globÆ
,

1340 c⁄° * 
commít
, 
mëhod
, 
Àvñ
, 
zù64
)

1342  
	`zùO≥nNewFûeInZù4_64
 (
fûe
, 
fûíame
, 
zùfi
,

1343 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

1344 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

1345 
commít
, 
mëhod
, 
Àvñ
, 0,

1346 -
MAX_WBITS
, 
DEF_MEM_LEVEL
, 
Z_DEFAULT_STRATEGY
,

1347 
NULL
, 0, 
VERSIONMADEBY
, 0, 
zù64
);

1348 
	}
}

1350 
ZEXPORT
 
	$zùO≥nNewFûeInZù
 (
zùFûe
 
fûe
, c⁄° * 
fûíame
, c⁄° 
zù_fûeöfo
* 
zùfi
,

1351 c⁄° * 
exåafõld_loˇl
, 
uI¡
 
size_exåafõld_loˇl
,

1352 c⁄° *
exåafõld_globÆ
, 
uI¡
 
size_exåafõld_globÆ
,

1353 c⁄° * 
commít
, 
mëhod
, 
Àvñ
)

1355  
	`zùO≥nNewFûeInZù4_64
 (
fûe
, 
fûíame
, 
zùfi
,

1356 
exåafõld_loˇl
, 
size_exåafõld_loˇl
,

1357 
exåafõld_globÆ
, 
size_exåafõld_globÆ
,

1358 
commít
, 
mëhod
, 
Àvñ
, 0,

1359 -
MAX_WBITS
, 
DEF_MEM_LEVEL
, 
Z_DEFAULT_STRATEGY
,

1360 
NULL
, 0, 
VERSIONMADEBY
, 0, 0);

1361 
	}
}

1363 
loˇl
 
	$zù64FlushWrôeBuf„r
(
zù64_öã∫Æ
* 
zi
)

1365 
îr
=
ZIP_OK
;

1367 i‡(
zi
->
ci
.
í¸y±
 != 0)

1369 #i‚de‡
NOCRYPT


1370 
uI¡
 
i
;

1371 
t
;

1372 
i
=0;i<
zi
->
ci
.
pos_ö_buf„ªd_d©a
;i++)

1373 
zi
->
ci
.
buf„ªd_d©a
[
i
] = 
	`zícode
(zi->ci.
keys
, zi->ci.
p¸c_32_èb
, zi->ci.buf„ªd_d©a[i],
t
);

1377 i‡(
	`ZWRITE64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
,zi->
ci
.
buf„ªd_d©a
,zi->ci.
pos_ö_buf„ªd_d©a
) != zi->ci.pos_in_buffered_data)

1378 
îr
 = 
ZIP_ERRNO
;

1380 
zi
->
ci
.
tŸÆCom¥es£dD©a
 +zi->ci.
pos_ö_buf„ªd_d©a
;

1382 #ifde‡
HAVE_BZIP2


1383 if(
zi
->
ci
.
mëhod
 =
Z_BZIP2ED
)

1385 
zi
->
ci
.
tŸÆUncom¥es£dD©a
 +zi->ci.
b°ªam
.
tŸÆ_ö_lo32
;

1386 
zi
->
ci
.
b°ªam
.
tŸÆ_ö_lo32
 = 0;

1387 
zi
->
ci
.
b°ªam
.
tŸÆ_ö_hi32
 = 0;

1392 
zi
->
ci
.
tŸÆUncom¥es£dD©a
 +zi->ci.
°ªam
.
tŸÆ_ö
;

1393 
zi
->
ci
.
°ªam
.
tŸÆ_ö
 = 0;

1397 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 = 0;

1399  
îr
;

1400 
	}
}

1402 
ZEXPORT
 
	$zùWrôeInFûeInZù
 (
zùFûe
 
fûe
,c⁄° * 
buf
,
Àn
)

1404 
zù64_öã∫Æ
* 
zi
;

1405 
îr
=
ZIP_OK
;

1407 i‡(
fûe
 =
NULL
)

1408  
ZIP_PARAMERROR
;

1409 
zi
 = (
zù64_öã∫Æ
*)
fûe
;

1411 i‡(
zi
->
ö_›íed_fûe_özù
 == 0)

1412  
ZIP_PARAMERROR
;

1414 
zi
->
ci
.
¸c32
 = 
	`¸c32
(zi->ci.¸c32,
buf
,(
uI¡
)
Àn
);

1416 #ifde‡
HAVE_BZIP2


1417 if(
zi
->
ci
.
mëhod
 =
Z_BZIP2ED
 && (!zi->ci.
øw
))

1419 
zi
->
ci
.
b°ªam
.
√xt_ö
 = (*)
buf
;

1420 
zi
->
ci
.
b°ªam
.
avaû_ö
 = 
Àn
;

1421 
îr
 = 
BZ_RUN_OK
;

1423 (
îr
==
BZ_RUN_OK
Ë&& (
zi
->
ci
.
b°ªam
.
avaû_ö
>0))

1425 i‡(
zi
->
ci
.
b°ªam
.
avaû_out
 == 0)

1427 i‡(
	`zù64FlushWrôeBuf„r
(
zi
Ë=
ZIP_ERRNO
)

1428 
îr
 = 
ZIP_ERRNO
;

1429 
zi
->
ci
.
b°ªam
.
avaû_out
 = (
uI¡
)
Z_BUFSIZE
;

1430 
zi
->
ci
.
b°ªam
.
√xt_out
 = (*)zi->ci.
buf„ªd_d©a
;

1434 if(
îr
 !
BZ_RUN_OK
)

1437 i‡((
zi
->
ci
.
mëhod
 =
Z_BZIP2ED
Ë&& (!zi->ci.
øw
))

1439 
uL⁄g
 
uTŸÆOutBef‹e_lo
 = 
zi
->
ci
.
b°ªam
.
tŸÆ_out_lo32
;

1441 
îr
=
	`BZ2_bzCom¥ess
(&
zi
->
ci
.
b°ªam
, 
BZ_RUN
);

1443 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 +(
uI¡
)(zi->ci.
b°ªam
.
tŸÆ_out_lo32
 - 
uTŸÆOutBef‹e_lo
) ;

1447 if(
îr
 =
BZ_RUN_OK
)

1448 
îr
 = 
ZIP_OK
;

1453 
zi
->
ci
.
°ªam
.
√xt_ö
 = (
Byãf
*)
buf
;

1454 
zi
->
ci
.
°ªam
.
avaû_ö
 = 
Àn
;

1456 (
îr
==
ZIP_OK
Ë&& (
zi
->
ci
.
°ªam
.
avaû_ö
>0))

1458 i‡(
zi
->
ci
.
°ªam
.
avaû_out
 == 0)

1460 i‡(
	`zù64FlushWrôeBuf„r
(
zi
Ë=
ZIP_ERRNO
)

1461 
îr
 = 
ZIP_ERRNO
;

1462 
zi
->
ci
.
°ªam
.
avaû_out
 = (
uI¡
)
Z_BUFSIZE
;

1463 
zi
->
ci
.
°ªam
.
√xt_out
 = zi->ci.
buf„ªd_d©a
;

1467 if(
îr
 !
ZIP_OK
)

1470 i‡((
zi
->
ci
.
mëhod
 =
Z_DEFLATED
Ë&& (!zi->ci.
øw
))

1472 
uL⁄g
 
uTŸÆOutBef‹e
 = 
zi
->
ci
.
°ªam
.
tŸÆ_out
;

1473 
îr
=
	`deÊ©e
(&
zi
->
ci
.
°ªam
, 
Z_NO_FLUSH
);

1474 if(
uTŸÆOutBef‹e
 > 
zi
->
ci
.
°ªam
.
tŸÆ_out
)

1476 
bBªak
 = 0;

1477 
bBªak
++;

1480 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 +(
uI¡
)(zi->ci.
°ªam
.
tŸÆ_out
 - 
uTŸÆOutBef‹e
) ;

1484 
uI¡
 
c›y_this
,
i
;

1485 i‡(
zi
->
ci
.
°ªam
.
avaû_ö
 < zi->ci.°ªam.
avaû_out
)

1486 
c›y_this
 = 
zi
->
ci
.
°ªam
.
avaû_ö
;

1488 
c›y_this
 = 
zi
->
ci
.
°ªam
.
avaû_out
;

1490 
i
 = 0; i < 
c›y_this
; i++)

1491 *(((*)
zi
->
ci
.
°ªam
.
√xt_out
)+
i
) =

1492 *(((c⁄° *)
zi
->
ci
.
°ªam
.
√xt_ö
)+
i
);

1494 
zi
->
ci
.
°ªam
.
avaû_ö
 -
c›y_this
;

1495 
zi
->
ci
.
°ªam
.
avaû_out
-
c›y_this
;

1496 
zi
->
ci
.
°ªam
.
√xt_ö
+
c›y_this
;

1497 
zi
->
ci
.
°ªam
.
√xt_out
+
c›y_this
;

1498 
zi
->
ci
.
°ªam
.
tŸÆ_ö
+
c›y_this
;

1499 
zi
->
ci
.
°ªam
.
tŸÆ_out
+
c›y_this
;

1500 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 +
c›y_this
;

1506  
îr
;

1507 
	}
}

1509 
ZEXPORT
 
	$zùClo£FûeInZùRaw
 (
zùFûe
 
fûe
, 
uL⁄g
 
uncom¥es£d_size
, uL⁄g 
¸c32
)

1511  
	`zùClo£FûeInZùRaw64
 (
fûe
, 
uncom¥es£d_size
, 
¸c32
);

1512 
	}
}

1514 
ZEXPORT
 
	$zùClo£FûeInZùRaw64
 (
zùFûe
 
fûe
, 
ZPOS64_T
 
uncom¥es£d_size
, 
uL⁄g
 
¸c32
)

1516 
zù64_öã∫Æ
* 
zi
;

1517 
ZPOS64_T
 
com¥es£d_size
;

1518 
uL⁄g
 
övÆidVÆue
 = 0xffffffff;

1519 
d©asize
 = 0;

1520 
îr
=
ZIP_OK
;

1522 i‡(
fûe
 =
NULL
)

1523  
ZIP_PARAMERROR
;

1524 
zi
 = (
zù64_öã∫Æ
*)
fûe
;

1526 i‡(
zi
->
ö_›íed_fûe_özù
 == 0)

1527  
ZIP_PARAMERROR
;

1528 
zi
->
ci
.
°ªam
.
avaû_ö
 = 0;

1530 i‡((
zi
->
ci
.
mëhod
 =
Z_DEFLATED
Ë&& (!zi->ci.
øw
))

1532 
îr
==
ZIP_OK
)

1534 
uL⁄g
 
uTŸÆOutBef‹e
;

1535 i‡(
zi
->
ci
.
°ªam
.
avaû_out
 == 0)

1537 i‡(
	`zù64FlushWrôeBuf„r
(
zi
Ë=
ZIP_ERRNO
)

1538 
îr
 = 
ZIP_ERRNO
;

1539 
zi
->
ci
.
°ªam
.
avaû_out
 = (
uI¡
)
Z_BUFSIZE
;

1540 
zi
->
ci
.
°ªam
.
√xt_out
 = zi->ci.
buf„ªd_d©a
;

1542 
uTŸÆOutBef‹e
 = 
zi
->
ci
.
°ªam
.
tŸÆ_out
;

1543 
îr
=
	`deÊ©e
(&
zi
->
ci
.
°ªam
, 
Z_FINISH
);

1544 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 +(
uI¡
)(zi->ci.
°ªam
.
tŸÆ_out
 - 
uTŸÆOutBef‹e
) ;

1547 i‡((
zi
->
ci
.
mëhod
 =
Z_BZIP2ED
Ë&& (!zi->ci.
øw
))

1549 #ifde‡
HAVE_BZIP2


1550 
îr
 = 
BZ_FINISH_OK
;

1551 
îr
==
BZ_FINISH_OK
)

1553 
uL⁄g
 
uTŸÆOutBef‹e
;

1554 i‡(
zi
->
ci
.
b°ªam
.
avaû_out
 == 0)

1556 i‡(
	`zù64FlushWrôeBuf„r
(
zi
Ë=
ZIP_ERRNO
)

1557 
îr
 = 
ZIP_ERRNO
;

1558 
zi
->
ci
.
b°ªam
.
avaû_out
 = (
uI¡
)
Z_BUFSIZE
;

1559 
zi
->
ci
.
b°ªam
.
√xt_out
 = (*)zi->ci.
buf„ªd_d©a
;

1561 
uTŸÆOutBef‹e
 = 
zi
->
ci
.
b°ªam
.
tŸÆ_out_lo32
;

1562 
îr
=
	`BZ2_bzCom¥ess
(&
zi
->
ci
.
b°ªam
, 
BZ_FINISH
);

1563 if(
îr
 =
BZ_STREAM_END
)

1564 
îr
 = 
Z_STREAM_END
;

1566 
zi
->
ci
.
pos_ö_buf„ªd_d©a
 +(
uI¡
)(zi->ci.
b°ªam
.
tŸÆ_out_lo32
 - 
uTŸÆOutBef‹e
);

1569 if(
îr
 =
BZ_FINISH_OK
)

1570 
îr
 = 
ZIP_OK
;

1574 i‡(
îr
==
Z_STREAM_END
)

1575 
îr
=
ZIP_OK
;

1577 i‡((
zi
->
ci
.
pos_ö_buf„ªd_d©a
>0Ë&& (
îr
==
ZIP_OK
))

1579 i‡(
	`zù64FlushWrôeBuf„r
(
zi
)==
ZIP_ERRNO
)

1580 
îr
 = 
ZIP_ERRNO
;

1583 i‡((
zi
->
ci
.
mëhod
 =
Z_DEFLATED
Ë&& (!zi->ci.
øw
))

1585 
tmp_îr
 = 
	`deÊ©eEnd
(&
zi
->
ci
.
°ªam
);

1586 i‡(
îr
 =
ZIP_OK
)

1587 
îr
 = 
tmp_îr
;

1588 
zi
->
ci
.
°ªam_öôüli£d
 = 0;

1590 #ifde‡
HAVE_BZIP2


1591 if((
zi
->
ci
.
mëhod
 =
Z_BZIP2ED
Ë&& (!zi->ci.
øw
))

1593 
tm≥º
 = 
	`BZ2_bzCom¥essEnd
(&
zi
->
ci
.
b°ªam
);

1594 i‡(
îr
==
ZIP_OK
)

1595 
îr
 = 
tm≥º
;

1596 
zi
->
ci
.
°ªam_öôüli£d
 = 0;

1600 i‡(!
zi
->
ci
.
øw
)

1602 
¸c32
 = (
uL⁄g
)
zi
->
ci
.crc32;

1603 
uncom¥es£d_size
 = 
zi
->
ci
.
tŸÆUncom¥es£dD©a
;

1605 
com¥es£d_size
 = 
zi
->
ci
.
tŸÆCom¥es£dD©a
;

1607 #i‚de‡
NOCRYPT


1608 
com¥es£d_size
 +
zi
->
ci
.
¸y±_hódî_size
;

1612 if(
com¥es£d_size
 >0xfffffff‡|| 
uncom¥es£d_size
 >0xfffffff‡|| 
zi
->
ci
.
pos_loˇl_hódî
 >= 0xffffffff)

1615 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+4,(
uL⁄g
)45,2);

1617 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+6,(
uL⁄g
)45,2);

1621 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+16,
¸c32
,4);

1624 if(
com¥es£d_size
 >= 0xffffffff)

1625 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+20, 
övÆidVÆue
,4);

1627 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+20, 
com¥es£d_size
,4);

1630 i‡(
zi
->
ci
.
°ªam
.
d©a_ty≥
 =
Z_ASCII
)

1631 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+36,(
uL⁄g
)
Z_ASCII
,2);

1633 if(
uncom¥es£d_size
 >= 0xffffffff)

1634 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+24, 
övÆidVÆue
,4);

1636 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+24, 
uncom¥es£d_size
,4);

1639 if(
uncom¥es£d_size
 >= 0xffffffff)

1640 
d©asize
 += 8;

1643 if(
com¥es£d_size
 >= 0xffffffff)

1644 
d©asize
 += 8;

1647 if(
zi
->
ci
.
pos_loˇl_hódî
 >= 0xffffffff)

1648 
d©asize
 += 8;

1650 if(
d©asize
 > 0)

1652 * 
p
 = 
NULL
;

1654 if((
uL⁄g
)(
d©asize
 + 4Ë> 
zi
->
ci
.
size_˚¡ølExåaFªe
)

1657  
ZIP_BADZIPFILE
;

1660 
p
 = 
zi
->
ci
.
˚¡øl_hódî
 + zi->ci.
size_˚¡ølhódî
;

1663 
	`zù64loˇl_putVÆue_ömem‹y
(
p
, 0x0001, 2);

1664 
p
 += 2;

1665 
	`zù64loˇl_putVÆue_ömem‹y
(
p
, 
d©asize
, 2);

1666 
p
 += 2;

1668 if(
uncom¥es£d_size
 >= 0xffffffff)

1670 
	`zù64loˇl_putVÆue_ömem‹y
(
p
, 
uncom¥es£d_size
, 8);

1671 
p
 += 8;

1674 if(
com¥es£d_size
 >= 0xffffffff)

1676 
	`zù64loˇl_putVÆue_ömem‹y
(
p
, 
com¥es£d_size
, 8);

1677 
p
 += 8;

1680 if(
zi
->
ci
.
pos_loˇl_hódî
 >= 0xffffffff)

1682 
	`zù64loˇl_putVÆue_ömem‹y
(
p
, 
zi
->
ci
.
pos_loˇl_hódî
, 8);

1683 
p
 += 8;

1689 
zi
->
ci
.
size_˚¡ølExåaFªe
 -
d©asize
 + 4;

1690 
zi
->
ci
.
size_˚¡ølhódî
 +
d©asize
 + 4;

1693 
zi
->
ci
.
size_˚¡ølExåa
 +
d©asize
 + 4;

1694 
	`zù64loˇl_putVÆue_ömem‹y
(
zi
->
ci
.
˚¡øl_hódî
+30,(
uL⁄g
)zi->ci.
size_˚¡ølExåa
,2);

1697 i‡(
îr
==
ZIP_OK
)

1698 
îr
 = 
	`add_d©a_ö_d©ablock
(&
zi
->
˚¡øl_dú
, zi->
ci
.
˚¡øl_hódî
, (
uL⁄g
)zi->ci.
size_˚¡ølhódî
);

1700 
	`‰ì
(
zi
->
ci
.
˚¡øl_hódî
);

1702 i‡(
îr
==
ZIP_OK
)

1706 
ZPOS64_T
 
cur_pos_özù
 = 
	`ZTELL64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
);

1708 i‡(
	`ZSEEK64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
, zi->
ci
.
pos_loˇl_hódî
 + 14,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1709 
îr
 = 
ZIP_ERRNO
;

1711 i‡(
îr
==
ZIP_OK
)

1712 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,
¸c32
,4);

1714 if(
uncom¥es£d_size
 >0xfffffff‡|| 
com¥es£d_size
 >= 0xffffffff )

1716 if(
zi
->
ci
.
pos_zù64exåaöfo
 > 0)

1719 i‡(
	`ZSEEK64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
, zi->
ci
.
pos_zù64exåaöfo
 + 4,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1720 
îr
 = 
ZIP_ERRNO
;

1722 i‡(
îr
==
ZIP_OK
)

1723 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
, zi->
fûe°ªam
, 
uncom¥es£d_size
, 8);

1725 i‡(
îr
==
ZIP_OK
)

1726 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
, zi->
fûe°ªam
, 
com¥es£d_size
, 8);

1729 
îr
 = 
ZIP_BADZIPFILE
;

1733 i‡(
îr
==
ZIP_OK
)

1734 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,
com¥es£d_size
,4);

1736 i‡(
îr
==
ZIP_OK
)

1737 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,
uncom¥es£d_size
,4);

1740 i‡(
	`ZSEEK64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
, 
cur_pos_özù
,
ZLIB_FILEFUNC_SEEK_SET
)!=0)

1741 
îr
 = 
ZIP_ERRNO
;

1744 
zi
->
numbî_íåy
 ++;

1745 
zi
->
ö_›íed_fûe_özù
 = 0;

1747  
îr
;

1748 
	}
}

1750 
ZEXPORT
 
	$zùClo£FûeInZù
 (
zùFûe
 
fûe
)

1752  
	`zùClo£FûeInZùRaw
 (
fûe
,0,0);

1753 
	}
}

1755 
	$Wrôe_Zù64EndOfCíåÆDúe˘‹yLoˇt‹
(
zù64_öã∫Æ
* 
zi
, 
ZPOS64_T
 
zù64eocd_pos_özù
)

1757 
îr
 = 
ZIP_OK
;

1758 
ZPOS64_T
 
pos
 = 
zù64eocd_pos_özù
 - 
zi
->
add_posôi⁄_whí_wrôtög_off£t
;

1760 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
ZIP64ENDLOCHEADERMAGIC
,4);

1763 i‡(
îr
==
ZIP_OK
)

1764 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,4);

1767 i‡(
îr
==
ZIP_OK
)

1768 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
, 
pos
,8);

1771 i‡(
îr
==
ZIP_OK
)

1772 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)1,4);

1774  
îr
;

1775 
	}
}

1777 
	$Wrôe_Zù64EndOfCíåÆDúe˘‹yRec‹d
(
zù64_öã∫Æ
* 
zi
, 
uL⁄g
 
size_˚¡øldú
, 
ZPOS64_T
 
˚¡øldú_pos_özù
)

1779 
îr
 = 
ZIP_OK
;

1781 
uL⁄g
 
Zù64D©aSize
 = 44;

1783 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
ZIP64ENDHEADERMAGIC
,4);

1785 i‡(
îr
==
ZIP_OK
)

1786 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
ZPOS64_T
)
Zù64D©aSize
,8);

1788 i‡(
îr
==
ZIP_OK
)

1789 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)45,2);

1791 i‡(
îr
==
ZIP_OK
)

1792 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)45,2);

1794 i‡(
îr
==
ZIP_OK
)

1795 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,4);

1797 i‡(
îr
==
ZIP_OK
)

1798 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,4);

1800 i‡(
îr
==
ZIP_OK
)

1801 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
, zi->
fûe°ªam
, zi->
numbî_íåy
, 8);

1803 i‡(
îr
==
ZIP_OK
)

1804 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
, zi->
fûe°ªam
, zi->
numbî_íåy
, 8);

1806 i‡(
îr
==
ZIP_OK
)

1807 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
ZPOS64_T
)
size_˚¡øldú
,8);

1809 i‡(
îr
==
ZIP_OK
)

1811 
ZPOS64_T
 
pos
 = 
˚¡øldú_pos_özù
 - 
zi
->
add_posôi⁄_whí_wrôtög_off£t
;

1812 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
, (
ZPOS64_T
)
pos
,8);

1814  
îr
;

1815 
	}
}

1816 
	$Wrôe_EndOfCíåÆDúe˘‹yRec‹d
(
zù64_öã∫Æ
* 
zi
, 
uL⁄g
 
size_˚¡øldú
, 
ZPOS64_T
 
˚¡øldú_pos_özù
)

1818 
îr
 = 
ZIP_OK
;

1821 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
ENDHEADERMAGIC
,4);

1823 i‡(
îr
==
ZIP_OK
)

1824 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,2);

1826 i‡(
îr
==
ZIP_OK
)

1827 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0,2);

1829 i‡(
îr
==
ZIP_OK
)

1832 if(
zi
->
numbî_íåy
 >= 0xFFFF)

1833 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0xffff,2);

1835 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
numbî_íåy
,2);

1839 i‡(
îr
==
ZIP_OK
)

1841 if(
zi
->
numbî_íåy
 >= 0xFFFF)

1842 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)0xffff,2);

1844 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)zi->
numbî_íåy
,2);

1847 i‡(
îr
==
ZIP_OK
)

1848 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
size_˚¡øldú
,4);

1850 i‡(
îr
==
ZIP_OK
)

1852 
ZPOS64_T
 
pos
 = 
˚¡øldú_pos_özù
 - 
zi
->
add_posôi⁄_whí_wrôtög_off£t
;

1853 if(
pos
 >= 0xffffffff)

1855 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
, (
uL⁄g
)0xffffffff,4);

1858 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
, (
uL⁄g
)(
˚¡øldú_pos_özù
 - zi->
add_posôi⁄_whí_wrôtög_off£t
),4);

1861  
îr
;

1862 
	}
}

1864 
	$Wrôe_GlobÆCommít
(
zù64_öã∫Æ
* 
zi
, c⁄° * 
globÆ_commít
)

1866 
îr
 = 
ZIP_OK
;

1867 
uI¡
 
size_globÆ_commít
 = 0;

1869 if(
globÆ_commít
 !
NULL
)

1870 
size_globÆ_commít
 = (
uI¡
)
	`°æí
(
globÆ_commít
);

1872 
îr
 = 
	`zù64loˇl_putVÆue
(&
zi
->
z_fûefunc
,zi->
fûe°ªam
,(
uL⁄g
)
size_globÆ_commít
,2);

1874 i‡(
îr
 =
ZIP_OK
 && 
size_globÆ_commít
 > 0)

1876 i‡(
	`ZWRITE64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
, 
globÆ_commít
, 
size_globÆ_commít
) != size_global_comment)

1877 
îr
 = 
ZIP_ERRNO
;

1879  
îr
;

1880 
	}
}

1882 
ZEXPORT
 
	$zùClo£
 (
zùFûe
 
fûe
, c⁄° * 
globÆ_commít
)

1884 
zù64_öã∫Æ
* 
zi
;

1885 
îr
 = 0;

1886 
uL⁄g
 
size_˚¡øldú
 = 0;

1887 
ZPOS64_T
 
˚¡øldú_pos_özù
;

1888 
ZPOS64_T
 
pos
;

1890 i‡(
fûe
 =
NULL
)

1891  
ZIP_PARAMERROR
;

1893 
zi
 = (
zù64_öã∫Æ
*)
fûe
;

1895 i‡(
zi
->
ö_›íed_fûe_özù
 == 1)

1897 
îr
 = 
	`zùClo£FûeInZù
 (
fûe
);

1900 #i‚de‡
NO_ADDFILEINEXISTINGZIP


1901 i‡(
globÆ_commít
==
NULL
)

1902 
globÆ_commít
 = 
zi
->
globÆcommít
;

1905 
˚¡øldú_pos_özù
 = 
	`ZTELL64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
);

1907 i‡(
îr
==
ZIP_OK
)

1909 
lökedli°_d©ablock_öã∫Æ
* 
ldi
 = 
zi
->
˚¡øl_dú
.
fú°_block
;

1910 
ldi
!=
NULL
)

1912 i‡((
îr
==
ZIP_OK
Ë&& (
ldi
->
fûÀd_ö_this_block
>0))

1914 i‡(
	`ZWRITE64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
, 
ldi
->
d©a
,Üdi->
fûÀd_ö_this_block
) !=Üdi->filled_in_this_block)

1915 
îr
 = 
ZIP_ERRNO
;

1918 
size_˚¡øldú
 +
ldi
->
fûÀd_ö_this_block
;

1919 
ldi
 =Üdi->
√xt_d©ablock
;

1922 
	`‰ì_lökedli°
(&(
zi
->
˚¡øl_dú
));

1924 
pos
 = 
˚¡øldú_pos_özù
 - 
zi
->
add_posôi⁄_whí_wrôtög_off£t
;

1925 if(
pos
 >0xfffffff‡|| 
zi
->
numbî_íåy
 > 0xFFFF)

1927 
ZPOS64_T
 
Zù64EOCDpos
 = 
	`ZTELL64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
);

1928 
	`Wrôe_Zù64EndOfCíåÆDúe˘‹yRec‹d
(
zi
, 
size_˚¡øldú
, 
˚¡øldú_pos_özù
);

1930 
	`Wrôe_Zù64EndOfCíåÆDúe˘‹yLoˇt‹
(
zi
, 
Zù64EOCDpos
);

1933 i‡(
îr
==
ZIP_OK
)

1934 
îr
 = 
	`Wrôe_EndOfCíåÆDúe˘‹yRec‹d
(
zi
, 
size_˚¡øldú
, 
˚¡øldú_pos_özù
);

1936 if(
îr
 =
ZIP_OK
)

1937 
îr
 = 
	`Wrôe_GlobÆCommít
(
zi
, 
globÆ_commít
);

1939 i‡(
	`ZCLOSE64
(
zi
->
z_fûefunc
,zi->
fûe°ªam
) != 0)

1940 i‡(
îr
 =
ZIP_OK
)

1941 
îr
 = 
ZIP_ERRNO
;

1943 #i‚de‡
NO_ADDFILEINEXISTINGZIP


1944 
	`TRYFREE
(
zi
->
globÆcommít
);

1946 
	`TRYFREE
(
zi
);

1948  
îr
;

1949 
	}
}

1951 
ZEXPORT
 
	$zùRemoveExåaInfoBlock
 (* 
pD©a
, * 
d©aLí
, 
sHódî
)

1953 * 
p
 = 
pD©a
;

1954 
size
 = 0;

1955 * 
pNewHódî
;

1956 * 
pTmp
;

1957 
hódî
;

1958 
d©aSize
;

1960 
ªtVÆ
 = 
ZIP_OK
;

1962 if(
pD©a
 =
NULL
 || *
d©aLí
 < 4)

1963  
ZIP_PARAMERROR
;

1965 
pNewHódî
 = (*)
	`ALLOC
(*
d©aLí
);

1966 
pTmp
 = 
pNewHódî
;

1968 
p
 < (
pD©a
 + *
d©aLí
))

1970 
hódî
 = *(*)
p
;

1971 
d©aSize
 = *(((*)
p
)+1);

1973 if–
hódî
 =
sHódî
 )

1975 
p
 +
d©aSize
 + 4;

1980 
	`mem˝y
(
pTmp
, 
p
, 
d©aSize
 + 4);

1981 
p
 +
d©aSize
 + 4;

1982 
size
 +
d©aSize
 + 4;

1987 if(
size
 < *
d©aLí
)

1990 
	`mem£t
(
pD©a
,0, *
d©aLí
);

1993 if(
size
 > 0)

1994 
	`mem˝y
(
pD©a
, 
pNewHódî
, 
size
);

1997 *
d©aLí
 = 
size
;

1999 
ªtVÆ
 = 
ZIP_OK
;

2002 
ªtVÆ
 = 
ZIP_ERRNO
;

2004 
	`TRYFREE
(
pNewHódî
);

2006  
ªtVÆ
;

2007 
	}
}

	@zlib-1.2.8/contrib/minizip/zip.h

40 #i‚de‡
_zù12_H


41 
	#_zù12_H


	)

43 #ifde‡
__˝lu•lus


49 #i‚de‡
_ZLIB_H


50 
	~"zlib.h
"

53 #i‚de‡
_ZLIBIOAPI_H


54 
	~"iﬂpi.h
"

57 #ifde‡
HAVE_BZIP2


58 
	~"bzlib.h
"

61 
	#Z_BZIP2ED
 12

	)

63 #i‡
deföed
(
STRICTZIP
Ë|| deföed(
STRICTZIPUNZIP
)

66 
	sTagzùFûe__
 { 
unu£d
; } 
	tzùFûe__
;

67 
zùFûe__
 *
	tzùFûe
;

69 
voidp
 
	tzùFûe
;

72 
	#ZIP_OK
 (0)

	)

73 
	#ZIP_EOF
 (0)

	)

74 
	#ZIP_ERRNO
 (
Z_ERRNO
)

	)

75 
	#ZIP_PARAMERROR
 (-102)

	)

76 
	#ZIP_BADZIPFILE
 (-103)

	)

77 
	#ZIP_INTERNALERROR
 (-104)

	)

79 #i‚de‡
DEF_MEM_LEVEL


80 #i‡
MAX_MEM_LEVEL
 >= 8

81 
	#DEF_MEM_LEVEL
 8

	)

83 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

89 
	stm_zù_s


91 
uI¡
 
tm_£c
;

92 
uI¡
 
tm_mö
;

93 
uI¡
 
tm_hour
;

94 
uI¡
 
tm_mday
;

95 
uI¡
 
tm_m⁄
;

96 
uI¡
 
tm_yór
;

97 } 
	ttm_zù
;

101 
tm_zù
 
tmz_d©e
;

102 
uL⁄g
 
dosD©e
;

105 
uL⁄g
 
öã∫Æ_Á
;

106 
uL⁄g
 
exã∫Æ_Á
;

107 } 
	tzù_fûeöfo
;

109 c⁄° * 
	tzùch¨pc
;

112 
	#APPEND_STATUS_CREATE
 (0)

	)

113 
	#APPEND_STATUS_CREATEAFTER
 (1)

	)

114 
	#APPEND_STATUS_ADDINZIP
 (2)

	)

116 
zùFûe
 
ZEXPORT
 
zùO≥n
 
OF
((c⁄° *
∑th«me
, 
≠≥nd
));

117 
zùFûe
 
ZEXPORT
 
zùO≥n64
 
OF
((c⁄° *
∑th«me
, 
≠≥nd
));

137 
zùFûe
 
ZEXPORT
 
zùO≥n2
 
OF
((c⁄° *
∑th«me
,

138 
≠≥nd
,

139 
zùch¨pc
* 
globÆcommít
,

140 
zlib_fûefunc_def
* 
pzlib_fûefunc_def
));

142 
zùFûe
 
ZEXPORT
 
zùO≥n2_64
 
OF
((c⁄° *
∑th«me
,

143 
≠≥nd
,

144 
zùch¨pc
* 
globÆcommít
,

145 
zlib_fûefunc64_def
* 
pzlib_fûefunc_def
));

147 
ZEXPORT
 
zùO≥nNewFûeInZù
 
OF
((
zùFûe
 
fûe
,

148 c⁄° * 
fûíame
,

149 c⁄° 
zù_fûeöfo
* 
zùfi
,

150 c⁄° * 
exåafõld_loˇl
,

151 
uI¡
 
size_exåafõld_loˇl
,

152 c⁄° * 
exåafõld_globÆ
,

153 
uI¡
 
size_exåafõld_globÆ
,

154 c⁄° * 
commít
,

155 
mëhod
,

156 
Àvñ
));

158 
ZEXPORT
 
zùO≥nNewFûeInZù64
 
OF
((
zùFûe
 
fûe
,

159 c⁄° * 
fûíame
,

160 c⁄° 
zù_fûeöfo
* 
zùfi
,

161 c⁄° * 
exåafõld_loˇl
,

162 
uI¡
 
size_exåafõld_loˇl
,

163 c⁄° * 
exåafõld_globÆ
,

164 
uI¡
 
size_exåafõld_globÆ
,

165 c⁄° * 
commít
,

166 
mëhod
,

167 
Àvñ
,

168 
zù64
));

187 
ZEXPORT
 
zùO≥nNewFûeInZù2
 
OF
((
zùFûe
 
fûe
,

188 c⁄° * 
fûíame
,

189 c⁄° 
zù_fûeöfo
* 
zùfi
,

190 c⁄° * 
exåafõld_loˇl
,

191 
uI¡
 
size_exåafõld_loˇl
,

192 c⁄° * 
exåafõld_globÆ
,

193 
uI¡
 
size_exåafõld_globÆ
,

194 c⁄° * 
commít
,

195 
mëhod
,

196 
Àvñ
,

197 
øw
));

200 
ZEXPORT
 
zùO≥nNewFûeInZù2_64
 
OF
((
zùFûe
 
fûe
,

201 c⁄° * 
fûíame
,

202 c⁄° 
zù_fûeöfo
* 
zùfi
,

203 c⁄° * 
exåafõld_loˇl
,

204 
uI¡
 
size_exåafõld_loˇl
,

205 c⁄° * 
exåafõld_globÆ
,

206 
uI¡
 
size_exåafõld_globÆ
,

207 c⁄° * 
commít
,

208 
mëhod
,

209 
Àvñ
,

210 
øw
,

211 
zù64
));

216 
ZEXPORT
 
zùO≥nNewFûeInZù3
 
OF
((
zùFûe
 
fûe
,

217 c⁄° * 
fûíame
,

218 c⁄° 
zù_fûeöfo
* 
zùfi
,

219 c⁄° * 
exåafõld_loˇl
,

220 
uI¡
 
size_exåafõld_loˇl
,

221 c⁄° * 
exåafõld_globÆ
,

222 
uI¡
 
size_exåafõld_globÆ
,

223 c⁄° * 
commít
,

224 
mëhod
,

225 
Àvñ
,

226 
øw
,

227 
wödowBôs
,

228 
memLevñ
,

229 
°øãgy
,

230 c⁄° * 
∑ssw‹d
,

231 
uL⁄g
 
¸cF‹Cry±ög
));

233 
ZEXPORT
 
zùO≥nNewFûeInZù3_64
 
OF
((
zùFûe
 
fûe
,

234 c⁄° * 
fûíame
,

235 c⁄° 
zù_fûeöfo
* 
zùfi
,

236 c⁄° * 
exåafõld_loˇl
,

237 
uI¡
 
size_exåafõld_loˇl
,

238 c⁄° * 
exåafõld_globÆ
,

239 
uI¡
 
size_exåafõld_globÆ
,

240 c⁄° * 
commít
,

241 
mëhod
,

242 
Àvñ
,

243 
øw
,

244 
wödowBôs
,

245 
memLevñ
,

246 
°øãgy
,

247 c⁄° * 
∑ssw‹d
,

248 
uL⁄g
 
¸cF‹Cry±ög
,

249 
zù64


259 
ZEXPORT
 
zùO≥nNewFûeInZù4
 
OF
((
zùFûe
 
fûe
,

260 c⁄° * 
fûíame
,

261 c⁄° 
zù_fûeöfo
* 
zùfi
,

262 c⁄° * 
exåafõld_loˇl
,

263 
uI¡
 
size_exåafõld_loˇl
,

264 c⁄° * 
exåafõld_globÆ
,

265 
uI¡
 
size_exåafõld_globÆ
,

266 c⁄° * 
commít
,

267 
mëhod
,

268 
Àvñ
,

269 
øw
,

270 
wödowBôs
,

271 
memLevñ
,

272 
°øãgy
,

273 c⁄° * 
∑ssw‹d
,

274 
uL⁄g
 
¸cF‹Cry±ög
,

275 
uL⁄g
 
vîsi⁄MadeBy
,

276 
uL⁄g
 
ÊagBa£


280 
ZEXPORT
 
zùO≥nNewFûeInZù4_64
 
OF
((
zùFûe
 
fûe
,

281 c⁄° * 
fûíame
,

282 c⁄° 
zù_fûeöfo
* 
zùfi
,

283 c⁄° * 
exåafõld_loˇl
,

284 
uI¡
 
size_exåafõld_loˇl
,

285 c⁄° * 
exåafõld_globÆ
,

286 
uI¡
 
size_exåafõld_globÆ
,

287 c⁄° * 
commít
,

288 
mëhod
,

289 
Àvñ
,

290 
øw
,

291 
wödowBôs
,

292 
memLevñ
,

293 
°øãgy
,

294 c⁄° * 
∑ssw‹d
,

295 
uL⁄g
 
¸cF‹Cry±ög
,

296 
uL⁄g
 
vîsi⁄MadeBy
,

297 
uL⁄g
 
ÊagBa£
,

298 
zù64


307 
ZEXPORT
 
zùWrôeInFûeInZù
 
OF
((
zùFûe
 
fûe
,

308 c⁄° * 
buf
,

309 
Àn
));

314 
ZEXPORT
 
zùClo£FûeInZù
 
OF
((
zùFûe
 
fûe
));

319 
ZEXPORT
 
zùClo£FûeInZùRaw
 
OF
((
zùFûe
 
fûe
,

320 
uL⁄g
 
uncom¥es£d_size
,

321 
uL⁄g
 
¸c32
));

323 
ZEXPORT
 
zùClo£FûeInZùRaw64
 
OF
((
zùFûe
 
fûe
,

324 
ZPOS64_T
 
uncom¥es£d_size
,

325 
uL⁄g
 
¸c32
));

333 
ZEXPORT
 
zùClo£
 
OF
((
zùFûe
 
fûe
,

334 c⁄° * 
globÆ_commít
));

340 
ZEXPORT
 
zùRemoveExåaInfoBlock
 
OF
((* 
pD©a
, * 
d©aLí
, 
sHódî
));

358 #ifde‡
__˝lu•lus


	@zlib-1.2.8/contrib/puff/puff.c

82 
	~<£tjmp.h
>

83 
	~"puff.h
"

85 
	#loˇl
 

	)

91 
	#MAXBITS
 15

	)

92 
	#MAXLCODES
 286

	)

93 
	#MAXDCODES
 30

	)

94 
	#MAXCODES
 (
MAXLCODES
+
MAXDCODES
Ë

	)

95 
	#FIXLCODES
 288

	)

98 
	s°©e
 {

100 *
	mout
;

101 
	mouéí
;

102 
	mout˙t
;

105 c⁄° *
	mö
;

106 
	möÀn
;

107 
	mö˙t
;

108 
	mbôbuf
;

109 
	mbô˙t
;

112 
jmp_buf
 
	mív
;

126 
loˇl
 
	$bôs
(
°©e
 *
s
, 
√ed
)

128 
vÆ
;

131 
vÆ
 = 
s
->
bôbuf
;

132 
s
->
bô˙t
 < 
√ed
) {

133 i‡(
s
->
ö˙t
 =s->
öÀn
)

134 
	`l⁄gjmp
(
s
->
ív
, 1);

135 
vÆ
 |()(
s
->
ö
[s->
ö˙t
++]Ë<< s->
bô˙t
;

136 
s
->
bô˙t
 += 8;

140 
s
->
bôbuf
 = ()(
vÆ
 >> 
√ed
);

141 
s
->
bô˙t
 -
√ed
;

144  ()(
vÆ
 & ((1L << 
√ed
) - 1));

145 
	}
}

164 
loˇl
 
	$°‹ed
(
°©e
 *
s
)

166 
Àn
;

169 
s
->
bôbuf
 = 0;

170 
s
->
bô˙t
 = 0;

173 i‡(
s
->
ö˙t
 + 4 > s->
öÀn
)

175 
Àn
 = 
s
->
ö
[s->
ö˙t
++];

176 
Àn
 |
s
->
ö
[s->
ö˙t
++] << 8;

177 i‡(
s
->
ö
[s->
ö˙t
++] !(~
Àn
 & 0xff) ||

178 
s
->
ö
[s->
ö˙t
++] !((~
Àn
 >> 8) & 0xff))

182 i‡(
s
->
ö˙t
 + 
Àn
 > s->
öÀn
)

184 i‡(
s
->
out
 !
NIL
) {

185 i‡(
s
->
out˙t
 + 
Àn
 > s->
ouéí
)

187 
Àn
--)

188 
s
->
out
[s->
out˙t
++] = s->
ö
[s->
ö˙t
++];

191 
s
->
out˙t
 +
Àn
;

192 
s
->
ö˙t
 +
Àn
;

197 
	}
}

206 
	shuffm™
 {

207 *
	mcou¡
;

208 *
	msymbﬁ
;

234 #ifde‡
SLOW


235 
loˇl
 
	$decode
(
°©e
 *
s
, c⁄° 
huffm™
 *
h
)

237 
Àn
;

238 
code
;

239 
fú°
;

240 
cou¡
;

241 
ödex
;

243 
code
 = 
fú°
 = 
ödex
 = 0;

244 
Àn
 = 1;Üí <
MAXBITS
;Üen++) {

245 
code
 |
	`bôs
(
s
, 1);

246 
cou¡
 = 
h
->cou¡[
Àn
];

247 i‡(
code
 - 
cou¡
 < 
fú°
)

248  
h
->
symbﬁ
[
ödex
 + (
code
 - 
fú°
)];

249 
ödex
 +
cou¡
;

250 
fú°
 +
cou¡
;

251 
fú°
 <<= 1;

252 
code
 <<= 1;

255 
	}
}

263 
loˇl
 
	$decode
(
°©e
 *
s
, c⁄° 
huffm™
 *
h
)

265 
Àn
;

266 
code
;

267 
fú°
;

268 
cou¡
;

269 
ödex
;

270 
bôbuf
;

271 
À·
;

272 *
√xt
;

274 
bôbuf
 = 
s
->bitbuf;

275 
À·
 = 
s
->
bô˙t
;

276 
code
 = 
fú°
 = 
ödex
 = 0;

277 
Àn
 = 1;

278 
√xt
 = 
h
->
cou¡
 + 1;

280 
À·
--) {

281 
code
 |
bôbuf
 & 1;

282 
bôbuf
 >>= 1;

283 
cou¡
 = *
√xt
++;

284 i‡(
code
 - 
cou¡
 < 
fú°
) {

285 
s
->
bôbuf
 = bitbuf;

286 
s
->
bô˙t
 = (s->bô˙à- 
Àn
) & 7;

287  
h
->
symbﬁ
[
ödex
 + (
code
 - 
fú°
)];

289 
ödex
 +
cou¡
;

290 
fú°
 +
cou¡
;

291 
fú°
 <<= 1;

292 
code
 <<= 1;

293 
Àn
++;

295 
À·
 = (
MAXBITS
+1Ë- 
Àn
;

296 i‡(
À·
 == 0)

298 i‡(
s
->
ö˙t
 =s->
öÀn
)

299 
	`l⁄gjmp
(
s
->
ív
, 1);

300 
bôbuf
 = 
s
->
ö
[s->
ö˙t
++];

301 i‡(
À·
 > 8)

302 
À·
 = 8;

305 
	}
}

340 
loˇl
 
	$c⁄°ru˘
(
huffm™
 *
h
, c⁄° *
Àngth
, 
n
)

342 
symbﬁ
;

343 
Àn
;

344 
À·
;

345 
offs
[
MAXBITS
+1];

348 
Àn
 = 0;Üí <
MAXBITS
;Üen++)

349 
h
->
cou¡
[
Àn
] = 0;

350 
symbﬁ
 = 0; symbﬁ < 
n
; symbol++)

351 (
h
->
cou¡
[
Àngth
[
symbﬁ
]])++;

352 i‡(
h
->
cou¡
[0] =
n
)

356 
À·
 = 1;

357 
Àn
 = 1;Üí <
MAXBITS
;Üen++) {

358 
À·
 <<= 1;

359 
À·
 -
h
->
cou¡
[
Àn
];

360 i‡(
À·
 < 0)

361  
À·
;

365 
offs
[1] = 0;

366 
Àn
 = 1;Üí < 
MAXBITS
;Üen++)

367 
offs
[
Àn
 + 1] = offs[Àn] + 
h
->
cou¡
[len];

373 
symbﬁ
 = 0; symbﬁ < 
n
; symbol++)

374 i‡(
Àngth
[
symbﬁ
] != 0)

375 
h
->
symbﬁ
[
offs
[
Àngth
[symbol]]++] = symbol;

378  
À·
;

379 
	}
}

436 
loˇl
 
	$codes
(
°©e
 *
s
,

437 c⁄° 
huffm™
 *
Àncode
,

438 c⁄° 
huffm™
 *
di°code
)

440 
symbﬁ
;

441 
Àn
;

442 
di°
;

443 c⁄° 
Àns
[29] = {

446 c⁄° 
Àxt
[29] = {

449 c⁄° 
di°s
[30] = {

453 c⁄° 
dext
[30] = {

460 
symbﬁ
 = 
	`decode
(
s
, 
Àncode
);

461 i‡(
symbﬁ
 < 0)

462  
symbﬁ
;

463 i‡(
symbﬁ
 < 256) {

465 i‡(
s
->
out
 !
NIL
) {

466 i‡(
s
->
out˙t
 =s->
ouéí
)

468 
s
->
out
[s->
out˙t
] = 
symbﬁ
;

470 
s
->
out˙t
++;

472 i‡(
symbﬁ
 > 256) {

474 
symbﬁ
 -= 257;

475 i‡(
symbﬁ
 >= 29)

477 
Àn
 = 
Àns
[
symbﬁ
] + 
	`bôs
(
s
, 
Àxt
[symbol]);

480 
symbﬁ
 = 
	`decode
(
s
, 
di°code
);

481 i‡(
symbﬁ
 < 0)

482  
symbﬁ
;

483 
di°
 = 
di°s
[
symbﬁ
] + 
	`bôs
(
s
, 
dext
[symbol]);

484 #i‚de‡
INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR


485 i‡(
di°
 > 
s
->
out˙t
)

490 i‡(
s
->
out
 !
NIL
) {

491 i‡(
s
->
out˙t
 + 
Àn
 > s->
ouéí
)

493 
Àn
--) {

494 
s
->
out
[s->
out˙t
] =

495 #ifde‡
INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR


496 
di°
 > 
s
->
out˙t
 ?

499 
s
->
out
[s->
out˙t
 - 
di°
];

500 
s
->
out˙t
++;

504 
s
->
out˙t
 +
Àn
;

506 } 
symbﬁ
 != 256);

510 
	}
}

536 
loˇl
 
	$fixed
(
°©e
 *
s
)

538 
vúgö
 = 1;

539 
Àn˙t
[
MAXBITS
+1], 
Ànsym
[
FIXLCODES
];

540 
di°˙t
[
MAXBITS
+1], 
di°sym
[
MAXDCODES
];

541 
huffm™
 
Àncode
, 
di°code
;

544 i‡(
vúgö
) {

545 
symbﬁ
;

546 
Àngths
[
FIXLCODES
];

549 
Àncode
.
cou¡
 = 
Àn˙t
;

550 
Àncode
.
symbﬁ
 = 
Ànsym
;

551 
di°code
.
cou¡
 = 
di°˙t
;

552 
di°code
.
symbﬁ
 = 
di°sym
;

555 
symbﬁ
 = 0; symbol < 144; symbol++)

556 
Àngths
[
symbﬁ
] = 8;

557 ; 
symbﬁ
 < 256; symbol++)

558 
Àngths
[
symbﬁ
] = 9;

559 ; 
symbﬁ
 < 280; symbol++)

560 
Àngths
[
symbﬁ
] = 7;

561 ; 
symbﬁ
 < 
FIXLCODES
; symbol++)

562 
Àngths
[
symbﬁ
] = 8;

563 
	`c⁄°ru˘
(&
Àncode
, 
Àngths
, 
FIXLCODES
);

566 
symbﬁ
 = 0; symbﬁ < 
MAXDCODES
; symbol++)

567 
Àngths
[
symbﬁ
] = 5;

568 
	`c⁄°ru˘
(&
di°code
, 
Àngths
, 
MAXDCODES
);

571 
vúgö
 = 0;

575  
	`codes
(
s
, &
Àncode
, &
di°code
);

576 
	}
}

665 
loˇl
 
	$dy«mic
(
°©e
 *
s
)

667 
∆í
, 
ndi°
, 
ncode
;

668 
ödex
;

669 
îr
;

670 
Àngths
[
MAXCODES
];

671 
Àn˙t
[
MAXBITS
+1], 
Ànsym
[
MAXLCODES
];

672 
di°˙t
[
MAXBITS
+1], 
di°sym
[
MAXDCODES
];

673 
huffm™
 
Àncode
, 
di°code
;

674 c⁄° 
‹dî
[19] =

678 
Àncode
.
cou¡
 = 
Àn˙t
;

679 
Àncode
.
symbﬁ
 = 
Ànsym
;

680 
di°code
.
cou¡
 = 
di°˙t
;

681 
di°code
.
symbﬁ
 = 
di°sym
;

684 
∆í
 = 
	`bôs
(
s
, 5) + 257;

685 
ndi°
 = 
	`bôs
(
s
, 5) + 1;

686 
ncode
 = 
	`bôs
(
s
, 4) + 4;

687 i‡(
∆í
 > 
MAXLCODES
 || 
ndi°
 > 
MAXDCODES
)

691 
ödex
 = 0; index < 
ncode
; index++)

692 
Àngths
[
‹dî
[
ödex
]] = 
	`bôs
(
s
, 3);

693 ; 
ödex
 < 19; index++)

694 
Àngths
[
‹dî
[
ödex
]] = 0;

697 
îr
 = 
	`c⁄°ru˘
(&
Àncode
, 
Àngths
, 19);

698 i‡(
îr
 != 0)

702 
ödex
 = 0;

703 
ödex
 < 
∆í
 + 
ndi°
) {

704 
symbﬁ
;

705 
Àn
;

707 
symbﬁ
 = 
	`decode
(
s
, &
Àncode
);

708 i‡(
symbﬁ
 < 0)

709  
symbﬁ
;

710 i‡(
symbﬁ
 < 16)

711 
Àngths
[
ödex
++] = 
symbﬁ
;

713 
Àn
 = 0;

714 i‡(
symbﬁ
 == 16) {

715 i‡(
ödex
 == 0)

717 
Àn
 = 
Àngths
[
ödex
 - 1];

718 
symbﬁ
 = 3 + 
	`bôs
(
s
, 2);

720 i‡(
symbﬁ
 == 17)

721 
symbﬁ
 = 3 + 
	`bôs
(
s
, 3);

723 
symbﬁ
 = 11 + 
	`bôs
(
s
, 7);

724 i‡(
ödex
 + 
symbﬁ
 > 
∆í
 + 
ndi°
)

726 
symbﬁ
--)

727 
Àngths
[
ödex
++] = 
Àn
;

732 i‡(
Àngths
[256] == 0)

736 
îr
 = 
	`c⁄°ru˘
(&
Àncode
, 
Àngths
, 
∆í
);

737 i‡(
îr
 && (î∏< 0 || 
∆í
 !
Àncode
.
cou¡
[0] +Üencode.count[1]))

741 
îr
 = 
	`c⁄°ru˘
(&
di°code
, 
Àngths
 + 
∆í
, 
ndi°
);

742 i‡(
îr
 && (î∏< 0 || 
ndi°
 !
di°code
.
cou¡
[0] + distcode.count[1]))

746  
	`codes
(
s
, &
Àncode
, &
di°code
);

747 
	}
}

793 
	$puff
(*
de°
,

794 *
de°Àn
,

795 c⁄° *
sour˚
,

796 *
sour˚Àn
)

798 
°©e
 
s
;

799 
œ°
, 
ty≥
;

800 
îr
;

803 
s
.
out
 = 
de°
;

804 
s
.
ouéí
 = *
de°Àn
;

805 
s
.
out˙t
 = 0;

808 
s
.
ö
 = 
sour˚
;

809 
s
.
öÀn
 = *
sour˚Àn
;

810 
s
.
ö˙t
 = 0;

811 
s
.
bôbuf
 = 0;

812 
s
.
bô˙t
 = 0;

815 i‡(
	`£tjmp
(
s
.
ív
) != 0)

816 
îr
 = 2;

820 
œ°
 = 
	`bôs
(&
s
, 1);

821 
ty≥
 = 
	`bôs
(&
s
, 2);

822 
îr
 = 
ty≥
 == 0 ?

823 
	`°‹ed
(&
s
) :

824 (
ty≥
 == 1 ?

825 
	`fixed
(&
s
) :

826 (
ty≥
 == 2 ?

827 
	`dy«mic
(&
s
) :

829 i‡(
îr
 != 0)

831 } !
œ°
);

835 i‡(
îr
 <= 0) {

836 *
de°Àn
 = 
s
.
out˙t
;

837 *
sour˚Àn
 = 
s
.
ö˙t
;

839  
îr
;

840 
	}
}

	@zlib-1.2.8/contrib/puff/puff.h

28 #i‚de‡
NIL


29 
	#NIL
 ((*)0Ë

	)

32 
puff
(*
de°
,

33 *
de°Àn
,

34 c⁄° *
sour˚
,

35 *
sour˚Àn
);

	@zlib-1.2.8/contrib/puff/pufftest.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~"puff.h
"

23 #i‡
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WIN32
Ë|| deföed(
__CYGWIN__
)

24 
	~<f˙é.h
>

25 
	~<io.h
>

26 
	#SET_BINARY_MODE
(
fûe
Ë
	`£tmode
(
	`fûío
(fûe), 
O_BINARY
)

	)

28 
	#SET_BINARY_MODE
(
fûe
)

	)

31 
	#loˇl
 

	)

37 
loˇl
 
size_t
 
	$bythúds
(
size_t
 
size
)

39 
n
;

40 
size_t
 
m
;

42 
m
 = 
size
;

43 
n
 = 0; 
m
;Ç++)

44 
m
 >>= 1;

45 i‡(
n
 < 3)

46  
size
 + 1;

47 
n
 -= 3;

48 
m
 = 
size
 >> 
n
;

49 
m
 += m == 6 ? 2 : 1;

50 
m
 <<
n
;

51  
m
 > 
size
 ? m : (
size_t
)(-1);

52 
	}
}

60 
loˇl
 *
	$lﬂd
(c⁄° *
«me
, 
size_t
 *
Àn
)

62 
size_t
 
size
;

63 *
buf
, *
sw≠
;

64 
FILE
 *
ö
;

66 *
Àn
 = 0;

67 
buf
 = 
	`mÆloc
(
size
 = 4096);

68 i‡(
buf
 =
NULL
)

69  
NULL
;

70 
ö
 = 
«me
 =
NULL
 ? 
°dö
 : 
	`f›í
(name, "rb");

71 i‡(
ö
 !
NULL
) {

73 *
Àn
 +
	`‰ód
((*)
buf
 + *Àn, 1, 
size
 - *Àn, 
ö
);

74 i‡(*
Àn
 < 
size
) ;

75 
size
 = 
	`bythúds
(size);

76 i‡(
size
 =*
Àn
 || (
sw≠
 = 
	`ªÆloc
(
buf
, size)Ë=
NULL
) {

77 
	`‰ì
(
buf
);

78 
buf
 = 
NULL
;

81 
buf
 = 
sw≠
;

83 
	`f˛o£
(
ö
);

85  
buf
;

86 
	}
}

88 
	$maö
(
¨gc
, **
¨gv
)

90 
ªt
, 
put
 = 0, 
Áû
 = 0;

91 
skù
 = 0;

92 *
¨g
, *
«me
 = 
NULL
;

93 *
sour˚
 = 
NULL
, *
de°
;

94 
size_t
 
Àn
 = 0;

95 
sour˚Àn
, 
de°Àn
;

98 
¨g
 = *++
¨gv
, --
¨gc
)

99 i‡(
¨g
[0] == '-') {

100 i‡(
¨g
[1] == 'w' &&árg[2] == 0)

101 
put
 = 1;

102 i‡(
¨g
[1] == 'f' &&árg[2] == 0)

103 
Áû
 = 1, 
put
 = 1;

104 i‡(
¨g
[1] >= '0' &&árg[1] <= '9')

105 
skù
 = ()
	`©oi
(
¨g
 + 1);

107 
	`Ârötf
(
°dîr
, "övÆid o±i⁄ %s\n", 
¨g
);

111 i‡(
«me
 !
NULL
) {

112 
	`Ârötf
(
°dîr
, "only one fileÇameállowed\n");

116 
«me
 = 
¨g
;

117 
sour˚
 = 
	`lﬂd
(
«me
, &
Àn
);

118 i‡(
sour˚
 =
NULL
) {

119 
	`Ârötf
(
°dîr
, "memoryállocation failure\n");

122 i‡(
Àn
 == 0) {

123 
	`Ârötf
(
°dîr
, "couldÇotÑead %s, or it wasÉmpty\n",

124 
«me
 =
NULL
 ? "<stdin>" :Çame);

125 
	`‰ì
(
sour˚
);

128 i‡(
skù
 >
Àn
) {

129 
	`Ârötf
(
°dîr
, "skùÑeque° o‡%dÜóve†nÿöput\n", 
skù
);

130 
	`‰ì
(
sour˚
);

135 
Àn
 -
skù
;

136 
sour˚Àn
 = ()
Àn
;

137 
ªt
 = 
	`puff
(
NIL
, &
de°Àn
, 
sour˚
 + 
skù
, &
sour˚Àn
);

138 i‡(
ªt
)

139 
	`Ârötf
(
°dîr
, "puff(ËÁûed wôhÑëu∫ codê%d\n", 
ªt
);

141 
	`Ârötf
(
°dîr
, "puff(Ësuc˚eded uncom¥essög %lu byãs\n", 
de°Àn
);

142 i‡(
sour˚Àn
 < 
Àn
Ë
	`Ârötf
(
°dîr
, "%lu compressed bytes unused\n",

143 
Àn
 - 
sour˚Àn
);

147 i‡(
put
 && 
ªt
 == 0) {

148 i‡(
Áû
)

149 
de°Àn
 >>= 1;

150 
de°
 = 
	`mÆloc
(
de°Àn
);

151 i‡(
de°
 =
NULL
) {

152 
	`Ârötf
(
°dîr
, "memoryállocation failure\n");

153 
	`‰ì
(
sour˚
);

156 
	`puff
(
de°
, &
de°Àn
, 
sour˚
 + 
skù
, &
sour˚Àn
);

157 
	`SET_BINARY_MODE
(
°dout
);

158 
	`fwrôe
(
de°
, 1, 
de°Àn
, 
°dout
);

159 
	`‰ì
(
de°
);

163 
	`‰ì
(
sour˚
);

164  
ªt
;

165 
	}
}

	@zlib-1.2.8/contrib/testzlib/testzlib.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<wödows.h
>

5 
	~"zlib.h
"

8 
	$MyDoMöus64
(
LARGE_INTEGER
 *
R
,LARGE_INTEGER 
A
,LARGE_INTEGER 
B
)

10 
R
->
HighP¨t
 = 
A
.HighP¨à- 
B
.HighPart;

11 i‡(
A
.
LowP¨t
 >
B
.LowPart)

12 
R
->
LowP¨t
 = 
A
.LowP¨à- 
B
.LowPart;

15 
R
->
LowP¨t
 = 
A
.LowP¨à- 
B
.LowPart;

16 
R
->
HighP¨t
 --;

18 
	}
}

20 #ifde‡
_M_X64


22 
__öt64
 
__rdtsc
();

23 
	$BegöCou¡Rdtsc
(
LARGE_INTEGER
 * 
pbegöTime64
)

26 
pbegöTime64
->
QuadP¨t
=
	`__rdtsc
();

27 
	}
}

29 
LARGE_INTEGER
 
	$GëResRdtsc
(
LARGE_INTEGER
 
begöTime64
,
BOOL
 
fCompuãTimeQuîyPîf
)

31 
LARGE_INTEGER
 
LIªs
;

32 
_öt64
 
ªs
=
	`__rdtsc
()-((_öt64)(
begöTime64
.
QuadP¨t
));

33 
LIªs
.
QuadP¨t
=
ªs
;

35  
LIªs
;

36 
	}
}

38 #ifde‡
_M_IX86


39 
	$myGëRDTSC32
(
LARGE_INTEGER
 * 
pbegöTime64
)

41 
DWORD
 
dwEdx
,
dwEax
;

42 
_asm


44 
rdtsc


45 
mov
 
dwEax
,
óx


46 
mov
 
dwEdx
,
edx


48 
pbegöTime64
->
LowP¨t
=
dwEax
;

49 
pbegöTime64
->
HighP¨t
=
dwEdx
;

50 
	}
}

52 
	$BegöCou¡Rdtsc
(
LARGE_INTEGER
 * 
pbegöTime64
)

54 
	`myGëRDTSC32
(
pbegöTime64
);

55 
	}
}

57 
LARGE_INTEGER
 
	$GëResRdtsc
(
LARGE_INTEGER
 
begöTime64
,
BOOL
 
fCompuãTimeQuîyPîf
)

59 
LARGE_INTEGER
 
LIªs
,
ídTime64
;

60 
	`myGëRDTSC32
(&
ídTime64
);

62 
LIªs
.
LowP¨t
=LIªs.
HighP¨t
=0;

63 
	`MyDoMöus64
(&
LIªs
,
ídTime64
,
begöTime64
);

64  
LIªs
;

65 
	}
}

67 
	$myGëRDTSC32
(
LARGE_INTEGER
 * 
pbegöTime64
)

69 
	}
}

71 
	$BegöCou¡Rdtsc
(
LARGE_INTEGER
 * 
pbegöTime64
)

73 
	}
}

75 
LARGE_INTEGER
 
	$GëResRdtsc
(
LARGE_INTEGER
 
begöTime64
,
BOOL
 
fCompuãTimeQuîyPîf
)

77 
LARGE_INTEGER
 
Ã
;

78 
Ã
.
QuadP¨t
=0;

79  
Ã
;

80 
	}
}

84 
	$BegöCou¡PîfCou¡î
(
LARGE_INTEGER
 * 
pbegöTime64
,
BOOL
 
fCompuãTimeQuîyPîf
)

86 i‡((!
fCompuãTimeQuîyPîf
Ë|| (!
	`QuîyPîf‹m™˚Cou¡î
(
pbegöTime64
)))

88 
pbegöTime64
->
LowP¨t
 = 
	`GëTickCou¡
();

89 
pbegöTime64
->
HighP¨t
 = 0;

91 
	}
}

93 
DWORD
 
	$GëM£cSö˚PîfCou¡î
(
LARGE_INTEGER
 
begöTime64
,
BOOL
 
fCompuãTimeQuîyPîf
)

95 
LARGE_INTEGER
 
ídTime64
,
ticksPîSec⁄d
,
ticks
;

96 
DWORDLONG
 
ticksShi·ed
,
tickSecShi·ed
;

97 
DWORD
 
dwLog
=16+0;

98 
DWORD
 
dwRë
;

99 i‡((!
fCompuãTimeQuîyPîf
Ë|| (!
	`QuîyPîf‹m™˚Cou¡î
(&
ídTime64
)))

100 
dwRë
 = (
	`GëTickCou¡
(Ë- 
begöTime64
.
LowP¨t
)*1;

103 
	`MyDoMöus64
(&
ticks
,
ídTime64
,
begöTime64
);

104 
	`QuîyPîf‹m™˚Fªquícy
(&
ticksPîSec⁄d
);

108 
ticksShi·ed
 = 
	`I¡64ShæMod32
(*(
DWORDLONG
*)&
ticks
,
dwLog
);

109 
tickSecShi·ed
 = 
	`I¡64ShæMod32
(*(
DWORDLONG
*)&
ticksPîSec⁄d
,
dwLog
);

113 
dwRë
 = (
DWORD
)((((DWORD)
ticksShi·ed
)*1000)/(DWORD)(
tickSecShi·ed
));

114 
dwRë
 *=1;

116  
dwRë
;

117 
	}
}

119 
	$RódFûeMem‹y
(c⁄° * 
fûíame
,* 
∂FûeSize
,** 
pFûePå
)

121 
FILE
* 
°ªam
;

122 * 
±r
;

123 
ªtVÆ
=1;

124 
°ªam
=
	`f›í
(
fûíame
, "rb");

125 i‡(
°ªam
==
NULL
)

128 
	`f£ek
(
°ªam
,0,
SEEK_END
);

130 *
∂FûeSize
=
	`·ñl
(
°ªam
);

131 
	`f£ek
(
°ªam
,0,
SEEK_SET
);

132 
±r
=
	`mÆloc
((*
∂FûeSize
)+1);

133 i‡(
±r
==
NULL
)

134 
ªtVÆ
=0;

137 i‡(
	`‰ód
(
±r
, 1, *
∂FûeSize
,
°ªam
) != (*plFileSize))

138 
ªtVÆ
=0;

140 
	`f˛o£
(
°ªam
);

141 *
pFûePå
=
±r
;

142  
ªtVÆ
;

143 
	}
}

145 
	$maö
(
¨gc
, *
¨gv
[])

147 
BlockSizeCom¥ess
=0x8000;

148 
BlockSizeUncom¥ess
=0x8000;

149 
˝rLevñ
=
Z_DEFAULT_COMPRESSION
 ;

150 
lFûeSize
;

151 * 
FûePå
;

152 
lBuf„rSizeC¥
;

153 
lBuf„rSizeUn˝r
;

154 
lCom¥es£dSize
=0;

155 * 
C¥På
;

156 * 
Un˝rPå
;

157 
lSizeC¥
,
lSizeUn˝r
;

158 
DWORD
 
dwGëTick
,
dwM£cQP
;

159 
LARGE_INTEGER
 
li_qp
,
li_rdtsc
,
dwResRdtsc
;

161 i‡(
¨gc
<=1)

163 
	`¥ötf
("run TestZlib <File> [BlockSizeCompress] [BlockSizeUncompress] [compres.Üevel]\n");

167 i‡(
	`RódFûeMem‹y
(
¨gv
[1],&
lFûeSize
,&
FûePå
)==0)

169 
	`¥ötf
("îr‹Ñódög %s\n",
¨gv
[1]);

172 
	`¥ötf
("fûê%†ªad, %u byãs\n",
¨gv
[1],
lFûeSize
);

174 i‡(
¨gc
>=3)

175 
BlockSizeCom¥ess
=
	`©ﬁ
(
¨gv
[2]);

177 i‡(
¨gc
>=4)

178 
BlockSizeUncom¥ess
=
	`©ﬁ
(
¨gv
[3]);

180 i‡(
¨gc
>=5)

181 
˝rLevñ
=()
	`©ﬁ
(
¨gv
[4]);

183 
lBuf„rSizeC¥
 = 
lFûeSize
 + (lFileSize/0x10) + 0x200;

184 
lBuf„rSizeUn˝r
 = 
lBuf„rSizeC¥
;

186 
C¥På
=(*)
	`mÆloc
(
lBuf„rSizeC¥
 + 
BlockSizeCom¥ess
);

188 
	`BegöCou¡PîfCou¡î
(&
li_qp
,
TRUE
);

189 
dwGëTick
=
	`GëTickCou¡
();

190 
	`BegöCou¡Rdtsc
(&
li_rdtsc
);

192 
z_°ªam
 
z˝r
;

193 
ªt
=
Z_OK
;

194 
lOrigToDo
 = 
lFûeSize
;

195 
lOrigD⁄e
 = 0;

196 
°ï
=0;

197 
	`mem£t
(&
z˝r
,0,(
z_°ªam
));

198 
	`deÊ©eInô
(&
z˝r
,
˝rLevñ
);

200 
z˝r
.
√xt_ö
 = 
FûePå
;

201 
z˝r
.
√xt_out
 = 
C¥På
;

206 
Æl_ªad_bef‹e
 = 
z˝r
.
tŸÆ_ö
;

207 
z˝r
.
avaû_ö
 = 
	`mö
(
lOrigToDo
,
BlockSizeCom¥ess
);

208 
z˝r
.
avaû_out
 = 
BlockSizeCom¥ess
;

209 
ªt
=
	`deÊ©e
(&
z˝r
,(z˝r.
avaû_ö
==
lOrigToDo
Ë? 
Z_FINISH
 : 
Z_SYNC_FLUSH
);

210 
lOrigD⁄e
 +(
z˝r
.
tŸÆ_ö
-
Æl_ªad_bef‹e
);

211 
lOrigToDo
 -(
z˝r
.
tŸÆ_ö
-
Æl_ªad_bef‹e
);

212 
°ï
++;

213 } 
ªt
==
Z_OK
);

215 
lSizeC¥
=
z˝r
.
tŸÆ_out
;

216 
	`deÊ©eEnd
(&
z˝r
);

217 
dwGëTick
=
	`GëTickCou¡
()-dwGetTick;

218 
dwM£cQP
=
	`GëM£cSö˚PîfCou¡î
(
li_qp
,
TRUE
);

219 
dwResRdtsc
=
	`GëResRdtsc
(
li_rdtsc
,
TRUE
);

220 
	`¥ötf
("tŸÆ com¥es†sizê%u, i¿%u sãp\n",
lSizeC¥
,
°ï
);

221 
	`¥ötf
("timê%u m£¯%‡£c\n",
dwGëTick
,dwGetTick/()1000.);

222 
	`¥ötf
("def˝∏timêQP = %u m£¯%‡£c\n",
dwM£cQP
,dwMsecQP/()1000.);

223 
	`¥ötf
("def˝∏ªsu…Ñdts¯%I64x\n\n",
dwResRdtsc
.
QuadP¨t
);

226 
C¥På
=(*)
	`ªÆloc
(C¥På,
lSizeC¥
);

227 
Un˝rPå
=(*)
	`mÆloc
(
lBuf„rSizeUn˝r
 + 
BlockSizeUncom¥ess
);

229 
	`BegöCou¡PîfCou¡î
(&
li_qp
,
TRUE
);

230 
dwGëTick
=
	`GëTickCou¡
();

231 
	`BegöCou¡Rdtsc
(&
li_rdtsc
);

233 
z_°ªam
 
z˝r
;

234 
ªt
=
Z_OK
;

235 
lOrigToDo
 = 
lSizeC¥
;

236 
lOrigD⁄e
 = 0;

237 
°ï
=0;

238 
	`mem£t
(&
z˝r
,0,(
z_°ªam
));

239 
	`öÊ©eInô
(&
z˝r
);

241 
z˝r
.
√xt_ö
 = 
C¥På
;

242 
z˝r
.
√xt_out
 = 
Un˝rPå
;

247 
Æl_ªad_bef‹e
 = 
z˝r
.
tŸÆ_ö
;

248 
z˝r
.
avaû_ö
 = 
	`mö
(
lOrigToDo
,
BlockSizeUncom¥ess
);

249 
z˝r
.
avaû_out
 = 
BlockSizeUncom¥ess
;

250 
ªt
=
	`öÊ©e
(&
z˝r
,
Z_SYNC_FLUSH
);

251 
lOrigD⁄e
 +(
z˝r
.
tŸÆ_ö
-
Æl_ªad_bef‹e
);

252 
lOrigToDo
 -(
z˝r
.
tŸÆ_ö
-
Æl_ªad_bef‹e
);

253 
°ï
++;

254 } 
ªt
==
Z_OK
);

256 
lSizeUn˝r
=
z˝r
.
tŸÆ_out
;

257 
	`öÊ©eEnd
(&
z˝r
);

258 
dwGëTick
=
	`GëTickCou¡
()-dwGetTick;

259 
dwM£cQP
=
	`GëM£cSö˚PîfCou¡î
(
li_qp
,
TRUE
);

260 
dwResRdtsc
=
	`GëResRdtsc
(
li_rdtsc
,
TRUE
);

261 
	`¥ötf
("tŸÆ uncom¥es†sizê%u, i¿%u sãp\n",
lSizeUn˝r
,
°ï
);

262 
	`¥ötf
("timê%u m£¯%‡£c\n",
dwGëTick
,dwGetTick/()1000.);

263 
	`¥ötf
("un˝∏ÅimêQP = %u m£¯%‡£c\n",
dwM£cQP
,dwMsecQP/()1000.);

264 
	`¥ötf
("un˝∏Ñesu…Ñdts¯%I64x\n\n",
dwResRdtsc
.
QuadP¨t
);

267 i‡(
lSizeUn˝r
==
lFûeSize
)

269 i‡(
	`memcmp
(
FûePå
,
Un˝rPå
,
lFûeSize
)==0)

270 
	`¥ötf
("compare ok\n");

275 
	}
}

	@zlib-1.2.8/contrib/untgz/untgz.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<time.h
>

13 
	~<î∫o.h
>

15 
	~"zlib.h
"

17 #ifde‡
unix


18 
	~<uni°d.h
>

20 
	~<dúe˘.h
>

21 
	~<io.h
>

24 #ifde‡
WIN32


25 
	~<wödows.h
>

26 #i‚de‡
F_OK


27 
	#F_OK
 0

	)

29 
	#mkdú
(
dú«me
,
mode
Ë
	`_mkdú
(dú«me)

	)

30 #ifde‡
_MSC_VER


31 
	#ac˚ss
(
∑th
,
mode
Ë
	`_ac˚ss
’©h,mode)

	)

32 
	#chmod
(
∑th
,
mode
Ë
	`_chmod
’©h,mode)

	)

33 
	#°rdup
(
°r
Ë
	`_°rdup
(°r)

	)

36 
	~<utime.h
>

42 
	#REGTYPE
 '0'

	)

43 
	#AREGTYPE
 '\0'

	)

44 
	#LNKTYPE
 '1'

	)

45 
	#SYMTYPE
 '2'

	)

46 
	#CHRTYPE
 '3'

	)

47 
	#BLKTYPE
 '4'

	)

48 
	#DIRTYPE
 '5'

	)

49 
	#FIFOTYPE
 '6'

	)

50 
	#CONTTYPE
 '7'

	)

54 
	#GNUTYPE_DUMPDIR
 'D'

	)

55 
	#GNUTYPE_LONGLINK
 'K'

	)

56 
	#GNUTYPE_LONGNAME
 'L'

	)

57 
	#GNUTYPE_MULTIVOL
 'M'

	)

58 
	#GNUTYPE_NAMES
 'N'

	)

59 
	#GNUTYPE_SPARSE
 'S'

	)

60 
	#GNUTYPE_VOLHDR
 'V'

	)

65 
	#BLOCKSIZE
 512

	)

66 
	#SHORTNAMESIZE
 100

	)

68 
	sèr_hódî


70 
	m«me
[100];

71 
	mmode
[8];

72 
	muid
[8];

73 
	mgid
[8];

74 
	msize
[12];

75 
	mmtime
[12];

76 
	mchksum
[8];

77 
	mty≥Êag
;

78 
	mlök«me
[100];

79 
	mmagic
[6];

80 
	mvîsi⁄
[2];

81 
	mu«me
[32];

82 
	mg«me
[32];

83 
	mdevmaj‹
[8];

84 
	mdevmö‹
[8];

85 
	m¥efix
[155];

89 
	uèr_buf„r


91 
	mbuf„r
[
BLOCKSIZE
];

92 
èr_hódî
 
	mhódî
;

95 
	s©å_ôem


97 
©å_ôem
 *
	m√xt
;

98 *
	m‚ame
;

99 
	mmode
;

100 
time_t
 
	mtime
;

103 íum { 
	mTGZ_EXTRACT
, 
	mTGZ_LIST
, 
	mTGZ_INVALID
 };

105 *
TGZ‚ame
 
OF
((const *));

106 
TGZnŸfound
 
OF
((const *));

108 
gëo˘
 
OF
((*, ));

109 *
°πime
 
OF
((
time_t
 *));

110 
£tfûëime
 
OF
((*, 
time_t
));

111 
push_©å
 
OF
((
©å_ôem
 **, *, , 
time_t
));

112 
ª°‹e_©å
 
OF
((
©å_ôem
 **));

114 
Ex¥M©ch
 
OF
((*, *));

116 
makedú
 
OF
((*));

117 
m©ch«me
 
OF
((, , **, *));

119 
îr‹
 
OF
((const *));

120 
èr
 
OF
((
gzFûe
, , , , **));

122 
hñp
 
OF
(());

123 
maö
 
OF
((, **));

125 *
	g¥og
;

127 c⁄° *
	gTGZsuffix
[] = { "\0", ".èr", ".èr.gz", ".èz", ".tgz", 
NULL
 };

132 *
	$TGZ‚ame
 (c⁄° *
¨˙ame
)

134 
buf„r
[1024];

135 
‹igÀn
,
i
;

137 
	`°r˝y
(
buf„r
,
¨˙ame
);

138 
‹igÀn
 = 
	`°æí
(
buf„r
);

140 
i
=0; 
TGZsuffix
[i]; i++)

142 
	`°r˝y
(
buf„r
+
‹igÀn
,
TGZsuffix
[
i
]);

143 i‡(
	`ac˚ss
(
buf„r
,
F_OK
) == 0)

144  
buf„r
;

146  
NULL
;

147 
	}
}

152 
	$TGZnŸfound
 (c⁄° *
¨˙ame
)

154 
i
;

156 
	`Ârötf
(
°dîr
,"%s: Couldn'àföd ",
¥og
);

157 
i
=0;
TGZsuffix
[i];i++)

158 
	`Ârötf
(
°dîr
,(
TGZsuffix
[
i
+1]) ? "%s%s, " : "or %s%s\n",

159 
¨˙ame
,

160 
TGZsuffix
[
i
]);

161 
	`exô
(1);

162 
	}
}

168 
	$gëo˘
 (*
p
,
width
)

170 
ªsu…
 = 0;

171 
c
;

173 
width
--)

175 
c
 = *
p
++;

176 i‡(
c
 == 0)

178 i‡(
c
 == ' ')

180 i‡(
c
 < '0' || c > '7')

182 
ªsu…
 =Ñesu… * 8 + (
c
 - '0');

184  
ªsu…
;

185 
	}
}

191 *
	$°πime
 (
time_t
 *
t
)

193 
tm
 *
loˇl
;

194 
ªsu…
[32];

196 
loˇl
 = 
	`loˇ…ime
(
t
);

197 
	`•rötf
(
ªsu…
,"%4d/%02d/%02d %02d:%02d:%02d",

198 
loˇl
->
tm_yór
+1900,Üoˇl->
tm_m⁄
+1,Üoˇl->
tm_mday
,

199 
loˇl
->
tm_hour
,Üoˇl->
tm_mö
,Üoˇl->
tm_£c
);

200  
ªsu…
;

201 
	}
}

206 
	$£tfûëime
 (*
‚ame
,
time_t
 
·ime
)

208 #ifde‡
WIN32


209 
isWöNT
 = -1;

210 
SYSTEMTIME
 
°
;

211 
FILETIME
 
loc·
, 
mod·
;

212 
tm
 *
lo˘m
;

213 
HANDLE
 
hFûe
;

214 
ªsu…
;

216 
lo˘m
 = 
	`loˇ…ime
(&
·ime
);

217 i‡(
lo˘m
 =
NULL
)

220 
°
.
wYór
 = (
WORD
)
lo˘m
->
tm_yór
 + 1900;

221 
°
.
wM⁄th
 = (
WORD
)
lo˘m
->
tm_m⁄
 + 1;

222 
°
.
wDayOfWìk
 = (
WORD
)
lo˘m
->
tm_wday
;

223 
°
.
wDay
 = (
WORD
)
lo˘m
->
tm_mday
;

224 
°
.
wHour
 = (
WORD
)
lo˘m
->
tm_hour
;

225 
°
.
wMöuã
 = (
WORD
)
lo˘m
->
tm_mö
;

226 
°
.
wSec⁄d
 = (
WORD
)
lo˘m
->
tm_£c
;

227 
°
.
wMûli£c⁄ds
 = 0;

228 i‡(!
	`Sy°emTimeToFûeTime
(&
°
, &
loc·
) ||

229 !
	`LoˇlFûeTimeToFûeTime
(&
loc·
, &
mod·
))

232 i‡(
isWöNT
 < 0)

233 
isWöNT
 = (
	`GëVîsi⁄
() < 0x80000000) ? 1 : 0;

234 
hFûe
 = 
	`Cª©eFûe
(
‚ame
, 
GENERIC_WRITE
, 0, 
NULL
, 
OPEN_EXISTING
,

235 (
isWöNT
 ? 
FILE_FLAG_BACKUP_SEMANTICS
 : 0),

236 
NULL
);

237 i‡(
hFûe
 =
INVALID_HANDLE_VALUE
)

239 
ªsu…
 = 
	`SëFûeTime
(
hFûe
, 
NULL
, NULL, &
mod·
) ? 0 : -1;

240 
	`Clo£H™dÀ
(
hFûe
);

241  
ªsu…
;

243 
utimbuf
 
£âime
;

245 
£âime
.
a˘ime
 = sëtime.
modtime
 = 
·ime
;

246  
	`utime
(
‚ame
,&
£âime
);

248 
	}
}

253 
	$push_©å
(
©å_ôem
 **
li°
,*
‚ame
,
mode
,
time_t
 
time
)

255 
©å_ôem
 *
ôem
;

257 
ôem
 = (
©å_ôem
 *)
	`mÆloc
((attr_item));

258 i‡(
ôem
 =
NULL
)

259 
	`îr‹
("Out of memory");

260 
ôem
->
‚ame
 = 
	`°rdup
(fname);

261 
ôem
->
mode
 = mode;

262 
ôem
->
time
 =Åime;

263 
ôem
->
√xt
 = *
li°
;

264 *
li°
 = 
ôem
;

265 
	}
}

270 
	$ª°‹e_©å
(
©å_ôem
 **
li°
)

272 
©å_ôem
 *
ôem
, *
¥ev
;

274 
ôem
 = *
li°
; iãm !
NULL
; )

276 
	`£tfûëime
(
ôem
->
‚ame
,ôem->
time
);

277 
	`chmod
(
ôem
->
‚ame
,ôem->
mode
);

278 
¥ev
 = 
ôem
;

279 
ôem
 = iãm->
√xt
;

280 
	`‰ì
(
¥ev
);

282 *
li°
 = 
NULL
;

283 
	}
}

288 
	#ISSPECIAL
(
c
Ë(((cË='*'Ë|| ((cË='/'))

	)

290 
	$Ex¥M©ch
 (*
°rög
,*
ex¥
)

294 i‡(
	`ISSPECIAL
(*
ex¥
))

296 i‡(*
ex¥
 == '/')

298 i‡(*
°rög
 != '\\' && *string != '/')

300 
°rög
 ++; 
ex¥
++;

302 i‡(*
ex¥
 == '*')

304 i‡(*
ex¥
 ++ == 0)

306 *++
°rög
 !*
ex¥
)

307 i‡(*
°rög
 == 0)

313 i‡(*
°rög
 !*
ex¥
)

315 i‡(*
ex¥
++ == 0)

317 
°rög
++;

320 
	}
}

328 
	$makedú
 (*
√wdú
)

330 *
buf„r
 = 
	`°rdup
(
√wdú
);

331 *
p
;

332 
Àn
 = 
	`°æí
(
buf„r
);

334 i‡(
Àn
 <= 0) {

335 
	`‰ì
(
buf„r
);

338 i‡(
buf„r
[
Àn
-1] == '/') {

339 
buf„r
[
Àn
-1] = '\0';

341 i‡(
	`mkdú
(
buf„r
, 0755) == 0)

343 
	`‰ì
(
buf„r
);

347 
p
 = 
buf„r
+1;

350 
hﬁd
;

352 *
p
 && *p != '\\' && *p != '/')

353 
p
++;

354 
hﬁd
 = *
p
;

355 *
p
 = 0;

356 i‡((
	`mkdú
(
buf„r
, 0755Ë=-1Ë&& (
î∫o
 =
ENOENT
))

358 
	`Ârötf
(
°dîr
,"%s: Couldn'à¸óã dúe˘‹y %s\n",
¥og
,
buf„r
);

359 
	`‰ì
(
buf„r
);

362 i‡(
hﬁd
 == 0)

364 *
p
++ = 
hﬁd
;

366 
	`‰ì
(
buf„r
);

368 
	}
}

371 
	$m©ch«me
 (
¨g
,
¨gc
,**
¨gv
,*
‚ame
)

373 i‡(
¨g
 =
¨gc
)

376 
¨g
 < 
¨gc
)

377 i‡(
	`Ex¥M©ch
(
‚ame
,
¨gv
[
¨g
++]))

381 
	}
}

386 
	$èr
 (
gzFûe
 
ö
,
a˘i⁄
,
¨g
,
¨gc
,**
¨gv
)

388 
èr_buf„r
 
buf„r
;

389 
Àn
;

390 
îr
;

391 
gëhódî
 = 1;

392 
ªmaöög
 = 0;

393 
FILE
 *
outfûe
 = 
NULL
;

394 
‚ame
[
BLOCKSIZE
];

395 
èrmode
;

396 
time_t
 
èπime
;

397 
©å_ôem
 *
©åibuãs
 = 
NULL
;

399 i‡(
a˘i⁄
 =
TGZ_LIST
)

400 
	`¥ötf
(" dateÅime size file\n"

404 
Àn
 = 
	`gzªad
(
ö
, &
buf„r
, 
BLOCKSIZE
);

405 i‡(
Àn
 < 0)

406 
	`îr‹
(
	`gzîr‹
(
ö
, &
îr
));

411 i‡(
Àn
 !
BLOCKSIZE
)

413 
a˘i⁄
 = 
TGZ_INVALID
;

414 
ªmaöög
 = 0;

420 i‡(
gëhódî
 >= 1)

427 i‡(
Àn
 =0 || 
buf„r
.
hódî
.
«me
[0] == 0)

430 
èrmode
 = 
	`gëo˘
(
buf„r
.
hódî
.
mode
,8);

431 
èπime
 = (
time_t
)
	`gëo˘
(
buf„r
.
hódî
.
mtime
,12);

432 i‡(
èrmode
 =-1 || 
èπime
 =(
time_t
)-1)

434 
buf„r
.
hódî
.
«me
[0] = 0;

435 
a˘i⁄
 = 
TGZ_INVALID
;

438 i‡(
gëhódî
 == 1)

440 
	`°∫˝y
(
‚ame
,
buf„r
.
hódî
.
«me
,
SHORTNAMESIZE
);

441 i‡(
‚ame
[
SHORTNAMESIZE
-1] != 0)

442 
‚ame
[
SHORTNAMESIZE
] = 0;

449 i‡(
	`°∫cmp
(
‚ame
,
buf„r
.
hódî
.
«me
,
SHORTNAMESIZE
-1) != 0)

450 
	`îr‹
("badÜongÇame");

451 
gëhódî
 = 1;

457 
buf„r
.
hódî
.
ty≥Êag
)

459 
DIRTYPE
:

460 i‡(
a˘i⁄
 =
TGZ_LIST
)

461 
	`¥ötf
(" %† <dú> %s\n",
	`°πime
(&
èπime
),
‚ame
);

462 i‡(
a˘i⁄
 =
TGZ_EXTRACT
)

464 
	`makedú
(
‚ame
);

465 
	`push_©å
(&
©åibuãs
,
‚ame
,
èrmode
,
èπime
);

468 
REGTYPE
:

469 
AREGTYPE
:

470 
ªmaöög
 = 
	`gëo˘
(
buf„r
.
hódî
.
size
,12);

471 i‡(
ªmaöög
 == -1)

473 
a˘i⁄
 = 
TGZ_INVALID
;

476 i‡(
a˘i⁄
 =
TGZ_LIST
)

477 
	`¥ötf
(" %†%9d %s\n",
	`°πime
(&
èπime
),
ªmaöög
,
‚ame
);

478 i‡(
a˘i⁄
 =
TGZ_EXTRACT
)

480 i‡(
	`m©ch«me
(
¨g
,
¨gc
,
¨gv
,
‚ame
))

482 
outfûe
 = 
	`f›í
(
‚ame
,"wb");

483 i‡(
outfûe
 =
NULL
) {

485 *
p
 = 
	`°ºchr
(
‚ame
, '/');

486 i‡(
p
 !
NULL
) {

487 *
p
 = '\0';

488 
	`makedú
(
‚ame
);

489 *
p
 = '/';

490 
outfûe
 = 
	`f›í
(
‚ame
,"wb");

493 i‡(
outfûe
 !
NULL
)

494 
	`¥ötf
("Exåa˘ög %s\n",
‚ame
);

496 
	`Ârötf
(
°dîr
, "%s: Couldn'à¸óã %s",
¥og
,
‚ame
);

499 
outfûe
 = 
NULL
;

501 
gëhódî
 = 0;

503 
GNUTYPE_LONGLINK
:

504 
GNUTYPE_LONGNAME
:

505 
ªmaöög
 = 
	`gëo˘
(
buf„r
.
hódî
.
size
,12);

506 i‡(
ªmaöög
 < 0 ||Ñemaöög >
BLOCKSIZE
)

508 
a˘i⁄
 = 
TGZ_INVALID
;

511 
Àn
 = 
	`gzªad
(
ö
, 
‚ame
, 
BLOCKSIZE
);

512 i‡(
Àn
 < 0)

513 
	`îr‹
(
	`gzîr‹
(
ö
, &
îr
));

514 i‡(
‚ame
[
BLOCKSIZE
-1] !0 || ()
	`°æí
(‚ameË> 
ªmaöög
)

516 
a˘i⁄
 = 
TGZ_INVALID
;

519 
gëhódî
 = 2;

522 i‡(
a˘i⁄
 =
TGZ_LIST
)

523 
	`¥ötf
(" %† <---> %s\n",
	`°πime
(&
èπime
),
‚ame
);

529 
byãs
 = (
ªmaöög
 > 
BLOCKSIZE
) ? BLOCKSIZE :Ñemaining;

531 i‡(
outfûe
 !
NULL
)

533 i‡(
	`fwrôe
(&
buf„r
,(),
byãs
,
outfûe
) != bytes)

535 
	`Ârötf
(
°dîr
,

536 "%s: Eº‹ wrôög %†-- skùpög\n",
¥og
,
‚ame
);

537 
	`f˛o£
(
outfûe
);

538 
outfûe
 = 
NULL
;

539 
	`ªmove
(
‚ame
);

542 
ªmaöög
 -
byãs
;

545 i‡(
ªmaöög
 == 0)

547 
gëhódî
 = 1;

548 i‡(
outfûe
 !
NULL
)

550 
	`f˛o£
(
outfûe
);

551 
outfûe
 = 
NULL
;

552 i‡(
a˘i⁄
 !
TGZ_INVALID
)

553 
	`push_©å
(&
©åibuãs
,
‚ame
,
èrmode
,
èπime
);

560 i‡(
a˘i⁄
 =
TGZ_INVALID
)

562 
	`îr‹
("brokenárchive");

570 
	`ª°‹e_©å
(&
©åibuãs
);

572 i‡(
	`gz˛o£
(
ö
Ë!
Z_OK
)

573 
	`îr‹
("failed gzclose");

576 
	}
}

581 
	$hñp
(
exôvÆ
)

583 
	`¥ötf
("untgz version 0.2.1\n"

585 
	`zlibVîsi⁄
());

586 
	`¥ötf
("Usage: untgz file.tgzÉxtractáll files\n"

590 
	`exô
(
exôvÆ
);

591 
	}
}

593 
	$îr‹
(c⁄° *
msg
)

595 
	`Ârötf
(
°dîr
, "%s: %s\n", 
¥og
, 
msg
);

596 
	`exô
(1);

597 
	}
}

602 #i‡
deföed
(
WIN32
Ë&& deföed(
__GNUC__
)

603 
	g_CRT_glob
 = 0;

606 
	$maö
(
¨gc
,**
¨gv
)

608 
a˘i⁄
 = 
TGZ_EXTRACT
;

609 
¨g
 = 1;

610 *
TGZfûe
;

611 
gzFûe
 *
f
;

613 
¥og
 = 
	`°ºchr
(
¨gv
[0],'\\');

614 i‡(
¥og
 =
NULL
)

616 
¥og
 = 
	`°ºchr
(
¨gv
[0],'/');

617 i‡(
¥og
 =
NULL
)

619 
¥og
 = 
	`°ºchr
(
¨gv
[0],':');

620 i‡(
¥og
 =
NULL
)

621 
¥og
 = 
¨gv
[0];

623 
¥og
++;

626 
¥og
++;

629 
¥og
++;

631 i‡(
¨gc
 == 1)

632 
	`hñp
(0);

634 i‡(
	`°rcmp
(
¨gv
[
¨g
],"-l") == 0)

636 
a˘i⁄
 = 
TGZ_LIST
;

637 i‡(
¨gc
 =++
¨g
)

638 
	`hñp
(0);

640 i‡(
	`°rcmp
(
¨gv
[
¨g
],"-h") == 0)

642 
	`hñp
(0);

645 i‡((
TGZfûe
 = 
	`TGZ‚ame
(
¨gv
[
¨g
])Ë=
NULL
)

646 
	`TGZnŸfound
(
¨gv
[
¨g
]);

648 ++
¨g
;

649 i‡((
a˘i⁄
 =
TGZ_LIST
Ë&& (
¨g
 !
¨gc
))

650 
	`hñp
(1);

655 
a˘i⁄
)

657 
TGZ_LIST
:

658 
TGZ_EXTRACT
:

659 
f
 = 
	`gz›í
(
TGZfûe
,"rb");

660 i‡(
f
 =
NULL
)

662 
	`Ârötf
(
°dîr
,"%s: Couldn'àgz›í %s\n",
¥og
,
TGZfûe
);

665 
	`exô
(
	`èr
(
f
, 
a˘i⁄
, 
¨g
, 
¨gc
, 
¨gv
));

669 
	`îr‹
("Unknown option");

670 
	`exô
(1);

674 
	}
}

	@zlib-1.2.8/crc32.c

24 #ifde‡
MAKECRCH


25 
	~<°dio.h
>

26 #i‚de‡
DYNAMIC_CRC_TABLE


27 
	#DYNAMIC_CRC_TABLE


	)

31 
	~"zutû.h
"

33 
	#loˇl
 

	)

36 #i‡!
deföed
(
NOBYFOUR
Ë&& deföed(
Z_U4
)

37 
	#BYFOUR


	)

39 #ifde‡
BYFOUR


40 
loˇl
 
¸c32_lôée
 
OF
((,

41 c⁄° 
FAR
 *, ));

42 
loˇl
 
¸c32_big
 
OF
((,

43 c⁄° 
FAR
 *, ));

44 
	#TBLS
 8

	)

46 
	#TBLS
 1

	)

50 
loˇl
 
gf2_m©rix_times
 
OF
((*
m©
,

51 
vec
));

52 
loˇl
 
gf2_m©rix_squ¨e
 
OF
((*
squ¨e
, *
m©
));

53 
loˇl
 
uL⁄g
 
¸c32_comböe_
 
OF
((uL⁄g 
¸c1
, uL⁄g 
¸c2
, 
z_off64_t
 
Àn2
));

56 #ifde‡
DYNAMIC_CRC_TABLE


58 
loˇl
 vﬁ©ûê
	g¸c_èbÀ_em±y
 = 1;

59 
loˇl
 
z_¸c_t
 
FAR
 
	g¸c_èbÀ
[
TBLS
][256];

60 
loˇl
 
make_¸c_èbÀ
 
OF
(());

61 #ifde‡
MAKECRCH


62 
loˇl
 
wrôe_èbÀ
 
OF
((
FILE
 *, c⁄° 
z_¸c_t
 
FAR
 *));

90 
loˇl
 
	$make_¸c_èbÀ
()

92 
z_¸c_t
 
c
;

93 
n
, 
k
;

94 
z_¸c_t
 
pﬁy
;

96 vﬁ©ûê
fú°
 = 1;

97 c⁄° 
p
[] = {0,1,2,4,5,7,8,10,11,12,16,22,23,26};

102 i‡(
fú°
) {

103 
fú°
 = 0;

106 
pﬁy
 = 0;

107 
n
 = 0;Ç < ()((
p
)/());Ç++)

108 
pﬁy
 |(
z_¸c_t
)1 << (31 - 
p
[
n
]);

111 
n
 = 0;Ç < 256;Ç++) {

112 
c
 = (
z_¸c_t
)
n
;

113 
k
 = 0; k < 8; k++)

114 
c
 = c & 1 ? 
pﬁy
 ^ (c >> 1) : c >> 1;

115 
¸c_èbÀ
[0][
n
] = 
c
;

118 #ifde‡
BYFOUR


121 
n
 = 0;Ç < 256;Ç++) {

122 
c
 = 
¸c_èbÀ
[0][
n
];

123 
¸c_èbÀ
[4][
n
] = 
	`ZSWAP32
(
c
);

124 
k
 = 1; k < 4; k++) {

125 
c
 = 
¸c_èbÀ
[0][c & 0xff] ^ (c >> 8);

126 
¸c_èbÀ
[
k
][
n
] = 
c
;

127 
¸c_èbÀ
[
k
 + 4][
n
] = 
	`ZSWAP32
(
c
);

132 
¸c_èbÀ_em±y
 = 0;

136 
¸c_èbÀ_em±y
)

140 #ifde‡
MAKECRCH


143 
FILE
 *
out
;

145 
out
 = 
	`f›í
("crc32.h", "w");

146 i‡(
out
 =
NULL
) ;

147 
	`Ârötf
(
out
, "/* crc32.h --Åables forÑapid CRC calculation\n");

148 
	`Ârötf
(
out
, " * Generatedáutomatically by crc32.c\n */\n\n");

149 
	`Ârötf
(
out
, "local const z_crc_t FAR ");

150 
	`Ârötf
(
out
, "crc_table[TBLS][256] =\n{\n {\n");

151 
	`wrôe_èbÀ
(
out
, 
¸c_èbÀ
[0]);

152 #ifde‡
BYFOUR


153 
	`Ârötf
(
out
, "#ifdef BYFOUR\n");

154 
k
 = 1; k < 8; k++) {

155 
	`Ârötf
(
out
, " },\n {\n");

156 
	`wrôe_èbÀ
(
out
, 
¸c_èbÀ
[
k
]);

158 
	`Ârötf
(
out
, "#endif\n");

160 
	`Ârötf
(
out
, " }\n};\n");

161 
	`f˛o£
(
out
);

164 
	}
}

166 #ifde‡
MAKECRCH


167 
loˇl
 
	$wrôe_èbÀ
(
out
, 
èbÀ
)

168 
FILE
 *
out
;

169 c⁄° 
z_¸c_t
 
FAR
 *
èbÀ
;

171 
n
;

173 
n
 = 0;Ç < 256;Ç++)

174 
	`Ârötf
(
out
, "%s0x%08lxUL%s", 
n
 % 5 ? "" : " ",

175 ()(
èbÀ
[
n
]),

176 
n
 == 255 ? "\n" : (n % 5 == 4 ? ",\n" : ", "));

177 
	}
}

184 
	~"¸c32.h
"

190 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
	$gë_¸c_èbÀ
()

192 #ifde‡
DYNAMIC_CRC_TABLE


193 i‡(
¸c_èbÀ_em±y
)

194 
	`make_¸c_èbÀ
();

196  (c⁄° 
z_¸c_t
 
FAR
 *)
¸c_èbÀ
;

197 
	}
}

200 
	#DO1
 
¸c
 = 
¸c_èbÀ
[0][(()¸¯^ (*
buf
++)Ë& 0xff] ^ (¸¯>> 8)

	)

201 
	#DO8
 
DO1
; DO1; DO1; DO1; DO1; DO1; DO1; 
	)
DO1

204 
ZEXPORT
 
	$¸c32
(
¸c
, 
buf
, 
Àn
)

205 
¸c
;

206 c⁄° 
FAR
 *
buf
;

207 
uI¡
 
Àn
;

209 i‡(
buf
 =
Z_NULL
)  0UL;

211 #ifde‡
DYNAMIC_CRC_TABLE


212 i‡(
¸c_èbÀ_em±y
)

213 
	`make_¸c_èbÀ
();

216 #ifde‡
BYFOUR


217 i‡((*Ë=(
±rdiff_t
)) {

218 
z_¸c_t
 
ídün
;

220 
ídün
 = 1;

221 i‡(*((*)(&
ídün
)))

222  
	`¸c32_lôée
(
¸c
, 
buf
, 
Àn
);

224  
	`¸c32_big
(
¸c
, 
buf
, 
Àn
);

227 
¸c
 = crc ^ 0xffffffffUL;

228 
Àn
 >= 8) {

229 
DO8
;

230 
Àn
 -= 8;

232 i‡(
Àn
) do {

233 
DO1
;

234 } --
Àn
);

235  
¸c
 ^ 0xffffffffUL;

236 
	}
}

238 #ifde‡
BYFOUR


241 
	#DOLIT4
 
c
 ^*
buf4
++; \

242 
c
 = 
¸c_èbÀ
[3][c & 0xff] ^ crc_table[2][(c >> 8) & 0xff] ^ \

243 
¸c_èbÀ
[1][(
c
 >> 16Ë& 0xff] ^ crc_èbÀ[0][¯>> 24]

	)

244 
	#DOLIT32
 
DOLIT4
; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; DOLIT4; 
	)
DOLIT4

247 
loˇl
 
	$¸c32_lôée
(
¸c
, 
buf
, 
Àn
)

248 
¸c
;

249 c⁄° 
FAR
 *
buf
;

250 
Àn
;

252 
z_¸c_t
 
c
;

253 c⁄° 
z_¸c_t
 
FAR
 *
buf4
;

255 
c
 = (
z_¸c_t
)
¸c
;

256 
c
 = ~c;

257 
Àn
 && ((
±rdiff_t
)
buf
 & 3)) {

258 
c
 = 
¸c_èbÀ
[0][(¯^ *
buf
++) & 0xff] ^ (c >> 8);

259 
Àn
--;

262 
buf4
 = (c⁄° 
z_¸c_t
 
FAR
 *)(c⁄° FAR *)
buf
;

263 
Àn
 >= 32) {

264 
DOLIT32
;

265 
Àn
 -= 32;

267 
Àn
 >= 4) {

268 
DOLIT4
;

269 
Àn
 -= 4;

271 
buf
 = (c⁄° 
FAR
 *)
buf4
;

273 i‡(
Àn
) do {

274 
c
 = 
¸c_èbÀ
[0][(¯^ *
buf
++) & 0xff] ^ (c >> 8);

275 } --
Àn
);

276 
c
 = ~c;

277  ()
c
;

278 
	}
}

281 
	#DOBIG4
 
c
 ^*++
buf4
; \

282 
c
 = 
¸c_èbÀ
[4][c & 0xff] ^ crc_table[5][(c >> 8) & 0xff] ^ \

283 
¸c_èbÀ
[6][(
c
 >> 16Ë& 0xff] ^ crc_èbÀ[7][¯>> 24]

	)

284 
	#DOBIG32
 
DOBIG4
; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; DOBIG4; 
	)
DOBIG4

287 
loˇl
 
	$¸c32_big
(
¸c
, 
buf
, 
Àn
)

288 
¸c
;

289 c⁄° 
FAR
 *
buf
;

290 
Àn
;

292 
z_¸c_t
 
c
;

293 c⁄° 
z_¸c_t
 
FAR
 *
buf4
;

295 
c
 = 
	`ZSWAP32
((
z_¸c_t
)
¸c
);

296 
c
 = ~c;

297 
Àn
 && ((
±rdiff_t
)
buf
 & 3)) {

298 
c
 = 
¸c_èbÀ
[4][(¯>> 24Ë^ *
buf
++] ^ (c << 8);

299 
Àn
--;

302 
buf4
 = (c⁄° 
z_¸c_t
 
FAR
 *)(c⁄° FAR *)
buf
;

303 
buf4
--;

304 
Àn
 >= 32) {

305 
DOBIG32
;

306 
Àn
 -= 32;

308 
Àn
 >= 4) {

309 
DOBIG4
;

310 
Àn
 -= 4;

312 
buf4
++;

313 
buf
 = (c⁄° 
FAR
 *)
buf4
;

315 i‡(
Àn
) do {

316 
c
 = 
¸c_èbÀ
[4][(¯>> 24Ë^ *
buf
++] ^ (c << 8);

317 } --
Àn
);

318 
c
 = ~c;

319  ()(
	`ZSWAP32
(
c
));

320 
	}
}

324 
	#GF2_DIM
 32

	)

327 
loˇl
 
	$gf2_m©rix_times
(
m©
, 
vec
)

328 *
m©
;

329 
vec
;

331 
sum
;

333 
sum
 = 0;

334 
vec
) {

335 i‡(
vec
 & 1)

336 
sum
 ^*
m©
;

337 
vec
 >>= 1;

338 
m©
++;

340  
sum
;

341 
	}
}

344 
loˇl
 
	$gf2_m©rix_squ¨e
(
squ¨e
, 
m©
)

345 *
squ¨e
;

346 *
m©
;

348 
n
;

350 
n
 = 0;Ç < 
GF2_DIM
;Ç++)

351 
squ¨e
[
n
] = 
	`gf2_m©rix_times
(
m©
, mat[n]);

352 
	}
}

355 
loˇl
 
uL⁄g
 
	$¸c32_comböe_
(
¸c1
, 
¸c2
, 
Àn2
)

356 
uL⁄g
 
¸c1
;

357 
uL⁄g
 
¸c2
;

358 
z_off64_t
 
Àn2
;

360 
n
;

361 
row
;

362 
eví
[
GF2_DIM
];

363 
odd
[
GF2_DIM
];

366 i‡(
Àn2
 <= 0)

367  
¸c1
;

370 
odd
[0] = 0xedb88320UL;

371 
row
 = 1;

372 
n
 = 1;Ç < 
GF2_DIM
;Ç++) {

373 
odd
[
n
] = 
row
;

374 
row
 <<= 1;

378 
	`gf2_m©rix_squ¨e
(
eví
, 
odd
);

381 
	`gf2_m©rix_squ¨e
(
odd
, 
eví
);

387 
	`gf2_m©rix_squ¨e
(
eví
, 
odd
);

388 i‡(
Àn2
 & 1)

389 
¸c1
 = 
	`gf2_m©rix_times
(
eví
, crc1);

390 
Àn2
 >>= 1;

393 i‡(
Àn2
 == 0)

397 
	`gf2_m©rix_squ¨e
(
odd
, 
eví
);

398 i‡(
Àn2
 & 1)

399 
¸c1
 = 
	`gf2_m©rix_times
(
odd
, crc1);

400 
Àn2
 >>= 1;

403 } 
Àn2
 != 0);

406 
¸c1
 ^
¸c2
;

407  
¸c1
;

408 
	}
}

411 
uL⁄g
 
ZEXPORT
 
	$¸c32_comböe
(
¸c1
, 
¸c2
, 
Àn2
)

412 
uL⁄g
 
¸c1
;

413 
uL⁄g
 
¸c2
;

414 
z_off_t
 
Àn2
;

416  
	`¸c32_comböe_
(
¸c1
, 
¸c2
, 
Àn2
);

417 
	}
}

419 
uL⁄g
 
ZEXPORT
 
	$¸c32_comböe64
(
¸c1
, 
¸c2
, 
Àn2
)

420 
uL⁄g
 
¸c1
;

421 
uL⁄g
 
¸c2
;

422 
z_off64_t
 
Àn2
;

424  
	`¸c32_comböe_
(
¸c1
, 
¸c2
, 
Àn2
);

425 
	}
}

	@zlib-1.2.8/crc32.h

5 
loˇl
 c⁄° 
z_¸c_t
 
FAR
 
	g¸c_èbÀ
[
TBLS
][256] =

60 #ifde‡
BYFOUR


	@zlib-1.2.8/deflate.c

52 
	~"deÊ©e.h
"

54 c⁄° 
	gdeÊ©e_c›yright
[] =

67 
	m√ed_m‹e
,

68 
	mblock_d⁄e
,

69 
	mföish_°¨ãd
,

70 
	mföish_d⁄e


71 } 
	tblock_°©e
;

73 
	$block_°©e
 (*
	tcom¥ess_func
Ë
	tOF
((
	tdeÊ©e_°©e
 *
	ts
, 
	tÊush
));

76 
loˇl
 
fûl_wödow
 
	`OF
((
deÊ©e_°©e
 *
s
));

77 
loˇl
 
block_°©e
 
deÊ©e_°‹ed
 
	`OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

78 
loˇl
 
block_°©e
 
deÊ©e_Á°
 
	`OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

79 #i‚de‡
FASTEST


80 
loˇl
 
block_°©e
 
deÊ©e_¶ow
 
	`OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

82 
loˇl
 
block_°©e
 
deÊ©e_æe
 
	`OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

83 
loˇl
 
block_°©e
 
deÊ©e_huff
 
	`OF
((
deÊ©e_°©e
 *
s
, 
Êush
));

84 
loˇl
 
lm_öô
 
	`OF
((
deÊ©e_°©e
 *
s
));

85 
loˇl
 
putSh‹tMSB
 
	`OF
((
deÊ©e_°©e
 *
s
, 
uI¡
 
b
));

86 
loˇl
 
Êush_≥ndög
 
	`OF
((
z_°ªamp
 
°rm
));

87 
loˇl
 
ªad_buf
 
	`OF
((
z_°ªamp
 
°rm
, 
Byãf
 *
buf
, 
size
));

88 #ifde‡
ASMV


89 
m©ch_öô
 
	`OF
(());

90 
uI¡
 
l⁄ge°_m©ch
 
	`OF
((
deÊ©e_°©e
 *
s
, 
IPos
 
cur_m©ch
));

92 
loˇl
 
uI¡
 
l⁄ge°_m©ch
 
	`OF
((
deÊ©e_°©e
 *
s
, 
IPos
 
cur_m©ch
));

95 #ifde‡
DEBUG


96 
loˇl
 
check_m©ch
 
	`OF
((
deÊ©e_°©e
 *
s
, 
IPos
 
°¨t
, IPo†
m©ch
,

97 
Àngth
));

104 
	#NIL
 0

	)

107 #i‚de‡
TOO_FAR


108 
	#TOO_FAR
 4096

	)

117 
	sc⁄fig_s
 {

118 
ush
 
good_Àngth
;

119 
ush
 
max_œzy
;

120 
ush
 
ni˚_Àngth
;

121 
ush
 
max_chaö
;

122 
com¥ess_func
 
func
;

123 } 
	tc⁄fig
;

125 #ifde‡
FASTEST


126 
loˇl
 c⁄° 
c⁄fig
 
c⁄figuøti⁄_èbÀ
[2] = {

128  {0, 0, 0, 0, 
deÊ©e_°‹ed
},

129  {4, 4, 8, 4, 
deÊ©e_Á°
}
	}
};

131 
loˇl
 c⁄° 
c⁄fig
 
	gc⁄figuøti⁄_èbÀ
[10] = {

133  {0, 0, 0, 0, 
deÊ©e_°‹ed
},

134  {4, 4, 8, 4, 
deÊ©e_Á°
},

135  {4, 5, 16, 8, 
deÊ©e_Á°
},

136  {4, 6, 32, 32, 
deÊ©e_Á°
},

138  {4, 4, 16, 16, 
deÊ©e_¶ow
},

139  {8, 16, 32, 32, 
deÊ©e_¶ow
},

140  {8, 16, 128, 128, 
deÊ©e_¶ow
},

141  {8, 32, 128, 256, 
deÊ©e_¶ow
},

142  {32, 128, 258, 1024, 
deÊ©e_¶ow
},

143  {32, 258, 258, 4096, 
deÊ©e_¶ow
}};

151 
	#EQUAL
 0

	)

154 #i‚de‡
NO_DUMMY_DECL


155 
	s°©ic_åì_desc_s
 {
	mdummy
;};

159 
	#RANK
(
f
Ë(((fË<< 1Ë- ((fË> 4 ? 9 : 0))

	)

167 
	#UPDATE_HASH
(
s
,
h
,
c
Ë(h = (((h)<<s->
hash_shi·
Ë^ (c)Ë& s->
hash_mask
)

	)

180 #ifde‡
FASTEST


181 
	#INSERT_STRING
(
s
, 
°r
, 
m©ch_hód
) \

182 (
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[(
°r
Ë+ (
MIN_MATCH
-1)]), \

183 
m©ch_hód
 = 
s
->
hód
[s->
ös_h
], \

184 
s
->
hód
[s->
ös_h
] = (
Pos
)(
°r
))

	)

186 
	#INSERT_STRING
(
s
, 
°r
, 
m©ch_hód
) \

187 (
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[(
°r
Ë+ (
MIN_MATCH
-1)]), \

188 
m©ch_hód
 = 
s
->
¥ev
[(
°r
Ë& s->
w_mask
] = s->
hód
[s->
ös_h
], \

189 
s
->
hód
[s->
ös_h
] = (
Pos
)(
°r
))

	)

196 
	#CLEAR_HASH
(
s
) \

197 
s
->
hód
[s->
hash_size
-1] = 
NIL
; \

198 
	`zmemzîo
((
Byãf
 *)
s
->
hód
, ()(s->
hash_size
-1)*(*s->hód));

	)

201 
ZEXPORT
 
	$deÊ©eInô_
(
°rm
, 
Àvñ
, 
vîsi⁄
, 
°ªam_size
)

202 
z_°ªamp
 
°rm
;

203 
Àvñ
;

204 c⁄° *
vîsi⁄
;

205 
°ªam_size
;

207  
	`deÊ©eInô2_
(
°rm
, 
Àvñ
, 
Z_DEFLATED
, 
MAX_WBITS
, 
DEF_MEM_LEVEL
,

208 
Z_DEFAULT_STRATEGY
, 
vîsi⁄
, 
°ªam_size
);

210 
	}
}

213 
ZEXPORT
 
	$deÊ©eInô2_
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
,

214 
vîsi⁄
, 
°ªam_size
)

215 
z_°ªamp
 
°rm
;

216 
Àvñ
;

217 
mëhod
;

218 
wödowBôs
;

219 
memLevñ
;

220 
°øãgy
;

221 c⁄° *
vîsi⁄
;

222 
°ªam_size
;

224 
deÊ©e_°©e
 *
s
;

225 
wøp
 = 1;

226 c⁄° 
my_vîsi⁄
[] = 
ZLIB_VERSION
;

228 
ushf
 *
ovîœy
;

233 i‡(
vîsi⁄
 =
Z_NULL
 || vîsi⁄[0] !
my_vîsi⁄
[0] ||

234 
°ªam_size
 !(
z_°ªam
)) {

235  
Z_VERSION_ERROR
;

237 i‡(
°rm
 =
Z_NULL
Ë 
Z_STREAM_ERROR
;

239 
°rm
->
msg
 = 
Z_NULL
;

240 i‡(
°rm
->
zÆloc
 =(
Æloc_func
)0) {

241 #ifde‡
Z_SOLO


242  
Z_STREAM_ERROR
;

244 
°rm
->
zÆloc
 = 
zˇŒoc
;

245 
°rm
->
›aque
 = (
voidpf
)0;

248 i‡(
°rm
->
z‰ì
 =(
‰ì_func
)0)

249 #ifde‡
Z_SOLO


250  
Z_STREAM_ERROR
;

252 
°rm
->
z‰ì
 = 
zc‰ì
;

255 #ifde‡
FASTEST


256 i‡(
Àvñ
 != 0)Üevel = 1;

258 i‡(
Àvñ
 =
Z_DEFAULT_COMPRESSION
)Üevel = 6;

261 i‡(
wödowBôs
 < 0) {

262 
wøp
 = 0;

263 
wödowBôs
 = -windowBits;

265 #ifde‡
GZIP


266 i‡(
wödowBôs
 > 15) {

267 
wøp
 = 2;

268 
wödowBôs
 -= 16;

271 i‡(
memLevñ
 < 1 || memLevñ > 
MAX_MEM_LEVEL
 || 
mëhod
 !
Z_DEFLATED
 ||

272 
wödowBôs
 < 8 || wödowBô†> 15 || 
Àvñ
 < 0 ||Üevel > 9 ||

273 
°øãgy
 < 0 || så©egy > 
Z_FIXED
) {

274  
Z_STREAM_ERROR
;

276 i‡(
wödowBôs
 == 8) windowBits = 9;

277 
s
 = (
deÊ©e_°©e
 *Ë
	`ZALLOC
(
°rm
, 1, (deflate_state));

278 i‡(
s
 =
Z_NULL
Ë 
Z_MEM_ERROR
;

279 
°rm
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *)
s
;

280 
s
->
°rm
 = strm;

282 
s
->
wøp
 = wrap;

283 
s
->
gzhód
 = 
Z_NULL
;

284 
s
->
w_bôs
 = 
wödowBôs
;

285 
s
->
w_size
 = 1 << s->
w_bôs
;

286 
s
->
w_mask
 = s->
w_size
 - 1;

288 
s
->
hash_bôs
 = 
memLevñ
 + 7;

289 
s
->
hash_size
 = 1 << s->
hash_bôs
;

290 
s
->
hash_mask
 = s->
hash_size
 - 1;

291 
s
->
hash_shi·
 = ((s->
hash_bôs
+
MIN_MATCH
-1)/MIN_MATCH);

293 
s
->
wödow
 = (
Byãf
 *Ë
	`ZALLOC
(
°rm
, s->
w_size
, 2*(
Byã
));

294 
s
->
¥ev
 = (
Posf
 *Ë
	`ZALLOC
(
°rm
, s->
w_size
, (
Pos
));

295 
s
->
hód
 = (
Posf
 *Ë
	`ZALLOC
(
°rm
, s->
hash_size
, (
Pos
));

297 
s
->
high_w©î
 = 0;

299 
s
->
lô_bufsize
 = 1 << (
memLevñ
 + 6);

301 
ovîœy
 = (
ushf
 *Ë
	`ZALLOC
(
°rm
, 
s
->
lô_bufsize
, (
ush
)+2);

302 
s
->
≥ndög_buf
 = (
uchf
 *Ë
ovîœy
;

303 
s
->
≥ndög_buf_size
 = (
ulg
)s->
lô_bufsize
 * ((
ush
)+2L);

305 i‡(
s
->
wödow
 =
Z_NULL
 || s->
¥ev
 =Z_NULL || s->
hód
 == Z_NULL ||

306 
s
->
≥ndög_buf
 =
Z_NULL
) {

307 
s
->
°©us
 = 
FINISH_STATE
;

308 
°rm
->
msg
 = 
	`ERR_MSG
(
Z_MEM_ERROR
);

309 
	`deÊ©eEnd
 (
°rm
);

310  
Z_MEM_ERROR
;

312 
s
->
d_buf
 = 
ovîœy
 + s->
lô_bufsize
/(
ush
);

313 
s
->
l_buf
 = s->
≥ndög_buf
 + (1+(
ush
))*s->
lô_bufsize
;

315 
s
->
Àvñ
 =Üevel;

316 
s
->
°øãgy
 = strategy;

317 
s
->
mëhod
 = (
Byã
)method;

319  
	`deÊ©eRe£t
(
°rm
);

320 
	}
}

323 
ZEXPORT
 
	$deÊ©eSëDi˘i⁄¨y
 (
°rm
, 
di˘i⁄¨y
, 
di˘Lígth
)

324 
z_°ªamp
 
°rm
;

325 c⁄° 
Byãf
 *
di˘i⁄¨y
;

326 
uI¡
 
di˘Lígth
;

328 
deÊ©e_°©e
 *
s
;

329 
uI¡
 
°r
, 
n
;

330 
wøp
;

331 
avaû
;

332 
z_c⁄°
 *
√xt
;

334 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULL || 
di˘i⁄¨y
 == Z_NULL)

335  
Z_STREAM_ERROR
;

336 
s
 = 
°rm
->
°©e
;

337 
wøp
 = 
s
->wrap;

338 i‡(
wøp
 =2 || (wø∞=1 && 
s
->
°©us
 !
INIT_STATE
Ë|| s->
lookahód
)

339  
Z_STREAM_ERROR
;

342 i‡(
wøp
 == 1)

343 
°rm
->
adÀr
 = 
	`adÀr32
(°rm->adÀr, 
di˘i⁄¨y
, 
di˘Lígth
);

344 
s
->
wøp
 = 0;

347 i‡(
di˘Lígth
 >
s
->
w_size
) {

348 i‡(
wøp
 == 0) {

349 
	`CLEAR_HASH
(
s
);

350 
s
->
°r°¨t
 = 0;

351 
s
->
block_°¨t
 = 0L;

352 
s
->
ö£π
 = 0;

354 
di˘i⁄¨y
 +
di˘Lígth
 - 
s
->
w_size
;

355 
di˘Lígth
 = 
s
->
w_size
;

359 
avaû
 = 
°rm
->
avaû_ö
;

360 
√xt
 = 
°rm
->
√xt_ö
;

361 
°rm
->
avaû_ö
 = 
di˘Lígth
;

362 
°rm
->
√xt_ö
 = (
z_c⁄°
 
Byãf
 *)
di˘i⁄¨y
;

363 
	`fûl_wödow
(
s
);

364 
s
->
lookahód
 >
MIN_MATCH
) {

365 
°r
 = 
s
->
°r°¨t
;

366 
n
 = 
s
->
lookahód
 - (
MIN_MATCH
-1);

368 
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[
°r
 + 
MIN_MATCH
-1]);

369 #i‚de‡
FASTEST


370 
s
->
¥ev
[
°r
 & s->
w_mask
] = s->
hód
[s->
ös_h
];

372 
s
->
hód
[s->
ös_h
] = (
Pos
)
°r
;

373 
°r
++;

374 } --
n
);

375 
s
->
°r°¨t
 = 
°r
;

376 
s
->
lookahód
 = 
MIN_MATCH
-1;

377 
	`fûl_wödow
(
s
);

379 
s
->
°r°¨t
 +s->
lookahód
;

380 
s
->
block_°¨t
 = ()s->
°r°¨t
;

381 
s
->
ö£π
 = s->
lookahód
;

382 
s
->
lookahód
 = 0;

383 
s
->
m©ch_Àngth
 = s->
¥ev_Àngth
 = 
MIN_MATCH
-1;

384 
s
->
m©ch_avaûabÀ
 = 0;

385 
°rm
->
√xt_ö
 = 
√xt
;

386 
°rm
->
avaû_ö
 = 
avaû
;

387 
s
->
wøp
 = wrap;

388  
Z_OK
;

389 
	}
}

392 
ZEXPORT
 
	$deÊ©eRe£tKìp
 (
°rm
)

393 
z_°ªamp
 
°rm
;

395 
deÊ©e_°©e
 *
s
;

397 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL ||

398 
°rm
->
zÆloc
 =(
Æloc_func
)0 || såm->
z‰ì
 =(
‰ì_func
)0) {

399  
Z_STREAM_ERROR
;

402 
°rm
->
tŸÆ_ö
 = såm->
tŸÆ_out
 = 0;

403 
°rm
->
msg
 = 
Z_NULL
;

404 
°rm
->
d©a_ty≥
 = 
Z_UNKNOWN
;

406 
s
 = (
deÊ©e_°©e
 *)
°rm
->
°©e
;

407 
s
->
≥ndög
 = 0;

408 
s
->
≥ndög_out
 = s->
≥ndög_buf
;

410 i‡(
s
->
wøp
 < 0) {

411 
s
->
wøp
 = -s->wrap;

413 
s
->
°©us
 = s->
wøp
 ? 
INIT_STATE
 : 
BUSY_STATE
;

414 
°rm
->
adÀr
 =

415 #ifde‡
GZIP


416 
s
->
wøp
 =2 ? 
	`¸c32
(0L, 
Z_NULL
, 0) :

418 
	`adÀr32
(0L, 
Z_NULL
, 0);

419 
s
->
œ°_Êush
 = 
Z_NO_FLUSH
;

421 
	`_å_öô
(
s
);

423  
Z_OK
;

424 
	}
}

427 
ZEXPORT
 
	$deÊ©eRe£t
 (
°rm
)

428 
z_°ªamp
 
°rm
;

430 
ªt
;

432 
ªt
 = 
	`deÊ©eRe£tKìp
(
°rm
);

433 i‡(
ªt
 =
Z_OK
)

434 
	`lm_öô
(
°rm
->
°©e
);

435  
ªt
;

436 
	}
}

439 
ZEXPORT
 
	$deÊ©eSëHódî
 (
°rm
, 
hód
)

440 
z_°ªamp
 
°rm
;

441 
gz_hódîp
 
hód
;

443 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

444 i‡(
°rm
->
°©e
->
wøp
 !2Ë 
Z_STREAM_ERROR
;

445 
°rm
->
°©e
->
gzhód
 = 
hód
;

446  
Z_OK
;

447 
	}
}

450 
ZEXPORT
 
	$deÊ©ePídög
 (
°rm
, 
≥ndög
, 
bôs
)

451 *
≥ndög
;

452 *
bôs
;

453 
z_°ªamp
 
°rm
;

455 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

456 i‡(
≥ndög
 !
Z_NULL
)

457 *
≥ndög
 = 
°rm
->
°©e
->pending;

458 i‡(
bôs
 !
Z_NULL
)

459 *
bôs
 = 
°rm
->
°©e
->
bi_vÆid
;

460  
Z_OK
;

461 
	}
}

464 
ZEXPORT
 
	$deÊ©ePrime
 (
°rm
, 
bôs
, 
vÆue
)

465 
z_°ªamp
 
°rm
;

466 
bôs
;

467 
vÆue
;

469 
deÊ©e_°©e
 *
s
;

470 
put
;

472 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

473 
s
 = 
°rm
->
°©e
;

474 i‡((
Byãf
 *)(
s
->
d_buf
Ë< s->
≥ndög_out
 + ((
Buf_size
 + 7) >> 3))

475  
Z_BUF_ERROR
;

477 
put
 = 
Buf_size
 - 
s
->
bi_vÆid
;

478 i‡(
put
 > 
bôs
)

479 
put
 = 
bôs
;

480 
s
->
bi_buf
 |(
ush
)((
vÆue
 & ((1 << 
put
Ë- 1)Ë<< s->
bi_vÆid
);

481 
s
->
bi_vÆid
 +
put
;

482 
	`_å_Êush_bôs
(
s
);

483 
vÆue
 >>
put
;

484 
bôs
 -
put
;

485 } 
bôs
);

486  
Z_OK
;

487 
	}
}

490 
ZEXPORT
 
	$deÊ©eP¨ams
(
°rm
, 
Àvñ
, 
°øãgy
)

491 
z_°ªamp
 
°rm
;

492 
Àvñ
;

493 
°øãgy
;

495 
deÊ©e_°©e
 *
s
;

496 
com¥ess_func
 
func
;

497 
îr
 = 
Z_OK
;

499 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

500 
s
 = 
°rm
->
°©e
;

502 #ifde‡
FASTEST


503 i‡(
Àvñ
 != 0)Üevel = 1;

505 i‡(
Àvñ
 =
Z_DEFAULT_COMPRESSION
)Üevel = 6;

507 i‡(
Àvñ
 < 0 ||Üevñ > 9 || 
°øãgy
 < 0 || så©egy > 
Z_FIXED
) {

508  
Z_STREAM_ERROR
;

510 
func
 = 
c⁄figuøti⁄_èbÀ
[
s
->
Àvñ
].func;

512 i‡((
°øãgy
 !
s
->°øãgy || 
func
 !
c⁄figuøti⁄_èbÀ
[
Àvñ
].func) &&

513 
°rm
->
tŸÆ_ö
 != 0) {

515 
îr
 = 
	`deÊ©e
(
°rm
, 
Z_BLOCK
);

516 i‡(
îr
 =
Z_BUF_ERROR
 && 
s
->
≥ndög
 == 0)

517 
îr
 = 
Z_OK
;

519 i‡(
s
->
Àvñ
 !=Üevel) {

520 
s
->
Àvñ
 =Üevel;

521 
s
->
max_œzy_m©ch
 = 
c⁄figuøti⁄_èbÀ
[
Àvñ
].
max_œzy
;

522 
s
->
good_m©ch
 = 
c⁄figuøti⁄_èbÀ
[
Àvñ
].
good_Àngth
;

523 
s
->
ni˚_m©ch
 = 
c⁄figuøti⁄_èbÀ
[
Àvñ
].
ni˚_Àngth
;

524 
s
->
max_chaö_Àngth
 = 
c⁄figuøti⁄_èbÀ
[
Àvñ
].
max_chaö
;

526 
s
->
°øãgy
 = strategy;

527  
îr
;

528 
	}
}

531 
ZEXPORT
 
	$deÊ©eTu√
(
°rm
, 
good_Àngth
, 
max_œzy
, 
ni˚_Àngth
, 
max_chaö
)

532 
z_°ªamp
 
°rm
;

533 
good_Àngth
;

534 
max_œzy
;

535 
ni˚_Àngth
;

536 
max_chaö
;

538 
deÊ©e_°©e
 *
s
;

540 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

541 
s
 = 
°rm
->
°©e
;

542 
s
->
good_m©ch
 = 
good_Àngth
;

543 
s
->
max_œzy_m©ch
 = 
max_œzy
;

544 
s
->
ni˚_m©ch
 = 
ni˚_Àngth
;

545 
s
->
max_chaö_Àngth
 = 
max_chaö
;

546  
Z_OK
;

547 
	}
}

566 
uL⁄g
 
ZEXPORT
 
	$deÊ©eBound
(
°rm
, 
sour˚Lí
)

567 
z_°ªamp
 
°rm
;

568 
uL⁄g
 
sour˚Lí
;

570 
deÊ©e_°©e
 *
s
;

571 
uL⁄g
 
com∂í
, 
wø∂í
;

572 
Byãf
 *
°r
;

575 
com∂í
 = 
sour˚Lí
 +

576 ((
sour˚Lí
 + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;

579 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL)

580  
com∂í
 + 6;

583 
s
 = 
°rm
->
°©e
;

584 
s
->
wøp
) {

586 
wø∂í
 = 0;

589 
wø∂í
 = 6 + (
s
->
°r°¨t
 ? 4 : 0);

592 
wø∂í
 = 18;

593 i‡(
s
->
gzhód
 !
Z_NULL
) {

594 i‡(
s
->
gzhód
->
exåa
 !
Z_NULL
)

595 
wø∂í
 +2 + 
s
->
gzhód
->
exåa_Àn
;

596 
°r
 = 
s
->
gzhód
->
«me
;

597 i‡(
°r
 !
Z_NULL
)

599 
wø∂í
++;

600 } *
°r
++);

601 
°r
 = 
s
->
gzhód
->
commít
;

602 i‡(
°r
 !
Z_NULL
)

604 
wø∂í
++;

605 } *
°r
++);

606 i‡(
s
->
gzhód
->
h¸c
)

607 
wø∂í
 += 2;

611 
wø∂í
 = 6;

615 i‡(
s
->
w_bôs
 !15 || s->
hash_bôs
 != 8 + 7)

616  
com∂í
 + 
wø∂í
;

619  
sour˚Lí
 + (sourceLen >> 12) + (sourceLen >> 14) +

620 (
sour˚Lí
 >> 25Ë+ 13 - 6 + 
wø∂í
;

621 
	}
}

628 
loˇl
 
	$putSh‹tMSB
 (
s
, 
b
)

629 
deÊ©e_°©e
 *
s
;

630 
uI¡
 
b
;

632 
	`put_byã
(
s
, (
Byã
)(
b
 >> 8));

633 
	`put_byã
(
s
, (
Byã
)(
b
 & 0xff));

634 
	}
}

642 
loˇl
 
	$Êush_≥ndög
(
°rm
)

643 
z_°ªamp
 
°rm
;

645 
Àn
;

646 
deÊ©e_°©e
 *
s
 = 
°rm
->
°©e
;

648 
	`_å_Êush_bôs
(
s
);

649 
Àn
 = 
s
->
≥ndög
;

650 i‡(
Àn
 > 
°rm
->
avaû_out
)Üen = strm->avail_out;

651 i‡(
Àn
 == 0) ;

653 
	`zmem˝y
(
°rm
->
√xt_out
, 
s
->
≥ndög_out
, 
Àn
);

654 
°rm
->
√xt_out
 +
Àn
;

655 
s
->
≥ndög_out
 +
Àn
;

656 
°rm
->
tŸÆ_out
 +
Àn
;

657 
°rm
->
avaû_out
 -
Àn
;

658 
s
->
≥ndög
 -
Àn
;

659 i‡(
s
->
≥ndög
 == 0) {

660 
s
->
≥ndög_out
 = s->
≥ndög_buf
;

662 
	}
}

665 
ZEXPORT
 
	$deÊ©e
 (
°rm
, 
Êush
)

666 
z_°ªamp
 
°rm
;

667 
Êush
;

669 
ﬁd_Êush
;

670 
deÊ©e_°©e
 *
s
;

672 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL ||

673 
Êush
 > 
Z_BLOCK
 || flush < 0) {

674  
Z_STREAM_ERROR
;

676 
s
 = 
°rm
->
°©e
;

678 i‡(
°rm
->
√xt_out
 =
Z_NULL
 ||

679 (
°rm
->
√xt_ö
 =
Z_NULL
 && såm->
avaû_ö
 != 0) ||

680 (
s
->
°©us
 =
FINISH_STATE
 && 
Êush
 !
Z_FINISH
)) {

681 
	`ERR_RETURN
(
°rm
, 
Z_STREAM_ERROR
);

683 i‡(
°rm
->
avaû_out
 =0Ë
	`ERR_RETURN
(°rm, 
Z_BUF_ERROR
);

685 
s
->
°rm
 = strm;

686 
ﬁd_Êush
 = 
s
->
œ°_Êush
;

687 
s
->
œ°_Êush
 = 
Êush
;

690 i‡(
s
->
°©us
 =
INIT_STATE
) {

691 #ifde‡
GZIP


692 i‡(
s
->
wøp
 == 2) {

693 
°rm
->
adÀr
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

694 
	`put_byã
(
s
, 31);

695 
	`put_byã
(
s
, 139);

696 
	`put_byã
(
s
, 8);

697 i‡(
s
->
gzhód
 =
Z_NULL
) {

698 
	`put_byã
(
s
, 0);

699 
	`put_byã
(
s
, 0);

700 
	`put_byã
(
s
, 0);

701 
	`put_byã
(
s
, 0);

702 
	`put_byã
(
s
, 0);

703 
	`put_byã
(
s
, s->
Àvñ
 == 9 ? 2 :

704 (
s
->
°øãgy
 >
Z_HUFFMAN_ONLY
 || s->
Àvñ
 < 2 ?

706 
	`put_byã
(
s
, 
OS_CODE
);

707 
s
->
°©us
 = 
BUSY_STATE
;

710 
	`put_byã
(
s
, (s->
gzhód
->
ãxt
 ? 1 : 0) +

711 (
s
->
gzhód
->
h¸c
 ? 2 : 0) +

712 (
s
->
gzhód
->
exåa
 =
Z_NULL
 ? 0 : 4) +

713 (
s
->
gzhód
->
«me
 =
Z_NULL
 ? 0 : 8) +

714 (
s
->
gzhód
->
commít
 =
Z_NULL
 ? 0 : 16)

716 
	`put_byã
(
s
, (
Byã
)(s->
gzhód
->
time
 & 0xff));

717 
	`put_byã
(
s
, (
Byã
)((s->
gzhód
->
time
 >> 8) & 0xff));

718 
	`put_byã
(
s
, (
Byã
)((s->
gzhód
->
time
 >> 16) & 0xff));

719 
	`put_byã
(
s
, (
Byã
)((s->
gzhód
->
time
 >> 24) & 0xff));

720 
	`put_byã
(
s
, s->
Àvñ
 == 9 ? 2 :

721 (
s
->
°øãgy
 >
Z_HUFFMAN_ONLY
 || s->
Àvñ
 < 2 ?

723 
	`put_byã
(
s
, s->
gzhód
->
os
 & 0xff);

724 i‡(
s
->
gzhód
->
exåa
 !
Z_NULL
) {

725 
	`put_byã
(
s
, s->
gzhód
->
exåa_Àn
 & 0xff);

726 
	`put_byã
(
s
, (s->
gzhód
->
exåa_Àn
 >> 8) & 0xff);

728 i‡(
s
->
gzhód
->
h¸c
)

729 
°rm
->
adÀr
 = 
	`¸c32
(°rm->adÀr, 
s
->
≥ndög_buf
,

730 
s
->
≥ndög
);

731 
s
->
gzödex
 = 0;

732 
s
->
°©us
 = 
EXTRA_STATE
;

738 
uI¡
 
hódî
 = (
Z_DEFLATED
 + ((
s
->
w_bôs
-8)<<4)) << 8;

739 
uI¡
 
Àvñ_Êags
;

741 i‡(
s
->
°øãgy
 >
Z_HUFFMAN_ONLY
 || s->
Àvñ
 < 2)

742 
Àvñ_Êags
 = 0;

743 i‡(
s
->
Àvñ
 < 6)

744 
Àvñ_Êags
 = 1;

745 i‡(
s
->
Àvñ
 == 6)

746 
Àvñ_Êags
 = 2;

748 
Àvñ_Êags
 = 3;

749 
hódî
 |(
Àvñ_Êags
 << 6);

750 i‡(
s
->
°r°¨t
 !0Ë
hódî
 |
PRESET_DICT
;

751 
hódî
 += 31 - (header % 31);

753 
s
->
°©us
 = 
BUSY_STATE
;

754 
	`putSh‹tMSB
(
s
, 
hódî
);

757 i‡(
s
->
°r°¨t
 != 0) {

758 
	`putSh‹tMSB
(
s
, (
uI¡
)(
°rm
->
adÀr
 >> 16));

759 
	`putSh‹tMSB
(
s
, (
uI¡
)(
°rm
->
adÀr
 & 0xffff));

761 
°rm
->
adÀr
 = 
	`adÀr32
(0L, 
Z_NULL
, 0);

764 #ifde‡
GZIP


765 i‡(
s
->
°©us
 =
EXTRA_STATE
) {

766 i‡(
s
->
gzhód
->
exåa
 !
Z_NULL
) {

767 
uI¡
 
beg
 = 
s
->
≥ndög
;

769 
s
->
gzödex
 < (s->
gzhód
->
exåa_Àn
 & 0xffff)) {

770 i‡(
s
->
≥ndög
 =s->
≥ndög_buf_size
) {

771 i‡(
s
->
gzhód
->
h¸c
 && s->
≥ndög
 > 
beg
)

772 
°rm
->
adÀr
 = 
	`¸c32
(°rm->adÀr, 
s
->
≥ndög_buf
 + 
beg
,

773 
s
->
≥ndög
 - 
beg
);

774 
	`Êush_≥ndög
(
°rm
);

775 
beg
 = 
s
->
≥ndög
;

776 i‡(
s
->
≥ndög
 =s->
≥ndög_buf_size
)

779 
	`put_byã
(
s
, s->
gzhód
->
exåa
[s->
gzödex
]);

780 
s
->
gzödex
++;

782 i‡(
s
->
gzhód
->
h¸c
 && s->
≥ndög
 > 
beg
)

783 
°rm
->
adÀr
 = 
	`¸c32
(°rm->adÀr, 
s
->
≥ndög_buf
 + 
beg
,

784 
s
->
≥ndög
 - 
beg
);

785 i‡(
s
->
gzödex
 =s->
gzhód
->
exåa_Àn
) {

786 
s
->
gzödex
 = 0;

787 
s
->
°©us
 = 
NAME_STATE
;

791 
s
->
°©us
 = 
NAME_STATE
;

793 i‡(
s
->
°©us
 =
NAME_STATE
) {

794 i‡(
s
->
gzhód
->
«me
 !
Z_NULL
) {

795 
uI¡
 
beg
 = 
s
->
≥ndög
;

796 
vÆ
;

799 i‡(
s
->
≥ndög
 =s->
≥ndög_buf_size
) {

800 i‡(
s
->
gzhód
->
h¸c
 && s->
≥ndög
 > 
beg
)

801 
°rm
->
adÀr
 = 
	`¸c32
(°rm->adÀr, 
s
->
≥ndög_buf
 + 
beg
,

802 
s
->
≥ndög
 - 
beg
);

803 
	`Êush_≥ndög
(
°rm
);

804 
beg
 = 
s
->
≥ndög
;

805 i‡(
s
->
≥ndög
 =s->
≥ndög_buf_size
) {

806 
vÆ
 = 1;

810 
vÆ
 = 
s
->
gzhód
->
«me
[s->
gzödex
++];

811 
	`put_byã
(
s
, 
vÆ
);

812 } 
vÆ
 != 0);

813 i‡(
s
->
gzhód
->
h¸c
 && s->
≥ndög
 > 
beg
)

814 
°rm
->
adÀr
 = 
	`¸c32
(°rm->adÀr, 
s
->
≥ndög_buf
 + 
beg
,

815 
s
->
≥ndög
 - 
beg
);

816 i‡(
vÆ
 == 0) {

817 
s
->
gzödex
 = 0;

818 
s
->
°©us
 = 
COMMENT_STATE
;

822 
s
->
°©us
 = 
COMMENT_STATE
;

824 i‡(
s
->
°©us
 =
COMMENT_STATE
) {

825 i‡(
s
->
gzhód
->
commít
 !
Z_NULL
) {

826 
uI¡
 
beg
 = 
s
->
≥ndög
;

827 
vÆ
;

830 i‡(
s
->
≥ndög
 =s->
≥ndög_buf_size
) {

831 i‡(
s
->
gzhód
->
h¸c
 && s->
≥ndög
 > 
beg
)

832 
°rm
->
adÀr
 = 
	`¸c32
(°rm->adÀr, 
s
->
≥ndög_buf
 + 
beg
,

833 
s
->
≥ndög
 - 
beg
);

834 
	`Êush_≥ndög
(
°rm
);

835 
beg
 = 
s
->
≥ndög
;

836 i‡(
s
->
≥ndög
 =s->
≥ndög_buf_size
) {

837 
vÆ
 = 1;

841 
vÆ
 = 
s
->
gzhód
->
commít
[s->
gzödex
++];

842 
	`put_byã
(
s
, 
vÆ
);

843 } 
vÆ
 != 0);

844 i‡(
s
->
gzhód
->
h¸c
 && s->
≥ndög
 > 
beg
)

845 
°rm
->
adÀr
 = 
	`¸c32
(°rm->adÀr, 
s
->
≥ndög_buf
 + 
beg
,

846 
s
->
≥ndög
 - 
beg
);

847 i‡(
vÆ
 == 0)

848 
s
->
°©us
 = 
HCRC_STATE
;

851 
s
->
°©us
 = 
HCRC_STATE
;

853 i‡(
s
->
°©us
 =
HCRC_STATE
) {

854 i‡(
s
->
gzhód
->
h¸c
) {

855 i‡(
s
->
≥ndög
 + 2 > s->
≥ndög_buf_size
)

856 
	`Êush_≥ndög
(
°rm
);

857 i‡(
s
->
≥ndög
 + 2 <s->
≥ndög_buf_size
) {

858 
	`put_byã
(
s
, (
Byã
)(
°rm
->
adÀr
 & 0xff));

859 
	`put_byã
(
s
, (
Byã
)((
°rm
->
adÀr
 >> 8) & 0xff));

860 
°rm
->
adÀr
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

861 
s
->
°©us
 = 
BUSY_STATE
;

865 
s
->
°©us
 = 
BUSY_STATE
;

870 i‡(
s
->
≥ndög
 != 0) {

871 
	`Êush_≥ndög
(
°rm
);

872 i‡(
°rm
->
avaû_out
 == 0) {

879 
s
->
œ°_Êush
 = -1;

880  
Z_OK
;

887 } i‡(
°rm
->
avaû_ö
 =0 && 
	`RANK
(
Êush
Ë<RANK(
ﬁd_Êush
) &&

888 
Êush
 !
Z_FINISH
) {

889 
	`ERR_RETURN
(
°rm
, 
Z_BUF_ERROR
);

893 i‡(
s
->
°©us
 =
FINISH_STATE
 && 
°rm
->
avaû_ö
 != 0) {

894 
	`ERR_RETURN
(
°rm
, 
Z_BUF_ERROR
);

899 i‡(
°rm
->
avaû_ö
 !0 || 
s
->
lookahód
 != 0 ||

900 (
Êush
 !
Z_NO_FLUSH
 && 
s
->
°©us
 !
FINISH_STATE
)) {

901 
block_°©e
 
b°©e
;

903 
b°©e
 = 
s
->
°øãgy
 =
Z_HUFFMAN_ONLY
 ? 
	`deÊ©e_huff
(s, 
Êush
) :

904 (
s
->
°øãgy
 =
Z_RLE
 ? 
	`deÊ©e_æe
(s, 
Êush
) :

905 (*(
c⁄figuøti⁄_èbÀ
[
s
->
Àvñ
].
func
))(s, 
Êush
));

907 i‡(
b°©e
 =
föish_°¨ãd
 || b°©ê=
föish_d⁄e
) {

908 
s
->
°©us
 = 
FINISH_STATE
;

910 i‡(
b°©e
 =
√ed_m‹e
 || b°©ê=
föish_°¨ãd
) {

911 i‡(
°rm
->
avaû_out
 == 0) {

912 
s
->
œ°_Êush
 = -1;

914  
Z_OK
;

923 i‡(
b°©e
 =
block_d⁄e
) {

924 i‡(
Êush
 =
Z_PARTIAL_FLUSH
) {

925 
	`_å_Æign
(
s
);

926 } i‡(
Êush
 !
Z_BLOCK
) {

927 
	`_å_°‹ed_block
(
s
, (*)0, 0L, 0);

931 i‡(
Êush
 =
Z_FULL_FLUSH
) {

932 
	`CLEAR_HASH
(
s
);

933 i‡(
s
->
lookahód
 == 0) {

934 
s
->
°r°¨t
 = 0;

935 
s
->
block_°¨t
 = 0L;

936 
s
->
ö£π
 = 0;

940 
	`Êush_≥ndög
(
°rm
);

941 i‡(
°rm
->
avaû_out
 == 0) {

942 
s
->
œ°_Êush
 = -1;

943  
Z_OK
;

947 
	`As£π
(
°rm
->
avaû_out
 > 0, "bug2");

949 i‡(
Êush
 !
Z_FINISH
Ë 
Z_OK
;

950 i‡(
s
->
wøp
 <0Ë 
Z_STREAM_END
;

953 #ifde‡
GZIP


954 i‡(
s
->
wøp
 == 2) {

955 
	`put_byã
(
s
, (
Byã
)(
°rm
->
adÀr
 & 0xff));

956 
	`put_byã
(
s
, (
Byã
)((
°rm
->
adÀr
 >> 8) & 0xff));

957 
	`put_byã
(
s
, (
Byã
)((
°rm
->
adÀr
 >> 16) & 0xff));

958 
	`put_byã
(
s
, (
Byã
)((
°rm
->
adÀr
 >> 24) & 0xff));

959 
	`put_byã
(
s
, (
Byã
)(
°rm
->
tŸÆ_ö
 & 0xff));

960 
	`put_byã
(
s
, (
Byã
)((
°rm
->
tŸÆ_ö
 >> 8) & 0xff));

961 
	`put_byã
(
s
, (
Byã
)((
°rm
->
tŸÆ_ö
 >> 16) & 0xff));

962 
	`put_byã
(
s
, (
Byã
)((
°rm
->
tŸÆ_ö
 >> 24) & 0xff));

967 
	`putSh‹tMSB
(
s
, (
uI¡
)(
°rm
->
adÀr
 >> 16));

968 
	`putSh‹tMSB
(
s
, (
uI¡
)(
°rm
->
adÀr
 & 0xffff));

970 
	`Êush_≥ndög
(
°rm
);

974 i‡(
s
->
wøp
 > 0) s->wrap = -s->wrap;

975  
s
->
≥ndög
 !0 ? 
Z_OK
 : 
Z_STREAM_END
;

976 
	}
}

979 
ZEXPORT
 
	$deÊ©eEnd
 (
°rm
)

980 
z_°ªamp
 
°rm
;

982 
°©us
;

984 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

986 
°©us
 = 
°rm
->
°©e
->status;

987 i‡(
°©us
 !
INIT_STATE
 &&

988 
°©us
 !
EXTRA_STATE
 &&

989 
°©us
 !
NAME_STATE
 &&

990 
°©us
 !
COMMENT_STATE
 &&

991 
°©us
 !
HCRC_STATE
 &&

992 
°©us
 !
BUSY_STATE
 &&

993 
°©us
 !
FINISH_STATE
) {

994  
Z_STREAM_ERROR
;

998 
	`TRY_FREE
(
°rm
, såm->
°©e
->
≥ndög_buf
);

999 
	`TRY_FREE
(
°rm
, såm->
°©e
->
hód
);

1000 
	`TRY_FREE
(
°rm
, såm->
°©e
->
¥ev
);

1001 
	`TRY_FREE
(
°rm
, såm->
°©e
->
wödow
);

1003 
	`ZFREE
(
°rm
, såm->
°©e
);

1004 
°rm
->
°©e
 = 
Z_NULL
;

1006  
°©us
 =
BUSY_STATE
 ? 
Z_DATA_ERROR
 : 
Z_OK
;

1007 
	}
}

1014 
ZEXPORT
 
	$deÊ©eC›y
 (
de°
, 
sour˚
)

1015 
z_°ªamp
 
de°
;

1016 
z_°ªamp
 
sour˚
;

1018 #ifde‡
MAXSEG_64K


1019  
Z_STREAM_ERROR
;

1021 
deÊ©e_°©e
 *
ds
;

1022 
deÊ©e_°©e
 *
ss
;

1023 
ushf
 *
ovîœy
;

1026 i‡(
sour˚
 =
Z_NULL
 || 
de°
 =Z_NULL || sour˚->
°©e
 == Z_NULL) {

1027  
Z_STREAM_ERROR
;

1030 
ss
 = 
sour˚
->
°©e
;

1032 
	`zmem˝y
((
voidpf
)
de°
, (voidpf)
sour˚
, (
z_°ªam
));

1034 
ds
 = (
deÊ©e_°©e
 *Ë
	`ZALLOC
(
de°
, 1, (deflate_state));

1035 i‡(
ds
 =
Z_NULL
Ë 
Z_MEM_ERROR
;

1036 
de°
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *Ë
ds
;

1037 
	`zmem˝y
((
voidpf
)
ds
, (voidpf)
ss
, (
deÊ©e_°©e
));

1038 
ds
->
°rm
 = 
de°
;

1040 
ds
->
wödow
 = (
Byãf
 *Ë
	`ZALLOC
(
de°
, ds->
w_size
, 2*(
Byã
));

1041 
ds
->
¥ev
 = (
Posf
 *Ë
	`ZALLOC
(
de°
, ds->
w_size
, (
Pos
));

1042 
ds
->
hód
 = (
Posf
 *Ë
	`ZALLOC
(
de°
, ds->
hash_size
, (
Pos
));

1043 
ovîœy
 = (
ushf
 *Ë
	`ZALLOC
(
de°
, 
ds
->
lô_bufsize
, (
ush
)+2);

1044 
ds
->
≥ndög_buf
 = (
uchf
 *Ë
ovîœy
;

1046 i‡(
ds
->
wödow
 =
Z_NULL
 || ds->
¥ev
 =Z_NULL || ds->
hód
 == Z_NULL ||

1047 
ds
->
≥ndög_buf
 =
Z_NULL
) {

1048 
	`deÊ©eEnd
 (
de°
);

1049  
Z_MEM_ERROR
;

1052 
	`zmem˝y
(
ds
->
wödow
, 
ss
->wödow, ds->
w_size
 * 2 * (
Byã
));

1053 
	`zmem˝y
((
voidpf
)
ds
->
¥ev
, (voidpf)
ss
->¥ev, ds->
w_size
 * (
Pos
));

1054 
	`zmem˝y
((
voidpf
)
ds
->
hód
, (voidpf)
ss
->hód, ds->
hash_size
 * (
Pos
));

1055 
	`zmem˝y
(
ds
->
≥ndög_buf
, 
ss
->≥ndög_buf, (
uI¡
)ds->
≥ndög_buf_size
);

1057 
ds
->
≥ndög_out
 = ds->
≥ndög_buf
 + (
ss
->pending_out - ss->pending_buf);

1058 
ds
->
d_buf
 = 
ovîœy
 + ds->
lô_bufsize
/(
ush
);

1059 
ds
->
l_buf
 = ds->
≥ndög_buf
 + (1+(
ush
))*ds->
lô_bufsize
;

1061 
ds
->
l_desc
.
dyn_åì
 = ds->
dyn_…ªe
;

1062 
ds
->
d_desc
.
dyn_åì
 = ds->
dyn_dåì
;

1063 
ds
->
bl_desc
.
dyn_åì
 = ds->
bl_åì
;

1065  
Z_OK
;

1067 
	}
}

1076 
loˇl
 
	$ªad_buf
(
°rm
, 
buf
, 
size
)

1077 
z_°ªamp
 
°rm
;

1078 
Byãf
 *
buf
;

1079 
size
;

1081 
Àn
 = 
°rm
->
avaû_ö
;

1083 i‡(
Àn
 > 
size
)Üen = size;

1084 i‡(
Àn
 == 0)  0;

1086 
°rm
->
avaû_ö
 -
Àn
;

1088 
	`zmem˝y
(
buf
, 
°rm
->
√xt_ö
, 
Àn
);

1089 i‡(
°rm
->
°©e
->
wøp
 == 1) {

1090 
°rm
->
adÀr
 = 
	`adÀr32
(°rm->adÀr, 
buf
, 
Àn
);

1092 #ifde‡
GZIP


1093 i‡(
°rm
->
°©e
->
wøp
 == 2) {

1094 
°rm
->
adÀr
 = 
	`¸c32
(°rm->adÀr, 
buf
, 
Àn
);

1097 
°rm
->
√xt_ö
 +
Àn
;

1098 
°rm
->
tŸÆ_ö
 +
Àn
;

1100  ()
Àn
;

1101 
	}
}

1106 
loˇl
 
	$lm_öô
 (
s
)

1107 
deÊ©e_°©e
 *
s
;

1109 
s
->
wödow_size
 = (
ulg
)2L*s->
w_size
;

1111 
	`CLEAR_HASH
(
s
);

1115 
s
->
max_œzy_m©ch
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
max_œzy
;

1116 
s
->
good_m©ch
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
good_Àngth
;

1117 
s
->
ni˚_m©ch
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
ni˚_Àngth
;

1118 
s
->
max_chaö_Àngth
 = 
c⁄figuøti⁄_èbÀ
[s->
Àvñ
].
max_chaö
;

1120 
s
->
°r°¨t
 = 0;

1121 
s
->
block_°¨t
 = 0L;

1122 
s
->
lookahód
 = 0;

1123 
s
->
ö£π
 = 0;

1124 
s
->
m©ch_Àngth
 = s->
¥ev_Àngth
 = 
MIN_MATCH
-1;

1125 
s
->
m©ch_avaûabÀ
 = 0;

1126 
s
->
ös_h
 = 0;

1127 #i‚de‡
FASTEST


1128 #ifde‡
ASMV


1129 
	`m©ch_öô
();

1132 
	}
}

1134 #i‚de‡
FASTEST


1144 #i‚de‡
ASMV


1148 
loˇl
 
uI¡
 
	$l⁄ge°_m©ch
(
s
, 
cur_m©ch
)

1149 
deÊ©e_°©e
 *
s
;

1150 
IPos
 
cur_m©ch
;

1152 
chaö_Àngth
 = 
s
->
max_chaö_Àngth
;

1153 
Byãf
 *
sˇn
 = 
s
->
wödow
 + s->
°r°¨t
;

1154 
Byãf
 *
m©ch
;

1155 
Àn
;

1156 
be°_Àn
 = 
s
->
¥ev_Àngth
;

1157 
ni˚_m©ch
 = 
s
->nice_match;

1158 
IPos
 
limô
 = 
s
->
°r°¨t
 > (IPos)
	`MAX_DIST
(s) ?

1159 
s
->
°r°¨t
 - (
IPos
)
	`MAX_DIST
(sË: 
NIL
;

1163 
Posf
 *
¥ev
 = 
s
->prev;

1164 
uI¡
 
wmask
 = 
s
->
w_mask
;

1166 #ifde‡
UNALIGNED_OK


1170 
Byãf
 *
°ªnd
 = 
s
->
wödow
 + s->
°r°¨t
 + 
MAX_MATCH
 - 1;

1171 
ush
 
sˇn_°¨t
 = *(
ushf
*)
sˇn
;

1172 
ush
 
sˇn_íd
 = *(
ushf
*)(
sˇn
+
be°_Àn
-1);

1174 
Byãf
 *
°ªnd
 = 
s
->
wödow
 + s->
°r°¨t
 + 
MAX_MATCH
;

1175 
Byã
 
sˇn_íd1
 = 
sˇn
[
be°_Àn
-1];

1176 
Byã
 
sˇn_íd
 = 
sˇn
[
be°_Àn
];

1182 
	`As£π
(
s
->
hash_bôs
 >8 && 
MAX_MATCH
 == 258, "CodeÅoo clever");

1185 i‡(
s
->
¥ev_Àngth
 >s->
good_m©ch
) {

1186 
chaö_Àngth
 >>= 2;

1191 i‡((
uI¡
)
ni˚_m©ch
 > 
s
->
lookahód
)Çice_match = s->lookahead;

1193 
	`As£π
((
ulg
)
s
->
°r°¨t
 <s->
wödow_size
-
MIN_LOOKAHEAD
, "needÜookahead");

1196 
	`As£π
(
cur_m©ch
 < 
s
->
°r°¨t
, "no future");

1197 
m©ch
 = 
s
->
wödow
 + 
cur_m©ch
;

1207 #i‡(
	`deföed
(
UNALIGNED_OK
Ë&& 
MAX_MATCH
 == 258)

1211 i‡(*(
ushf
*)(
m©ch
+
be°_Àn
-1Ë!
sˇn_íd
 ||

1212 *(
ushf
*)
m©ch
 !
sˇn_°¨t
) ;

1223 
	`As£π
(
sˇn
[2] =
m©ch
[2], "scan[2]?");

1224 
sˇn
++, 
m©ch
++;

1226 } *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1227 *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1228 *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1229 *(
ushf
*)(
sˇn
+=2Ë=*(ushf*)(
m©ch
+=2) &&

1230 
sˇn
 < 
°ªnd
);

1234 
	`As£π
(
sˇn
 <
s
->
wödow
+()(s->
wödow_size
-1), "wild scan");

1235 i‡(*
sˇn
 =*
m©ch
) scan++;

1237 
Àn
 = (
MAX_MATCH
 - 1Ë- ()(
°ªnd
-
sˇn
);

1238 
sˇn
 = 
°ªnd
 - (
MAX_MATCH
-1);

1242 i‡(
m©ch
[
be°_Àn
] !
sˇn_íd
 ||

1243 
m©ch
[
be°_Àn
-1] !
sˇn_íd1
 ||

1244 *
m©ch
 !*
sˇn
 ||

1245 *++
m©ch
 !
sˇn
[1]) ;

1253 
sˇn
 +2, 
m©ch
++;

1254 
	`As£π
(*
sˇn
 =*
m©ch
, "match[2]?");

1260 } *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1261 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1262 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1263 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1264 
sˇn
 < 
°ªnd
);

1266 
	`As£π
(
sˇn
 <
s
->
wödow
+()(s->
wödow_size
-1), "wild scan");

1268 
Àn
 = 
MAX_MATCH
 - ()(
°ªnd
 - 
sˇn
);

1269 
sˇn
 = 
°ªnd
 - 
MAX_MATCH
;

1273 i‡(
Àn
 > 
be°_Àn
) {

1274 
s
->
m©ch_°¨t
 = 
cur_m©ch
;

1275 
be°_Àn
 = 
Àn
;

1276 i‡(
Àn
 >
ni˚_m©ch
) ;

1277 #ifde‡
UNALIGNED_OK


1278 
sˇn_íd
 = *(
ushf
*)(
sˇn
+
be°_Àn
-1);

1280 
sˇn_íd1
 = 
sˇn
[
be°_Àn
-1];

1281 
sˇn_íd
 = 
sˇn
[
be°_Àn
];

1284 } (
cur_m©ch
 = 
¥ev
[cur_m©ch & 
wmask
]Ë> 
limô


1285 && --
chaö_Àngth
 != 0);

1287 i‡((
uI¡
)
be°_Àn
 <
s
->
lookahód
)  (uInt)best_len;

1288  
s
->
lookahód
;

1289 
	}
}

1297 
loˇl
 
uI¡
 
	$l⁄ge°_m©ch
(
s
, 
cur_m©ch
)

1298 
deÊ©e_°©e
 *
s
;

1299 
IPos
 
cur_m©ch
;

1301 
Byãf
 *
sˇn
 = 
s
->
wödow
 + s->
°r°¨t
;

1302 
Byãf
 *
m©ch
;

1303 
Àn
;

1304 
Byãf
 *
°ªnd
 = 
s
->
wödow
 + s->
°r°¨t
 + 
MAX_MATCH
;

1309 
	`As£π
(
s
->
hash_bôs
 >8 && 
MAX_MATCH
 == 258, "CodeÅoo clever");

1311 
	`As£π
((
ulg
)
s
->
°r°¨t
 <s->
wödow_size
-
MIN_LOOKAHEAD
, "needÜookahead");

1313 
	`As£π
(
cur_m©ch
 < 
s
->
°r°¨t
, "no future");

1315 
m©ch
 = 
s
->
wödow
 + 
cur_m©ch
;

1319 i‡(
m©ch
[0] !
sˇn
[0] || m©ch[1] !sˇn[1]Ë 
MIN_MATCH
-1;

1327 
sˇn
 +2, 
m©ch
 += 2;

1328 
	`As£π
(*
sˇn
 =*
m©ch
, "match[2]?");

1334 } *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1335 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1336 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1337 *++
sˇn
 =*++
m©ch
 && *++scan == *++match &&

1338 
sˇn
 < 
°ªnd
);

1340 
	`As£π
(
sˇn
 <
s
->
wödow
+()(s->
wödow_size
-1), "wild scan");

1342 
Àn
 = 
MAX_MATCH
 - ()(
°ªnd
 - 
sˇn
);

1344 i‡(
Àn
 < 
MIN_MATCH
)  MIN_MATCH - 1;

1346 
s
->
m©ch_°¨t
 = 
cur_m©ch
;

1347  (
uI¡
)
Àn
 <
s
->
lookahód
 ? (uInt)len : s->lookahead;

1348 
	}
}

1352 #ifde‡
DEBUG


1356 
loˇl
 
	$check_m©ch
(
s
, 
°¨t
, 
m©ch
, 
Àngth
)

1357 
deÊ©e_°©e
 *
s
;

1358 
IPos
 
°¨t
, 
m©ch
;

1359 
Àngth
;

1362 i‡(
	`zmemcmp
(
s
->
wödow
 + 
m©ch
,

1363 
s
->
wödow
 + 
°¨t
, 
Àngth
Ë!
EQUAL
) {

1364 
	`Ârötf
(
°dîr
, " start %u, match %u,Üength %d\n",

1365 
°¨t
, 
m©ch
, 
Àngth
);

1367 
	`Ârötf
(
°dîr
, "%c%c", 
s
->
wödow
[
m©ch
++], s->wödow[
°¨t
++]);

1368 } --
Àngth
 != 0);

1369 
	`z_îr‹
("invalid match");

1371 i‡(
z_vîbo£
 > 1) {

1372 
	`Ârötf
(
°dîr
,"\\[%d,%d]", 
°¨t
-
m©ch
, 
Àngth
);

1373 dÿ{ 
	`putc
(
s
->
wödow
[
°¨t
++], 
°dîr
); } --
Àngth
 != 0);

1375 
	}
}

1377 
	#check_m©ch
(
s
, 
°¨t
, 
m©ch
, 
Àngth
)

	)

1390 
loˇl
 
	$fûl_wödow
(
s
)

1391 
deÊ©e_°©e
 *
s
;

1393 
n
, 
m
;

1394 
Posf
 *
p
;

1395 
m‹e
;

1396 
uI¡
 
wsize
 = 
s
->
w_size
;

1398 
	`As£π
(
s
->
lookahód
 < 
MIN_LOOKAHEAD
, "alreadyÉnoughÜookahead");

1401 
m‹e
 = ()(
s
->
wödow_size
 -(
ulg
)s->
lookahód
 -(ulg)s->
°r°¨t
);

1405 i‡(
m‹e
 =0 && 
s
->
°r°¨t
 =0 && s->
lookahód
 == 0) {

1406 
m‹e
 = 
wsize
;

1408 } i‡(
m‹e
 == ()(-1)) {

1412 
m‹e
--;

1419 i‡(
s
->
°r°¨t
 >
wsize
+
	`MAX_DIST
(s)) {

1421 
	`zmem˝y
(
s
->
wödow
, s->wödow+
wsize
, ()wsize);

1422 
s
->
m©ch_°¨t
 -
wsize
;

1423 
s
->
°r°¨t
 -
wsize
;

1424 
s
->
block_°¨t
 -(Ë
wsize
;

1432 
n
 = 
s
->
hash_size
;

1433 
p
 = &
s
->
hód
[
n
];

1435 
m
 = *--
p
;

1436 *
p
 = (
Pos
)(
m
 >
wsize
 ? m-wsizê: 
NIL
);

1437 } --
n
);

1439 
n
 = 
wsize
;

1440 #i‚de‡
FASTEST


1441 
p
 = &
s
->
¥ev
[
n
];

1443 
m
 = *--
p
;

1444 *
p
 = (
Pos
)(
m
 >
wsize
 ? m-wsizê: 
NIL
);

1448 } --
n
);

1450 
m‹e
 +
wsize
;

1452 i‡(
s
->
°rm
->
avaû_ö
 == 0) ;

1465 
	`As£π
(
m‹e
 >= 2, "more < 2");

1467 
n
 = 
	`ªad_buf
(
s
->
°rm
, s->
wödow
 + s->
°r°¨t
 + s->
lookahód
, 
m‹e
);

1468 
s
->
lookahód
 +
n
;

1471 i‡(
s
->
lookahód
 + s->
ö£π
 >
MIN_MATCH
) {

1472 
uI¡
 
°r
 = 
s
->
°r°¨t
 - s->
ö£π
;

1473 
s
->
ös_h
 = s->
wödow
[
°r
];

1474 
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[
°r
 + 1]);

1475 #i‡
MIN_MATCH
 != 3

1476 
CÆl
 
	`UPDATE_HASH
(Ë
MIN_MATCH
-3 
m‹e
 
times


1478 
s
->
ö£π
) {

1479 
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[
°r
 + 
MIN_MATCH
-1]);

1480 #i‚de‡
FASTEST


1481 
s
->
¥ev
[
°r
 & s->
w_mask
] = s->
hód
[s->
ös_h
];

1483 
s
->
hód
[s->
ös_h
] = (
Pos
)
°r
;

1484 
°r
++;

1485 
s
->
ö£π
--;

1486 i‡(
s
->
lookahód
 + s->
ö£π
 < 
MIN_MATCH
)

1494 } 
s
->
lookahód
 < 
MIN_LOOKAHEAD
 && s->
°rm
->
avaû_ö
 != 0);

1503 i‡(
s
->
high_w©î
 < s->
wödow_size
) {

1504 
ulg
 
cuº
 = 
s
->
°r°¨t
 + (ulg)(s->
lookahód
);

1505 
ulg
 
öô
;

1507 i‡(
s
->
high_w©î
 < 
cuº
) {

1511 
öô
 = 
s
->
wödow_size
 - 
cuº
;

1512 i‡(
öô
 > 
WIN_INIT
)

1513 
öô
 = 
WIN_INIT
;

1514 
	`zmemzîo
(
s
->
wödow
 + 
cuº
, ()
öô
);

1515 
s
->
high_w©î
 = 
cuº
 + 
öô
;

1517 i‡(
s
->
high_w©î
 < (
ulg
)
cuº
 + 
WIN_INIT
) {

1522 
öô
 = (
ulg
)
cuº
 + 
WIN_INIT
 - 
s
->
high_w©î
;

1523 i‡(
öô
 > 
s
->
wödow_size
 - s->
high_w©î
)

1524 
öô
 = 
s
->
wödow_size
 - s->
high_w©î
;

1525 
	`zmemzîo
(
s
->
wödow
 + s->
high_w©î
, ()
öô
);

1526 
s
->
high_w©î
 +
öô
;

1530 
	`As£π
((
ulg
)
s
->
°r°¨t
 <s->
wödow_size
 - 
MIN_LOOKAHEAD
,

1532 
	}
}

1538 
	#FLUSH_BLOCK_ONLY
(
s
, 
œ°
) { \

1539 
	`_å_Êush_block
(
s
, (s->
block_°¨t
 >= 0L ? \

1540 (
ch¨f
 *)&
s
->
wödow
[()s->
block_°¨t
] : \

1541 (
ch¨f
 *)
Z_NULL
), \

1542 (
ulg
)(()
s
->
°r°¨t
 - s->
block_°¨t
), \

1543 (
œ°
)); \

1544 
s
->
block_°¨t
 = s->
°r°¨t
; \

1545 
	`Êush_≥ndög
(
s
->
°rm
); \

1546 
	`Tø˚v
((
°dîr
,"[FLUSH]")); \

1547 }

	)

1550 
	#FLUSH_BLOCK
(
s
, 
œ°
) { \

1551 
	`FLUSH_BLOCK_ONLY
(
s
, 
œ°
); \

1552 i‡(
s
->
°rm
->
avaû_out
 =0Ë (
œ°
Ë? 
föish_°¨ãd
 : 
√ed_m‹e
; \

1553 }

	)

1564 
loˇl
 
block_°©e
 
	$deÊ©e_°‹ed
(
s
, 
Êush
)

1565 
deÊ©e_°©e
 *
s
;

1566 
Êush
;

1571 
ulg
 
max_block_size
 = 0xffff;

1572 
ulg
 
max_°¨t
;

1574 i‡(
max_block_size
 > 
s
->
≥ndög_buf_size
 - 5) {

1575 
max_block_size
 = 
s
->
≥ndög_buf_size
 - 5;

1581 i‡(
s
->
lookahód
 <= 1) {

1583 
	`As£π
(
s
->
°r°¨t
 < s->
w_size
+
	`MAX_DIST
(s) ||

1584 
s
->
block_°¨t
 >()s->
w_size
, "slideÅooÜate");

1586 
	`fûl_wödow
(
s
);

1587 i‡(
s
->
lookahód
 =0 && 
Êush
 =
Z_NO_FLUSH
Ë 
√ed_m‹e
;

1589 i‡(
s
->
lookahód
 == 0) ;

1591 
	`As£π
(
s
->
block_°¨t
 >= 0L, "block gone");

1593 
s
->
°r°¨t
 +s->
lookahód
;

1594 
s
->
lookahód
 = 0;

1597 
max_°¨t
 = 
s
->
block_°¨t
 + 
max_block_size
;

1598 i‡(
s
->
°r°¨t
 =0 || (
ulg
)s->°r°¨à>
max_°¨t
) {

1600 
s
->
lookahód
 = (
uI¡
)(s->
°r°¨t
 - 
max_°¨t
);

1601 
s
->
°r°¨t
 = (
uI¡
)
max_°¨t
;

1602 
	`FLUSH_BLOCK
(
s
, 0);

1607 i‡(
s
->
°r°¨t
 - (
uI¡
)s->
block_°¨t
 >
	`MAX_DIST
(s)) {

1608 
	`FLUSH_BLOCK
(
s
, 0);

1611 
s
->
ö£π
 = 0;

1612 i‡(
Êush
 =
Z_FINISH
) {

1613 
	`FLUSH_BLOCK
(
s
, 1);

1614  
föish_d⁄e
;

1616 i‡(()
s
->
°r°¨t
 > s->
block_°¨t
)

1617 
	`FLUSH_BLOCK
(
s
, 0);

1618  
block_d⁄e
;

1619 
	}
}

1628 
loˇl
 
block_°©e
 
	$deÊ©e_Á°
(
s
, 
Êush
)

1629 
deÊ©e_°©e
 *
s
;

1630 
Êush
;

1632 
IPos
 
hash_hód
;

1633 
bÊush
;

1641 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
) {

1642 
	`fûl_wödow
(
s
);

1643 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
 && 
Êush
 =
Z_NO_FLUSH
) {

1644  
√ed_m‹e
;

1646 i‡(
s
->
lookahód
 == 0) ;

1652 
hash_hód
 = 
NIL
;

1653 i‡(
s
->
lookahód
 >
MIN_MATCH
) {

1654 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1660 i‡(
hash_hód
 !
NIL
 && 
s
->
°r°¨t
 - hash_hód <
	`MAX_DIST
(s)) {

1665 
s
->
m©ch_Àngth
 = 
	`l⁄ge°_m©ch
 (s, 
hash_hód
);

1668 i‡(
s
->
m©ch_Àngth
 >
MIN_MATCH
) {

1669 
	`check_m©ch
(
s
, s->
°r°¨t
, s->
m©ch_°¨t
, s->
m©ch_Àngth
);

1671 
	`_å_èŒy_di°
(
s
, s->
°r°¨t
 - s->
m©ch_°¨t
,

1672 
s
->
m©ch_Àngth
 - 
MIN_MATCH
, 
bÊush
);

1674 
s
->
lookahód
 -s->
m©ch_Àngth
;

1679 #i‚de‡
FASTEST


1680 i‡(
s
->
m©ch_Àngth
 <s->
max_ö£π_Àngth
 &&

1681 
s
->
lookahód
 >
MIN_MATCH
) {

1682 
s
->
m©ch_Àngth
--;

1684 
s
->
°r°¨t
++;

1685 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1689 } --
s
->
m©ch_Àngth
 != 0);

1690 
s
->
°r°¨t
++;

1694 
s
->
°r°¨t
 +s->
m©ch_Àngth
;

1695 
s
->
m©ch_Àngth
 = 0;

1696 
s
->
ös_h
 = s->
wödow
[s->
°r°¨t
];

1697 
	`UPDATE_HASH
(
s
, s->
ös_h
, s->
wödow
[s->
°r°¨t
+1]);

1698 #i‡
MIN_MATCH
 != 3

1699 
CÆl
 
	`UPDATE_HASH
(Ë
MIN_MATCH
-3 
m‹e
 
times


1707 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
]));

1708 
	`_å_èŒy_lô
 (
s
, s->
wödow
[s->
°r°¨t
], 
bÊush
);

1709 
s
->
lookahód
--;

1710 
s
->
°r°¨t
++;

1712 i‡(
bÊush
Ë
	`FLUSH_BLOCK
(
s
, 0);

1714 
s
->
ö£π
 = s->
°r°¨t
 < 
MIN_MATCH
-1 ? s->strstart : MIN_MATCH-1;

1715 i‡(
Êush
 =
Z_FINISH
) {

1716 
	`FLUSH_BLOCK
(
s
, 1);

1717  
föish_d⁄e
;

1719 i‡(
s
->
œ°_lô
)

1720 
	`FLUSH_BLOCK
(
s
, 0);

1721  
block_d⁄e
;

1722 
	}
}

1724 #i‚de‡
FASTEST


1730 
loˇl
 
block_°©e
 
	$deÊ©e_¶ow
(
s
, 
Êush
)

1731 
deÊ©e_°©e
 *
s
;

1732 
Êush
;

1734 
IPos
 
hash_hód
;

1735 
bÊush
;

1744 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
) {

1745 
	`fûl_wödow
(
s
);

1746 i‡(
s
->
lookahód
 < 
MIN_LOOKAHEAD
 && 
Êush
 =
Z_NO_FLUSH
) {

1747  
√ed_m‹e
;

1749 i‡(
s
->
lookahód
 == 0) ;

1755 
hash_hód
 = 
NIL
;

1756 i‡(
s
->
lookahód
 >
MIN_MATCH
) {

1757 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1762 
s
->
¥ev_Àngth
 = s->
m©ch_Àngth
, s->
¥ev_m©ch
 = s->
m©ch_°¨t
;

1763 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

1765 i‡(
hash_hód
 !
NIL
 && 
s
->
¥ev_Àngth
 < s->
max_œzy_m©ch
 &&

1766 
s
->
°r°¨t
 - 
hash_hód
 <
	`MAX_DIST
(s)) {

1771 
s
->
m©ch_Àngth
 = 
	`l⁄ge°_m©ch
 (s, 
hash_hód
);

1774 i‡(
s
->
m©ch_Àngth
 <5 && (s->
°øãgy
 =
Z_FILTERED


1775 #i‡
TOO_FAR
 <= 32767

1776 || (
s
->
m©ch_Àngth
 =
MIN_MATCH
 &&

1777 
s
->
°r°¨t
 - s->
m©ch_°¨t
 > 
TOO_FAR
)

1784 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

1790 i‡(
s
->
¥ev_Àngth
 >
MIN_MATCH
 && s->
m©ch_Àngth
 <= s->prev_length) {

1791 
uI¡
 
max_ö£π
 = 
s
->
°r°¨t
 + s->
lookahód
 - 
MIN_MATCH
;

1794 
	`check_m©ch
(
s
, s->
°r°¨t
-1, s->
¥ev_m©ch
, s->
¥ev_Àngth
);

1796 
	`_å_èŒy_di°
(
s
, s->
°r°¨t
 -1 - s->
¥ev_m©ch
,

1797 
s
->
¥ev_Àngth
 - 
MIN_MATCH
, 
bÊush
);

1804 
s
->
lookahód
 -s->
¥ev_Àngth
-1;

1805 
s
->
¥ev_Àngth
 -= 2;

1807 i‡(++
s
->
°r°¨t
 <
max_ö£π
) {

1808 
	`INSERT_STRING
(
s
, s->
°r°¨t
, 
hash_hód
);

1810 } --
s
->
¥ev_Àngth
 != 0);

1811 
s
->
m©ch_avaûabÀ
 = 0;

1812 
s
->
m©ch_Àngth
 = 
MIN_MATCH
-1;

1813 
s
->
°r°¨t
++;

1815 i‡(
bÊush
Ë
	`FLUSH_BLOCK
(
s
, 0);

1817 } i‡(
s
->
m©ch_avaûabÀ
) {

1822 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
-1]));

1823 
	`_å_èŒy_lô
(
s
, s->
wödow
[s->
°r°¨t
-1], 
bÊush
);

1824 i‡(
bÊush
) {

1825 
	`FLUSH_BLOCK_ONLY
(
s
, 0);

1827 
s
->
°r°¨t
++;

1828 
s
->
lookahód
--;

1829 i‡(
s
->
°rm
->
avaû_out
 =0Ë 
√ed_m‹e
;

1834 
s
->
m©ch_avaûabÀ
 = 1;

1835 
s
->
°r°¨t
++;

1836 
s
->
lookahód
--;

1839 
	`As£π
 (
Êush
 !
Z_NO_FLUSH
, "no flush?");

1840 i‡(
s
->
m©ch_avaûabÀ
) {

1841 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
-1]));

1842 
	`_å_èŒy_lô
(
s
, s->
wödow
[s->
°r°¨t
-1], 
bÊush
);

1843 
s
->
m©ch_avaûabÀ
 = 0;

1845 
s
->
ö£π
 = s->
°r°¨t
 < 
MIN_MATCH
-1 ? s->strstart : MIN_MATCH-1;

1846 i‡(
Êush
 =
Z_FINISH
) {

1847 
	`FLUSH_BLOCK
(
s
, 1);

1848  
föish_d⁄e
;

1850 i‡(
s
->
œ°_lô
)

1851 
	`FLUSH_BLOCK
(
s
, 0);

1852  
block_d⁄e
;

1853 
	}
}

1861 
loˇl
 
block_°©e
 
	$deÊ©e_æe
(
s
, 
Êush
)

1862 
deÊ©e_°©e
 *
s
;

1863 
Êush
;

1865 
bÊush
;

1866 
uI¡
 
¥ev
;

1867 
Byãf
 *
sˇn
, *
°ªnd
;

1874 i‡(
s
->
lookahód
 <
MAX_MATCH
) {

1875 
	`fûl_wödow
(
s
);

1876 i‡(
s
->
lookahód
 <
MAX_MATCH
 && 
Êush
 =
Z_NO_FLUSH
) {

1877  
√ed_m‹e
;

1879 i‡(
s
->
lookahód
 == 0) ;

1883 
s
->
m©ch_Àngth
 = 0;

1884 i‡(
s
->
lookahód
 >
MIN_MATCH
 && s->
°r°¨t
 > 0) {

1885 
sˇn
 = 
s
->
wödow
 + s->
°r°¨t
 - 1;

1886 
¥ev
 = *
sˇn
;

1887 i‡(
¥ev
 =*++
sˇn
 &&Örev == *++scan &&Örev == *++scan) {

1888 
°ªnd
 = 
s
->
wödow
 + s->
°r°¨t
 + 
MAX_MATCH
;

1890 } 
¥ev
 =*++
sˇn
 &&Örev == *++scan &&

1891 
¥ev
 =*++
sˇn
 &&Örev == *++scan &&

1892 
¥ev
 =*++
sˇn
 &&Örev == *++scan &&

1893 
¥ev
 =*++
sˇn
 &&Örev == *++scan &&

1894 
sˇn
 < 
°ªnd
);

1895 
s
->
m©ch_Àngth
 = 
MAX_MATCH
 - ()(
°ªnd
 - 
sˇn
);

1896 i‡(
s
->
m©ch_Àngth
 > s->
lookahód
)

1897 
s
->
m©ch_Àngth
 = s->
lookahód
;

1899 
	`As£π
(
sˇn
 <
s
->
wödow
+(
uI¡
)(s->
wödow_size
-1), "wild scan");

1903 i‡(
s
->
m©ch_Àngth
 >
MIN_MATCH
) {

1904 
	`check_m©ch
(
s
, s->
°r°¨t
, s->°r°¨à- 1, s->
m©ch_Àngth
);

1906 
	`_å_èŒy_di°
(
s
, 1, s->
m©ch_Àngth
 - 
MIN_MATCH
, 
bÊush
);

1908 
s
->
lookahód
 -s->
m©ch_Àngth
;

1909 
s
->
°r°¨t
 +s->
m©ch_Àngth
;

1910 
s
->
m©ch_Àngth
 = 0;

1913 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
]));

1914 
	`_å_èŒy_lô
 (
s
, s->
wödow
[s->
°r°¨t
], 
bÊush
);

1915 
s
->
lookahód
--;

1916 
s
->
°r°¨t
++;

1918 i‡(
bÊush
Ë
	`FLUSH_BLOCK
(
s
, 0);

1920 
s
->
ö£π
 = 0;

1921 i‡(
Êush
 =
Z_FINISH
) {

1922 
	`FLUSH_BLOCK
(
s
, 1);

1923  
föish_d⁄e
;

1925 i‡(
s
->
œ°_lô
)

1926 
	`FLUSH_BLOCK
(
s
, 0);

1927  
block_d⁄e
;

1928 
	}
}

1934 
loˇl
 
block_°©e
 
	$deÊ©e_huff
(
s
, 
Êush
)

1935 
deÊ©e_°©e
 *
s
;

1936 
Êush
;

1938 
bÊush
;

1942 i‡(
s
->
lookahód
 == 0) {

1943 
	`fûl_wödow
(
s
);

1944 i‡(
s
->
lookahód
 == 0) {

1945 i‡(
Êush
 =
Z_NO_FLUSH
)

1946  
√ed_m‹e
;

1952 
s
->
m©ch_Àngth
 = 0;

1953 
	`Tø˚vv
((
°dîr
,"%c", 
s
->
wödow
[s->
°r°¨t
]));

1954 
	`_å_èŒy_lô
 (
s
, s->
wödow
[s->
°r°¨t
], 
bÊush
);

1955 
s
->
lookahód
--;

1956 
s
->
°r°¨t
++;

1957 i‡(
bÊush
Ë
	`FLUSH_BLOCK
(
s
, 0);

1959 
s
->
ö£π
 = 0;

1960 i‡(
Êush
 =
Z_FINISH
) {

1961 
	`FLUSH_BLOCK
(
s
, 1);

1962  
föish_d⁄e
;

1964 i‡(
s
->
œ°_lô
)

1965 
	`FLUSH_BLOCK
(
s
, 0);

1966  
block_d⁄e
;

1967 
	}
}

	@zlib-1.2.8/deflate.h

13 #i‚de‡
DEFLATE_H


14 
	#DEFLATE_H


	)

16 
	~"zutû.h
"

22 #i‚de‡
NO_GZIP


23 
	#GZIP


	)

30 
	#LENGTH_CODES
 29

	)

33 
	#LITERALS
 256

	)

36 
	#L_CODES
 (
LITERALS
+1+
LENGTH_CODES
)

	)

39 
	#D_CODES
 30

	)

42 
	#BL_CODES
 19

	)

45 
	#HEAP_SIZE
 (2*
L_CODES
+1)

	)

48 
	#MAX_BITS
 15

	)

51 
	#Buf_size
 16

	)

54 
	#INIT_STATE
 42

	)

55 
	#EXTRA_STATE
 69

	)

56 
	#NAME_STATE
 73

	)

57 
	#COMMENT_STATE
 91

	)

58 
	#HCRC_STATE
 103

	)

59 
	#BUSY_STATE
 113

	)

60 
	#FINISH_STATE
 666

	)

65 
	s˘_d©a_s
 {

67 
ush
 
	m‰eq
;

68 
ush
 
	mcode
;

69 } 
	mfc
;

71 
ush
 
	mdad
;

72 
ush
 
	mÀn
;

73 } 
	mdl
;

74 } 
	tFAR
 
	t˘_d©a
;

76 
	#Fªq
 
fc
.
‰eq


	)

77 
	#Code
 
fc
.
code


	)

78 
	#Dad
 
dl
.
dad


	)

79 
	#Lí
 
dl
.
Àn


	)

81 
°©ic_åì_desc_s
 
	t°©ic_åì_desc
;

83 
	såì_desc_s
 {

84 
˘_d©a
 *
	mdyn_åì
;

85 
	mmax_code
;

86 
°©ic_åì_desc
 *
	m°©_desc
;

87 } 
	tFAR
 
	tåì_desc
;

89 
ush
 
	tPos
;

90 
Pos
 
	tFAR
 
	tPosf
;

91 
	tIPos
;

97 
	söã∫Æ_°©e
 {

98 
z_°ªamp
 
	m°rm
;

99 
	m°©us
;

100 
Byãf
 *
	m≥ndög_buf
;

101 
ulg
 
	m≥ndög_buf_size
;

102 
Byãf
 *
	m≥ndög_out
;

103 
uI¡
 
	m≥ndög
;

104 
	mwøp
;

105 
gz_hódîp
 
	mgzhód
;

106 
uI¡
 
	mgzödex
;

107 
Byã
 
	mmëhod
;

108 
	mœ°_Êush
;

112 
uI¡
 
	mw_size
;

113 
uI¡
 
	mw_bôs
;

114 
uI¡
 
	mw_mask
;

116 
Byãf
 *
	mwödow
;

126 
ulg
 
	mwödow_size
;

131 
Posf
 *
	m¥ev
;

137 
Posf
 *
	mhód
;

139 
uI¡
 
	mös_h
;

140 
uI¡
 
	mhash_size
;

141 
uI¡
 
	mhash_bôs
;

142 
uI¡
 
	mhash_mask
;

144 
uI¡
 
	mhash_shi·
;

151 
	mblock_°¨t
;

156 
uI¡
 
	mm©ch_Àngth
;

157 
IPos
 
	m¥ev_m©ch
;

158 
	mm©ch_avaûabÀ
;

159 
uI¡
 
	m°r°¨t
;

160 
uI¡
 
	mm©ch_°¨t
;

161 
uI¡
 
	mlookahód
;

163 
uI¡
 
	m¥ev_Àngth
;

168 
uI¡
 
	mmax_chaö_Àngth
;

174 
uI¡
 
	mmax_œzy_m©ch
;

179 
	#max_ö£π_Àngth
 
max_œzy_m©ch


	)

185 
	mÀvñ
;

186 
	m°øãgy
;

188 
uI¡
 
	mgood_m©ch
;

191 
	mni˚_m©ch
;

195 
˘_d©a_s
 
	mdyn_…ªe
[
HEAP_SIZE
];

196 
˘_d©a_s
 
	mdyn_dåì
[2*
D_CODES
+1];

197 
˘_d©a_s
 
	mbl_åì
[2*
BL_CODES
+1];

199 
åì_desc_s
 
	ml_desc
;

200 
åì_desc_s
 
	md_desc
;

201 
åì_desc_s
 
	mbl_desc
;

203 
ush
 
	mbl_cou¡
[
MAX_BITS
+1];

206 
	mhóp
[2*
L_CODES
+1];

207 
	mhóp_Àn
;

208 
	mhóp_max
;

213 
uch
 
	mdïth
[2*
L_CODES
+1];

217 
uchf
 *
	ml_buf
;

219 
uI¡
 
	mlô_bufsize
;

239 
uI¡
 
	mœ°_lô
;

241 
ushf
 *
	md_buf
;

247 
ulg
 
	m›t_Àn
;

248 
ulg
 
	m°©ic_Àn
;

249 
uI¡
 
	mm©ches
;

250 
uI¡
 
	mö£π
;

252 #ifde‡
DEBUG


253 
ulg
 
	mcom¥es£d_Àn
;

254 
ulg
 
	mbôs_£¡
;

257 
ush
 
	mbi_buf
;

261 
	mbi_vÆid
;

266 
ulg
 
	mhigh_w©î
;

273 } 
	tFAR
 
	tdeÊ©e_°©e
;

278 
	#put_byã
(
s
, 
c
Ë{s->
≥ndög_buf
[s->
≥ndög
++] = (c);}

	)

281 
	#MIN_LOOKAHEAD
 (
MAX_MATCH
+
MIN_MATCH
+1)

	)

286 
	#MAX_DIST
(
s
Ë((s)->
w_size
-
MIN_LOOKAHEAD
)

	)

291 
	#WIN_INIT
 
MAX_MATCH


	)

296 
ZLIB_INTERNAL
 
_å_öô
 
OF
((
deÊ©e_°©e
 *
s
));

297 
ZLIB_INTERNAL
 
_å_èŒy
 
OF
((
deÊ©e_°©e
 *
s
, 
di°
, 
lc
));

298 
ZLIB_INTERNAL
 
_å_Êush_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
,

299 
ulg
 
°‹ed_Àn
, 
œ°
));

300 
ZLIB_INTERNAL
 
_å_Êush_bôs
 
OF
((
deÊ©e_°©e
 *
s
));

301 
ZLIB_INTERNAL
 
_å_Æign
 
OF
((
deÊ©e_°©e
 *
s
));

302 
ZLIB_INTERNAL
 
_å_°‹ed_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
,

303 
ulg
 
°‹ed_Àn
, 
œ°
));

305 
	#d_code
(
di°
) \

306 ((
di°
Ë< 256 ? 
_di°_code
[di°] : _di°_code[256+((di°)>>7)])

	)

312 #i‚de‡
DEBUG


315 #i‡
deföed
(
GEN_TREES_H
Ë|| !deföed(
STDC
)

316 
uch
 
ZLIB_INTERNAL
 
_Àngth_code
[];

317 
uch
 
ZLIB_INTERNAL
 
_di°_code
[];

319 c⁄° 
uch
 
ZLIB_INTERNAL
 
_Àngth_code
[];

320 c⁄° 
uch
 
ZLIB_INTERNAL
 
_di°_code
[];

323 
	#_å_èŒy_lô
(
s
, 
c
, 
Êush
) \

324 { 
uch
 
cc
 = (
c
); \

325 
s
->
d_buf
[s->
œ°_lô
] = 0; \

326 
s
->
l_buf
[s->
œ°_lô
++] = 
cc
; \

327 
s
->
dyn_…ªe
[
cc
].
Fªq
++; \

328 
Êush
 = (
s
->
œ°_lô
 =s->
lô_bufsize
-1); \

329 }

	)

330 
	#_å_èŒy_di°
(
s
, 
di°™˚
, 
Àngth
, 
Êush
) \

331 { 
uch
 
Àn
 = (
Àngth
); \

332 
ush
 
di°
 = (
di°™˚
); \

333 
s
->
d_buf
[s->
œ°_lô
] = 
di°
; \

334 
s
->
l_buf
[s->
œ°_lô
++] = 
Àn
; \

335 
di°
--; \

336 
s
->
dyn_…ªe
[
_Àngth_code
[
Àn
]+
LITERALS
+1].
Fªq
++; \

337 
s
->
dyn_dåì
[
	`d_code
(
di°
)].
Fªq
++; \

338 
Êush
 = (
s
->
œ°_lô
 =s->
lô_bufsize
-1); \

339 }

	)

341 
	#_å_èŒy_lô
(
s
, 
c
, 
Êush
ËÊush = 
	`_å_èŒy
(s, 0, c)

	)

342 
	#_å_èŒy_di°
(
s
, 
di°™˚
, 
Àngth
, 
Êush
) \

343 
Êush
 = 
	`_å_èŒy
(
s
, 
di°™˚
, 
Àngth
)

	)

	@zlib-1.2.8/examples/enough.c

102 
	~<°dio.h
>

103 
	~<°dlib.h
>

104 
	~<°rög.h
>

105 
	~<as£π.h
>

107 
	#loˇl
 

	)

110 
	tbig_t
;

111 
	tcode_t
;

112 
	sèb
 {

113 
size_t
 
	mÀn
;

114 *
	mvec
;

170 
loˇl
 
	gmax
;

171 
loˇl
 
	groŸ
;

172 
loˇl
 
	gœrge
;

173 
loˇl
 
size_t
 
	gsize
;

174 
loˇl
 *
	gcode
;

175 
loˇl
 
big_t
 *
	gnum
;

176 
loˇl
 
èb
 *
	gd⁄e
;

179 
	#INDEX
(
i
,
j
,
k
Ë(((
size_t
)((i-1)>>1)*((i-2)>>1)+(j>>1)-1)*(
max
-1)+k-1)

	)

182 
loˇl
 
	$˛ónup
()

184 
size_t
 
n
;

186 i‡(
d⁄e
 !
NULL
) {

187 
n
 = 0;Ç < 
size
;Ç++)

188 i‡(
d⁄e
[
n
].
Àn
)

189 
	`‰ì
(
d⁄e
[
n
].
vec
);

190 
	`‰ì
(
d⁄e
);

192 i‡(
num
 !
NULL
)

193 
	`‰ì
(
num
);

194 i‡(
code
 !
NULL
)

195 
	`‰ì
(
code
);

196 
	}
}

203 
loˇl
 
big_t
 
	$cou¡
(
syms
, 
Àn
, 
À·
)

205 
big_t
 
sum
;

206 
big_t
 
gŸ
;

207 
Àa°
;

208 
mo°
;

209 
u£
;

210 
size_t
 
ödex
;

213 i‡(
syms
 =
À·
)

217 
	`as£π
(
syms
 > 
À·
 &&Üe· > 0 && 
Àn
 < 
max
);

220 
ödex
 = 
	`INDEX
(
syms
, 
À·
, 
Àn
);

221 
gŸ
 = 
num
[
ödex
];

222 i‡(
gŸ
)

223  
gŸ
;

227 
Àa°
 = (
À·
 << 1Ë- 
syms
;

228 i‡(
Àa°
 < 0)

229 
Àa°
 = 0;

234 
mo°
 = (((
code_t
)
À·
 << (
max
 - 
Àn
)Ë- 
syms
) /

235 (((
code_t
)1 << (
max
 - 
Àn
)) - 1);

238 
sum
 = 0;

239 
u£
 = 
Àa°
; u£ <
mo°
; use++) {

240 
gŸ
 = 
	`cou¡
(
syms
 - 
u£
, 
Àn
 + 1, (
À·
 - use) << 1);

241 
sum
 +
gŸ
;

242 i‡(
gŸ
 =(
big_t
)0 - 1 || 
sum
 < got)

243  (
big_t
)0 - 1;

247 
	`as£π
(
sum
 != 0);

250 
num
[
ödex
] = 
sum
;

251  
sum
;

252 
	}
}

258 
loˇl
 
	$bìnhîe
(
syms
, 
Àn
, 
À·
, 
mem
, 
ªm
)

260 
size_t
 
ödex
;

261 
size_t
 
off£t
;

262 
bô
;

263 
size_t
 
Àngth
;

264 *
ve˘‹
;

267 
ödex
 = 
	`INDEX
(
syms
, 
À·
, 
Àn
);

268 
mem
 -1 << 
roŸ
;

269 
off£t
 = (
mem
 >> 3Ë+ 
ªm
;

270 
off£t
 = ((off£à* (off£à+ 1)Ë>> 1Ë+ 
ªm
;

271 
bô
 = 1 << (
mem
 & 7);

274 
Àngth
 = 
d⁄e
[
ödex
].
Àn
;

275 i‡(
off£t
 < 
Àngth
 && (
d⁄e
[
ödex
].
vec
[off£t] & 
bô
) != 0)

281 i‡(
Àngth
 <
off£t
) {

283 i‡(
Àngth
) {

285 
Àngth
 <<= 1;

286 } 
Àngth
 <
off£t
);

287 
ve˘‹
 = 
	`ªÆloc
(
d⁄e
[
ödex
].
vec
, 
Àngth
);

288 i‡(
ve˘‹
 !
NULL
)

289 
	`mem£t
(
ve˘‹
 + 
d⁄e
[
ödex
].
Àn
, 0, 
Àngth
 - done[index].len);

294 
Àngth
 = 1 << (
Àn
 - 
roŸ
);

295 
Àngth
 <
off£t
)

296 
Àngth
 <<= 1;

297 
ve˘‹
 = 
	`ˇŒoc
(
Àngth
, ());

301 i‡(
ve˘‹
 =
NULL
) {

302 
	`Âuts
("ab‹t: u«bÀÅÿÆloˇãÉnough mem‹y\n", 
°dîr
);

303 
	`˛ónup
();

304 
	`exô
(1);

308 
d⁄e
[
ödex
].
Àn
 = 
Àngth
;

309 
d⁄e
[
ödex
].
vec
 = 
ve˘‹
;

313 
d⁄e
[
ödex
].
vec
[
off£t
] |
bô
;

315 
	}
}

322 
loˇl
 
	$examöe
(
syms
, 
Àn
, 
À·
, 
mem
, 
ªm
)

324 
Àa°
;

325 
mo°
;

326 
u£
;

329 i‡(
syms
 =
À·
) {

331 
code
[
Àn
] = 
À·
;

334 
ªm
 < 
À·
) {

335 
À·
 -
ªm
;

336 
ªm
 = 1 << (
Àn
 - 
roŸ
);

337 
mem
 +
ªm
;

339 
	`as£π
(
ªm
 =
À·
);

342 i‡(
mem
 > 
œrge
) {

343 
œrge
 = 
mem
;

344 
	`¥ötf
("max %d: ", 
mem
);

345 
u£
 = 
roŸ
 + 1; u£ <
max
; use++)

346 i‡(
code
[
u£
])

347 
	`¥ötf
("%d[%d] ", 
code
[
u£
], use);

348 
	`putch¨
('\n');

349 
	`fÊush
(
°dout
);

353 
code
[
Àn
] = 0;

358 i‡(
	`bìnhîe
(
syms
, 
Àn
, 
À·
, 
mem
, 
ªm
))

363 
Àa°
 = (
À·
 << 1Ë- 
syms
;

364 i‡(
Àa°
 < 0)

365 
Àa°
 = 0;

370 
mo°
 = (((
code_t
)
À·
 << (
max
 - 
Àn
)Ë- 
syms
) /

371 (((
code_t
)1 << (
max
 - 
Àn
)) - 1);

374 
u£
 = 
Àa°
;

375 
ªm
 < 
u£
) {

376 
u£
 -
ªm
;

377 
ªm
 = 1 << (
Àn
 - 
roŸ
);

378 
mem
 +
ªm
;

380 
ªm
 -
u£
;

383 
u£
 = 
Àa°
; u£ <
mo°
; use++) {

384 
code
[
Àn
] = 
u£
;

385 
	`examöe
(
syms
 - 
u£
, 
Àn
 + 1, (
À·
 - use) << 1,

386 
mem
 + (
ªm
 ? 1 << (
Àn
 - 
roŸ
) : 0),Ñem << 1);

387 i‡(
ªm
 == 0) {

388 
ªm
 = 1 << (
Àn
 - 
roŸ
);

389 
mem
 +
ªm
;

391 
ªm
--;

395 
code
[
Àn
] = 0;

396 
	}
}

403 
loˇl
 
	$íough
(
syms
)

405 
n
;

406 
À·
;

407 
size_t
 
ödex
;

410 
n
 = 0;Ç <
max
;Ç++)

411 
code
[
n
] = 0;

414 
œrge
 = 1 << 
roŸ
;

415 i‡(
roŸ
 < 
max
)

416 
n
 = 3;Ç <
syms
;Ç++)

417 
À·
 = 2;Üe· < 
n
;Üeft += 2)

421 
ödex
 = 
	`INDEX
(
n
, 
À·
, 
roŸ
 + 1);

422 i‡(
roŸ
 + 1 < 
max
 && 
num
[
ödex
])

423 
	`examöe
(
n
, 
roŸ
 + 1, 
À·
, 1 <<Ñoot, 0);

427 i‡(
num
[
ödex
 - 1] && 
n
 <
À·
 << 1)

428 
	`examöe
((
n
 - 
À·
Ë<< 1, 
roŸ
 + 1, (n -Üeft) << 1,

429 1 << 
roŸ
, 0);

433 
	`¥ötf
("d⁄e: maximum o‡%dÅabÀÉ¡rõs\n", 
œrge
);

434 
	}
}

458 
	$maö
(
¨gc
, **
¨gv
)

460 
syms
;

461 
n
;

462 
big_t
 
gŸ
;

463 
big_t
 
sum
;

464 
code_t
 
w‹d
;

467 
code
 = 
NULL
;

468 
num
 = 
NULL
;

469 
d⁄e
 = 
NULL
;

472 
syms
 = 286;

473 
roŸ
 = 9;

474 
max
 = 15;

475 i‡(
¨gc
 > 1) {

476 
syms
 = 
	`©oi
(
¨gv
[1]);

477 i‡(
¨gc
 > 2) {

478 
roŸ
 = 
	`©oi
(
¨gv
[2]);

479 i‡(
¨gc
 > 3)

480 
max
 = 
	`©oi
(
¨gv
[3]);

483 i‡(
¨gc
 > 4 || 
syms
 < 2 || 
roŸ
 < 1 || 
max
 < 1) {

484 
	`Âuts
("invalidárguments,Çeed: [sym >= 2 [root >= 1 [max >= 1]]]\n",

485 
°dîr
);

490 i‡(
max
 > 
syms
 - 1)

491 
max
 = 
syms
 - 1;

494 
n
 = 0, 
w‹d
 = 1; word;Ç++, word <<= 1)

498 i‡(
max
 > 
n
 || (
code_t
)(
syms
 - 2) >= (((code_t)0 - 1) >> (max - 1))) {

499 
	`Âuts
("ab‹t: codêÀngthÅoÿl⁄g f‹ i¡î«»ty≥s\n", 
°dîr
);

504 i‡((
code_t
)(
syms
 - 1Ë> ((code_t)1 << 
max
) - 1) {

505 
	`Ârötf
(
°dîr
, "%d symbols cannot be coded in %d bits\n",

506 
syms
, 
max
);

511 
code
 = 
	`ˇŒoc
(
max
 + 1, ());

512 i‡(
code
 =
NULL
) {

513 
	`Âuts
("ab‹t: u«bÀÅÿÆloˇãÉnough mem‹y\n", 
°dîr
);

519 i‡(
syms
 == 2)

520 
num
 = 
NULL
;

522 
size
 = 
syms
 >> 1;

523 i‡(
size
 > ((
size_t
)0 - 1Ë/ (
n
 = (
syms
 - 1) >> 1) ||

524 (
size
 *
n
, sizê> ((
size_t
)0 - 1Ë/ (¿
max
 - 1)) ||

525 (
size
 *
n
, sizê> ((
size_t
)0 - 1Ë/ (
big_t
)) ||

526 (
num
 = 
	`ˇŒoc
(
size
, (
big_t
))Ë=
NULL
) {

527 
	`Âuts
("ab‹t: u«bÀÅÿÆloˇãÉnough mem‹y\n", 
°dîr
);

528 
	`˛ónup
();

534 
sum
 = 0;

535 
n
 = 2;Ç <
syms
;Ç++) {

536 
gŸ
 = 
	`cou¡
(
n
, 1, 2);

537 
sum
 +
gŸ
;

538 i‡(
gŸ
 =(
big_t
)0 - 1 || 
sum
 < got) {

539 
	`Âuts
("ab‹t: c™'àcou¡Åh© high!\n", 
°dîr
);

540 
	`˛ónup
();

543 
	`¥ötf
("%Œu %d-codes\n", 
gŸ
, 
n
);

545 
	`¥ötf
("%ŒuÅŸÆ code†f‹ 2Åÿ%d symbﬁs", 
sum
, 
syms
);

546 i‡(
max
 < 
syms
 - 1)

547 
	`¥ötf
(" (%d-bôÜígthÜimô)\n", 
max
);

549 
	`puts
(" (noÜengthÜimit)");

552 i‡(
syms
 == 2)

553 
d⁄e
 = 
NULL
;

554 i‡(
size
 > ((
size_t
)0 - 1Ë/ (
èb
) ||

555 (
d⁄e
 = 
	`ˇŒoc
(
size
, (
èb
))Ë=
NULL
) {

556 
	`Âuts
("ab‹t: u«bÀÅÿÆloˇãÉnough mem‹y\n", 
°dîr
);

557 
	`˛ónup
();

562 i‡(
roŸ
 > 
max
)

563 
roŸ
 = 
max
;

564 i‡((
code_t
)
syms
 < ((code_t)1 << (
roŸ
 + 1)))

565 
	`íough
(
syms
);

567 
	`puts
("cannot handle minimum codeÜengths >Ñoot");

570 
	`˛ónup
();

572 
	}
}

	@zlib-1.2.8/examples/fitblk.c

54 
	~<°dio.h
>

55 
	~<°dlib.h
>

56 
	~<as£π.h
>

57 
	~"zlib.h
"

59 
	#loˇl
 

	)

62 
loˇl
 
	$quô
(*
why
)

64 
	`Ârötf
(
°dîr
, "fôblkáb‹t: %s\n", 
why
);

65 
	`exô
(1);

66 
	}
}

68 
	#RAWLEN
 4096

	)

73 
loˇl
 
	$∑πcom¥ess
(
FILE
 *
ö
, 
z_°ªamp
 
def
)

75 
ªt
, 
Êush
;

76 
øw
[
RAWLEN
];

78 
Êush
 = 
Z_NO_FLUSH
;

80 
def
->
avaû_ö
 = 
	`‰ód
(
øw
, 1, 
RAWLEN
, 
ö
);

81 i‡(
	`„º‹
(
ö
))

82  
Z_ERRNO
;

83 
def
->
√xt_ö
 = 
øw
;

84 i‡(
	`„of
(
ö
))

85 
Êush
 = 
Z_FINISH
;

86 
ªt
 = 
	`deÊ©e
(
def
, 
Êush
);

87 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

88 } 
def
->
avaû_out
 !0 && 
Êush
 =
Z_NO_FLUSH
);

89  
ªt
;

90 
	}
}

96 
loˇl
 
	$ªcom¥ess
(
z_°ªamp
 
öf
, z_°ªam∞
def
)

98 
ªt
, 
Êush
;

99 
øw
[
RAWLEN
];

101 
Êush
 = 
Z_NO_FLUSH
;

104 
öf
->
avaû_out
 = 
RAWLEN
;

105 
öf
->
√xt_out
 = 
øw
;

106 
ªt
 = 
	`öÊ©e
(
öf
, 
Z_NO_FLUSH
);

107 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
 &&Ñë !
Z_DATA_ERROR
 &&

108 
ªt
 !
Z_NEED_DICT
);

109 i‡(
ªt
 =
Z_MEM_ERROR
)

110  
ªt
;

113 
def
->
avaû_ö
 = 
RAWLEN
 - 
öf
->
avaû_out
;

114 
def
->
√xt_ö
 = 
øw
;

115 i‡(
öf
->
avaû_out
 != 0)

116 
Êush
 = 
Z_FINISH
;

117 
ªt
 = 
	`deÊ©e
(
def
, 
Êush
);

118 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

119 } 
ªt
 !
Z_STREAM_END
 && 
def
->
avaû_out
 != 0);

120  
ªt
;

121 
	}
}

123 
	#EXCESS
 256

	)

124 
	#MARGIN
 8

	)

127 
	$maö
(
¨gc
, **
¨gv
)

129 
ªt
;

130 
size
;

131 
have
;

132 *
blk
;

133 *
tmp
;

134 
z_°ªam
 
def
, 
öf
;

137 i‡(
¨gc
 != 2)

138 
	`quô
("need oneárgument: size of output block");

139 
ªt
 = 
	`°πﬁ
(
¨gv
[1],árgv + 1, 10);

140 i‡(
¨gv
[1][0] != 0)

141 
	`quô
("argument must beáÇumber");

142 i‡(
ªt
 < 8)

143 
	`quô
("needÖositive size of 8 or greater");

144 
size
 = ()
ªt
;

147 
blk
 = 
	`mÆloc
(
size
 + 
EXCESS
);

148 
def
.
zÆloc
 = 
Z_NULL
;

149 
def
.
z‰ì
 = 
Z_NULL
;

150 
def
.
›aque
 = 
Z_NULL
;

151 
ªt
 = 
	`deÊ©eInô
(&
def
, 
Z_DEFAULT_COMPRESSION
);

152 i‡(
ªt
 !
Z_OK
 || 
blk
 =
NULL
)

153 
	`quô
("out of memory");

156 
def
.
avaû_out
 = 
size
 + 
EXCESS
;

157 
def
.
√xt_out
 = 
blk
;

158 
ªt
 = 
	`∑πcom¥ess
(
°dö
, &
def
);

159 i‡(
ªt
 =
Z_ERRNO
)

160 
	`quô
("errorÑeading input");

163 i‡(
ªt
 =
Z_STREAM_END
 && 
def
.
avaû_out
 >
EXCESS
) {

165 
have
 = 
size
 + 
EXCESS
 - 
def
.
avaû_out
;

166 i‡(
	`fwrôe
(
blk
, 1, 
have
, 
°dout
Ë!havê|| 
	`„º‹
(stdout))

167 
	`quô
("error writing output");

170 
ªt
 = 
	`deÊ©eEnd
(&
def
);

171 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

172 
	`‰ì
(
blk
);

173 
	`Ârötf
(
°dîr
,

175 
size
 - 
have
, size);

180 
öf
.
zÆloc
 = 
Z_NULL
;

181 
öf
.
z‰ì
 = 
Z_NULL
;

182 
öf
.
›aque
 = 
Z_NULL
;

183 
öf
.
avaû_ö
 = 0;

184 
öf
.
√xt_ö
 = 
Z_NULL
;

185 
ªt
 = 
	`öÊ©eInô
(&
öf
);

186 
tmp
 = 
	`mÆloc
(
size
 + 
EXCESS
);

187 i‡(
ªt
 !
Z_OK
 || 
tmp
 =
NULL
)

188 
	`quô
("out of memory");

189 
ªt
 = 
	`deÊ©eRe£t
(&
def
);

190 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

193 
öf
.
avaû_ö
 = 
size
 + 
EXCESS
;

194 
öf
.
√xt_ö
 = 
blk
;

195 
def
.
avaû_out
 = 
size
 + 
EXCESS
;

196 
def
.
√xt_out
 = 
tmp
;

197 
ªt
 = 
	`ªcom¥ess
(&
öf
, &
def
);

198 i‡(
ªt
 =
Z_MEM_ERROR
)

199 
	`quô
("out of memory");

202 
ªt
 = 
	`öÊ©eRe£t
(&
öf
);

203 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

204 
ªt
 = 
	`deÊ©eRe£t
(&
def
);

205 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

208 
öf
.
avaû_ö
 = 
size
 - 
MARGIN
;

209 
öf
.
√xt_ö
 = 
tmp
;

210 
def
.
avaû_out
 = 
size
;

211 
def
.
√xt_out
 = 
blk
;

212 
ªt
 = 
	`ªcom¥ess
(&
öf
, &
def
);

213 i‡(
ªt
 =
Z_MEM_ERROR
)

214 
	`quô
("out of memory");

215 
	`as£π
(
ªt
 =
Z_STREAM_END
);

218 
have
 = 
size
 - 
def
.
avaû_out
;

219 i‡(
	`fwrôe
(
blk
, 1, 
have
, 
°dout
Ë!havê|| 
	`„º‹
(stdout))

220 
	`quô
("error writing output");

223 
	`‰ì
(
tmp
);

224 
ªt
 = 
	`öÊ©eEnd
(&
öf
);

225 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

226 
ªt
 = 
	`deÊ©eEnd
(&
def
);

227 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

228 
	`‰ì
(
blk
);

229 
	`Ârötf
(
°dîr
,

231 
size
 - 
have
, size, 
def
.
tŸÆ_ö
);

233 
	}
}

	@zlib-1.2.8/examples/gun.c

60 
	~<°dio.h
>

61 
	~<°dlib.h
>

62 
	~<°rög.h
>

63 
	~<î∫o.h
>

64 
	~<f˙é.h
>

65 
	~<uni°d.h
>

66 
	~<sys/ty≥s.h
>

67 
	~<sys/°©.h
>

68 
	~<utime.h
>

69 
	~"zlib.h
"

73 
	#loˇl
 

	)

76 
	#SIZE
 32768U

	)

77 
	#PIECE
 16384

	)

81 
	söd
 {

82 
	möfûe
;

83 *
	möbuf
;

89 
loˇl
 
	$ö
(*
ö_desc
, 
z_c⁄°
 **
buf
)

91 
ªt
;

92 
Àn
;

93 *
√xt
;

94 
öd
 *
me
 = (öd *)
ö_desc
;

96 
√xt
 = 
me
->
öbuf
;

97 *
buf
 = 
√xt
;

98 
Àn
 = 0;

100 
ªt
 = 
PIECE
;

101 i‡(()
ªt
 > 
SIZE
 - 
Àn
)

102 
ªt
 = ()(
SIZE
 - 
Àn
);

103 
ªt
 = ()
	`ªad
(
me
->
öfûe
, 
√xt
,Ñet);

104 i‡(
ªt
 == -1) {

105 
Àn
 = 0;

108 
√xt
 +
ªt
;

109 
Àn
 +
ªt
;

110 } 
ªt
 !0 && 
Àn
 < 
SIZE
);

111  
Àn
;

112 
	}
}

119 
	soutd
 {

120 
	moutfûe
;

121 
	mcheck
;

122 
	m¸c
;

123 
	mtŸÆ
;

131 
loˇl
 
	$out
(*
out_desc
, *
buf
, 
Àn
)

133 
ªt
;

134 
outd
 *
me
 = (outd *)
out_desc
;

136 i‡(
me
->
check
) {

137 
me
->
¸c
 = 
	`¸c32
(me->¸c, 
buf
, 
Àn
);

138 
me
->
tŸÆ
 +
Àn
;

140 i‡(
me
->
outfûe
 != -1)

142 
ªt
 = 
PIECE
;

143 i‡(()
ªt
 > 
Àn
)

144 
ªt
 = ()
Àn
;

145 
ªt
 = ()
	`wrôe
(
me
->
outfûe
, 
buf
,Ñet);

146 i‡(
ªt
 == -1)

148 
buf
 +
ªt
;

149 
Àn
 -
ªt
;

150 } 
Àn
 != 0);

152 
	}
}

155 
	#NEXT
(Ë(
have
 ? 0 : (havê
	`ö
(
ödp
, &
√xt
)), \

156 
œ°
 = 
have
 ? (have--, ()(*
√xt
++)Ë: -1)

	)

161 
	göbuf
[
SIZE
];

162 
	goutbuf
[
SIZE
];

163 
	g¥efix
[65536];

164 
	gsuffix
[65536];

165 
	gm©ch
[65280 + 2];

171 
	#FLUSHCODE
() \

173 
À·
 = 0; \

174 
ªm
 = 0; \

175 i‡(
chunk
 > 
have
) { \

176 
chunk
 -
have
; \

177 
have
 = 0; \

178 i‡(
	`NEXT
() == -1) \

180 
chunk
--; \

181 i‡(
chunk
 > 
have
) { \

182 
chunk
 = 
have
 = 0; \

186 
have
 -
chunk
; \

187 
√xt
 +
chunk
; \

188 
chunk
 = 0; \

189 } 0)

	)

200 
loˇl
 
	$lu≈ùe
(
have
, 
z_c⁄°
 *
√xt
, 
öd
 *
ödp
,

201 
outfûe
, 
z_°ªam
 *
°rm
)

203 
œ°
;

204 
chunk
;

205 
À·
;

206 
ªm
;

207 
bôs
;

208 
code
;

209 
mask
;

210 
max
;

211 
Êags
;

212 
íd
;

213 
ãmp
;

214 
¥ev
;

215 
föÆ
;

216 
°ack
;

217 
out˙t
;

218 
outd
 outd;

219 *
p
;

222 
outd
.
outfûe
 = outfile;

223 
outd
.
check
 = 0;

226 
Êags
 = 
	`NEXT
();

227 i‡(
œ°
 == -1)

228  
Z_BUF_ERROR
;

229 i‡(
Êags
 & 0x60) {

230 
°rm
->
msg
 = (*)"unknownÜzw flags set";

231  
Z_DATA_ERROR
;

233 
max
 = 
Êags
 & 0x1f;

234 i‡(
max
 < 9 || max > 16) {

235 
°rm
->
msg
 = (*)"lzw bits out ofÑange";

236  
Z_DATA_ERROR
;

238 i‡(
max
 == 9)

239 
max
 = 10;

240 
Êags
 &= 0x80;

243 
bôs
 = 9;

244 
mask
 = 0x1ff;

245 
íd
 = 
Êags
 ? 256 : 255;

249 i‡(
	`NEXT
() == -1)

250  
Z_OK
;

251 
föÆ
 = 
¥ev
 = ()
œ°
;

252 i‡(
	`NEXT
() == -1)

253  
Z_BUF_ERROR
;

254 i‡(
œ°
 & 1) {

255 
°rm
->
msg
 = (*)"invalidÜzw code";

256  
Z_DATA_ERROR
;

258 
ªm
 = ()
œ°
 >> 1;

259 
À·
 = 7;

260 
chunk
 = 
bôs
 - 2;

261 
outbuf
[0] = ()
föÆ
;

262 
out˙t
 = 1;

265 
°ack
 = 0;

268 i‡(
íd
 >
mask
 && 
bôs
 < 
max
) {

269 
	`FLUSHCODE
();

270 
bôs
++;

271 
mask
 <<= 1;

272 
mask
++;

276 i‡(
chunk
 == 0)

277 
chunk
 = 
bôs
;

278 
code
 = 
ªm
;

279 i‡(
	`NEXT
() == -1) {

281 i‡(
out˙t
 && 
	`out
(&
outd
, 
outbuf
, outcnt)) {

282 
°rm
->
√xt_ö
 = 
outbuf
;

283  
Z_BUF_ERROR
;

285  
Z_OK
;

287 
code
 +()
œ°
 << 
À·
;

288 
À·
 += 8;

289 
chunk
--;

290 i‡(
bôs
 > 
À·
) {

291 i‡(
	`NEXT
() == -1)

292  
Z_BUF_ERROR
;

293 
code
 +()
œ°
 << 
À·
;

294 
À·
 += 8;

295 
chunk
--;

297 
code
 &
mask
;

298 
À·
 -
bôs
;

299 
ªm
 = ()
œ°
 >> (8 - 
À·
);

302 i‡(
code
 =256 && 
Êags
) {

303 
	`FLUSHCODE
();

304 
bôs
 = 9;

305 
mask
 = 0x1ff;

306 
íd
 = 255;

311 
ãmp
 = 
code
;

312 i‡(
code
 > 
íd
) {

321 i‡(
code
 !
íd
 + 1 || 
¥ev
 >Énd) {

322 
°rm
->
msg
 = (*)"invalidÜzw code";

323  
Z_DATA_ERROR
;

325 
m©ch
[
°ack
++] = ()
föÆ
;

326 
code
 = 
¥ev
;

330 
p
 = 
m©ch
 + 
°ack
;

331 
code
 >= 256) {

332 *
p
++ = 
suffix
[
code
];

333 
code
 = 
¥efix
[code];

335 
°ack
 = 
p
 - 
m©ch
;

336 
m©ch
[
°ack
++] = ()
code
;

337 
föÆ
 = 
code
;

340 i‡(
íd
 < 
mask
) {

341 
íd
++;

342 
¥efix
[
íd
] = ()
¥ev
;

343 
suffix
[
íd
] = ()
föÆ
;

347 
¥ev
 = 
ãmp
;

350 
°ack
 > 
SIZE
 - 
out˙t
) {

351 
out˙t
 < 
SIZE
)

352 
outbuf
[
out˙t
++] = 
m©ch
[--
°ack
];

353 i‡(
	`out
(&
outd
, 
outbuf
, 
out˙t
)) {

354 
°rm
->
√xt_ö
 = 
outbuf
;

355  
Z_BUF_ERROR
;

357 
out˙t
 = 0;

359 
p
 = 
m©ch
 + 
°ack
;

361 
outbuf
[
out˙t
++] = *--
p
;

362 } 
p
 > 
m©ch
);

363 
°ack
 = 0;

369 
	}
}

383 
loˇl
 
	$gu≈ùe
(
z_°ªam
 *
°rm
, 
öfûe
, 
outfûe
)

385 
ªt
, 
fú°
, 
œ°
;

386 
have
, 
Êags
, 
Àn
;

387 
z_c⁄°
 *
√xt
 = 
NULL
;

388 
öd
 ind, *
ödp
;

389 
outd
 outd;

392 
öd
.
öfûe
 = infile;

393 
öd
.
öbuf
 = inbuf;

394 
ödp
 = &
öd
;

397 
have
 = 0;

398 
fú°
 = 1;

399 
°rm
->
√xt_ö
 = 
Z_NULL
;

402 i‡(
	`NEXT
() == -1) {

403 
ªt
 = 
Z_OK
;

406 i‡(
œ°
 !31 || (
	`NEXT
() != 139 &&Üast != 157)) {

407 
°rm
->
msg
 = (*)"incorrect header check";

408 
ªt
 = 
fú°
 ? 
Z_DATA_ERROR
 : 
Z_ERRNO
;

411 
fú°
 = 0;

414 i‡(
œ°
 == 157) {

415 
ªt
 = 
	`lu≈ùe
(
have
, 
√xt
, 
ödp
, 
outfûe
, 
°rm
);

420 
ªt
 = 
Z_BUF_ERROR
;

421 i‡(
	`NEXT
() != 8) {

422 i‡(
œ°
 == -1) ;

423 
°rm
->
msg
 = (*)"unknown compression method";

424 
ªt
 = 
Z_DATA_ERROR
;

427 
Êags
 = 
	`NEXT
();

428 
	`NEXT
();

429 
	`NEXT
();

430 
	`NEXT
();

431 
	`NEXT
();

432 
	`NEXT
();

433 
	`NEXT
();

434 i‡(
œ°
 == -1) ;

435 i‡(
Êags
 & 0xe0) {

436 
°rm
->
msg
 = (*)"unknown header flags set";

437 
ªt
 = 
Z_DATA_ERROR
;

440 i‡(
Êags
 & 4) {

441 
Àn
 = 
	`NEXT
();

442 
Àn
 +()(
	`NEXT
()) << 8;

443 i‡(
œ°
 == -1) ;

444 
Àn
 > 
have
) {

445 
Àn
 -
have
;

446 
have
 = 0;

447 i‡(
	`NEXT
() == -1) ;

448 
Àn
--;

450 i‡(
œ°
 == -1) ;

451 
have
 -
Àn
;

452 
√xt
 +
Àn
;

454 i‡(
Êags
 & 8)

455 
	`NEXT
(Ë!0 && 
œ°
 != -1)

457 i‡(
Êags
 & 16)

458 
	`NEXT
(Ë!0 && 
œ°
 != -1)

460 i‡(
Êags
 & 2) {

461 
	`NEXT
();

462 
	`NEXT
();

464 i‡(
œ°
 == -1) ;

467 
outd
.
outfûe
 = outfile;

468 
outd
.
check
 = 1;

469 
outd
.
¸c
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

470 
outd
.
tŸÆ
 = 0;

473 
°rm
->
√xt_ö
 = 
√xt
;

474 
°rm
->
avaû_ö
 = 
have
;

475 
ªt
 = 
	`öÊ©eBack
(
°rm
, 
ö
, 
ödp
, 
out
, &
outd
);

476 i‡(
ªt
 !
Z_STREAM_END
) ;

477 
√xt
 = 
°rm
->
√xt_ö
;

478 
have
 = 
°rm
->
avaû_ö
;

479 
°rm
->
√xt_ö
 = 
Z_NULL
;

482 
ªt
 = 
Z_BUF_ERROR
;

483 i‡(
	`NEXT
(Ë!()(
outd
.
¸c
 & 0xff) ||

484 
	`NEXT
(Ë!()((
outd
.
¸c
 >> 8) & 0xff) ||

485 
	`NEXT
(Ë!()((
outd
.
¸c
 >> 16) & 0xff) ||

486 
	`NEXT
(Ë!()((
outd
.
¸c
 >> 24) & 0xff)) {

488 i‡(
œ°
 != -1) {

489 
°rm
->
msg
 = (*)"incorrect data check";

490 
ªt
 = 
Z_DATA_ERROR
;

494 i‡(
	`NEXT
(Ë!()(
outd
.
tŸÆ
 & 0xff) ||

495 
	`NEXT
(Ë!()((
outd
.
tŸÆ
 >> 8) & 0xff) ||

496 
	`NEXT
(Ë!()((
outd
.
tŸÆ
 >> 16) & 0xff) ||

497 
	`NEXT
(Ë!()((
outd
.
tŸÆ
 >> 24) & 0xff)) {

499 i‡(
œ°
 != -1) {

500 
°rm
->
msg
 = (*)"incorrectÜength check";

501 
ªt
 = 
Z_DATA_ERROR
;

510  
ªt
;

511 
	}
}

517 
loˇl
 
	$c›ymëa
(*
‰om
, *
to
)

519 
°©
 
was
;

520 
utimbuf
 
whí
;

523 i‡(
	`°©
(
‰om
, &
was
Ë!0 || (was.
°_mode
 & 
S_IFMT
Ë!
S_IFREG
)

527 ()
	`chmod
(
to
, 
was
.
°_mode
 & 07777);

530 ()
	`chown
(
to
, 
was
.
°_uid
, was.
°_gid
);

533 
whí
.
a˘ime
 = 
was
.
°_©ime
;

534 
whí
.
modtime
 = 
was
.
°_mtime
;

535 ()
	`utime
(
to
, &
whí
);

536 
	}
}

548 
loˇl
 
	$gunzù
(
z_°ªam
 *
°rm
, *
ö«me
, *
ouäame
, 
ã°
)

550 
ªt
;

551 
öfûe
, 
outfûe
;

554 i‡(
ö«me
 =
NULL
 || *inname == 0) {

555 
ö«me
 = "-";

556 
öfûe
 = 0;

559 
öfûe
 = 
	`›í
(
ö«me
, 
O_RDONLY
, 0);

560 i‡(
öfûe
 == -1) {

561 
	`Ârötf
(
°dîr
, "gu¿ˇ¬Ÿ o≥¿%s\n", 
ö«me
);

565 i‡(
ã°
)

566 
outfûe
 = -1;

567 i‡(
ouäame
 =
NULL
 || *outname == 0) {

568 
ouäame
 = "-";

569 
outfûe
 = 1;

572 
outfûe
 = 
	`›í
(
ouäame
, 
O_CREAT
 | 
O_TRUNC
 | 
O_WRONLY
, 0666);

573 i‡(
outfûe
 == -1) {

574 
	`˛o£
(
öfûe
);

575 
	`Ârötf
(
°dîr
, "gu¿ˇ¬Ÿ cª©ê%s\n", 
ouäame
);

579 
î∫o
 = 0;

582 
ªt
 = 
	`gu≈ùe
(
°rm
, 
öfûe
, 
outfûe
);

583 i‡(
outfûe
 > 2Ë
	`˛o£
(outfile);

584 i‡(
öfûe
 > 2Ë
	`˛o£
(infile);

587 
ªt
) {

588 
Z_OK
:

589 
Z_ERRNO
:

590 i‡(
öfûe
 > 2 && 
outfûe
 > 2) {

591 
	`c›ymëa
(
ö«me
, 
ouäame
);

592 
	`u∆ök
(
ö«me
);

594 i‡(
ªt
 =
Z_ERRNO
)

595 
	`Ârötf
(
°dîr
, "gun warning:Årailing garbage ignored in %s\n",

596 
ö«me
);

598 
Z_DATA_ERROR
:

599 i‡(
outfûe
 > 2Ë
	`u∆ök
(
ouäame
);

600 
	`Ârötf
(
°dîr
, "gu¿d©®îr‹ o¿%s: %s\n", 
ö«me
, 
°rm
->
msg
);

602 
Z_MEM_ERROR
:

603 i‡(
outfûe
 > 2Ë
	`u∆ök
(
ouäame
);

604 
	`Ârötf
(
°dîr
, "gun out of memoryÉrror--aborting\n");

606 
Z_BUF_ERROR
:

607 i‡(
outfûe
 > 2Ë
	`u∆ök
(
ouäame
);

608 i‡(
°rm
->
√xt_ö
 !
Z_NULL
) {

609 
	`Ârötf
(
°dîr
, "gun writeÉrror on %s: %s\n",

610 
ouäame
, 
	`°ªº‹
(
î∫o
));

612 i‡(
î∫o
) {

613 
	`Ârötf
(
°dîr
, "gunÑeadÉrror on %s: %s\n",

614 
ö«me
, 
	`°ªº‹
(
î∫o
));

617 
	`Ârötf
(
°dîr
, "gun unexpectedÉnd of file on %s\n",

618 
ö«me
);

622 i‡(
outfûe
 > 2Ë
	`u∆ök
(
ouäame
);

623 
	`Ârötf
(
°dîr
, "gun internalÉrror--aborting\n");

627 
	}
}

631 
	$maö
(
¨gc
, **
¨gv
)

633 
ªt
, 
Àn
, 
ã°
;

634 *
ouäame
;

635 *
wödow
;

636 
z_°ªam
 
°rm
;

639 
wödow
 = 
m©ch
;

640 
°rm
.
zÆloc
 = 
Z_NULL
;

641 
°rm
.
z‰ì
 = 
Z_NULL
;

642 
°rm
.
›aque
 = 
Z_NULL
;

643 
ªt
 = 
	`öÊ©eBackInô
(&
°rm
, 15, 
wödow
);

644 i‡(
ªt
 !
Z_OK
) {

645 
	`Ârötf
(
°dîr
, "gun out of memoryÉrror--aborting\n");

650 
¨gc
--;

651 
¨gv
++;

652 
ã°
 = 0;

653 i‡(
¨gc
 && 
	`°rcmp
(*
¨gv
, "-h") == 0) {

654 
	`Ârötf
(
°dîr
, "gun 1.6 (17 Jan 2010)\n");

655 
	`Ârötf
(
°dîr
, "Copyright (C) 2003-2010 Mark Adler\n");

656 
	`Ârötf
(
°dîr
, "usage: gun [-t] [file1.gz [file2.Z ...]]\n");

659 i‡(
¨gc
 && 
	`°rcmp
(*
¨gv
, "-t") == 0) {

660 
ã°
 = 1;

661 
¨gc
--;

662 
¨gv
++;

664 i‡(
¨gc
)

666 i‡(
ã°
)

667 
ouäame
 = 
NULL
;

669 
Àn
 = ()
	`°æí
(*
¨gv
);

670 i‡(
	`°rcmp
(*
¨gv
 + 
Àn
 - 3, ".gz") == 0 ||

671 
	`°rcmp
(*
¨gv
 + 
Àn
 - 3, "-gz") == 0)

672 
Àn
 -= 3;

673 i‡(
	`°rcmp
(*
¨gv
 + 
Àn
 - 2, ".z") == 0 ||

674 
	`°rcmp
(*
¨gv
 + 
Àn
 - 2, "-z") == 0 ||

675 
	`°rcmp
(*
¨gv
 + 
Àn
 - 2, "_z") == 0 ||

676 
	`°rcmp
(*
¨gv
 + 
Àn
 - 2, ".Z") == 0)

677 
Àn
 -= 2;

679 
	`Ârötf
(
°dîr
, "gunÉrror:Ço gzÅype on %s--skipping\n",

680 *
¨gv
);

683 
ouäame
 = 
	`mÆloc
(
Àn
 + 1);

684 i‡(
ouäame
 =
NULL
) {

685 
	`Ârötf
(
°dîr
, "gun out of memoryÉrror--aborting\n");

686 
ªt
 = 1;

689 
	`mem˝y
(
ouäame
, *
¨gv
, 
Àn
);

690 
ouäame
[
Àn
] = 0;

692 
ªt
 = 
	`gunzù
(&
°rm
, *
¨gv
, 
ouäame
, 
ã°
);

693 i‡(
ouäame
 !
NULL
Ë
	`‰ì
(outname);

694 i‡(
ªt
) ;

695 } 
¨gv
++, --
¨gc
);

697 
ªt
 = 
	`gunzù
(&
°rm
, 
NULL
, NULL, 
ã°
);

700 
	`öÊ©eBackEnd
(&
°rm
);

701  
ªt
;

702 
	}
}

	@zlib-1.2.8/examples/gzappend.c

80 
	~<°dio.h
>

81 
	~<°dlib.h
>

82 
	~<°rög.h
>

83 
	~<f˙é.h
>

84 
	~<uni°d.h
>

85 
	~"zlib.h
"

87 
	#loˇl
 

	)

88 
	#LGCHUNK
 14

	)

89 
	#CHUNK
 (1U << 
LGCHUNK
)

	)

90 
	#DSIZE
 32768U

	)

93 
loˇl
 
	$bye
(*
msg1
, *
msg2
)

95 
	`Ârötf
(
°dîr
, "gz≠≥ndÉº‹: %s%s\n", 
msg1
, 
msg2
);

96 
	`exô
(1);

97 
	}
}

102 
loˇl
 
	$gcd
(
a
, 
b
)

104 
c
;

106 
a
 && 
b
)

107 i‡(
a
 > 
b
) {

108 
c
 = 
b
;

109 
a
 - 
c
 >= c)

110 
c
 <<= 1;

111 
a
 -
c
;

114 
c
 = 
a
;

115 
b
 - 
c
 >= c)

116 
c
 <<= 1;

117 
b
 -
c
;

119  
a
 + 
b
;

120 
	}
}

123 
loˇl
 
	$rŸ©e
(*
li°
, 
Àn
, 
rŸ
)

125 
tmp
;

126 
cy˛es
;

127 *
°¨t
, *
œ°
, *
to
, *
‰om
;

130 i‡(
Àn
 < 2) ;

131 i‡(
rŸ
 >
Àn
)Ñot %=Üen;

132 i‡(
rŸ
 == 0) ;

135 
œ°
 = 
li°
 + (
Àn
 - 1);

138 i‡(
rŸ
 == 1) {

139 
tmp
 = *
li°
;

140 
	`mem˝y
(
li°
,Üi° + 1, 
Àn
 - 1);

141 *
œ°
 = 
tmp
;

146 i‡(
rŸ
 =
Àn
 - 1) {

147 
tmp
 = *
œ°
;

148 
	`memmove
(
li°
 + 1,Üi°, 
Àn
 - 1);

149 *
li°
 = 
tmp
;

154 
cy˛es
 = 
	`gcd
(
Àn
, 
rŸ
);

156 
°¨t
 = 
‰om
 = 
li°
 + 
cy˛es
;

157 
tmp
 = *
‰om
;

159 
to
 = 
‰om
;

160 
‰om
 +
rŸ
;

161 i‡(
‰om
 > 
œ°
Ë‰om -
Àn
;

162 i‡(
‰om
 =
°¨t
) ;

163 *
to
 = *
‰om
;

165 *
to
 = 
tmp
;

166 } --
cy˛es
);

167 
	}
}

171 
	mfd
;

172 
	msize
;

173 
	mÀ·
;

174 *
	mbuf
;

175 
z_c⁄°
 *
	m√xt
;

176 *
	m«me
;

177 } 
	tfûe
;

180 
loˇl
 
	$ªadö
(
fûe
 *
ö
)

182 
Àn
;

184 
Àn
 = 
	`ªad
(
ö
->
fd
, in->
buf
, 1 << in->
size
);

185 i‡(
Àn
 =-1Ë
	`bye
("îr‹Ñódög ", 
ö
->
«me
);

186 
ö
->
À·
 = ()
Àn
;

187 
ö
->
√xt
 = in->
buf
;

188  
Àn
;

189 
	}
}

192 
loˇl
 
	$ªadm‹e
(
fûe
 *
ö
)

194 i‡(
	`ªadö
(
ö
Ë=0Ë
	`bye
("u√x≥˘edÉnd o‡", in->
«me
);

196 
	}
}

198 
	#ªad1
(
ö
Ë(ö->
À·
 =0 ? 
	`ªadm‹e
(in) : 0, \

199 
ö
->
À·
--, *(ö->
√xt
)++)

	)

202 
loˇl
 
	$skù
(
fûe
 *
ö
, 
n
)

204 
by∑ss
;

206 i‡(
n
 > 
ö
->
À·
) {

207 
n
 -
ö
->
À·
;

208 
by∑ss
 = 
n
 & ~((1U << 
ö
->
size
) - 1);

209 i‡(
by∑ss
) {

210 i‡(
	`l£ek
(
ö
->
fd
, (
off_t
)
by∑ss
, 
SEEK_CUR
) == -1)

211 
	`bye
("£ekög ", 
ö
->
«me
);

212 
n
 -
by∑ss
;

214 
	`ªadm‹e
(
ö
);

215 i‡(
n
 > 
ö
->
À·
)

216 
	`bye
("u√x≥˘edÉnd o‡", 
ö
->
«me
);

218 
ö
->
À·
 -
n
;

219 
ö
->
√xt
 +
n
;

220 
	}
}

223 
	$ªad4
(
fûe
 *
ö
)

225 
vÆ
;

227 
vÆ
 = 
	`ªad1
(
ö
);

228 
vÆ
 +()
	`ªad1
(
ö
) << 8;

229 
vÆ
 +()
	`ªad1
(
ö
) << 16;

230 
vÆ
 +()
	`ªad1
(
ö
) << 24;

231  
vÆ
;

232 
	}
}

235 
loˇl
 
	$gzhódî
(
fûe
 *
ö
)

237 
Êags
;

238 
n
;

240 i‡(
	`ªad1
(
ö
Ë!31 ||Ñód1(öË!139Ë
	`bye
(ö->
«me
, "Çotá gzip file");

241 i‡(
	`ªad1
(
ö
Ë!8Ë
	`bye
("unknow¿com¥essi⁄ mëhod in", in->
«me
);

242 
Êags
 = 
	`ªad1
(
ö
);

243 i‡(
Êags
 & 0xe0Ë
	`bye
("unknow¿hódî fœg†£àö", 
ö
->
«me
);

244 
	`skù
(
ö
, 6);

245 i‡(
Êags
 & 4) {

246 
n
 = 
	`ªad1
(
ö
);

247 
n
 +()(
	`ªad1
(
ö
)) << 8;

248 
	`skù
(
ö
, 
n
);

250 i‡(
Êags
 & 8Ë
	`ªad1
(
ö
) != 0) ;

251 i‡(
Êags
 & 16Ë
	`ªad1
(
ö
) != 0) ;

252 i‡(
Êags
 & 2Ë
	`skù
(
ö
, 2);

253 
	}
}

259 
loˇl
 
	$gzsˇn
(*
«me
, 
z_°ªam
 *
°rm
, 
Àvñ
)

261 
ªt
, 
œ°bô
, 
À·
, 
fuŒ
;

262 
have
;

263 
¸c
, 
tŸ
;

264 *
wödow
;

265 
off_t
 
œ°off
, 
íd
;

266 
fûe
 
gz
;

269 
gz
.
«me
 =Çame;

270 
gz
.
fd
 = 
	`›í
(
«me
, 
O_RDWR
, 0);

271 i‡(
gz
.
fd
 =-1Ë
	`bye
("ˇ¬Ÿ o≥¿", 
«me
);

272 
gz
.
buf
 = 
	`mÆloc
(
CHUNK
);

273 i‡(
gz
.
buf
 =
NULL
Ë
	`bye
("out of memory", "");

274 
gz
.
size
 = 
LGCHUNK
;

275 
gz
.
À·
 = 0;

278 
	`gzhódî
(&
gz
);

281 
wödow
 = 
	`mÆloc
(
DSIZE
);

282 i‡(
wödow
 =
NULL
Ë
	`bye
("out of memory", "");

283 
°rm
->
zÆloc
 = 
Z_NULL
;

284 
°rm
->
z‰ì
 = 
Z_NULL
;

285 
°rm
->
›aque
 = 
Z_NULL
;

286 
ªt
 = 
	`öÊ©eInô2
(
°rm
, -15);

287 i‡(
ªt
 !
Z_OK
Ë
	`bye
("out of memory", " orÜibrary mismatch");

290 
œ°bô
 = 0;

291 
œ°off
 = 
	`l£ek
(
gz
.
fd
, 0L, 
SEEK_CUR
Ë- gz.
À·
;

292 
À·
 = 0;

293 
°rm
->
avaû_ö
 = 
gz
.
À·
;

294 
°rm
->
√xt_ö
 = 
gz
.
√xt
;

295 
¸c
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

296 
have
 = 
fuŒ
 = 0;

299 i‡(
°rm
->
avaû_ö
 == 0) {

300 
	`ªadm‹e
(&
gz
);

301 
°rm
->
avaû_ö
 = 
gz
.
À·
;

302 
°rm
->
√xt_ö
 = 
gz
.
√xt
;

306 
°rm
->
avaû_out
 = 
DSIZE
 - 
have
;

307 
°rm
->
√xt_out
 = 
wödow
 + 
have
;

310 
ªt
 = 
	`öÊ©e
(
°rm
, 
Z_BLOCK
);

311 i‡(
ªt
 =
Z_STREAM_ERROR
Ë
	`bye
("internal streamÉrror!", "");

312 i‡(
ªt
 =
Z_MEM_ERROR
Ë
	`bye
("out of memory", "");

313 i‡(
ªt
 =
Z_DATA_ERROR
)

314 
	`bye
("övÆid com¥es£d d©a--f‹m© viﬁ©ed in", 
«me
);

317 
¸c
 = 
	`¸c32
(¸c, 
wödow
 + 
have
, 
DSIZE
 - havê- 
°rm
->
avaû_out
);

318 i‡(
°rm
->
avaû_out
)

319 
have
 = 
DSIZE
 - 
°rm
->
avaû_out
;

321 
have
 = 0;

322 
fuŒ
 = 1;

326 i‡(
°rm
->
d©a_ty≥
 & 128) {

327 i‡(
°rm
->
d©a_ty≥
 & 64)

328 
À·
 = 
°rm
->
d©a_ty≥
 & 0x1f;

330 
œ°bô
 = 
°rm
->
d©a_ty≥
 & 0x1f;

331 
œ°off
 = 
	`l£ek
(
gz
.
fd
, 0L, 
SEEK_CUR
Ë- 
°rm
->
avaû_ö
;

334 } 
ªt
 !
Z_STREAM_END
);

335 
	`öÊ©eEnd
(
°rm
);

336 
gz
.
À·
 = 
°rm
->
avaû_ö
;

337 
gz
.
√xt
 = 
°rm
->
√xt_ö
;

340 
íd
 = 
	`l£ek
(
gz
.
fd
, 0L, 
SEEK_CUR
Ë- gz.
À·
;

343 i‡(
¸c
 !
	`ªad4
(&
gz
))

344 
	`bye
("övÆid com¥es£d d©a--¸¯mism©ch i¿", 
«me
);

345 
tŸ
 = 
°rm
->
tŸÆ_out
;

346 i‡((
tŸ
 & 0xffffffffULË!
	`ªad4
(&
gz
))

347 
	`bye
("övÆid com¥es£d d©a--Àngth mism©ch in", 
«me
);

350 i‡(
gz
.
À·
 || 
	`ªadö
(&gz))

351 
	`Ârötf
(
°dîr
,

355 
	`l£ek
(
gz
.
fd
, 
œ°off
 - (
œ°bô
 !0), 
SEEK_SET
);

356 i‡(
	`ªad
(
gz
.
fd
, gz.
buf
, 1Ë!1Ë
	`bye
("ªadögá·î sìk o¿", 
«me
);

357 *
gz
.
buf
 = ()(*gz.bu‡^ (1 << ((8 - 
œ°bô
) & 7)));

358 
	`l£ek
(
gz
.
fd
, -1L, 
SEEK_CUR
);

359 i‡(
	`wrôe
(
gz
.
fd
, gz.
buf
, 1Ë!1Ë
	`bye
("wrôögá·î sìkÅÿ", 
«me
);

362 i‡(
fuŒ
) {

363 
	`rŸ©e
(
wödow
, 
DSIZE
, 
have
);

364 
have
 = 
DSIZE
;

368 
ªt
 = 
	`deÊ©eInô2
(
°rm
, 
Àvñ
, 
Z_DEFLATED
, -15, 8, 
Z_DEFAULT_STRATEGY
);

369 i‡(
ªt
 !
Z_OK
Ë
	`bye
("out of memory", "");

370 
	`deÊ©eSëDi˘i⁄¨y
(
°rm
, 
wödow
, 
have
);

371 
°rm
->
adÀr
 = 
¸c
;

372 
°rm
->
tŸÆ_ö
 = 
tŸ
;

373 i‡(
À·
) {

374 
	`l£ek
(
gz
.
fd
, --
íd
, 
SEEK_SET
);

375 i‡(
	`ªad
(
gz
.
fd
, gz.
buf
, 1Ë!1Ë
	`bye
("ªadögá·î sìk o¿", 
«me
);

376 
	`deÊ©ePrime
(
°rm
, 8 - 
À·
, *
gz
.
buf
);

378 
	`l£ek
(
gz
.
fd
, 
íd
, 
SEEK_SET
);

381 
	`‰ì
(
wödow
);

382 
	`‰ì
(
gz
.
buf
);

383  
gz
.
fd
;

384 
	}
}

388 
loˇl
 
	$gzèck
(*
«me
, 
gd
, 
z_°ªam
 *
°rm
, 
œ°
)

390 
fd
, 
Àn
, 
ªt
;

391 
À·
;

392 *
ö
, *
out
;

395 
fd
 = 0;

396 i‡(
«me
 !
NULL
) {

397 
fd
 = 
	`›í
(
«me
, 
O_RDONLY
, 0);

398 i‡(
fd
 == -1)

399 
	`Ârötf
(
°dîr
, "gzappend warning: %sÇot found, skipping ...\n",

400 
«me
);

404 
ö
 = 
	`mÆloc
(
CHUNK
);

405 
out
 = 
	`mÆloc
(
CHUNK
);

406 i‡(
ö
 =
NULL
 || 
out
 =NULLË
	`bye
("out of memory", "");

411 
Àn
 = 
	`ªad
(
fd
, 
ö
, 
CHUNK
);

412 i‡(
Àn
 == -1) {

413 
	`Ârötf
(
°dîr
,

415 
«me
);

416 
Àn
 = 0;

418 
°rm
->
avaû_ö
 = ()
Àn
;

419 
°rm
->
√xt_ö
 = 
ö
;

420 i‡(
Àn
Ë
°rm
->
adÀr
 = 
	`¸c32
(°rm->adÀr, 
ö
, ()len);

424 
°rm
->
avaû_out
 = 
CHUNK
;

425 
°rm
->
√xt_out
 = 
out
;

426 
ªt
 = 
	`deÊ©e
(
°rm
, 
œ°
 && 
Àn
 =0 ? 
Z_FINISH
 : 
Z_NO_FLUSH
);

427 
À·
 = 
CHUNK
 - 
°rm
->
avaû_out
;

428 
À·
) {

429 
Àn
 = 
	`wrôe
(
gd
, 
out
 + 
CHUNK
 - 
°rm
->
avaû_out
 - 
À·
,Üeft);

430 i‡(
Àn
 =-1Ë
	`bye
("writing gzip file", "");

431 
À·
 -()
Àn
;

433 } 
°rm
->
avaû_out
 =0 && 
ªt
 !
Z_STREAM_END
);

434 } 
Àn
 != 0);

437 i‡(
œ°
) {

438 
	`deÊ©eEnd
(
°rm
);

439 
out
[0] = ()(
°rm
->
adÀr
);

440 
out
[1] = ()(
°rm
->
adÀr
 >> 8);

441 
out
[2] = ()(
°rm
->
adÀr
 >> 16);

442 
out
[3] = ()(
°rm
->
adÀr
 >> 24);

443 
out
[4] = ()(
°rm
->
tŸÆ_ö
);

444 
out
[5] = ()(
°rm
->
tŸÆ_ö
 >> 8);

445 
out
[6] = ()(
°rm
->
tŸÆ_ö
 >> 16);

446 
out
[7] = ()(
°rm
->
tŸÆ_ö
 >> 24);

447 
Àn
 = 8;

449 
ªt
 = 
	`wrôe
(
gd
, 
out
 + 8 - 
Àn
,Üen);

450 i‡(
ªt
 =-1Ë
	`bye
("writing gzip file", "");

451 
Àn
 -
ªt
;

452 } 
Àn
);

453 
	`˛o£
(
gd
);

457 
	`‰ì
(
out
);

458 
	`‰ì
(
ö
);

459 i‡(
fd
 > 0Ë
	`˛o£
(fd);

460 
	}
}

466 
	$maö
(
¨gc
, **
¨gv
)

468 
gd
, 
Àvñ
;

469 
z_°ªam
 
°rm
;

472 
¨gc
--; 
¨gv
++;

475 i‡(*
¨gv
 =
NULL
) {

476 
	`¥ötf
(

479 
	`¥ötf
(

485 
Àvñ
 = 
Z_DEFAULT_COMPRESSION
;

486 i‡(
¨gv
[0][0] == '-') {

487 i‡(
¨gv
[0][1] < '0' ||árgv[0][1] > '9' ||árgv[0][2] != 0)

488 
	`bye
("invalid compressionÜevel", "");

489 
Àvñ
 = 
¨gv
[0][1] - '0';

490 i‡(*++
¨gv
 =
NULL
Ë
	`bye
("no gzip fileÇameáfter options", "");

494 
gd
 = 
	`gzsˇn
(*
¨gv
++, &
°rm
, 
Àvñ
);

497 i‡(*
¨gv
 =
NULL
)

498 
	`gzèck
(
NULL
, 
gd
, &
°rm
, 1);

501 
	`gzèck
(*
¨gv
, 
gd
, &
°rm
,árgv[1] =
NULL
);

502 } *++
¨gv
 !
NULL
);

504 
	}
}

	@zlib-1.2.8/examples/gzjoin.c

56 
	~<°dio.h
>

57 
	~<°dlib.h
>

58 
	~<f˙é.h
>

59 
	~<uni°d.h
>

60 
	~"zlib.h
"

63 
	#loˇl
 

	)

66 
loˇl
 
	$baû
(*
why1
, *
why2
)

68 
	`Ârötf
(
°dîr
, "gzjoöÉº‹: %s%s, ouçuàöcom∂ëe\n", 
why1
, 
why2
);

69 
	`exô
(1);

71 
	}
}

75 
	#CHUNK
 32768

	)

79 *
	m«me
;

80 
	mfd
;

81 
	mÀ·
;

82 *
	m√xt
;

83 *
	mbuf
;

84 } 
	tbö
;

87 
loˇl
 
	$b˛o£
(
bö
 *
ö
)

89 i‡(
ö
 !
NULL
) {

90 i‡(
ö
->
fd
 != -1)

91 
	`˛o£
(
ö
->
fd
);

92 i‡(
ö
->
buf
 !
NULL
)

93 
	`‰ì
(
ö
->
buf
);

94 
	`‰ì
(
ö
);

96 
	}
}

100 
loˇl
 
bö
 *
	$b›í
(*
«me
)

102 
bö
 *
ö
;

104 
ö
 = 
	`mÆloc
((
bö
));

105 i‡(
ö
 =
NULL
)

106  
NULL
;

107 
ö
->
buf
 = 
	`mÆloc
(
CHUNK
);

108 
ö
->
fd
 = 
	`›í
(
«me
, 
O_RDONLY
, 0);

109 i‡(
ö
->
buf
 =
NULL
 || in->
fd
 == -1) {

110 
	`b˛o£
(
ö
);

111  
NULL
;

113 
ö
->
À·
 = 0;

114 
ö
->
√xt
 = in->
buf
;

115 
ö
->
«me
 =Çame;

116  
ö
;

117 
	}
}

121 
loˇl
 
	$blﬂd
(
bö
 *
ö
)

123 
Àn
;

125 i‡(
ö
 =
NULL
)

127 i‡(
ö
->
À·
 != 0)

129 
ö
->
√xt
 = in->
buf
;

131 
Àn
 = ()
	`ªad
(
ö
->
fd
, in->
buf
 + in->
À·
, 
CHUNK
 - in->left);

132 i‡(
Àn
 < 0)

134 
ö
->
À·
 +()
Àn
;

135 } 
Àn
 !0 && 
ö
->
À·
 < 
CHUNK
);

136  
Àn
 == 0 ? 1 : 0;

137 
	}
}

140 
	#bgë
(
ö
Ë(ö->
À·
 ? 0 : 
	`blﬂd
(in), \

141 
ö
->
À·
 ? (ö->À·--, *(ö->
√xt
)++) : \

142 
	`baû
("u√x≥˘edÉnd o‡fûê⁄ ", 
ö
->
«me
))

	)

145 
loˇl
 
	$bgë4
(
bö
 *
ö
)

147 
vÆ
;

149 
vÆ
 = 
	`bgë
(
ö
);

150 
vÆ
 +()(
	`bgë
(
ö
)) << 8;

151 
vÆ
 +()(
	`bgë
(
ö
)) << 16;

152 
vÆ
 +()(
	`bgë
(
ö
)) << 24;

153  
vÆ
;

154 
	}
}

157 
loˇl
 
	$bskù
(
bö
 *
ö
, 
skù
)

160 i‡(
ö
 =
NULL
)

164 i‡(
skù
 <
ö
->
À·
) {

165 
ö
->
À·
 -
skù
;

166 
ö
->
√xt
 +
skù
;

171 
skù
 -
ö
->
À·
;

172 
ö
->
À·
 = 0;

175 i‡(
skù
 > 
CHUNK
) {

176 
À·
;

178 
À·
 = 
skù
 & (
CHUNK
 - 1);

179 i‡(
À·
 == 0) {

182 
	`l£ek
(
ö
->
fd
, 
skù
 - 1, 
SEEK_CUR
);

183 i‡(
	`ªad
(
ö
->
fd
, in->
buf
, 1) != 1)

184 
	`baû
("u√x≥˘edÉnd o‡fûê⁄ ", 
ö
->
«me
);

189 
	`l£ek
(
ö
->
fd
, 
skù
 - 
À·
, 
SEEK_CUR
);

190 
skù
 = 
À·
;

194 
	`blﬂd
(
ö
);

195 i‡(
skù
 > 
ö
->
À·
)

196 
	`baû
("u√x≥˘edÉnd o‡fûê⁄ ", 
ö
->
«me
);

197 
ö
->
À·
 -
skù
;

198 
ö
->
√xt
 +
skù
;

199 
	}
}

204 
loˇl
 
	$gzhód
(
bö
 *
ö
)

206 
Êags
;

209 i‡(
	`bgë
(
ö
) != 0x1f || bget(in) != 0x8b || bget(in) != 8)

210 
	`baû
(
ö
->
«me
, " isÇotá valid gzip file");

213 
Êags
 = 
	`bgë
(
ö
);

214 i‡((
Êags
 & 0xe0) != 0)

215 
	`baû
("unknow¿ª£rved bô†£àö ", 
ö
->
«me
);

218 
	`bskù
(
ö
, 6);

221 i‡(
Êags
 & 4) {

222 
Àn
;

224 
Àn
 = 
	`bgë
(
ö
);

225 
Àn
 +()(
	`bgë
(
ö
)) << 8;

226 
	`bskù
(
ö
, 
Àn
);

230 i‡(
Êags
 & 8)

231 
	`bgë
(
ö
) != 0)

235 i‡(
Êags
 & 16)

236 
	`bgë
(
ö
) != 0)

240 i‡(
Êags
 & 2)

241 
	`bskù
(
ö
, 2);

242 
	}
}

245 
loˇl
 
	$put4
(
vÆ
, 
FILE
 *
out
)

247 
	`putc
(
vÆ
 & 0xff, 
out
);

248 
	`putc
((
vÆ
 >> 8Ë& 0xff, 
out
);

249 
	`putc
((
vÆ
 >> 16Ë& 0xff, 
out
);

250 
	`putc
((
vÆ
 >> 24Ë& 0xff, 
out
);

251 
	}
}

254 
loˇl
 
	$zpuŒ
(
z_°ªamp
 
°rm
, 
bö
 *
ö
)

256 i‡(
ö
->
À·
 == 0)

257 
	`blﬂd
(
ö
);

258 i‡(
ö
->
À·
 == 0)

259 
	`baû
("u√x≥˘edÉnd o‡fûê⁄ ", 
ö
->
«me
);

260 
°rm
->
avaû_ö
 = 
ö
->
À·
;

261 
°rm
->
√xt_ö
 = 
ö
->
√xt
;

262 
	}
}

265 
loˇl
 
	$gzöô
(*
¸c
, *
tŸ
, 
FILE
 *
out
)

267 
	`fwrôe
("\x1f\x8b\x08\0\0\0\0\0\0\xff", 1, 10, 
out
);

268 *
¸c
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

269 *
tŸ
 = 0;

270 
	}
}

279 
loˇl
 
	$gzc›y
(*
«me
, 
˛r
, *
¸c
, *
tŸ
,

280 
FILE
 *
out
)

282 
ªt
;

283 
pos
;

284 
œ°
;

285 
bö
 *
ö
;

286 *
°¨t
;

287 *
junk
;

288 
z_off_t
 
Àn
;

289 
z_°ªam
 
°rm
;

292 
ö
 = 
	`b›í
(
«me
);

293 i‡(
ö
 =
NULL
)

294 
	`baû
("couldÇŸ o≥¿", 
«me
);

295 
	`gzhód
(
ö
);

299 
junk
 = 
	`mÆloc
(
CHUNK
);

300 
°rm
.
zÆloc
 = 
Z_NULL
;

301 
°rm
.
z‰ì
 = 
Z_NULL
;

302 
°rm
.
›aque
 = 
Z_NULL
;

303 
°rm
.
avaû_ö
 = 0;

304 
°rm
.
√xt_ö
 = 
Z_NULL
;

305 
ªt
 = 
	`öÊ©eInô2
(&
°rm
, -15);

306 i‡(
junk
 =
NULL
 || 
ªt
 !
Z_OK
)

307 
	`baû
("out of memory", "");

310 
Àn
 = 0;

311 
	`zpuŒ
(&
°rm
, 
ö
);

312 
°¨t
 = 
ö
->
√xt
;

313 
œ°
 = 
°¨t
[0] & 1;

314 i‡(
œ°
 && 
˛r
)

315 
°¨t
[0] &= ~1;

316 
°rm
.
avaû_out
 = 0;

319 i‡(
°rm
.
avaû_ö
 =0 && såm.
avaû_out
 != 0) {

320 
	`fwrôe
(
°¨t
, 1, 
°rm
.
√xt_ö
 - sèπ, 
out
);

321 
°¨t
 = 
ö
->
buf
;

322 
ö
->
À·
 = 0;

323 
	`zpuŒ
(&
°rm
, 
ö
);

327 
°rm
.
avaû_out
 = 
CHUNK
;

328 
°rm
.
√xt_out
 = 
junk
;

329 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_BLOCK
);

330 
ªt
) {

331 
Z_MEM_ERROR
:

332 
	`baû
("out of memory", "");

333 
Z_DATA_ERROR
:

334 
	`baû
("övÆid com¥es£d d©®ö ", 
ö
->
«me
);

338 
Àn
 +
CHUNK
 - 
°rm
.
avaû_out
;

341 i‡(
°rm
.
d©a_ty≥
 & 128) {

343 i‡(
œ°
)

347 
pos
 = 
°rm
.
d©a_ty≥
 & 7;

350 i‡(
pos
 != 0) {

352 
pos
 = 0x100 >>Öos;

353 
œ°
 = 
°rm
.
√xt_ö
[-1] & 
pos
;

354 i‡(
œ°
 && 
˛r
)

355 
ö
->
buf
[
°rm
.
√xt_ö
 - in->bu‡- 1] &~
pos
;

359 i‡(
°rm
.
avaû_ö
 == 0) {

361 
	`fwrôe
(
°¨t
, 1, 
°rm
.
√xt_ö
 - sèπ, 
out
);

362 
°¨t
 = 
ö
->
buf
;

363 
ö
->
À·
 = 0;

364 
	`zpuŒ
(&
°rm
, 
ö
);

366 
œ°
 = 
°rm
.
√xt_ö
[0] & 1;

367 i‡(
œ°
 && 
˛r
)

368 
ö
->
buf
[
°rm
.
√xt_ö
 - in->buf] &= ~1;

374 
ö
->
À·
 = 
°rm
.
avaû_ö
;

375 
ö
->
√xt
 = in->
buf
 + (
°rm
.
√xt_ö
 - in->buf);

378 
pos
 = 
°rm
.
d©a_ty≥
 & 7;

379 
	`fwrôe
(
°¨t
, 1, 
ö
->
√xt
 - sèπ - 1, 
out
);

380 
œ°
 = 
ö
->
√xt
[-1];

381 i‡(
pos
 =0 || !
˛r
)

383 
	`putc
(
œ°
, 
out
);

386 
œ°
 &((0x100 >> 
pos
) - 1);

387 i‡(
pos
 & 1) {

389 
	`putc
(
œ°
, 
out
);

390 i‡(
pos
 == 1)

391 
	`putc
(0, 
out
);

392 
	`fwrôe
("\0\0\xff\xff", 1, 4, 
out
);

396 
pos
) {

398 
	`putc
(
œ°
 | 8, 
out
);

399 
œ°
 = 0;

401 
	`putc
(
œ°
 | 0x20, 
out
);

402 
œ°
 = 0;

404 
	`putc
(
œ°
 | 0x80, 
out
);

405 
	`putc
(0, 
out
);

411 *
¸c
 = 
	`¸c32_comböe
(*¸c, 
	`bgë4
(
ö
), 
Àn
);

412 *
tŸ
 +()
Àn
;

415 
	`öÊ©eEnd
(&
°rm
);

416 
	`‰ì
(
junk
);

417 
	`b˛o£
(
ö
);

420 i‡(!
˛r
) {

421 
	`put4
(*
¸c
, 
out
);

422 
	`put4
(*
tŸ
, 
out
);

424 
	}
}

427 
	$maö
(
¨gc
, **
¨gv
)

429 
¸c
, 
tŸ
;

432 
¨gc
--;

433 
¨gv
++;

436 i‡(
¨gc
 == 0) {

437 
	`Âuts
("gzjoin usage: gzjoin f1.gz [f2.gz [f3.gz ...]] > fjoin.gz\n",

438 
°dîr
);

443 
	`gzöô
(&
¸c
, &
tŸ
, 
°dout
);

444 
¨gc
--)

445 
	`gzc›y
(*
¨gv
++, 
¨gc
, &
¸c
, &
tŸ
, 
°dout
);

449 
	}
}

	@zlib-1.2.8/examples/gzlog.c

226 
	~<sys/ty≥s.h
>

227 
	~<°dio.h
>

228 
	~<°dlib.h
>

229 
	~<°rög.h
>

230 
	~<f˙é.h
>

231 
	~<uni°d.h
>

233 
	~<î∫o.h
>

234 
	~<time.h
>

235 
	~<sys/°©.h
>

236 
	~<sys/time.h
>

237 
	~"zlib.h
"

239 
	~"gzlog.h
"

241 
	#loˇl
 

	)

242 
	tuöt
;

243 
	tul⁄g
;

246 #ifde‡
DEBUG


247 
	~<£tjmp.h
>

248 
jmp_buf
 
	ggzlog_jump
;

249 
	ggzlog_baû
 = 0;

250 
	ggzlog_cou¡
 = -1;

251 
	#BAIL
(
n
Ëdÿ{ i‡“ =
gzlog_baû
 && 
gzlog_cou¡
-- == 0) \

252 
	`l⁄gjmp
(
gzlog_jump
, 
gzlog_baû
); } 0)

	)

254 
	#BAIL
(
n
)

	)

258 
	#PATIENCE
 300

	)

261 
	#MAX_STORE
 16

	)

266 
	#TRIGGER
 1024

	)

269 
	#DICT
 32768U

	)

272 
	#NO_OP
 0

	)

273 
	#APPEND_OP
 1

	)

274 
	#COMPRESS_OP
 2

	)

275 
	#REPLACE_OP
 3

	)

278 
	#PULL2
(
p
Ë(’)[0]+((
uöt
)(’)[1])<<8))

	)

279 
	#PULL4
(
p
Ë(
	`PULL2
’)+((
ul⁄g
)PULL2’+2)<<16))

	)

280 
	#PULL8
(
p
Ë(
	`PULL4
’)+((
off_t
)PULL4’+4)<<32))

	)

283 
	#PUT2
(
p
,
a
Ëdÿ{’)[0]˜;’)[1]=◊)>>8;} 0)

	)

284 
	#PUT4
(
p
,
a
Ëdÿ{
	`PUT2
’,a);PUT2’+2,a>>16);} 0)

	)

285 
	#PUT8
(
p
,
a
Ëdÿ{
	`PUT4
’,a);PUT4’+4,a>>32);} 0)

	)

288 
	#LOGID
 "\106\035\172"

	)

289 
	slog
 {

290 
	mid
[4];

291 
	mfd
;

292 *
	m∑th
;

293 *
	míd
;

294 
off_t
 
	mfú°
;

295 
	mback
;

296 
uöt
 
	m°‹ed
;

297 
off_t
 
	mœ°
;

298 
ul⁄g
 
	mc¸c
;

299 
ul⁄g
 
	m˛í
;

300 
ul⁄g
 
	mt¸c
;

301 
ul⁄g
 
	méí
;

302 
time_t
 
	mlock
;

306 
loˇl
 
	glog_gzhód
[] = {

316 
	#HEAD
 (
log_gzhód
Ë

	)

319 
loˇl
 
	glog_gzext
[] = {

328 
	#EXTRA
 (
log_gzext
Ë

	)

331 
loˇl
 
	glog_gzbody
[] = {

337 
	#BODY
 (
log_gzbody
)

	)

348 
loˇl
 
	$log_lock
(
log
 *log)

350 
fd
;

351 
°©
 
°
;

353 
	`°r˝y
(
log
->
íd
, ".lock");

354 (
fd
 = 
	`›í
(
log
->
∑th
, 
O_CREAT
 | 
O_EXCL
, 0644)) < 0) {

355 i‡(
î∫o
 !
EEXIST
)

357 i‡(
	`°©
(
log
->
∑th
, &
°
Ë=0 && 
	`time
(
NULL
Ë- st.
°_mtime
 > 
PATIENCE
) {

358 
	`u∆ök
(
log
->
∑th
);

361 
	`¶ìp
(2);

363 
	`˛o£
(
fd
);

364 i‡(
	`°©
(
log
->
∑th
, &
°
) == 0)

365 
log
->
lock
 = 
°
.
°_mtime
;

367 
	}
}

372 
loˇl
 
	$log_touch
(
log
 *log)

374 
°©
 
°
;

376 
	`°r˝y
(
log
->
íd
, ".lock");

377 
	`utimes
(
log
->
∑th
, 
NULL
);

378 i‡(
	`°©
(
log
->
∑th
, &
°
) == 0)

379 
log
->
lock
 = 
°
.
°_mtime
;

380 
	}
}

384 
loˇl
 
	$log_check
(
log
 *log)

386 
°©
 
°
;

388 
	`°r˝y
(
log
->
íd
, ".lock");

389 i‡(
	`°©
(
log
->
∑th
, &
°
Ë|| st.
°_mtime
 !log->
lock
)

391 
	`log_touch
(
log
);

393 
	}
}

396 
loˇl
 
	$log_u∆ock
(
log
 *log)

398 i‡(
	`log_check
(
log
))

400 
	`°r˝y
(
log
->
íd
, ".lock");

401 
	`u∆ök
(
log
->
∑th
);

402 
log
->
lock
 = 0;

403 
	}
}

410 
loˇl
 
	$log_hód
(
log
 *log)

412 
›
;

413 
buf
[
HEAD
 + 
EXTRA
];

415 i‡(
	`l£ek
(
log
->
fd
, 0, 
SEEK_SET
) < 0 ||

416 
	`ªad
(
log
->
fd
, 
buf
, 
HEAD
 + 
EXTRA
) != HEAD + EXTRA ||

417 
	`memcmp
(
buf
, 
log_gzhód
, 
HEAD
)) {

420 
log
->
fú°
 = 
	`PULL8
(
buf
 + 
HEAD
);

421 
log
->
œ°
 = 
	`PULL8
(
buf
 + 
HEAD
 + 8);

422 
log
->
c¸c
 = 
	`PULL4
(
buf
 + 
HEAD
 + 16);

423 
log
->
˛í
 = 
	`PULL4
(
buf
 + 
HEAD
 + 20);

424 
log
->
t¸c
 = 
	`PULL4
(
buf
 + 
HEAD
 + 24);

425 
log
->
éí
 = 
	`PULL4
(
buf
 + 
HEAD
 + 28);

426 
log
->
°‹ed
 = 
	`PULL2
(
buf
 + 
HEAD
 + 32);

427 
log
->
back
 = 3 + (
buf
[
HEAD
 + 34] & 7);

428 
›
 = (
buf
[
HEAD
 + 34] >> 3) & 3;

429  
›
;

430 
	}
}

437 
loˇl
 
	$log_m¨k
(
log
 *log, 
›
)

439 
ªt
;

440 
ext
[
EXTRA
];

442 
	`PUT8
(
ext
, 
log
->
fú°
);

443 
	`PUT8
(
ext
 + 8, 
log
->
œ°
);

444 
	`PUT4
(
ext
 + 16, 
log
->
c¸c
);

445 
	`PUT4
(
ext
 + 20, 
log
->
˛í
);

446 
	`PUT4
(
ext
 + 24, 
log
->
t¸c
);

447 
	`PUT4
(
ext
 + 28, 
log
->
éí
);

448 
	`PUT2
(
ext
 + 32, 
log
->
°‹ed
);

449 
ext
[34] = 
log
->
back
 - 3 + (
›
 << 3);

450 
	`fsync
(
log
->
fd
);

451 
ªt
 = 
	`l£ek
(
log
->
fd
, 
HEAD
, 
SEEK_SET
) < 0 ||

452 
	`wrôe
(
log
->
fd
, 
ext
, 
EXTRA
) != EXTRA ? -1 : 0;

453 
	`fsync
(
log
->
fd
);

454  
ªt
;

455 
	}
}

462 
loˇl
 
	$log_œ°
(
log
 *log, 
œ°
)

464 
back
, 
Àn
, 
mask
;

465 
buf
[6];

468 
back
 = 
log
->
œ°
 =log->
fú°
 ?Üog->back : 8;

469 
Àn
 = 
back
 > 8 ? 2 : 1;

470 
mask
 = 0x80 >> ((
back
 - 1) & 7);

475 
buf
[0] = 0;

476 i‡(
back
 !8 && (
	`l£ek
(
log
->
fd
,Üog->
œ°
 - 
Àn
, 
SEEK_SET
) < 0 ||

477 
	`ªad
(
log
->
fd
, 
buf
, 1) != 1))

484 
buf
[1] = 0;

485 
buf
[2 - 
Àn
] = (*bu‡& (
mask
 - 1)Ë+ (
œ°
 ? mask : 0);

489 
	`PUT2
(
buf
 + 2, 
log
->
°‹ed
);

490 
	`PUT2
(
buf
 + 4, 
log
->
°‹ed
 ^ 0xffff);

491  
	`l£ek
(
log
->
fd
,Üog->
œ°
 - 
Àn
, 
SEEK_SET
) < 0 ||

492 
	`wrôe
(
log
->
fd
, 
buf
 + 2 - 
Àn
,Üen + 4) !=Üen + 4 ||

493 
	`l£ek
(
log
->
fd
,Üog->
°‹ed
, 
SEEK_CUR
) < 0 ? -1 : 0;

494 
	}
}

501 
loˇl
 
	$log_≠≥nd
(
log
 *log, *
d©a
, 
size_t
 
Àn
)

503 
uöt
 
put
;

504 
off_t
 
íd
;

505 
buf
[8];

510 i‡(
	`log_œ°
(
log
, 1))

515 
Àn
) {

517 
put
 = (
MAX_STORE
 << 10Ë- 
log
->
°‹ed
;

518 i‡(
put
 > 
Àn
)

519 
put
 = (
uöt
)
Àn
;

520 i‡(
put
) {

521 i‡(
	`wrôe
(
log
->
fd
, 
d©a
, 
put
) !=Öut)

523 
	`BAIL
(1);

524 
log
->
t¸c
 = 
	`¸c32
÷og->t¸c, 
d©a
, 
put
);

525 
log
->
éí
 +
put
;

526 
log
->
°‹ed
 +
put
;

527 
d©a
 +
put
;

528 
Àn
 -
put
;

532 i‡(
Àn
) {

534 i‡(
	`log_œ°
(
log
, 0))

538 
log
->
œ°
 +4 +Üog->
°‹ed
 + 1;

539 
log
->
°‹ed
 = 0;

543 i‡(
	`log_œ°
(
log
, 1))

545 
	`BAIL
(2);

550 
	`PUT4
(
buf
, 
log
->
t¸c
);

551 
	`PUT4
(
buf
 + 4, 
log
->
éí
);

552 i‡(
	`wrôe
(
log
->
fd
, 
buf
, 8) != 8 ||

553 (
íd
 = 
	`l£ek
(
log
->
fd
, 0, 
SEEK_CUR
)Ë< 0 || 
	`·runˇã
(log->fd,Énd))

557 i‡(
	`log_m¨k
(
log
, 
NO_OP
))

559 
	`°r˝y
(
log
->
íd
, ".add");

560 
	`u∆ök
(
log
->
∑th
);

562 
	}
}

571 
loˇl
 
	$log_ª∂a˚
(
log
 *log)

573 
ªt
;

574 *
de°
;

577 
	`°r˝y
(
log
->
íd
, ".add");

578 
	`u∆ök
(
log
->
∑th
);

579 
	`BAIL
(3);

582 
	`°r˝y
(
log
->
íd
, ".dict");

583 
de°
 = 
	`mÆloc
(
	`°æí
(
log
->
∑th
) + 1);

584 i‡(
de°
 =
NULL
)

586 
	`°r˝y
(
de°
, 
log
->
∑th
);

587 
	`°r˝y
(
log
->
íd
, ".temp");

588 
ªt
 = 
	`ª«me
(
log
->
∑th
, 
de°
);

589 
	`‰ì
(
de°
);

590 i‡(
ªt
 && 
î∫o
 !
ENOENT
)

592 
	`BAIL
(4);

595  
	`log_m¨k
(
log
, 
NO_OP
);

596 
	}
}

608 
loˇl
 
	$log_com¥ess
(
log
 *log, *
d©a
, 
size_t
 
Àn
)

610 
fd
;

611 
uöt
 
gŸ
, 
max
;

612 
ssize_t
 
di˘
;

613 
off_t
 
íd
;

614 
z_°ªam
 
°rm
;

615 
buf
[
DICT
];

618 i‡(
Àn
) {

620 
°rm
.
zÆloc
 = 
Z_NULL
;

621 
°rm
.
z‰ì
 = 
Z_NULL
;

622 
°rm
.
›aque
 = 
Z_NULL
;

623 i‡(
	`deÊ©eInô2
(&
°rm
, 
Z_DEFAULT_COMPRESSION
, 
Z_DEFLATED
, -15, 8,

624 
Z_DEFAULT_STRATEGY
Ë!
Z_OK
)

628 
	`°r˝y
(
log
->
íd
, ".dict");

629 
fd
 = 
	`›í
(
log
->
∑th
, 
O_RDONLY
, 0);

630 i‡(
fd
 >= 0) {

631 
di˘
 = 
	`ªad
(
fd
, 
buf
, 
DICT
);

632 
	`˛o£
(
fd
);

633 i‡(
di˘
 < 0) {

634 
	`deÊ©eEnd
(&
°rm
);

637 i‡(
di˘
)

638 
	`deÊ©eSëDi˘i⁄¨y
(&
°rm
, 
buf
, (
uöt
)
di˘
);

640 
	`log_touch
(
log
);

644 i‡(
	`l£ek
(
log
->
fd
,Üog->
fú°
 - (log->
back
 > 8 ? 2 : 1),

645 
SEEK_SET
) < 0 ||

646 
	`ªad
(
log
->
fd
, 
buf
, 1Ë!1 || 
	`l£ek
÷og->fd, -1, 
SEEK_CUR
) < 0) {

647 
	`deÊ©eEnd
(&
°rm
);

650 
	`deÊ©ePrime
(&
°rm
, (8 - 
log
->
back
Ë& 7, *
buf
);

653 
°rm
.
√xt_ö
 = 
d©a
;

654 
max
 = (((
uöt
)0 - 1) >> 1) + 1;

656 
°rm
.
avaû_ö
 = 
Àn
 > 
max
 ? max : (
uöt
)len;

657 
Àn
 -
°rm
.
avaû_ö
;

659 
°rm
.
avaû_out
 = 
DICT
;

660 
°rm
.
√xt_out
 = 
buf
;

661 
	`deÊ©e
(&
°rm
, 
Àn
 ? 
Z_NO_FLUSH
 : 
Z_PARTIAL_FLUSH
);

662 
gŸ
 = 
DICT
 - 
°rm
.
avaû_out
;

663 i‡(
gŸ
 && 
	`wrôe
(
log
->
fd
, 
buf
, got) != got) {

664 
	`deÊ©eEnd
(&
°rm
);

667 
	`log_touch
(
log
);

668 } 
°rm
.
avaû_out
 == 0);

669 } 
Àn
);

670 
	`deÊ©eEnd
(&
°rm
);

671 
	`BAIL
(5);

677 i‡((
log
->
fú°
 = 
	`l£ek
÷og->
fd
, -1, 
SEEK_CUR
)) < 0 ||

678 
	`ªad
(
log
->
fd
, 
buf
, 1) != 1)

680 
log
->
fú°
++;

681 i‡(*
buf
) {

682 
log
->
back
 = 1;

683 (*
buf
 & ((
uöt
)1 << (8 - 
log
->
back
++))) == 0)

687 
log
->
back
 = 10;

690 
log
->
c¸c
 =Üog->
t¸c
;

691 
log
->
˛í
 =Üog->
éí
;

695 
log
->
t¸c
 =Üog->
c¸c
;

696 
log
->
éí
 =Üog->
˛í
;

700 
log
->
œ°
 =Üog->
fú°
;

701 
log
->
°‹ed
 = 0;

702 
	`PUT4
(
buf
, 
log
->
t¸c
);

703 
	`PUT4
(
buf
 + 4, 
log
->
éí
);

704 i‡(
	`log_œ°
(
log
, 1Ë|| 
	`wrôe
÷og->
fd
, 
buf
, 8) != 8 ||

705 (
íd
 = 
	`l£ek
(
log
->
fd
, 0, 
SEEK_CUR
)Ë< 0 || 
	`·runˇã
(log->fd,Énd))

707 
	`BAIL
(6);

710 i‡(
	`log_m¨k
(
log
, 
REPLACE_OP
))

714  
	`log_ª∂a˚
(
log
);

715 
	}
}

718 
loˇl
 
	$log_log
(
log
 *log, 
›
, *
ªc‹d
)

720 
time_t
 
now
;

721 
FILE
 *
ªc
;

723 
now
 = 
	`time
(
NULL
);

724 
	`°r˝y
(
log
->
íd
, ".repairs");

725 
ªc
 = 
	`f›í
(
log
->
∑th
, "a");

726 i‡(
ªc
 =
NULL
)

728 
	`Ârötf
(
ªc
, "%.24†%†ªcovîy: %s\n", 
	`˘ime
(&
now
), 
›
 =
APPEND_OP
 ?

729 "≠≥nd" : (
›
 =
COMPRESS_OP
 ? "com¥ess" : "ª∂a˚"), 
ªc‹d
);

730 
	`f˛o£
(
ªc
);

732 
	}
}

738 
loˇl
 
	$log_ªcovî
(
log
 *log, 
›
)

740 
fd
, 
ªt
 = 0;

741 *
d©a
 = 
NULL
;

742 
size_t
 
Àn
 = 0;

743 
°©
 
°
;

746 
	`log_log
(
log
, 
›
, "start");

749 i‡(
›
 =
APPEND_OP
 || o∞=
COMPRESS_OP
) {

750 
	`°r˝y
(
log
->
íd
, ".add");

751 i‡(
	`°©
(
log
->
∑th
, &
°
Ë=0 && st.
°_size
) {

752 
Àn
 = (
size_t
)(
°
.
°_size
);

753 i‡((
off_t
)
Àn
 !
°
.
°_size
 ||

754 (
d©a
 = 
	`mÆloc
(
°
.
°_size
)Ë=
NULL
) {

755 
	`log_log
(
log
, 
›
, "allocation failure");

758 i‡((
fd
 = 
	`›í
(
log
->
∑th
, 
O_RDONLY
, 0)) < 0) {

759 
	`log_log
(
log
, 
›
, ".add fileÑead failure");

762 
ªt
 = (
size_t
)
	`ªad
(
fd
, 
d©a
, 
Àn
) !=Üen;

763 
	`˛o£
(
fd
);

764 i‡(
ªt
) {

765 
	`log_log
(
log
, 
›
, ".add fileÑead failure");

768 
	`log_log
(
log
, 
›
, "loaded .add file");

771 
	`log_log
(
log
, 
›
, "missing .add file!");

775 
›
) {

776 
APPEND_OP
:

777 
ªt
 = 
	`log_≠≥nd
(
log
, 
d©a
, 
Àn
);

779 
COMPRESS_OP
:

780 
ªt
 = 
	`log_com¥ess
(
log
, 
d©a
, 
Àn
);

782 
REPLACE_OP
:

783 
ªt
 = 
	`log_ª∂a˚
(
log
);

787 
	`log_log
(
log
, 
›
, 
ªt
 ? "failure" : "complete");

790 i‡(
d©a
 !
NULL
)

791 
	`‰ì
(
d©a
);

792  
ªt
;

793 
	}
}

796 
loˇl
 
	$log_˛o£
(
log
 *log)

798 i‡(
log
->
fd
 >= 0)

799 
	`˛o£
(
log
->
fd
);

800 
log
->
fd
 = -1;

801 
	`log_u∆ock
(
log
);

802 
	}
}

813 
loˇl
 
	$log_›í
(
log
 *log)

815 
›
;

819 i‡(
log
->
fd
 >= 0)

820 
	`˛o£
(
log
->
fd
);

821 
log
->
fd
 = -1;

824 i‡(
	`log_lock
(
log
) < 0)

828 
	`°r˝y
(
log
->
íd
, ".gz");

829 
log
->
fd
 = 
	`›í
÷og->
∑th
, 
O_RDWR
 | 
O_CREAT
, 0644);

830 i‡(
log
->
fd
 < 0) {

831 
	`log_˛o£
(
log
);

836 i‡(
	`l£ek
(
log
->
fd
, 0, 
SEEK_END
) == 0) {

837 i‡(
	`wrôe
(
log
->
fd
, 
log_gzhód
, 
HEAD
) != HEAD ||

838 
	`wrôe
(
log
->
fd
, 
log_gzext
, 
EXTRA
) != EXTRA ||

839 
	`wrôe
(
log
->
fd
, 
log_gzbody
, 
BODY
) != BODY) {

840 
	`log_˛o£
(
log
);

843 
	`°r˝y
(
log
->
íd
, ".dict");

844 
	`u∆ök
(
log
->
∑th
);

848 i‡((
›
 = 
	`log_hód
(
log
)) < 0) {

849 
	`log_˛o£
(
log
);

854 i‡(
›
 !
NO_OP
 && 
	`log_ªcovî
(
log
, op)) {

855 
	`log_˛o£
(
log
);

860 
	`log_touch
(
log
);

862 
	}
}

865 
gzlog
 *
	$gzlog_›í
(*
∑th
)

867 
size_t
 
n
;

868 
log
 *log;

871 i‡(
∑th
 =
NULL
 || *path == 0)

872  
NULL
;

875 
log
 = 
	`mÆloc
((log));

876 i‡(
log
 =
NULL
)

877  
NULL
;

878 
	`°r˝y
(
log
->
id
, 
LOGID
);

879 
log
->
fd
 = -1;

882 
n
 = 
	`°æí
(
∑th
);

883 
log
->
∑th
 = 
	`mÆloc
(
n
 + 9);

884 i‡(
log
->
∑th
 =
NULL
) {

885 
	`‰ì
(
log
);

886  
NULL
;

888 
	`°r˝y
(
log
->
∑th
,Öath);

889 
log
->
íd
 =Üog->
∑th
 + 
n
;

893 i‡(
	`log_›í
(
log
)) {

894 
	`‰ì
(
log
->
∑th
);

895 
	`‰ì
(
log
);

896  
NULL
;

900  
log
;

901 
	}
}

908 
	$gzlog_com¥ess
(
gzlog
 *
logd
)

910 
fd
, 
ªt
;

911 
uöt
 
block
;

912 
size_t
 
Àn
, 
√xt
;

913 *
d©a
, 
buf
[5];

914 
log
 *log = 
logd
;

917 i‡(
log
 =
NULL
 || 
	`°rcmp
÷og->
id
, 
LOGID
))

923 i‡(
	`log_check
(
log
Ë&& 
	`log_›í
(log))

927 
Àn
 = ((
size_t
)(
log
->
œ°
 -Üog->
fú°
) & ~(((size_t)1 << 10) - 1)) +

928 
log
->
°‹ed
;

929 i‡((
d©a
 = 
	`mÆloc
(
Àn
)Ë=
NULL
)

935 i‡(
	`l£ek
(
log
->
fd
,Üog->
fú°
 - 1, 
SEEK_SET
) < 0)

937 
√xt
 = 0;

938 
√xt
 < 
Àn
) {

939 i‡(
	`ªad
(
log
->
fd
, 
buf
, 5) != 5)

941 
block
 = 
	`PULL2
(
buf
 + 1);

942 i‡(
√xt
 + 
block
 > 
Àn
 ||

943 
	`ªad
(
log
->
fd
, (*)
d©a
 + 
√xt
, 
block
) != block)

945 
√xt
 +
block
;

947 i‡(
	`l£ek
(
log
->
fd
, 0, 
SEEK_CUR
Ë!log->
œ°
 + 4 +Üog->
°‹ed
)

949 
	`log_touch
(
log
);

952 
	`°r˝y
(
log
->
íd
, ".add");

953 
fd
 = 
	`›í
(
log
->
∑th
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

954 i‡(
fd
 < 0)

956 
ªt
 = (
size_t
)
	`wrôe
(
fd
, 
d©a
, 
Àn
) !=Üen;

957 i‡(
ªt
 | 
	`˛o£
(
fd
))

959 
	`log_touch
(
log
);

962 
	`°r˝y
(
log
->
íd
, ".temp");

963 
fd
 = 
	`›í
(
log
->
∑th
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

964 i‡(
fd
 < 0)

966 
√xt
 = 
DICT
 > 
Àn
 ?Üen : DICT;

967 
ªt
 = (
size_t
)
	`wrôe
(
fd
, (*)
d©a
 + 
Àn
 - 
√xt
,Çext) !=Çext;

968 i‡(
ªt
 | 
	`˛o£
(
fd
))

970 
	`log_touch
(
log
);

973 
log
->
œ°
 =Üog->
fú°
;

974 
log
->
°‹ed
 = 0;

975 i‡(
	`log_m¨k
(
log
, 
COMPRESS_OP
))

977 
	`BAIL
(7);

980 
ªt
 = 
	`log_com¥ess
(
log
, 
d©a
, 
Àn
);

981 
	`‰ì
(
d©a
);

982  
ªt
;

986 
	`‰ì
(
d©a
);

988 
	}
}

995 
	$gzlog_wrôe
(
gzlog
 *
logd
, *
d©a
, 
size_t
 
Àn
)

997 
fd
, 
ªt
;

998 
log
 *log = 
logd
;

1001 i‡(
log
 =
NULL
 || 
	`°rcmp
÷og->
id
, 
LOGID
))

1003 i‡(
d©a
 =
NULL
 || 
Àn
 <= 0)

1009 i‡(
	`log_check
(
log
Ë&& 
	`log_›í
(log))

1013 
	`°r˝y
(
log
->
íd
, ".add");

1014 
fd
 = 
	`›í
(
log
->
∑th
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

1015 i‡(
fd
 < 0)

1017 
ªt
 = (
size_t
)
	`wrôe
(
fd
, 
d©a
, 
Àn
) !=Üen;

1018 i‡(
ªt
 | 
	`˛o£
(
fd
))

1020 
	`log_touch
(
log
);

1023 i‡(
	`log_m¨k
(
log
, 
APPEND_OP
))

1025 
	`BAIL
(8);

1028 i‡(
	`log_≠≥nd
(
log
, 
d©a
, 
Àn
))

1032 i‡(((
log
->
œ°
 -Üog->
fú°
Ë>> 10Ë+ (log->
°‹ed
 >> 10Ë< 
TRIGGER
)

1036  
	`gzlog_com¥ess
(
log
);

1037 
	}
}

1042 
	$gzlog_˛o£
(
gzlog
 *
logd
)

1044 
log
 *log = 
logd
;

1047 i‡(
log
 =
NULL
 || 
	`°rcmp
÷og->
id
, 
LOGID
))

1051 
	`log_˛o£
(
log
);

1054 i‡(
log
->
∑th
 !
NULL
)

1055 
	`‰ì
(
log
->
∑th
);

1056 
	`°r˝y
(
log
->
id
, "bad");

1057 
	`‰ì
(
log
);

1059 
	}
}

	@zlib-1.2.8/examples/gzlog.h

48 #i‚de‡
GZLOG_H


49 
	#GZLOG_H


	)

52 
	tgzlog
;

66 
gzlog
 *
gzlog_›í
(*
∑th
);

77 
gzlog_wrôe
(
gzlog
 *
log
, *
d©a
, 
size_t
 
Àn
);

85 
gzlog_com¥ess
(
gzlog
 *
log
);

89 
gzlog_˛o£
(
gzlog
 *
log
);

	@zlib-1.2.8/examples/zpipe.c

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 
	~<as£π.h
>

18 
	~"zlib.h
"

20 #i‡
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WIN32
Ë|| deföed(
__CYGWIN__
)

21 
	~<f˙é.h
>

22 
	~<io.h
>

23 
	#SET_BINARY_MODE
(
fûe
Ë
	`£tmode
(
	`fûío
(fûe), 
O_BINARY
)

	)

25 
	#SET_BINARY_MODE
(
fûe
)

	)

28 
	#CHUNK
 16384

	)

36 
	$def
(
FILE
 *
sour˚
, FILE *
de°
, 
Àvñ
)

38 
ªt
, 
Êush
;

39 
have
;

40 
z_°ªam
 
°rm
;

41 
ö
[
CHUNK
];

42 
out
[
CHUNK
];

45 
°rm
.
zÆloc
 = 
Z_NULL
;

46 
°rm
.
z‰ì
 = 
Z_NULL
;

47 
°rm
.
›aque
 = 
Z_NULL
;

48 
ªt
 = 
	`deÊ©eInô
(&
°rm
, 
Àvñ
);

49 i‡(
ªt
 !
Z_OK
)

50  
ªt
;

54 
°rm
.
avaû_ö
 = 
	`‰ód
(
ö
, 1, 
CHUNK
, 
sour˚
);

55 i‡(
	`„º‹
(
sour˚
)) {

56 ()
	`deÊ©eEnd
(&
°rm
);

57  
Z_ERRNO
;

59 
Êush
 = 
	`„of
(
sour˚
Ë? 
Z_FINISH
 : 
Z_NO_FLUSH
;

60 
°rm
.
√xt_ö
 = 
ö
;

65 
°rm
.
avaû_out
 = 
CHUNK
;

66 
°rm
.
√xt_out
 = 
out
;

67 
ªt
 = 
	`deÊ©e
(&
°rm
, 
Êush
);

68 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

69 
have
 = 
CHUNK
 - 
°rm
.
avaû_out
;

70 i‡(
	`fwrôe
(
out
, 1, 
have
, 
de°
Ë!havê|| 
	`„º‹
(dest)) {

71 ()
	`deÊ©eEnd
(&
°rm
);

72  
Z_ERRNO
;

74 } 
°rm
.
avaû_out
 == 0);

75 
	`as£π
(
°rm
.
avaû_ö
 == 0);

78 } 
Êush
 !
Z_FINISH
);

79 
	`as£π
(
ªt
 =
Z_STREAM_END
);

82 ()
	`deÊ©eEnd
(&
°rm
);

83  
Z_OK
;

84 
	}
}

92 
	$öf
(
FILE
 *
sour˚
, FILE *
de°
)

94 
ªt
;

95 
have
;

96 
z_°ªam
 
°rm
;

97 
ö
[
CHUNK
];

98 
out
[
CHUNK
];

101 
°rm
.
zÆloc
 = 
Z_NULL
;

102 
°rm
.
z‰ì
 = 
Z_NULL
;

103 
°rm
.
›aque
 = 
Z_NULL
;

104 
°rm
.
avaû_ö
 = 0;

105 
°rm
.
√xt_ö
 = 
Z_NULL
;

106 
ªt
 = 
	`öÊ©eInô
(&
°rm
);

107 i‡(
ªt
 !
Z_OK
)

108  
ªt
;

112 
°rm
.
avaû_ö
 = 
	`‰ód
(
ö
, 1, 
CHUNK
, 
sour˚
);

113 i‡(
	`„º‹
(
sour˚
)) {

114 ()
	`öÊ©eEnd
(&
°rm
);

115  
Z_ERRNO
;

117 i‡(
°rm
.
avaû_ö
 == 0)

119 
°rm
.
√xt_ö
 = 
ö
;

123 
°rm
.
avaû_out
 = 
CHUNK
;

124 
°rm
.
√xt_out
 = 
out
;

125 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_NO_FLUSH
);

126 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

127 
ªt
) {

128 
Z_NEED_DICT
:

129 
ªt
 = 
Z_DATA_ERROR
;

130 
Z_DATA_ERROR
:

131 
Z_MEM_ERROR
:

132 ()
	`öÊ©eEnd
(&
°rm
);

133  
ªt
;

135 
have
 = 
CHUNK
 - 
°rm
.
avaû_out
;

136 i‡(
	`fwrôe
(
out
, 1, 
have
, 
de°
Ë!havê|| 
	`„º‹
(dest)) {

137 ()
	`öÊ©eEnd
(&
°rm
);

138  
Z_ERRNO
;

140 } 
°rm
.
avaû_out
 == 0);

143 } 
ªt
 !
Z_STREAM_END
);

146 ()
	`öÊ©eEnd
(&
°rm
);

147  
ªt
 =
Z_STREAM_END
 ? 
Z_OK
 : 
Z_DATA_ERROR
;

148 
	}
}

151 
	$zîr
(
ªt
)

153 
	`Âuts
("zpùe: ", 
°dîr
);

154 
ªt
) {

155 
Z_ERRNO
:

156 i‡(
	`„º‹
(
°dö
))

157 
	`Âuts
("îr‹Ñódög stdö\n", 
°dîr
);

158 i‡(
	`„º‹
(
°dout
))

159 
	`Âuts
("îr‹ wrôög stdout\n", 
°dîr
);

161 
Z_STREAM_ERROR
:

162 
	`Âuts
("övÆid com¥essi⁄Üevñ\n", 
°dîr
);

164 
Z_DATA_ERROR
:

165 
	`Âuts
("övÆid o∏öcom∂ëêdeÊ©êd©a\n", 
°dîr
);

167 
Z_MEM_ERROR
:

168 
	`Âuts
("ouào‡mem‹y\n", 
°dîr
);

170 
Z_VERSION_ERROR
:

171 
	`Âuts
("zlib vîsi⁄ mism©ch!\n", 
°dîr
);

173 
	}
}

176 
	$maö
(
¨gc
, **
¨gv
)

178 
ªt
;

181 
	`SET_BINARY_MODE
(
°dö
);

182 
	`SET_BINARY_MODE
(
°dout
);

185 i‡(
¨gc
 == 1) {

186 
ªt
 = 
	`def
(
°dö
, 
°dout
, 
Z_DEFAULT_COMPRESSION
);

187 i‡(
ªt
 !
Z_OK
)

188 
	`zîr
(
ªt
);

189  
ªt
;

193 i‡(
¨gc
 =2 && 
	`°rcmp
(
¨gv
[1], "-d") == 0) {

194 
ªt
 = 
	`öf
(
°dö
, 
°dout
);

195 i‡(
ªt
 !
Z_OK
)

196 
	`zîr
(
ªt
);

197  
ªt
;

202 
	`Âuts
("zpùêußge: zpùê[-d] < sour˚ > de°\n", 
°dîr
);

205 
	}
}

	@zlib-1.2.8/examples/zran.c

55 
	~<°dio.h
>

56 
	~<°dlib.h
>

57 
	~<°rög.h
>

58 
	~"zlib.h
"

60 
	#loˇl
 

	)

62 
	#SPAN
 1048576L

	)

63 
	#WINSIZE
 32768U

	)

64 
	#CHUNK
 16384

	)

67 
	spoöt
 {

68 
off_t
 
	mout
;

69 
off_t
 
	mö
;

70 
	mbôs
;

71 
	mwödow
[
WINSIZE
];

75 
	sac˚ss
 {

76 
	mhave
;

77 
	msize
;

78 
poöt
 *
	mli°
;

82 
loˇl
 
	$‰ì_ödex
(
ac˚ss
 *
ödex
)

84 i‡(
ödex
 !
NULL
) {

85 
	`‰ì
(
ödex
->
li°
);

86 
	`‰ì
(
ödex
);

88 
	}
}

92 
loˇl
 
ac˚ss
 *
	$addpoöt
(
ac˚ss
 *
ödex
, 
bôs
,

93 
off_t
 
ö
, off_à
out
, 
À·
, *
wödow
)

95 
poöt
 *
√xt
;

98 i‡(
ödex
 =
NULL
) {

99 
ödex
 = 
	`mÆloc
((
ac˚ss
));

100 i‡(
ödex
 =
NULL
)  NULL;

101 
ödex
->
li°
 = 
	`mÆloc
((
poöt
) << 3);

102 i‡(
ödex
->
li°
 =
NULL
) {

103 
	`‰ì
(
ödex
);

104  
NULL
;

106 
ödex
->
size
 = 8;

107 
ödex
->
have
 = 0;

111 i‡(
ödex
->
have
 =ödex->
size
) {

112 
ödex
->
size
 <<= 1;

113 
√xt
 = 
	`ªÆloc
(
ödex
->
li°
, (
poöt
Ë* index->
size
);

114 i‡(
√xt
 =
NULL
) {

115 
	`‰ì_ödex
(
ödex
);

116  
NULL
;

118 
ödex
->
li°
 = 
√xt
;

122 
√xt
 = 
ödex
->
li°
 + index->
have
;

123 
√xt
->
bôs
 = bits;

124 
√xt
->
ö
 = in;

125 
√xt
->
out
 = out;

126 i‡(
À·
)

127 
	`mem˝y
(
√xt
->
wödow
, wödow + 
WINSIZE
 - 
À·
,Üeft);

128 i‡(
À·
 < 
WINSIZE
)

129 
	`mem˝y
(
√xt
->
wödow
 + 
À·
, wödow, 
WINSIZE
 -Üeft);

130 
ödex
->
have
++;

133  
ödex
;

134 
	}
}

144 
loˇl
 
	$buûd_ödex
(
FILE
 *
ö
, 
off_t
 
•™
, 
ac˚ss
 **
buût
)

146 
ªt
;

147 
off_t
 
tŸö
, 
tŸout
;

148 
off_t
 
œ°
;

149 
ac˚ss
 *
ödex
;

150 
z_°ªam
 
°rm
;

151 
öput
[
CHUNK
];

152 
wödow
[
WINSIZE
];

155 
°rm
.
zÆloc
 = 
Z_NULL
;

156 
°rm
.
z‰ì
 = 
Z_NULL
;

157 
°rm
.
›aque
 = 
Z_NULL
;

158 
°rm
.
avaû_ö
 = 0;

159 
°rm
.
√xt_ö
 = 
Z_NULL
;

160 
ªt
 = 
	`öÊ©eInô2
(&
°rm
, 47);

161 i‡(
ªt
 !
Z_OK
)

162  
ªt
;

167 
tŸö
 = 
tŸout
 = 
œ°
 = 0;

168 
ödex
 = 
NULL
;

169 
°rm
.
avaû_out
 = 0;

172 
°rm
.
avaû_ö
 = 
	`‰ód
(
öput
, 1, 
CHUNK
, 
ö
);

173 i‡(
	`„º‹
(
ö
)) {

174 
ªt
 = 
Z_ERRNO
;

175 
buûd_ödex_îr‹
;

177 i‡(
°rm
.
avaû_ö
 == 0) {

178 
ªt
 = 
Z_DATA_ERROR
;

179 
buûd_ödex_îr‹
;

181 
°rm
.
√xt_ö
 = 
öput
;

186 i‡(
°rm
.
avaû_out
 == 0) {

187 
°rm
.
avaû_out
 = 
WINSIZE
;

188 
°rm
.
√xt_out
 = 
wödow
;

193 
tŸö
 +
°rm
.
avaû_ö
;

194 
tŸout
 +
°rm
.
avaû_out
;

195 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_BLOCK
);

196 
tŸö
 -
°rm
.
avaû_ö
;

197 
tŸout
 -
°rm
.
avaû_out
;

198 i‡(
ªt
 =
Z_NEED_DICT
)

199 
ªt
 = 
Z_DATA_ERROR
;

200 i‡(
ªt
 =
Z_MEM_ERROR
 ||Ñë =
Z_DATA_ERROR
)

201 
buûd_ödex_îr‹
;

202 i‡(
ªt
 =
Z_STREAM_END
)

214 i‡((
°rm
.
d©a_ty≥
 & 128) && !(strm.data_type & 64) &&

215 (
tŸout
 =0 ||ÅŸouà- 
œ°
 > 
•™
)) {

216 
ödex
 = 
	`addpoöt
(ödex, 
°rm
.
d©a_ty≥
 & 7, 
tŸö
,

217 
tŸout
, 
°rm
.
avaû_out
, 
wödow
);

218 i‡(
ödex
 =
NULL
) {

219 
ªt
 = 
Z_MEM_ERROR
;

220 
buûd_ödex_îr‹
;

222 
œ°
 = 
tŸout
;

224 } 
°rm
.
avaû_ö
 != 0);

225 } 
ªt
 !
Z_STREAM_END
);

228 ()
	`öÊ©eEnd
(&
°rm
);

229 
ödex
->
li°
 = 
	`ªÆloc
(ödex->li°, (
poöt
Ë* index->
have
);

230 
ödex
->
size
 = index->
have
;

231 *
buût
 = 
ödex
;

232  
ödex
->
size
;

235 
buûd_ödex_îr‹
:

236 ()
	`öÊ©eEnd
(&
°rm
);

237 i‡(
ödex
 !
NULL
)

238 
	`‰ì_ödex
(
ödex
);

239  
ªt
;

240 
	}
}

249 
loˇl
 
	$exåa˘
(
FILE
 *
ö
, 
ac˚ss
 *
ödex
, 
off_t
 
off£t
,

250 *
buf
, 
Àn
)

252 
ªt
, 
skù
;

253 
z_°ªam
 
°rm
;

254 
poöt
 *
hîe
;

255 
öput
[
CHUNK
];

256 
disˇrd
[
WINSIZE
];

259 i‡(
Àn
 < 0)

263 
hîe
 = 
ödex
->
li°
;

264 
ªt
 = 
ödex
->
have
;

265 --
ªt
 && 
hîe
[1].
out
 <
off£t
)

266 
hîe
++;

269 
°rm
.
zÆloc
 = 
Z_NULL
;

270 
°rm
.
z‰ì
 = 
Z_NULL
;

271 
°rm
.
›aque
 = 
Z_NULL
;

272 
°rm
.
avaû_ö
 = 0;

273 
°rm
.
√xt_ö
 = 
Z_NULL
;

274 
ªt
 = 
	`öÊ©eInô2
(&
°rm
, -15);

275 i‡(
ªt
 !
Z_OK
)

276  
ªt
;

277 
ªt
 = 
	`f£eko
(
ö
, 
hîe
->ö - (hîe->
bôs
 ? 1 : 0), 
SEEK_SET
);

278 i‡(
ªt
 == -1)

279 
exåa˘_ªt
;

280 i‡(
hîe
->
bôs
) {

281 
ªt
 = 
	`gëc
(
ö
);

282 i‡(
ªt
 == -1) {

283 
ªt
 = 
	`„º‹
(
ö
Ë? 
Z_ERRNO
 : 
Z_DATA_ERROR
;

284 
exåa˘_ªt
;

286 ()
	`öÊ©ePrime
(&
°rm
, 
hîe
->
bôs
, 
ªt
 >> (8 - here->bits));

288 ()
	`öÊ©eSëDi˘i⁄¨y
(&
°rm
, 
hîe
->
wödow
, 
WINSIZE
);

291 
off£t
 -
hîe
->
out
;

292 
°rm
.
avaû_ö
 = 0;

293 
skù
 = 1;

296 i‡(
off£t
 =0 && 
skù
) {

297 
°rm
.
avaû_out
 = 
Àn
;

298 
°rm
.
√xt_out
 = 
buf
;

299 
skù
 = 0;

301 i‡(
off£t
 > 
WINSIZE
) {

302 
°rm
.
avaû_out
 = 
WINSIZE
;

303 
°rm
.
√xt_out
 = 
disˇrd
;

304 
off£t
 -
WINSIZE
;

306 i‡(
off£t
 != 0) {

307 
°rm
.
avaû_out
 = ()
off£t
;

308 
°rm
.
√xt_out
 = 
disˇrd
;

309 
off£t
 = 0;

314 i‡(
°rm
.
avaû_ö
 == 0) {

315 
°rm
.
avaû_ö
 = 
	`‰ód
(
öput
, 1, 
CHUNK
, 
ö
);

316 i‡(
	`„º‹
(
ö
)) {

317 
ªt
 = 
Z_ERRNO
;

318 
exåa˘_ªt
;

320 i‡(
°rm
.
avaû_ö
 == 0) {

321 
ªt
 = 
Z_DATA_ERROR
;

322 
exåa˘_ªt
;

324 
°rm
.
√xt_ö
 = 
öput
;

326 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_NO_FLUSH
);

327 i‡(
ªt
 =
Z_NEED_DICT
)

328 
ªt
 = 
Z_DATA_ERROR
;

329 i‡(
ªt
 =
Z_MEM_ERROR
 ||Ñë =
Z_DATA_ERROR
)

330 
exåa˘_ªt
;

331 i‡(
ªt
 =
Z_STREAM_END
)

333 } 
°rm
.
avaû_out
 != 0);

336 i‡(
ªt
 =
Z_STREAM_END
)

340 } 
skù
);

343 
ªt
 = 
skù
 ? 0 : 
Àn
 - 
°rm
.
avaû_out
;

346 
exåa˘_ªt
:

347 ()
	`öÊ©eEnd
(&
°rm
);

348  
ªt
;

349 
	}
}

354 
	$maö
(
¨gc
, **
¨gv
)

356 
Àn
;

357 
off_t
 
off£t
;

358 
FILE
 *
ö
;

359 
ac˚ss
 *
ödex
 = 
NULL
;

360 
buf
[
CHUNK
];

363 i‡(
¨gc
 != 2) {

364 
	`Ârötf
(
°dîr
, "usage: zran file.gz\n");

367 
ö
 = 
	`f›í
(
¨gv
[1], "rb");

368 i‡(
ö
 =
NULL
) {

369 
	`Ârötf
(
°dîr
, "zøn: couldÇŸ o≥¿%†f‹Ñódög\n", 
¨gv
[1]);

374 
Àn
 = 
	`buûd_ödex
(
ö
, 
SPAN
, &
ödex
);

375 i‡(
Àn
 < 0) {

376 
	`f˛o£
(
ö
);

377 
Àn
) {

378 
Z_MEM_ERROR
:

379 
	`Ârötf
(
°dîr
, "zran: out of memory\n");

381 
Z_DATA_ERROR
:

382 
	`Ârötf
(
°dîr
, "zøn: com¥es£d d©®îr‹ i¿%s\n", 
¨gv
[1]);

384 
Z_ERRNO
:

385 
	`Ârötf
(
°dîr
, "zøn:ÑódÉº‹ o¿%s\n", 
¨gv
[1]);

388 
	`Ârötf
(
°dîr
, "zøn:Éº‹ %d whûêbuûdög index\n", 
Àn
);

392 
	`Ârötf
(
°dîr
, "zøn: buûàödex wôh %dác˚s†poöts\n", 
Àn
);

395 
off£t
 = (
ödex
->
li°
[ödex->
have
 - 1].
out
 << 1) / 3;

396 
Àn
 = 
	`exåa˘
(
ö
, 
ödex
, 
off£t
, 
buf
, 
CHUNK
);

397 i‡(
Àn
 < 0)

398 
	`Ârötf
(
°dîr
, "zran:Éxtraction failed: %sÉrror\n",

399 
Àn
 =
Z_MEM_ERROR
 ? "out of memory" : "input corrupted");

401 
	`fwrôe
(
buf
, 1, 
Àn
, 
°dout
);

402 
	`Ârötf
(
°dîr
, "zøn:Éxåa˘ed %d byã†© %Œu\n", 
Àn
, 
off£t
);

406 
	`‰ì_ödex
(
ödex
);

407 
	`f˛o£
(
ö
);

409 
	}
}

	@zlib-1.2.8/gzclose.c

6 
	~"gzguts.h
"

11 
ZEXPORT
 
	$gz˛o£
(
fûe
)

12 
gzFûe
 
fûe
;

14 #i‚de‡
NO_GZCOMPRESS


15 
gz_°©ï
 
°©e
;

17 i‡(
fûe
 =
NULL
)

18  
Z_STREAM_ERROR
;

19 
°©e
 = (
gz_°©ï
)
fûe
;

21  
°©e
->
mode
 =
GZ_READ
 ? 
	`gz˛o£_r
(
fûe
Ë: 
	`gz˛o£_w
(file);

23  
	`gz˛o£_r
(
fûe
);

25 
	}
}

	@zlib-1.2.8/gzguts.h

6 #ifde‡
_LARGEFILE64_SOURCE


7 #i‚de‡
_LARGEFILE_SOURCE


8 
	#_LARGEFILE_SOURCE
 1

	)

10 #ifde‡
_FILE_OFFSET_BITS


11 #unde‡
_FILE_OFFSET_BITS


15 #ifde‡
HAVE_HIDDEN


16 
	#ZLIB_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
 ("hiddí")))

	)

18 
	#ZLIB_INTERNAL


	)

21 
	~<°dio.h
>

22 
	~"zlib.h
"

23 #ifde‡
STDC


24 
	~<°rög.h
>

25 
	~<°dlib.h
>

26 
	~<limôs.h
>

28 
	~<f˙é.h
>

30 #ifde‡
_WIN32


31 
	~<°ddef.h
>

34 #i‡
deföed
(
__TURBOC__
Ë|| deföed(
_MSC_VER
Ë|| deföed(
_WIN32
)

35 
	~<io.h
>

38 #ifde‡
WINAPI_FAMILY


39 
	#›í
 
_›í


	)

40 
	#ªad
 
_ªad


	)

41 
	#wrôe
 
_wrôe


	)

42 
	#˛o£
 
_˛o£


	)

45 #ifde‡
NO_DEFLATE


46 
	#NO_GZCOMPRESS


	)

49 #i‡
deföed
(
STDC99
Ë|| (deföed(
__TURBOC__
) && __TURBOC__ >= 0x550)

50 #i‚de‡
HAVE_VSNPRINTF


51 
	#HAVE_VSNPRINTF


	)

55 #i‡
deföed
(
__CYGWIN__
)

56 #i‚de‡
HAVE_VSNPRINTF


57 
	#HAVE_VSNPRINTF


	)

61 #i‡
deföed
(
MSDOS
Ë&& deföed(
__BORLANDC__
Ë&& (
BORLANDC
 > 0x410)

62 #i‚de‡
HAVE_VSNPRINTF


63 
	#HAVE_VSNPRINTF


	)

67 #i‚de‡
HAVE_VSNPRINTF


68 #ifde‡
MSDOS


71 
	#NO_v¢¥ötf


	)

73 #ifde‡
__TURBOC__


74 
	#NO_v¢¥ötf


	)

76 #ifde‡
WIN32


78 #i‡!
deföed
(
v¢¥ötf
Ë&& !deföed(
NO_v¢¥ötf
)

79 #i‡!
deföed
(
_MSC_VER
) || ( defined(_MSC_VER) && _MSC_VER < 1500 )

80 
	#v¢¥ötf
 
_v¢¥ötf


	)

84 #ifde‡
__SASC


85 
	#NO_v¢¥ötf


	)

87 #ifde‡
VMS


88 
	#NO_v¢¥ötf


	)

90 #ifde‡
__OS400__


91 
	#NO_v¢¥ötf


	)

93 #ifde‡
__MVS__


94 
	#NO_v¢¥ötf


	)

102 #ifde‡
_MSC_VER


103 
	#¢¥ötf
 
_¢¥ötf


	)

106 #i‚de‡
loˇl


107 
	#loˇl
 

	)

112 #i‚de‡
STDC


113 
voidp
 
mÆloc
 
OF
((
uI¡
 
size
));

114 
‰ì
 
OF
((
voidpf
 
±r
));

118 #i‡
deföed
 
UNDER_CE


119 
	~<wödows.h
>

120 
	#z°ªº‹
(Ë
	`gz_°rwöîr‹
((
DWORD
)
	`GëLa°Eº‹
())

	)

122 #i‚de‡
NO_STRERROR


123 
	~<î∫o.h
>

124 
	#z°ªº‹
(Ë
	`°ªº‹
(
î∫o
)

	)

126 
	#z°ªº‹
(Ë"°diÿîr‹ (c⁄su…Éºno)"

	)

131 #i‡!
deföed
(
_LARGEFILE64_SOURCE
Ë|| 
_LFS64_LARGEFILE
-0 == 0

132 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

133 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

134 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

135 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

139 #i‡
MAX_MEM_LEVEL
 >= 8

140 
	#DEF_MEM_LEVEL
 8

	)

142 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

147 
	#GZBUFSIZE
 8192

	)

150 
	#GZ_NONE
 0

	)

151 
	#GZ_READ
 7247

	)

152 
	#GZ_WRITE
 31153

	)

153 
	#GZ_APPEND
 1

	)

156 
	#LOOK
 0

	)

157 
	#COPY
 1

	)

158 
	#GZIP
 2

	)

163 
gzFûe_s
 
	mx
;

168 
	mmode
;

169 
	mfd
;

170 *
	m∑th
;

171 
	msize
;

172 
	mw™t
;

173 *
	mö
;

174 *
	mout
;

175 
	mdúe˘
;

177 
	mhow
;

178 
z_off64_t
 
	m°¨t
;

179 
	meof
;

180 
	m∑°
;

182 
	mÀvñ
;

183 
	m°øãgy
;

185 
z_off64_t
 
	mskù
;

186 
	m£ek
;

188 
	mîr
;

189 *
	mmsg
;

191 
z_°ªam
 
	m°rm
;

192 } 
	tgz_°©e
;

193 
gz_°©e
 
	tFAR
 *
	tgz_°©ï
;

196 
ZLIB_INTERNAL
 
gz_îr‹
 
OF
((
gz_°©ï
, , const *));

197 #i‡
deföed
 
UNDER_CE


198 
ZLIB_INTERNAL
 *
gz_°rwöîr‹
 
OF
((
DWORD
 
îr‹
));

204 #ifde‡
INT_MAX


205 
	#GT_OFF
(
x
Ë((Ë=(
z_off64_t
Ë&& (xË> 
INT_MAX
)

	)

207 
ZLIB_INTERNAL
 
gz_ötmax
 
OF
(());

208 
	#GT_OFF
(
x
Ë((Ë=(
z_off64_t
Ë&& (xË> 
	`gz_ötmax
())

	)

	@zlib-1.2.8/gzlib.c

6 
	~"gzguts.h
"

8 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__BORLANDC__
)

9 
	#LSEEK
 
_l£eki64


	)

11 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& 
_LFS64_LARGEFILE
-0

12 
	#LSEEK
 
l£ek64


	)

14 
	#LSEEK
 
l£ek


	)

19 
loˇl
 
gz_ª£t
 
OF
((
gz_°©ï
));

20 
loˇl
 
gzFûe
 
gz_›í
 
OF
((const *, , const *));

22 #i‡
deföed
 
UNDER_CE


33 
ZLIB_INTERNAL
 *
	$gz_°rwöîr‹
 (
îr‹
)

34 
DWORD
 
îr‹
;

36 
buf
[1024];

38 
wch¨_t
 *
msgbuf
;

39 
DWORD
 
œ°îr
 = 
	`GëLa°Eº‹
();

40 
DWORD
 
ch¨s
 = 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM


41 | 
FORMAT_MESSAGE_ALLOCATE_BUFFER
,

42 
NULL
,

43 
îr‹
,

45 (
LPVOID
)&
msgbuf
,

47 
NULL
);

48 i‡(
ch¨s
 != 0) {

50 i‡(
ch¨s
 >= 2

51 && 
msgbuf
[
ch¨s
 - 2] == '\r' && msgbuf[chars - 1] == '\n') {

52 
ch¨s
 -= 2;

53 
msgbuf
[
ch¨s
] = 0;

56 i‡(
ch¨s
 >  (
buf
) - 1) {

57 
ch¨s
 =  (
buf
) - 1;

58 
msgbuf
[
ch¨s
] = 0;

61 
	`wc°ombs
(
buf
, 
msgbuf
, 
ch¨s
 + 1);

62 
	`LoˇlFªe
(
msgbuf
);

65 
	`•rötf
(
buf
, "unknow¿wö32Éº‹ (%ld)", 
îr‹
);

68 
	`SëLa°Eº‹
(
œ°îr
);

69  
buf
;

70 
	}
}

75 
loˇl
 
	$gz_ª£t
(
°©e
)

76 
gz_°©ï
 
°©e
;

78 
°©e
->
x
.
have
 = 0;

79 i‡(
°©e
->
mode
 =
GZ_READ
) {

80 
°©e
->
eof
 = 0;

81 
°©e
->
∑°
 = 0;

82 
°©e
->
how
 = 
LOOK
;

84 
°©e
->
£ek
 = 0;

85 
	`gz_îr‹
(
°©e
, 
Z_OK
, 
NULL
);

86 
°©e
->
x
.
pos
 = 0;

87 
°©e
->
°rm
.
avaû_ö
 = 0;

88 
	}
}

91 
loˇl
 
gzFûe
 
	$gz_›í
(
∑th
, 
fd
, 
mode
)

92 c⁄° *
∑th
;

93 
fd
;

94 c⁄° *
mode
;

96 
gz_°©ï
 
°©e
;

97 
size_t
 
Àn
;

98 
oÊag
;

99 #ifde‡
O_CLOEXEC


100 
˛€xec
 = 0;

102 #ifde‡
O_EXCL


103 
ex˛usive
 = 0;

107 i‡(
∑th
 =
NULL
)

108  
NULL
;

111 
°©e
 = (
gz_°©ï
)
	`mÆloc
((
gz_°©e
));

112 i‡(
°©e
 =
NULL
)

113  
NULL
;

114 
°©e
->
size
 = 0;

115 
°©e
->
w™t
 = 
GZBUFSIZE
;

116 
°©e
->
msg
 = 
NULL
;

119 
°©e
->
mode
 = 
GZ_NONE
;

120 
°©e
->
Àvñ
 = 
Z_DEFAULT_COMPRESSION
;

121 
°©e
->
°øãgy
 = 
Z_DEFAULT_STRATEGY
;

122 
°©e
->
dúe˘
 = 0;

123 *
mode
) {

124 i‡(*
mode
 >= '0' && *mode <= '9')

125 
°©e
->
Àvñ
 = *
mode
 - '0';

127 *
mode
) {

129 
°©e
->
mode
 = 
GZ_READ
;

131 #i‚de‡
NO_GZCOMPRESS


133 
°©e
->
mode
 = 
GZ_WRITE
;

136 
°©e
->
mode
 = 
GZ_APPEND
;

140 
	`‰ì
(
°©e
);

141  
NULL
;

144 #ifde‡
O_CLOEXEC


146 
˛€xec
 = 1;

149 #ifde‡
O_EXCL


151 
ex˛usive
 = 1;

155 
°©e
->
°øãgy
 = 
Z_FILTERED
;

158 
°©e
->
°øãgy
 = 
Z_HUFFMAN_ONLY
;

161 
°©e
->
°øãgy
 = 
Z_RLE
;

164 
°©e
->
°øãgy
 = 
Z_FIXED
;

167 
°©e
->
dúe˘
 = 1;

172 
mode
++;

176 i‡(
°©e
->
mode
 =
GZ_NONE
) {

177 
	`‰ì
(
°©e
);

178  
NULL
;

182 i‡(
°©e
->
mode
 =
GZ_READ
) {

183 i‡(
°©e
->
dúe˘
) {

184 
	`‰ì
(
°©e
);

185  
NULL
;

187 
°©e
->
dúe˘
 = 1;

191 #ifde‡
_WIN32


192 i‡(
fd
 == -2) {

193 
Àn
 = 
	`wc°ombs
(
NULL
, 
∑th
, 0);

194 i‡(
Àn
 =(
size_t
)-1)

195 
Àn
 = 0;

199 
Àn
 = 
	`°æí
((c⁄° *)
∑th
);

200 
°©e
->
∑th
 = (*)
	`mÆloc
(
Àn
 + 1);

201 i‡(
°©e
->
∑th
 =
NULL
) {

202 
	`‰ì
(
°©e
);

203  
NULL
;

205 #ifde‡
_WIN32


206 i‡(
fd
 == -2)

207 i‡(
Àn
)

208 
	`wc°ombs
(
°©e
->
∑th
,Ö©h, 
Àn
 + 1);

210 *(
°©e
->
∑th
) = 0;

213 #i‡!
	`deföed
(
NO_¢¥ötf
Ë&& !deföed(
NO_v¢¥ötf
)

214 
	`¢¥ötf
(
°©e
->
∑th
, 
Àn
 + 1, "%s", (const *)path);

216 
	`°r˝y
(
°©e
->
∑th
,Öath);

220 
oÊag
 =

221 #ifde‡
O_LARGEFILE


222 
O_LARGEFILE
 |

224 #ifde‡
O_BINARY


225 
O_BINARY
 |

227 #ifde‡
O_CLOEXEC


228 (
˛€xec
 ? 
O_CLOEXEC
 : 0) |

230 (
°©e
->
mode
 =
GZ_READ
 ?

231 
O_RDONLY
 :

232 (
O_WRONLY
 | 
O_CREAT
 |

233 #ifde‡
O_EXCL


234 (
ex˛usive
 ? 
O_EXCL
 : 0) |

236 (
°©e
->
mode
 =
GZ_WRITE
 ?

237 
O_TRUNC
 :

238 
O_APPEND
)));

241 
°©e
->
fd
 = fd > -1 ? fd : (

242 #ifde‡
_WIN32


243 
fd
 =-2 ? 
	`_w›í
(
∑th
, 
oÊag
, 0666) :

245 
	`›í
((c⁄° *)
∑th
, 
oÊag
, 0666));

246 i‡(
°©e
->
fd
 == -1) {

247 
	`‰ì
(
°©e
->
∑th
);

248 
	`‰ì
(
°©e
);

249  
NULL
;

251 i‡(
°©e
->
mode
 =
GZ_APPEND
)

252 
°©e
->
mode
 = 
GZ_WRITE
;

255 i‡(
°©e
->
mode
 =
GZ_READ
) {

256 
°©e
->
°¨t
 = 
	`LSEEK
(°©e->
fd
, 0, 
SEEK_CUR
);

257 i‡(
°©e
->
°¨t
 == -1) state->start = 0;

261 
	`gz_ª£t
(
°©e
);

264  (
gzFûe
)
°©e
;

265 
	}
}

268 
gzFûe
 
ZEXPORT
 
	$gz›í
(
∑th
, 
mode
)

269 c⁄° *
∑th
;

270 c⁄° *
mode
;

272  
	`gz_›í
(
∑th
, -1, 
mode
);

273 
	}
}

276 
gzFûe
 
ZEXPORT
 
	$gz›í64
(
∑th
, 
mode
)

277 c⁄° *
∑th
;

278 c⁄° *
mode
;

280  
	`gz_›í
(
∑th
, -1, 
mode
);

281 
	}
}

284 
gzFûe
 
ZEXPORT
 
	$gzd›í
(
fd
, 
mode
)

285 
fd
;

286 c⁄° *
mode
;

288 *
∑th
;

289 
gzFûe
 
gz
;

291 i‡(
fd
 =-1 || (
∑th
 = (*)
	`mÆloc
(7 + 3 * ())Ë=
NULL
)

292  
NULL
;

293 #i‡!
	`deföed
(
NO_¢¥ötf
Ë&& !deföed(
NO_v¢¥ötf
)

294 
	`¢¥ötf
(
∑th
, 7 + 3 * (), "<fd:%d>", 
fd
);

296 
	`•rötf
(
∑th
, "<fd:%d>", 
fd
);

298 
gz
 = 
	`gz_›í
(
∑th
, 
fd
, 
mode
);

299 
	`‰ì
(
∑th
);

300  
gz
;

301 
	}
}

304 #ifde‡
_WIN32


305 
gzFûe
 
ZEXPORT
 
	$gz›í_w
(
∑th
, 
mode
)

306 c⁄° 
wch¨_t
 *
∑th
;

307 c⁄° *
mode
;

309  
	`gz_›í
(
∑th
, -2, 
mode
);

310 
	}
}

314 
ZEXPORT
 
	$gzbuf„r
(
fûe
, 
size
)

315 
gzFûe
 
fûe
;

316 
size
;

318 
gz_°©ï
 
°©e
;

321 i‡(
fûe
 =
NULL
)

323 
°©e
 = (
gz_°©ï
)
fûe
;

324 i‡(
°©e
->
mode
 !
GZ_READ
 && sèã->modê!
GZ_WRITE
)

328 i‡(
°©e
->
size
 != 0)

332 i‡(
size
 < 2)

333 
size
 = 2;

334 
°©e
->
w™t
 = 
size
;

336 
	}
}

339 
ZEXPORT
 
	$gzªwöd
(
fûe
)

340 
gzFûe
 
fûe
;

342 
gz_°©ï
 
°©e
;

345 i‡(
fûe
 =
NULL
)

347 
°©e
 = (
gz_°©ï
)
fûe
;

350 i‡(
°©e
->
mode
 !
GZ_READ
 ||

351 (
°©e
->
îr
 !
Z_OK
 && sèã->î∏!
Z_BUF_ERROR
))

355 i‡(
	`LSEEK
(
°©e
->
fd
, sèã->
°¨t
, 
SEEK_SET
) == -1)

357 
	`gz_ª£t
(
°©e
);

359 
	}
}

362 
z_off64_t
 
ZEXPORT
 
	$gz£ek64
(
fûe
, 
off£t
, 
whí˚
)

363 
gzFûe
 
fûe
;

364 
z_off64_t
 
off£t
;

365 
whí˚
;

367 
n
;

368 
z_off64_t
 
ªt
;

369 
gz_°©ï
 
°©e
;

372 i‡(
fûe
 =
NULL
)

374 
°©e
 = (
gz_°©ï
)
fûe
;

375 i‡(
°©e
->
mode
 !
GZ_READ
 && sèã->modê!
GZ_WRITE
)

379 i‡(
°©e
->
îr
 !
Z_OK
 && sèã->î∏!
Z_BUF_ERROR
)

383 i‡(
whí˚
 !
SEEK_SET
 && whí˚ !
SEEK_CUR
)

387 i‡(
whí˚
 =
SEEK_SET
)

388 
off£t
 -
°©e
->
x
.
pos
;

389 i‡(
°©e
->
£ek
)

390 
off£t
 +
°©e
->
skù
;

391 
°©e
->
£ek
 = 0;

394 i‡(
°©e
->
mode
 =
GZ_READ
 && sèã->
how
 =
COPY
 &&

395 
°©e
->
x
.
pos
 + 
off£t
 >= 0) {

396 
ªt
 = 
	`LSEEK
(
°©e
->
fd
, 
off£t
 - sèã->
x
.
have
, 
SEEK_CUR
);

397 i‡(
ªt
 == -1)

399 
°©e
->
x
.
have
 = 0;

400 
°©e
->
eof
 = 0;

401 
°©e
->
∑°
 = 0;

402 
°©e
->
£ek
 = 0;

403 
	`gz_îr‹
(
°©e
, 
Z_OK
, 
NULL
);

404 
°©e
->
°rm
.
avaû_ö
 = 0;

405 
°©e
->
x
.
pos
 +
off£t
;

406  
°©e
->
x
.
pos
;

410 i‡(
off£t
 < 0) {

411 i‡(
°©e
->
mode
 !
GZ_READ
)

413 
off£t
 +
°©e
->
x
.
pos
;

414 i‡(
off£t
 < 0)

416 i‡(
	`gzªwöd
(
fûe
) == -1)

421 i‡(
°©e
->
mode
 =
GZ_READ
) {

422 
n
 = 
	`GT_OFF
(
°©e
->
x
.
have
Ë|| (
z_off64_t
)°©e->x.havê> 
off£t
 ?

423 ()
off£t
 : 
°©e
->
x
.
have
;

424 
°©e
->
x
.
have
 -
n
;

425 
°©e
->
x
.
√xt
 +
n
;

426 
°©e
->
x
.
pos
 +
n
;

427 
off£t
 -
n
;

431 i‡(
off£t
) {

432 
°©e
->
£ek
 = 1;

433 
°©e
->
skù
 = 
off£t
;

435  
°©e
->
x
.
pos
 + 
off£t
;

436 
	}
}

439 
z_off_t
 
ZEXPORT
 
	$gz£ek
(
fûe
, 
off£t
, 
whí˚
)

440 
gzFûe
 
fûe
;

441 
z_off_t
 
off£t
;

442 
whí˚
;

444 
z_off64_t
 
ªt
;

446 
ªt
 = 
	`gz£ek64
(
fûe
, (
z_off64_t
)
off£t
, 
whí˚
);

447  
ªt
 =(
z_off_t
)ret ? (z_off_t)ret : -1;

448 
	}
}

451 
z_off64_t
 
ZEXPORT
 
	$gzãŒ64
(
fûe
)

452 
gzFûe
 
fûe
;

454 
gz_°©ï
 
°©e
;

457 i‡(
fûe
 =
NULL
)

459 
°©e
 = (
gz_°©ï
)
fûe
;

460 i‡(
°©e
->
mode
 !
GZ_READ
 && sèã->modê!
GZ_WRITE
)

464  
°©e
->
x
.
pos
 + (°©e->
£ek
 ? sèã->
skù
 : 0);

465 
	}
}

468 
z_off_t
 
ZEXPORT
 
	$gzãŒ
(
fûe
)

469 
gzFûe
 
fûe
;

471 
z_off64_t
 
ªt
;

473 
ªt
 = 
	`gzãŒ64
(
fûe
);

474  
ªt
 =(
z_off_t
)ret ? (z_off_t)ret : -1;

475 
	}
}

478 
z_off64_t
 
ZEXPORT
 
	$gzoff£t64
(
fûe
)

479 
gzFûe
 
fûe
;

481 
z_off64_t
 
off£t
;

482 
gz_°©ï
 
°©e
;

485 i‡(
fûe
 =
NULL
)

487 
°©e
 = (
gz_°©ï
)
fûe
;

488 i‡(
°©e
->
mode
 !
GZ_READ
 && sèã->modê!
GZ_WRITE
)

492 
off£t
 = 
	`LSEEK
(
°©e
->
fd
, 0, 
SEEK_CUR
);

493 i‡(
off£t
 == -1)

495 i‡(
°©e
->
mode
 =
GZ_READ
)

496 
off£t
 -
°©e
->
°rm
.
avaû_ö
;

497  
off£t
;

498 
	}
}

501 
z_off_t
 
ZEXPORT
 
	$gzoff£t
(
fûe
)

502 
gzFûe
 
fûe
;

504 
z_off64_t
 
ªt
;

506 
ªt
 = 
	`gzoff£t64
(
fûe
);

507  
ªt
 =(
z_off_t
)ret ? (z_off_t)ret : -1;

508 
	}
}

511 
ZEXPORT
 
	$gzeof
(
fûe
)

512 
gzFûe
 
fûe
;

514 
gz_°©ï
 
°©e
;

517 i‡(
fûe
 =
NULL
)

519 
°©e
 = (
gz_°©ï
)
fûe
;

520 i‡(
°©e
->
mode
 !
GZ_READ
 && sèã->modê!
GZ_WRITE
)

524  
°©e
->
mode
 =
GZ_READ
 ? sèã->
∑°
 : 0;

525 
	}
}

528 c⁄° * 
ZEXPORT
 
	$gzîr‹
(
fûe
, 
î∫um
)

529 
gzFûe
 
fûe
;

530 *
î∫um
;

532 
gz_°©ï
 
°©e
;

535 i‡(
fûe
 =
NULL
)

536  
NULL
;

537 
°©e
 = (
gz_°©ï
)
fûe
;

538 i‡(
°©e
->
mode
 !
GZ_READ
 && sèã->modê!
GZ_WRITE
)

539  
NULL
;

542 i‡(
î∫um
 !
NULL
)

543 *
î∫um
 = 
°©e
->
îr
;

544  
°©e
->
îr
 =
Z_MEM_ERROR
 ? "out of memory" :

545 (
°©e
->
msg
 =
NULL
 ? "" : state->msg);

546 
	}
}

549 
ZEXPORT
 
	$gz˛óªº
(
fûe
)

550 
gzFûe
 
fûe
;

552 
gz_°©ï
 
°©e
;

555 i‡(
fûe
 =
NULL
)

557 
°©e
 = (
gz_°©ï
)
fûe
;

558 i‡(
°©e
->
mode
 !
GZ_READ
 && sèã->modê!
GZ_WRITE
)

562 i‡(
°©e
->
mode
 =
GZ_READ
) {

563 
°©e
->
eof
 = 0;

564 
°©e
->
∑°
 = 0;

566 
	`gz_îr‹
(
°©e
, 
Z_OK
, 
NULL
);

567 
	}
}

575 
ZLIB_INTERNAL
 
	$gz_îr‹
(
°©e
, 
îr
, 
msg
)

576 
gz_°©ï
 
°©e
;

577 
îr
;

578 c⁄° *
msg
;

581 i‡(
°©e
->
msg
 !
NULL
) {

582 i‡(
°©e
->
îr
 !
Z_MEM_ERROR
)

583 
	`‰ì
(
°©e
->
msg
);

584 
°©e
->
msg
 = 
NULL
;

588 i‡(
îr
 !
Z_OK
 &&Éº !
Z_BUF_ERROR
)

589 
°©e
->
x
.
have
 = 0;

592 
°©e
->
îr
 =Érr;

593 i‡(
msg
 =
NULL
)

597 i‡(
îr
 =
Z_MEM_ERROR
)

601 i‡((
°©e
->
msg
 = (*)
	`mÆloc
(
	`°æí
(°©e->
∑th
) + strlen(msg) + 3)) ==

602 
NULL
) {

603 
°©e
->
îr
 = 
Z_MEM_ERROR
;

606 #i‡!
	`deföed
(
NO_¢¥ötf
Ë&& !deföed(
NO_v¢¥ötf
)

607 
	`¢¥ötf
(
°©e
->
msg
, 
	`°æí
(°©e->
∑th
) + strlen(msg) + 3,

608 "%s%s%s", 
°©e
->
∑th
, ": ", 
msg
);

610 
	`°r˝y
(
°©e
->
msg
, sèã->
∑th
);

611 
	`°rˇt
(
°©e
->
msg
, ": ");

612 
	`°rˇt
(
°©e
->
msg
, msg);

615 
	}
}

617 #i‚de‡
INT_MAX


622 
ZLIB_INTERNAL
 
	$gz_ötmax
()

624 
p
, 
q
;

626 
p
 = 1;

628 
q
 = 
p
;

629 
p
 <<= 1;

630 
p
++;

631 } 
p
 > 
q
);

632  
q
 >> 1;

633 
	}
}

	@zlib-1.2.8/gzread.c

6 
	~"gzguts.h
"

9 
loˇl
 
gz_lﬂd
 
OF
((
gz_°©ï
, *, , *));

10 
loˇl
 
gz_avaû
 
OF
((
gz_°©ï
));

11 
loˇl
 
gz_look
 
OF
((
gz_°©ï
));

12 
loˇl
 
gz_decomp
 
OF
((
gz_°©ï
));

13 
loˇl
 
gz_„tch
 
OF
((
gz_°©ï
));

14 
loˇl
 
gz_skù
 
OF
((
gz_°©ï
, 
z_off64_t
));

20 
loˇl
 
	$gz_lﬂd
(
°©e
, 
buf
, 
Àn
, 
have
)

21 
gz_°©ï
 
°©e
;

22 *
buf
;

23 
Àn
;

24 *
have
;

26 
ªt
;

28 *
have
 = 0;

30 
ªt
 = 
	`ªad
(
°©e
->
fd
, 
buf
 + *
have
, 
Àn
 - *have);

31 i‡(
ªt
 <= 0)

33 *
have
 +
ªt
;

34 } *
have
 < 
Àn
);

35 i‡(
ªt
 < 0) {

36 
	`gz_îr‹
(
°©e
, 
Z_ERRNO
, 
	`z°ªº‹
());

39 i‡(
ªt
 == 0)

40 
°©e
->
eof
 = 1;

42 
	}
}

51 
loˇl
 
	$gz_avaû
(
°©e
)

52 
gz_°©ï
 
°©e
;

54 
gŸ
;

55 
z_°ªamp
 
°rm
 = &(
°©e
->strm);

57 i‡(
°©e
->
îr
 !
Z_OK
 && sèã->î∏!
Z_BUF_ERROR
)

59 i‡(
°©e
->
eof
 == 0) {

60 i‡(
°rm
->
avaû_ö
) {

61 *
p
 = 
°©e
->
ö
;

62 c⁄° *
q
 = 
°rm
->
√xt_ö
;

63 
n
 = 
°rm
->
avaû_ö
;

65 *
p
++ = *
q
++;

66 } --
n
);

68 i‡(
	`gz_lﬂd
(
°©e
, sèã->
ö
 + 
°rm
->
avaû_ö
,

69 
°©e
->
size
 - 
°rm
->
avaû_ö
, &
gŸ
) == -1)

71 
°rm
->
avaû_ö
 +
gŸ
;

72 
°rm
->
√xt_ö
 = 
°©e
->
ö
;

75 
	}
}

86 
loˇl
 
	$gz_look
(
°©e
)

87 
gz_°©ï
 
°©e
;

89 
z_°ªamp
 
°rm
 = &(
°©e
->strm);

92 i‡(
°©e
->
size
 == 0) {

94 
°©e
->
ö
 = (*)
	`mÆloc
(°©e->
w™t
);

95 
°©e
->
out
 = (*)
	`mÆloc
(°©e->
w™t
 << 1);

96 i‡(
°©e
->
ö
 =
NULL
 || sèã->
out
 == NULL) {

97 i‡(
°©e
->
out
 !
NULL
)

98 
	`‰ì
(
°©e
->
out
);

99 i‡(
°©e
->
ö
 !
NULL
)

100 
	`‰ì
(
°©e
->
ö
);

101 
	`gz_îr‹
(
°©e
, 
Z_MEM_ERROR
, "out of memory");

104 
°©e
->
size
 = sèã->
w™t
;

107 
°©e
->
°rm
.
zÆloc
 = 
Z_NULL
;

108 
°©e
->
°rm
.
z‰ì
 = 
Z_NULL
;

109 
°©e
->
°rm
.
›aque
 = 
Z_NULL
;

110 
°©e
->
°rm
.
avaû_ö
 = 0;

111 
°©e
->
°rm
.
√xt_ö
 = 
Z_NULL
;

112 i‡(
	`öÊ©eInô2
(&(
°©e
->
°rm
), 15 + 16Ë!
Z_OK
) {

113 
	`‰ì
(
°©e
->
out
);

114 
	`‰ì
(
°©e
->
ö
);

115 
°©e
->
size
 = 0;

116 
	`gz_îr‹
(
°©e
, 
Z_MEM_ERROR
, "out of memory");

122 i‡(
°rm
->
avaû_ö
 < 2) {

123 i‡(
	`gz_avaû
(
°©e
) == -1)

125 i‡(
°rm
->
avaû_ö
 == 0)

136 i‡(
°rm
->
avaû_ö
 > 1 &&

137 
°rm
->
√xt_ö
[0] == 31 && strm->next_in[1] == 139) {

138 
	`öÊ©eRe£t
(
°rm
);

139 
°©e
->
how
 = 
GZIP
;

140 
°©e
->
dúe˘
 = 0;

146 i‡(
°©e
->
dúe˘
 == 0) {

147 
°rm
->
avaû_ö
 = 0;

148 
°©e
->
eof
 = 1;

149 
°©e
->
x
.
have
 = 0;

156 
°©e
->
x
.
√xt
 = sèã->
out
;

157 i‡(
°rm
->
avaû_ö
) {

158 
	`mem˝y
(
°©e
->
x
.
√xt
, 
°rm
->
√xt_ö
, såm->
avaû_ö
);

159 
°©e
->
x
.
have
 = 
°rm
->
avaû_ö
;

160 
°rm
->
avaû_ö
 = 0;

162 
°©e
->
how
 = 
COPY
;

163 
°©e
->
dúe˘
 = 1;

165 
	}
}

172 
loˇl
 
	$gz_decomp
(
°©e
)

173 
gz_°©ï
 
°©e
;

175 
ªt
 = 
Z_OK
;

176 
had
;

177 
z_°ªamp
 
°rm
 = &(
°©e
->strm);

180 
had
 = 
°rm
->
avaû_out
;

183 i‡(
°rm
->
avaû_ö
 =0 && 
	`gz_avaû
(
°©e
) == -1)

185 i‡(
°rm
->
avaû_ö
 == 0) {

186 
	`gz_îr‹
(
°©e
, 
Z_BUF_ERROR
, "unexpectedÉnd of file");

191 
ªt
 = 
	`öÊ©e
(
°rm
, 
Z_NO_FLUSH
);

192 i‡(
ªt
 =
Z_STREAM_ERROR
 ||Ñë =
Z_NEED_DICT
) {

193 
	`gz_îr‹
(
°©e
, 
Z_STREAM_ERROR
,

197 i‡(
ªt
 =
Z_MEM_ERROR
) {

198 
	`gz_îr‹
(
°©e
, 
Z_MEM_ERROR
, "out of memory");

201 i‡(
ªt
 =
Z_DATA_ERROR
) {

202 
	`gz_îr‹
(
°©e
, 
Z_DATA_ERROR
,

203 
°rm
->
msg
 =
NULL
 ? "compressed dataÉrror" : strm->msg);

206 } 
°rm
->
avaû_out
 && 
ªt
 !
Z_STREAM_END
);

209 
°©e
->
x
.
have
 = 
had
 - 
°rm
->
avaû_out
;

210 
°©e
->
x
.
√xt
 = 
°rm
->
√xt_out
 - sèã->x.
have
;

213 i‡(
ªt
 =
Z_STREAM_END
)

214 
°©e
->
how
 = 
LOOK
;

218 
	}
}

226 
loˇl
 
	$gz_„tch
(
°©e
)

227 
gz_°©ï
 
°©e
;

229 
z_°ªamp
 
°rm
 = &(
°©e
->strm);

232 
°©e
->
how
) {

233 
LOOK
:

234 i‡(
	`gz_look
(
°©e
) == -1)

236 i‡(
°©e
->
how
 =
LOOK
)

239 
COPY
:

240 i‡(
	`gz_lﬂd
(
°©e
, sèã->
out
, sèã->
size
 << 1, &(°©e->
x
.
have
))

243 
°©e
->
x
.
√xt
 = sèã->
out
;

245 
GZIP
:

246 
°rm
->
avaû_out
 = 
°©e
->
size
 << 1;

247 
°rm
->
√xt_out
 = 
°©e
->
out
;

248 i‡(
	`gz_decomp
(
°©e
) == -1)

251 } 
°©e
->
x
.
have
 =0 && (!°©e->
eof
 || 
°rm
->
avaû_ö
));

253 
	}
}

256 
loˇl
 
	$gz_skù
(
°©e
, 
Àn
)

257 
gz_°©ï
 
°©e
;

258 
z_off64_t
 
Àn
;

260 
n
;

263 
Àn
)

265 i‡(
°©e
->
x
.
have
) {

266 
n
 = 
	`GT_OFF
(
°©e
->
x
.
have
Ë|| (
z_off64_t
)°©e->x.havê> 
Àn
 ?

267 ()
Àn
 : 
°©e
->
x
.
have
;

268 
°©e
->
x
.
have
 -
n
;

269 
°©e
->
x
.
√xt
 +
n
;

270 
°©e
->
x
.
pos
 +
n
;

271 
Àn
 -
n
;

275 i‡(
°©e
->
eof
 && sèã->
°rm
.
avaû_ö
 == 0)

281 i‡(
	`gz_„tch
(
°©e
) == -1)

285 
	}
}

288 
ZEXPORT
 
	$gzªad
(
fûe
, 
buf
, 
Àn
)

289 
gzFûe
 
fûe
;

290 
voidp
 
buf
;

291 
Àn
;

293 
gŸ
, 
n
;

294 
gz_°©ï
 
°©e
;

295 
z_°ªamp
 
°rm
;

298 i‡(
fûe
 =
NULL
)

300 
°©e
 = (
gz_°©ï
)
fûe
;

301 
°rm
 = &(
°©e
->strm);

304 i‡(
°©e
->
mode
 !
GZ_READ
 ||

305 (
°©e
->
îr
 !
Z_OK
 && sèã->î∏!
Z_BUF_ERROR
))

310 i‡(()
Àn
 < 0) {

311 
	`gz_îr‹
(
°©e
, 
Z_DATA_ERROR
, "requestedÜength doesÇot fit in int");

316 i‡(
Àn
 == 0)

320 i‡(
°©e
->
£ek
) {

321 
°©e
->
£ek
 = 0;

322 i‡(
	`gz_skù
(
°©e
, sèã->
skù
) == -1)

327 
gŸ
 = 0;

330 i‡(
°©e
->
x
.
have
) {

331 
n
 = 
°©e
->
x
.
have
 > 
Àn
 ?Üen : state->x.have;

332 
	`mem˝y
(
buf
, 
°©e
->
x
.
√xt
, 
n
);

333 
°©e
->
x
.
√xt
 +
n
;

334 
°©e
->
x
.
have
 -
n
;

338 i‡(
°©e
->
eof
 && 
°rm
->
avaû_ö
 == 0) {

339 
°©e
->
∑°
 = 1;

345 i‡(
°©e
->
how
 =
LOOK
 || 
Àn
 < (°©e->
size
 << 1)) {

347 i‡(
	`gz_„tch
(
°©e
) == -1)

355 i‡(
°©e
->
how
 =
COPY
) {

356 i‡(
	`gz_lﬂd
(
°©e
, (*)
buf
, 
Àn
, &
n
) == -1)

362 
°rm
->
avaû_out
 = 
Àn
;

363 
°rm
->
√xt_out
 = (*)
buf
;

364 i‡(
	`gz_decomp
(
°©e
) == -1)

366 
n
 = 
°©e
->
x
.
have
;

367 
°©e
->
x
.
have
 = 0;

371 
Àn
 -
n
;

372 
buf
 = (*)bu‡+ 
n
;

373 
gŸ
 +
n
;

374 
°©e
->
x
.
pos
 +
n
;

375 } 
Àn
);

378  ()
gŸ
;

379 
	}
}

382 #ifde‡
Z_PREFIX_SET


383 #unde‡
z_gzgëc


385 #unde‡
gzgëc


387 
ZEXPORT
 
	$gzgëc
(
fûe
)

388 
gzFûe
 
fûe
;

390 
ªt
;

391 
buf
[1];

392 
gz_°©ï
 
°©e
;

395 i‡(
fûe
 =
NULL
)

397 
°©e
 = (
gz_°©ï
)
fûe
;

400 i‡(
°©e
->
mode
 !
GZ_READ
 ||

401 (
°©e
->
îr
 !
Z_OK
 && sèã->î∏!
Z_BUF_ERROR
))

405 i‡(
°©e
->
x
.
have
) {

406 
°©e
->
x
.
have
--;

407 
°©e
->
x
.
pos
++;

408  *(
°©e
->
x
.
√xt
)++;

412 
ªt
 = 
	`gzªad
(
fûe
, 
buf
, 1);

413  
ªt
 < 1 ? -1 : 
buf
[0];

414 
	}
}

416 
ZEXPORT
 
	$gzgëc_
(
fûe
)

417 
gzFûe
 
fûe
;

419  
	`gzgëc
(
fûe
);

420 
	}
}

423 
ZEXPORT
 
	$gzungëc
(
c
, 
fûe
)

424 
c
;

425 
gzFûe
 
fûe
;

427 
gz_°©ï
 
°©e
;

430 i‡(
fûe
 =
NULL
)

432 
°©e
 = (
gz_°©ï
)
fûe
;

435 i‡(
°©e
->
mode
 !
GZ_READ
 ||

436 (
°©e
->
îr
 !
Z_OK
 && sèã->î∏!
Z_BUF_ERROR
))

440 i‡(
°©e
->
£ek
) {

441 
°©e
->
£ek
 = 0;

442 i‡(
	`gz_skù
(
°©e
, sèã->
skù
) == -1)

447 i‡(
c
 < 0)

451 i‡(
°©e
->
x
.
have
 == 0) {

452 
°©e
->
x
.
have
 = 1;

453 
°©e
->
x
.
√xt
 = sèã->
out
 + (°©e->
size
 << 1) - 1;

454 
°©e
->
x
.
√xt
[0] = 
c
;

455 
°©e
->
x
.
pos
--;

456 
°©e
->
∑°
 = 0;

457  
c
;

461 i‡(
°©e
->
x
.
have
 =(°©e->
size
 << 1)) {

462 
	`gz_îr‹
(
°©e
, 
Z_DATA_ERROR
, "out ofÑoomÅoÖush characters");

467 i‡(
°©e
->
x
.
√xt
 =°©e->
out
) {

468 *
§c
 = 
°©e
->
out
 + sèã->
x
.
have
;

469 *
de°
 = 
°©e
->
out
 + (°©e->
size
 << 1);

470 
§c
 > 
°©e
->
out
)

471 *--
de°
 = *--
§c
;

472 
°©e
->
x
.
√xt
 = 
de°
;

474 
°©e
->
x
.
have
++;

475 
°©e
->
x
.
√xt
--;

476 
°©e
->
x
.
√xt
[0] = 
c
;

477 
°©e
->
x
.
pos
--;

478 
°©e
->
∑°
 = 0;

479  
c
;

480 
	}
}

483 * 
ZEXPORT
 
	$gzgës
(
fûe
, 
buf
, 
Àn
)

484 
gzFûe
 
fûe
;

485 *
buf
;

486 
Àn
;

488 
À·
, 
n
;

489 *
°r
;

490 *
eﬁ
;

491 
gz_°©ï
 
°©e
;

494 i‡(
fûe
 =
NULL
 || 
buf
 =NULL || 
Àn
 < 1)

495  
NULL
;

496 
°©e
 = (
gz_°©ï
)
fûe
;

499 i‡(
°©e
->
mode
 !
GZ_READ
 ||

500 (
°©e
->
îr
 !
Z_OK
 && sèã->î∏!
Z_BUF_ERROR
))

501  
NULL
;

504 i‡(
°©e
->
£ek
) {

505 
°©e
->
£ek
 = 0;

506 i‡(
	`gz_skù
(
°©e
, sèã->
skù
) == -1)

507  
NULL
;

513 
°r
 = 
buf
;

514 
À·
 = ()
Àn
 - 1;

515 i‡(
À·
) do {

517 i‡(
°©e
->
x
.
have
 =0 && 
	`gz_„tch
(state) == -1)

518  
NULL
;

519 i‡(
°©e
->
x
.
have
 == 0) {

520 
°©e
->
∑°
 = 1;

525 
n
 = 
°©e
->
x
.
have
 > 
À·
 ?Üeft : state->x.have;

526 
eﬁ
 = (*)
	`memchr
(
°©e
->
x
.
√xt
, '\n', 
n
);

527 i‡(
eﬁ
 !
NULL
)

528 
n
 = ()(
eﬁ
 - 
°©e
->
x
.
√xt
) + 1;

531 
	`mem˝y
(
buf
, 
°©e
->
x
.
√xt
, 
n
);

532 
°©e
->
x
.
have
 -
n
;

533 
°©e
->
x
.
√xt
 +
n
;

534 
°©e
->
x
.
pos
 +
n
;

535 
À·
 -
n
;

536 
buf
 +
n
;

537 } 
À·
 && 
eﬁ
 =
NULL
);

540 i‡(
buf
 =
°r
)

541  
NULL
;

542 
buf
[0] = 0;

543  
°r
;

544 
	}
}

547 
ZEXPORT
 
	$gzdúe˘
(
fûe
)

548 
gzFûe
 
fûe
;

550 
gz_°©ï
 
°©e
;

553 i‡(
fûe
 =
NULL
)

555 
°©e
 = (
gz_°©ï
)
fûe
;

559 i‡(
°©e
->
mode
 =
GZ_READ
 && sèã->
how
 =
LOOK
 && sèã->
x
.
have
 == 0)

560 ()
	`gz_look
(
°©e
);

563  
°©e
->
dúe˘
;

564 
	}
}

567 
ZEXPORT
 
	$gz˛o£_r
(
fûe
)

568 
gzFûe
 
fûe
;

570 
ªt
, 
îr
;

571 
gz_°©ï
 
°©e
;

574 i‡(
fûe
 =
NULL
)

575  
Z_STREAM_ERROR
;

576 
°©e
 = (
gz_°©ï
)
fûe
;

579 i‡(
°©e
->
mode
 !
GZ_READ
)

580  
Z_STREAM_ERROR
;

583 i‡(
°©e
->
size
) {

584 
	`öÊ©eEnd
(&(
°©e
->
°rm
));

585 
	`‰ì
(
°©e
->
out
);

586 
	`‰ì
(
°©e
->
ö
);

588 
îr
 = 
°©e
->î∏=
Z_BUF_ERROR
 ? Z_BUF_ERROR : 
Z_OK
;

589 
	`gz_îr‹
(
°©e
, 
Z_OK
, 
NULL
);

590 
	`‰ì
(
°©e
->
∑th
);

591 
ªt
 = 
	`˛o£
(
°©e
->
fd
);

592 
	`‰ì
(
°©e
);

593  
ªt
 ? 
Z_ERRNO
 : 
îr
;

594 
	}
}

	@zlib-1.2.8/gzwrite.c

6 
	~"gzguts.h
"

9 
loˇl
 
gz_öô
 
OF
((
gz_°©ï
));

10 
loˇl
 
gz_comp
 
OF
((
gz_°©ï
, ));

11 
loˇl
 
gz_zîo
 
OF
((
gz_°©ï
, 
z_off64_t
));

15 
loˇl
 
	$gz_öô
(
°©e
)

16 
gz_°©ï
 
°©e
;

18 
ªt
;

19 
z_°ªamp
 
°rm
 = &(
°©e
->strm);

22 
°©e
->
ö
 = (*)
	`mÆloc
(°©e->
w™t
);

23 i‡(
°©e
->
ö
 =
NULL
) {

24 
	`gz_îr‹
(
°©e
, 
Z_MEM_ERROR
, "out of memory");

29 i‡(!
°©e
->
dúe˘
) {

31 
°©e
->
out
 = (*)
	`mÆloc
(°©e->
w™t
);

32 i‡(
°©e
->
out
 =
NULL
) {

33 
	`‰ì
(
°©e
->
ö
);

34 
	`gz_îr‹
(
°©e
, 
Z_MEM_ERROR
, "out of memory");

39 
°rm
->
zÆloc
 = 
Z_NULL
;

40 
°rm
->
z‰ì
 = 
Z_NULL
;

41 
°rm
->
›aque
 = 
Z_NULL
;

42 
ªt
 = 
	`deÊ©eInô2
(
°rm
, 
°©e
->
Àvñ
, 
Z_DEFLATED
,

43 
MAX_WBITS
 + 16, 
DEF_MEM_LEVEL
, 
°©e
->
°øãgy
);

44 i‡(
ªt
 !
Z_OK
) {

45 
	`‰ì
(
°©e
->
out
);

46 
	`‰ì
(
°©e
->
ö
);

47 
	`gz_îr‹
(
°©e
, 
Z_MEM_ERROR
, "out of memory");

53 
°©e
->
size
 = sèã->
w™t
;

56 i‡(!
°©e
->
dúe˘
) {

57 
°rm
->
avaû_out
 = 
°©e
->
size
;

58 
°rm
->
√xt_out
 = 
°©e
->
out
;

59 
°©e
->
x
.
√xt
 = 
°rm
->
√xt_out
;

62 
	}
}

70 
loˇl
 
	$gz_comp
(
°©e
, 
Êush
)

71 
gz_°©ï
 
°©e
;

72 
Êush
;

74 
ªt
, 
gŸ
;

75 
have
;

76 
z_°ªamp
 
°rm
 = &(
°©e
->strm);

79 i‡(
°©e
->
size
 =0 && 
	`gz_öô
(state) == -1)

83 i‡(
°©e
->
dúe˘
) {

84 
gŸ
 = 
	`wrôe
(
°©e
->
fd
, 
°rm
->
√xt_ö
, såm->
avaû_ö
);

85 i‡(
gŸ
 < 0 || ()gŸ !
°rm
->
avaû_ö
) {

86 
	`gz_îr‹
(
°©e
, 
Z_ERRNO
, 
	`z°ªº‹
());

89 
°rm
->
avaû_ö
 = 0;

94 
ªt
 = 
Z_OK
;

98 i‡(
°rm
->
avaû_out
 =0 || (
Êush
 !
Z_NO_FLUSH
 &&

99 (
Êush
 !
Z_FINISH
 || 
ªt
 =
Z_STREAM_END
))) {

100 
have
 = ()(
°rm
->
√xt_out
 - 
°©e
->
x
.
√xt
);

101 i‡(
have
 && ((
gŸ
 = 
	`wrôe
(
°©e
->
fd
, sèã->
x
.
√xt
, have)) < 0 ||

102 ()
gŸ
 !
have
)) {

103 
	`gz_îr‹
(
°©e
, 
Z_ERRNO
, 
	`z°ªº‹
());

106 i‡(
°rm
->
avaû_out
 == 0) {

107 
°rm
->
avaû_out
 = 
°©e
->
size
;

108 
°rm
->
√xt_out
 = 
°©e
->
out
;

110 
°©e
->
x
.
√xt
 = 
°rm
->
√xt_out
;

114 
have
 = 
°rm
->
avaû_out
;

115 
ªt
 = 
	`deÊ©e
(
°rm
, 
Êush
);

116 i‡(
ªt
 =
Z_STREAM_ERROR
) {

117 
	`gz_îr‹
(
°©e
, 
Z_STREAM_ERROR
,

121 
have
 -
°rm
->
avaû_out
;

122 } 
have
);

125 i‡(
Êush
 =
Z_FINISH
)

126 
	`deÊ©eRe£t
(
°rm
);

130 
	}
}

133 
loˇl
 
	$gz_zîo
(
°©e
, 
Àn
)

134 
gz_°©ï
 
°©e
;

135 
z_off64_t
 
Àn
;

137 
fú°
;

138 
n
;

139 
z_°ªamp
 
°rm
 = &(
°©e
->strm);

142 i‡(
°rm
->
avaû_ö
 && 
	`gz_comp
(
°©e
, 
Z_NO_FLUSH
) == -1)

146 
fú°
 = 1;

147 
Àn
) {

148 
n
 = 
	`GT_OFF
(
°©e
->
size
Ë|| (
z_off64_t
)°©e->sizê> 
Àn
 ?

149 ()
Àn
 : 
°©e
->
size
;

150 i‡(
fú°
) {

151 
	`mem£t
(
°©e
->
ö
, 0, 
n
);

152 
fú°
 = 0;

154 
°rm
->
avaû_ö
 = 
n
;

155 
°rm
->
√xt_ö
 = 
°©e
->
ö
;

156 
°©e
->
x
.
pos
 +
n
;

157 i‡(
	`gz_comp
(
°©e
, 
Z_NO_FLUSH
) == -1)

159 
Àn
 -
n
;

162 
	}
}

165 
ZEXPORT
 
	$gzwrôe
(
fûe
, 
buf
, 
Àn
)

166 
gzFûe
 
fûe
;

167 
voidpc
 
buf
;

168 
Àn
;

170 
put
 = 
Àn
;

171 
gz_°©ï
 
°©e
;

172 
z_°ªamp
 
°rm
;

175 i‡(
fûe
 =
NULL
)

177 
°©e
 = (
gz_°©ï
)
fûe
;

178 
°rm
 = &(
°©e
->strm);

181 i‡(
°©e
->
mode
 !
GZ_WRITE
 || sèã->
îr
 !
Z_OK
)

186 i‡(()
Àn
 < 0) {

187 
	`gz_îr‹
(
°©e
, 
Z_DATA_ERROR
, "requestedÜength doesÇot fit in int");

192 i‡(
Àn
 == 0)

196 i‡(
°©e
->
size
 =0 && 
	`gz_öô
(state) == -1)

200 i‡(
°©e
->
£ek
) {

201 
°©e
->
£ek
 = 0;

202 i‡(
	`gz_zîo
(
°©e
, sèã->
skù
) == -1)

207 i‡(
Àn
 < 
°©e
->
size
) {

210 
have
, 
c›y
;

212 i‡(
°rm
->
avaû_ö
 == 0)

213 
°rm
->
√xt_ö
 = 
°©e
->
ö
;

214 
have
 = ()((
°rm
->
√xt_ö
 + såm->
avaû_ö
Ë- 
°©e
->
ö
);

215 
c›y
 = 
°©e
->
size
 - 
have
;

216 i‡(
c›y
 > 
Àn
)

217 
c›y
 = 
Àn
;

218 
	`mem˝y
(
°©e
->
ö
 + 
have
, 
buf
, 
c›y
);

219 
°rm
->
avaû_ö
 +
c›y
;

220 
°©e
->
x
.
pos
 +
c›y
;

221 
buf
 = (c⁄° *)bu‡+ 
c›y
;

222 
Àn
 -
c›y
;

223 i‡(
Àn
 && 
	`gz_comp
(
°©e
, 
Z_NO_FLUSH
) == -1)

225 } 
Àn
);

229 i‡(
°rm
->
avaû_ö
 && 
	`gz_comp
(
°©e
, 
Z_NO_FLUSH
) == -1)

233 
°rm
->
avaû_ö
 = 
Àn
;

234 
°rm
->
√xt_ö
 = (
z_c⁄°
 
Byãf
 *)
buf
;

235 
°©e
->
x
.
pos
 +
Àn
;

236 i‡(
	`gz_comp
(
°©e
, 
Z_NO_FLUSH
) == -1)

241  ()
put
;

242 
	}
}

245 
ZEXPORT
 
	$gzputc
(
fûe
, 
c
)

246 
gzFûe
 
fûe
;

247 
c
;

249 
have
;

250 
buf
[1];

251 
gz_°©ï
 
°©e
;

252 
z_°ªamp
 
°rm
;

255 i‡(
fûe
 =
NULL
)

257 
°©e
 = (
gz_°©ï
)
fûe
;

258 
°rm
 = &(
°©e
->strm);

261 i‡(
°©e
->
mode
 !
GZ_WRITE
 || sèã->
îr
 !
Z_OK
)

265 i‡(
°©e
->
£ek
) {

266 
°©e
->
£ek
 = 0;

267 i‡(
	`gz_zîo
(
°©e
, sèã->
skù
) == -1)

273 i‡(
°©e
->
size
) {

274 i‡(
°rm
->
avaû_ö
 == 0)

275 
°rm
->
√xt_ö
 = 
°©e
->
ö
;

276 
have
 = ()((
°rm
->
√xt_ö
 + såm->
avaû_ö
Ë- 
°©e
->
ö
);

277 i‡(
have
 < 
°©e
->
size
) {

278 
°©e
->
ö
[
have
] = 
c
;

279 
°rm
->
avaû_ö
++;

280 
°©e
->
x
.
pos
++;

281  
c
 & 0xff;

286 
buf
[0] = 
c
;

287 i‡(
	`gzwrôe
(
fûe
, 
buf
, 1) != 1)

289  
c
 & 0xff;

290 
	}
}

293 
ZEXPORT
 
	$gzputs
(
fûe
, 
°r
)

294 
gzFûe
 
fûe
;

295 c⁄° *
°r
;

297 
ªt
;

298 
Àn
;

301 
Àn
 = ()
	`°æí
(
°r
);

302 
ªt
 = 
	`gzwrôe
(
fûe
, 
°r
, 
Àn
);

303  
ªt
 =0 && 
Àn
 != 0 ? -1 :Ñet;

304 
	}
}

306 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

307 
	~<°d¨g.h
>

310 
ZEXPORTVA
 
	$gzv¥ötf
(
gzFûe
 
fûe
, c⁄° *
f‹m©
, 
va_li°
 
va
)

312 
size
, 
Àn
;

313 
gz_°©ï
 
°©e
;

314 
z_°ªamp
 
°rm
;

317 i‡(
fûe
 =
NULL
)

319 
°©e
 = (
gz_°©ï
)
fûe
;

320 
°rm
 = &(
°©e
->strm);

323 i‡(
°©e
->
mode
 !
GZ_WRITE
 || sèã->
îr
 !
Z_OK
)

327 i‡(
°©e
->
size
 =0 && 
	`gz_öô
(state) == -1)

331 i‡(
°©e
->
£ek
) {

332 
°©e
->
£ek
 = 0;

333 i‡(
	`gz_zîo
(
°©e
, sèã->
skù
) == -1)

338 i‡(
°rm
->
avaû_ö
 && 
	`gz_comp
(
°©e
, 
Z_NO_FLUSH
) == -1)

342 
size
 = ()(
°©e
->size);

343 
°©e
->
ö
[
size
 - 1] = 0;

344 #ifde‡
NO_v¢¥ötf


345 #ifde‡
HAS_v•rötf_void


346 ()
	`v•rötf
((*)(
°©e
->
ö
), 
f‹m©
, 
va
);

347 
Àn
 = 0;Üí < 
size
;Üen++)

348 i‡(
°©e
->
ö
[
Àn
] == 0) ;

350 
Àn
 = 
	`v•rötf
((*)(
°©e
->
ö
), 
f‹m©
, 
va
);

353 #ifde‡
HAS_v¢¥ötf_void


354 ()
	`v¢¥ötf
((*)(
°©e
->
ö
), 
size
, 
f‹m©
, 
va
);

355 
Àn
 = 
	`°æí
((*)(
°©e
->
ö
));

357 
Àn
 = 
	`v¢¥ötf
((*)(
°©e
->
ö
), 
size
, 
f‹m©
, 
va
);

362 i‡(
Àn
 <0 ||Üí >()
size
 || 
°©e
->
ö
[size - 1] != 0)

366 
°rm
->
avaû_ö
 = ()
Àn
;

367 
°rm
->
√xt_ö
 = 
°©e
->
ö
;

368 
°©e
->
x
.
pos
 +
Àn
;

369  
Àn
;

370 
	}
}

372 
ZEXPORTVA
 
	$gz¥ötf
(
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...)

374 
va_li°
 
va
;

375 
ªt
;

377 
	`va_°¨t
(
va
, 
f‹m©
);

378 
ªt
 = 
	`gzv¥ötf
(
fûe
, 
f‹m©
, 
va
);

379 
	`va_íd
(
va
);

380  
ªt
;

381 
	}
}

386 
ZEXPORTVA
 
	$gz¥ötf
 (
fûe
, 
f‹m©
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
, 
a7
, 
a8
, 
a9
, 
a10
,

387 
a11
, 
a12
, 
a13
, 
a14
, 
a15
, 
a16
, 
a17
, 
a18
, 
a19
, 
a20
)

388 
gzFûe
 
fûe
;

389 c⁄° *
f‹m©
;

390 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
, 
a7
, 
a8
, 
a9
, 
a10
,

391 
a11
, 
a12
, 
a13
, 
a14
, 
a15
, 
a16
, 
a17
, 
a18
, 
a19
, 
a20
;

393 
size
, 
Àn
;

394 
gz_°©ï
 
°©e
;

395 
z_°ªamp
 
°rm
;

398 i‡(
fûe
 =
NULL
)

400 
°©e
 = (
gz_°©ï
)
fûe
;

401 
°rm
 = &(
°©e
->strm);

408 i‡(
°©e
->
mode
 !
GZ_WRITE
 || sèã->
îr
 !
Z_OK
)

412 i‡(
°©e
->
size
 =0 && 
	`gz_öô
(state) == -1)

416 i‡(
°©e
->
£ek
) {

417 
°©e
->
£ek
 = 0;

418 i‡(
	`gz_zîo
(
°©e
, sèã->
skù
) == -1)

423 i‡(
°rm
->
avaû_ö
 && 
	`gz_comp
(
°©e
, 
Z_NO_FLUSH
) == -1)

427 
size
 = ()(
°©e
->size);

428 
°©e
->
ö
[
size
 - 1] = 0;

429 #ifde‡
NO_¢¥ötf


430 #ifde‡
HAS_•rötf_void


431 
	`•rötf
((*)(
°©e
->
ö
), 
f‹m©
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
, 
a7
, 
a8
,

432 
a9
, 
a10
, 
a11
, 
a12
, 
a13
, 
a14
, 
a15
, 
a16
, 
a17
, 
a18
, 
a19
, 
a20
);

433 
Àn
 = 0;Üí < 
size
;Üen++)

434 i‡(
°©e
->
ö
[
Àn
] == 0) ;

436 
Àn
 = 
	`•rötf
((*)(
°©e
->
ö
), 
f‹m©
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
, 
a7
, 
a8
,

437 
a9
, 
a10
, 
a11
, 
a12
, 
a13
, 
a14
, 
a15
, 
a16
, 
a17
, 
a18
, 
a19
, 
a20
);

440 #ifde‡
HAS_¢¥ötf_void


441 
	`¢¥ötf
((*)(
°©e
->
ö
), 
size
, 
f‹m©
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
, 
a7
, 
a8
,

442 
a9
, 
a10
, 
a11
, 
a12
, 
a13
, 
a14
, 
a15
, 
a16
, 
a17
, 
a18
, 
a19
, 
a20
);

443 
Àn
 = 
	`°æí
((*)(
°©e
->
ö
));

445 
Àn
 = 
	`¢¥ötf
((*)(
°©e
->
ö
), 
size
, 
f‹m©
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
, 
a6
,

446 
a7
, 
a8
, 
a9
, 
a10
, 
a11
, 
a12
, 
a13
, 
a14
, 
a15
, 
a16
, 
a17
, 
a18
,

447 
a19
, 
a20
);

452 i‡(
Àn
 <0 ||Üí >()
size
 || 
°©e
->
ö
[size - 1] != 0)

456 
°rm
->
avaû_ö
 = ()
Àn
;

457 
°rm
->
√xt_ö
 = 
°©e
->
ö
;

458 
°©e
->
x
.
pos
 +
Àn
;

459  
Àn
;

460 
	}
}

465 
ZEXPORT
 
	$gzÊush
(
fûe
, 
Êush
)

466 
gzFûe
 
fûe
;

467 
Êush
;

469 
gz_°©ï
 
°©e
;

472 i‡(
fûe
 =
NULL
)

474 
°©e
 = (
gz_°©ï
)
fûe
;

477 i‡(
°©e
->
mode
 !
GZ_WRITE
 || sèã->
îr
 !
Z_OK
)

478  
Z_STREAM_ERROR
;

481 i‡(
Êush
 < 0 || flush > 
Z_FINISH
)

482  
Z_STREAM_ERROR
;

485 i‡(
°©e
->
£ek
) {

486 
°©e
->
£ek
 = 0;

487 i‡(
	`gz_zîo
(
°©e
, sèã->
skù
) == -1)

492 
	`gz_comp
(
°©e
, 
Êush
);

493  
°©e
->
îr
;

494 
	}
}

497 
ZEXPORT
 
	$gz£ç¨ams
(
fûe
, 
Àvñ
, 
°øãgy
)

498 
gzFûe
 
fûe
;

499 
Àvñ
;

500 
°øãgy
;

502 
gz_°©ï
 
°©e
;

503 
z_°ªamp
 
°rm
;

506 i‡(
fûe
 =
NULL
)

507  
Z_STREAM_ERROR
;

508 
°©e
 = (
gz_°©ï
)
fûe
;

509 
°rm
 = &(
°©e
->strm);

512 i‡(
°©e
->
mode
 !
GZ_WRITE
 || sèã->
îr
 !
Z_OK
)

513  
Z_STREAM_ERROR
;

516 i‡(
Àvñ
 =
°©e
->Àvñ && 
°øãgy
 == state->strategy)

517  
Z_OK
;

520 i‡(
°©e
->
£ek
) {

521 
°©e
->
£ek
 = 0;

522 i‡(
	`gz_zîo
(
°©e
, sèã->
skù
) == -1)

527 i‡(
°©e
->
size
) {

529 i‡(
°rm
->
avaû_ö
 && 
	`gz_comp
(
°©e
, 
Z_PARTIAL_FLUSH
) == -1)

530  
°©e
->
îr
;

531 
	`deÊ©eP¨ams
(
°rm
, 
Àvñ
, 
°øãgy
);

533 
°©e
->
Àvñ
 =Üevel;

534 
°©e
->
°øãgy
 = strategy;

535  
Z_OK
;

536 
	}
}

539 
ZEXPORT
 
	$gz˛o£_w
(
fûe
)

540 
gzFûe
 
fûe
;

542 
ªt
 = 
Z_OK
;

543 
gz_°©ï
 
°©e
;

546 i‡(
fûe
 =
NULL
)

547  
Z_STREAM_ERROR
;

548 
°©e
 = (
gz_°©ï
)
fûe
;

551 i‡(
°©e
->
mode
 !
GZ_WRITE
)

552  
Z_STREAM_ERROR
;

555 i‡(
°©e
->
£ek
) {

556 
°©e
->
£ek
 = 0;

557 i‡(
	`gz_zîo
(
°©e
, sèã->
skù
) == -1)

558 
ªt
 = 
°©e
->
îr
;

562 i‡(
	`gz_comp
(
°©e
, 
Z_FINISH
) == -1)

563 
ªt
 = 
°©e
->
îr
;

564 i‡(
°©e
->
size
) {

565 i‡(!
°©e
->
dúe˘
) {

566 ()
	`deÊ©eEnd
(&(
°©e
->
°rm
));

567 
	`‰ì
(
°©e
->
out
);

569 
	`‰ì
(
°©e
->
ö
);

571 
	`gz_îr‹
(
°©e
, 
Z_OK
, 
NULL
);

572 
	`‰ì
(
°©e
->
∑th
);

573 i‡(
	`˛o£
(
°©e
->
fd
) == -1)

574 
ªt
 = 
Z_ERRNO
;

575 
	`‰ì
(
°©e
);

576  
ªt
;

577 
	}
}

	@zlib-1.2.8/infback.c

13 
	~"zutû.h
"

14 
	~"ö·ªes.h
"

15 
	~"öÊ©e.h
"

16 
	~"öfÁ°.h
"

19 
loˇl
 
fixedèbÀs
 
OF
((
öÊ©e_°©e
 
FAR
 *
°©e
));

28 
ZEXPORT
 
	$öÊ©eBackInô_
(
°rm
, 
wödowBôs
, 
wödow
, 
vîsi⁄
, 
°ªam_size
)

29 
z_°ªamp
 
°rm
;

30 
wödowBôs
;

31 
FAR
 *
wödow
;

32 c⁄° *
vîsi⁄
;

33 
°ªam_size
;

35 
öÊ©e_°©e
 
FAR
 *
°©e
;

37 i‡(
vîsi⁄
 =
Z_NULL
 || vîsi⁄[0] !
ZLIB_VERSION
[0] ||

38 
°ªam_size
 !()((
z_°ªam
)))

39  
Z_VERSION_ERROR
;

40 i‡(
°rm
 =
Z_NULL
 || 
wödow
 == Z_NULL ||

41 
wödowBôs
 < 8 || windowBits > 15)

42  
Z_STREAM_ERROR
;

43 
°rm
->
msg
 = 
Z_NULL
;

44 i‡(
°rm
->
zÆloc
 =(
Æloc_func
)0) {

45 #ifde‡
Z_SOLO


46  
Z_STREAM_ERROR
;

48 
°rm
->
zÆloc
 = 
zˇŒoc
;

49 
°rm
->
›aque
 = (
voidpf
)0;

52 i‡(
°rm
->
z‰ì
 =(
‰ì_func
)0)

53 #ifde‡
Z_SOLO


54  
Z_STREAM_ERROR
;

56 
°rm
->
z‰ì
 = 
zc‰ì
;

58 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
	`ZALLOC
(
°rm
, 1,

59 (
öÊ©e_°©e
));

60 i‡(
°©e
 =
Z_NULL
Ë 
Z_MEM_ERROR
;

61 
	`Tø˚v
((
°dîr
, "inflate:állocated\n"));

62 
°rm
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *)state;

63 
°©e
->
dmax
 = 32768U;

64 
°©e
->
wbôs
 = 
wödowBôs
;

65 
°©e
->
wsize
 = 1U << 
wödowBôs
;

66 
°©e
->
wödow
 = window;

67 
°©e
->
w√xt
 = 0;

68 
°©e
->
whave
 = 0;

69  
Z_OK
;

70 
	}
}

82 
loˇl
 
	$fixedèbÀs
(
°©e
)

83 
öÊ©e_°©e
 
FAR
 *
°©e
;

85 #ifde‡
BUILDFIXED


86 
vúgö
 = 1;

87 
code
 *
Ànfix
, *
di°fix
;

88 
code
 
fixed
[544];

91 i‡(
vúgö
) {

92 
sym
, 
bôs
;

93 
code
 *
√xt
;

96 
sym
 = 0;

97 
sym
 < 144Ë
°©e
->
Àns
[sym++] = 8;

98 
sym
 < 256Ë
°©e
->
Àns
[sym++] = 9;

99 
sym
 < 280Ë
°©e
->
Àns
[sym++] = 7;

100 
sym
 < 288Ë
°©e
->
Àns
[sym++] = 8;

101 
√xt
 = 
fixed
;

102 
Ànfix
 = 
√xt
;

103 
bôs
 = 9;

104 
	`öÊ©e_èbÀ
(
LENS
, 
°©e
->
Àns
, 288, &(
√xt
), &(
bôs
), sèã->
w‹k
);

107 
sym
 = 0;

108 
sym
 < 32Ë
°©e
->
Àns
[sym++] = 5;

109 
di°fix
 = 
√xt
;

110 
bôs
 = 5;

111 
	`öÊ©e_èbÀ
(
DISTS
, 
°©e
->
Àns
, 32, &(
√xt
), &(
bôs
), sèã->
w‹k
);

114 
vúgö
 = 0;

117 
	~"öffixed.h
"

119 
°©e
->
Àncode
 = 
Ànfix
;

120 
°©e
->
Ànbôs
 = 9;

121 
°©e
->
di°code
 = 
di°fix
;

122 
°©e
->
di°bôs
 = 5;

123 
	}
}

128 
	#LOAD
() \

130 
put
 = 
°rm
->
√xt_out
; \

131 
À·
 = 
°rm
->
avaû_out
; \

132 
√xt
 = 
°rm
->
√xt_ö
; \

133 
have
 = 
°rm
->
avaû_ö
; \

134 
hﬁd
 = 
°©e
->hold; \

135 
bôs
 = 
°©e
->bits; \

136 } 0)

	)

139 
	#RESTORE
() \

141 
°rm
->
√xt_out
 = 
put
; \

142 
°rm
->
avaû_out
 = 
À·
; \

143 
°rm
->
√xt_ö
 = 
√xt
; \

144 
°rm
->
avaû_ö
 = 
have
; \

145 
°©e
->
hﬁd
 = hold; \

146 
°©e
->
bôs
 = bits; \

147 } 0)

	)

150 
	#INITBITS
() \

152 
hﬁd
 = 0; \

153 
bôs
 = 0; \

154 } 0)

	)

158 
	#PULL
() \

160 i‡(
have
 == 0) { \

161 
have
 = 
	`ö
(
ö_desc
, &
√xt
); \

162 i‡(
have
 == 0) { \

163 
√xt
 = 
Z_NULL
; \

164 
ªt
 = 
Z_BUF_ERROR
; \

165 
öf_Àave
; \

168 } 0)

	)

172 
	#PULLBYTE
() \

174 
	`PULL
(); \

175 
have
--; \

176 
hﬁd
 +()(*
√xt
++Ë<< 
bôs
; \

177 
bôs
 += 8; \

178 } 0)

	)

183 
	#NEEDBITS
(
n
) \

185 
bôs
 < ()(
n
)) \

186 
	`PULLBYTE
(); \

187 } 0)

	)

190 
	#BITS
(
n
) \

191 (()
hﬁd
 & ((1U << (
n
)Ë- 1))

	)

194 
	#DROPBITS
(
n
) \

196 
hﬁd
 >>(
n
); \

197 
bôs
 -()(
n
); \

198 } 0)

	)

201 
	#BYTEBITS
() \

203 
hﬁd
 >>
bôs
 & 7; \

204 
bôs
 -= bits & 7; \

205 } 0)

	)

210 
	#ROOM
() \

212 i‡(
À·
 == 0) { \

213 
put
 = 
°©e
->
wödow
; \

214 
À·
 = 
°©e
->
wsize
; \

215 
°©e
->
whave
 = 
À·
; \

216 i‡(
	`out
(
out_desc
, 
put
, 
À·
)) { \

217 
ªt
 = 
Z_BUF_ERROR
; \

218 
öf_Àave
; \

221 } 0)

	)

250 
ZEXPORT
 
	$öÊ©eBack
(
°rm
, 
ö
, 
ö_desc
, 
out
, 
out_desc
)

251 
z_°ªamp
 
°rm
;

252 
ö_func
 
ö
;

253 
FAR
 *
ö_desc
;

254 
out_func
 
out
;

255 
FAR
 *
out_desc
;

257 
öÊ©e_°©e
 
FAR
 *
°©e
;

258 
z_c⁄°
 
FAR
 *
√xt
;

259 
FAR
 *
put
;

260 
have
, 
À·
;

261 
hﬁd
;

262 
bôs
;

263 
c›y
;

264 
FAR
 *
‰om
;

265 
code
 
hîe
;

266 
code
 
œ°
;

267 
Àn
;

268 
ªt
;

269 c⁄° 
‹dî
[19] =

273 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL)

274  
Z_STREAM_ERROR
;

275 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

278 
°rm
->
msg
 = 
Z_NULL
;

279 
°©e
->
mode
 = 
TYPE
;

280 
°©e
->
œ°
 = 0;

281 
°©e
->
whave
 = 0;

282 
√xt
 = 
°rm
->
√xt_ö
;

283 
have
 = 
√xt
 !
Z_NULL
 ? 
°rm
->
avaû_ö
 : 0;

284 
hﬁd
 = 0;

285 
bôs
 = 0;

286 
put
 = 
°©e
->
wödow
;

287 
À·
 = 
°©e
->
wsize
;

291 
°©e
->
mode
) {

292 
TYPE
:

294 i‡(
°©e
->
œ°
) {

295 
	`BYTEBITS
();

296 
°©e
->
mode
 = 
DONE
;

299 
	`NEEDBITS
(3);

300 
°©e
->
œ°
 = 
	`BITS
(1);

301 
	`DROPBITS
(1);

302 
	`BITS
(2)) {

304 
	`Tø˚v
((
°dîr
, "inflate: stored block%s\n",

305 
°©e
->
œ°
 ? " (last)" : ""));

306 
°©e
->
mode
 = 
STORED
;

309 
	`fixedèbÀs
(
°©e
);

310 
	`Tø˚v
((
°dîr
, "inflate: fixed codes block%s\n",

311 
°©e
->
œ°
 ? " (last)" : ""));

312 
°©e
->
mode
 = 
LEN
;

315 
	`Tø˚v
((
°dîr
, "inflate: dynamic codes block%s\n",

316 
°©e
->
œ°
 ? " (last)" : ""));

317 
°©e
->
mode
 = 
TABLE
;

320 
°rm
->
msg
 = (*)"invalid blockÅype";

321 
°©e
->
mode
 = 
BAD
;

323 
	`DROPBITS
(2);

326 
STORED
:

328 
	`BYTEBITS
();

329 
	`NEEDBITS
(32);

330 i‡((
hﬁd
 & 0xffff) != ((hold >> 16) ^ 0xffff)) {

331 
°rm
->
msg
 = (*)"invalid stored blockÜengths";

332 
°©e
->
mode
 = 
BAD
;

335 
°©e
->
Àngth
 = ()
hﬁd
 & 0xffff;

336 
	`Tø˚v
((
°dîr
, "inflate: storedÜength %u\n",

337 
°©e
->
Àngth
));

338 
	`INITBITS
();

341 
°©e
->
Àngth
 != 0) {

342 
c›y
 = 
°©e
->
Àngth
;

343 
	`PULL
();

344 
	`ROOM
();

345 i‡(
c›y
 > 
have
) copy = have;

346 i‡(
c›y
 > 
À·
) copy =Üeft;

347 
	`zmem˝y
(
put
, 
√xt
, 
c›y
);

348 
have
 -
c›y
;

349 
√xt
 +
c›y
;

350 
À·
 -
c›y
;

351 
put
 +
c›y
;

352 
°©e
->
Àngth
 -
c›y
;

354 
	`Tø˚v
((
°dîr
, "inflate: storedÉnd\n"));

355 
°©e
->
mode
 = 
TYPE
;

358 
TABLE
:

360 
	`NEEDBITS
(14);

361 
°©e
->
∆í
 = 
	`BITS
(5) + 257;

362 
	`DROPBITS
(5);

363 
°©e
->
ndi°
 = 
	`BITS
(5) + 1;

364 
	`DROPBITS
(5);

365 
°©e
->
ncode
 = 
	`BITS
(4) + 4;

366 
	`DROPBITS
(4);

367 #i‚de‡
PKZIP_BUG_WORKAROUND


368 i‡(
°©e
->
∆í
 > 286 || sèã->
ndi°
 > 30) {

369 
°rm
->
msg
 = (*)"too manyÜength or distance symbols";

370 
°©e
->
mode
 = 
BAD
;

374 
	`Tø˚v
((
°dîr
, "inflate:Åable sizes ok\n"));

377 
°©e
->
have
 = 0;

378 
°©e
->
have
 < sèã->
ncode
) {

379 
	`NEEDBITS
(3);

380 
°©e
->
Àns
[
‹dî
[°©e->
have
++]] = ()
	`BITS
(3);

381 
	`DROPBITS
(3);

383 
°©e
->
have
 < 19)

384 
°©e
->
Àns
[
‹dî
[°©e->
have
++]] = 0;

385 
°©e
->
√xt
 = sèã->
codes
;

386 
°©e
->
Àncode
 = (
code
 c⁄° 
FAR
 *)(°©e->
√xt
);

387 
°©e
->
Ànbôs
 = 7;

388 
ªt
 = 
	`öÊ©e_èbÀ
(
CODES
, 
°©e
->
Àns
, 19, &(°©e->
√xt
),

389 &(
°©e
->
Ànbôs
), sèã->
w‹k
);

390 i‡(
ªt
) {

391 
°rm
->
msg
 = (*)"invalid codeÜengths set";

392 
°©e
->
mode
 = 
BAD
;

395 
	`Tø˚v
((
°dîr
, "inflate: codeÜengths ok\n"));

398 
°©e
->
have
 = 0;

399 
°©e
->
have
 < sèã->
∆í
 + sèã->
ndi°
) {

401 
hîe
 = 
°©e
->
Àncode
[
	`BITS
(°©e->
Ànbôs
)];

402 i‡(()(
hîe
.
bôs
) <= bits) ;

403 
	`PULLBYTE
();

405 i‡(
hîe
.
vÆ
 < 16) {

406 
	`DROPBITS
(
hîe
.
bôs
);

407 
°©e
->
Àns
[°©e->
have
++] = 
hîe
.
vÆ
;

410 i‡(
hîe
.
vÆ
 == 16) {

411 
	`NEEDBITS
(
hîe
.
bôs
 + 2);

412 
	`DROPBITS
(
hîe
.
bôs
);

413 i‡(
°©e
->
have
 == 0) {

414 
°rm
->
msg
 = (*)"invalid bitÜengthÑepeat";

415 
°©e
->
mode
 = 
BAD
;

418 
Àn
 = ()(
°©e
->
Àns
[°©e->
have
 - 1]);

419 
c›y
 = 3 + 
	`BITS
(2);

420 
	`DROPBITS
(2);

422 i‡(
hîe
.
vÆ
 == 17) {

423 
	`NEEDBITS
(
hîe
.
bôs
 + 3);

424 
	`DROPBITS
(
hîe
.
bôs
);

425 
Àn
 = 0;

426 
c›y
 = 3 + 
	`BITS
(3);

427 
	`DROPBITS
(3);

430 
	`NEEDBITS
(
hîe
.
bôs
 + 7);

431 
	`DROPBITS
(
hîe
.
bôs
);

432 
Àn
 = 0;

433 
c›y
 = 11 + 
	`BITS
(7);

434 
	`DROPBITS
(7);

436 i‡(
°©e
->
have
 + 
c›y
 > sèã->
∆í
 + sèã->
ndi°
) {

437 
°rm
->
msg
 = (*)"invalid bitÜengthÑepeat";

438 
°©e
->
mode
 = 
BAD
;

441 
c›y
--)

442 
°©e
->
Àns
[°©e->
have
++] = ()
Àn
;

447 i‡(
°©e
->
mode
 =
BAD
) ;

450 i‡(
°©e
->
Àns
[256] == 0) {

451 
°rm
->
msg
 = (*)"invalid code -- missingÉnd-of-block";

452 
°©e
->
mode
 = 
BAD
;

459 
°©e
->
√xt
 = sèã->
codes
;

460 
°©e
->
Àncode
 = (
code
 c⁄° 
FAR
 *)(°©e->
√xt
);

461 
°©e
->
Ànbôs
 = 9;

462 
ªt
 = 
	`öÊ©e_èbÀ
(
LENS
, 
°©e
->
Àns
, sèã->
∆í
, &(°©e->
√xt
),

463 &(
°©e
->
Ànbôs
), sèã->
w‹k
);

464 i‡(
ªt
) {

465 
°rm
->
msg
 = (*)"invalidÜiteral/lengths set";

466 
°©e
->
mode
 = 
BAD
;

469 
°©e
->
di°code
 = (
code
 c⁄° 
FAR
 *)(°©e->
√xt
);

470 
°©e
->
di°bôs
 = 6;

471 
ªt
 = 
	`öÊ©e_èbÀ
(
DISTS
, 
°©e
->
Àns
 + sèã->
∆í
, sèã->
ndi°
,

472 &(
°©e
->
√xt
), &(°©e->
di°bôs
), sèã->
w‹k
);

473 i‡(
ªt
) {

474 
°rm
->
msg
 = (*)"invalid distances set";

475 
°©e
->
mode
 = 
BAD
;

478 
	`Tø˚v
((
°dîr
, "inflate: codes ok\n"));

479 
°©e
->
mode
 = 
LEN
;

481 
LEN
:

483 i‡(
have
 >6 && 
À·
 >= 258) {

484 
	`RESTORE
();

485 i‡(
°©e
->
whave
 < sèã->
wsize
)

486 
°©e
->
whave
 = sèã->
wsize
 - 
À·
;

487 
	`öÊ©e_Á°
(
°rm
, 
°©e
->
wsize
);

488 
	`LOAD
();

494 
hîe
 = 
°©e
->
Àncode
[
	`BITS
(°©e->
Ànbôs
)];

495 i‡(()(
hîe
.
bôs
) <= bits) ;

496 
	`PULLBYTE
();

498 i‡(
hîe
.
›
 && (here.op & 0xf0) == 0) {

499 
œ°
 = 
hîe
;

501 
hîe
 = 
°©e
->
Àncode
[
œ°
.
vÆ
 +

502 (
	`BITS
(
œ°
.
bôs
 +Üa°.
›
) >>Üast.bits)];

503 i‡(()(
œ°
.
bôs
 + 
hîe
.bits) <= bits) ;

504 
	`PULLBYTE
();

506 
	`DROPBITS
(
œ°
.
bôs
);

508 
	`DROPBITS
(
hîe
.
bôs
);

509 
°©e
->
Àngth
 = ()
hîe
.
vÆ
;

512 i‡(
hîe
.
›
 == 0) {

513 
	`Tø˚vv
((
°dîr
, 
hîe
.
vÆ
 >= 0x20 && here.val < 0x7f ?

515 "öÊ©e:ÜôîÆ 0x%02x\n", 
hîe
.
vÆ
));

516 
	`ROOM
();

517 *
put
++ = ()(
°©e
->
Àngth
);

518 
À·
--;

519 
°©e
->
mode
 = 
LEN
;

524 i‡(
hîe
.
›
 & 32) {

525 
	`Tø˚vv
((
°dîr
, "inflate:Énd of block\n"));

526 
°©e
->
mode
 = 
TYPE
;

531 i‡(
hîe
.
›
 & 64) {

532 
°rm
->
msg
 = (*)"invalidÜiteral/length code";

533 
°©e
->
mode
 = 
BAD
;

538 
°©e
->
exåa
 = ()(
hîe
.
›
) & 15;

539 i‡(
°©e
->
exåa
 != 0) {

540 
	`NEEDBITS
(
°©e
->
exåa
);

541 
°©e
->
Àngth
 +
	`BITS
(°©e->
exåa
);

542 
	`DROPBITS
(
°©e
->
exåa
);

544 
	`Tø˚vv
((
°dîr
, "öÊ©e:Üígth %u\n", 
°©e
->
Àngth
));

548 
hîe
 = 
°©e
->
di°code
[
	`BITS
(°©e->
di°bôs
)];

549 i‡(()(
hîe
.
bôs
) <= bits) ;

550 
	`PULLBYTE
();

552 i‡((
hîe
.
›
 & 0xf0) == 0) {

553 
œ°
 = 
hîe
;

555 
hîe
 = 
°©e
->
di°code
[
œ°
.
vÆ
 +

556 (
	`BITS
(
œ°
.
bôs
 +Üa°.
›
) >>Üast.bits)];

557 i‡(()(
œ°
.
bôs
 + 
hîe
.bits) <= bits) ;

558 
	`PULLBYTE
();

560 
	`DROPBITS
(
œ°
.
bôs
);

562 
	`DROPBITS
(
hîe
.
bôs
);

563 i‡(
hîe
.
›
 & 64) {

564 
°rm
->
msg
 = (*)"invalid distance code";

565 
°©e
->
mode
 = 
BAD
;

568 
°©e
->
off£t
 = ()
hîe
.
vÆ
;

571 
°©e
->
exåa
 = ()(
hîe
.
›
) & 15;

572 i‡(
°©e
->
exåa
 != 0) {

573 
	`NEEDBITS
(
°©e
->
exåa
);

574 
°©e
->
off£t
 +
	`BITS
(°©e->
exåa
);

575 
	`DROPBITS
(
°©e
->
exåa
);

577 i‡(
°©e
->
off£t
 > sèã->
wsize
 - (°©e->
whave
 < state->wsize ?

578 
À·
 : 0)) {

579 
°rm
->
msg
 = (*)"invalid distanceÅoo far back";

580 
°©e
->
mode
 = 
BAD
;

583 
	`Tø˚vv
((
°dîr
, "öÊ©e: di°™˚ %u\n", 
°©e
->
off£t
));

587 
	`ROOM
();

588 
c›y
 = 
°©e
->
wsize
 - sèã->
off£t
;

589 i‡(
c›y
 < 
À·
) {

590 
‰om
 = 
put
 + 
c›y
;

591 
c›y
 = 
À·
 - copy;

594 
‰om
 = 
put
 - 
°©e
->
off£t
;

595 
c›y
 = 
À·
;

597 i‡(
c›y
 > 
°©e
->
Àngth
) copy = state->length;

598 
°©e
->
Àngth
 -
c›y
;

599 
À·
 -
c›y
;

601 *
put
++ = *
‰om
++;

602 } --
c›y
);

603 } 
°©e
->
Àngth
 != 0);

606 
DONE
:

608 
ªt
 = 
Z_STREAM_END
;

609 i‡(
À·
 < 
°©e
->
wsize
) {

610 i‡(
	`out
(
out_desc
, 
°©e
->
wödow
, sèã->
wsize
 - 
À·
))

611 
ªt
 = 
Z_BUF_ERROR
;

613 
öf_Àave
;

615 
BAD
:

616 
ªt
 = 
Z_DATA_ERROR
;

617 
öf_Àave
;

620 
ªt
 = 
Z_STREAM_ERROR
;

621 
öf_Àave
;

625 
öf_Àave
:

626 
°rm
->
√xt_ö
 = 
√xt
;

627 
°rm
->
avaû_ö
 = 
have
;

628  
ªt
;

629 
	}
}

631 
ZEXPORT
 
	$öÊ©eBackEnd
(
°rm
)

632 
z_°ªamp
 
°rm
;

634 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULL || såm->
z‰ì
 =(
‰ì_func
)0)

635  
Z_STREAM_ERROR
;

636 
	`ZFREE
(
°rm
, såm->
°©e
);

637 
°rm
->
°©e
 = 
Z_NULL
;

638 
	`Tø˚v
((
°dîr
, "inflate:Énd\n"));

639  
Z_OK
;

640 
	}
}

	@zlib-1.2.8/inffast.c

6 
	~"zutû.h
"

7 
	~"ö·ªes.h
"

8 
	~"öÊ©e.h
"

9 
	~"öfÁ°.h
"

11 #i‚de‡
ASMINF


24 #ifde‡
POSTINC


25 
	#OFF
 0

	)

26 
	#PUP
(
a
Ë*◊)++

	)

28 
	#OFF
 1

	)

29 
	#PUP
(
a
Ë*++◊)

	)

67 
ZLIB_INTERNAL
 
	$öÊ©e_Á°
(
°rm
, 
°¨t
)

68 
z_°ªamp
 
°rm
;

69 
°¨t
;

71 
öÊ©e_°©e
 
FAR
 *
°©e
;

72 
z_c⁄°
 
FAR
 *
ö
;

73 
z_c⁄°
 
FAR
 *
œ°
;

74 
FAR
 *
out
;

75 
FAR
 *
beg
;

76 
FAR
 *
íd
;

77 #ifde‡
INFLATE_STRICT


78 
dmax
;

80 
wsize
;

81 
whave
;

82 
w√xt
;

83 
FAR
 *
wödow
;

84 
hﬁd
;

85 
bôs
;

86 
code
 c⁄° 
FAR
 *
lcode
;

87 
code
 c⁄° 
FAR
 *
dcode
;

88 
lmask
;

89 
dmask
;

90 
code
 
hîe
;

91 
›
;

93 
Àn
;

94 
di°
;

95 
FAR
 *
‰om
;

98 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

99 
ö
 = 
°rm
->
√xt_ö
 - 
OFF
;

100 
œ°
 = 
ö
 + (
°rm
->
avaû_ö
 - 5);

101 
out
 = 
°rm
->
√xt_out
 - 
OFF
;

102 
beg
 = 
out
 - (
°¨t
 - 
°rm
->
avaû_out
);

103 
íd
 = 
out
 + (
°rm
->
avaû_out
 - 257);

104 #ifde‡
INFLATE_STRICT


105 
dmax
 = 
°©e
->dmax;

107 
wsize
 = 
°©e
->wsize;

108 
whave
 = 
°©e
->whave;

109 
w√xt
 = 
°©e
->wnext;

110 
wödow
 = 
°©e
->window;

111 
hﬁd
 = 
°©e
->hold;

112 
bôs
 = 
°©e
->bits;

113 
lcode
 = 
°©e
->
Àncode
;

114 
dcode
 = 
°©e
->
di°code
;

115 
lmask
 = (1U << 
°©e
->
Ànbôs
) - 1;

116 
dmask
 = (1U << 
°©e
->
di°bôs
) - 1;

121 i‡(
bôs
 < 15) {

122 
hﬁd
 +()(
	`PUP
(
ö
)Ë<< 
bôs
;

123 
bôs
 += 8;

124 
hﬁd
 +()(
	`PUP
(
ö
)Ë<< 
bôs
;

125 
bôs
 += 8;

127 
hîe
 = 
lcode
[
hﬁd
 & 
lmask
];

128 
dﬁí
:

129 
›
 = ()(
hîe
.
bôs
);

130 
hﬁd
 >>
›
;

131 
bôs
 -
›
;

132 
›
 = ()(
hîe
.op);

133 i‡(
›
 == 0) {

134 
	`Tø˚vv
((
°dîr
, 
hîe
.
vÆ
 >= 0x20 && here.val < 0x7f ?

136 "öÊ©e:ÜôîÆ 0x%02x\n", 
hîe
.
vÆ
));

137 
	`PUP
(
out
Ë()(
hîe
.
vÆ
);

139 i‡(
›
 & 16) {

140 
Àn
 = ()(
hîe
.
vÆ
);

141 
›
 &= 15;

142 i‡(
›
) {

143 i‡(
bôs
 < 
›
) {

144 
hﬁd
 +()(
	`PUP
(
ö
)Ë<< 
bôs
;

145 
bôs
 += 8;

147 
Àn
 +()
hﬁd
 & ((1U << 
›
) - 1);

148 
hﬁd
 >>
›
;

149 
bôs
 -
›
;

151 
	`Tø˚vv
((
°dîr
, "öÊ©e:Üígth %u\n", 
Àn
));

152 i‡(
bôs
 < 15) {

153 
hﬁd
 +()(
	`PUP
(
ö
)Ë<< 
bôs
;

154 
bôs
 += 8;

155 
hﬁd
 +()(
	`PUP
(
ö
)Ë<< 
bôs
;

156 
bôs
 += 8;

158 
hîe
 = 
dcode
[
hﬁd
 & 
dmask
];

159 
dodi°
:

160 
›
 = ()(
hîe
.
bôs
);

161 
hﬁd
 >>
›
;

162 
bôs
 -
›
;

163 
›
 = ()(
hîe
.op);

164 i‡(
›
 & 16) {

165 
di°
 = ()(
hîe
.
vÆ
);

166 
›
 &= 15;

167 i‡(
bôs
 < 
›
) {

168 
hﬁd
 +()(
	`PUP
(
ö
)Ë<< 
bôs
;

169 
bôs
 += 8;

170 i‡(
bôs
 < 
›
) {

171 
hﬁd
 +()(
	`PUP
(
ö
)Ë<< 
bôs
;

172 
bôs
 += 8;

175 
di°
 +()
hﬁd
 & ((1U << 
›
) - 1);

176 #ifde‡
INFLATE_STRICT


177 i‡(
di°
 > 
dmax
) {

178 
°rm
->
msg
 = (*)"invalid distanceÅoo far back";

179 
°©e
->
mode
 = 
BAD
;

183 
hﬁd
 >>
›
;

184 
bôs
 -
›
;

185 
	`Tø˚vv
((
°dîr
, "öÊ©e: di°™˚ %u\n", 
di°
));

186 
›
 = ()(
out
 - 
beg
);

187 i‡(
di°
 > 
›
) {

188 
›
 = 
di°
 - op;

189 i‡(
›
 > 
whave
) {

190 i‡(
°©e
->
ß√
) {

191 
°rm
->
msg
 =

193 
°©e
->
mode
 = 
BAD
;

196 #ifde‡
INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR


197 i‡(
Àn
 <
›
 - 
whave
) {

199 
	`PUP
(
out
) = 0;

200 } --
Àn
);

203 
Àn
 -
›
 - 
whave
;

205 
	`PUP
(
out
) = 0;

206 } --
›
 > 
whave
);

207 i‡(
›
 == 0) {

208 
‰om
 = 
out
 - 
di°
;

210 
	`PUP
(
out
ËPUP(
‰om
);

211 } --
Àn
);

216 
‰om
 = 
wödow
 - 
OFF
;

217 i‡(
w√xt
 == 0) {

218 
‰om
 +
wsize
 - 
›
;

219 i‡(
›
 < 
Àn
) {

220 
Àn
 -
›
;

222 
	`PUP
(
out
ËPUP(
‰om
);

223 } --
›
);

224 
‰om
 = 
out
 - 
di°
;

227 i‡(
w√xt
 < 
›
) {

228 
‰om
 +
wsize
 + 
w√xt
 - 
›
;

229 
›
 -
w√xt
;

230 i‡(
›
 < 
Àn
) {

231 
Àn
 -
›
;

233 
	`PUP
(
out
ËPUP(
‰om
);

234 } --
›
);

235 
‰om
 = 
wödow
 - 
OFF
;

236 i‡(
w√xt
 < 
Àn
) {

237 
›
 = 
w√xt
;

238 
Àn
 -
›
;

240 
	`PUP
(
out
ËPUP(
‰om
);

241 } --
›
);

242 
‰om
 = 
out
 - 
di°
;

247 
‰om
 +
w√xt
 - 
›
;

248 i‡(
›
 < 
Àn
) {

249 
Àn
 -
›
;

251 
	`PUP
(
out
ËPUP(
‰om
);

252 } --
›
);

253 
‰om
 = 
out
 - 
di°
;

256 
Àn
 > 2) {

257 
	`PUP
(
out
ËPUP(
‰om
);

258 
	`PUP
(
out
ËPUP(
‰om
);

259 
	`PUP
(
out
ËPUP(
‰om
);

260 
Àn
 -= 3;

262 i‡(
Àn
) {

263 
	`PUP
(
out
ËPUP(
‰om
);

264 i‡(
Àn
 > 1)

265 
	`PUP
(
out
ËPUP(
‰om
);

269 
‰om
 = 
out
 - 
di°
;

271 
	`PUP
(
out
ËPUP(
‰om
);

272 
	`PUP
(
out
ËPUP(
‰om
);

273 
	`PUP
(
out
ËPUP(
‰om
);

274 
Àn
 -= 3;

275 } 
Àn
 > 2);

276 i‡(
Àn
) {

277 
	`PUP
(
out
ËPUP(
‰om
);

278 i‡(
Àn
 > 1)

279 
	`PUP
(
out
ËPUP(
‰om
);

283 i‡((
›
 & 64) == 0) {

284 
hîe
 = 
dcode
[hîe.
vÆ
 + (
hﬁd
 & ((1U << 
›
) - 1))];

285 
dodi°
;

288 
°rm
->
msg
 = (*)"invalid distance code";

289 
°©e
->
mode
 = 
BAD
;

293 i‡((
›
 & 64) == 0) {

294 
hîe
 = 
lcode
[hîe.
vÆ
 + (
hﬁd
 & ((1U << 
›
) - 1))];

295 
dﬁí
;

297 i‡(
›
 & 32) {

298 
	`Tø˚vv
((
°dîr
, "inflate:Énd of block\n"));

299 
°©e
->
mode
 = 
TYPE
;

303 
°rm
->
msg
 = (*)"invalidÜiteral/length code";

304 
°©e
->
mode
 = 
BAD
;

307 } 
ö
 < 
œ°
 && 
out
 < 
íd
);

310 
Àn
 = 
bôs
 >> 3;

311 
ö
 -
Àn
;

312 
bôs
 -
Àn
 << 3;

313 
hﬁd
 &(1U << 
bôs
) - 1;

316 
°rm
->
√xt_ö
 = 
ö
 + 
OFF
;

317 
°rm
->
√xt_out
 = 
out
 + 
OFF
;

318 
°rm
->
avaû_ö
 = ()(
ö
 < 
œ°
 ? 5 + (last - in) : 5 - (in -Üast));

319 
°rm
->
avaû_out
 = ()(
out
 < 
íd
 ?

320 257 + (
íd
 - 
out
) : 257 - (out -Énd));

321 
°©e
->
hﬁd
 = hold;

322 
°©e
->
bôs
 = bits;

324 
	}
}

	@zlib-1.2.8/inffast.h

11 
ZLIB_INTERNAL
 
öÊ©e_Á°
 
OF
((
z_°ªamp
 
°rm
, 
°¨t
));

	@zlib-1.2.8/inffixed.h

10 c⁄° 
code
 
	gÀnfix
[512] = {

87 c⁄° 
code
 
	gdi°fix
[32] = {

	@zlib-1.2.8/inflate.c

83 
	~"zutû.h
"

84 
	~"ö·ªes.h
"

85 
	~"öÊ©e.h
"

86 
	~"öfÁ°.h
"

88 #ifde‡
MAKEFIXED


89 #i‚de‡
BUILDFIXED


90 
	#BUILDFIXED


	)

95 
loˇl
 
fixedèbÀs
 
OF
((
öÊ©e_°©e
 
FAR
 *
°©e
));

96 
loˇl
 
upd©ewödow
 
OF
((
z_°ªamp
 
°rm
, c⁄° 
FAR
 *
íd
,

97 
c›y
));

98 #ifde‡
BUILDFIXED


99 
makefixed
 
OF
(());

101 
loˇl
 
sync£¨ch
 
OF
((
FAR
 *
have
, c⁄° FAR *
buf
,

102 
Àn
));

104 
ZEXPORT
 
	$öÊ©eRe£tKìp
(
°rm
)

105 
z_°ªamp
 
°rm
;

107 
öÊ©e_°©e
 
FAR
 *
°©e
;

109 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

110 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

111 
°rm
->
tŸÆ_ö
 = såm->
tŸÆ_out
 = 
°©e
->
tŸÆ
 = 0;

112 
°rm
->
msg
 = 
Z_NULL
;

113 i‡(
°©e
->
wøp
)

114 
°rm
->
adÀr
 = 
°©e
->
wøp
 & 1;

115 
°©e
->
mode
 = 
HEAD
;

116 
°©e
->
œ°
 = 0;

117 
°©e
->
havedi˘
 = 0;

118 
°©e
->
dmax
 = 32768U;

119 
°©e
->
hód
 = 
Z_NULL
;

120 
°©e
->
hﬁd
 = 0;

121 
°©e
->
bôs
 = 0;

122 
°©e
->
Àncode
 = sèã->
di°code
 = sèã->
√xt
 = sèã->
codes
;

123 
°©e
->
ß√
 = 1;

124 
°©e
->
back
 = -1;

125 
	`Tø˚v
((
°dîr
, "inflate:Ñeset\n"));

126  
Z_OK
;

127 
	}
}

129 
ZEXPORT
 
	$öÊ©eRe£t
(
°rm
)

130 
z_°ªamp
 
°rm
;

132 
öÊ©e_°©e
 
FAR
 *
°©e
;

134 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

135 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

136 
°©e
->
wsize
 = 0;

137 
°©e
->
whave
 = 0;

138 
°©e
->
w√xt
 = 0;

139  
	`öÊ©eRe£tKìp
(
°rm
);

140 
	}
}

142 
ZEXPORT
 
	$öÊ©eRe£t2
(
°rm
, 
wödowBôs
)

143 
z_°ªamp
 
°rm
;

144 
wödowBôs
;

146 
wøp
;

147 
öÊ©e_°©e
 
FAR
 *
°©e
;

150 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

151 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

154 i‡(
wödowBôs
 < 0) {

155 
wøp
 = 0;

156 
wödowBôs
 = -windowBits;

159 
wøp
 = (
wödowBôs
 >> 4) + 1;

160 #ifde‡
GUNZIP


161 i‡(
wödowBôs
 < 48)

162 
wödowBôs
 &= 15;

167 i‡(
wödowBôs
 && (windowBits < 8 || windowBits > 15))

168  
Z_STREAM_ERROR
;

169 i‡(
°©e
->
wödow
 !
Z_NULL
 && sèã->
wbôs
 !()
wödowBôs
) {

170 
	`ZFREE
(
°rm
, 
°©e
->
wödow
);

171 
°©e
->
wödow
 = 
Z_NULL
;

175 
°©e
->
wøp
 = wrap;

176 
°©e
->
wbôs
 = ()
wödowBôs
;

177  
	`öÊ©eRe£t
(
°rm
);

178 
	}
}

180 
ZEXPORT
 
	$öÊ©eInô2_
(
°rm
, 
wödowBôs
, 
vîsi⁄
, 
°ªam_size
)

181 
z_°ªamp
 
°rm
;

182 
wödowBôs
;

183 c⁄° *
vîsi⁄
;

184 
°ªam_size
;

186 
ªt
;

187 
öÊ©e_°©e
 
FAR
 *
°©e
;

189 i‡(
vîsi⁄
 =
Z_NULL
 || vîsi⁄[0] !
ZLIB_VERSION
[0] ||

190 
°ªam_size
 !()((
z_°ªam
)))

191  
Z_VERSION_ERROR
;

192 i‡(
°rm
 =
Z_NULL
Ë 
Z_STREAM_ERROR
;

193 
°rm
->
msg
 = 
Z_NULL
;

194 i‡(
°rm
->
zÆloc
 =(
Æloc_func
)0) {

195 #ifde‡
Z_SOLO


196  
Z_STREAM_ERROR
;

198 
°rm
->
zÆloc
 = 
zˇŒoc
;

199 
°rm
->
›aque
 = (
voidpf
)0;

202 i‡(
°rm
->
z‰ì
 =(
‰ì_func
)0)

203 #ifde‡
Z_SOLO


204  
Z_STREAM_ERROR
;

206 
°rm
->
z‰ì
 = 
zc‰ì
;

208 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)

209 
	`ZALLOC
(
°rm
, 1, (
öÊ©e_°©e
));

210 i‡(
°©e
 =
Z_NULL
Ë 
Z_MEM_ERROR
;

211 
	`Tø˚v
((
°dîr
, "inflate:állocated\n"));

212 
°rm
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *)state;

213 
°©e
->
wödow
 = 
Z_NULL
;

214 
ªt
 = 
	`öÊ©eRe£t2
(
°rm
, 
wödowBôs
);

215 i‡(
ªt
 !
Z_OK
) {

216 
	`ZFREE
(
°rm
, 
°©e
);

217 
°rm
->
°©e
 = 
Z_NULL
;

219  
ªt
;

220 
	}
}

222 
ZEXPORT
 
	$öÊ©eInô_
(
°rm
, 
vîsi⁄
, 
°ªam_size
)

223 
z_°ªamp
 
°rm
;

224 c⁄° *
vîsi⁄
;

225 
°ªam_size
;

227  
	`öÊ©eInô2_
(
°rm
, 
DEF_WBITS
, 
vîsi⁄
, 
°ªam_size
);

228 
	}
}

230 
ZEXPORT
 
	$öÊ©ePrime
(
°rm
, 
bôs
, 
vÆue
)

231 
z_°ªamp
 
°rm
;

232 
bôs
;

233 
vÆue
;

235 
öÊ©e_°©e
 
FAR
 *
°©e
;

237 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

238 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

239 i‡(
bôs
 < 0) {

240 
°©e
->
hﬁd
 = 0;

241 
°©e
->
bôs
 = 0;

242  
Z_OK
;

244 i‡(
bôs
 > 16 || 
°©e
->bô†+ bô†> 32Ë 
Z_STREAM_ERROR
;

245 
vÆue
 &(1L << 
bôs
) - 1;

246 
°©e
->
hﬁd
 +
vÆue
 << sèã->
bôs
;

247 
°©e
->
bôs
 += bits;

248  
Z_OK
;

249 
	}
}

261 
loˇl
 
	$fixedèbÀs
(
°©e
)

262 
öÊ©e_°©e
 
FAR
 *
°©e
;

264 #ifde‡
BUILDFIXED


265 
vúgö
 = 1;

266 
code
 *
Ànfix
, *
di°fix
;

267 
code
 
fixed
[544];

270 i‡(
vúgö
) {

271 
sym
, 
bôs
;

272 
code
 *
√xt
;

275 
sym
 = 0;

276 
sym
 < 144Ë
°©e
->
Àns
[sym++] = 8;

277 
sym
 < 256Ë
°©e
->
Àns
[sym++] = 9;

278 
sym
 < 280Ë
°©e
->
Àns
[sym++] = 7;

279 
sym
 < 288Ë
°©e
->
Àns
[sym++] = 8;

280 
√xt
 = 
fixed
;

281 
Ànfix
 = 
√xt
;

282 
bôs
 = 9;

283 
	`öÊ©e_èbÀ
(
LENS
, 
°©e
->
Àns
, 288, &(
√xt
), &(
bôs
), sèã->
w‹k
);

286 
sym
 = 0;

287 
sym
 < 32Ë
°©e
->
Àns
[sym++] = 5;

288 
di°fix
 = 
√xt
;

289 
bôs
 = 5;

290 
	`öÊ©e_èbÀ
(
DISTS
, 
°©e
->
Àns
, 32, &(
√xt
), &(
bôs
), sèã->
w‹k
);

293 
vúgö
 = 0;

296 
	~"öffixed.h
"

298 
°©e
->
Àncode
 = 
Ànfix
;

299 
°©e
->
Ànbôs
 = 9;

300 
°©e
->
di°code
 = 
di°fix
;

301 
°©e
->
di°bôs
 = 5;

302 
	}
}

304 #ifde‡
MAKEFIXED


305 
	~<°dio.h
>

325 
	$makefixed
()

327 
low
, 
size
;

328 
öÊ©e_°©e
 
°©e
;

330 
	`fixedèbÀs
(&
°©e
);

331 
	`puts
(" /* inffixed.h --Åable for decoding fixed codes");

332 
	`puts
(" * Generatedáutomatically by makefixed().");

333 
	`puts
(" */");

334 
	`puts
("");

335 
	`puts
(" /* WARNING:Åhis file should *not* be used byápplications.");

336 
	`puts
(" It isÖart ofÅhe implementation ofÅhisÜibraryánd is");

337 
	`puts
(" subjectÅo change. Applications should only use zlib.h.");

338 
	`puts
(" */");

339 
	`puts
("");

340 
size
 = 1U << 9;

341 
	`¥ötf
(" sèti¯c⁄° codêÀnfix[%u] = {", 
size
);

342 
low
 = 0;

344 i‡((
low
 % 7Ë=0Ë
	`¥ötf
("\n ");

345 
	`¥ötf
("{%u,%u,%d}", (
low
 & 127Ë=99 ? 64 : 
°©e
.
Àncode
[low].
›
,

346 
°©e
.
Àncode
[
low
].
bôs
, sèã.Àncode[low].
vÆ
);

347 i‡(++
low
 =
size
) ;

348 
	`putch¨
(',');

350 
	`puts
("\n };");

351 
size
 = 1U << 5;

352 
	`¥ötf
("\¿ sèti¯c⁄° codêdi°fix[%u] = {", 
size
);

353 
low
 = 0;

355 i‡((
low
 % 6Ë=0Ë
	`¥ötf
("\n ");

356 
	`¥ötf
("{%u,%u,%d}", 
°©e
.
di°code
[
low
].
›
, sèã.di°code[low].
bôs
,

357 
°©e
.
di°code
[
low
].
vÆ
);

358 i‡(++
low
 =
size
) ;

359 
	`putch¨
(',');

361 
	`puts
("\n };");

362 
	}
}

379 
loˇl
 
	$upd©ewödow
(
°rm
, 
íd
, 
c›y
)

380 
z_°ªamp
 
°rm
;

381 c⁄° 
Byãf
 *
íd
;

382 
c›y
;

384 
öÊ©e_°©e
 
FAR
 *
°©e
;

385 
di°
;

387 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

390 i‡(
°©e
->
wödow
 =
Z_NULL
) {

391 
°©e
->
wödow
 = (
FAR
 *)

392 
	`ZALLOC
(
°rm
, 1U << 
°©e
->
wbôs
,

394 i‡(
°©e
->
wödow
 =
Z_NULL
)  1;

398 i‡(
°©e
->
wsize
 == 0) {

399 
°©e
->
wsize
 = 1U << sèã->
wbôs
;

400 
°©e
->
w√xt
 = 0;

401 
°©e
->
whave
 = 0;

405 i‡(
c›y
 >
°©e
->
wsize
) {

406 
	`zmem˝y
(
°©e
->
wödow
, 
íd
 - sèã->
wsize
, state->wsize);

407 
°©e
->
w√xt
 = 0;

408 
°©e
->
whave
 = sèã->
wsize
;

411 
di°
 = 
°©e
->
wsize
 - sèã->
w√xt
;

412 i‡(
di°
 > 
c›y
) dist = copy;

413 
	`zmem˝y
(
°©e
->
wödow
 + sèã->
w√xt
, 
íd
 - 
c›y
, 
di°
);

414 
c›y
 -
di°
;

415 i‡(
c›y
) {

416 
	`zmem˝y
(
°©e
->
wödow
, 
íd
 - 
c›y
, copy);

417 
°©e
->
w√xt
 = 
c›y
;

418 
°©e
->
whave
 = sèã->
wsize
;

421 
°©e
->
w√xt
 +
di°
;

422 i‡(
°©e
->
w√xt
 =°©e->
wsize
) state->wnext = 0;

423 i‡(
°©e
->
whave
 < sèã->
wsize
Ë°©e->whavê+
di°
;

427 
	}
}

432 #ifde‡
GUNZIP


433 
	#UPDATE
(
check
, 
buf
, 
Àn
) \

434 (
°©e
->
Êags
 ? 
	`¸c32
(
check
, 
buf
, 
Àn
Ë: 
	`adÀr32
(check, buf,Üí))

	)

436 
	#UPDATE
(
check
, 
buf
, 
Àn
Ë
	`adÀr32
(check, buf,Üí)

	)

440 #ifde‡
GUNZIP


441 
	#CRC2
(
check
, 
w‹d
) \

443 
hbuf
[0] = ()(
w‹d
); \

444 
hbuf
[1] = ()((
w‹d
) >> 8); \

445 
check
 = 
	`¸c32
(check, 
hbuf
, 2); \

446 } 0)

	)

448 
	#CRC4
(
check
, 
w‹d
) \

450 
hbuf
[0] = ()(
w‹d
); \

451 
hbuf
[1] = ()((
w‹d
) >> 8); \

452 
hbuf
[2] = ()((
w‹d
) >> 16); \

453 
hbuf
[3] = ()((
w‹d
) >> 24); \

454 
check
 = 
	`¸c32
(check, 
hbuf
, 4); \

455 } 0)

	)

459 
	#LOAD
() \

461 
put
 = 
°rm
->
√xt_out
; \

462 
À·
 = 
°rm
->
avaû_out
; \

463 
√xt
 = 
°rm
->
√xt_ö
; \

464 
have
 = 
°rm
->
avaû_ö
; \

465 
hﬁd
 = 
°©e
->hold; \

466 
bôs
 = 
°©e
->bits; \

467 } 0)

	)

470 
	#RESTORE
() \

472 
°rm
->
√xt_out
 = 
put
; \

473 
°rm
->
avaû_out
 = 
À·
; \

474 
°rm
->
√xt_ö
 = 
√xt
; \

475 
°rm
->
avaû_ö
 = 
have
; \

476 
°©e
->
hﬁd
 = hold; \

477 
°©e
->
bôs
 = bits; \

478 } 0)

	)

481 
	#INITBITS
() \

483 
hﬁd
 = 0; \

484 
bôs
 = 0; \

485 } 0)

	)

489 
	#PULLBYTE
() \

491 i‡(
have
 =0Ë
öf_Àave
; \

492 
have
--; \

493 
hﬁd
 +()(*
√xt
++Ë<< 
bôs
; \

494 
bôs
 += 8; \

495 } 0)

	)

499 
	#NEEDBITS
(
n
) \

501 
bôs
 < ()(
n
)) \

502 
	`PULLBYTE
(); \

503 } 0)

	)

506 
	#BITS
(
n
) \

507 (()
hﬁd
 & ((1U << (
n
)Ë- 1))

	)

510 
	#DROPBITS
(
n
) \

512 
hﬁd
 >>(
n
); \

513 
bôs
 -()(
n
); \

514 } 0)

	)

517 
	#BYTEBITS
() \

519 
hﬁd
 >>
bôs
 & 7; \

520 
bôs
 -= bits & 7; \

521 } 0)

	)

605 
ZEXPORT
 
	$öÊ©e
(
°rm
, 
Êush
)

606 
z_°ªamp
 
°rm
;

607 
Êush
;

609 
öÊ©e_°©e
 
FAR
 *
°©e
;

610 
z_c⁄°
 
FAR
 *
√xt
;

611 
FAR
 *
put
;

612 
have
, 
À·
;

613 
hﬁd
;

614 
bôs
;

615 
ö
, 
out
;

616 
c›y
;

617 
FAR
 *
‰om
;

618 
code
 
hîe
;

619 
code
 
œ°
;

620 
Àn
;

621 
ªt
;

622 #ifde‡
GUNZIP


623 
hbuf
[4];

625 c⁄° 
‹dî
[19] =

628 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULL || såm->
√xt_out
 == Z_NULL ||

629 (
°rm
->
√xt_ö
 =
Z_NULL
 && såm->
avaû_ö
 != 0))

630  
Z_STREAM_ERROR
;

632 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

633 i‡(
°©e
->
mode
 =
TYPE
Ë°©e->modê
TYPEDO
;

634 
	`LOAD
();

635 
ö
 = 
have
;

636 
out
 = 
À·
;

637 
ªt
 = 
Z_OK
;

639 
°©e
->
mode
) {

640 
HEAD
:

641 i‡(
°©e
->
wøp
 == 0) {

642 
°©e
->
mode
 = 
TYPEDO
;

645 
	`NEEDBITS
(16);

646 #ifde‡
GUNZIP


647 i‡((
°©e
->
wøp
 & 2Ë&& 
hﬁd
 == 0x8b1f) {

648 
°©e
->
check
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

649 
	`CRC2
(
°©e
->
check
, 
hﬁd
);

650 
	`INITBITS
();

651 
°©e
->
mode
 = 
FLAGS
;

654 
°©e
->
Êags
 = 0;

655 i‡(
°©e
->
hód
 !
Z_NULL
)

656 
°©e
->
hód
->
d⁄e
 = -1;

657 i‡(!(
°©e
->
wøp
 & 1) ||

661 ((
	`BITS
(8Ë<< 8Ë+ (
hﬁd
 >> 8)) % 31) {

662 
°rm
->
msg
 = (*)"incorrect header check";

663 
°©e
->
mode
 = 
BAD
;

666 i‡(
	`BITS
(4Ë!
Z_DEFLATED
) {

667 
°rm
->
msg
 = (*)"unknown compression method";

668 
°©e
->
mode
 = 
BAD
;

671 
	`DROPBITS
(4);

672 
Àn
 = 
	`BITS
(4) + 8;

673 i‡(
°©e
->
wbôs
 == 0)

674 
°©e
->
wbôs
 = 
Àn
;

675 i‡(
Àn
 > 
°©e
->
wbôs
) {

676 
°rm
->
msg
 = (*)"invalid window size";

677 
°©e
->
mode
 = 
BAD
;

680 
°©e
->
dmax
 = 1U << 
Àn
;

681 
	`Tø˚v
((
°dîr
, "inflate: zlib header ok\n"));

682 
°rm
->
adÀr
 = 
°©e
->
check
 = 
	`adÀr32
(0L, 
Z_NULL
, 0);

683 
°©e
->
mode
 = 
hﬁd
 & 0x200 ? 
DICTID
 : 
TYPE
;

684 
	`INITBITS
();

686 #ifde‡
GUNZIP


687 
FLAGS
:

688 
	`NEEDBITS
(16);

689 
°©e
->
Êags
 = ()(
hﬁd
);

690 i‡((
°©e
->
Êags
 & 0xffË!
Z_DEFLATED
) {

691 
°rm
->
msg
 = (*)"unknown compression method";

692 
°©e
->
mode
 = 
BAD
;

695 i‡(
°©e
->
Êags
 & 0xe000) {

696 
°rm
->
msg
 = (*)"unknown header flags set";

697 
°©e
->
mode
 = 
BAD
;

700 i‡(
°©e
->
hód
 !
Z_NULL
)

701 
°©e
->
hód
->
ãxt
 = ()((
hﬁd
 >> 8) & 1);

702 i‡(
°©e
->
Êags
 & 0x0200Ë
	`CRC2
(°©e->
check
, 
hﬁd
);

703 
	`INITBITS
();

704 
°©e
->
mode
 = 
TIME
;

705 
TIME
:

706 
	`NEEDBITS
(32);

707 i‡(
°©e
->
hód
 !
Z_NULL
)

708 
°©e
->
hód
->
time
 = 
hﬁd
;

709 i‡(
°©e
->
Êags
 & 0x0200Ë
	`CRC4
(°©e->
check
, 
hﬁd
);

710 
	`INITBITS
();

711 
°©e
->
mode
 = 
OS
;

712 
OS
:

713 
	`NEEDBITS
(16);

714 i‡(
°©e
->
hód
 !
Z_NULL
) {

715 
°©e
->
hód
->
xÊags
 = ()(
hﬁd
 & 0xff);

716 
°©e
->
hód
->
os
 = ()(
hﬁd
 >> 8);

718 i‡(
°©e
->
Êags
 & 0x0200Ë
	`CRC2
(°©e->
check
, 
hﬁd
);

719 
	`INITBITS
();

720 
°©e
->
mode
 = 
EXLEN
;

721 
EXLEN
:

722 i‡(
°©e
->
Êags
 & 0x0400) {

723 
	`NEEDBITS
(16);

724 
°©e
->
Àngth
 = ()(
hﬁd
);

725 i‡(
°©e
->
hód
 !
Z_NULL
)

726 
°©e
->
hód
->
exåa_Àn
 = ()
hﬁd
;

727 i‡(
°©e
->
Êags
 & 0x0200Ë
	`CRC2
(°©e->
check
, 
hﬁd
);

728 
	`INITBITS
();

730 i‡(
°©e
->
hód
 !
Z_NULL
)

731 
°©e
->
hód
->
exåa
 = 
Z_NULL
;

732 
°©e
->
mode
 = 
EXTRA
;

733 
EXTRA
:

734 i‡(
°©e
->
Êags
 & 0x0400) {

735 
c›y
 = 
°©e
->
Àngth
;

736 i‡(
c›y
 > 
have
) copy = have;

737 i‡(
c›y
) {

738 i‡(
°©e
->
hód
 !
Z_NULL
 &&

739 
°©e
->
hód
->
exåa
 !
Z_NULL
) {

740 
Àn
 = 
°©e
->
hód
->
exåa_Àn
 - sèã->
Àngth
;

741 
	`zmem˝y
(
°©e
->
hód
->
exåa
 + 
Àn
, 
√xt
,

742 
Àn
 + 
c›y
 > 
°©e
->
hód
->
exåa_max
 ?

743 
°©e
->
hód
->
exåa_max
 - 
Àn
 : 
c›y
);

745 i‡(
°©e
->
Êags
 & 0x0200)

746 
°©e
->
check
 = 
	`¸c32
(°©e->check, 
√xt
, 
c›y
);

747 
have
 -
c›y
;

748 
√xt
 +
c›y
;

749 
°©e
->
Àngth
 -
c›y
;

751 i‡(
°©e
->
Àngth
Ë
öf_Àave
;

753 
°©e
->
Àngth
 = 0;

754 
°©e
->
mode
 = 
NAME
;

755 
NAME
:

756 i‡(
°©e
->
Êags
 & 0x0800) {

757 i‡(
have
 =0Ë
öf_Àave
;

758 
c›y
 = 0;

760 
Àn
 = ()(
√xt
[
c›y
++]);

761 i‡(
°©e
->
hód
 !
Z_NULL
 &&

762 
°©e
->
hód
->
«me
 !
Z_NULL
 &&

763 
°©e
->
Àngth
 < sèã->
hód
->
«me_max
)

764 
°©e
->
hód
->
«me
[°©e->
Àngth
++] = 
Àn
;

765 } 
Àn
 && 
c›y
 < 
have
);

766 i‡(
°©e
->
Êags
 & 0x0200)

767 
°©e
->
check
 = 
	`¸c32
(°©e->check, 
√xt
, 
c›y
);

768 
have
 -
c›y
;

769 
√xt
 +
c›y
;

770 i‡(
Àn
Ë
öf_Àave
;

772 i‡(
°©e
->
hód
 !
Z_NULL
)

773 
°©e
->
hód
->
«me
 = 
Z_NULL
;

774 
°©e
->
Àngth
 = 0;

775 
°©e
->
mode
 = 
COMMENT
;

776 
COMMENT
:

777 i‡(
°©e
->
Êags
 & 0x1000) {

778 i‡(
have
 =0Ë
öf_Àave
;

779 
c›y
 = 0;

781 
Àn
 = ()(
√xt
[
c›y
++]);

782 i‡(
°©e
->
hód
 !
Z_NULL
 &&

783 
°©e
->
hód
->
commít
 !
Z_NULL
 &&

784 
°©e
->
Àngth
 < sèã->
hód
->
comm_max
)

785 
°©e
->
hód
->
commít
[°©e->
Àngth
++] = 
Àn
;

786 } 
Àn
 && 
c›y
 < 
have
);

787 i‡(
°©e
->
Êags
 & 0x0200)

788 
°©e
->
check
 = 
	`¸c32
(°©e->check, 
√xt
, 
c›y
);

789 
have
 -
c›y
;

790 
√xt
 +
c›y
;

791 i‡(
Àn
Ë
öf_Àave
;

793 i‡(
°©e
->
hód
 !
Z_NULL
)

794 
°©e
->
hód
->
commít
 = 
Z_NULL
;

795 
°©e
->
mode
 = 
HCRC
;

796 
HCRC
:

797 i‡(
°©e
->
Êags
 & 0x0200) {

798 
	`NEEDBITS
(16);

799 i‡(
hﬁd
 !(
°©e
->
check
 & 0xffff)) {

800 
°rm
->
msg
 = (*)"header crc mismatch";

801 
°©e
->
mode
 = 
BAD
;

804 
	`INITBITS
();

806 i‡(
°©e
->
hód
 !
Z_NULL
) {

807 
°©e
->
hód
->
h¸c
 = ()((°©e->
Êags
 >> 9) & 1);

808 
°©e
->
hód
->
d⁄e
 = 1;

810 
°rm
->
adÀr
 = 
°©e
->
check
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

811 
°©e
->
mode
 = 
TYPE
;

814 
DICTID
:

815 
	`NEEDBITS
(32);

816 
°rm
->
adÀr
 = 
°©e
->
check
 = 
	`ZSWAP32
(
hﬁd
);

817 
	`INITBITS
();

818 
°©e
->
mode
 = 
DICT
;

819 
DICT
:

820 i‡(
°©e
->
havedi˘
 == 0) {

821 
	`RESTORE
();

822  
Z_NEED_DICT
;

824 
°rm
->
adÀr
 = 
°©e
->
check
 = 
	`adÀr32
(0L, 
Z_NULL
, 0);

825 
°©e
->
mode
 = 
TYPE
;

826 
TYPE
:

827 i‡(
Êush
 =
Z_BLOCK
 || flush =
Z_TREES
Ë
öf_Àave
;

828 
TYPEDO
:

829 i‡(
°©e
->
œ°
) {

830 
	`BYTEBITS
();

831 
°©e
->
mode
 = 
CHECK
;

834 
	`NEEDBITS
(3);

835 
°©e
->
œ°
 = 
	`BITS
(1);

836 
	`DROPBITS
(1);

837 
	`BITS
(2)) {

839 
	`Tø˚v
((
°dîr
, "inflate: stored block%s\n",

840 
°©e
->
œ°
 ? " (last)" : ""));

841 
°©e
->
mode
 = 
STORED
;

844 
	`fixedèbÀs
(
°©e
);

845 
	`Tø˚v
((
°dîr
, "inflate: fixed codes block%s\n",

846 
°©e
->
œ°
 ? " (last)" : ""));

847 
°©e
->
mode
 = 
LEN_
;

848 i‡(
Êush
 =
Z_TREES
) {

849 
	`DROPBITS
(2);

850 
öf_Àave
;

854 
	`Tø˚v
((
°dîr
, "inflate: dynamic codes block%s\n",

855 
°©e
->
œ°
 ? " (last)" : ""));

856 
°©e
->
mode
 = 
TABLE
;

859 
°rm
->
msg
 = (*)"invalid blockÅype";

860 
°©e
->
mode
 = 
BAD
;

862 
	`DROPBITS
(2);

864 
STORED
:

865 
	`BYTEBITS
();

866 
	`NEEDBITS
(32);

867 i‡((
hﬁd
 & 0xffff) != ((hold >> 16) ^ 0xffff)) {

868 
°rm
->
msg
 = (*)"invalid stored blockÜengths";

869 
°©e
->
mode
 = 
BAD
;

872 
°©e
->
Àngth
 = ()
hﬁd
 & 0xffff;

873 
	`Tø˚v
((
°dîr
, "inflate: storedÜength %u\n",

874 
°©e
->
Àngth
));

875 
	`INITBITS
();

876 
°©e
->
mode
 = 
COPY_
;

877 i‡(
Êush
 =
Z_TREES
Ë
öf_Àave
;

878 
COPY_
:

879 
°©e
->
mode
 = 
COPY
;

880 
COPY
:

881 
c›y
 = 
°©e
->
Àngth
;

882 i‡(
c›y
) {

883 i‡(
c›y
 > 
have
) copy = have;

884 i‡(
c›y
 > 
À·
) copy =Üeft;

885 i‡(
c›y
 =0Ë
öf_Àave
;

886 
	`zmem˝y
(
put
, 
√xt
, 
c›y
);

887 
have
 -
c›y
;

888 
√xt
 +
c›y
;

889 
À·
 -
c›y
;

890 
put
 +
c›y
;

891 
°©e
->
Àngth
 -
c›y
;

894 
	`Tø˚v
((
°dîr
, "inflate: storedÉnd\n"));

895 
°©e
->
mode
 = 
TYPE
;

897 
TABLE
:

898 
	`NEEDBITS
(14);

899 
°©e
->
∆í
 = 
	`BITS
(5) + 257;

900 
	`DROPBITS
(5);

901 
°©e
->
ndi°
 = 
	`BITS
(5) + 1;

902 
	`DROPBITS
(5);

903 
°©e
->
ncode
 = 
	`BITS
(4) + 4;

904 
	`DROPBITS
(4);

905 #i‚de‡
PKZIP_BUG_WORKAROUND


906 i‡(
°©e
->
∆í
 > 286 || sèã->
ndi°
 > 30) {

907 
°rm
->
msg
 = (*)"too manyÜength or distance symbols";

908 
°©e
->
mode
 = 
BAD
;

912 
	`Tø˚v
((
°dîr
, "inflate:Åable sizes ok\n"));

913 
°©e
->
have
 = 0;

914 
°©e
->
mode
 = 
LENLENS
;

915 
LENLENS
:

916 
°©e
->
have
 < sèã->
ncode
) {

917 
	`NEEDBITS
(3);

918 
°©e
->
Àns
[
‹dî
[°©e->
have
++]] = ()
	`BITS
(3);

919 
	`DROPBITS
(3);

921 
°©e
->
have
 < 19)

922 
°©e
->
Àns
[
‹dî
[°©e->
have
++]] = 0;

923 
°©e
->
√xt
 = sèã->
codes
;

924 
°©e
->
Àncode
 = (c⁄° 
code
 
FAR
 *)(°©e->
√xt
);

925 
°©e
->
Ànbôs
 = 7;

926 
ªt
 = 
	`öÊ©e_èbÀ
(
CODES
, 
°©e
->
Àns
, 19, &(°©e->
√xt
),

927 &(
°©e
->
Ànbôs
), sèã->
w‹k
);

928 i‡(
ªt
) {

929 
°rm
->
msg
 = (*)"invalid codeÜengths set";

930 
°©e
->
mode
 = 
BAD
;

933 
	`Tø˚v
((
°dîr
, "inflate: codeÜengths ok\n"));

934 
°©e
->
have
 = 0;

935 
°©e
->
mode
 = 
CODELENS
;

936 
CODELENS
:

937 
°©e
->
have
 < sèã->
∆í
 + sèã->
ndi°
) {

939 
hîe
 = 
°©e
->
Àncode
[
	`BITS
(°©e->
Ànbôs
)];

940 i‡(()(
hîe
.
bôs
) <= bits) ;

941 
	`PULLBYTE
();

943 i‡(
hîe
.
vÆ
 < 16) {

944 
	`DROPBITS
(
hîe
.
bôs
);

945 
°©e
->
Àns
[°©e->
have
++] = 
hîe
.
vÆ
;

948 i‡(
hîe
.
vÆ
 == 16) {

949 
	`NEEDBITS
(
hîe
.
bôs
 + 2);

950 
	`DROPBITS
(
hîe
.
bôs
);

951 i‡(
°©e
->
have
 == 0) {

952 
°rm
->
msg
 = (*)"invalid bitÜengthÑepeat";

953 
°©e
->
mode
 = 
BAD
;

956 
Àn
 = 
°©e
->
Àns
[°©e->
have
 - 1];

957 
c›y
 = 3 + 
	`BITS
(2);

958 
	`DROPBITS
(2);

960 i‡(
hîe
.
vÆ
 == 17) {

961 
	`NEEDBITS
(
hîe
.
bôs
 + 3);

962 
	`DROPBITS
(
hîe
.
bôs
);

963 
Àn
 = 0;

964 
c›y
 = 3 + 
	`BITS
(3);

965 
	`DROPBITS
(3);

968 
	`NEEDBITS
(
hîe
.
bôs
 + 7);

969 
	`DROPBITS
(
hîe
.
bôs
);

970 
Àn
 = 0;

971 
c›y
 = 11 + 
	`BITS
(7);

972 
	`DROPBITS
(7);

974 i‡(
°©e
->
have
 + 
c›y
 > sèã->
∆í
 + sèã->
ndi°
) {

975 
°rm
->
msg
 = (*)"invalid bitÜengthÑepeat";

976 
°©e
->
mode
 = 
BAD
;

979 
c›y
--)

980 
°©e
->
Àns
[°©e->
have
++] = ()
Àn
;

985 i‡(
°©e
->
mode
 =
BAD
) ;

988 i‡(
°©e
->
Àns
[256] == 0) {

989 
°rm
->
msg
 = (*)"invalid code -- missingÉnd-of-block";

990 
°©e
->
mode
 = 
BAD
;

997 
°©e
->
√xt
 = sèã->
codes
;

998 
°©e
->
Àncode
 = (c⁄° 
code
 
FAR
 *)(°©e->
√xt
);

999 
°©e
->
Ànbôs
 = 9;

1000 
ªt
 = 
	`öÊ©e_èbÀ
(
LENS
, 
°©e
->
Àns
, sèã->
∆í
, &(°©e->
√xt
),

1001 &(
°©e
->
Ànbôs
), sèã->
w‹k
);

1002 i‡(
ªt
) {

1003 
°rm
->
msg
 = (*)"invalidÜiteral/lengths set";

1004 
°©e
->
mode
 = 
BAD
;

1007 
°©e
->
di°code
 = (c⁄° 
code
 
FAR
 *)(°©e->
√xt
);

1008 
°©e
->
di°bôs
 = 6;

1009 
ªt
 = 
	`öÊ©e_èbÀ
(
DISTS
, 
°©e
->
Àns
 + sèã->
∆í
, sèã->
ndi°
,

1010 &(
°©e
->
√xt
), &(°©e->
di°bôs
), sèã->
w‹k
);

1011 i‡(
ªt
) {

1012 
°rm
->
msg
 = (*)"invalid distances set";

1013 
°©e
->
mode
 = 
BAD
;

1016 
	`Tø˚v
((
°dîr
, "inflate: codes ok\n"));

1017 
°©e
->
mode
 = 
LEN_
;

1018 i‡(
Êush
 =
Z_TREES
Ë
öf_Àave
;

1019 
LEN_
:

1020 
°©e
->
mode
 = 
LEN
;

1021 
LEN
:

1022 i‡(
have
 >6 && 
À·
 >= 258) {

1023 
	`RESTORE
();

1024 
	`öÊ©e_Á°
(
°rm
, 
out
);

1025 
	`LOAD
();

1026 i‡(
°©e
->
mode
 =
TYPE
)

1027 
°©e
->
back
 = -1;

1030 
°©e
->
back
 = 0;

1032 
hîe
 = 
°©e
->
Àncode
[
	`BITS
(°©e->
Ànbôs
)];

1033 i‡(()(
hîe
.
bôs
) <= bits) ;

1034 
	`PULLBYTE
();

1036 i‡(
hîe
.
›
 && (here.op & 0xf0) == 0) {

1037 
œ°
 = 
hîe
;

1039 
hîe
 = 
°©e
->
Àncode
[
œ°
.
vÆ
 +

1040 (
	`BITS
(
œ°
.
bôs
 +Üa°.
›
) >>Üast.bits)];

1041 i‡(()(
œ°
.
bôs
 + 
hîe
.bits) <= bits) ;

1042 
	`PULLBYTE
();

1044 
	`DROPBITS
(
œ°
.
bôs
);

1045 
°©e
->
back
 +
œ°
.
bôs
;

1047 
	`DROPBITS
(
hîe
.
bôs
);

1048 
°©e
->
back
 +
hîe
.
bôs
;

1049 
°©e
->
Àngth
 = ()
hîe
.
vÆ
;

1050 i‡(()(
hîe
.
›
) == 0) {

1051 
	`Tø˚vv
((
°dîr
, 
hîe
.
vÆ
 >= 0x20 && here.val < 0x7f ?

1053 "öÊ©e:ÜôîÆ 0x%02x\n", 
hîe
.
vÆ
));

1054 
°©e
->
mode
 = 
LIT
;

1057 i‡(
hîe
.
›
 & 32) {

1058 
	`Tø˚vv
((
°dîr
, "inflate:Énd of block\n"));

1059 
°©e
->
back
 = -1;

1060 
°©e
->
mode
 = 
TYPE
;

1063 i‡(
hîe
.
›
 & 64) {

1064 
°rm
->
msg
 = (*)"invalidÜiteral/length code";

1065 
°©e
->
mode
 = 
BAD
;

1068 
°©e
->
exåa
 = ()(
hîe
.
›
) & 15;

1069 
°©e
->
mode
 = 
LENEXT
;

1070 
LENEXT
:

1071 i‡(
°©e
->
exåa
) {

1072 
	`NEEDBITS
(
°©e
->
exåa
);

1073 
°©e
->
Àngth
 +
	`BITS
(°©e->
exåa
);

1074 
	`DROPBITS
(
°©e
->
exåa
);

1075 
°©e
->
back
 +°©e->
exåa
;

1077 
	`Tø˚vv
((
°dîr
, "öÊ©e:Üígth %u\n", 
°©e
->
Àngth
));

1078 
°©e
->
was
 = sèã->
Àngth
;

1079 
°©e
->
mode
 = 
DIST
;

1080 
DIST
:

1082 
hîe
 = 
°©e
->
di°code
[
	`BITS
(°©e->
di°bôs
)];

1083 i‡(()(
hîe
.
bôs
) <= bits) ;

1084 
	`PULLBYTE
();

1086 i‡((
hîe
.
›
 & 0xf0) == 0) {

1087 
œ°
 = 
hîe
;

1089 
hîe
 = 
°©e
->
di°code
[
œ°
.
vÆ
 +

1090 (
	`BITS
(
œ°
.
bôs
 +Üa°.
›
) >>Üast.bits)];

1091 i‡(()(
œ°
.
bôs
 + 
hîe
.bits) <= bits) ;

1092 
	`PULLBYTE
();

1094 
	`DROPBITS
(
œ°
.
bôs
);

1095 
°©e
->
back
 +
œ°
.
bôs
;

1097 
	`DROPBITS
(
hîe
.
bôs
);

1098 
°©e
->
back
 +
hîe
.
bôs
;

1099 i‡(
hîe
.
›
 & 64) {

1100 
°rm
->
msg
 = (*)"invalid distance code";

1101 
°©e
->
mode
 = 
BAD
;

1104 
°©e
->
off£t
 = ()
hîe
.
vÆ
;

1105 
°©e
->
exåa
 = ()(
hîe
.
›
) & 15;

1106 
°©e
->
mode
 = 
DISTEXT
;

1107 
DISTEXT
:

1108 i‡(
°©e
->
exåa
) {

1109 
	`NEEDBITS
(
°©e
->
exåa
);

1110 
°©e
->
off£t
 +
	`BITS
(°©e->
exåa
);

1111 
	`DROPBITS
(
°©e
->
exåa
);

1112 
°©e
->
back
 +°©e->
exåa
;

1114 #ifde‡
INFLATE_STRICT


1115 i‡(
°©e
->
off£t
 > sèã->
dmax
) {

1116 
°rm
->
msg
 = (*)"invalid distanceÅoo far back";

1117 
°©e
->
mode
 = 
BAD
;

1121 
	`Tø˚vv
((
°dîr
, "öÊ©e: di°™˚ %u\n", 
°©e
->
off£t
));

1122 
°©e
->
mode
 = 
MATCH
;

1123 
MATCH
:

1124 i‡(
À·
 =0Ë
öf_Àave
;

1125 
c›y
 = 
out
 - 
À·
;

1126 i‡(
°©e
->
off£t
 > 
c›y
) {

1127 
c›y
 = 
°©e
->
off£t
 - copy;

1128 i‡(
c›y
 > 
°©e
->
whave
) {

1129 i‡(
°©e
->
ß√
) {

1130 
°rm
->
msg
 = (*)"invalid distanceÅoo far back";

1131 
°©e
->
mode
 = 
BAD
;

1134 #ifde‡
INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR


1135 
	`Tø˚
((
°dîr
, "inflate.cÅoo far\n"));

1136 
c›y
 -
°©e
->
whave
;

1137 i‡(
c›y
 > 
°©e
->
Àngth
) copy = state->length;

1138 i‡(
c›y
 > 
À·
) copy =Üeft;

1139 
À·
 -
c›y
;

1140 
°©e
->
Àngth
 -
c›y
;

1142 *
put
++ = 0;

1143 } --
c›y
);

1144 i‡(
°©e
->
Àngth
 =0Ë°©e->
mode
 = 
LEN
;

1148 i‡(
c›y
 > 
°©e
->
w√xt
) {

1149 
c›y
 -
°©e
->
w√xt
;

1150 
‰om
 = 
°©e
->
wödow
 + (°©e->
wsize
 - 
c›y
);

1153 
‰om
 = 
°©e
->
wödow
 + (°©e->
w√xt
 - 
c›y
);

1154 i‡(
c›y
 > 
°©e
->
Àngth
) copy = state->length;

1157 
‰om
 = 
put
 - 
°©e
->
off£t
;

1158 
c›y
 = 
°©e
->
Àngth
;

1160 i‡(
c›y
 > 
À·
) copy =Üeft;

1161 
À·
 -
c›y
;

1162 
°©e
->
Àngth
 -
c›y
;

1164 *
put
++ = *
‰om
++;

1165 } --
c›y
);

1166 i‡(
°©e
->
Àngth
 =0Ë°©e->
mode
 = 
LEN
;

1168 
LIT
:

1169 i‡(
À·
 =0Ë
öf_Àave
;

1170 *
put
++ = ()(
°©e
->
Àngth
);

1171 
À·
--;

1172 
°©e
->
mode
 = 
LEN
;

1174 
CHECK
:

1175 i‡(
°©e
->
wøp
) {

1176 
	`NEEDBITS
(32);

1177 
out
 -
À·
;

1178 
°rm
->
tŸÆ_out
 +
out
;

1179 
°©e
->
tŸÆ
 +
out
;

1180 i‡(
out
)

1181 
°rm
->
adÀr
 = 
°©e
->
check
 =

1182 
	`UPDATE
(
°©e
->
check
, 
put
 - 
out
, out);

1183 
out
 = 
À·
;

1185 #ifde‡
GUNZIP


1186 
°©e
->
Êags
 ? 
hﬁd
 :

1188 
	`ZSWAP32
(
hﬁd
)Ë!
°©e
->
check
) {

1189 
°rm
->
msg
 = (*)"incorrect data check";

1190 
°©e
->
mode
 = 
BAD
;

1193 
	`INITBITS
();

1194 
	`Tø˚v
((
°dîr
, "inflate: check matchesÅrailer\n"));

1196 #ifde‡
GUNZIP


1197 
°©e
->
mode
 = 
LENGTH
;

1198 
LENGTH
:

1199 i‡(
°©e
->
wøp
 && sèã->
Êags
) {

1200 
	`NEEDBITS
(32);

1201 i‡(
hﬁd
 !(
°©e
->
tŸÆ
 & 0xffffffffUL)) {

1202 
°rm
->
msg
 = (*)"incorrectÜength check";

1203 
°©e
->
mode
 = 
BAD
;

1206 
	`INITBITS
();

1207 
	`Tø˚v
((
°dîr
, "inflate:Üength matchesÅrailer\n"));

1210 
°©e
->
mode
 = 
DONE
;

1211 
DONE
:

1212 
ªt
 = 
Z_STREAM_END
;

1213 
öf_Àave
;

1214 
BAD
:

1215 
ªt
 = 
Z_DATA_ERROR
;

1216 
öf_Àave
;

1217 
MEM
:

1218  
Z_MEM_ERROR
;

1219 
SYNC
:

1221  
Z_STREAM_ERROR
;

1230 
öf_Àave
:

1231 
	`RESTORE
();

1232 i‡(
°©e
->
wsize
 || (
out
 !
°rm
->
avaû_out
 && sèã->
mode
 < 
BAD
 &&

1233 (
°©e
->
mode
 < 
CHECK
 || 
Êush
 !
Z_FINISH
)))

1234 i‡(
	`upd©ewödow
(
°rm
, såm->
√xt_out
, 
out
 - såm->
avaû_out
)) {

1235 
°©e
->
mode
 = 
MEM
;

1236  
Z_MEM_ERROR
;

1238 
ö
 -
°rm
->
avaû_ö
;

1239 
out
 -
°rm
->
avaû_out
;

1240 
°rm
->
tŸÆ_ö
 +
ö
;

1241 
°rm
->
tŸÆ_out
 +
out
;

1242 
°©e
->
tŸÆ
 +
out
;

1243 i‡(
°©e
->
wøp
 && 
out
)

1244 
°rm
->
adÀr
 = 
°©e
->
check
 =

1245 
	`UPDATE
(
°©e
->
check
, 
°rm
->
√xt_out
 - 
out
, out);

1246 
°rm
->
d©a_ty≥
 = 
°©e
->
bôs
 + (°©e->
œ°
 ? 64 : 0) +

1247 (
°©e
->
mode
 =
TYPE
 ? 128 : 0) +

1248 (
°©e
->
mode
 =
LEN_
 || sèã->modê=
COPY_
 ? 256 : 0);

1249 i‡(((
ö
 =0 && 
out
 =0Ë|| 
Êush
 =
Z_FINISH
Ë&& 
ªt
 =
Z_OK
)

1250 
ªt
 = 
Z_BUF_ERROR
;

1251  
ªt
;

1252 
	}
}

1254 
ZEXPORT
 
	$öÊ©eEnd
(
°rm
)

1255 
z_°ªamp
 
°rm
;

1257 
öÊ©e_°©e
 
FAR
 *
°©e
;

1258 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULL || såm->
z‰ì
 =(
‰ì_func
)0)

1259  
Z_STREAM_ERROR
;

1260 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

1261 i‡(
°©e
->
wödow
 !
Z_NULL
Ë
	`ZFREE
(
°rm
, state->window);

1262 
	`ZFREE
(
°rm
, såm->
°©e
);

1263 
°rm
->
°©e
 = 
Z_NULL
;

1264 
	`Tø˚v
((
°dîr
, "inflate:Énd\n"));

1265  
Z_OK
;

1266 
	}
}

1268 
ZEXPORT
 
	$öÊ©eGëDi˘i⁄¨y
(
°rm
, 
di˘i⁄¨y
, 
di˘Lígth
)

1269 
z_°ªamp
 
°rm
;

1270 
Byãf
 *
di˘i⁄¨y
;

1271 
uI¡
 *
di˘Lígth
;

1273 
öÊ©e_°©e
 
FAR
 *
°©e
;

1276 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

1277 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

1280 i‡(
°©e
->
whave
 && 
di˘i⁄¨y
 !
Z_NULL
) {

1281 
	`zmem˝y
(
di˘i⁄¨y
, 
°©e
->
wödow
 + sèã->
w√xt
,

1282 
°©e
->
whave
 - sèã->
w√xt
);

1283 
	`zmem˝y
(
di˘i⁄¨y
 + 
°©e
->
whave
 - sèã->
w√xt
,

1284 
°©e
->
wödow
, sèã->
w√xt
);

1286 i‡(
di˘Lígth
 !
Z_NULL
)

1287 *
di˘Lígth
 = 
°©e
->
whave
;

1288  
Z_OK
;

1289 
	}
}

1291 
ZEXPORT
 
	$öÊ©eSëDi˘i⁄¨y
(
°rm
, 
di˘i⁄¨y
, 
di˘Lígth
)

1292 
z_°ªamp
 
°rm
;

1293 c⁄° 
Byãf
 *
di˘i⁄¨y
;

1294 
uI¡
 
di˘Lígth
;

1296 
öÊ©e_°©e
 
FAR
 *
°©e
;

1297 
di˘id
;

1298 
ªt
;

1301 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

1302 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

1303 i‡(
°©e
->
wøp
 !0 && sèã->
mode
 !
DICT
)

1304  
Z_STREAM_ERROR
;

1307 i‡(
°©e
->
mode
 =
DICT
) {

1308 
di˘id
 = 
	`adÀr32
(0L, 
Z_NULL
, 0);

1309 
di˘id
 = 
	`adÀr32
(di˘id, 
di˘i⁄¨y
, 
di˘Lígth
);

1310 i‡(
di˘id
 !
°©e
->
check
)

1311  
Z_DATA_ERROR
;

1316 
ªt
 = 
	`upd©ewödow
(
°rm
, 
di˘i⁄¨y
 + 
di˘Lígth
, dictLength);

1317 i‡(
ªt
) {

1318 
°©e
->
mode
 = 
MEM
;

1319  
Z_MEM_ERROR
;

1321 
°©e
->
havedi˘
 = 1;

1322 
	`Tø˚v
((
°dîr
, "inflate: dictionary set\n"));

1323  
Z_OK
;

1324 
	}
}

1326 
ZEXPORT
 
	$öÊ©eGëHódî
(
°rm
, 
hód
)

1327 
z_°ªamp
 
°rm
;

1328 
gz_hódîp
 
hód
;

1330 
öÊ©e_°©e
 
FAR
 *
°©e
;

1333 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

1334 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

1335 i‡((
°©e
->
wøp
 & 2Ë=0Ë 
Z_STREAM_ERROR
;

1338 
°©e
->
hód
 = head;

1339 
hód
->
d⁄e
 = 0;

1340  
Z_OK
;

1341 
	}
}

1354 
loˇl
 
	$sync£¨ch
(
have
, 
buf
, 
Àn
)

1355 
FAR
 *
have
;

1356 c⁄° 
FAR
 *
buf
;

1357 
Àn
;

1359 
gŸ
;

1360 
√xt
;

1362 
gŸ
 = *
have
;

1363 
√xt
 = 0;

1364 
√xt
 < 
Àn
 && 
gŸ
 < 4) {

1365 i‡(()(
buf
[
√xt
]Ë=(
gŸ
 < 2 ? 0 : 0xff))

1366 
gŸ
++;

1367 i‡(
buf
[
√xt
])

1368 
gŸ
 = 0;

1370 
gŸ
 = 4 - got;

1371 
√xt
++;

1373 *
have
 = 
gŸ
;

1374  
√xt
;

1375 
	}
}

1377 
ZEXPORT
 
	$öÊ©eSync
(
°rm
)

1378 
z_°ªamp
 
°rm
;

1380 
Àn
;

1381 
ö
, 
out
;

1382 
buf
[4];

1383 
öÊ©e_°©e
 
FAR
 *
°©e
;

1386 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

1387 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

1388 i‡(
°rm
->
avaû_ö
 =0 && 
°©e
->
bôs
 < 8Ë 
Z_BUF_ERROR
;

1391 i‡(
°©e
->
mode
 !
SYNC
) {

1392 
°©e
->
mode
 = 
SYNC
;

1393 
°©e
->
hﬁd
 <<°©e->
bôs
 & 7;

1394 
°©e
->
bôs
 -= state->bits & 7;

1395 
Àn
 = 0;

1396 
°©e
->
bôs
 >= 8) {

1397 
buf
[
Àn
++] = ()(
°©e
->
hﬁd
);

1398 
°©e
->
hﬁd
 >>= 8;

1399 
°©e
->
bôs
 -= 8;

1401 
°©e
->
have
 = 0;

1402 
	`sync£¨ch
(&(
°©e
->
have
), 
buf
, 
Àn
);

1406 
Àn
 = 
	`sync£¨ch
(&(
°©e
->
have
), 
°rm
->
√xt_ö
, såm->
avaû_ö
);

1407 
°rm
->
avaû_ö
 -
Àn
;

1408 
°rm
->
√xt_ö
 +
Àn
;

1409 
°rm
->
tŸÆ_ö
 +
Àn
;

1412 i‡(
°©e
->
have
 !4Ë 
Z_DATA_ERROR
;

1413 
ö
 = 
°rm
->
tŸÆ_ö
; 
out
 = såm->
tŸÆ_out
;

1414 
	`öÊ©eRe£t
(
°rm
);

1415 
°rm
->
tŸÆ_ö
 = 
ö
; såm->
tŸÆ_out
 = 
out
;

1416 
°©e
->
mode
 = 
TYPE
;

1417  
Z_OK
;

1418 
	}
}

1428 
ZEXPORT
 
	$öÊ©eSyncPoöt
(
°rm
)

1429 
z_°ªamp
 
°rm
;

1431 
öÊ©e_°©e
 
FAR
 *
°©e
;

1433 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

1434 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

1435  
°©e
->
mode
 =
STORED
 && sèã->
bôs
 == 0;

1436 
	}
}

1438 
ZEXPORT
 
	$öÊ©eC›y
(
de°
, 
sour˚
)

1439 
z_°ªamp
 
de°
;

1440 
z_°ªamp
 
sour˚
;

1442 
öÊ©e_°©e
 
FAR
 *
°©e
;

1443 
öÊ©e_°©e
 
FAR
 *
c›y
;

1444 
FAR
 *
wödow
;

1445 
wsize
;

1448 i‡(
de°
 =
Z_NULL
 || 
sour˚
 =Z_NULL || sour˚->
°©e
 == Z_NULL ||

1449 
sour˚
->
zÆloc
 =(
Æloc_func
)0 || sour˚->
z‰ì
 =(
‰ì_func
)0)

1450  
Z_STREAM_ERROR
;

1451 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
sour˚
->state;

1454 
c›y
 = (
öÊ©e_°©e
 
FAR
 *)

1455 
	`ZALLOC
(
sour˚
, 1, (
öÊ©e_°©e
));

1456 i‡(
c›y
 =
Z_NULL
Ë 
Z_MEM_ERROR
;

1457 
wödow
 = 
Z_NULL
;

1458 i‡(
°©e
->
wödow
 !
Z_NULL
) {

1459 
wödow
 = (
FAR
 *)

1460 
	`ZALLOC
(
sour˚
, 1U << 
°©e
->
wbôs
, ());

1461 i‡(
wödow
 =
Z_NULL
) {

1462 
	`ZFREE
(
sour˚
, 
c›y
);

1463  
Z_MEM_ERROR
;

1468 
	`zmem˝y
((
voidpf
)
de°
, (voidpf)
sour˚
, (
z_°ªam
));

1469 
	`zmem˝y
((
voidpf
)
c›y
, (voidpf)
°©e
, (
öÊ©e_°©e
));

1470 i‡(
°©e
->
Àncode
 >°©e->
codes
 &&

1471 
°©e
->
Àncode
 <°©e->
codes
 + 
ENOUGH
 - 1) {

1472 
c›y
->
Àncode
 = c›y->
codes
 + (
°©e
->lencode - state->codes);

1473 
c›y
->
di°code
 = c›y->
codes
 + (
°©e
->distcode - state->codes);

1475 
c›y
->
√xt
 = c›y->
codes
 + (
°©e
->next - state->codes);

1476 i‡(
wödow
 !
Z_NULL
) {

1477 
wsize
 = 1U << 
°©e
->
wbôs
;

1478 
	`zmem˝y
(
wödow
, 
°©e
->wödow, 
wsize
);

1480 
c›y
->
wödow
 = window;

1481 
de°
->
°©e
 = (
öã∫Æ_°©e
 
FAR
 *)
c›y
;

1482  
Z_OK
;

1483 
	}
}

1485 
ZEXPORT
 
	$öÊ©eUndîmöe
(
°rm
, 
subvît
)

1486 
z_°ªamp
 
°rm
;

1487 
subvît
;

1489 
öÊ©e_°©e
 
FAR
 *
°©e
;

1491 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 =Z_NULLË 
Z_STREAM_ERROR
;

1492 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

1493 
°©e
->
ß√
 = !
subvît
;

1494 #ifde‡
INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR


1495  
Z_OK
;

1497 
°©e
->
ß√
 = 1;

1498  
Z_DATA_ERROR
;

1500 
	}
}

1502 
ZEXPORT
 
	$öÊ©eM¨k
(
°rm
)

1503 
z_°ªamp
 
°rm
;

1505 
öÊ©e_°©e
 
FAR
 *
°©e
;

1507 i‡(
°rm
 =
Z_NULL
 || såm->
°©e
 == Z_NULL)  -1L << 16;

1508 
°©e
 = (
öÊ©e_°©e
 
FAR
 *)
°rm
->state;

1509  (()(
°©e
->
back
) << 16) +

1510 (
°©e
->
mode
 =
COPY
 ? sèã->
Àngth
 :

1511 (
°©e
->
mode
 =
MATCH
 ? sèã->
was
 - sèã->
Àngth
 : 0));

1512 
	}
}

	@zlib-1.2.8/inflate.h

15 #i‚de‡
NO_GZIP


16 
	#GUNZIP


	)

21 
	mHEAD
,

22 
	mFLAGS
,

23 
	mTIME
,

24 
	mOS
,

25 
	mEXLEN
,

26 
	mEXTRA
,

27 
	mNAME
,

28 
	mCOMMENT
,

29 
	mHCRC
,

30 
	mDICTID
,

31 
	mDICT
,

32 
	mTYPE
,

33 
	mTYPEDO
,

34 
	mSTORED
,

35 
	mCOPY_
,

36 
	mCOPY
,

37 
	mTABLE
,

38 
	mLENLENS
,

39 
	mCODELENS
,

40 
	mLEN_
,

41 
	mLEN
,

42 
	mLENEXT
,

43 
	mDIST
,

44 
	mDISTEXT
,

45 
	mMATCH
,

46 
	mLIT
,

47 
	mCHECK
,

48 
	mLENGTH
,

49 
	mDONE
,

50 
	mBAD
,

51 
	mMEM
,

52 
	mSYNC


53 } 
	töÊ©e_mode
;

81 
	söÊ©e_°©e
 {

82 
öÊ©e_mode
 
	mmode
;

83 
	mœ°
;

84 
	mwøp
;

85 
	mhavedi˘
;

86 
	mÊags
;

87 
	mdmax
;

88 
	mcheck
;

89 
	mtŸÆ
;

90 
gz_hódîp
 
	mhód
;

92 
	mwbôs
;

93 
	mwsize
;

94 
	mwhave
;

95 
	mw√xt
;

96 
FAR
 *
	mwödow
;

98 
	mhﬁd
;

99 
	mbôs
;

101 
	mÀngth
;

102 
	moff£t
;

104 
	mexåa
;

106 
code
 c⁄° 
FAR
 *
	mÀncode
;

107 
code
 c⁄° 
FAR
 *
	mdi°code
;

108 
	mÀnbôs
;

109 
	mdi°bôs
;

111 
	mncode
;

112 
	m∆í
;

113 
	mndi°
;

114 
	mhave
;

115 
code
 
FAR
 *
	m√xt
;

116 
	mÀns
[320];

117 
	mw‹k
[288];

118 
code
 
	mcodes
[
ENOUGH
];

119 
	mß√
;

120 
	mback
;

121 
	mwas
;

	@zlib-1.2.8/inftrees.c

6 
	~"zutû.h
"

7 
	~"ö·ªes.h
"

9 
	#MAXBITS
 15

	)

11 c⁄° 
	göÊ©e_c›yright
[] =

32 
ZLIB_INTERNAL
 
	$öÊ©e_èbÀ
(
ty≥
, 
Àns
, 
codes
, 
èbÀ
, 
bôs
, 
w‹k
)

33 
codëy≥
 
ty≥
;

34 
FAR
 *
Àns
;

35 
codes
;

36 
code
 
FAR
 * FAR *
èbÀ
;

37 
FAR
 *
bôs
;

38 
FAR
 *
w‹k
;

40 
Àn
;

41 
sym
;

42 
mö
, 
max
;

43 
roŸ
;

44 
cuº
;

45 
dr›
;

46 
À·
;

47 
u£d
;

48 
huff
;

49 
ö¸
;

50 
fûl
;

51 
low
;

52 
mask
;

53 
code
 
hîe
;

54 
code
 
FAR
 *
√xt
;

55 c⁄° 
FAR
 *
ba£
;

56 c⁄° 
FAR
 *
exåa
;

57 
íd
;

58 
cou¡
[
MAXBITS
+1];

59 
offs
[
MAXBITS
+1];

60 c⁄° 
lba£
[31] = {

63 c⁄° 
Àxt
[31] = {

66 c⁄° 
dba£
[32] = {

70 c⁄° 
dext
[32] = {

107 
Àn
 = 0;Üí <
MAXBITS
;Üen++)

108 
cou¡
[
Àn
] = 0;

109 
sym
 = 0; sym < 
codes
; sym++)

110 
cou¡
[
Àns
[
sym
]]++;

113 
roŸ
 = *
bôs
;

114 
max
 = 
MAXBITS
; max >= 1; max--)

115 i‡(
cou¡
[
max
] != 0) ;

116 i‡(
roŸ
 > 
max
)Ñoot = max;

117 i‡(
max
 == 0) {

118 
hîe
.
›
 = ()64;

119 
hîe
.
bôs
 = ()1;

120 
hîe
.
vÆ
 = ()0;

121 *(*
èbÀ
)++ = 
hîe
;

122 *(*
èbÀ
)++ = 
hîe
;

123 *
bôs
 = 1;

126 
mö
 = 1; mö < 
max
; min++)

127 i‡(
cou¡
[
mö
] != 0) ;

128 i‡(
roŸ
 < 
mö
)Ñoot = min;

131 
À·
 = 1;

132 
Àn
 = 1;Üí <
MAXBITS
;Üen++) {

133 
À·
 <<= 1;

134 
À·
 -
cou¡
[
Àn
];

135 i‡(
À·
 < 0)  -1;

137 i‡(
À·
 > 0 && (
ty≥
 =
CODES
 || 
max
 != 1))

141 
offs
[1] = 0;

142 
Àn
 = 1;Üí < 
MAXBITS
;Üen++)

143 
offs
[
Àn
 + 1] = offs[Àn] + 
cou¡
[len];

146 
sym
 = 0; sym < 
codes
; sym++)

147 i‡(
Àns
[
sym
] !0Ë
w‹k
[
offs
[lens[sym]]++] = ()sym;

181 
ty≥
) {

182 
CODES
:

183 
ba£
 = 
exåa
 = 
w‹k
;

184 
íd
 = 19;

186 
LENS
:

187 
ba£
 = 
lba£
;

188 
ba£
 -= 257;

189 
exåa
 = 
Àxt
;

190 
exåa
 -= 257;

191 
íd
 = 256;

194 
ba£
 = 
dba£
;

195 
exåa
 = 
dext
;

196 
íd
 = -1;

200 
huff
 = 0;

201 
sym
 = 0;

202 
Àn
 = 
mö
;

203 
√xt
 = *
èbÀ
;

204 
cuº
 = 
roŸ
;

205 
dr›
 = 0;

206 
low
 = ()(-1);

207 
u£d
 = 1U << 
roŸ
;

208 
mask
 = 
u£d
 - 1;

211 i‡((
ty≥
 =
LENS
 && 
u£d
 > 
ENOUGH_LENS
) ||

212 (
ty≥
 =
DISTS
 && 
u£d
 > 
ENOUGH_DISTS
))

218 
hîe
.
bôs
 = ()(
Àn
 - 
dr›
);

219 i‡(()(
w‹k
[
sym
]Ë< 
íd
) {

220 
hîe
.
›
 = ()0;

221 
hîe
.
vÆ
 = 
w‹k
[
sym
];

223 i‡(()(
w‹k
[
sym
]Ë> 
íd
) {

224 
hîe
.
›
 = ()(
exåa
[
w‹k
[
sym
]]);

225 
hîe
.
vÆ
 = 
ba£
[
w‹k
[
sym
]];

228 
hîe
.
›
 = ()(32 + 64);

229 
hîe
.
vÆ
 = 0;

233 
ö¸
 = 1U << (
Àn
 - 
dr›
);

234 
fûl
 = 1U << 
cuº
;

235 
mö
 = 
fûl
;

237 
fûl
 -
ö¸
;

238 
√xt
[(
huff
 >> 
dr›
Ë+ 
fûl
] = 
hîe
;

239 } 
fûl
 != 0);

242 
ö¸
 = 1U << (
Àn
 - 1);

243 
huff
 & 
ö¸
)

244 
ö¸
 >>= 1;

245 i‡(
ö¸
 != 0) {

246 
huff
 &
ö¸
 - 1;

247 
huff
 +
ö¸
;

250 
huff
 = 0;

253 
sym
++;

254 i‡(--(
cou¡
[
Àn
]) == 0) {

255 i‡(
Àn
 =
max
) ;

256 
Àn
 = 
Àns
[
w‹k
[
sym
]];

260 i‡(
Àn
 > 
roŸ
 && (
huff
 & 
mask
Ë!
low
) {

262 i‡(
dr›
 == 0)

263 
dr›
 = 
roŸ
;

266 
√xt
 +
mö
;

269 
cuº
 = 
Àn
 - 
dr›
;

270 
À·
 = ()(1 << 
cuº
);

271 
cuº
 + 
dr›
 < 
max
) {

272 
À·
 -
cou¡
[
cuº
 + 
dr›
];

273 i‡(
À·
 <= 0) ;

274 
cuº
++;

275 
À·
 <<= 1;

279 
u£d
 +1U << 
cuº
;

280 i‡((
ty≥
 =
LENS
 && 
u£d
 > 
ENOUGH_LENS
) ||

281 (
ty≥
 =
DISTS
 && 
u£d
 > 
ENOUGH_DISTS
))

285 
low
 = 
huff
 & 
mask
;

286 (*
èbÀ
)[
low
].
›
 = ()
cuº
;

287 (*
èbÀ
)[
low
].
bôs
 = ()
roŸ
;

288 (*
èbÀ
)[
low
].
vÆ
 = ()(
√xt
 - *table);

295 i‡(
huff
 != 0) {

296 
hîe
.
›
 = ()64;

297 
hîe
.
bôs
 = ()(
Àn
 - 
dr›
);

298 
hîe
.
vÆ
 = ()0;

299 
√xt
[
huff
] = 
hîe
;

303 *
èbÀ
 +
u£d
;

304 *
bôs
 = 
roŸ
;

306 
	}
}

	@zlib-1.2.8/inftrees.h

25 
	m›
;

26 
	mbôs
;

27 
	mvÆ
;

28 } 
	tcode
;

49 
	#ENOUGH_LENS
 852

	)

50 
	#ENOUGH_DISTS
 592

	)

51 
	#ENOUGH
 (
ENOUGH_LENS
+
ENOUGH_DISTS
)

	)

55 
	mCODES
,

56 
	mLENS
,

57 
	mDISTS


58 } 
	tcodëy≥
;

60 
ZLIB_INTERNAL
 
öÊ©e_èbÀ
 
OF
((
codëy≥
 
ty≥
, 
FAR
 *
Àns
,

61 
codes
, 
code
 
FAR
 * FAR *
èbÀ
,

62 
FAR
 *
bôs
, FAR *
w‹k
));

	@zlib-1.2.8/test/example.c

8 
	~"zlib.h
"

9 
	~<°dio.h
>

11 #ifde‡
STDC


12 
	~<°rög.h
>

13 
	~<°dlib.h
>

16 #i‡
deföed
(
VMS
Ë|| deföed(
RISCOS
)

17 
	#TESTFILE
 "foo-gz"

	)

19 
	#TESTFILE
 "foo.gz"

	)

22 
	#CHECK_ERR
(
îr
, 
msg
) { \

23 i‡(
îr
 !
Z_OK
) { \

24 
	`Ârötf
(
°dîr
, "%†îr‹: %d\n", 
msg
, 
îr
); \

25 
	`exô
(1); \

27 }

	)

29 
z_c⁄°
 
	ghñlo
[] = "hello, hello!";

34 c⁄° 
	gdi˘i⁄¨y
[] = "hello";

35 
uL⁄g
 
	gdi˘Id
;

37 
ã°_deÊ©e
 
OF
((
Byã
 *
com¥
, 
uL⁄g
 
com¥Lí
));

38 
ã°_öÊ©e
 
OF
((
Byã
 *
com¥
, 
uL⁄g
 
com¥Lí
,

39 
Byã
 *
uncom¥
, 
uL⁄g
 
uncom¥Lí
));

40 
ã°_œrge_deÊ©e
 
OF
((
Byã
 *
com¥
, 
uL⁄g
 
com¥Lí
,

41 
Byã
 *
uncom¥
, 
uL⁄g
 
uncom¥Lí
));

42 
ã°_œrge_öÊ©e
 
OF
((
Byã
 *
com¥
, 
uL⁄g
 
com¥Lí
,

43 
Byã
 *
uncom¥
, 
uL⁄g
 
uncom¥Lí
));

44 
ã°_Êush
 
OF
((
Byã
 *
com¥
, 
uL⁄g
 *
com¥Lí
));

45 
ã°_sync
 
OF
((
Byã
 *
com¥
, 
uL⁄g
 
com¥Lí
,

46 
Byã
 *
uncom¥
, 
uL⁄g
 
uncom¥Lí
));

47 
ã°_di˘_deÊ©e
 
OF
((
Byã
 *
com¥
, 
uL⁄g
 
com¥Lí
));

48 
ã°_di˘_öÊ©e
 
OF
((
Byã
 *
com¥
, 
uL⁄g
 
com¥Lí
,

49 
Byã
 *
uncom¥
, 
uL⁄g
 
uncom¥Lí
));

50 
maö
 
OF
((
¨gc
, *
¨gv
[]));

53 #ifde‡
Z_SOLO


55 *
myÆloc
 
OF
((*, , ));

56 
my‰ì
 
OF
((*, *));

58 *
	$myÆloc
(
q
, 
n
, 
m
)

59 *
q
;

60 
n
, 
m
;

62 
q
 = 
Z_NULL
;

63  
	`ˇŒoc
(
n
, 
m
);

64 
	}
}

66 
	$my‰ì
(*
q
, *
p
)

68 
q
 = 
Z_NULL
;

69 
	`‰ì
(
p
);

70 
	}
}

72 
Æloc_func
 
	gzÆloc
 = 
myÆloc
;

73 
‰ì_func
 
	gz‰ì
 = 
my‰ì
;

77 
Æloc_func
 
	gzÆloc
 = (alloc_func)0;

78 
‰ì_func
 
	gz‰ì
 = (free_func)0;

80 
ã°_com¥ess
 
OF
((
Byã
 *
com¥
, 
uL⁄g
 
com¥Lí
,

81 
Byã
 *
uncom¥
, 
uL⁄g
 
uncom¥Lí
));

82 
ã°_gzio
 
OF
((c⁄° *
‚ame
,

83 
Byã
 *
uncom¥
, 
uL⁄g
 
uncom¥Lí
));

88 
	$ã°_com¥ess
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
)

89 
Byã
 *
com¥
, *
uncom¥
;

90 
uL⁄g
 
com¥Lí
, 
uncom¥Lí
;

92 
îr
;

93 
uL⁄g
 
Àn
 = (uL⁄g)
	`°æí
(
hñlo
)+1;

95 
îr
 = 
	`com¥ess
(
com¥
, &
com¥Lí
, (c⁄° 
Byãf
*)
hñlo
, 
Àn
);

96 
	`CHECK_ERR
(
îr
, "compress");

98 
	`°r˝y
((*)
uncom¥
, "garbage");

100 
îr
 = 
	`uncom¥ess
(
uncom¥
, &
uncom¥Lí
, 
com¥
, 
com¥Lí
);

101 
	`CHECK_ERR
(
îr
, "uncompress");

103 i‡(
	`°rcmp
((*)
uncom¥
, 
hñlo
)) {

104 
	`Ârötf
(
°dîr
, "bad uncompress\n");

105 
	`exô
(1);

107 
	`¥ötf
("uncom¥ess(): %s\n", (*)
uncom¥
);

109 
	}
}

114 
	$ã°_gzio
(
‚ame
, 
uncom¥
, 
uncom¥Lí
)

115 c⁄° *
‚ame
;

116 
Byã
 *
uncom¥
;

117 
uL⁄g
 
uncom¥Lí
;

119 #ifde‡
NO_GZCOMPRESS


120 
	`Ârötf
(
°dîr
, "NO_GZCOMPRESS -- gz* functions cannot compress\n");

122 
îr
;

123 
Àn
 = ()
	`°æí
(
hñlo
)+1;

124 
gzFûe
 
fûe
;

125 
z_off_t
 
pos
;

127 
fûe
 = 
	`gz›í
(
‚ame
, "wb");

128 i‡(
fûe
 =
NULL
) {

129 
	`Ârötf
(
°dîr
, "gzopenÉrror\n");

130 
	`exô
(1);

132 
	`gzputc
(
fûe
, 'h');

133 i‡(
	`gzputs
(
fûe
, "ello") != 4) {

134 
	`Ârötf
(
°dîr
, "gzput†îr: %s\n", 
	`gzîr‹
(
fûe
, &
îr
));

135 
	`exô
(1);

137 i‡(
	`gz¥ötf
(
fûe
, ", %s!", "hello") != 8) {

138 
	`Ârötf
(
°dîr
, "gz¥öt‡îr: %s\n", 
	`gzîr‹
(
fûe
, &
îr
));

139 
	`exô
(1);

141 
	`gz£ek
(
fûe
, 1L, 
SEEK_CUR
);

142 
	`gz˛o£
(
fûe
);

144 
fûe
 = 
	`gz›í
(
‚ame
, "rb");

145 i‡(
fûe
 =
NULL
) {

146 
	`Ârötf
(
°dîr
, "gzopenÉrror\n");

147 
	`exô
(1);

149 
	`°r˝y
((*)
uncom¥
, "garbage");

151 i‡(
	`gzªad
(
fûe
, 
uncom¥
, ()
uncom¥Lí
Ë!
Àn
) {

152 
	`Ârötf
(
°dîr
, "gzªadÉº: %s\n", 
	`gzîr‹
(
fûe
, &
îr
));

153 
	`exô
(1);

155 i‡(
	`°rcmp
((*)
uncom¥
, 
hñlo
)) {

156 
	`Ârötf
(
°dîr
, "bad gzªad: %s\n", (*)
uncom¥
);

157 
	`exô
(1);

159 
	`¥ötf
("gzªad(): %s\n", (*)
uncom¥
);

162 
pos
 = 
	`gz£ek
(
fûe
, -8L, 
SEEK_CUR
);

163 i‡(
pos
 !6 || 
	`gzãŒ
(
fûe
) !=Öos) {

164 
	`Ârötf
(
°dîr
, "gzseekÉrror,Öos=%ld, gztell=%ld\n",

165 ()
pos
, ()
	`gzãŒ
(
fûe
));

166 
	`exô
(1);

169 i‡(
	`gzgëc
(
fûe
) != ' ') {

170 
	`Ârötf
(
°dîr
, "gzgetcÉrror\n");

171 
	`exô
(1);

174 i‡(
	`gzungëc
(' ', 
fûe
) != ' ') {

175 
	`Ârötf
(
°dîr
, "gzungetcÉrror\n");

176 
	`exô
(1);

179 
	`gzgës
(
fûe
, (*)
uncom¥
, ()
uncom¥Lí
);

180 i‡(
	`°æí
((*)
uncom¥
) != 7) {

181 
	`Ârötf
(
°dîr
, "gzgë†î∏a·î gz£ek: %s\n", 
	`gzîr‹
(
fûe
, &
îr
));

182 
	`exô
(1);

184 i‡(
	`°rcmp
((*)
uncom¥
, 
hñlo
 + 6)) {

185 
	`Ârötf
(
°dîr
, "bad gzgetsáfter gzseek\n");

186 
	`exô
(1);

188 
	`¥ötf
("gzgës(Ëa·î gz£ek: %s\n", (*)
uncom¥
);

191 
	`gz˛o£
(
fûe
);

193 
	}
}

200 
	$ã°_deÊ©e
(
com¥
, 
com¥Lí
)

201 
Byã
 *
com¥
;

202 
uL⁄g
 
com¥Lí
;

204 
z_°ªam
 
c_°ªam
;

205 
îr
;

206 
uL⁄g
 
Àn
 = (uL⁄g)
	`°æí
(
hñlo
)+1;

208 
c_°ªam
.
zÆloc
 = zalloc;

209 
c_°ªam
.
z‰ì
 = zfree;

210 
c_°ªam
.
›aque
 = (
voidpf
)0;

212 
îr
 = 
	`deÊ©eInô
(&
c_°ªam
, 
Z_DEFAULT_COMPRESSION
);

213 
	`CHECK_ERR
(
îr
, "deflateInit");

215 
c_°ªam
.
√xt_ö
 = (
z_c⁄°
 *)
hñlo
;

216 
c_°ªam
.
√xt_out
 = 
com¥
;

218 
c_°ªam
.
tŸÆ_ö
 !
Àn
 && c_°ªam.
tŸÆ_out
 < 
com¥Lí
) {

219 
c_°ªam
.
avaû_ö
 = c_°ªam.
avaû_out
 = 1;

220 
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_NO_FLUSH
);

221 
	`CHECK_ERR
(
îr
, "deflate");

225 
c_°ªam
.
avaû_out
 = 1;

226 
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_FINISH
);

227 i‡(
îr
 =
Z_STREAM_END
) ;

228 
	`CHECK_ERR
(
îr
, "deflate");

231 
îr
 = 
	`deÊ©eEnd
(&
c_°ªam
);

232 
	`CHECK_ERR
(
îr
, "deflateEnd");

233 
	}
}

238 
	$ã°_öÊ©e
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
)

239 
Byã
 *
com¥
, *
uncom¥
;

240 
uL⁄g
 
com¥Lí
, 
uncom¥Lí
;

242 
îr
;

243 
z_°ªam
 
d_°ªam
;

245 
	`°r˝y
((*)
uncom¥
, "garbage");

247 
d_°ªam
.
zÆloc
 = zalloc;

248 
d_°ªam
.
z‰ì
 = zfree;

249 
d_°ªam
.
›aque
 = (
voidpf
)0;

251 
d_°ªam
.
√xt_ö
 = 
com¥
;

252 
d_°ªam
.
avaû_ö
 = 0;

253 
d_°ªam
.
√xt_out
 = 
uncom¥
;

255 
îr
 = 
	`öÊ©eInô
(&
d_°ªam
);

256 
	`CHECK_ERR
(
îr
, "inflateInit");

258 
d_°ªam
.
tŸÆ_out
 < 
uncom¥Lí
 && d_°ªam.
tŸÆ_ö
 < 
com¥Lí
) {

259 
d_°ªam
.
avaû_ö
 = d_°ªam.
avaû_out
 = 1;

260 
îr
 = 
	`öÊ©e
(&
d_°ªam
, 
Z_NO_FLUSH
);

261 i‡(
îr
 =
Z_STREAM_END
) ;

262 
	`CHECK_ERR
(
îr
, "inflate");

265 
îr
 = 
	`öÊ©eEnd
(&
d_°ªam
);

266 
	`CHECK_ERR
(
îr
, "inflateEnd");

268 i‡(
	`°rcmp
((*)
uncom¥
, 
hñlo
)) {

269 
	`Ârötf
(
°dîr
, "bad inflate\n");

270 
	`exô
(1);

272 
	`¥ötf
("öÊ©e(): %s\n", (*)
uncom¥
);

274 
	}
}

279 
	$ã°_œrge_deÊ©e
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
)

280 
Byã
 *
com¥
, *
uncom¥
;

281 
uL⁄g
 
com¥Lí
, 
uncom¥Lí
;

283 
z_°ªam
 
c_°ªam
;

284 
îr
;

286 
c_°ªam
.
zÆloc
 = zalloc;

287 
c_°ªam
.
z‰ì
 = zfree;

288 
c_°ªam
.
›aque
 = (
voidpf
)0;

290 
îr
 = 
	`deÊ©eInô
(&
c_°ªam
, 
Z_BEST_SPEED
);

291 
	`CHECK_ERR
(
îr
, "deflateInit");

293 
c_°ªam
.
√xt_out
 = 
com¥
;

294 
c_°ªam
.
avaû_out
 = (
uI¡
)
com¥Lí
;

299 
c_°ªam
.
√xt_ö
 = 
uncom¥
;

300 
c_°ªam
.
avaû_ö
 = (
uI¡
)
uncom¥Lí
;

301 
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_NO_FLUSH
);

302 
	`CHECK_ERR
(
îr
, "deflate");

303 i‡(
c_°ªam
.
avaû_ö
 != 0) {

304 
	`Ârötf
(
°dîr
, "deflateÇot greedy\n");

305 
	`exô
(1);

309 
	`deÊ©eP¨ams
(&
c_°ªam
, 
Z_NO_COMPRESSION
, 
Z_DEFAULT_STRATEGY
);

310 
c_°ªam
.
√xt_ö
 = 
com¥
;

311 
c_°ªam
.
avaû_ö
 = (
uI¡
)
com¥Lí
/2;

312 
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_NO_FLUSH
);

313 
	`CHECK_ERR
(
îr
, "deflate");

316 
	`deÊ©eP¨ams
(&
c_°ªam
, 
Z_BEST_COMPRESSION
, 
Z_FILTERED
);

317 
c_°ªam
.
√xt_ö
 = 
uncom¥
;

318 
c_°ªam
.
avaû_ö
 = (
uI¡
)
uncom¥Lí
;

319 
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_NO_FLUSH
);

320 
	`CHECK_ERR
(
îr
, "deflate");

322 
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_FINISH
);

323 i‡(
îr
 !
Z_STREAM_END
) {

324 
	`Ârötf
(
°dîr
, "deflate shouldÑeport Z_STREAM_END\n");

325 
	`exô
(1);

327 
îr
 = 
	`deÊ©eEnd
(&
c_°ªam
);

328 
	`CHECK_ERR
(
îr
, "deflateEnd");

329 
	}
}

334 
	$ã°_œrge_öÊ©e
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
)

335 
Byã
 *
com¥
, *
uncom¥
;

336 
uL⁄g
 
com¥Lí
, 
uncom¥Lí
;

338 
îr
;

339 
z_°ªam
 
d_°ªam
;

341 
	`°r˝y
((*)
uncom¥
, "garbage");

343 
d_°ªam
.
zÆloc
 = zalloc;

344 
d_°ªam
.
z‰ì
 = zfree;

345 
d_°ªam
.
›aque
 = (
voidpf
)0;

347 
d_°ªam
.
√xt_ö
 = 
com¥
;

348 
d_°ªam
.
avaû_ö
 = (
uI¡
)
com¥Lí
;

350 
îr
 = 
	`öÊ©eInô
(&
d_°ªam
);

351 
	`CHECK_ERR
(
îr
, "inflateInit");

354 
d_°ªam
.
√xt_out
 = 
uncom¥
;

355 
d_°ªam
.
avaû_out
 = (
uI¡
)
uncom¥Lí
;

356 
îr
 = 
	`öÊ©e
(&
d_°ªam
, 
Z_NO_FLUSH
);

357 i‡(
îr
 =
Z_STREAM_END
) ;

358 
	`CHECK_ERR
(
îr
, "large inflate");

361 
îr
 = 
	`öÊ©eEnd
(&
d_°ªam
);

362 
	`CHECK_ERR
(
îr
, "inflateEnd");

364 i‡(
d_°ªam
.
tŸÆ_out
 !2*
uncom¥Lí
 + 
com¥Lí
/2) {

365 
	`Ârötf
(
°dîr
, "badÜ¨gêöÊ©e: %ld\n", 
d_°ªam
.
tŸÆ_out
);

366 
	`exô
(1);

368 
	`¥ötf
("large_inflate(): OK\n");

370 
	}
}

375 
	$ã°_Êush
(
com¥
, 
com¥Lí
)

376 
Byã
 *
com¥
;

377 
uL⁄g
 *
com¥Lí
;

379 
z_°ªam
 
c_°ªam
;

380 
îr
;

381 
uI¡
 
Àn
 = (uI¡)
	`°æí
(
hñlo
)+1;

383 
c_°ªam
.
zÆloc
 = zalloc;

384 
c_°ªam
.
z‰ì
 = zfree;

385 
c_°ªam
.
›aque
 = (
voidpf
)0;

387 
îr
 = 
	`deÊ©eInô
(&
c_°ªam
, 
Z_DEFAULT_COMPRESSION
);

388 
	`CHECK_ERR
(
îr
, "deflateInit");

390 
c_°ªam
.
√xt_ö
 = (
z_c⁄°
 *)
hñlo
;

391 
c_°ªam
.
√xt_out
 = 
com¥
;

392 
c_°ªam
.
avaû_ö
 = 3;

393 
c_°ªam
.
avaû_out
 = (
uI¡
)*
com¥Lí
;

394 
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_FULL_FLUSH
);

395 
	`CHECK_ERR
(
îr
, "deflate");

397 
com¥
[3]++;

398 
c_°ªam
.
avaû_ö
 = 
Àn
 - 3;

400 
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_FINISH
);

401 i‡(
îr
 !
Z_STREAM_END
) {

402 
	`CHECK_ERR
(
îr
, "deflate");

404 
îr
 = 
	`deÊ©eEnd
(&
c_°ªam
);

405 
	`CHECK_ERR
(
îr
, "deflateEnd");

407 *
com¥Lí
 = 
c_°ªam
.
tŸÆ_out
;

408 
	}
}

413 
	$ã°_sync
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
)

414 
Byã
 *
com¥
, *
uncom¥
;

415 
uL⁄g
 
com¥Lí
, 
uncom¥Lí
;

417 
îr
;

418 
z_°ªam
 
d_°ªam
;

420 
	`°r˝y
((*)
uncom¥
, "garbage");

422 
d_°ªam
.
zÆloc
 = zalloc;

423 
d_°ªam
.
z‰ì
 = zfree;

424 
d_°ªam
.
›aque
 = (
voidpf
)0;

426 
d_°ªam
.
√xt_ö
 = 
com¥
;

427 
d_°ªam
.
avaû_ö
 = 2;

429 
îr
 = 
	`öÊ©eInô
(&
d_°ªam
);

430 
	`CHECK_ERR
(
îr
, "inflateInit");

432 
d_°ªam
.
√xt_out
 = 
uncom¥
;

433 
d_°ªam
.
avaû_out
 = (
uI¡
)
uncom¥Lí
;

435 
	`öÊ©e
(&
d_°ªam
, 
Z_NO_FLUSH
);

436 
	`CHECK_ERR
(
îr
, "inflate");

438 
d_°ªam
.
avaû_ö
 = (
uI¡
)
com¥Lí
-2;

439 
îr
 = 
	`öÊ©eSync
(&
d_°ªam
);

440 
	`CHECK_ERR
(
îr
, "inflateSync");

442 
îr
 = 
	`öÊ©e
(&
d_°ªam
, 
Z_FINISH
);

443 i‡(
îr
 !
Z_DATA_ERROR
) {

444 
	`Ârötf
(
°dîr
, "inflate shouldÑeport DATA_ERROR\n");

446 
	`exô
(1);

448 
îr
 = 
	`öÊ©eEnd
(&
d_°ªam
);

449 
	`CHECK_ERR
(
îr
, "inflateEnd");

451 
	`¥ötf
("a·î inÊ©eSync(): hñ%s\n", (*)
uncom¥
);

452 
	}
}

457 
	$ã°_di˘_deÊ©e
(
com¥
, 
com¥Lí
)

458 
Byã
 *
com¥
;

459 
uL⁄g
 
com¥Lí
;

461 
z_°ªam
 
c_°ªam
;

462 
îr
;

464 
c_°ªam
.
zÆloc
 = zalloc;

465 
c_°ªam
.
z‰ì
 = zfree;

466 
c_°ªam
.
›aque
 = (
voidpf
)0;

468 
îr
 = 
	`deÊ©eInô
(&
c_°ªam
, 
Z_BEST_COMPRESSION
);

469 
	`CHECK_ERR
(
îr
, "deflateInit");

471 
îr
 = 
	`deÊ©eSëDi˘i⁄¨y
(&
c_°ªam
,

472 (c⁄° 
Byãf
*)
di˘i⁄¨y
, ()(dictionary));

473 
	`CHECK_ERR
(
îr
, "deflateSetDictionary");

475 
di˘Id
 = 
c_°ªam
.
adÀr
;

476 
c_°ªam
.
√xt_out
 = 
com¥
;

477 
c_°ªam
.
avaû_out
 = (
uI¡
)
com¥Lí
;

479 
c_°ªam
.
√xt_ö
 = (
z_c⁄°
 *)
hñlo
;

480 
c_°ªam
.
avaû_ö
 = (
uI¡
)
	`°æí
(
hñlo
)+1;

482 
îr
 = 
	`deÊ©e
(&
c_°ªam
, 
Z_FINISH
);

483 i‡(
îr
 !
Z_STREAM_END
) {

484 
	`Ârötf
(
°dîr
, "deflate shouldÑeport Z_STREAM_END\n");

485 
	`exô
(1);

487 
îr
 = 
	`deÊ©eEnd
(&
c_°ªam
);

488 
	`CHECK_ERR
(
îr
, "deflateEnd");

489 
	}
}

494 
	$ã°_di˘_öÊ©e
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
)

495 
Byã
 *
com¥
, *
uncom¥
;

496 
uL⁄g
 
com¥Lí
, 
uncom¥Lí
;

498 
îr
;

499 
z_°ªam
 
d_°ªam
;

501 
	`°r˝y
((*)
uncom¥
, "garbage");

503 
d_°ªam
.
zÆloc
 = zalloc;

504 
d_°ªam
.
z‰ì
 = zfree;

505 
d_°ªam
.
›aque
 = (
voidpf
)0;

507 
d_°ªam
.
√xt_ö
 = 
com¥
;

508 
d_°ªam
.
avaû_ö
 = (
uI¡
)
com¥Lí
;

510 
îr
 = 
	`öÊ©eInô
(&
d_°ªam
);

511 
	`CHECK_ERR
(
îr
, "inflateInit");

513 
d_°ªam
.
√xt_out
 = 
uncom¥
;

514 
d_°ªam
.
avaû_out
 = (
uI¡
)
uncom¥Lí
;

517 
îr
 = 
	`öÊ©e
(&
d_°ªam
, 
Z_NO_FLUSH
);

518 i‡(
îr
 =
Z_STREAM_END
) ;

519 i‡(
îr
 =
Z_NEED_DICT
) {

520 i‡(
d_°ªam
.
adÀr
 !
di˘Id
) {

521 
	`Ârötf
(
°dîr
, "unexpected dictionary");

522 
	`exô
(1);

524 
îr
 = 
	`öÊ©eSëDi˘i⁄¨y
(&
d_°ªam
, (c⁄° 
Byãf
*)
di˘i⁄¨y
,

525 ()(
di˘i⁄¨y
));

527 
	`CHECK_ERR
(
îr
, "inflate with dict");

530 
îr
 = 
	`öÊ©eEnd
(&
d_°ªam
);

531 
	`CHECK_ERR
(
îr
, "inflateEnd");

533 i‡(
	`°rcmp
((*)
uncom¥
, 
hñlo
)) {

534 
	`Ârötf
(
°dîr
, "bad inflate with dict\n");

535 
	`exô
(1);

537 
	`¥ötf
("öÊ©êwôh di˘i⁄¨y: %s\n", (*)
uncom¥
);

539 
	}
}

545 
	$maö
(
¨gc
, 
¨gv
)

546 
¨gc
;

547 *
¨gv
[];

549 
Byã
 *
com¥
, *
uncom¥
;

550 
uL⁄g
 
com¥Lí
 = 10000*();

551 
uL⁄g
 
uncom¥Lí
 = 
com¥Lí
;

552 c⁄° * 
myVîsi⁄
 = 
ZLIB_VERSION
;

554 i‡(
	`zlibVîsi⁄
()[0] !
myVîsi⁄
[0]) {

555 
	`Ârötf
(
°dîr
, "incompatible zlib version\n");

556 
	`exô
(1);

558 } i‡(
	`°rcmp
(
	`zlibVîsi⁄
(), 
ZLIB_VERSION
) != 0) {

559 
	`Ârötf
(
°dîr
, "warning: different zlib version\n");

562 
	`¥ötf
("zlib version %s = 0x%04x, compile flags = 0x%lx\n",

563 
ZLIB_VERSION
, 
ZLIB_VERNUM
, 
	`zlibCompûeFœgs
());

565 
com¥
 = (
Byã
*)
	`ˇŒoc
((
uI¡
)
com¥Lí
, 1);

566 
uncom¥
 = (
Byã
*)
	`ˇŒoc
((
uI¡
)
uncom¥Lí
, 1);

570 i‡(
com¥
 =
Z_NULL
 || 
uncom¥
 == Z_NULL) {

571 
	`¥ötf
("out of memory\n");

572 
	`exô
(1);

575 #ifde‡
Z_SOLO


576 
¨gc
 = 
	`°æí
(
¨gv
[0]);

578 
	`ã°_com¥ess
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
);

580 
	`ã°_gzio
((
¨gc
 > 1 ? 
¨gv
[1] : 
TESTFILE
),

581 
uncom¥
, 
uncom¥Lí
);

584 
	`ã°_deÊ©e
(
com¥
, 
com¥Lí
);

585 
	`ã°_öÊ©e
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
);

587 
	`ã°_œrge_deÊ©e
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
);

588 
	`ã°_œrge_öÊ©e
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
);

590 
	`ã°_Êush
(
com¥
, &
com¥Lí
);

591 
	`ã°_sync
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
);

592 
com¥Lí
 = 
uncom¥Lí
;

594 
	`ã°_di˘_deÊ©e
(
com¥
, 
com¥Lí
);

595 
	`ã°_di˘_öÊ©e
(
com¥
, 
com¥Lí
, 
uncom¥
, 
uncom¥Lí
);

597 
	`‰ì
(
com¥
);

598 
	`‰ì
(
uncom¥
);

601 
	}
}

	@zlib-1.2.8/test/infcover.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<as£π.h
>

12 
	~"zlib.h
"

16 
	#ZLIB_INTERNAL


	)

17 
	~"ö·ªes.h
"

18 
	~"öÊ©e.h
"

20 
	#loˇl
 

	)

56 
	smem_ôem
 {

57 *
	m±r
;

58 
size_t
 
	msize
;

59 
mem_ôem
 *
	m√xt
;

63 
	smem_z⁄e
 {

64 
mem_ôem
 *
	mfú°
;

65 
size_t
 
	mtŸÆ
, 
	mhighw©î
;

66 
size_t
 
	mlimô
;

67 
	mnŸlifo
, 
	mrogue
;

71 
loˇl
 *
	$mem_Æloc
(*
mem
, 
cou¡
, 
size
)

73 *
±r
;

74 
mem_ôem
 *
ôem
;

75 
mem_z⁄e
 *
z⁄e
 = 
mem
;

76 
size_t
 
Àn
 = 
cou¡
 * (size_t)
size
;

79 i‡(
z⁄e
 =
NULL
 || (z⁄e->
limô
 && z⁄e->
tŸÆ
 + 
Àn
 > zone->limit))

80  
NULL
;

84 
±r
 = 
	`mÆloc
(
Àn
);

85 i‡(
±r
 =
NULL
)

86  
NULL
;

87 
	`mem£t
(
±r
, 0xa5, 
Àn
);

90 
ôem
 = 
	`mÆloc
((
mem_ôem
));

91 i‡(
ôem
 =
NULL
) {

92 
	`‰ì
(
±r
);

93  
NULL
;

95 
ôem
->
±r
 =Ötr;

96 
ôem
->
size
 = 
Àn
;

99 
ôem
->
√xt
 = 
z⁄e
->
fú°
;

100 
z⁄e
->
fú°
 = 
ôem
;

103 
z⁄e
->
tŸÆ
 +
ôem
->
size
;

104 i‡(
z⁄e
->
tŸÆ
 > z⁄e->
highw©î
)

105 
z⁄e
->
highw©î
 = z⁄e->
tŸÆ
;

108  
±r
;

109 
	}
}

112 
loˇl
 
	$mem_‰ì
(*
mem
, *
±r
)

114 
mem_ôem
 *
ôem
, *
√xt
;

115 
mem_z⁄e
 *
z⁄e
 = 
mem
;

118 i‡(
z⁄e
 =
NULL
) {

119 
	`‰ì
(
±r
);

125 
√xt
 = 
z⁄e
->
fú°
;

126 i‡(
√xt
) {

127 i‡(
√xt
->
±r
 ==Ötr)

128 
z⁄e
->
fú°
 = 
√xt
->next;

131 
ôem
 = 
√xt
;

132 
√xt
 = 
ôem
->next;

133 } 
√xt
 !
NULL
 &&Çext->
±r
 !=Ötr);

134 i‡(
√xt
) {

135 
ôem
->
√xt
 =Çext->next;

136 
z⁄e
->
nŸlifo
++;

143 i‡(
√xt
) {

144 
z⁄e
->
tŸÆ
 -
√xt
->
size
;

145 
	`‰ì
(
√xt
);

150 
z⁄e
->
rogue
++;

153 
	`‰ì
(
±r
);

154 
	}
}

158 
loˇl
 
	$mem_£tup
(
z_°ªam
 *
°rm
)

160 
mem_z⁄e
 *
z⁄e
;

162 
z⁄e
 = 
	`mÆloc
((
mem_z⁄e
));

163 
	`as£π
(
z⁄e
 !
NULL
);

164 
z⁄e
->
fú°
 = 
NULL
;

165 
z⁄e
->
tŸÆ
 = 0;

166 
z⁄e
->
highw©î
 = 0;

167 
z⁄e
->
limô
 = 0;

168 
z⁄e
->
nŸlifo
 = 0;

169 
z⁄e
->
rogue
 = 0;

170 
°rm
->
›aque
 = 
z⁄e
;

171 
°rm
->
zÆloc
 = 
mem_Æloc
;

172 
°rm
->
z‰ì
 = 
mem_‰ì
;

173 
	}
}

176 
loˇl
 
	$mem_limô
(
z_°ªam
 *
°rm
, 
size_t
 
limô
)

178 
mem_z⁄e
 *
z⁄e
 = 
°rm
->
›aque
;

180 
z⁄e
->
limô
 =Üimit;

181 
	}
}

184 
loˇl
 
	$mem_u£d
(
z_°ªam
 *
°rm
, *
¥efix
)

186 
mem_z⁄e
 *
z⁄e
 = 
°rm
->
›aque
;

188 
	`Ârötf
(
°dîr
, "%s: %luáŒoˇãd\n", 
¥efix
, 
z⁄e
->
tŸÆ
);

189 
	}
}

192 
loˇl
 
	$mem_high
(
z_°ªam
 *
°rm
, *
¥efix
)

194 
mem_z⁄e
 *
z⁄e
 = 
°rm
->
›aque
;

196 
	`Ârötf
(
°dîr
, "%s: %lu high w©î m¨k\n", 
¥efix
, 
z⁄e
->
highw©î
);

197 
	}
}

200 
loˇl
 
	$mem_d⁄e
(
z_°ªam
 *
°rm
, *
¥efix
)

202 
cou¡
 = 0;

203 
mem_ôem
 *
ôem
, *
√xt
;

204 
mem_z⁄e
 *
z⁄e
 = 
°rm
->
›aque
;

207 
	`mem_high
(
°rm
, 
¥efix
);

210 
ôem
 = 
z⁄e
->
fú°
;

211 
ôem
 !
NULL
) {

212 
	`‰ì
(
ôem
->
±r
);

213 
√xt
 = 
ôem
->next;

214 
	`‰ì
(
ôem
);

215 
ôem
 = 
√xt
;

216 
cou¡
++;

220 i‡(
cou¡
 || 
z⁄e
->
tŸÆ
)

221 
	`Ârötf
(
°dîr
, "** %s: %lu bytes in %d blocksÇot freed\n",

222 
¥efix
, 
z⁄e
->
tŸÆ
, 
cou¡
);

223 i‡(
z⁄e
->
nŸlifo
)

224 
	`Ârötf
(
°dîr
, "** %s: %d fªe†nŸ LIFO\n", 
¥efix
, 
z⁄e
->
nŸlifo
);

225 i‡(
z⁄e
->
rogue
)

226 
	`Ârötf
(
°dîr
, "** %s: %d freesÇotÑecognized\n",

227 
¥efix
, 
z⁄e
->
rogue
);

230 
	`‰ì
(
z⁄e
);

231 
°rm
->
›aque
 = 
Z_NULL
;

232 
°rm
->
zÆloc
 = 
Z_NULL
;

233 
°rm
->
z‰ì
 = 
Z_NULL
;

234 
	}
}

245 
loˇl
 *
	$h2b
(c⁄° *
hex
, *
Àn
)

247 *
ö
;

248 
√xt
, 
vÆ
;

250 
ö
 = 
	`mÆloc
((
	`°æí
(
hex
) + 1) >> 1);

251 i‡(
ö
 =
NULL
)

252  
NULL
;

253 
√xt
 = 0;

254 
vÆ
 = 1;

256 i‡(*
hex
 >= '0' && *hex <= '9')

257 
vÆ
 = (vÆ << 4Ë+ *
hex
 - '0';

258 i‡(*
hex
 >= 'A' && *hex <= 'F')

259 
vÆ
 = (vÆ << 4Ë+ *
hex
 - 'A' + 10;

260 i‡(*
hex
 >= 'a' && *hex <= 'f')

261 
vÆ
 = (vÆ << 4Ë+ *
hex
 - 'a' + 10;

262 i‡(
vÆ
 != 1 && val < 32)

263 
vÆ
 += 240;

264 i‡(
vÆ
 > 255) {

265 
ö
[
√xt
++] = 
vÆ
 & 0xff;

266 
vÆ
 = 1;

268 } *
hex
++);

269 i‡(
Àn
 !
NULL
)

270 *
Àn
 = 
√xt
;

271 
ö
 = 
	`ªÆlocf
(ö, 
√xt
);

272  
ö
;

273 
	}
}

284 
loˇl
 
	$öf
(*
hex
, *
wh©
, 
°ï
, 
wö
, 
Àn
,

285 
îr
)

287 
ªt
;

288 
have
;

289 *
ö
, *
out
;

290 
z_°ªam
 
°rm
, 
c›y
;

291 
gz_hódî
 
hód
;

293 
	`mem_£tup
(&
°rm
);

294 
°rm
.
avaû_ö
 = 0;

295 
°rm
.
√xt_ö
 = 
Z_NULL
;

296 
ªt
 = 
	`öÊ©eInô2
(&
°rm
, 
wö
);

297 i‡(
ªt
 !
Z_OK
) {

298 
	`mem_d⁄e
(&
°rm
, 
wh©
);

301 
out
 = 
	`mÆloc
(
Àn
); 
	`as£π
(ouà!
NULL
);

302 i‡(
wö
 == 47) {

303 
hód
.
exåa
 = 
out
;

304 
hód
.
exåa_max
 = 
Àn
;

305 
hód
.
«me
 = 
out
;

306 
hód
.
«me_max
 = 
Àn
;

307 
hód
.
commít
 = 
out
;

308 
hód
.
comm_max
 = 
Àn
;

309 
ªt
 = 
	`öÊ©eGëHódî
(&
°rm
, &
hód
); 
	`as£π
‘ë =
Z_OK
);

311 
ö
 = 
	`h2b
(
hex
, &
have
); 
	`as£π
(ö !
NULL
);

312 i‡(
°ï
 =0 || sã∞> 
have
)

313 
°ï
 = 
have
;

314 
°rm
.
avaû_ö
 = 
°ï
;

315 
have
 -
°ï
;

316 
°rm
.
√xt_ö
 = 
ö
;

318 
°rm
.
avaû_out
 = 
Àn
;

319 
°rm
.
√xt_out
 = 
out
;

320 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_NO_FLUSH
); 
	`as£π
(
îr
 == 9 ||Ñet ==Érr);

321 i‡(
ªt
 !
Z_OK
 &&Ñë !
Z_BUF_ERROR
 &&Ñë !
Z_NEED_DICT
)

323 i‡(
ªt
 =
Z_NEED_DICT
) {

324 
ªt
 = 
	`öÊ©eSëDi˘i⁄¨y
(&
°rm
, 
ö
, 1);

325 
	`as£π
(
ªt
 =
Z_DATA_ERROR
);

326 
	`mem_limô
(&
°rm
, 1);

327 
ªt
 = 
	`öÊ©eSëDi˘i⁄¨y
(&
°rm
, 
out
, 0);

328 
	`as£π
(
ªt
 =
Z_MEM_ERROR
);

329 
	`mem_limô
(&
°rm
, 0);

330 ((
öÊ©e_°©e
 *)
°rm
.
°©e
)->
mode
 = 
DICT
;

331 
ªt
 = 
	`öÊ©eSëDi˘i⁄¨y
(&
°rm
, 
out
, 0);

332 
	`as£π
(
ªt
 =
Z_OK
);

333 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_NO_FLUSH
); 
	`as£π
‘ë =
Z_BUF_ERROR
);

335 
ªt
 = 
	`öÊ©eC›y
(&
c›y
, &
°rm
); 
	`as£π
‘ë =
Z_OK
);

336 
ªt
 = 
	`öÊ©eEnd
(&
c›y
); 
	`as£π
‘ë =
Z_OK
);

337 
îr
 = 9;

338 
have
 +
°rm
.
avaû_ö
;

339 
°rm
.
avaû_ö
 = 
°ï
 > 
have
 ? have : step;

340 
have
 -
°rm
.
avaû_ö
;

341 } 
°rm
.
avaû_ö
);

342 
	`‰ì
(
ö
);

343 
	`‰ì
(
out
);

344 
ªt
 = 
	`öÊ©eRe£t2
(&
°rm
, -8); 
	`as£π
‘ë =
Z_OK
);

345 
ªt
 = 
	`öÊ©eEnd
(&
°rm
); 
	`as£π
‘ë =
Z_OK
);

346 
	`mem_d⁄e
(&
°rm
, 
wh©
);

347 
	}
}

350 
loˇl
 
	$covî_suµ‹t
()

352 
ªt
;

353 
z_°ªam
 
°rm
;

355 
	`mem_£tup
(&
°rm
);

356 
°rm
.
avaû_ö
 = 0;

357 
°rm
.
√xt_ö
 = 
Z_NULL
;

358 
ªt
 = 
	`öÊ©eInô
(&
°rm
); 
	`as£π
‘ë =
Z_OK
);

359 
	`mem_u£d
(&
°rm
, "inflate init");

360 
ªt
 = 
	`öÊ©ePrime
(&
°rm
, 5, 31); 
	`as£π
‘ë =
Z_OK
);

361 
ªt
 = 
	`öÊ©ePrime
(&
°rm
, -1, 0); 
	`as£π
‘ë =
Z_OK
);

362 
ªt
 = 
	`öÊ©eSëDi˘i⁄¨y
(&
°rm
, 
Z_NULL
, 0);

363 
	`as£π
(
ªt
 =
Z_STREAM_ERROR
);

364 
ªt
 = 
	`öÊ©eEnd
(&
°rm
); 
	`as£π
‘ë =
Z_OK
);

365 
	`mem_d⁄e
(&
°rm
, "prime");

367 
	`öf
("63 0", "f‹˚ wödowáŒoˇti⁄", 0, -15, 1, 
Z_OK
);

368 
	`öf
("63 18 5", "f‹˚ wödowÑïœ˚mít", 0, -8, 259, 
Z_OK
);

369 
	`öf
("63 18 68 30 d0 0 0", "f‹˚ s∂ô wödow upd©e", 4, -8, 259, 
Z_OK
);

370 
	`öf
("3 0", "u£ fixed blocks", 0, -15, 1, 
Z_STREAM_END
);

371 
	`öf
("", "bad wödow size", 0, 1, 0, 
Z_STREAM_ERROR
);

373 
	`mem_£tup
(&
°rm
);

374 
°rm
.
avaû_ö
 = 0;

375 
°rm
.
√xt_ö
 = 
Z_NULL
;

376 
ªt
 = 
	`öÊ©eInô_
(&
°rm
, 
ZLIB_VERSION
 - 1, ()(
z_°ªam
));

377 
	`as£π
(
ªt
 =
Z_VERSION_ERROR
);

378 
	`mem_d⁄e
(&
°rm
, "wrong version");

380 
°rm
.
avaû_ö
 = 0;

381 
°rm
.
√xt_ö
 = 
Z_NULL
;

382 
ªt
 = 
	`öÊ©eInô
(&
°rm
); 
	`as£π
‘ë =
Z_OK
);

383 
ªt
 = 
	`öÊ©eEnd
(&
°rm
); 
	`as£π
‘ë =
Z_OK
);

384 
	`Âuts
("öÊ©êbuût-ö mem‹yÑoutöes\n", 
°dîr
);

385 
	}
}

388 
loˇl
 
	$covî_wøp
()

390 
ªt
;

391 
z_°ªam
 
°rm
, 
c›y
;

392 
di˘
[257];

394 
ªt
 = 
	`öÊ©e
(
Z_NULL
, 0); 
	`as£π
‘ë =
Z_STREAM_ERROR
);

395 
ªt
 = 
	`öÊ©eEnd
(
Z_NULL
); 
	`as£π
‘ë =
Z_STREAM_ERROR
);

396 
ªt
 = 
	`öÊ©eC›y
(
Z_NULL
, Z_NULL); 
	`as£π
‘ë =
Z_STREAM_ERROR
);

397 
	`Âuts
("öÊ©êbadÖ¨amëîs\n", 
°dîr
);

399 
	`öf
("1‡8b 0 0", "bad gzù mëhod", 0, 31, 0, 
Z_DATA_ERROR
);

400 
	`öf
("1‡8b 8 80", "bad gzù fœgs", 0, 31, 0, 
Z_DATA_ERROR
);

401 
	`öf
("77 85", "bad zlib mëhod", 0, 15, 0, 
Z_DATA_ERROR
);

402 
	`öf
("8 99", "£àwödow sizê‰om hódî", 0, 0, 0, 
Z_OK
);

403 
	`öf
("78 9c", "bad zlib wödow size", 0, 8, 0, 
Z_DATA_ERROR
);

404 
	`öf
("78 9¯63 0 0 0 1 0 1", "checkádÀr32", 0, 15, 1, 
Z_STREAM_END
);

405 
	`öf
("1f 8b 8 1e 0 0 0 0 0 0 1 0 0 0 0 0 0", "bad header crc", 0, 47, 1,

406 
Z_DATA_ERROR
);

407 
	`öf
("1f 8b 8 2 0 0 0 0 0 0 1d 26 3 0 0 0 0 0 0 0 0 0", "check gzipÜength",

408 0, 47, 0, 
Z_STREAM_END
);

409 
	`öf
("78 90", "bad zlib hódî check", 0, 47, 0, 
Z_DATA_ERROR
);

410 
	`öf
("8 b8 0 0 0 1", "√ed di˘i⁄¨y", 0, 8, 0, 
Z_NEED_DICT
);

411 
	`öf
("78 9¯63 0", "compuãádÀr32", 0, 15, 1, 
Z_OK
);

413 
	`mem_£tup
(&
°rm
);

414 
°rm
.
avaû_ö
 = 0;

415 
°rm
.
√xt_ö
 = 
Z_NULL
;

416 
ªt
 = 
	`öÊ©eInô2
(&
°rm
, -8);

417 
°rm
.
avaû_ö
 = 2;

418 
°rm
.
√xt_ö
 = (*)"\x63";

419 
°rm
.
avaû_out
 = 1;

420 
°rm
.
√xt_out
 = (*)&
ªt
;

421 
	`mem_limô
(&
°rm
, 1);

422 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_NO_FLUSH
); 
	`as£π
‘ë =
Z_MEM_ERROR
);

423 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_NO_FLUSH
); 
	`as£π
‘ë =
Z_MEM_ERROR
);

424 
	`mem_limô
(&
°rm
, 0);

425 
	`mem£t
(
di˘
, 0, 257);

426 
ªt
 = 
	`öÊ©eSëDi˘i⁄¨y
(&
°rm
, 
di˘
, 257);

427 
	`as£π
(
ªt
 =
Z_OK
);

428 
	`mem_limô
(&
°rm
, ((
öÊ©e_°©e
) << 1) + 256);

429 
ªt
 = 
	`öÊ©ePrime
(&
°rm
, 16, 0); 
	`as£π
‘ë =
Z_OK
);

430 
°rm
.
avaû_ö
 = 2;

431 
°rm
.
√xt_ö
 = (*)"\x80";

432 
ªt
 = 
	`öÊ©eSync
(&
°rm
); 
	`as£π
‘ë =
Z_DATA_ERROR
);

433 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_NO_FLUSH
); 
	`as£π
‘ë =
Z_STREAM_ERROR
);

434 
°rm
.
avaû_ö
 = 4;

435 
°rm
.
√xt_ö
 = (*)"\0\0\xff\xff";

436 
ªt
 = 
	`öÊ©eSync
(&
°rm
); 
	`as£π
‘ë =
Z_OK
);

437 ()
	`öÊ©eSyncPoöt
(&
°rm
);

438 
ªt
 = 
	`öÊ©eC›y
(&
c›y
, &
°rm
); 
	`as£π
‘ë =
Z_MEM_ERROR
);

439 
	`mem_limô
(&
°rm
, 0);

440 
ªt
 = 
	`öÊ©eUndîmöe
(&
°rm
, 1); 
	`as£π
‘ë =
Z_DATA_ERROR
);

441 ()
	`öÊ©eM¨k
(&
°rm
);

442 
ªt
 = 
	`öÊ©eEnd
(&
°rm
); 
	`as£π
‘ë =
Z_OK
);

443 
	`mem_d⁄e
(&
°rm
, "miscellaneous, force memoryÉrrors");

444 
	}
}

447 
loˇl
 
	$puŒ
(*
desc
, **
buf
)

449 
√xt
 = 0;

450 
d©
[] = {0x63, 0, 2, 0};

451 
öÊ©e_°©e
 *
°©e
;

453 i‡(
desc
 =
Z_NULL
) {

454 
√xt
 = 0;

457 
°©e
 = (*)((
z_°ªam
 *)
desc
)->state;

458 i‡(
°©e
 !
Z_NULL
)

459 
°©e
->
mode
 = 
SYNC
;

460  
√xt
 < (
d©
Ë? (*
buf
 = dat +Çext++, 1) : 0;

461 
	}
}

463 
loˇl
 
	$push
(*
desc
, *
buf
, 
Àn
)

465 
buf
 +
Àn
;

466  
desc
 !
Z_NULL
;

467 
	}
}

470 
loˇl
 
	$covî_back
()

472 
ªt
;

473 
z_°ªam
 
°rm
;

474 
wö
[32768];

476 
ªt
 = 
	`öÊ©eBackInô_
(
Z_NULL
, 0, 
wö
, 0, 0);

477 
	`as£π
(
ªt
 =
Z_VERSION_ERROR
);

478 
ªt
 = 
	`öÊ©eBackInô
(
Z_NULL
, 0, 
wö
); 
	`as£π
‘ë =
Z_STREAM_ERROR
);

479 
ªt
 = 
	`öÊ©eBack
(
Z_NULL
, Z_NULL, Z_NULL, Z_NULL, Z_NULL);

480 
	`as£π
(
ªt
 =
Z_STREAM_ERROR
);

481 
ªt
 = 
	`öÊ©eBackEnd
(
Z_NULL
); 
	`as£π
‘ë =
Z_STREAM_ERROR
);

482 
	`Âuts
("öÊ©eBack badÖ¨amëîs\n", 
°dîr
);

484 
	`mem_£tup
(&
°rm
);

485 
ªt
 = 
	`öÊ©eBackInô
(&
°rm
, 15, 
wö
); 
	`as£π
‘ë =
Z_OK
);

486 
°rm
.
avaû_ö
 = 2;

487 
°rm
.
√xt_ö
 = (*)"\x03";

488 
ªt
 = 
	`öÊ©eBack
(&
°rm
, 
puŒ
, 
Z_NULL
, 
push
, Z_NULL);

489 
	`as£π
(
ªt
 =
Z_STREAM_END
);

491 
°rm
.
avaû_ö
 = 3;

492 
°rm
.
√xt_ö
 = (*)"\x63\x00";

493 
ªt
 = 
	`öÊ©eBack
(&
°rm
, 
puŒ
, 
Z_NULL
, 
push
, &strm);

494 
	`as£π
(
ªt
 =
Z_BUF_ERROR
);

496 
ªt
 = 
	`öÊ©eBack
(&
°rm
, 
puŒ
, &°rm, 
push
, 
Z_NULL
);

497 
	`as£π
(
ªt
 =
Z_STREAM_ERROR
);

498 
ªt
 = 
	`öÊ©eBackEnd
(&
°rm
); 
	`as£π
‘ë =
Z_OK
);

499 
	`mem_d⁄e
(&
°rm
, "inflateBack bad state");

501 
ªt
 = 
	`öÊ©eBackInô
(&
°rm
, 15, 
wö
); 
	`as£π
‘ë =
Z_OK
);

502 
ªt
 = 
	`öÊ©eBackEnd
(&
°rm
); 
	`as£π
‘ë =
Z_OK
);

503 
	`Âuts
("öÊ©eBack buût-ö mem‹yÑoutöes\n", 
°dîr
);

504 
	}
}

507 
loˇl
 
	$åy
(*
hex
, *
id
, 
îr
)

509 
ªt
;

510 
Àn
, 
size
;

511 *
ö
, *
out
, *
wö
;

512 *
¥efix
;

513 
z_°ªam
 
°rm
;

516 
ö
 = 
	`h2b
(
hex
, &
Àn
);

517 
	`as£π
(
ö
 !
NULL
);

520 
size
 = 
Àn
 << 3;

521 
out
 = 
	`mÆloc
(
size
);

522 
	`as£π
(
out
 !
NULL
);

523 
wö
 = 
	`mÆloc
(32768);

524 
	`as£π
(
wö
 !
NULL
);

525 
¥efix
 = 
	`mÆloc
(
	`°æí
(
id
) + 6);

526 
	`as£π
(
¥efix
 !
NULL
);

529 
	`°r˝y
(
¥efix
, 
id
);

530 
	`°rˇt
(
¥efix
, "-late");

531 
	`mem_£tup
(&
°rm
);

532 
°rm
.
avaû_ö
 = 0;

533 
°rm
.
√xt_ö
 = 
Z_NULL
;

534 
ªt
 = 
	`öÊ©eInô2
(&
°rm
, 
îr
 < 0 ? 47 : -15);

535 
	`as£π
(
ªt
 =
Z_OK
);

536 
°rm
.
avaû_ö
 = 
Àn
;

537 
°rm
.
√xt_ö
 = 
ö
;

539 
°rm
.
avaû_out
 = 
size
;

540 
°rm
.
√xt_out
 = 
out
;

541 
ªt
 = 
	`öÊ©e
(&
°rm
, 
Z_TREES
);

542 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
 &&Ñë !
Z_MEM_ERROR
);

543 i‡(
ªt
 =
Z_DATA_ERROR
 ||Ñë =
Z_NEED_DICT
)

545 } 
°rm
.
avaû_ö
 || såm.
avaû_out
 == 0);

546 i‡(
îr
) {

547 
	`as£π
(
ªt
 =
Z_DATA_ERROR
);

548 
	`as£π
(
	`°rcmp
(
id
, 
°rm
.
msg
) == 0);

550 
	`öÊ©eEnd
(&
°rm
);

551 
	`mem_d⁄e
(&
°rm
, 
¥efix
);

554 i‡(
îr
 >= 0) {

555 
	`°r˝y
(
¥efix
, 
id
);

556 
	`°rˇt
(
¥efix
, "-back");

557 
	`mem_£tup
(&
°rm
);

558 
ªt
 = 
	`öÊ©eBackInô
(&
°rm
, 15, 
wö
);

559 
	`as£π
(
ªt
 =
Z_OK
);

560 
°rm
.
avaû_ö
 = 
Àn
;

561 
°rm
.
√xt_ö
 = 
ö
;

562 
ªt
 = 
	`öÊ©eBack
(&
°rm
, 
puŒ
, 
Z_NULL
, 
push
, Z_NULL);

563 
	`as£π
(
ªt
 !
Z_STREAM_ERROR
);

564 i‡(
îr
) {

565 
	`as£π
(
ªt
 =
Z_DATA_ERROR
);

566 
	`as£π
(
	`°rcmp
(
id
, 
°rm
.
msg
) == 0);

568 
	`öÊ©eBackEnd
(&
°rm
);

569 
	`mem_d⁄e
(&
°rm
, 
¥efix
);

573 
	`‰ì
(
¥efix
);

574 
	`‰ì
(
wö
);

575 
	`‰ì
(
out
);

576 
	`‰ì
(
ö
);

577  
ªt
;

578 
	}
}

581 
loˇl
 
	$covî_öÊ©e
()

583 
	`åy
("0 0 0 0 0", "invalid stored blockÜengths", 1);

584 
	`åy
("3 0", "fixed", 0);

585 
	`åy
("6", "invalid blockÅype", 1);

586 
	`åy
("1 1 0 fe ff 0", "stored", 0);

587 
	`åy
("fc 0 0", "too manyÜength or distance symbols", 1);

588 
	`åy
("4 0 fe ff", "invalid codeÜengths set", 1);

589 
	`åy
("4 0 24 49 0", "invalid bitÜengthÑepeat", 1);

590 
	`åy
("4 0 24É9 ff ff", "invalid bitÜengthÑepeat", 1);

591 
	`åy
("4 0 24É9 ff 6d", "invalid code -- missingÉnd-of-block", 1);

592 
	`åy
("4 80 49 92 24 49 92 24 71 ff ff 93 11 0",

594 
	`åy
("4 80 49 92 24 49 92 24 f b4 ff ff c3 84", "invalid distances set", 1);

595 
	`åy
("4 c0 81 8 0 0 0 0 20 7fÉb b 0 0", "invalidÜiteral/length code", 1);

596 
	`åy
("2 7e ff ff", "invalid distance code", 1);

597 
	`åy
("c c0 81 0 0 0 0 0 90 ff 6b 4 0", "invalid distanceÅoo far back", 1);

600 
	`åy
("1f 8b 8 0 0 0 0 0 0 0 3 0 0 0 0 1", "incorrect data check", -1);

601 
	`åy
("1f 8b 8 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 1",

603 
	`åy
("5 c0 21 d 0 0 0 80 b0 fe 6d 2f 91 6c", "pull 17", 0);

604 
	`åy
("5É0 81 91 24 cb b2 2c 49É2 f 2e 8b 9a 47 56 9f fb feÉc d2 ff 1f",

606 
	`åy
("ed c0 1 1 0 0 0 40 20 ff 57 1b 42 2c 4f", "lengthÉxtra", 0);

607 
	`åy
("ed cf c1 b1 2c 47 10 c4 30 fa 6f 35 1d 1 82 59 3d fb be 2e 2a fc f c",

609 
	`åy
("ed c0 81 0 0 0 0 80á0 fdá9 17á9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "

611 
	`öf
("2 8 20 80 0 3 0", "inflate_fast TYPEÑeturn", 0, -15, 258,

612 
Z_STREAM_END
);

613 
	`öf
("63 18 5 40 c 0", "wödow wøp", 3, -8, 300, 
Z_OK
);

614 
	}
}

617 
loˇl
 
	$covî_åìs
()

619 
ªt
;

620 
bôs
;

621 
Àns
[16], 
w‹k
[16];

622 
code
 *
√xt
, 
èbÀ
[
ENOUGH_DISTS
];

626 
bôs
 = 0; bits < 15; bits++)

627 
Àns
[
bôs
] = ()(bits + 1);

628 
Àns
[15] = 15;

629 
√xt
 = 
èbÀ
;

630 
bôs
 = 15;

631 
ªt
 = 
	`öÊ©e_èbÀ
(
DISTS
, 
Àns
, 16, &
√xt
, &
bôs
, 
w‹k
);

632 
	`as£π
(
ªt
 == 1);

633 
√xt
 = 
èbÀ
;

634 
bôs
 = 1;

635 
ªt
 = 
	`öÊ©e_èbÀ
(
DISTS
, 
Àns
, 16, &
√xt
, &
bôs
, 
w‹k
);

636 
	`as£π
(
ªt
 == 1);

637 
	`Âuts
("öÊ©e_èbÀÇŸÉnoughÉº‹s\n", 
°dîr
);

638 
	}
}

641 
loˇl
 
	$covî_Á°
()

643 
	`öf
("e5É0 81ád 6d cb b2 2c c9 01 1e 59 63áe 7dÉe fb 4d fd b5 35 41 68"

644 " f‡7‡0‡0 0 0", "Á°ÜígthÉxå®bôs", 0, -8, 258, 
Z_DATA_ERROR
);

645 
	`öf
("25 fd 81 b5 6d 59 b6 6a 49Éaáf 35 6 34Éb 8c b9 f6 b9 1eÉf 67 49"

647 
Z_DATA_ERROR
);

648 
	`öf
("3 7e 0 0 0 0 0", "fast invalid distance code", 0, -8, 258,

649 
Z_DATA_ERROR
);

650 
	`öf
("1b 7 0 0 0 0 0", "fast invalidÜiteral/length code", 0, -8, 258,

651 
Z_DATA_ERROR
);

652 
	`öf
("d c7 1áeÉb 38 c 4 41á0 87 72 de df fb 1f b8 36 b1 38 5d ff ff 0",

653 "Á° 2ndÜevñ code†™dÅoÿÁ∏back", 0, -8, 258, 
Z_DATA_ERROR
);

654 
	`öf
("63 18 5 8¯10 8 0 0 0 0", "vîy comm⁄ ca£", 0, -8, 259, 
Z_OK
);

655 
	`öf
("63 60 60 18 c9 0 8 18 18 18 26 c0 28 0 29 0 0 0",

656 "c⁄tiguou†™d wø∞¨ound wödow", 6, -8, 259, 
Z_OK
);

657 
	`öf
("63 0 3 0 0 0 0 0", "copy direct from output", 0, -8, 259,

658 
Z_STREAM_END
);

659 
	}
}

661 
	$maö
()

663 
	`Ârötf
(
°dîr
, "%s\n", 
	`zlibVîsi⁄
());

664 
	`covî_suµ‹t
();

665 
	`covî_wøp
();

666 
	`covî_back
();

667 
	`covî_öÊ©e
();

668 
	`covî_åìs
();

669 
	`covî_Á°
();

671 
	}
}

	@zlib-1.2.8/test/minigzip.c

18 
	~"zlib.h
"

19 
	~<°dio.h
>

21 #ifde‡
STDC


22 
	~<°rög.h
>

23 
	~<°dlib.h
>

26 #ifde‡
USE_MMAP


27 
	~<sys/ty≥s.h
>

28 
	~<sys/mm™.h
>

29 
	~<sys/°©.h
>

32 #i‡
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WIN32
Ë|| deföed(
__CYGWIN__
)

33 
	~<f˙é.h
>

34 
	~<io.h
>

35 #ifde‡
UNDER_CE


36 
	~<°dlib.h
>

38 
	#SET_BINARY_MODE
(
fûe
Ë
	`£tmode
(
	`fûío
(fûe), 
O_BINARY
)

	)

40 
	#SET_BINARY_MODE
(
fûe
)

	)

43 #ifde‡
_MSC_VER


44 
	#¢¥ötf
 
_¢¥ötf


	)

47 #ifde‡
VMS


48 
	#u∆ök
 
dñëe


	)

49 
	#GZ_SUFFIX
 "-gz"

	)

51 #ifde‡
RISCOS


52 
	#u∆ök
 
ªmove


	)

53 
	#GZ_SUFFIX
 "-gz"

	)

54 
	#fûío
(
fûe
Ëfûe->
__fûe


	)

56 #i‡
deföed
(
__MWERKS__
Ë&& 
__de°_os
 !
__be_os
 && __de°_o†!
__wö32_os


57 
	~<unix.h
>

60 #i‡!
deföed
(
Z_HAVE_UNISTD_H
Ë&& !deföed(
_LARGEFILE64_SOURCE
)

61 #i‚de‡
WIN32


62 
u∆ök
 
OF
((const *));

66 #i‡
deföed
(
UNDER_CE
)

67 
	~<wödows.h
>

68 
	#≥º‹
(
s
Ë
	`pwöîr‹
(s)

	)

80 *
	$°rwöîr‹
 (
îr‹
)

81 
DWORD
 
îr‹
;

83 
buf
[1024];

85 
wch¨_t
 *
msgbuf
;

86 
DWORD
 
œ°îr
 = 
	`GëLa°Eº‹
();

87 
DWORD
 
ch¨s
 = 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM


88 | 
FORMAT_MESSAGE_ALLOCATE_BUFFER
,

89 
NULL
,

90 
îr‹
,

92 (
LPVOID
)&
msgbuf
,

94 
NULL
);

95 i‡(
ch¨s
 != 0) {

97 i‡(
ch¨s
 >= 2

98 && 
msgbuf
[
ch¨s
 - 2] == '\r' && msgbuf[chars - 1] == '\n') {

99 
ch¨s
 -= 2;

100 
msgbuf
[
ch¨s
] = 0;

103 i‡(
ch¨s
 >  (
buf
) - 1) {

104 
ch¨s
 =  (
buf
) - 1;

105 
msgbuf
[
ch¨s
] = 0;

108 
	`wc°ombs
(
buf
, 
msgbuf
, 
ch¨s
 + 1);

109 
	`LoˇlFªe
(
msgbuf
);

112 
	`•rötf
(
buf
, "unknow¿wö32Éº‹ (%ld)", 
îr‹
);

115 
	`SëLa°Eº‹
(
œ°îr
);

116  
buf
;

117 
	}
}

119 
	$pwöîr‹
 (
s
)

120 c⁄° *
s
;

122 i‡(
s
 && *s)

123 
	`Ârötf
(
°dîr
, "%s: %s\n", 
s
, 
	`°rwöîr‹
(
	`GëLa°Eº‹
 ()));

125 
	`Ârötf
(
°dîr
, "%s\n", 
	`°rwöîr‹
(
	`GëLa°Eº‹
 ()));

126 
	}
}

130 #i‚de‡
GZ_SUFFIX


131 
	#GZ_SUFFIX
 ".gz"

	)

133 
	#SUFFIX_LEN
 ((
GZ_SUFFIX
)-1)

	)

135 
	#BUFLEN
 16384

	)

136 
	#MAX_NAME_LEN
 1024

	)

138 #ifde‡
MAXSEG_64K


139 
	#loˇl
 

	)

142 
	#loˇl


	)

145 #ifde‡
Z_SOLO


148 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
Z_LARGE
)

149 
	~<uni°d.h
>

152 *
myÆloc
 
OF
((*, , ));

153 
my‰ì
 
OF
((*, *));

155 *
	$myÆloc
(
q
, 
n
, 
m
)

156 *
q
;

157 
n
, 
m
;

159 
q
 = 
Z_NULL
;

160  
	`ˇŒoc
(
n
, 
m
);

161 
	}
}

163 
	$my‰ì
(
q
, 
p
)

164 *
q
, *
p
;

166 
q
 = 
Z_NULL
;

167 
	`‰ì
(
p
);

168 
	}
}

170 
	sgzFûe_s
 {

171 
FILE
 *
	mfûe
;

172 
	mwrôe
;

173 
	mîr
;

174 *
	mmsg
;

175 
z_°ªam
 
	m°rm
;

176 } *
	tgzFûe
;

178 
gzFûe
 
gz›í
 
OF
((const *, const *));

179 
gzFûe
 
gzd›í
 
OF
((, const *));

180 
gzFûe
 
gz_›í
 
OF
((const *, , const *));

182 
gzFûe
 
	$gz›í
(
∑th
, 
mode
)

183 c⁄° *
∑th
;

184 c⁄° *
mode
;

186  
	`gz_›í
(
∑th
, -1, 
mode
);

187 
	}
}

189 
gzFûe
 
	$gzd›í
(
fd
, 
mode
)

190 
fd
;

191 c⁄° *
mode
;

193  
	`gz_›í
(
NULL
, 
fd
, 
mode
);

194 
	}
}

196 
gzFûe
 
	$gz_›í
(
∑th
, 
fd
, 
mode
)

197 c⁄° *
∑th
;

198 
fd
;

199 c⁄° *
mode
;

201 
gzFûe
 
gz
;

202 
ªt
;

204 
gz
 = 
	`mÆloc
((
gzFûe_s
));

205 i‡(
gz
 =
NULL
)

206  
NULL
;

207 
gz
->
wrôe
 = 
	`°rchr
(
mode
, 'w'Ë!
NULL
;

208 
gz
->
°rm
.
zÆloc
 = 
myÆloc
;

209 
gz
->
°rm
.
z‰ì
 = 
my‰ì
;

210 
gz
->
°rm
.
›aque
 = 
Z_NULL
;

211 i‡(
gz
->
wrôe
)

212 
ªt
 = 
	`deÊ©eInô2
(&(
gz
->
°rm
), -1, 8, 15 + 16, 8, 0);

214 
gz
->
°rm
.
√xt_ö
 = 0;

215 
gz
->
°rm
.
avaû_ö
 = 
Z_NULL
;

216 
ªt
 = 
	`öÊ©eInô2
(&(
gz
->
°rm
), 15 + 16);

218 i‡(
ªt
 !
Z_OK
) {

219 
	`‰ì
(
gz
);

220  
NULL
;

222 
gz
->
fûe
 = 
∑th
 =
NULL
 ? 
	`fd›í
(
fd
, gz->
wrôe
 ? "wb" : "rb") :

223 
	`f›í
(
∑th
, 
gz
->
wrôe
 ? "wb" : "rb");

224 i‡(
gz
->
fûe
 =
NULL
) {

225 
gz
->
wrôe
 ? 
	`deÊ©eEnd
(&(gz->
°rm
)Ë: 
	`öÊ©eEnd
(&(gz->strm));

226 
	`‰ì
(
gz
);

227  
NULL
;

229 
gz
->
îr
 = 0;

230 
gz
->
msg
 = "";

231  
gz
;

232 
	}
}

234 
gzwrôe
 
OF
((
gzFûe
, const *, ));

236 
	$gzwrôe
(
gz
, 
buf
, 
Àn
)

237 
gzFûe
 
gz
;

238 c⁄° *
buf
;

239 
Àn
;

241 
z_°ªam
 *
°rm
;

242 
out
[
BUFLEN
];

244 i‡(
gz
 =
NULL
 || !gz->
wrôe
)

246 
°rm
 = &(
gz
->strm);

247 
°rm
->
√xt_ö
 = (*)
buf
;

248 
°rm
->
avaû_ö
 = 
Àn
;

250 
°rm
->
√xt_out
 = 
out
;

251 
°rm
->
avaû_out
 = 
BUFLEN
;

252 ()
	`deÊ©e
(
°rm
, 
Z_NO_FLUSH
);

253 
	`fwrôe
(
out
, 1, 
BUFLEN
 - 
°rm
->
avaû_out
, 
gz
->
fûe
);

254 } 
°rm
->
avaû_out
 == 0);

255  
Àn
;

256 
	}
}

258 
gzªad
 
OF
((
gzFûe
, *, ));

260 
	$gzªad
(
gz
, 
buf
, 
Àn
)

261 
gzFûe
 
gz
;

262 *
buf
;

263 
Àn
;

265 
ªt
;

266 
gŸ
;

267 
ö
[1];

268 
z_°ªam
 *
°rm
;

270 i‡(
gz
 =
NULL
 || gz->
wrôe
)

272 i‡(
gz
->
îr
)

274 
°rm
 = &(
gz
->strm);

275 
°rm
->
√xt_out
 = (*)
buf
;

276 
°rm
->
avaû_out
 = 
Àn
;

278 
gŸ
 = 
	`‰ód
(
ö
, 1, 1, 
gz
->
fûe
);

279 i‡(
gŸ
 == 0)

281 
°rm
->
√xt_ö
 = 
ö
;

282 
°rm
->
avaû_ö
 = 1;

283 
ªt
 = 
	`öÊ©e
(
°rm
, 
Z_NO_FLUSH
);

284 i‡(
ªt
 =
Z_DATA_ERROR
) {

285 
gz
->
îr
 = 
Z_DATA_ERROR
;

286 
gz
->
msg
 = 
°rm
->msg;

289 i‡(
ªt
 =
Z_STREAM_END
)

290 
	`öÊ©eRe£t
(
°rm
);

291 } 
°rm
->
avaû_out
);

292  
Àn
 - 
°rm
->
avaû_out
;

293 
	}
}

295 
gz˛o£
 
OF
((
gzFûe
));

297 
	$gz˛o£
(
gz
)

298 
gzFûe
 
gz
;

300 
z_°ªam
 *
°rm
;

301 
out
[
BUFLEN
];

303 i‡(
gz
 =
NULL
)

304  
Z_STREAM_ERROR
;

305 
°rm
 = &(
gz
->strm);

306 i‡(
gz
->
wrôe
) {

307 
°rm
->
√xt_ö
 = 
Z_NULL
;

308 
°rm
->
avaû_ö
 = 0;

310 
°rm
->
√xt_out
 = 
out
;

311 
°rm
->
avaû_out
 = 
BUFLEN
;

312 ()
	`deÊ©e
(
°rm
, 
Z_FINISH
);

313 
	`fwrôe
(
out
, 1, 
BUFLEN
 - 
°rm
->
avaû_out
, 
gz
->
fûe
);

314 } 
°rm
->
avaû_out
 == 0);

315 
	`deÊ©eEnd
(
°rm
);

318 
	`öÊ©eEnd
(
°rm
);

319 
	`f˛o£
(
gz
->
fûe
);

320 
	`‰ì
(
gz
);

321  
Z_OK
;

322 
	}
}

324 c⁄° *
gzîr‹
 
OF
((
gzFûe
, *));

326 c⁄° *
	$gzîr‹
(
gz
, 
îr
)

327 
gzFûe
 
gz
;

328 *
îr
;

330 *
îr
 = 
gz
->err;

331  
gz
->
msg
;

332 
	}
}

336 *
	g¥og
;

338 
îr‹
 
OF
((c⁄° *
msg
));

339 
gz_com¥ess
 
OF
((
FILE
 *
ö
, 
gzFûe
 
out
));

340 #ifde‡
USE_MMAP


341 
gz_com¥ess_mm≠
 
OF
((
FILE
 *
ö
, 
gzFûe
 
out
));

343 
gz_uncom¥ess
 
OF
((
gzFûe
 
ö
, 
FILE
 *
out
));

344 
fûe_com¥ess
 
OF
((*
fûe
, *
mode
));

345 
fûe_uncom¥ess
 
OF
((*
fûe
));

346 
maö
 
OF
((
¨gc
, *
¨gv
[]));

351 
	$îr‹
(
msg
)

352 c⁄° *
msg
;

354 
	`Ârötf
(
°dîr
, "%s: %s\n", 
¥og
, 
msg
);

355 
	`exô
(1);

356 
	}
}

362 
	$gz_com¥ess
(
ö
, 
out
)

363 
FILE
 *
ö
;

364 
gzFûe
 
out
;

366 
loˇl
 
buf
[
BUFLEN
];

367 
Àn
;

368 
îr
;

370 #ifde‡
USE_MMAP


374 i‡(
	`gz_com¥ess_mm≠
(
ö
, 
out
Ë=
Z_OK
) ;

377 
Àn
 = ()
	`‰ód
(
buf
, 1, (buf), 
ö
);

378 i‡(
	`„º‹
(
ö
)) {

379 
	`≥º‹
("fread");

380 
	`exô
(1);

382 i‡(
Àn
 == 0) ;

384 i‡(
	`gzwrôe
(
out
, 
buf
, ()
Àn
Ë!ÀnË
	`îr‹
(
	`gzîr‹
(out, &
îr
));

386 
	`f˛o£
(
ö
);

387 i‡(
	`gz˛o£
(
out
Ë!
Z_OK
Ë
	`îr‹
("failed gzclose");

388 
	}
}

390 #ifde‡
USE_MMAP


395 
	$gz_com¥ess_mm≠
(
ö
, 
out
)

396 
FILE
 *
ö
;

397 
gzFûe
 
out
;

399 
Àn
;

400 
îr
;

401 
ifd
 = 
	`fûío
(
ö
);

402 
ˇddr_t
 
buf
;

403 
off_t
 
buf_Àn
;

404 
°©
 
sb
;

407 i‡(
	`f°©
(
ifd
, &
sb
Ë< 0Ë 
Z_ERRNO
;

408 
buf_Àn
 = 
sb
.
°_size
;

409 i‡(
buf_Àn
 <0Ë 
Z_ERRNO
;

412 
buf
 = 
	`mm≠
((
ˇddr_t
Ë0, 
buf_Àn
, 
PROT_READ
, 
MAP_SHARED
, 
ifd
, (
off_t
)0);

413 i‡(
buf
 =(
ˇddr_t
)(-1)Ë 
Z_ERRNO
;

416 
Àn
 = 
	`gzwrôe
(
out
, (*)
buf
, ()
buf_Àn
);

418 i‡(
Àn
 !()
buf_Àn
Ë
	`îr‹
(
	`gzîr‹
(
out
, &
îr
));

420 
	`munm≠
(
buf
, 
buf_Àn
);

421 
	`f˛o£
(
ö
);

422 i‡(
	`gz˛o£
(
out
Ë!
Z_OK
Ë
	`îr‹
("failed gzclose");

423  
Z_OK
;

424 
	}
}

430 
	$gz_uncom¥ess
(
ö
, 
out
)

431 
gzFûe
 
ö
;

432 
FILE
 *
out
;

434 
loˇl
 
buf
[
BUFLEN
];

435 
Àn
;

436 
îr
;

439 
Àn
 = 
	`gzªad
(
ö
, 
buf
, (buf));

440 i‡(
Àn
 < 0Ë
	`îr‹
 (
	`gzîr‹
(
ö
, &
îr
));

441 i‡(
Àn
 == 0) ;

443 i‡(()
	`fwrôe
(
buf
, 1, ()
Àn
, 
out
) !=Üen) {

444 
	`îr‹
("failed fwrite");

447 i‡(
	`f˛o£
(
out
)Ë
	`îr‹
("failed fclose");

449 i‡(
	`gz˛o£
(
ö
Ë!
Z_OK
Ë
	`îr‹
("failed gzclose");

450 
	}
}

457 
	$fûe_com¥ess
(
fûe
, 
mode
)

458 *
fûe
;

459 *
mode
;

461 
loˇl
 
outfûe
[
MAX_NAME_LEN
];

462 
FILE
 *
ö
;

463 
gzFûe
 
out
;

465 i‡(
	`°æí
(
fûe
Ë+ såÀn(
GZ_SUFFIX
Ë>(
outfûe
)) {

466 
	`Ârötf
(
°dîr
, "%s: fûíamêtoÿl⁄g\n", 
¥og
);

467 
	`exô
(1);

470 #i‡!
	`deföed
(
NO_¢¥ötf
Ë&& !deföed(
NO_v¢¥ötf
)

471 
	`¢¥ötf
(
outfûe
, (outfûe), "%s%s", 
fûe
, 
GZ_SUFFIX
);

473 
	`°r˝y
(
outfûe
, 
fûe
);

474 
	`°rˇt
(
outfûe
, 
GZ_SUFFIX
);

477 
ö
 = 
	`f›í
(
fûe
, "rb");

478 i‡(
ö
 =
NULL
) {

479 
	`≥º‹
(
fûe
);

480 
	`exô
(1);

482 
out
 = 
	`gz›í
(
outfûe
, 
mode
);

483 i‡(
out
 =
NULL
) {

484 
	`Ârötf
(
°dîr
, "%s: c™'àgz›í %s\n", 
¥og
, 
outfûe
);

485 
	`exô
(1);

487 
	`gz_com¥ess
(
ö
, 
out
);

489 
	`u∆ök
(
fûe
);

490 
	}
}

496 
	$fûe_uncom¥ess
(
fûe
)

497 *
fûe
;

499 
loˇl
 
buf
[
MAX_NAME_LEN
];

500 *
öfûe
, *
outfûe
;

501 
FILE
 *
out
;

502 
gzFûe
 
ö
;

503 
size_t
 
Àn
 = 
	`°æí
(
fûe
);

505 i‡(
Àn
 + 
	`°æí
(
GZ_SUFFIX
Ë>(
buf
)) {

506 
	`Ârötf
(
°dîr
, "%s: fûíamêtoÿl⁄g\n", 
¥og
);

507 
	`exô
(1);

510 #i‡!
	`deföed
(
NO_¢¥ötf
Ë&& !deföed(
NO_v¢¥ötf
)

511 
	`¢¥ötf
(
buf
, (buf), "%s", 
fûe
);

513 
	`°r˝y
(
buf
, 
fûe
);

516 i‡(
Àn
 > 
SUFFIX_LEN
 && 
	`°rcmp
(
fûe
+Àn-SUFFIX_LEN, 
GZ_SUFFIX
) == 0) {

517 
öfûe
 = 
fûe
;

518 
outfûe
 = 
buf
;

519 
outfûe
[
Àn
-3] = '\0';

521 
outfûe
 = 
fûe
;

522 
öfûe
 = 
buf
;

523 #i‡!
	`deföed
(
NO_¢¥ötf
Ë&& !deföed(
NO_v¢¥ötf
)

524 
	`¢¥ötf
(
buf
 + 
Àn
, (bufË-Üí, "%s", 
GZ_SUFFIX
);

526 
	`°rˇt
(
öfûe
, 
GZ_SUFFIX
);

529 
ö
 = 
	`gz›í
(
öfûe
, "rb");

530 i‡(
ö
 =
NULL
) {

531 
	`Ârötf
(
°dîr
, "%s: c™'àgz›í %s\n", 
¥og
, 
öfûe
);

532 
	`exô
(1);

534 
out
 = 
	`f›í
(
outfûe
, "wb");

535 i‡(
out
 =
NULL
) {

536 
	`≥º‹
(
fûe
);

537 
	`exô
(1);

540 
	`gz_uncom¥ess
(
ö
, 
out
);

542 
	`u∆ök
(
öfûe
);

543 
	}
}

556 
	$maö
(
¨gc
, 
¨gv
)

557 
¨gc
;

558 *
¨gv
[];

560 
c›yout
 = 0;

561 
uncom¥
 = 0;

562 
gzFûe
 
fûe
;

563 *
b«me
, 
outmode
[20];

565 #i‡!
	`deföed
(
NO_¢¥ötf
Ë&& !deföed(
NO_v¢¥ötf
)

566 
	`¢¥ötf
(
outmode
, (outmode), "%s", "wb6 ");

568 
	`°r˝y
(
outmode
, "wb6 ");

571 
¥og
 = 
¨gv
[0];

572 
b«me
 = 
	`°ºchr
(
¨gv
[0], '/');

573 i‡(
b«me
)

574 
b«me
++;

576 
b«me
 = 
¨gv
[0];

577 
¨gc
--, 
¨gv
++;

579 i‡(!
	`°rcmp
(
b«me
, "gunzip"))

580 
uncom¥
 = 1;

581 i‡(!
	`°rcmp
(
b«me
, "zcat"))

582 
c›yout
 = 
uncom¥
 = 1;

584 
¨gc
 > 0) {

585 i‡(
	`°rcmp
(*
¨gv
, "-c") == 0)

586 
c›yout
 = 1;

587 i‡(
	`°rcmp
(*
¨gv
, "-d") == 0)

588 
uncom¥
 = 1;

589 i‡(
	`°rcmp
(*
¨gv
, "-f") == 0)

590 
outmode
[3] = 'f';

591 i‡(
	`°rcmp
(*
¨gv
, "-h") == 0)

592 
outmode
[3] = 'h';

593 i‡(
	`°rcmp
(*
¨gv
, "-r") == 0)

594 
outmode
[3] = 'R';

595 i‡((*
¨gv
)[0] == '-' && (*argv)[1] >= '1' && (*argv)[1] <= '9' &&

596 (*
¨gv
)[2] == 0)

597 
outmode
[2] = (*
¨gv
)[1];

600 
¨gc
--, 
¨gv
++;

602 i‡(
outmode
[3] == ' ')

603 
outmode
[3] = 0;

604 i‡(
¨gc
 == 0) {

605 
	`SET_BINARY_MODE
(
°dö
);

606 
	`SET_BINARY_MODE
(
°dout
);

607 i‡(
uncom¥
) {

608 
fûe
 = 
	`gzd›í
(
	`fûío
(
°dö
), "rb");

609 i‡(
fûe
 =
NULL
Ë
	`îr‹
("can't gzdopen stdin");

610 
	`gz_uncom¥ess
(
fûe
, 
°dout
);

612 
fûe
 = 
	`gzd›í
(
	`fûío
(
°dout
), 
outmode
);

613 i‡(
fûe
 =
NULL
Ë
	`îr‹
("can't gzdopen stdout");

614 
	`gz_com¥ess
(
°dö
, 
fûe
);

617 i‡(
c›yout
) {

618 
	`SET_BINARY_MODE
(
°dout
);

621 i‡(
uncom¥
) {

622 i‡(
c›yout
) {

623 
fûe
 = 
	`gz›í
(*
¨gv
, "rb");

624 i‡(
fûe
 =
NULL
)

625 
	`Ârötf
(
°dîr
, "%s: c™'àgz›í %s\n", 
¥og
, *
¨gv
);

627 
	`gz_uncom¥ess
(
fûe
, 
°dout
);

629 
	`fûe_uncom¥ess
(*
¨gv
);

632 i‡(
c›yout
) {

633 
FILE
 * 
ö
 = 
	`f›í
(*
¨gv
, "rb");

635 i‡(
ö
 =
NULL
) {

636 
	`≥º‹
(*
¨gv
);

638 
fûe
 = 
	`gzd›í
(
	`fûío
(
°dout
), 
outmode
);

639 i‡(
fûe
 =
NULL
Ë
	`îr‹
("can't gzdopen stdout");

641 
	`gz_com¥ess
(
ö
, 
fûe
);

645 
	`fûe_com¥ess
(*
¨gv
, 
outmode
);

648 } 
¨gv
++, --
¨gc
);

651 
	}
}

	@zlib-1.2.8/trees.c

37 
	~"deÊ©e.h
"

39 #ifde‡
DEBUG


40 
	~<˘y≥.h
>

47 
	#MAX_BL_BITS
 7

	)

50 
	#END_BLOCK
 256

	)

53 
	#REP_3_6
 16

	)

56 
	#REPZ_3_10
 17

	)

59 
	#REPZ_11_138
 18

	)

62 
loˇl
 c⁄° 
	gexåa_lbôs
[
LENGTH_CODES
]

65 
loˇl
 c⁄° 
	gexåa_dbôs
[
D_CODES
]

68 
loˇl
 c⁄° 
	gexåa_blbôs
[
BL_CODES
]

71 
loˇl
 c⁄° 
uch
 
	gbl_‹dî
[
BL_CODES
]

81 
	#DIST_CODE_LEN
 512

	)

83 #i‡
deföed
(
GEN_TREES_H
Ë|| !deföed(
STDC
)

86 
loˇl
 
˘_d©a
 
	g°©ic_…ªe
[
L_CODES
+2];

93 
loˇl
 
˘_d©a
 
	g°©ic_dåì
[
D_CODES
];

98 
uch
 
	g_di°_code
[
DIST_CODE_LEN
];

104 
uch
 
	g_Àngth_code
[
MAX_MATCH
-
MIN_MATCH
+1];

107 
loˇl
 
	gba£_Àngth
[
LENGTH_CODES
];

110 
loˇl
 
	gba£_di°
[
D_CODES
];

114 
	~"åìs.h
"

117 
	s°©ic_åì_desc_s
 {

118 c⁄° 
˘_d©a
 *
	m°©ic_åì
;

119 c⁄° 
ötf
 *
	mexåa_bôs
;

120 
	mexåa_ba£
;

121 
	mñems
;

122 
	mmax_Àngth
;

125 
loˇl
 
°©ic_åì_desc
 
	g°©ic_l_desc
 =

126 {
°©ic_…ªe
, 
exåa_lbôs
, 
LITERALS
+1, 
L_CODES
, 
MAX_BITS
};

128 
loˇl
 
°©ic_åì_desc
 
	g°©ic_d_desc
 =

129 {
°©ic_dåì
, 
exåa_dbôs
, 0, 
D_CODES
, 
MAX_BITS
};

131 
loˇl
 
°©ic_åì_desc
 
	g°©ic_bl_desc
 =

132 {(c⁄° 
˘_d©a
 *)0, 
exåa_blbôs
, 0, 
BL_CODES
, 
MAX_BL_BITS
};

138 
loˇl
 
å_°©ic_öô
 
OF
(());

139 
loˇl
 
öô_block
 
OF
((
deÊ©e_°©e
 *
s
));

140 
loˇl
 
pqdownhóp
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
åì
, 
k
));

141 
loˇl
 
gí_bôÀn
 
OF
((
deÊ©e_°©e
 *
s
, 
åì_desc
 *
desc
));

142 
loˇl
 
gí_codes
 
OF
((
˘_d©a
 *
åì
, 
max_code
, 
ushf
 *
bl_cou¡
));

143 
loˇl
 
buûd_åì
 
OF
((
deÊ©e_°©e
 *
s
, 
åì_desc
 *
desc
));

144 
loˇl
 
sˇn_åì
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
åì
, 
max_code
));

145 
loˇl
 
£nd_åì
 
OF
((
deÊ©e_°©e
 *
s
, 
˘_d©a
 *
åì
, 
max_code
));

146 
loˇl
 
buûd_bl_åì
 
OF
((
deÊ©e_°©e
 *
s
));

147 
loˇl
 
£nd_Æl_åìs
 
OF
((
deÊ©e_°©e
 *
s
, 
lcodes
, 
dcodes
,

148 
blcodes
));

149 
loˇl
 
com¥ess_block
 
OF
((
deÊ©e_°©e
 *
s
, c⁄° 
˘_d©a
 *
…ªe
,

150 c⁄° 
˘_d©a
 *
dåì
));

151 
loˇl
 
dëe˘_d©a_ty≥
 
OF
((
deÊ©e_°©e
 *
s
));

152 
loˇl
 
bi_ªvî£
 
OF
((
vÆue
, 
Àngth
));

153 
loˇl
 
bi_wödup
 
OF
((
deÊ©e_°©e
 *
s
));

154 
loˇl
 
bi_Êush
 
OF
((
deÊ©e_°©e
 *
s
));

155 
loˇl
 
c›y_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
, 
Àn
,

156 
hódî
));

158 #ifde‡
GEN_TREES_H


159 
loˇl
 
gí_åìs_hódî
 
OF
(());

162 #i‚de‡
DEBUG


163 
	#£nd_code
(
s
, 
c
, 
åì
Ë
	`£nd_bôs
(s,Åªe[c].
Code
,Åªe[c].
Lí
)

	)

167 
	#£nd_code
(
s
, 
c
, 
åì
) \

168 { i‡(
z_vîbo£
>2Ë
	`Ârötf
(
°dîr
,"\ncd %3d ",(
c
)); \

169 
	`£nd_bôs
(
s
, 
åì
[
c
].
Code
,Åªe[c].
Lí
); }

	)

176 
	#put_sh‹t
(
s
, 
w
) { \

177 
	`put_byã
(
s
, (
uch
)((
w
) & 0xff)); \

178 
	`put_byã
(
s
, (
uch
)((
ush
)(
w
) >> 8)); \

179 }

	)

185 #ifde‡
DEBUG


186 
loˇl
 
£nd_bôs
 
OF
((
deÊ©e_°©e
 *
s
, 
vÆue
, 
Àngth
));

188 
loˇl
 
	$£nd_bôs
(
s
, 
vÆue
, 
Àngth
)

189 
deÊ©e_°©e
 *
s
;

190 
vÆue
;

191 
Àngth
;

193 
	`Tø˚vv
((
°dîr
,"Ü %2d v %4x ", 
Àngth
, 
vÆue
));

194 
	`As£π
(
Àngth
 > 0 &&Üength <= 15, "invalidÜength");

195 
s
->
bôs_£¡
 +(
ulg
)
Àngth
;

201 i‡(
s
->
bi_vÆid
 > ()
Buf_size
 - 
Àngth
) {

202 
s
->
bi_buf
 |(
ush
)
vÆue
 << s->
bi_vÆid
;

203 
	`put_sh‹t
(
s
, s->
bi_buf
);

204 
s
->
bi_buf
 = (
ush
)
vÆue
 >> (
Buf_size
 - s->
bi_vÆid
);

205 
s
->
bi_vÆid
 +
Àngth
 - 
Buf_size
;

207 
s
->
bi_buf
 |(
ush
)
vÆue
 << s->
bi_vÆid
;

208 
s
->
bi_vÆid
 +
Àngth
;

210 
	}
}

213 
	#£nd_bôs
(
s
, 
vÆue
, 
Àngth
) \

214 { 
Àn
 = 
Àngth
;\

215 i‡(
s
->
bi_vÆid
 > ()
Buf_size
 - 
Àn
) {\

216 
vÆ
 = 
vÆue
;\

217 
s
->
bi_buf
 |(
ush
)
vÆ
 << s->
bi_vÆid
;\

218 
	`put_sh‹t
(
s
, s->
bi_buf
);\

219 
s
->
bi_buf
 = (
ush
)
vÆ
 >> (
Buf_size
 - s->
bi_vÆid
);\

220 
s
->
bi_vÆid
 +
Àn
 - 
Buf_size
;\

222 
s
->
bi_buf
 |(
ush
)(
vÆue
Ë<< s->
bi_vÆid
;\

223 
s
->
bi_vÆid
 +
Àn
;\

225 }

	)

234 
loˇl
 
	$å_°©ic_öô
()

236 #i‡
	`deföed
(
GEN_TREES_H
Ë|| !deföed(
STDC
)

237 
°©ic_öô_d⁄e
 = 0;

238 
n
;

239 
bôs
;

240 
Àngth
;

241 
code
;

242 
di°
;

243 
ush
 
bl_cou¡
[
MAX_BITS
+1];

246 i‡(
°©ic_öô_d⁄e
) ;

249 #ifde‡
NO_INIT_GLOBAL_POINTERS


250 
°©ic_l_desc
.
°©ic_åì
 = 
°©ic_…ªe
;

251 
°©ic_l_desc
.
exåa_bôs
 = 
exåa_lbôs
;

252 
°©ic_d_desc
.
°©ic_åì
 = 
°©ic_dåì
;

253 
°©ic_d_desc
.
exåa_bôs
 = 
exåa_dbôs
;

254 
°©ic_bl_desc
.
exåa_bôs
 = 
exåa_blbôs
;

258 
Àngth
 = 0;

259 
code
 = 0; codê< 
LENGTH_CODES
-1; code++) {

260 
ba£_Àngth
[
code
] = 
Àngth
;

261 
n
 = 0;Ç < (1<<
exåa_lbôs
[
code
]);Ç++) {

262 
_Àngth_code
[
Àngth
++] = (
uch
)
code
;

265 
	`As£π
 (
Àngth
 == 256, "tr_static_init:Üength != 256");

270 
_Àngth_code
[
Àngth
-1] = (
uch
)
code
;

273 
di°
 = 0;

274 
code
 = 0 ; code < 16; code++) {

275 
ba£_di°
[
code
] = 
di°
;

276 
n
 = 0;Ç < (1<<
exåa_dbôs
[
code
]);Ç++) {

277 
_di°_code
[
di°
++] = (
uch
)
code
;

280 
	`As£π
 (
di°
 == 256, "tr_static_init: dist != 256");

281 
di°
 >>= 7;

282  ; 
code
 < 
D_CODES
; code++) {

283 
ba£_di°
[
code
] = 
di°
 << 7;

284 
n
 = 0;Ç < (1<<(
exåa_dbôs
[
code
]-7));Ç++) {

285 
_di°_code
[256 + 
di°
++] = (
uch
)
code
;

288 
	`As£π
 (
di°
 == 256, "tr_static_init: 256+dist != 512");

291 
bôs
 = 0; bô†<
MAX_BITS
; bôs++Ë
bl_cou¡
[bits] = 0;

292 
n
 = 0;

293 
n
 <143Ë
°©ic_…ªe
[n++].
Lí
 = 8, 
bl_cou¡
[8]++;

294 
n
 <255Ë
°©ic_…ªe
[n++].
Lí
 = 9, 
bl_cou¡
[9]++;

295 
n
 <279Ë
°©ic_…ªe
[n++].
Lí
 = 7, 
bl_cou¡
[7]++;

296 
n
 <287Ë
°©ic_…ªe
[n++].
Lí
 = 8, 
bl_cou¡
[8]++;

301 
	`gí_codes
((
˘_d©a
 *)
°©ic_…ªe
, 
L_CODES
+1, 
bl_cou¡
);

304 
n
 = 0;Ç < 
D_CODES
;Ç++) {

305 
°©ic_dåì
[
n
].
Lí
 = 5;

306 
°©ic_dåì
[
n
].
Code
 = 
	`bi_ªvî£
(()n, 5);

308 
°©ic_öô_d⁄e
 = 1;

310 #ifde‡
GEN_TREES_H


311 
	`gí_åìs_hódî
();

314 
	}
}

319 #ifde‡
GEN_TREES_H


320 #i‚de‡
DEBUG


321 
	~<°dio.h
>

324 
	#SEPARATOR
(
i
, 
œ°
, 
width
) \

325 ((
i
Ë=(
œ°
)? "\n};\n\n" : \

326 ((
i
Ë% (
width
Ë=(width)-1 ? ",\n" : ", "))

	)

328 
	$gí_åìs_hódî
()

330 
FILE
 *
hódî
 = 
	`f›í
("trees.h", "w");

331 
i
;

333 
	`As£π
 (
hódî
 !
NULL
, "Can't openÅrees.h");

334 
	`Ârötf
(
hódî
,

337 
	`Ârötf
(
hódî
, "local const ct_data static_ltree[L_CODES+2] = {\n");

338 
i
 = 0; i < 
L_CODES
+2; i++) {

339 
	`Ârötf
(
hódî
, "{{%3u},{%3u}}%s", 
°©ic_…ªe
[
i
].
Code
,

340 
°©ic_…ªe
[
i
].
Lí
, 
	`SEPARATOR
(i, 
L_CODES
+1, 5));

343 
	`Ârötf
(
hódî
, "local const ct_data static_dtree[D_CODES] = {\n");

344 
i
 = 0; i < 
D_CODES
; i++) {

345 
	`Ârötf
(
hódî
, "{{%2u},{%2u}}%s", 
°©ic_dåì
[
i
].
Code
,

346 
°©ic_dåì
[
i
].
Lí
, 
	`SEPARATOR
(i, 
D_CODES
-1, 5));

349 
	`Ârötf
(
hódî
, "const uch ZLIB_INTERNAL _dist_code[DIST_CODE_LEN] = {\n");

350 
i
 = 0; i < 
DIST_CODE_LEN
; i++) {

351 
	`Ârötf
(
hódî
, "%2u%s", 
_di°_code
[
i
],

352 
	`SEPARATOR
(
i
, 
DIST_CODE_LEN
-1, 20));

355 
	`Ârötf
(
hódî
,

357 
i
 = 0; i < 
MAX_MATCH
-
MIN_MATCH
+1; i++) {

358 
	`Ârötf
(
hódî
, "%2u%s", 
_Àngth_code
[
i
],

359 
	`SEPARATOR
(
i
, 
MAX_MATCH
-
MIN_MATCH
, 20));

362 
	`Ârötf
(
hódî
, "local const int base_length[LENGTH_CODES] = {\n");

363 
i
 = 0; i < 
LENGTH_CODES
; i++) {

364 
	`Ârötf
(
hódî
, "%1u%s", 
ba£_Àngth
[
i
],

365 
	`SEPARATOR
(
i
, 
LENGTH_CODES
-1, 20));

368 
	`Ârötf
(
hódî
, "local const int base_dist[D_CODES] = {\n");

369 
i
 = 0; i < 
D_CODES
; i++) {

370 
	`Ârötf
(
hódî
, "%5u%s", 
ba£_di°
[
i
],

371 
	`SEPARATOR
(
i
, 
D_CODES
-1, 10));

374 
	`f˛o£
(
hódî
);

375 
	}
}

381 
ZLIB_INTERNAL
 
	$_å_öô
(
s
)

382 
deÊ©e_°©e
 *
s
;

384 
	`å_°©ic_öô
();

386 
s
->
l_desc
.
dyn_åì
 = s->
dyn_…ªe
;

387 
s
->
l_desc
.
°©_desc
 = &
°©ic_l_desc
;

389 
s
->
d_desc
.
dyn_åì
 = s->
dyn_dåì
;

390 
s
->
d_desc
.
°©_desc
 = &
°©ic_d_desc
;

392 
s
->
bl_desc
.
dyn_åì
 = s->
bl_åì
;

393 
s
->
bl_desc
.
°©_desc
 = &
°©ic_bl_desc
;

395 
s
->
bi_buf
 = 0;

396 
s
->
bi_vÆid
 = 0;

397 #ifde‡
DEBUG


398 
s
->
com¥es£d_Àn
 = 0L;

399 
s
->
bôs_£¡
 = 0L;

403 
	`öô_block
(
s
);

404 
	}
}

409 
loˇl
 
	$öô_block
(
s
)

410 
deÊ©e_°©e
 *
s
;

412 
n
;

415 
n
 = 0;Ç < 
L_CODES
;Ç++Ë
s
->
dyn_…ªe
[n].
Fªq
 = 0;

416 
n
 = 0;Ç < 
D_CODES
;Ç++Ë
s
->
dyn_dåì
[n].
Fªq
 = 0;

417 
n
 = 0;Ç < 
BL_CODES
;Ç++Ë
s
->
bl_åì
[n].
Fªq
 = 0;

419 
s
->
dyn_…ªe
[
END_BLOCK
].
Fªq
 = 1;

420 
s
->
›t_Àn
 = s->
°©ic_Àn
 = 0L;

421 
s
->
œ°_lô
 = s->
m©ches
 = 0;

422 
	}
}

424 
	#SMALLEST
 1

	)

432 
	#pqªmove
(
s
, 
åì
, 
t›
) \

434 
t›
 = 
s
->
hóp
[
SMALLEST
]; \

435 
s
->
hóp
[
SMALLEST
] = s->hóp[s->
hóp_Àn
--]; \

436 
	`pqdownhóp
(
s
, 
åì
, 
SMALLEST
); \

437 }

	)

443 
	#smÆÀr
(
åì
, 
n
, 
m
, 
dïth
) \

444 (
åì
[
n
].
Fªq
 <Åªe[
m
].Freq || \

445 (
åì
[
n
].
Fªq
 =åì[
m
].Fªq && 
dïth
[n] <dïth[m]))

	)

453 
loˇl
 
	$pqdownhóp
(
s
, 
åì
, 
k
)

454 
deÊ©e_°©e
 *
s
;

455 
˘_d©a
 *
åì
;

456 
k
;

458 
v
 = 
s
->
hóp
[
k
];

459 
j
 = 
k
 << 1;

460 
j
 <
s
->
hóp_Àn
) {

462 i‡(
j
 < 
s
->
hóp_Àn
 &&

463 
	`smÆÀr
(
åì
, 
s
->
hóp
[
j
+1], s->hóp[j], s->
dïth
)) {

464 
j
++;

467 i‡(
	`smÆÀr
(
åì
, 
v
, 
s
->
hóp
[
j
], s->
dïth
)) ;

470 
s
->
hóp
[
k
] = s->hóp[
j
]; k = j;

473 
j
 <<= 1;

475 
s
->
hóp
[
k
] = 
v
;

476 
	}
}

488 
loˇl
 
	$gí_bôÀn
(
s
, 
desc
)

489 
deÊ©e_°©e
 *
s
;

490 
åì_desc
 *
desc
;

492 
˘_d©a
 *
åì
 = 
desc
->
dyn_åì
;

493 
max_code
 = 
desc
->max_code;

494 c⁄° 
˘_d©a
 *
°ªe
 = 
desc
->
°©_desc
->
°©ic_åì
;

495 c⁄° 
ötf
 *
exåa
 = 
desc
->
°©_desc
->
exåa_bôs
;

496 
ba£
 = 
desc
->
°©_desc
->
exåa_ba£
;

497 
max_Àngth
 = 
desc
->
°©_desc
->max_length;

498 
h
;

499 
n
, 
m
;

500 
bôs
;

501 
xbôs
;

502 
ush
 
f
;

503 
ovîÊow
 = 0;

505 
bôs
 = 0; bô†<
MAX_BITS
; bôs++Ë
s
->
bl_cou¡
[bits] = 0;

510 
åì
[
s
->
hóp
[s->
hóp_max
]].
Lí
 = 0;

512 
h
 = 
s
->
hóp_max
+1; h < 
HEAP_SIZE
; h++) {

513 
n
 = 
s
->
hóp
[
h
];

514 
bôs
 = 
åì
[åì[
n
].
Dad
].
Lí
 + 1;

515 i‡(
bôs
 > 
max_Àngth
Ëbô†max_Àngth, 
ovîÊow
++;

516 
åì
[
n
].
Lí
 = (
ush
)
bôs
;

519 i‡(
n
 > 
max_code
) ;

521 
s
->
bl_cou¡
[
bôs
]++;

522 
xbôs
 = 0;

523 i‡(
n
 >
ba£
Ë
xbôs
 = 
exåa
[n-base];

524 
f
 = 
åì
[
n
].
Fªq
;

525 
s
->
›t_Àn
 +(
ulg
)
f
 * (
bôs
 + 
xbôs
);

526 i‡(
°ªe
Ë
s
->
°©ic_Àn
 +(
ulg
)
f
 * (°ªe[
n
].
Lí
 + 
xbôs
);

528 i‡(
ovîÊow
 == 0) ;

530 
	`Tø˚
((
°dîr
,"\nbitÜength overflow\n"));

535 
bôs
 = 
max_Àngth
-1;

536 
s
->
bl_cou¡
[
bôs
] == 0) bits--;

537 
s
->
bl_cou¡
[
bôs
]--;

538 
s
->
bl_cou¡
[
bôs
+1] += 2;

539 
s
->
bl_cou¡
[
max_Àngth
]--;

543 
ovîÊow
 -= 2;

544 } 
ovîÊow
 > 0);

551 
bôs
 = 
max_Àngth
; bits != 0; bits--) {

552 
n
 = 
s
->
bl_cou¡
[
bôs
];

553 
n
 != 0) {

554 
m
 = 
s
->
hóp
[--
h
];

555 i‡(
m
 > 
max_code
) ;

556 i‡((Ë
åì
[
m
].
Lí
 !(Ë
bôs
) {

557 
	`Tø˚
((
°dîr
,"codê%d bô†%d->%d\n", 
m
, 
åì
[m].
Lí
, 
bôs
));

558 
s
->
›t_Àn
 +(()
bôs
 - ()
åì
[
m
].
Lí
)

559 *()
åì
[
m
].
Fªq
;

560 
åì
[
m
].
Lí
 = (
ush
)
bôs
;

562 
n
--;

565 
	}
}

575 
loˇl
 
	$gí_codes
 (
åì
, 
max_code
, 
bl_cou¡
)

576 
˘_d©a
 *
åì
;

577 
max_code
;

578 
ushf
 *
bl_cou¡
;

580 
ush
 
√xt_code
[
MAX_BITS
+1];

581 
ush
 
code
 = 0;

582 
bôs
;

583 
n
;

588 
bôs
 = 1; bô†<
MAX_BITS
; bits++) {

589 
√xt_code
[
bôs
] = 
code
 = (codê+ 
bl_cou¡
[bits-1]) << 1;

594 
	`As£π
 (
code
 + 
bl_cou¡
[
MAX_BITS
]-1 == (1<<MAX_BITS)-1,

596 
	`Tø˚v
((
°dîr
,"\ngí_codes: max_codê%d ", 
max_code
));

598 
n
 = 0;Ç <
max_code
;Ç++) {

599 
Àn
 = 
åì
[
n
].
Lí
;

600 i‡(
Àn
 == 0) ;

602 
åì
[
n
].
Code
 = 
	`bi_ªvî£
(
√xt_code
[
Àn
]++,Üen);

604 
	`Tø˚cv
(
åì
 !
°©ic_…ªe
, (
°dîr
,"\nn %3d %cÜ %2d c %4x (%x) ",

605 
n
, (
	`isgøph
“Ë?Ç : ' '), 
Àn
, 
åì
[n].
Code
, 
√xt_code
[len]-1));

607 
	}
}

617 
loˇl
 
	$buûd_åì
(
s
, 
desc
)

618 
deÊ©e_°©e
 *
s
;

619 
åì_desc
 *
desc
;

621 
˘_d©a
 *
åì
 = 
desc
->
dyn_åì
;

622 c⁄° 
˘_d©a
 *
°ªe
 = 
desc
->
°©_desc
->
°©ic_åì
;

623 
ñems
 = 
desc
->
°©_desc
->elems;

624 
n
, 
m
;

625 
max_code
 = -1;

626 
node
;

632 
s
->
hóp_Àn
 = 0, s->
hóp_max
 = 
HEAP_SIZE
;

634 
n
 = 0;Ç < 
ñems
;Ç++) {

635 i‡(
åì
[
n
].
Fªq
 != 0) {

636 
s
->
hóp
[++(s->
hóp_Àn
)] = 
max_code
 = 
n
;

637 
s
->
dïth
[
n
] = 0;

639 
åì
[
n
].
Lí
 = 0;

648 
s
->
hóp_Àn
 < 2) {

649 
node
 = 
s
->
hóp
[++(s->
hóp_Àn
)] = (
max_code
 < 2 ? ++max_code : 0);

650 
åì
[
node
].
Fªq
 = 1;

651 
s
->
dïth
[
node
] = 0;

652 
s
->
›t_Àn
--; i‡(
°ªe
Ës->
°©ic_Àn
 -°ªe[
node
].
Lí
;

655 
desc
->
max_code
 = max_code;

660 
n
 = 
s
->
hóp_Àn
/2;Ç >1;Ç--Ë
	`pqdownhóp
(s, 
åì
,Ç);

665 
node
 = 
ñems
;

667 
	`pqªmove
(
s
, 
åì
, 
n
);

668 
m
 = 
s
->
hóp
[
SMALLEST
];

670 
s
->
hóp
[--(s->
hóp_max
)] = 
n
;

671 
s
->
hóp
[--(s->
hóp_max
)] = 
m
;

674 
åì
[
node
].
Fªq
 =Åªe[
n
].Fªq +Åªe[
m
].Freq;

675 
s
->
dïth
[
node
] = (
uch
)((s->dïth[
n
] >s->dïth[
m
] ?

676 
s
->
dïth
[
n
] : s->dïth[
m
]) + 1);

677 
åì
[
n
].
Dad
 =Åªe[
m
].Dad = (
ush
)
node
;

678 #ifde‡
DUMP_BL_TREE


679 i‡(
åì
 =
s
->
bl_åì
) {

680 
	`Ârötf
(
°dîr
,"\nnode %d(%d), sons %d(%d) %d(%d)",

681 
node
, 
åì
[node].
Fªq
, 
n
,Åªe[n].Fªq, 
m
,Åree[m].Freq);

685 
s
->
hóp
[
SMALLEST
] = 
node
++;

686 
	`pqdownhóp
(
s
, 
åì
, 
SMALLEST
);

688 } 
s
->
hóp_Àn
 >= 2);

690 
s
->
hóp
[--(s->
hóp_max
)] = s->hóp[
SMALLEST
];

695 
	`gí_bôÀn
(
s
, (
åì_desc
 *)
desc
);

698 
	`gí_codes
 ((
˘_d©a
 *)
åì
, 
max_code
, 
s
->
bl_cou¡
);

699 
	}
}

705 
loˇl
 
	$sˇn_åì
 (
s
, 
åì
, 
max_code
)

706 
deÊ©e_°©e
 *
s
;

707 
˘_d©a
 *
åì
;

708 
max_code
;

710 
n
;

711 
¥evÀn
 = -1;

712 
cuæí
;

713 
√xéí
 = 
åì
[0].
Lí
;

714 
cou¡
 = 0;

715 
max_cou¡
 = 7;

716 
mö_cou¡
 = 4;

718 i‡(
√xéí
 =0Ë
max_cou¡
 = 138, 
mö_cou¡
 = 3;

719 
åì
[
max_code
+1].
Lí
 = (
ush
)0xffff;

721 
n
 = 0;Ç <
max_code
;Ç++) {

722 
cuæí
 = 
√xéí
;Çexéí = 
åì
[
n
+1].
Lí
;

723 i‡(++
cou¡
 < 
max_cou¡
 && 
cuæí
 =
√xéí
) {

725 } i‡(
cou¡
 < 
mö_cou¡
) {

726 
s
->
bl_åì
[
cuæí
].
Fªq
 +
cou¡
;

727 } i‡(
cuæí
 != 0) {

728 i‡(
cuæí
 !
¥evÀn
Ë
s
->
bl_åì
[cuæí].
Fªq
++;

729 
s
->
bl_åì
[
REP_3_6
].
Fªq
++;

730 } i‡(
cou¡
 <= 10) {

731 
s
->
bl_åì
[
REPZ_3_10
].
Fªq
++;

733 
s
->
bl_åì
[
REPZ_11_138
].
Fªq
++;

735 
cou¡
 = 0; 
¥evÀn
 = 
cuæí
;

736 i‡(
√xéí
 == 0) {

737 
max_cou¡
 = 138, 
mö_cou¡
 = 3;

738 } i‡(
cuæí
 =
√xéí
) {

739 
max_cou¡
 = 6, 
mö_cou¡
 = 3;

741 
max_cou¡
 = 7, 
mö_cou¡
 = 4;

744 
	}
}

750 
loˇl
 
	$£nd_åì
 (
s
, 
åì
, 
max_code
)

751 
deÊ©e_°©e
 *
s
;

752 
˘_d©a
 *
åì
;

753 
max_code
;

755 
n
;

756 
¥evÀn
 = -1;

757 
cuæí
;

758 
√xéí
 = 
åì
[0].
Lí
;

759 
cou¡
 = 0;

760 
max_cou¡
 = 7;

761 
mö_cou¡
 = 4;

764 i‡(
√xéí
 =0Ë
max_cou¡
 = 138, 
mö_cou¡
 = 3;

766 
n
 = 0;Ç <
max_code
;Ç++) {

767 
cuæí
 = 
√xéí
;Çexéí = 
åì
[
n
+1].
Lí
;

768 i‡(++
cou¡
 < 
max_cou¡
 && 
cuæí
 =
√xéí
) {

770 } i‡(
cou¡
 < 
mö_cou¡
) {

771 dÿ{ 
	`£nd_code
(
s
, 
cuæí
, s->
bl_åì
); } --
cou¡
 != 0);

773 } i‡(
cuæí
 != 0) {

774 i‡(
cuæí
 !
¥evÀn
) {

775 
	`£nd_code
(
s
, 
cuæí
, s->
bl_åì
); 
cou¡
--;

777 
	`As£π
(
cou¡
 >= 3 && count <= 6, " 3_6?");

778 
	`£nd_code
(
s
, 
REP_3_6
, s->
bl_åì
); 
	`£nd_bôs
(s, 
cou¡
-3, 2);

780 } i‡(
cou¡
 <= 10) {

781 
	`£nd_code
(
s
, 
REPZ_3_10
, s->
bl_åì
); 
	`£nd_bôs
(s, 
cou¡
-3, 3);

784 
	`£nd_code
(
s
, 
REPZ_11_138
, s->
bl_åì
); 
	`£nd_bôs
(s, 
cou¡
-11, 7);

786 
cou¡
 = 0; 
¥evÀn
 = 
cuæí
;

787 i‡(
√xéí
 == 0) {

788 
max_cou¡
 = 138, 
mö_cou¡
 = 3;

789 } i‡(
cuæí
 =
√xéí
) {

790 
max_cou¡
 = 6, 
mö_cou¡
 = 3;

792 
max_cou¡
 = 7, 
mö_cou¡
 = 4;

795 
	}
}

801 
loˇl
 
	$buûd_bl_åì
(
s
)

802 
deÊ©e_°©e
 *
s
;

804 
max_blödex
;

807 
	`sˇn_åì
(
s
, (
˘_d©a
 *)s->
dyn_…ªe
, s->
l_desc
.
max_code
);

808 
	`sˇn_åì
(
s
, (
˘_d©a
 *)s->
dyn_dåì
, s->
d_desc
.
max_code
);

811 
	`buûd_åì
(
s
, (
åì_desc
 *)(&(s->
bl_desc
)));

820 
max_blödex
 = 
BL_CODES
-1; max_blindex >= 3; max_blindex--) {

821 i‡(
s
->
bl_åì
[
bl_‹dî
[
max_blödex
]].
Lí
 != 0) ;

824 
s
->
›t_Àn
 +3*(
max_blödex
+1) + 5+5+4;

825 
	`Tø˚v
((
°dîr
, "\ndynÅrees: dyn %ld, stat %ld",

826 
s
->
›t_Àn
, s->
°©ic_Àn
));

828  
max_blödex
;

829 
	}
}

836 
loˇl
 
	$£nd_Æl_åìs
(
s
, 
lcodes
, 
dcodes
, 
blcodes
)

837 
deÊ©e_°©e
 *
s
;

838 
lcodes
, 
dcodes
, 
blcodes
;

840 
ønk
;

842 
	`As£π
 (
lcodes
 >257 && 
dcodes
 >1 && 
blcodes
 >= 4, "notÉnough codes");

843 
	`As£π
 (
lcodes
 <
L_CODES
 && 
dcodes
 <
D_CODES
 && 
blcodes
 <
BL_CODES
,

845 
	`Tø˚v
((
°dîr
, "\nbl counts: "));

846 
	`£nd_bôs
(
s
, 
lcodes
-257, 5);

847 
	`£nd_bôs
(
s
, 
dcodes
-1, 5);

848 
	`£nd_bôs
(
s
, 
blcodes
-4, 4);

849 
ønk
 = 0;Ñ™k < 
blcodes
;Ñank++) {

850 
	`Tø˚v
((
°dîr
, "\nb»codê%2d ", 
bl_‹dî
[
ønk
]));

851 
	`£nd_bôs
(
s
, s->
bl_åì
[
bl_‹dî
[
ønk
]].
Lí
, 3);

853 
	`Tø˚v
((
°dîr
, "\nb»åì: síà%ld", 
s
->
bôs_£¡
));

855 
	`£nd_åì
(
s
, (
˘_d©a
 *)s->
dyn_…ªe
, 
lcodes
-1);

856 
	`Tø˚v
((
°dîr
, "\∆ôÅªe: síà%ld", 
s
->
bôs_£¡
));

858 
	`£nd_åì
(
s
, (
˘_d©a
 *)s->
dyn_dåì
, 
dcodes
-1);

859 
	`Tø˚v
((
°dîr
, "\ndi°Åªe: síà%ld", 
s
->
bôs_£¡
));

860 
	}
}

865 
ZLIB_INTERNAL
 
	$_å_°‹ed_block
(
s
, 
buf
, 
°‹ed_Àn
, 
œ°
)

866 
deÊ©e_°©e
 *
s
;

867 
ch¨f
 *
buf
;

868 
ulg
 
°‹ed_Àn
;

869 
œ°
;

871 
	`£nd_bôs
(
s
, (
STORED_BLOCK
<<1)+
œ°
, 3);

872 #ifde‡
DEBUG


873 
s
->
com¥es£d_Àn
 = (s->com¥es£d_À¿+ 3 + 7Ë& (
ulg
)~7L;

874 
s
->
com¥es£d_Àn
 +(
°‹ed_Àn
 + 4) << 3;

876 
	`c›y_block
(
s
, 
buf
, ()
°‹ed_Àn
, 1);

877 
	}
}

882 
ZLIB_INTERNAL
 
	$_å_Êush_bôs
(
s
)

883 
deÊ©e_°©e
 *
s
;

885 
	`bi_Êush
(
s
);

886 
	}
}

892 
ZLIB_INTERNAL
 
	$_å_Æign
(
s
)

893 
deÊ©e_°©e
 *
s
;

895 
	`£nd_bôs
(
s
, 
STATIC_TREES
<<1, 3);

896 
	`£nd_code
(
s
, 
END_BLOCK
, 
°©ic_…ªe
);

897 #ifde‡
DEBUG


898 
s
->
com¥es£d_Àn
 += 10L;

900 
	`bi_Êush
(
s
);

901 
	}
}

907 
ZLIB_INTERNAL
 
	$_å_Êush_block
(
s
, 
buf
, 
°‹ed_Àn
, 
œ°
)

908 
deÊ©e_°©e
 *
s
;

909 
ch¨f
 *
buf
;

910 
ulg
 
°‹ed_Àn
;

911 
œ°
;

913 
ulg
 
›t_Ànb
, 
°©ic_Ànb
;

914 
max_blödex
 = 0;

917 i‡(
s
->
Àvñ
 > 0) {

920 i‡(
s
->
°rm
->
d©a_ty≥
 =
Z_UNKNOWN
)

921 
s
->
°rm
->
d©a_ty≥
 = 
	`dëe˘_d©a_ty≥
(s);

924 
	`buûd_åì
(
s
, (
åì_desc
 *)(&(s->
l_desc
)));

925 
	`Tø˚v
((
°dîr
, "\∆ô d©a: dy¿%ld, sèà%ld", 
s
->
›t_Àn
,

926 
s
->
°©ic_Àn
));

928 
	`buûd_åì
(
s
, (
åì_desc
 *)(&(s->
d_desc
)));

929 
	`Tø˚v
((
°dîr
, "\ndi° d©a: dy¿%ld, sèà%ld", 
s
->
›t_Àn
,

930 
s
->
°©ic_Àn
));

938 
max_blödex
 = 
	`buûd_bl_åì
(
s
);

941 
›t_Ànb
 = (
s
->
›t_Àn
+3+7)>>3;

942 
°©ic_Ànb
 = (
s
->
°©ic_Àn
+3+7)>>3;

944 
	`Tø˚v
((
°dîr
, "\nopt %lu(%lu) stat %lu(%lu) stored %luÜit %u ",

945 
›t_Ànb
, 
s
->
›t_Àn
, 
°©ic_Ànb
, s->
°©ic_Àn
, 
°‹ed_Àn
,

946 
s
->
œ°_lô
));

948 i‡(
°©ic_Ànb
 <
›t_Ànb
) opt_lenb = static_lenb;

951 
	`As£π
(
buf
 != (*)0, "lost buf");

952 
›t_Ànb
 = 
°©ic_Ànb
 = 
°‹ed_Àn
 + 5;

955 #ifde‡
FORCE_STORED


956 i‡(
buf
 != (*)0) {

958 i‡(
°‹ed_Àn
+4 <
›t_Ànb
 && 
buf
 != (*)0) {

967 
	`_å_°‹ed_block
(
s
, 
buf
, 
°‹ed_Àn
, 
œ°
);

969 #ifde‡
FORCE_STATIC


970 } i‡(
°©ic_Ànb
 >= 0) {

972 } i‡(
s
->
°øãgy
 =
Z_FIXED
 || 
°©ic_Ànb
 =
›t_Ànb
) {

974 
	`£nd_bôs
(
s
, (
STATIC_TREES
<<1)+
œ°
, 3);

975 
	`com¥ess_block
(
s
, (c⁄° 
˘_d©a
 *)
°©ic_…ªe
,

976 (c⁄° 
˘_d©a
 *)
°©ic_dåì
);

977 #ifde‡
DEBUG


978 
s
->
com¥es£d_Àn
 +3 + s->
°©ic_Àn
;

981 
	`£nd_bôs
(
s
, (
DYN_TREES
<<1)+
œ°
, 3);

982 
	`£nd_Æl_åìs
(
s
, s->
l_desc
.
max_code
+1, s->
d_desc
.max_code+1,

983 
max_blödex
+1);

984 
	`com¥ess_block
(
s
, (c⁄° 
˘_d©a
 *)s->
dyn_…ªe
,

985 (c⁄° 
˘_d©a
 *)
s
->
dyn_dåì
);

986 #ifde‡
DEBUG


987 
s
->
com¥es£d_Àn
 +3 + s->
›t_Àn
;

990 
	`As£π
 (
s
->
com¥es£d_Àn
 =s->
bôs_£¡
, "bad compressed size");

994 
	`öô_block
(
s
);

996 i‡(
œ°
) {

997 
	`bi_wödup
(
s
);

998 #ifde‡
DEBUG


999 
s
->
com¥es£d_Àn
 += 7;

1002 
	`Tø˚v
((
°dîr
,"\ncom¥À¿%lu(%luË", 
s
->
com¥es£d_Àn
>>3,

1003 
s
->
com¥es£d_Àn
-7*
œ°
));

1004 
	}
}

1010 
ZLIB_INTERNAL
 
	$_å_èŒy
 (
s
, 
di°
, 
lc
)

1011 
deÊ©e_°©e
 *
s
;

1012 
di°
;

1013 
lc
;

1015 
s
->
d_buf
[s->
œ°_lô
] = (
ush
)
di°
;

1016 
s
->
l_buf
[s->
œ°_lô
++] = (
uch
)
lc
;

1017 i‡(
di°
 == 0) {

1019 
s
->
dyn_…ªe
[
lc
].
Fªq
++;

1021 
s
->
m©ches
++;

1023 
di°
--;

1024 
	`As£π
((
ush
)
di°
 < (ush)
	`MAX_DIST
(
s
) &&

1025 (
ush
)
lc
 <(ush)(
MAX_MATCH
-
MIN_MATCH
) &&

1026 (
ush
)
	`d_code
(
di°
Ë< (ush)
D_CODES
, "_tr_tally: bad match");

1028 
s
->
dyn_…ªe
[
_Àngth_code
[
lc
]+
LITERALS
+1].
Fªq
++;

1029 
s
->
dyn_dåì
[
	`d_code
(
di°
)].
Fªq
++;

1032 #ifde‡
TRUNCATE_BLOCK


1034 i‡((
s
->
œ°_lô
 & 0x1fffË=0 && s->
Àvñ
 > 2) {

1036 
ulg
 
out_Àngth
 = (ulg)
s
->
œ°_lô
*8L;

1037 
ulg
 
ö_Àngth
 = (ulg)(()
s
->
°r°¨t
 - s->
block_°¨t
);

1038 
dcode
;

1039 
dcode
 = 0; dcodê< 
D_CODES
; dcode++) {

1040 
out_Àngth
 +(
ulg
)
s
->
dyn_dåì
[
dcode
].
Fªq
 *

1041 (5L+
exåa_dbôs
[
dcode
]);

1043 
out_Àngth
 >>= 3;

1044 
	`Tø˚v
((
°dîr
,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",

1045 
s
->
œ°_lô
, 
ö_Àngth
, 
out_Àngth
,

1046 100L - 
out_Àngth
*100L/
ö_Àngth
));

1047 i‡(
s
->
m©ches
 < s->
œ°_lô
/2 && 
out_Àngth
 < 
ö_Àngth
/2)  1;

1050  (
s
->
œ°_lô
 =s->
lô_bufsize
-1);

1055 
	}
}

1060 
loˇl
 
	$com¥ess_block
(
s
, 
…ªe
, 
dåì
)

1061 
deÊ©e_°©e
 *
s
;

1062 c⁄° 
˘_d©a
 *
…ªe
;

1063 c⁄° 
˘_d©a
 *
dåì
;

1065 
di°
;

1066 
lc
;

1067 
lx
 = 0;

1068 
code
;

1069 
exåa
;

1071 i‡(
s
->
œ°_lô
 != 0) do {

1072 
di°
 = 
s
->
d_buf
[
lx
];

1073 
lc
 = 
s
->
l_buf
[
lx
++];

1074 i‡(
di°
 == 0) {

1075 
	`£nd_code
(
s
, 
lc
, 
…ªe
);

1076 
	`Tø˚cv
(
	`isgøph
(
lc
), (
°dîr
," '%c' ",Üc));

1079 
code
 = 
_Àngth_code
[
lc
];

1080 
	`£nd_code
(
s
, 
code
+
LITERALS
+1, 
…ªe
);

1081 
exåa
 = 
exåa_lbôs
[
code
];

1082 i‡(
exåa
 != 0) {

1083 
lc
 -
ba£_Àngth
[
code
];

1084 
	`£nd_bôs
(
s
, 
lc
, 
exåa
);

1086 
di°
--;

1087 
code
 = 
	`d_code
(
di°
);

1088 
	`As£π
 (
code
 < 
D_CODES
, "bad d_code");

1090 
	`£nd_code
(
s
, 
code
, 
dåì
);

1091 
exåa
 = 
exåa_dbôs
[
code
];

1092 i‡(
exåa
 != 0) {

1093 
di°
 -
ba£_di°
[
code
];

1094 
	`£nd_bôs
(
s
, 
di°
, 
exåa
);

1099 
	`As£π
((
uI¡
)(
s
->
≥ndög
Ë< s->
lô_bufsize
 + 2*
lx
,

1102 } 
lx
 < 
s
->
œ°_lô
);

1104 
	`£nd_code
(
s
, 
END_BLOCK
, 
…ªe
);

1105 
	}
}

1120 
loˇl
 
	$dëe˘_d©a_ty≥
(
s
)

1121 
deÊ©e_°©e
 *
s
;

1127 
bœck_mask
 = 0xf3ffc07fUL;

1128 
n
;

1131 
n
 = 0;Ç <31;Ç++, 
bœck_mask
 >>= 1)

1132 i‡((
bœck_mask
 & 1Ë&& (
s
->
dyn_…ªe
[
n
].
Fªq
 != 0))

1133  
Z_BINARY
;

1136 i‡(
s
->
dyn_…ªe
[9].
Fªq
 != 0 || s->dyn_ltree[10].Freq != 0

1137 || 
s
->
dyn_…ªe
[13].
Fªq
 != 0)

1138  
Z_TEXT
;

1139 
n
 = 32;Ç < 
LITERALS
;Ç++)

1140 i‡(
s
->
dyn_…ªe
[
n
].
Fªq
 != 0)

1141  
Z_TEXT
;

1146  
Z_BINARY
;

1147 
	}
}

1154 
loˇl
 
	$bi_ªvî£
(
code
, 
Àn
)

1155 
code
;

1156 
Àn
;

1158 
ªs
 = 0;

1160 
ªs
 |
code
 & 1;

1161 
code
 >>1, 
ªs
 <<= 1;

1162 } --
Àn
 > 0);

1163  
ªs
 >> 1;

1164 
	}
}

1169 
loˇl
 
	$bi_Êush
(
s
)

1170 
deÊ©e_°©e
 *
s
;

1172 i‡(
s
->
bi_vÆid
 == 16) {

1173 
	`put_sh‹t
(
s
, s->
bi_buf
);

1174 
s
->
bi_buf
 = 0;

1175 
s
->
bi_vÆid
 = 0;

1176 } i‡(
s
->
bi_vÆid
 >= 8) {

1177 
	`put_byã
(
s
, (
Byã
)s->
bi_buf
);

1178 
s
->
bi_buf
 >>= 8;

1179 
s
->
bi_vÆid
 -= 8;

1181 
	}
}

1186 
loˇl
 
	$bi_wödup
(
s
)

1187 
deÊ©e_°©e
 *
s
;

1189 i‡(
s
->
bi_vÆid
 > 8) {

1190 
	`put_sh‹t
(
s
, s->
bi_buf
);

1191 } i‡(
s
->
bi_vÆid
 > 0) {

1192 
	`put_byã
(
s
, (
Byã
)s->
bi_buf
);

1194 
s
->
bi_buf
 = 0;

1195 
s
->
bi_vÆid
 = 0;

1196 #ifde‡
DEBUG


1197 
s
->
bôs_£¡
 = (s->bits_sent+7) & ~7;

1199 
	}
}

1205 
loˇl
 
	$c›y_block
(
s
, 
buf
, 
Àn
, 
hódî
)

1206 
deÊ©e_°©e
 *
s
;

1207 
ch¨f
 *
buf
;

1208 
Àn
;

1209 
hódî
;

1211 
	`bi_wödup
(
s
);

1213 i‡(
hódî
) {

1214 
	`put_sh‹t
(
s
, (
ush
)
Àn
);

1215 
	`put_sh‹t
(
s
, (
ush
)~
Àn
);

1216 #ifde‡
DEBUG


1217 
s
->
bôs_£¡
 += 2*16;

1220 #ifde‡
DEBUG


1221 
s
->
bôs_£¡
 +(
ulg
)
Àn
<<3;

1223 
Àn
--) {

1224 
	`put_byã
(
s
, *
buf
++);

1226 
	}
}

	@zlib-1.2.8/trees.h

3 
loˇl
 c⁄° 
˘_d©a
 
	g°©ic_…ªe
[
L_CODES
+2] = {

64 
loˇl
 c⁄° 
˘_d©a
 
	g°©ic_dåì
[
D_CODES
] = {

73 c⁄° 
uch
 
ZLIB_INTERNAL
 
	g_di°_code
[
DIST_CODE_LEN
] = {

102 c⁄° 
uch
 
ZLIB_INTERNAL
 
	g_Àngth_code
[
MAX_MATCH
-
MIN_MATCH
+1]= {

118 
loˇl
 c⁄° 
	gba£_Àngth
[
LENGTH_CODES
] = {

123 
loˇl
 c⁄° 
	gba£_di°
[
D_CODES
] = {

	@zlib-1.2.8/uncompr.c

8 
	#ZLIB_INTERNAL


	)

9 
	~"zlib.h
"

24 
ZEXPORT
 
	$uncom¥ess
 (
de°
, 
de°Lí
, 
sour˚
, 
sour˚Lí
)

25 
Byãf
 *
de°
;

26 
uL⁄gf
 *
de°Lí
;

27 c⁄° 
Byãf
 *
sour˚
;

28 
uL⁄g
 
sour˚Lí
;

30 
z_°ªam
 
°ªam
;

31 
îr
;

33 
°ªam
.
√xt_ö
 = (
z_c⁄°
 
Byãf
 *)
sour˚
;

34 
°ªam
.
avaû_ö
 = (
uI¡
)
sour˚Lí
;

36 i‡((
uL⁄g
)
°ªam
.
avaû_ö
 !
sour˚Lí
Ë 
Z_BUF_ERROR
;

38 
°ªam
.
√xt_out
 = 
de°
;

39 
°ªam
.
avaû_out
 = (
uI¡
)*
de°Lí
;

40 i‡((
uL⁄g
)
°ªam
.
avaû_out
 !*
de°Lí
Ë 
Z_BUF_ERROR
;

42 
°ªam
.
zÆloc
 = (
Æloc_func
)0;

43 
°ªam
.
z‰ì
 = (
‰ì_func
)0;

45 
îr
 = 
	`öÊ©eInô
(&
°ªam
);

46 i‡(
îr
 !
Z_OK
) Érr;

48 
îr
 = 
	`öÊ©e
(&
°ªam
, 
Z_FINISH
);

49 i‡(
îr
 !
Z_STREAM_END
) {

50 
	`öÊ©eEnd
(&
°ªam
);

51 i‡(
îr
 =
Z_NEED_DICT
 || (î∏=
Z_BUF_ERROR
 && 
°ªam
.
avaû_ö
 == 0))

52  
Z_DATA_ERROR
;

53  
îr
;

55 *
de°Lí
 = 
°ªam
.
tŸÆ_out
;

57 
îr
 = 
	`öÊ©eEnd
(&
°ªam
);

58  
îr
;

59 
	}
}

	@zlib-1.2.8/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 #i‚de‡
Z_SOLO


33 
	#com¥ess
 
z_com¥ess


	)

34 
	#com¥ess2
 
z_com¥ess2


	)

35 
	#com¥essBound
 
z_com¥essBound


	)

37 
	#¸c32
 
z_¸c32


	)

38 
	#¸c32_comböe
 
z_¸c32_comböe


	)

39 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

40 
	#deÊ©e
 
z_deÊ©e


	)

41 
	#deÊ©eBound
 
z_deÊ©eBound


	)

42 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

43 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

44 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

45 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

46 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

47 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

48 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

49 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

50 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

51 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

52 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

53 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

54 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

55 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

56 #i‚de‡
Z_SOLO


57 
	#gz_îr‹
 
z_gz_îr‹


	)

58 
	#gz_ötmax
 
z_gz_ötmax


	)

59 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

60 
	#gzbuf„r
 
z_gzbuf„r


	)

61 
	#gz˛óªº
 
z_gz˛óªº


	)

62 
	#gz˛o£
 
z_gz˛o£


	)

63 
	#gz˛o£_r
 
z_gz˛o£_r


	)

64 
	#gz˛o£_w
 
z_gz˛o£_w


	)

65 
	#gzdúe˘
 
z_gzdúe˘


	)

66 
	#gzd›í
 
z_gzd›í


	)

67 
	#gzeof
 
z_gzeof


	)

68 
	#gzîr‹
 
z_gzîr‹


	)

69 
	#gzÊush
 
z_gzÊush


	)

70 
	#gzgëc
 
z_gzgëc


	)

71 
	#gzgëc_
 
z_gzgëc_


	)

72 
	#gzgës
 
z_gzgës


	)

73 
	#gzoff£t
 
z_gzoff£t


	)

74 
	#gzoff£t64
 
z_gzoff£t64


	)

75 
	#gz›í
 
z_gz›í


	)

76 
	#gz›í64
 
z_gz›í64


	)

77 #ifde‡
_WIN32


78 
	#gz›í_w
 
z_gz›í_w


	)

80 
	#gz¥ötf
 
z_gz¥ötf


	)

81 
	#gzv¥ötf
 
z_gzv¥ötf


	)

82 
	#gzputc
 
z_gzputc


	)

83 
	#gzputs
 
z_gzputs


	)

84 
	#gzªad
 
z_gzªad


	)

85 
	#gzªwöd
 
z_gzªwöd


	)

86 
	#gz£ek
 
z_gz£ek


	)

87 
	#gz£ek64
 
z_gz£ek64


	)

88 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

89 
	#gzãŒ
 
z_gzãŒ


	)

90 
	#gzãŒ64
 
z_gzãŒ64


	)

91 
	#gzungëc
 
z_gzungëc


	)

92 
	#gzwrôe
 
z_gzwrôe


	)

94 
	#öÊ©e
 
z_öÊ©e


	)

95 
	#öÊ©eBack
 
z_öÊ©eBack


	)

96 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

97 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

98 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

99 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

100 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

101 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

102 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

103 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

104 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

105 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

106 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

107 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

108 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

109 
	#öÊ©eSync
 
z_öÊ©eSync


	)

110 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

111 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

112 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

113 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

114 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

115 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

116 #i‚de‡
Z_SOLO


117 
	#uncom¥ess
 
z_uncom¥ess


	)

119 
	#zEº‹
 
z_zEº‹


	)

120 #i‚de‡
Z_SOLO


121 
	#zˇŒoc
 
z_zˇŒoc


	)

122 
	#zc‰ì
 
z_zc‰ì


	)

124 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

125 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

128 
	#Byã
 
z_Byã


	)

129 
	#Byãf
 
z_Byãf


	)

130 
	#Æloc_func
 
z_Æloc_func


	)

131 
	#ch¨f
 
z_ch¨f


	)

132 
	#‰ì_func
 
z_‰ì_func


	)

133 #i‚de‡
Z_SOLO


134 
	#gzFûe
 
z_gzFûe


	)

136 
	#gz_hódî
 
z_gz_hódî


	)

137 
	#gz_hódîp
 
z_gz_hódîp


	)

138 
	#ö_func
 
z_ö_func


	)

139 
	#ötf
 
z_ötf


	)

140 
	#out_func
 
z_out_func


	)

141 
	#uI¡
 
z_uI¡


	)

142 
	#uI¡f
 
z_uI¡f


	)

143 
	#uL⁄g
 
z_uL⁄g


	)

144 
	#uL⁄gf
 
z_uL⁄gf


	)

145 
	#voidp
 
z_voidp


	)

146 
	#voidpc
 
z_voidpc


	)

147 
	#voidpf
 
z_voidpf


	)

150 
	#gz_hódî_s
 
z_gz_hódî_s


	)

151 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

155 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

156 
	#MSDOS


	)

158 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

159 
	#OS2


	)

161 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

162 
	#WINDOWS


	)

164 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

165 #i‚de‡
WIN32


166 
	#WIN32


	)

169 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

170 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

171 #i‚de‡
SYS16BIT


172 
	#SYS16BIT


	)

181 #ifde‡
SYS16BIT


182 
	#MAXSEG_64K


	)

184 #ifde‡
MSDOS


185 
	#UNALIGNED_OK


	)

188 #ifde‡
__STDC_VERSION__


189 #i‚de‡
STDC


190 
	#STDC


	)

192 #i‡
__STDC_VERSION__
 >= 199901L

193 #i‚de‡
STDC99


194 
	#STDC99


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

205 
	#STDC


	)

207 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

208 
	#STDC


	)

211 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

212 
	#STDC


	)

215 #i‚de‡
STDC


217 c⁄°

	)

221 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

222 
	#z_c⁄°
 c⁄°

	)

224 
	#z_c⁄°


	)

228 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

229 
	#NO_DUMMY_DECL


	)

233 #i‚de‡
MAX_MEM_LEVEL


234 #ifde‡
MAXSEG_64K


235 
	#MAX_MEM_LEVEL
 8

	)

237 
	#MAX_MEM_LEVEL
 9

	)

246 #i‚de‡
MAX_WBITS


247 
	#MAX_WBITS
 15

	)

265 #i‚de‡
OF


266 #ifde‡
STDC


267 
	#OF
(
¨gs
Ë
	)
args

269 
	#OF
(
¨gs
Ë()

	)

273 #i‚de‡
Z_ARG


274 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

275 
	#Z_ARG
(
¨gs
Ë
	)
args

277 
	#Z_ARG
(
¨gs
Ë()

	)

287 #ifde‡
SYS16BIT


288 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

290 
	#SMALL_MEDIUM


	)

291 #ifde‡
_MSC_VER


292 
	#FAR
 
_Ár


	)

294 
	#FAR
 
Ár


	)

297 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

299 
	#SMALL_MEDIUM


	)

300 #ifde‡
__BORLANDC__


301 
	#FAR
 
_Ár


	)

303 
	#FAR
 
Ár


	)

308 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

312 #ifde‡
ZLIB_DLL


313 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

314 #ifde‡
ZLIB_INTERNAL


315 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

317 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

325 #ifde‡
ZLIB_WINAPI


326 #ifde‡
FAR


327 #unde‡
FAR


329 
	~<wödows.h
>

332 
	#ZEXPORT
 
WINAPI


	)

333 #ifde‡
WIN32


334 
	#ZEXPORTVA
 
WINAPIV


	)

336 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

341 #i‡
deföed
 (
__BEOS__
)

342 #ifde‡
ZLIB_DLL


343 #ifde‡
ZLIB_INTERNAL


344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

353 #i‚de‡
ZEXTERN


354 
	#ZEXTERN
 

	)

356 #i‚de‡
ZEXPORT


357 
	#ZEXPORT


	)

359 #i‚de‡
ZEXPORTVA


360 
	#ZEXPORTVA


	)

363 #i‚de‡
FAR


364 
	#FAR


	)

367 #i‡!
deföed
(
__MACTYPES__
)

368 
	tByã
;

370 
	tuI¡
;

371 
	tuL⁄g
;

373 #ifde‡
SMALL_MEDIUM


375 
	#Byãf
 
Byã
 
FAR


	)

377 
Byã
 
	tFAR
 
	tByãf
;

379 
	tFAR
 
	tch¨f
;

380 
	tFAR
 
	tötf
;

381 
uI¡
 
	tFAR
 
	tuI¡f
;

382 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

384 #ifde‡
STDC


385 c⁄° *
	tvoidpc
;

386 
	tFAR
 *
	tvoidpf
;

387 *
	tvoidp
;

389 
Byã
 c⁄° *
	tvoidpc
;

390 
Byã
 
	tFAR
 *
	tvoidpf
;

391 
Byã
 *
	tvoidp
;

394 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

395 
	~<limôs.h
>

396 #i‡(
UINT_MAX
 == 0xffffffffUL)

397 
	#Z_U4
 

	)

398 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

400 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

401 
	#Z_U4
 

	)

405 #ifde‡
Z_U4


406 
Z_U4
 
	tz_¸c_t
;

408 
	tz_¸c_t
;

411 #ifde‡
HAVE_UNISTD_H


412 
	#Z_HAVE_UNISTD_H


	)

415 #ifde‡
HAVE_STDARG_H


416 
	#Z_HAVE_STDARG_H


	)

419 #ifde‡
STDC


420 #i‚de‡
Z_SOLO


421 
	~<sys/ty≥s.h
>

425 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

426 #i‚de‡
Z_SOLO


427 
	~<°d¨g.h
>

431 #ifde‡
_WIN32


432 #i‚de‡
Z_SOLO


433 
	~<°ddef.h
>

443 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

444 #unde‡
_LARGEFILE64_SOURCE


447 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

448 
	#Z_HAVE_UNISTD_H


	)

450 #i‚de‡
Z_SOLO


451 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

452 
	~<uni°d.h
>

453 #ifde‡
VMS


454 
	~<unixio.h
>

456 #i‚de‡
z_off_t


457 
	#z_off_t
 
off_t


	)

462 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

463 
	#Z_LFS64


	)

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

467 
	#Z_LARGE64


	)

470 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

471 
	#Z_WANT64


	)

474 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

475 
	#SEEK_SET
 0

	)

476 
	#SEEK_CUR
 1

	)

477 
	#SEEK_END
 2

	)

480 #i‚de‡
z_off_t


481 
	#z_off_t
 

	)

484 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

485 
	#z_off64_t
 
off64_t


	)

487 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

488 
	#z_off64_t
 
__öt64


	)

490 
	#z_off64_t
 
z_off_t


	)

495 #i‡
deföed
(
__MVS__
)

496 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

497 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

498 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

499 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

500 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

501 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

502 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

503 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

504 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

505 #¥agm®
m≠
(
com¥essBound
,"CMBND")

506 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

507 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

508 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@zlib-1.2.8/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@zlib-1.2.8/zutil.c

8 
	~"zutû.h
"

9 #i‚de‡
Z_SOLO


10 
	~"gzguts.h
"

13 #i‚de‡
NO_DUMMY_DECL


14 
	söã∫Æ_°©e
 {
	mdummy
;};

17 
z_c⁄°
 * c⁄° 
	gz_îrmsg
[10] = {

30 c⁄° * 
ZEXPORT
 
	$zlibVîsi⁄
()

32  
ZLIB_VERSION
;

33 
	}
}

35 
uL⁄g
 
ZEXPORT
 
	$zlibCompûeFœgs
()

37 
uL⁄g
 
Êags
;

39 
Êags
 = 0;

40 ()((
uI¡
))) {

42 4: 
Êags
 += 1; ;

43 8: 
Êags
 += 2; ;

44 : 
Êags
 += 3;

46 ()((
uL⁄g
))) {

48 4: 
Êags
 += 1 << 2; ;

49 8: 
Êags
 += 2 << 2; ;

50 : 
Êags
 += 3 << 2;

52 ()((
voidpf
))) {

54 4: 
Êags
 += 1 << 4; ;

55 8: 
Êags
 += 2 << 4; ;

56 : 
Êags
 += 3 << 4;

58 ()((
z_off_t
))) {

60 4: 
Êags
 += 1 << 6; ;

61 8: 
Êags
 += 2 << 6; ;

62 : 
Êags
 += 3 << 6;

64 #ifde‡
DEBUG


65 
Êags
 += 1 << 8;

67 #i‡
	`deföed
(
ASMV
Ë|| deföed(
ASMINF
)

68 
Êags
 += 1 << 9;

70 #ifde‡
ZLIB_WINAPI


71 
Êags
 += 1 << 10;

73 #ifde‡
BUILDFIXED


74 
Êags
 += 1 << 12;

76 #ifde‡
DYNAMIC_CRC_TABLE


77 
Êags
 += 1 << 13;

79 #ifde‡
NO_GZCOMPRESS


80 
Êags
 += 1L << 16;

82 #ifde‡
NO_GZIP


83 
Êags
 += 1L << 17;

85 #ifde‡
PKZIP_BUG_WORKAROUND


86 
Êags
 += 1L << 20;

88 #ifde‡
FASTEST


89 
Êags
 += 1L << 21;

91 #i‡
	`deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

92 #ifde‡
NO_v¢¥ötf


93 
Êags
 += 1L << 25;

94 #ifde‡
HAS_v•rötf_void


95 
Êags
 += 1L << 26;

98 #ifde‡
HAS_v¢¥ötf_void


99 
Êags
 += 1L << 26;

103 
Êags
 += 1L << 24;

104 #ifde‡
NO_¢¥ötf


105 
Êags
 += 1L << 25;

106 #ifde‡
HAS_•rötf_void


107 
Êags
 += 1L << 26;

110 #ifde‡
HAS_¢¥ötf_void


111 
Êags
 += 1L << 26;

115  
Êags
;

116 
	}
}

118 #ifde‡
DEBUG


120 #i‚de‡
vîbo£


121 
	#vîbo£
 0

	)

123 
ZLIB_INTERNAL
 
	gz_vîbo£
 = 
vîbo£
;

125 
ZLIB_INTERNAL
 
	$z_îr‹
 (
m
)

126 *
m
;

128 
	`Ârötf
(
°dîr
, "%s\n", 
m
);

129 
	`exô
(1);

130 
	}
}

136 c⁄° * 
ZEXPORT
 
	$zEº‹
(
îr
)

137 
îr
;

139  
	`ERR_MSG
(
îr
);

140 
	}
}

142 #i‡
deföed
(
_WIN32_WCE
)

147 
	gî∫o
 = 0;

150 #i‚de‡
HAVE_MEMCPY


152 
ZLIB_INTERNAL
 
	$zmem˝y
(
de°
, 
sour˚
, 
Àn
)

153 
Byãf
* 
de°
;

154 c⁄° 
Byãf
* 
sour˚
;

155 
uI¡
 
Àn
;

157 i‡(
Àn
 == 0) ;

159 *
de°
++ = *
sour˚
++;

160 } --
Àn
 != 0);

161 
	}
}

163 
ZLIB_INTERNAL
 
	$zmemcmp
(
s1
, 
s2
, 
Àn
)

164 c⁄° 
Byãf
* 
s1
;

165 c⁄° 
Byãf
* 
s2
;

166 
uI¡
 
Àn
;

168 
uI¡
 
j
;

170 
j
 = 0; j < 
Àn
; j++) {

171 i‡(
s1
[
j
] !
s2
[j])  2*(s1[j] > s2[j])-1;

174 
	}
}

176 
ZLIB_INTERNAL
 
	$zmemzîo
(
de°
, 
Àn
)

177 
Byãf
* 
de°
;

178 
uI¡
 
Àn
;

180 i‡(
Àn
 == 0) ;

182 *
de°
++ = 0;

183 } --
Àn
 != 0);

184 
	}
}

187 #i‚de‡
Z_SOLO


189 #ifde‡
SYS16BIT


191 #ifde‡
__TURBOC__


194 
	#MY_ZCALLOC


	)

202 
	#MAX_PTR
 10

	)

205 
loˇl
 
	g√xt_±r
 = 0;

207 
	s±r_èbÀ_s
 {

208 
voidpf
 
	m‹g_±r
;

209 
voidpf
 
	m√w_±r
;

210 } 
	t±r_èbÀ
;

212 
loˇl
 
±r_èbÀ
 
	gèbÀ
[
MAX_PTR
];

220 
voidpf
 
ZLIB_INTERNAL
 
	$zˇŒoc
 (
voidpf
 
›aque
, 
ôems
, 
size
)

222 
voidpf
 
buf
 = 
›aque
;

223 
ulg
 
bsize
 = (ulg)
ôems
*
size
;

228 i‡(
bsize
 < 65520L) {

229 
buf
 = 
	`ÁrmÆloc
(
bsize
);

230 i‡(*(
ush
*)&
buf
 != 0)  buf;

232 
buf
 = 
	`ÁrmÆloc
(
bsize
 + 16L);

234 i‡(
buf
 =
NULL
 || 
√xt_±r
 >
MAX_PTR
)  NULL;

235 
èbÀ
[
√xt_±r
].
‹g_±r
 = 
buf
;

238 *((
ush
*)&
buf
+1Ë+((ush)((
uch
*)buf-0) + 15) >> 4;

239 *(
ush
*)&
buf
 = 0;

240 
èbÀ
[
√xt_±r
++].
√w_±r
 = 
buf
;

241  
buf
;

242 
	}
}

244 
ZLIB_INTERNAL
 
	$zc‰ì
 (
voidpf
 
›aque
, voidp‡
±r
)

246 
n
;

247 i‡(*(
ush
*)&
±r
 != 0) {

248 
	`Ár‰ì
(
±r
);

252 
n
 = 0;Ç < 
√xt_±r
;Ç++) {

253 i‡(
±r
 !
èbÀ
[
n
].
√w_±r
) ;

255 
	`Ár‰ì
(
èbÀ
[
n
].
‹g_±r
);

256 ++
n
 < 
√xt_±r
) {

257 
èbÀ
[
n
-1] =Åable[n];

259 
√xt_±r
--;

262 
±r
 = 
›aque
;

263 
	`As£π
(0, "zcfree:ÖtrÇot found");

264 
	}
}

269 #ifde‡
M_I86


272 
	#MY_ZCALLOC


	)

274 #i‡(!
deföed
(
_MSC_VER
) || (_MSC_VER <= 600))

275 
	#_hÆloc
 
hÆloc


	)

276 
	#_h‰ì
 
h‰ì


	)

279 
voidpf
 
ZLIB_INTERNAL
 
	$zˇŒoc
 (
voidpf
 
›aque
, 
uI¡
 
ôems
, uI¡ 
size
)

281 i‡(
›aque
) opaque = 0;

282  
	`_hÆloc
(()
ôems
, 
size
);

283 
	}
}

285 
ZLIB_INTERNAL
 
	$zc‰ì
 (
voidpf
 
›aque
, voidp‡
±r
)

287 i‡(
›aque
) opaque = 0;

288 
	`_h‰ì
(
±r
);

289 
	}
}

296 #i‚de‡
MY_ZCALLOC


298 #i‚de‡
STDC


299 
voidp
 
mÆloc
 
OF
((
uI¡
 
size
));

300 
voidp
 
ˇŒoc
 
OF
((
uI¡
 
ôems
, uI¡ 
size
));

301 
‰ì
 
OF
((
voidpf
 
±r
));

304 
voidpf
 
ZLIB_INTERNAL
 
	$zˇŒoc
 (
›aque
, 
ôems
, 
size
)

305 
voidpf
 
›aque
;

306 
ôems
;

307 
size
;

309 i‡(
›aque
Ë
ôems
 +
size
 - size;

310  (
uI¡
Ë> 2 ? (
voidpf
)
	`mÆloc
(
ôems
 * 
size
) :

311 (
voidpf
)
	`ˇŒoc
(
ôems
, 
size
);

312 
	}
}

314 
ZLIB_INTERNAL
 
	$zc‰ì
 (
›aque
, 
±r
)

315 
voidpf
 
›aque
;

316 
voidpf
 
±r
;

318 
	`‰ì
(
±r
);

319 i‡(
›aque
) ;

320 
	}
}

	@zlib-1.2.8/zutil.h

13 #i‚de‡
ZUTIL_H


14 
	#ZUTIL_H


	)

16 #ifde‡
HAVE_HIDDEN


17 
	#ZLIB_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
 ("hiddí")))

	)

19 
	#ZLIB_INTERNAL


	)

22 
	~"zlib.h
"

24 #i‡
deföed
(
STDC
Ë&& !deföed(
Z_SOLO
)

25 #i‡!(
deföed
(
_WIN32_WCE
Ë&& deföed(
_MSC_VER
))

26 
	~<°ddef.h
>

28 
	~<°rög.h
>

29 
	~<°dlib.h
>

32 #ifde‡
Z_SOLO


33 
	t±rdiff_t
;

36 #i‚de‡
loˇl


37 
	#loˇl
 

	)

41 
	tuch
;

42 
uch
 
	tFAR
 
	tuchf
;

43 
	tush
;

44 
ush
 
	tFAR
 
	tushf
;

45 
	tulg
;

47 
z_c⁄°
 * c⁄° 
z_îrmsg
[10];

50 
	#ERR_MSG
(
îr
Ë
z_îrmsg
[
Z_NEED_DICT
-”º)]

	)

52 
	#ERR_RETURN
(
°rm
,
îr
) \

53  (
°rm
->
msg
 = 
	`ERR_MSG
(
îr
), (îr))

	)

58 #i‚de‡
DEF_WBITS


59 
	#DEF_WBITS
 
MAX_WBITS


	)

63 #i‡
MAX_MEM_LEVEL
 >= 8

64 
	#DEF_MEM_LEVEL
 8

	)

66 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

70 
	#STORED_BLOCK
 0

	)

71 
	#STATIC_TREES
 1

	)

72 
	#DYN_TREES
 2

	)

75 
	#MIN_MATCH
 3

	)

76 
	#MAX_MATCH
 258

	)

79 
	#PRESET_DICT
 0x20

	)

83 #i‡
deföed
(
MSDOS
Ë|| (deföed(
WINDOWS
Ë&& !deföed(
WIN32
))

84 
	#OS_CODE
 0x00

	)

85 #i‚de‡
Z_SOLO


86 #i‡
deföed
(
__TURBOC__
Ë|| deföed(
__BORLANDC__
)

87 #i‡(
__STDC__
 =1Ë&& (
deföed
(
__LARGE__
Ë|| deföed(
__COMPACT__
))

89 
_Cde˛
 
Ár‰ì
–*
block
 );

90 *
_Cde˛
 
ÁrmÆloc
–
nbyãs
 );

92 
	~<Æloc.h
>

95 
	~<mÆloc.h
>

100 #ifde‡
AMIGA


101 
	#OS_CODE
 0x01

	)

104 #i‡
deföed
(
VAXC
Ë|| deföed(
VMS
)

105 
	#OS_CODE
 0x02

	)

106 
	#F_OPEN
(
«me
, 
mode
) \

107 
	`f›í
((
«me
), (
mode
), "mbc=60", "˘x=°m", "rfm=fix", "mrs=512")

	)

110 #i‡
deföed
(
ATARI
Ë|| deföed(
©¨i°
)

111 
	#OS_CODE
 0x05

	)

114 #ifde‡
OS2


115 
	#OS_CODE
 0x06

	)

116 #i‡
deföed
(
M_I86
Ë&& !deföed(
Z_SOLO
)

117 
	~<mÆloc.h
>

121 #i‡
deföed
(
MACOS
Ë|| deföed(
TARGET_OS_MAC
)

122 
	#OS_CODE
 0x07

	)

123 #i‚de‡
Z_SOLO


124 #i‡
deföed
(
__MWERKS__
Ë&& 
__de°_os
 !
__be_os
 && __de°_o†!
__wö32_os


125 
	~<unix.h
>

127 #i‚de‡
fd›í


128 
	#fd›í
(
fd
,
mode
Ë
NULL


	)

134 #ifde‡
TOPS20


135 
	#OS_CODE
 0x0a

	)

138 #ifde‡
WIN32


139 #i‚de‡
__CYGWIN__


140 
	#OS_CODE
 0x0b

	)

144 #ifde‡
__50SERIES


145 
	#OS_CODE
 0x0f

	)

148 #i‡
deföed
(
_BEOS_
Ë|| deföed(
RISCOS
)

149 
	#fd›í
(
fd
,
mode
Ë
NULL


	)

152 #i‡(
deföed
(
_MSC_VER
Ë&& (_MSC_VER > 600)Ë&& !deföed 
__INTERIX


153 #i‡
deföed
(
_WIN32_WCE
)

154 
	#fd›í
(
fd
,
mode
Ë
NULL


	)

155 #i‚de‡
_PTRDIFF_T_DEFINED


156 
	t±rdiff_t
;

157 
	#_PTRDIFF_T_DEFINED


	)

160 
	#fd›í
(
fd
,
ty≥
Ë
	`_fd›í
(fd,ty≥)

	)

164 #i‡
deföed
(
__BORLANDC__
Ë&& !deföed(
MSDOS
)

165 #¥agm®
w¨n
 -8004

166 #¥agm®
w¨n
 -8008

167 #¥agm®
w¨n
 -8066

171 #i‡!
deföed
(
_WIN32
) && \

172 (!
deföed
(
_LARGEFILE64_SOURCE
Ë|| 
	g_LFS64_LARGEFILE
-0 == 0)

173 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

174 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

179 #i‚de‡
OS_CODE


180 
	#OS_CODE
 0x03

	)

183 #i‚de‡
F_OPEN


184 
	#F_OPEN
(
«me
, 
mode
Ë
	`f›í
(“ame), (mode))

	)

189 #i‡
deföed
(
pyr
Ë|| deföed(
Z_SOLO
)

190 
	#NO_MEMCPY


	)

192 #i‡
deföed
(
SMALL_MEDIUM
Ë&& !deföed(
_MSC_VER
Ë&& !deföed(
__SC__
)

197 
	#NO_MEMCPY


	)

199 #i‡
deföed
(
STDC
Ë&& !deföed(
HAVE_MEMCPY
Ë&& !deföed(
NO_MEMCPY
)

200 
	#HAVE_MEMCPY


	)

202 #ifde‡
HAVE_MEMCPY


203 #ifde‡
SMALL_MEDIUM


204 
	#zmem˝y
 
_fmem˝y


	)

205 
	#zmemcmp
 
_fmemcmp


	)

206 
	#zmemzîo
(
de°
, 
Àn
Ë
	`_fmem£t
(de°, 0,Üí)

	)

208 
	#zmem˝y
 
mem˝y


	)

209 
	#zmemcmp
 
memcmp


	)

210 
	#zmemzîo
(
de°
, 
Àn
Ë
	`mem£t
(de°, 0,Üí)

	)

213 
ZLIB_INTERNAL
 
zmem˝y
 
OF
((
Byãf
* 
de°
, c⁄° Byãf* 
sour˚
, 
uI¡
 
Àn
));

214 
ZLIB_INTERNAL
 
zmemcmp
 
OF
((c⁄° 
Byãf
* 
s1
, c⁄° Byãf* 
s2
, 
uI¡
 
Àn
));

215 
ZLIB_INTERNAL
 
zmemzîo
 
OF
((
Byãf
* 
de°
, 
uI¡
 
Àn
));

219 #ifde‡
DEBUG


220 
	~<°dio.h
>

221 
ZLIB_INTERNAL
 
z_vîbo£
;

222 
ZLIB_INTERNAL
 
z_îr‹
 
OF
((*
m
));

223 
	#As£π
(
c⁄d
,
msg
Ë{if(!(c⁄d)Ë
	`z_îr‹
(msg);}

	)

224 
	#Tø˚
(
x
Ë{i‡(
z_vîbo£
>=0Ë
Ârötf
 x ;}

	)

225 
	#Tø˚v
(
x
Ë{i‡(
z_vîbo£
>0Ë
Ârötf
 x ;}

	)

226 
	#Tø˚vv
(
x
Ë{i‡(
z_vîbo£
>1Ë
Ârötf
 x ;}

	)

227 
	#Tø˚c
(
c
,
x
Ë{i‡(
z_vîbo£
>0 && (c)Ë
Ârötf
 x ;}

	)

228 
	#Tø˚cv
(
c
,
x
Ë{i‡(
z_vîbo£
>1 && (c)Ë
Ârötf
 x ;}

	)

230 
	#As£π
(
c⁄d
,
msg
)

	)

231 
	#Tø˚
(
x
)

	)

232 
	#Tø˚v
(
x
)

	)

233 
	#Tø˚vv
(
x
)

	)

234 
	#Tø˚c
(
c
,
x
)

	)

235 
	#Tø˚cv
(
c
,
x
)

	)

238 #i‚de‡
Z_SOLO


239 
voidpf
 
ZLIB_INTERNAL
 
zˇŒoc
 
OF
((voidp‡
›aque
, 
ôems
,

240 
size
));

241 
ZLIB_INTERNAL
 
zc‰ì
 
OF
((
voidpf
 
›aque
, voidp‡
±r
));

244 
	#ZALLOC
(
°rm
, 
ôems
, 
size
) \

245 (*((
°rm
)->
zÆloc
))((°rm)->
›aque
, (
ôems
), (
size
))

	)

246 
	#ZFREE
(
°rm
, 
addr
Ë(*((°rm)->
z‰ì
))((°rm)->
›aque
, (
voidpf
)◊ddr))

	)

247 
	#TRY_FREE
(
s
, 
p
Ë{i‡’Ë
	`ZFREE
(s,Ö);}

	)

250 
	#ZSWAP32
(
q
) ((((q) >> 24) & 0xff) + (((q) >> 8) & 0xff00) + \

251 (((
q
Ë& 0xff00Ë<< 8Ë+ (((qË& 0xffË<< 24))

	)

	@/usr/include/aio.h

22 #i‚de‡
_AIO_H


23 
	#_AIO_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<sys/ty≥s.h
>

27 
	#__√ed_sigevít_t


	)

28 
	~<bôs/sigöfo.h
>

29 
	#__√ed_time•ec


	)

30 
	~<time.h
>

32 
__BEGIN_DECLS


35 
	saiocb


37 
	maio_fûdes
;

38 
	maio_lio_›code
;

39 
	maio_ªq¥io
;

40 vﬁ©ûê*
	maio_buf
;

41 
size_t
 
	maio_nbyãs
;

42 
sigevít
 
	maio_sigevít
;

45 
aiocb
 *
	m__√xt_¥io
;

46 
	m__abs_¥io
;

47 
	m__pﬁicy
;

48 
	m__îr‹_code
;

49 
__ssize_t
 
	m__ªtu∫_vÆue
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	maio_off£t
;

53 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

55 
__off64_t
 
	maio_off£t
;

57 
	m__glibc_ª£rved
[32];

62 #ifde‡
__USE_LARGEFILE64


63 
	saiocb64


65 
	maio_fûdes
;

66 
	maio_lio_›code
;

67 
	maio_ªq¥io
;

68 vﬁ©ûê*
	maio_buf
;

69 
size_t
 
	maio_nbyãs
;

70 
sigevít
 
	maio_sigevít
;

73 
aiocb
 *
	m__√xt_¥io
;

74 
	m__abs_¥io
;

75 
	m__pﬁicy
;

76 
	m__îr‹_code
;

77 
__ssize_t
 
	m__ªtu∫_vÆue
;

79 
__off64_t
 
	maio_off£t
;

80 
	m__glibc_ª£rved
[32];

85 #ifde‡
__USE_GNU


88 
	saioöô


90 
	maio_thªads
;

91 
	maio_num
;

92 
	maio_locks
;

93 
	maio_u£dba
;

94 
	maio_debug
;

95 
	maio_numu£rs
;

96 
	maio_idÀ_time
;

98 
	maio_ª£rved
;

106 
	mAIO_CANCELED
,

107 
	#AIO_CANCELED
 
AIO_CANCELED


	)

108 
	mAIO_NOTCANCELED
,

109 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

110 
	mAIO_ALLDONE


111 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

118 
	mLIO_READ
,

119 
	#LIO_READ
 
LIO_READ


	)

120 
	mLIO_WRITE
,

121 
	#LIO_WRITE
 
LIO_WRITE


	)

122 
	mLIO_NOP


123 
	#LIO_NOP
 
LIO_NOP


	)

130 
	mLIO_WAIT
,

131 
	#LIO_WAIT
 
LIO_WAIT


	)

132 
	mLIO_NOWAIT


133 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

138 #ifde‡
__USE_GNU


139 
	$aio_öô
 (c⁄° 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #i‚de‡
__USE_FILE_OFFSET64


145 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

150 
	$lio_li°io
 (
__mode
,

151 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

152 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
	$aio_îr‹
 (c⁄° 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

158 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

162 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

169 
	$aio_su•íd
 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

170 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

171 
	`__n⁄nuŒ
 ((1));

175 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

176 
__THROW
 
	`__n⁄nuŒ
 ((2));

178 #ifde‡
__REDIRECT_NTH


179 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

180 
	`__n⁄nuŒ
 ((1));

181 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

182 
	`__n⁄nuŒ
 ((1));

184 
	`__REDIRECT_NTH
 (
lio_li°io
,

185 (
__mode
,

186 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

187 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

188 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

190 
	`__REDIRECT_NTH
 (
aio_îr‹
, (c⁄° 
aiocb
 *
__aiocbp
),

191 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

192 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

193 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

195 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

196 (
__fûdes
, 
aiocb
 *
__aiocbp
),

197 
aio_ˇn˚l64
);

199 
	`__REDIRECT_NTH
 (
aio_su•íd
,

200 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

201 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

202 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT_NTH
 (
aio_fsync
,

205 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

206 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

209 
	#aio_ªad
 
aio_ªad64


	)

210 
	#aio_wrôe
 
aio_wrôe64


	)

211 
	#lio_li°io
 
lio_li°io64


	)

212 
	#aio_îr‹
 
aio_îr‹64


	)

213 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

214 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

215 
	#aio_su•íd
 
aio_su•íd64


	)

216 
	#aio_fsync
 
aio_fsync64


	)

220 #ifde‡
__USE_LARGEFILE64


221 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$lio_li°io64
 (
__mode
,

225 
aiocb64
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

226 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

227 
__THROW
 
	`__n⁄nuŒ
 ((2));

229 
	$aio_îr‹64
 (c⁄° 
aiocb64
 *
__aiocbp
)

230 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

236 
	$aio_su•íd64
 (c⁄° 
aiocb64
 *c⁄° 
__li°
[], 
__√¡
,

237 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

238 
__THROW
 
	`__n⁄nuŒ
 ((1));

240 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2));

244 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/crypt.h

24 #i‚de‡
_CRYPT_H


25 
	#_CRYPT_H
 1

	)

27 
	~<„©uªs.h
>

29 
__BEGIN_DECLS


32 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

33 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

36 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

40 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

41 
__THROW
 
	`__n⁄nuŒ
 ((1));

43 #ifde‡
__USE_GNU


46 
	s¸y±_d©a


48 
keysched
[16 * 8];

49 
sb0
[32768];

50 
sb1
[32768];

51 
sb2
[32768];

52 
sb3
[32768];

54 
¸y±_3_buf
[14];

55 
cuºít_ß…
[2];

56 
cuºít_ß…bôs
;

57 
dúe˘i⁄
, 
öôülized
;

60 *
	$¸y±_r
 (c⁄° *
__key
, c⁄° *
__ß…
,

61 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

62 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

64 
	$£tkey_r
 (c⁄° *
__key
,

65 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

66 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

68 
	$í¸y±_r
 (*
__glibc_block
, 
__edÊag
,

69 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

70 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

73 
__END_DECLS


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #ifde‡
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #ifde‡
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #ifde‡
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/glob.h

18 #i‚def 
_GLOB_H


19 
	#_GLOB_H
 1

	)

21 
	~<sys/cdefs.h
>

23 
	g__BEGIN_DECLS


26 #i‚de‡
__size_t


27 
__SIZE_TYPE__
 
	t__size_t
;

28 #i‡
deföed
 
__USE_XOPEN
 || 
__USE_XOPEN2K8


29 
__SIZE_TYPE__
 
	tsize_t
;

34 #unde‡
__size_t


35 
	#__size_t
 
size_t


	)

39 
	#GLOB_ERR
 (1 << 0)

	)

40 
	#GLOB_MARK
 (1 << 1)

	)

41 
	#GLOB_NOSORT
 (1 << 2)

	)

42 
	#GLOB_DOOFFS
 (1 << 3)

	)

43 
	#GLOB_NOCHECK
 (1 << 4)

	)

44 
	#GLOB_APPEND
 (1 << 5)

	)

45 
	#GLOB_NOESCAPE
 (1 << 6)

	)

46 
	#GLOB_PERIOD
 (1 << 7)

	)

48 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_MISC


49 
	#GLOB_MAGCHAR
 (1 << 8)

	)

50 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

51 
	#GLOB_BRACE
 (1 << 10)

	)

52 
	#GLOB_NOMAGIC
 (1 << 11)

	)

53 
	#GLOB_TILDE
 (1 << 12)

	)

54 
	#GLOB_ONLYDIR
 (1 << 13)

	)

55 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

57 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

58 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

59 
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
| \

60 
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

62 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

63 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

64 
GLOB_PERIOD
)

	)

68 
	#GLOB_NOSPACE
 1

	)

69 
	#GLOB_ABORTED
 2

	)

70 
	#GLOB_NOMATCH
 3

	)

71 
	#GLOB_NOSYS
 4

	)

72 #ifde‡
__USE_GNU


75 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

79 #ifde‡
__USE_GNU


80 
	g°©
;

84 
__size_t
 
	mgl_∑thc
;

85 **
	mgl_∑thv
;

86 
__size_t
 
	mgl_offs
;

87 
	mgl_Êags
;

91 (*
	mgl_˛o£dú
) (*);

92 #ifde‡
__USE_GNU


93 
	mdúít
 *(*
	mgl_ªaddú
) (*);

95 *(*
	mgl_ªaddú
) (*);

97 *(*
	mgl_›ídú
) (const *);

98 #ifde‡
__USE_GNU


99 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

100 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

102 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

103 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

105 } 
	tglob_t
;

107 #ifde‡
__USE_LARGEFILE64


108 #ifde‡
__USE_GNU


109 
	g°©64
;

113 
__size_t
 
	mgl_∑thc
;

114 **
	mgl_∑thv
;

115 
__size_t
 
	mgl_offs
;

116 
	mgl_Êags
;

120 (*
	mgl_˛o£dú
) (*);

121 #ifde‡
__USE_GNU


122 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

124 *(*
	mgl_ªaddú
) (*);

126 *(*
	mgl_›ídú
) (const *);

127 #ifde‡
__USE_GNU


128 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

129 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

131 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

132 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

134 } 
	tglob64_t
;

145 #i‡!
deföed
 
__USE_FILE_OFFSET64


146 
glob
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

147 (*
__îrfunc
) (const *, ),

148 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

151 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

153 
	`__REDIRECT_NTH
 (
glob
, (c⁄° *
__ª°ri˘
 
__∑âîn
,

154 
__Êags
,

155 (*
__îrfunc
) (const *, ),

156 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

158 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

161 #ifde‡
__USE_LARGEFILE64


162 
	`glob64
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

163 (*
__îrfunc
) (const *, ),

164 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

166 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

170 #ifde‡
__USE_GNU


176 
	$glob_∑âîn_p
 (c⁄° *
__∑âîn
, 
__quŸe
Ë
__THROW
;

179 
__END_DECLS


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #ifde‡
__USE_MISC


52 
	#__√ed_FILE


	)

53 
	~<°dio.h
>

57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


62 
£tgª¡
 ();

65 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


70 
ídgª¡
 ();

76 
group
 *
gëgª¡
 ();

79 #ifdef 
__USE_MISC


86 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

89 #ifde‡
__USE_GNU


96 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

97 
FILE
 *
__ª°ri˘
 
__f
);

104 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

110 
group
 *
gëg∫am
 (c⁄° *
__«me
);

112 #ifde‡
__USE_POSIX


114 #ifde‡
__USE_MISC


117 
	#NSS_BUFLEN_GROUP
 1024

	)

133 #ifde‡
__USE_GNU


134 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

135 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

136 
group
 **
__ª°ri˘
 
__ªsu…
);

143 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

144 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

145 
group
 **
__ª°ri˘
 
__ªsu…
);

151 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

152 
group
 *
__ª°ri˘
 
__ªsu…buf
,

153 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

154 
group
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_MISC


164 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
group
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
group
 **
__ª°ri˘
 
__ªsu…
);

173 #ifdef 
__USE_MISC


175 
	#__√ed_size_t


	)

176 
	~<°ddef.h
>

179 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

189 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

190 
__gid_t
 *
__groups
, *
__ngroups
);

200 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

204 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/aio_abi.h

27 #i‚de‡
__LINUX__AIO_ABI_H


28 
	#__LINUX__AIO_ABI_H


	)

30 
	~<löux/ty≥s.h
>

31 
	~<asm/byã‹dî.h
>

33 
__kî√l_ul⁄g_t
 
	taio_c⁄ãxt_t
;

36 
	mIOCB_CMD_PREAD
 = 0,

37 
	mIOCB_CMD_PWRITE
 = 1,

38 
	mIOCB_CMD_FSYNC
 = 2,

39 
	mIOCB_CMD_FDSYNC
 = 3,

44 
	mIOCB_CMD_NOOP
 = 6,

45 
	mIOCB_CMD_PREADV
 = 7,

46 
	mIOCB_CMD_PWRITEV
 = 8,

55 
	#IOCB_FLAG_RESFD
 (1 << 0)

	)

58 
	sio_evít
 {

59 
__u64
 
	md©a
;

60 
__u64
 
	mobj
;

61 
__s64
 
	mªs
;

62 
__s64
 
	mªs2
;

65 #i‡
deföed
(
__BYTE_ORDER
Ë? __BYTE_ORDER =
__LITTLE_ENDIAN
 : defined(__LITTLE_ENDIAN)

66 
	#PADDED
(
x
,
y
Ëx, 
	)
y

67 #ñi‡
deföed
(
__BYTE_ORDER
Ë? __BYTE_ORDER =
__BIG_ENDIAN
 : defined(__BIG_ENDIAN)

68 
	#PADDED
(
x
,
y
Ëy, 
	)
x

70 #îr‹ 
edô
 
your
 
odd
 
byã‹dî
.

79 
	siocb
 {

81 
__u64
 
	maio_d©a
;

82 
__u32
 
PADDED
(
aio_key
, 
aio_ª£rved1
);

86 
__u16
 
	maio_lio_›code
;

87 
__s16
 
	maio_ªq¥io
;

88 
__u32
 
	maio_fûdes
;

90 
__u64
 
	maio_buf
;

91 
__u64
 
	maio_nbyãs
;

92 
__s64
 
	maio_off£t
;

95 
__u64
 
	maio_ª£rved2
;

98 
__u32
 
	maio_Êags
;

104 
__u32
 
	maio_ªsfd
;

107 #unde‡
IFBIG


108 #unde‡
IFLITTLE


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #ifde‡
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT
 \

96 || 
deföed
 
_LIBC_TEST


97 #ifde‡
__LDBL_COMPAT


99 #ifde‡
__USE_ISOC99


100 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

101 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

102 #ifde‡
__REDIRECT_NTH


103 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

104 
__∆dbl_√xâow¨df
)

105 
	`__©åibuã__
 ((
__c⁄°__
));

106 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

107 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

108 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

109 (
__x
, 
__y
),

110 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 #unde‡
__MATHDECL_1


115 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

116 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

117 
¨gs
, 
Æüs
)

	)

118 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

119 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

125 #i‚de‡
_Ml⁄g_doubÀ_


126 
	#_Ml⁄g_doubÀ_
 

	)

128 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

129 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

130 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

131 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

132 
	#__MATH_DECLARE_LDOUBLE
 1

	)

133 
	~<bôs/m©hˇŒs.h
>

134 #unde‡
_MdoubÀ_


135 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


136 #unde‡
_MdoubÀ_END_NAMESPACE


137 #unde‡
__MATH_PRECNAME


142 #unde‡
__MATHDECL_1


143 #unde‡
__MATHDECL


144 #unde‡
__MATHCALL


147 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


149 
signgam
;

154 #ifde‡
__USE_ISOC99


192 
FP_NAN
 =

193 
	#FP_NAN
 0

	)

194 
FP_NAN
,

195 
FP_INFINITE
 =

196 
	#FP_INFINITE
 1

	)

197 
FP_INFINITE
,

198 
FP_ZERO
 =

199 
	#FP_ZERO
 2

	)

200 
FP_ZERO
,

201 
FP_SUBNORMAL
 =

202 
	#FP_SUBNORMAL
 3

	)

203 
FP_SUBNORMAL
,

204 
FP_NORMAL
 =

205 
	#FP_NORMAL
 4

	)

206 
FP_NORMAL


210 #ifde‡
__NO_LONG_DOUBLE_MATH


211 
	#Â˛assify
(
x
) \

212 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

214 
	#Â˛assify
(
x
) \

215 ( (
x
) ==  () \

216 ? 
	`__Â˛assifyf
 (
x
) \

217 :  (
x
) ==  () \

218 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

222 #ifde‡
__NO_LONG_DOUBLE_MATH


223 
	#signbô
(
x
) \

224 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

226 
	#signbô
(
x
) \

227 ( (
x
) ==  () \

228 ? 
	`__signbôf
 (
x
) \

229 :  (
x
) ==  () \

230 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

234 #ifde‡
__NO_LONG_DOUBLE_MATH


235 
	#isföôe
(
x
) \

236 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

238 
	#isföôe
(
x
) \

239 ( (
x
) ==  () \

240 ? 
	`__föôef
 (
x
) \

241 :  (
x
) ==  () \

242 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

246 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

250 #ifde‡
__NO_LONG_DOUBLE_MATH


251 
	#i¢™
(
x
) \

252 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

254 
	#i¢™
(
x
) \

255 ( (
x
) ==  () \

256 ? 
	`__i¢™f
 (
x
) \

257 :  (
x
) ==  () \

258 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

262 #ifde‡
__NO_LONG_DOUBLE_MATH


263 
	#isöf
(
x
) \

264 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

266 
	#isöf
(
x
) \

267 ( (
x
) ==  () \

268 ? 
	`__isöff
 (
x
) \

269 :  (
x
) ==  () \

270 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

274 
	#MATH_ERRNO
 1

	)

275 
	#MATH_ERREXCEPT
 2

	)

280 #i‚de‡
__FAST_MATH__


281 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

286 #ifde‡
__USE_GNU


288 #ifde‡
__NO_LONG_DOUBLE_MATH


289 
	#issig«lög
(
x
) \

290 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

292 
	#issig«lög
(
x
) \

293 ( (
x
) ==  () \

294 ? 
	`__issig«lögf
 (
x
) \

295 :  (
x
) ==  () \

296 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

300 #ifdef 
__USE_MISC


304 
_IEEE_
 = -1,

305 
_SVID_
,

306 
_XOPEN_
,

307 
_POSIX_
,

308 
_ISOC_


309 } 
	t_LIB_VERSION_TYPE
;

314 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

318 #ifde‡
__USE_MISC


324 #ifde‡
__˝lu•lus


325 
__ex˚±i⁄


327 
ex˚±i⁄


330 
ty≥
;

331 *
«me
;

332 
¨g1
;

333 
¨g2
;

334 
ªtvÆ
;

335 
	}
};

337 #ifde‡
__˝lu•lus


338 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

340 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

343 
	#X_TLOSS
 1.41484755040568800000e+16

	)

346 
	#DOMAIN
 1

	)

347 
	#SING
 2

	)

348 
	#OVERFLOW
 3

	)

349 
	#UNDERFLOW
 4

	)

350 
	#TLOSS
 5

	)

351 
	#PLOSS
 6

	)

354 
	#HUGE
 3.40282347e+38F

	)

358 #ifde‡
__USE_XOPEN


360 
	#MAXFLOAT
 3.40282347e+38F

	)

367 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


368 
	#M_E
 2.7182818284590452354

	)

369 
	#M_LOG2E
 1.4426950408889634074

	)

370 
	#M_LOG10E
 0.43429448190325182765

	)

371 
	#M_LN2
 0.69314718055994530942

	)

372 
	#M_LN10
 2.30258509299404568402

	)

373 
	#M_PI
 3.14159265358979323846

	)

374 
	#M_PI_2
 1.57079632679489661923

	)

375 
	#M_PI_4
 0.78539816339744830962

	)

376 
	#M_1_PI
 0.31830988618379067154

	)

377 
	#M_2_PI
 0.63661977236758134308

	)

378 
	#M_2_SQRTPI
 1.12837916709551257390

	)

379 
	#M_SQRT2
 1.41421356237309504880

	)

380 
	#M_SQRT1_2
 0.70710678118654752440

	)

386 #ifde‡
__USE_GNU


387 
	#M_El
 2.718281828459045235360287471352662498L

	)

388 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

389 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

390 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

391 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

392 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

393 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

394 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

395 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

396 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

397 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

398 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

399 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

406 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


407 
	#__NO_MATH_INLINES
 1

	)

410 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

417 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

418 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

419 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

420 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

421 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

422 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

426 #ifde‡
__USE_EXTERN_INLINES


427 
	~<bôs/m©hölöe.h
>

432 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

433 
	~<bôs/m©h-föôe.h
>

436 #ifde‡
__USE_ISOC99


440 #i‚de‡
isgª©î


441 
	#isgª©î
(
x
, 
y
) \

442 (
__exãnsi⁄__
 \

443 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

444 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

448 #i‚de‡
isgª©îequÆ


449 
	#isgª©îequÆ
(
x
, 
y
) \

450 (
__exãnsi⁄__
 \

451 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

452 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

456 #i‚de‡
i¶ess


457 
	#i¶ess
(
x
, 
y
) \

458 (
__exãnsi⁄__
 \

459 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

460 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

464 #i‚de‡
i¶es£quÆ


465 
	#i¶es£quÆ
(
x
, 
y
) \

466 (
__exãnsi⁄__
 \

467 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

468 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

472 #i‚de‡
i¶essgª©î


473 
	#i¶essgª©î
(
x
, 
y
) \

474 (
__exãnsi⁄__
 \

475 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

476 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

480 #i‚de‡
isun‹dîed


481 
	#isun‹dîed
(
u
, 
v
) \

482 (
__exãnsi⁄__
 \

483 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

484 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

489 
	g__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #ifde‡
__USE_MISC


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #ifde‡
__USE_MISC


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_MISC


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #ifde‡
__USE_MISC


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #ifde‡
__USE_MISC


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #ifde‡
__USE_MISC


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #ifde‡
__USE_MISC


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #ifde‡
__USE_MISC


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

65 #ifde‡
__USE_MISC


66 
	~<sys/ty≥s.h
>

67 
	~<sys/sockë.h
>

69 
u_öt32_t
 
	tt˝_£q
;

74 
	st˝hdr


76 
__exãnsi⁄__
 union

80 
u_öt16_t
 
	mth_•‹t
;

81 
u_öt16_t
 
	mth_dp‹t
;

82 
t˝_£q
 
	mth_£q
;

83 
t˝_£q
 
	mth_ack
;

84 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


85 
u_öt8_t
 
	mth_x2
:4;

86 
u_öt8_t
 
	mth_off
:4;

88 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


89 
u_öt8_t
 
	mth_off
:4;

90 
u_öt8_t
 
	mth_x2
:4;

92 
u_öt8_t
 
	mth_Êags
;

93 
	#TH_FIN
 0x01

	)

94 
	#TH_SYN
 0x02

	)

95 
	#TH_RST
 0x04

	)

96 
	#TH_PUSH
 0x08

	)

97 
	#TH_ACK
 0x10

	)

98 
	#TH_URG
 0x20

	)

99 
u_öt16_t
 
	mth_wö
;

100 
u_öt16_t
 
	mth_sum
;

101 
u_öt16_t
 
	mth_uΩ
;

105 
u_öt16_t
 
	msour˚
;

106 
u_öt16_t
 
	mde°
;

107 
u_öt32_t
 
	m£q
;

108 
u_öt32_t
 
	mack_£q
;

109 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mdoff
:4;

112 
u_öt16_t
 
	mfö
:1;

113 
u_öt16_t
 
	msyn
:1;

114 
u_öt16_t
 
	mr°
:1;

115 
u_öt16_t
 
	mpsh
:1;

116 
u_öt16_t
 
	mack
:1;

117 
u_öt16_t
 
	murg
:1;

118 
u_öt16_t
 
	mªs2
:2;

119 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


120 
u_öt16_t
 
	mdoff
:4;

121 
u_öt16_t
 
	mªs1
:4;

122 
u_öt16_t
 
	mªs2
:2;

123 
u_öt16_t
 
	murg
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	mpsh
:1;

126 
u_öt16_t
 
	mr°
:1;

127 
u_öt16_t
 
	msyn
:1;

128 
u_öt16_t
 
	mfö
:1;

132 
u_öt16_t
 
	mwödow
;

133 
u_öt16_t
 
	mcheck
;

134 
u_öt16_t
 
	murg_±r
;

141 
	mTCP_ESTABLISHED
 = 1,

142 
	mTCP_SYN_SENT
,

143 
	mTCP_SYN_RECV
,

144 
	mTCP_FIN_WAIT1
,

145 
	mTCP_FIN_WAIT2
,

146 
	mTCP_TIME_WAIT
,

147 
	mTCP_CLOSE
,

148 
	mTCP_CLOSE_WAIT
,

149 
	mTCP_LAST_ACK
,

150 
	mTCP_LISTEN
,

151 
	mTCP_CLOSING


154 
	#TCPOPT_EOL
 0

	)

155 
	#TCPOPT_NOP
 1

	)

156 
	#TCPOPT_MAXSEG
 2

	)

157 
	#TCPOLEN_MAXSEG
 4

	)

158 
	#TCPOPT_WINDOW
 3

	)

159 
	#TCPOLEN_WINDOW
 3

	)

160 
	#TCPOPT_SACK_PERMITTED
 4

	)

161 
	#TCPOLEN_SACK_PERMITTED
 2

	)

162 
	#TCPOPT_SACK
 5

	)

163 
	#TCPOPT_TIMESTAMP
 8

	)

164 
	#TCPOLEN_TIMESTAMP
 10

	)

165 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

167 
	#TCPOPT_TSTAMP_HDR
 \

168 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

176 
	#TCP_MSS
 512

	)

178 
	#TCP_MAXWIN
 65535

	)

180 
	#TCP_MAX_WINSHIFT
 14

	)

182 
	#SOL_TCP
 6

	)

185 
	#TCPI_OPT_TIMESTAMPS
 1

	)

186 
	#TCPI_OPT_SACK
 2

	)

187 
	#TCPI_OPT_WSCALE
 4

	)

188 
	#TCPI_OPT_ECN
 8

	)

189 
	#TCPI_OPT_ECN_SEEN
 16

	)

190 
	#TCPI_OPT_SYN_DATA
 32

	)

193 
	et˝_ˇ_°©e


195 
	mTCP_CA_O≥n
 = 0,

196 
	mTCP_CA_Dis‹dî
 = 1,

197 
	mTCP_CA_CWR
 = 2,

198 
	mTCP_CA_Recovîy
 = 3,

199 
	mTCP_CA_Loss
 = 4

202 
	st˝_öfo


204 
u_öt8_t
 
	mt˝i_°©e
;

205 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

206 
u_öt8_t
 
	mt˝i_ªå™smôs
;

207 
u_öt8_t
 
	mt˝i_¥obes
;

208 
u_öt8_t
 
	mt˝i_backoff
;

209 
u_öt8_t
 
	mt˝i_›ti⁄s
;

210 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

212 
u_öt32_t
 
	mt˝i_πo
;

213 
u_öt32_t
 
	mt˝i_©o
;

214 
u_öt32_t
 
	mt˝i_¢d_mss
;

215 
u_öt32_t
 
	mt˝i_rcv_mss
;

217 
u_öt32_t
 
	mt˝i_u«cked
;

218 
u_öt32_t
 
	mt˝i_ßcked
;

219 
u_öt32_t
 
	mt˝i_lo°
;

220 
u_öt32_t
 
	mt˝i_ªå™s
;

221 
u_öt32_t
 
	mt˝i_Áckës
;

224 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

225 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

226 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

227 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

230 
u_öt32_t
 
	mt˝i_pmtu
;

231 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

232 
u_öt32_t
 
	mt˝i_πt
;

233 
u_öt32_t
 
	mt˝i_πtv¨
;

234 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

235 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

236 
u_öt32_t
 
	mt˝i_advmss
;

237 
u_öt32_t
 
	mt˝i_ª‹dîög
;

239 
u_öt32_t
 
	mt˝i_rcv_πt
;

240 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

242 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

247 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

249 
	st˝_md5sig


251 
sockaddr_°‹age
 
	mt˝m_addr
;

252 
u_öt16_t
 
	m__t˝m_∑d1
;

253 
u_öt16_t
 
	mt˝m_keyÀn
;

254 
u_öt32_t
 
	m__t˝m_∑d2
;

255 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

259 
	st˝_ª∑ú_›t


261 
u_öt32_t
 
	m›t_code
;

262 
u_öt32_t
 
	m›t_vÆ
;

268 
	mTCP_NO_QUEUE
,

269 
	mTCP_RECV_QUEUE
,

270 
	mTCP_SEND_QUEUE
,

271 
	mTCP_QUEUES_NR
,

275 
	#TCP_COOKIE_MIN
 8

	)

276 
	#TCP_COOKIE_MAX
 16

	)

277 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

280 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

281 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

285 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

286 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

288 
	#TCP_MSS_DEFAULT
 536U

	)

289 
	#TCP_MSS_DESIRED
 1220U

	)

291 
	st˝_cookõ_å™ß˘i⁄s


293 
u_öt16_t
 
	mt˝˘_Êags
;

294 
u_öt8_t
 
	m__t˝˘_∑d1
;

295 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

296 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

297 
u_öt16_t
 
	mt˝˘_u£d
;

298 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

95 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

96 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

115 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


118 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

121 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


127 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


128 #i‡
__WORDSIZE
 == 64

129 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

134 
	#PTHREAD_RWLOCK_INITIALIZER
 \

135 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

136 #ifde‡
__USE_GNU


137 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


138 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

139 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

140 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

142 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


143 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

144 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

145 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

148 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

149 0 } }

	)

159 
	mPTHREAD_INHERIT_SCHED
,

160 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

161 
	mPTHREAD_EXPLICIT_SCHED


162 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

169 
	mPTHREAD_SCOPE_SYSTEM
,

170 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

171 
	mPTHREAD_SCOPE_PROCESS


172 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

179 
	mPTHREAD_PROCESS_PRIVATE
,

180 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

181 
	mPTHREAD_PROCESS_SHARED


182 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

188 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

192 
	s_±hªad_˛ónup_buf„r


194 (*
	m__routöe
) (*);

195 *
	m__¨g
;

196 
	m__ˇn˚…y≥
;

197 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

203 
	mPTHREAD_CANCEL_ENABLE
,

204 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

205 
	mPTHREAD_CANCEL_DISABLE


206 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

210 
	mPTHREAD_CANCEL_DEFERRED
,

211 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

212 
	mPTHREAD_CANCEL_ASYNCHRONOUS


213 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

215 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

219 
	#PTHREAD_ONCE_INIT
 0

	)

222 #ifde‡
__USE_XOPEN2K


226 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

230 
__BEGIN_DECLS


235 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

236 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

237 *(*
__°¨t_routöe
) (*),

238 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

244 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

252 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

254 #ifde‡
__USE_GNU


257 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

265 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

266 c⁄° 
time•ec
 *
__ab°ime
);

273 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

277 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

280 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

281 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

297 *
__dëach°©e
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

302 
__dëach°©e
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

308 
size_t
 *
__gu¨dsize
)

309 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

312 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

313 
size_t
 
__gu¨dsize
)

314 
__THROW
 
	`__n⁄nuŒ
 ((1));

318 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

319 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

324 c⁄° 
sched_∑øm
 *
__ª°ri˘


325 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

328 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


329 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__öhîô
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

343 
__öhîô
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

348 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

349 *
__ª°ri˘
 
__sc›e
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

353 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


358 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

365 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

366 *
__°ackaddr
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

370 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


371 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

378 
size_t
 
__°acksize
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1));

381 #ifde‡
__USE_XOPEN2K


383 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

384 **
__ª°ri˘
 
__°ackaddr
,

385 
size_t
 *
__ª°ri˘
 
__°acksize
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

391 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

392 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

395 #ifde‡
__USE_GNU


398 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

399 
size_t
 
__˝u£tsize
,

400 c⁄° 
˝u_£t_t
 *
__˝u£t
)

401 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

405 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

406 
size_t
 
__˝u£tsize
,

407 
˝u_£t_t
 *
__˝u£t
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

411 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

412 
__THROW
 
	`__n⁄nuŒ
 ((1));

416 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1));

422 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

432 c⁄° 
sched_∑øm
 *
__∑øm
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

437 *
__ª°ri˘
 
__pﬁicy
,

438 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

442 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

443 
__THROW
;

446 #ifde‡
__USE_GNU


448 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

449 
size_t
 
__buÊí
)

450 
__THROW
 
	`__n⁄nuŒ
 ((2));

453 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

458 #ifde‡
__USE_UNIX98


460 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

463 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

466 #ifde‡
__USE_GNU


471 
	$±hªad_yõld
 (Ë
__THROW
;

476 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

477 c⁄° 
˝u_£t_t
 *
__˝u£t
)

478 
__THROW
 
	`__n⁄nuŒ
 ((3));

481 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

482 
˝u_£t_t
 *
__˝u£t
)

483 
__THROW
 
	`__n⁄nuŒ
 ((3));

496 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

497 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

508 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

512 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

515 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

520 
	`±hªad_ã°ˇn˚l
 ();

529 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

530 
__mask_was_ßved
;

531 } 
__ˇn˚l_jmp_buf
[1];

532 *
__∑d
[4];

533 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

536 #i‚de‡
__˛ónup_f˘_©åibuã


537 
	#__˛ónup_f˘_©åibuã


	)

542 
	s__±hªad_˛ónup_‰ame


544 (*
__ˇn˚l_routöe
) (*);

545 *
__ˇn˚l_¨g
;

546 
__do_ô
;

547 
__ˇn˚l_ty≥
;

550 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


551 #ifde‡
__˝lu•lus


553 ˛as†
	c__±hªad_˛ónup_˛ass


555 (*
__ˇn˚l_routöe
) (*);

556 *
__ˇn˚l_¨g
;

557 
__do_ô
;

558 
__ˇn˚l_ty≥
;

560 
public
:

561 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

562 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

563 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

564 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

565 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

566 &
__ˇn˚l_ty≥
); 
	}
}

567 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

577 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

579 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

583 
	#±hªad_˛ónup_p›
(
execuã
) \

584 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

585 } 0)

	)

587 #ifde‡
__USE_GNU


591 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

593 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

594 
__˛‰ame
.
	`__de„r
 ()

	)

599 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

600 
__˛‰ame
.
	`__ª°‹e
 (); \

601 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

602 } 0)

	)

609 
__exã∫_ölöe
 

610 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

612 i‡(
__‰ame
->
__do_ô
)

613 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

614 
	}
}

623 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

625 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

626 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

627 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

628 .
__do_ô
 = 1 };

	)

632 
	#±hªad_˛ónup_p›
(
execuã
) \

633 
__˛‰ame
.
__do_ô
 = (
execuã
); \

634 } 0)

	)

636 #ifde‡
__USE_GNU


640 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

642 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

643 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

644 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

645 .
__do_ô
 = 1 }; \

646 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

647 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

652 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

653 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

654 
__˛‰ame
.
__do_ô
 = (
execuã
); \

655 } 0)

	)

666 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

668 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

669 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

670 *
__ˇn˚l_¨g
 = (
¨g
); \

671 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

672 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

673 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

675 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

676 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

680 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

681 dÿ{

	)

682 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

683 
__˛ónup_f˘_©åibuã
;

687 
	#±hªad_˛ónup_p›
(
execuã
) \

690 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

691 i‡(
execuã
) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 } 0)

	)

694 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

695 
__˛ónup_f˘_©åibuã
;

697 #ifde‡
__USE_GNU


701 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

703 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

704 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

705 *
__ˇn˚l_¨g
 = (
¨g
); \

706 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

707 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

708 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

716 dÿ{

	)

717 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
;

723 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

726 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

727 i‡(
execuã
) \

728 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

729 
	}
} 0)

	)

730 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

731 
__˛ónup_f˘_©åibuã
;

735 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

736 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

737 #i‚de‡
SHARED


738 
	`__©åibuã__
 ((
__wók__
))

744 
__jmp_buf_èg
;

745 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

751 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

752 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

753 
__THROW
 
	`__n⁄nuŒ
 ((1));

756 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROW
 
	`__n⁄nuŒ
 ((1));

760 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

761 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

764 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

765 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

767 #ifde‡
__USE_XOPEN2K


769 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 c⁄° 
time•ec
 *
__ª°ri˘


771 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

775 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

776 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

780 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

781 
__ª°ri˘
 
__muãx
,

782 *
__ª°ri˘
 
__¥io˚ûög
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

787 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

788 
__¥io˚ûög
,

789 *
__ª°ri˘
 
__ﬁd_˚ûög
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

793 #ifde‡
__USE_XOPEN2K8


795 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

796 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 #ifde‡
__USE_GNU


798 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

809 
__THROW
 
	`__n⁄nuŒ
 ((1));

812 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1));

816 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

817 
__ª°ri˘
 
__©å
,

818 *
__ª°ri˘
 
__psh¨ed
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

822 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

823 
__psh¨ed
)

824 
__THROW
 
	`__n⁄nuŒ
 ((1));

826 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


828 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


829 
__©å
, *
__ª°ri˘
 
__köd
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

835 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

836 
__THROW
 
	`__n⁄nuŒ
 ((1));

840 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

841 
__ª°ri˘
 
__©å
,

842 *
__ª°ri˘
 
__¥Ÿocﬁ
)

843 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

848 
__¥Ÿocﬁ
)

849 
__THROW
 
	`__n⁄nuŒ
 ((1));

852 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

853 
__ª°ri˘
 
__©å
,

854 *
__ª°ri˘
 
__¥io˚ûög
)

855 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

858 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

859 
__¥io˚ûög
)

860 
__THROW
 
	`__n⁄nuŒ
 ((1));

862 #ifde‡
__USE_XOPEN2K


864 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

865 *
__robu°√ss
)

866 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 #ifde‡
__USE_GNU


868 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

869 *
__robu°√ss
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

874 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

875 
__robu°√ss
)

876 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 #ifde‡
__USE_GNU


878 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

879 
__robu°√ss
)

880 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


890 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


892 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

895 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1));

899 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

900 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

906 #ifde‡
__USE_XOPEN2K


908 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

909 c⁄° 
time•ec
 *
__ª°ri˘


910 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

914 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

915 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

919 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

921 #ifde‡
__USE_XOPEN2K


923 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

924 c⁄° 
time•ec
 *
__ª°ri˘


925 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

929 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

930 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

936 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

937 
__THROW
 
	`__n⁄nuŒ
 ((1));

940 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

945 
__ª°ri˘
 
__©å
,

946 *
__ª°ri˘
 
__psh¨ed
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

950 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

951 
__psh¨ed
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

956 
__ª°ri˘
 
__©å
,

957 *
__ª°ri˘
 
__¥ef
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

961 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

962 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

970 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

971 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

972 
__THROW
 
	`__n⁄nuŒ
 ((1));

975 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

976 
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

980 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

983 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

984 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

991 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

992 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

993 
	`__n⁄nuŒ
 ((1, 2));

1002 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1003 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1004 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1005 
	`__n⁄nuŒ
 ((1, 2, 3));

1010 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1014 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1015 
__THROW
 
	`__n⁄nuŒ
 ((1));

1018 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1019 
__ª°ri˘
 
__©å
,

1020 *
__ª°ri˘
 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1024 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1025 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 #ifde‡
__USE_XOPEN2K


1029 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1030 
__ª°ri˘
 
__©å
,

1031 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1032 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1035 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1036 
__˛ockid_t
 
__˛ock_id
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1041 #ifde‡
__USE_XOPEN2K


1046 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1055 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1059 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1070 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1071 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1072 
__©å
, 
__cou¡
)

1073 
__THROW
 
	`__n⁄nuŒ
 ((1));

1076 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1077 
__THROW
 
	`__n⁄nuŒ
 ((1));

1080 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1081 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((1));

1093 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1094 
__ª°ri˘
 
__©å
,

1095 *
__ª°ri˘
 
__psh¨ed
)

1096 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1099 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1100 
__psh¨ed
)

1101 
__THROW
 
	`__n⁄nuŒ
 ((1));

1113 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1114 (*
__de°r_fun˘i⁄
) (*))

1115 
__THROW
 
	`__n⁄nuŒ
 ((1));

1118 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1121 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1124 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1125 c⁄° *
__poöãr
Ë
__THROW
 ;

1128 #ifde‡
__USE_XOPEN2K


1130 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1131 
__˛ockid_t
 *
__˛ock_id
)

1132 
__THROW
 
	`__n⁄nuŒ
 ((2));

1147 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1148 (*
__∑ª¡
) (),

1149 (*
__chûd
Ë()Ë
__THROW
;

1152 #ifde‡
__USE_EXTERN_INLINES


1154 
__exã∫_ölöe
 

1155 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1157  
__thªad1
 =
__thªad2
;

1158 
	}
}

1161 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #ifde‡
__USE_MISC


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

102 
puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
gëpw«m
 (c⁄° *
__«me
);

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

144 
gëpwuid_r
 (
__uid_t
 
__uid
,

145 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

146 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

147 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

149 
gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

155 #ifdef 
__USE_MISC


163 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

164 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

165 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

166 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

171 #ifde‡
__USE_GNU


180 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

183 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

168 #ifde‡
__USE_XOPEN


169 #ifde‡
__GNUC__


170 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

172 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_MISC


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_MISC


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_MISC


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

308 
	~<bôs/sigc⁄ãxt.h
>

311 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

316 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


317 
	#__√ed_size_t


	)

318 
	~<°ddef.h
>

323 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

325 
	~<bôs/sig°ack.h
>

326 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


328 
	~<sys/uc⁄ãxt.h
>

334 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

335 
__THROW
 
__©åibuã_dïªˇãd__
;

339 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

340 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

344 #ifde‡
__USE_XOPEN_EXTENDED


348 
	$sighﬁd
 (
__sig
Ë
__THROW
;

351 
	$sigªl£
 (
__sig
Ë
__THROW
;

354 
	$sigign‹e
 (
__sig
Ë
__THROW
;

357 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

360 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


363 
	~<bôs/±hªadty≥s.h
>

364 
	~<bôs/sigthªad.h
>

371 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

373 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

377 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


175 *
	$°rdup
 (c⁄° *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 c⁄° *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 c⁄° *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 const *

228 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 const *

255 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 const *

307 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

324 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

326 #ifde‡
__OPTIMIZE__


327 
__exã∫_Æways_ölöe
 *

328 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


330  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

333 
__exã∫_Æways_ölöe
 const *

334 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


336  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

339 
	}
}

341 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
__END_NAMESPACE_STD


353 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

354 c⁄° *
__ª°ri˘
 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

357 #ifde‡
__USE_POSIX


358 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

359 **
__ª°ri˘
 
__ßve_±r
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

363 #ifde‡
__USE_GNU


365 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


366 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

369 c⁄° *
__√edÀ
)

370 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

372 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

373 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

377 #ifde‡
__USE_GNU


381 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

382 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

387 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

390 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

391 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

392 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

396 
__BEGIN_NAMESPACE_STD


398 
size_t
 
	$°æí
 (c⁄° *
__s
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

400 
__END_NAMESPACE_STD


402 #ifdef 
__USE_XOPEN2K8


405 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

406 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 
__BEGIN_NAMESPACE_STD


412 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

413 
__END_NAMESPACE_STD


414 #ifde‡
__USE_XOPEN2K


422 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


425 #ifde‡
__REDIRECT_NTH


426 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

427 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

428 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

430 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

431 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

437 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

442 #ifde‡
__USE_XOPEN2K8


444 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

450 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

452 #ifde‡
__USE_MISC


454 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

458 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

461 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

462 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


468 *
	`ödex
 (*
__s
, 
__c
)

469 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

471 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

473 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


474 
__exã∫_Æways_ölöe
 *

475 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


477  
	`__buûtö_ödex
 (
__s
, 
__c
);

480 
__exã∫_Æways_ölöe
 const *

481 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


483  
	`__buûtö_ödex
 (
__s
, 
__c
);

486 
	}
}

488 *
	$ödex
 (c⁄° *
__s
, 
__c
)

489 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

493 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


496 *
	`rödex
 (*
__s
, 
__c
)

497 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

499 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

501 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


502 
__exã∫_Æways_ölöe
 *

503 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


505  
	`__buûtö_rödex
 (
__s
, 
__c
);

508 
__exã∫_Æways_ölöe
 const *

509 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


511  
	`__buûtö_rödex
 (
__s
, 
__c
);

514 
	}
}

516 *
	$rödex
 (c⁄° *
__s
, 
__c
)

517 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

522 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

526 #ifdef 
__USE_GNU


527 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

533 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

538 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

541 #ifdef 
__USE_GNU


544 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

548 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

549 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

553 #ifdef 
__USE_MISC


556 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

557 c⁄° *
__ª°ri˘
 
__dñim
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

561 #ifdef 
__USE_XOPEN2K8


563 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

566 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

574 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 #ifdef 
__USE_GNU


583 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

584 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

587 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #i‚de‡
ba£«me


597 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


598 "C++" *
	$ba£«me
 (*
__fûíame
)

599 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

600 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

601 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

610 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

611 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


631 
	~<bôs/°rög.h
>

634 
	~<bôs/°rög2.h
>

637 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


639 
	~<bôs/°rög3.h
>

643 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_MISC
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_MISC


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_MISC


886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/utime.h

22 #i‚def 
_UTIME_H


23 
	#_UTIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

33 
	~<time.h
>

37 
	sutimbuf


39 
__time_t
 
	ma˘ime
;

40 
__time_t
 
	mmodtime
;

45 
	$utime
 (c⁄° *
__fûe
,

46 c⁄° 
utimbuf
 *
__fûe_times
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1));

49 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

231 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

232 
	#_POSIX_SOURCE
 1

	)

233 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

234 
	#_POSIX_C_SOURCE
 2

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

236 
	#_POSIX_C_SOURCE
 199506L

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

238 
	#_POSIX_C_SOURCE
 200112L

	)

240 
	#_POSIX_C_SOURCE
 200809L

	)

242 
	#__USE_POSIX_IMPLICITLY
 1

	)

245 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 21

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/linux/stddef.h

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
383
11425
objs/ngx_auto_config.h
objs/ngx_auto_headers.h
objs/ngx_modules.c
src/core/nginx.c
src/core/nginx.h
src/core/ngx_array.c
src/core/ngx_array.h
src/core/ngx_buf.c
src/core/ngx_buf.h
src/core/ngx_conf_file.c
src/core/ngx_conf_file.h
src/core/ngx_config.h
src/core/ngx_connection.c
src/core/ngx_connection.h
src/core/ngx_core.h
src/core/ngx_cpuinfo.c
src/core/ngx_crc.h
src/core/ngx_crc32.c
src/core/ngx_crc32.h
src/core/ngx_crypt.c
src/core/ngx_crypt.h
src/core/ngx_cycle.c
src/core/ngx_cycle.h
src/core/ngx_file.c
src/core/ngx_file.h
src/core/ngx_hash.c
src/core/ngx_hash.h
src/core/ngx_inet.c
src/core/ngx_inet.h
src/core/ngx_list.c
src/core/ngx_list.h
src/core/ngx_log.c
src/core/ngx_log.h
src/core/ngx_md5.c
src/core/ngx_md5.h
src/core/ngx_murmurhash.c
src/core/ngx_murmurhash.h
src/core/ngx_open_file_cache.c
src/core/ngx_open_file_cache.h
src/core/ngx_output_chain.c
src/core/ngx_palloc.c
src/core/ngx_palloc.h
src/core/ngx_parse.c
src/core/ngx_parse.h
src/core/ngx_proxy_protocol.c
src/core/ngx_proxy_protocol.h
src/core/ngx_queue.c
src/core/ngx_queue.h
src/core/ngx_radix_tree.c
src/core/ngx_radix_tree.h
src/core/ngx_rbtree.c
src/core/ngx_rbtree.h
src/core/ngx_regex.c
src/core/ngx_regex.h
src/core/ngx_resolver.c
src/core/ngx_resolver.h
src/core/ngx_sha1.h
src/core/ngx_shmtx.c
src/core/ngx_shmtx.h
src/core/ngx_slab.c
src/core/ngx_slab.h
src/core/ngx_spinlock.c
src/core/ngx_string.c
src/core/ngx_string.h
src/core/ngx_syslog.c
src/core/ngx_syslog.h
src/core/ngx_thread_pool.c
src/core/ngx_thread_pool.h
src/core/ngx_times.c
src/core/ngx_times.h
src/event/modules/ngx_aio_module.c
src/event/modules/ngx_devpoll_module.c
src/event/modules/ngx_epoll_module.c
src/event/modules/ngx_eventport_module.c
src/event/modules/ngx_kqueue_module.c
src/event/modules/ngx_poll_module.c
src/event/modules/ngx_rtsig_module.c
src/event/modules/ngx_select_module.c
src/event/modules/ngx_win32_select_module.c
src/event/ngx_event.c
src/event/ngx_event.h
src/event/ngx_event_accept.c
src/event/ngx_event_connect.c
src/event/ngx_event_connect.h
src/event/ngx_event_openssl.c
src/event/ngx_event_openssl.h
src/event/ngx_event_openssl_stapling.c
src/event/ngx_event_pipe.c
src/event/ngx_event_pipe.h
src/event/ngx_event_posted.c
src/event/ngx_event_posted.h
src/event/ngx_event_timer.c
src/event/ngx_event_timer.h
src/http/modules/ngx_http_access_module.c
src/http/modules/ngx_http_addition_filter_module.c
src/http/modules/ngx_http_auth_basic_module.c
src/http/modules/ngx_http_auth_request_module.c
src/http/modules/ngx_http_autoindex_module.c
src/http/modules/ngx_http_browser_module.c
src/http/modules/ngx_http_charset_filter_module.c
src/http/modules/ngx_http_chunked_filter_module.c
src/http/modules/ngx_http_dav_module.c
src/http/modules/ngx_http_degradation_module.c
src/http/modules/ngx_http_empty_gif_module.c
src/http/modules/ngx_http_fastcgi_module.c
src/http/modules/ngx_http_flv_module.c
src/http/modules/ngx_http_geo_module.c
src/http/modules/ngx_http_geoip_module.c
src/http/modules/ngx_http_gunzip_filter_module.c
src/http/modules/ngx_http_gzip_filter_module.c
src/http/modules/ngx_http_gzip_static_module.c
src/http/modules/ngx_http_headers_filter_module.c
src/http/modules/ngx_http_image_filter_module.c
src/http/modules/ngx_http_index_module.c
src/http/modules/ngx_http_limit_conn_module.c
src/http/modules/ngx_http_limit_req_module.c
src/http/modules/ngx_http_log_module.c
src/http/modules/ngx_http_map_module.c
src/http/modules/ngx_http_memcached_module.c
src/http/modules/ngx_http_mp4_module.c
src/http/modules/ngx_http_not_modified_filter_module.c
src/http/modules/ngx_http_proxy_module.c
src/http/modules/ngx_http_random_index_module.c
src/http/modules/ngx_http_range_filter_module.c
src/http/modules/ngx_http_realip_module.c
src/http/modules/ngx_http_referer_module.c
src/http/modules/ngx_http_rewrite_module.c
src/http/modules/ngx_http_scgi_module.c
src/http/modules/ngx_http_secure_link_module.c
src/http/modules/ngx_http_split_clients_module.c
src/http/modules/ngx_http_ssi_filter_module.c
src/http/modules/ngx_http_ssi_filter_module.h
src/http/modules/ngx_http_ssl_module.c
src/http/modules/ngx_http_ssl_module.h
src/http/modules/ngx_http_static_module.c
src/http/modules/ngx_http_stub_status_module.c
src/http/modules/ngx_http_sub_filter_module.c
src/http/modules/ngx_http_upstream_hash_module.c
src/http/modules/ngx_http_upstream_ip_hash_module.c
src/http/modules/ngx_http_upstream_keepalive_module.c
src/http/modules/ngx_http_upstream_least_conn_module.c
src/http/modules/ngx_http_userid_filter_module.c
src/http/modules/ngx_http_uwsgi_module.c
src/http/modules/ngx_http_xslt_filter_module.c
src/http/modules/perl/ngx_http_perl_module.c
src/http/modules/perl/ngx_http_perl_module.h
src/http/ngx_http.c
src/http/ngx_http.h
src/http/ngx_http_cache.h
src/http/ngx_http_config.h
src/http/ngx_http_copy_filter_module.c
src/http/ngx_http_core_module.c
src/http/ngx_http_core_module.h
src/http/ngx_http_file_cache.c
src/http/ngx_http_header_filter_module.c
src/http/ngx_http_parse.c
src/http/ngx_http_parse_time.c
src/http/ngx_http_postpone_filter_module.c
src/http/ngx_http_request.c
src/http/ngx_http_request.h
src/http/ngx_http_request_body.c
src/http/ngx_http_script.c
src/http/ngx_http_script.h
src/http/ngx_http_spdy.c
src/http/ngx_http_spdy.h
src/http/ngx_http_spdy_filter_module.c
src/http/ngx_http_spdy_module.c
src/http/ngx_http_spdy_module.h
src/http/ngx_http_special_response.c
src/http/ngx_http_upstream.c
src/http/ngx_http_upstream.h
src/http/ngx_http_upstream_round_robin.c
src/http/ngx_http_upstream_round_robin.h
src/http/ngx_http_variables.c
src/http/ngx_http_variables.h
src/http/ngx_http_write_filter_module.c
src/mail/ngx_mail.c
src/mail/ngx_mail.h
src/mail/ngx_mail_auth_http_module.c
src/mail/ngx_mail_core_module.c
src/mail/ngx_mail_handler.c
src/mail/ngx_mail_imap_handler.c
src/mail/ngx_mail_imap_module.c
src/mail/ngx_mail_imap_module.h
src/mail/ngx_mail_parse.c
src/mail/ngx_mail_pop3_handler.c
src/mail/ngx_mail_pop3_module.c
src/mail/ngx_mail_pop3_module.h
src/mail/ngx_mail_proxy_module.c
src/mail/ngx_mail_smtp_handler.c
src/mail/ngx_mail_smtp_module.c
src/mail/ngx_mail_smtp_module.h
src/mail/ngx_mail_ssl_module.c
src/mail/ngx_mail_ssl_module.h
src/misc/ngx_cpp_test_module.cpp
src/misc/ngx_google_perftools_module.c
src/os/unix/ngx_aio_read.c
src/os/unix/ngx_aio_read_chain.c
src/os/unix/ngx_aio_write.c
src/os/unix/ngx_aio_write_chain.c
src/os/unix/ngx_alloc.c
src/os/unix/ngx_alloc.h
src/os/unix/ngx_atomic.h
src/os/unix/ngx_channel.c
src/os/unix/ngx_channel.h
src/os/unix/ngx_daemon.c
src/os/unix/ngx_darwin.h
src/os/unix/ngx_darwin_config.h
src/os/unix/ngx_darwin_init.c
src/os/unix/ngx_darwin_sendfile_chain.c
src/os/unix/ngx_errno.c
src/os/unix/ngx_errno.h
src/os/unix/ngx_file_aio_read.c
src/os/unix/ngx_files.c
src/os/unix/ngx_files.h
src/os/unix/ngx_freebsd.h
src/os/unix/ngx_freebsd_config.h
src/os/unix/ngx_freebsd_init.c
src/os/unix/ngx_freebsd_sendfile_chain.c
src/os/unix/ngx_gcc_atomic_amd64.h
src/os/unix/ngx_gcc_atomic_ppc.h
src/os/unix/ngx_gcc_atomic_sparc64.h
src/os/unix/ngx_gcc_atomic_x86.h
src/os/unix/ngx_linux.h
src/os/unix/ngx_linux_aio_read.c
src/os/unix/ngx_linux_config.h
src/os/unix/ngx_linux_init.c
src/os/unix/ngx_linux_sendfile_chain.c
src/os/unix/ngx_os.h
src/os/unix/ngx_posix_config.h
src/os/unix/ngx_posix_init.c
src/os/unix/ngx_process.c
src/os/unix/ngx_process.h
src/os/unix/ngx_process_cycle.c
src/os/unix/ngx_process_cycle.h
src/os/unix/ngx_readv_chain.c
src/os/unix/ngx_recv.c
src/os/unix/ngx_send.c
src/os/unix/ngx_setaffinity.c
src/os/unix/ngx_setaffinity.h
src/os/unix/ngx_setproctitle.c
src/os/unix/ngx_setproctitle.h
src/os/unix/ngx_shmem.c
src/os/unix/ngx_shmem.h
src/os/unix/ngx_socket.c
src/os/unix/ngx_socket.h
src/os/unix/ngx_solaris.h
src/os/unix/ngx_solaris_config.h
src/os/unix/ngx_solaris_init.c
src/os/unix/ngx_solaris_sendfilev_chain.c
src/os/unix/ngx_sunpro_atomic_sparc64.h
src/os/unix/ngx_thread.h
src/os/unix/ngx_thread_cond.c
src/os/unix/ngx_thread_id.c
src/os/unix/ngx_thread_mutex.c
src/os/unix/ngx_time.c
src/os/unix/ngx_time.h
src/os/unix/ngx_udp_recv.c
src/os/unix/ngx_user.c
src/os/unix/ngx_user.h
src/os/unix/ngx_writev_chain.c
zlib-1.2.8/adler32.c
zlib-1.2.8/compress.c
zlib-1.2.8/contrib/blast/blast.c
zlib-1.2.8/contrib/blast/blast.h
zlib-1.2.8/contrib/infback9/infback9.c
zlib-1.2.8/contrib/infback9/infback9.h
zlib-1.2.8/contrib/infback9/inffix9.h
zlib-1.2.8/contrib/infback9/inflate9.h
zlib-1.2.8/contrib/infback9/inftree9.c
zlib-1.2.8/contrib/infback9/inftree9.h
zlib-1.2.8/contrib/inflate86/inffas86.c
zlib-1.2.8/contrib/iostream/test.cpp
zlib-1.2.8/contrib/iostream/zfstream.cpp
zlib-1.2.8/contrib/iostream/zfstream.h
zlib-1.2.8/contrib/iostream2/zstream.h
zlib-1.2.8/contrib/iostream2/zstream_test.cpp
zlib-1.2.8/contrib/iostream3/test.cc
zlib-1.2.8/contrib/iostream3/zfstream.cc
zlib-1.2.8/contrib/iostream3/zfstream.h
zlib-1.2.8/contrib/masmx64/inffas8664.c
zlib-1.2.8/contrib/minizip/crypt.h
zlib-1.2.8/contrib/minizip/ioapi.c
zlib-1.2.8/contrib/minizip/ioapi.h
zlib-1.2.8/contrib/minizip/iowin32.c
zlib-1.2.8/contrib/minizip/iowin32.h
zlib-1.2.8/contrib/minizip/miniunz.c
zlib-1.2.8/contrib/minizip/minizip.c
zlib-1.2.8/contrib/minizip/mztools.c
zlib-1.2.8/contrib/minizip/mztools.h
zlib-1.2.8/contrib/minizip/unzip.c
zlib-1.2.8/contrib/minizip/unzip.h
zlib-1.2.8/contrib/minizip/zip.c
zlib-1.2.8/contrib/minizip/zip.h
zlib-1.2.8/contrib/puff/puff.c
zlib-1.2.8/contrib/puff/puff.h
zlib-1.2.8/contrib/puff/pufftest.c
zlib-1.2.8/contrib/testzlib/testzlib.c
zlib-1.2.8/contrib/untgz/untgz.c
zlib-1.2.8/crc32.c
zlib-1.2.8/crc32.h
zlib-1.2.8/deflate.c
zlib-1.2.8/deflate.h
zlib-1.2.8/examples/enough.c
zlib-1.2.8/examples/fitblk.c
zlib-1.2.8/examples/gun.c
zlib-1.2.8/examples/gzappend.c
zlib-1.2.8/examples/gzjoin.c
zlib-1.2.8/examples/gzlog.c
zlib-1.2.8/examples/gzlog.h
zlib-1.2.8/examples/zpipe.c
zlib-1.2.8/examples/zran.c
zlib-1.2.8/gzclose.c
zlib-1.2.8/gzguts.h
zlib-1.2.8/gzlib.c
zlib-1.2.8/gzread.c
zlib-1.2.8/gzwrite.c
zlib-1.2.8/infback.c
zlib-1.2.8/inffast.c
zlib-1.2.8/inffast.h
zlib-1.2.8/inffixed.h
zlib-1.2.8/inflate.c
zlib-1.2.8/inflate.h
zlib-1.2.8/inftrees.c
zlib-1.2.8/inftrees.h
zlib-1.2.8/test/example.c
zlib-1.2.8/test/infcover.c
zlib-1.2.8/test/minigzip.c
zlib-1.2.8/trees.c
zlib-1.2.8/trees.h
zlib-1.2.8/uncompr.c
zlib-1.2.8/zconf.h
zlib-1.2.8/zlib.h
zlib-1.2.8/zutil.c
zlib-1.2.8/zutil.h
/usr/include/aio.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/crypt.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/glob.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/aio_abi.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utime.h
/usr/include/xlocale.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/types.h
/usr/include/rpc/netdb.h
/usr/include/_G_config.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/wctype.h
